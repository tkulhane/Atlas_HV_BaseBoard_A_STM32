
Atlas_HV_BaseBoard_A_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001830  0800e598  0800e598  0001e598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fdc8  0800fdc8  00020298  2**0
                  CONTENTS
  4 .ARM          00000008  0800fdc8  0800fdc8  0001fdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fdd0  0800fdd0  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fdd0  0800fdd0  0001fdd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fdd4  0800fdd4  0001fdd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  0800fdd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002be4  20000298  08010070  00020298  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e7c  08010070  00022e7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e503  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005311  00000000  00000000  0003e7cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001aa8  00000000  00000000  00043ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001878  00000000  00000000  00045588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb15  00000000  00000000  00046e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027c6c  00000000  00000000  00066915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a61b1  00000000  00000000  0008e581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134732  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008268  00000000  00000000  00134784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000298 	.word	0x20000298
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e57c 	.word	0x0800e57c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000029c 	.word	0x2000029c
 80001dc:	0800e57c 	.word	0x0800e57c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <application_main>:




void application_main()
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0

		app_leds_init();
 800100e:	f001 fba1 	bl	8002754 <app_leds_init>

		ParamsDefaultValues();
 8001012:	f002 fe69 	bl	8003ce8 <ParamsDefaultValues>
		ParamsLoad();
 8001016:	f002 ff1f 	bl	8003e58 <ParamsLoad>



	  //hand address for ADC data store
	  p_ADC_data[0] = &ChannelsStatus[0].voltage_measurement;
 800101a:	4b54      	ldr	r3, [pc, #336]	; (800116c <application_main+0x164>)
 800101c:	4a54      	ldr	r2, [pc, #336]	; (8001170 <application_main+0x168>)
 800101e:	601a      	str	r2, [r3, #0]
	  p_ADC_data[1] = &ChannelsStatus[1].voltage_measurement;
 8001020:	4b52      	ldr	r3, [pc, #328]	; (800116c <application_main+0x164>)
 8001022:	4a54      	ldr	r2, [pc, #336]	; (8001174 <application_main+0x16c>)
 8001024:	605a      	str	r2, [r3, #4]
	  p_ADC_data[2] = &ChannelsStatus[2].voltage_measurement;
 8001026:	4b51      	ldr	r3, [pc, #324]	; (800116c <application_main+0x164>)
 8001028:	4a53      	ldr	r2, [pc, #332]	; (8001178 <application_main+0x170>)
 800102a:	609a      	str	r2, [r3, #8]
	  p_ADC_data[3] = &ChannelsStatus[0].current_measurement;
 800102c:	4b4f      	ldr	r3, [pc, #316]	; (800116c <application_main+0x164>)
 800102e:	4a53      	ldr	r2, [pc, #332]	; (800117c <application_main+0x174>)
 8001030:	60da      	str	r2, [r3, #12]
	  p_ADC_data[4] = &ChannelsStatus[1].current_measurement;
 8001032:	4b4e      	ldr	r3, [pc, #312]	; (800116c <application_main+0x164>)
 8001034:	4a52      	ldr	r2, [pc, #328]	; (8001180 <application_main+0x178>)
 8001036:	611a      	str	r2, [r3, #16]
	  p_ADC_data[5] = &ChannelsStatus[2].current_measurement;
 8001038:	4b4c      	ldr	r3, [pc, #304]	; (800116c <application_main+0x164>)
 800103a:	4a52      	ldr	r2, [pc, #328]	; (8001184 <application_main+0x17c>)
 800103c:	615a      	str	r2, [r3, #20]

	  //hand address for error signals store
	  p_ERROR_data[0] = &ChannelsStatus[0].power_good;
 800103e:	4b52      	ldr	r3, [pc, #328]	; (8001188 <application_main+0x180>)
 8001040:	4a52      	ldr	r2, [pc, #328]	; (800118c <application_main+0x184>)
 8001042:	601a      	str	r2, [r3, #0]
	  p_ERROR_data[1] = &ChannelsStatus[1].power_good;
 8001044:	4b50      	ldr	r3, [pc, #320]	; (8001188 <application_main+0x180>)
 8001046:	4a52      	ldr	r2, [pc, #328]	; (8001190 <application_main+0x188>)
 8001048:	605a      	str	r2, [r3, #4]
	  p_ERROR_data[2] = &ChannelsStatus[2].power_good;
 800104a:	4b4f      	ldr	r3, [pc, #316]	; (8001188 <application_main+0x180>)
 800104c:	4a51      	ldr	r2, [pc, #324]	; (8001194 <application_main+0x18c>)
 800104e:	609a      	str	r2, [r3, #8]
	  p_ERROR_data[3] = &ChannelsStatus[0].over_current;
 8001050:	4b4d      	ldr	r3, [pc, #308]	; (8001188 <application_main+0x180>)
 8001052:	4a51      	ldr	r2, [pc, #324]	; (8001198 <application_main+0x190>)
 8001054:	60da      	str	r2, [r3, #12]
	  p_ERROR_data[4] = &ChannelsStatus[1].over_current;
 8001056:	4b4c      	ldr	r3, [pc, #304]	; (8001188 <application_main+0x180>)
 8001058:	4a50      	ldr	r2, [pc, #320]	; (800119c <application_main+0x194>)
 800105a:	611a      	str	r2, [r3, #16]
	  p_ERROR_data[5] = &ChannelsStatus[2].over_current;
 800105c:	4b4a      	ldr	r3, [pc, #296]	; (8001188 <application_main+0x180>)
 800105e:	4a50      	ldr	r2, [pc, #320]	; (80011a0 <application_main+0x198>)
 8001060:	615a      	str	r2, [r3, #20]

	  HAL_GPIO_WritePin(PWR_EN_GPIO_Port, PWR_EN_Pin, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001068:	484e      	ldr	r0, [pc, #312]	; (80011a4 <application_main+0x19c>)
 800106a:	f005 fbc1 	bl	80067f0 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(W55_RST_GPIO_Port, W55_RST_Pin, GPIO_PIN_SET);
 800106e:	2201      	movs	r2, #1
 8001070:	2108      	movs	r1, #8
 8001072:	484c      	ldr	r0, [pc, #304]	; (80011a4 <application_main+0x19c>)
 8001074:	f005 fbbc 	bl	80067f0 <HAL_GPIO_WritePin>
	  ETH_udp_Init();
 8001078:	f003 f95e 	bl	8004338 <ETH_udp_Init>

	  __HAL_UART_ENABLE_IT(&huart2, UART_IT_ERR);
 800107c:	4b4a      	ldr	r3, [pc, #296]	; (80011a8 <application_main+0x1a0>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	695a      	ldr	r2, [r3, #20]
 8001082:	4b49      	ldr	r3, [pc, #292]	; (80011a8 <application_main+0x1a0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f042 0201 	orr.w	r2, r2, #1
 800108a:	615a      	str	r2, [r3, #20]
	  __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);//enable uart3 interupt
 800108c:	4b46      	ldr	r3, [pc, #280]	; (80011a8 <application_main+0x1a0>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	4b45      	ldr	r3, [pc, #276]	; (80011a8 <application_main+0x1a0>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 0220 	orr.w	r2, r2, #32
 800109a:	60da      	str	r2, [r3, #12]

	  DAC_Init();
 800109c:	f002 ffea 	bl	8004074 <DAC_Init>
	  HAL_TIM_Base_Start_IT(&htim10); //start timer for ADC reading
 80010a0:	4842      	ldr	r0, [pc, #264]	; (80011ac <application_main+0x1a4>)
 80010a2:	f006 ff53 	bl	8007f4c <HAL_TIM_Base_Start_IT>
	  //_ControlOutputWithChannelEnable = true;

	  uint32_t timer;


	  Set_Voltage(0, minimum_voltage);
 80010a6:	211e      	movs	r1, #30
 80010a8:	2000      	movs	r0, #0
 80010aa:	f001 fe3b 	bl	8002d24 <Set_Voltage>
	  Set_Voltage(1, minimum_voltage);
 80010ae:	211e      	movs	r1, #30
 80010b0:	2001      	movs	r0, #1
 80010b2:	f001 fe37 	bl	8002d24 <Set_Voltage>
	  Set_Voltage(2, minimum_voltage);
 80010b6:	211e      	movs	r1, #30
 80010b8:	2002      	movs	r0, #2
 80010ba:	f001 fe33 	bl	8002d24 <Set_Voltage>

	  while(1)
	  {

		  app_leds_drive();
 80010be:	f001 fba1 	bl	8002804 <app_leds_drive>

		  //ethernet
		  ETH_udp_Receive();
 80010c2:	f003 f9b5 	bl	8004430 <ETH_udp_Receive>

		  ErrorSignalTime();
 80010c6:	f000 ff3b 	bl	8001f40 <ErrorSignalTime>

		  //errors
		  if(_Found_Error && MainParams.sramOffset_EnableErrorExecute)
 80010ca:	4b39      	ldr	r3, [pc, #228]	; (80011b0 <application_main+0x1a8>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00f      	beq.n	80010f2 <application_main+0xea>
 80010d2:	4b38      	ldr	r3, [pc, #224]	; (80011b4 <application_main+0x1ac>)
 80010d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00b      	beq.n	80010f2 <application_main+0xea>
		  //if(_Found_Error)
		  {
			  ErrorExecute(0);
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 fefa 	bl	8001ed4 <ErrorExecute>
			  ErrorExecute(1);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f000 fef7 	bl	8001ed4 <ErrorExecute>
			  ErrorExecute(2);
 80010e6:	2002      	movs	r0, #2
 80010e8:	f000 fef4 	bl	8001ed4 <ErrorExecute>

			  _Found_Error = false;
 80010ec:	4b30      	ldr	r3, [pc, #192]	; (80011b0 <application_main+0x1a8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
		  }

		  ChannelControl(0);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f002 fa68 	bl	80035c8 <ChannelControl>
		  ChannelControl(1);
 80010f8:	2001      	movs	r0, #1
 80010fa:	f002 fa65 	bl	80035c8 <ChannelControl>
		  ChannelControl(2);
 80010fe:	2002      	movs	r0, #2
 8001100:	f002 fa62 	bl	80035c8 <ChannelControl>



		  bool NewCommand_uart = ProcessCommunication_UART(); //load command from uart buffer
 8001104:	f000 fcc2 	bl	8001a8c <ProcessCommunication_UART>
 8001108:	4603      	mov	r3, r0
 800110a:	70fb      	strb	r3, [r7, #3]

		  //process command from uart
		  if(NewCommand_uart)
 800110c:	78fb      	ldrb	r3, [r7, #3]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d004      	beq.n	800111c <application_main+0x114>
		  {
			  //HAL_GPIO_WritePin(LED_green_GPIO_Port, LED_green_Pin, GPIO_PIN_SET);
			  ProcessCommand(_command_id);
 8001112:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <application_main+0x1b0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f866 	bl	80011e8 <ProcessCommand>
			  //HAL_GPIO_WritePin(LED_green_GPIO_Port, LED_green_Pin, GPIO_PIN_RESET);
		  }


		  bool NewCommand_eth = ProcessCommunication_ETH(); //load command from ethernet buffer
 800111c:	f000 fd26 	bl	8001b6c <ProcessCommunication_ETH>
 8001120:	4603      	mov	r3, r0
 8001122:	70bb      	strb	r3, [r7, #2]

		  //process command from ethernet
		  if(NewCommand_eth)
 8001124:	78bb      	ldrb	r3, [r7, #2]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d004      	beq.n	8001134 <application_main+0x12c>
		  {
			  //HAL_GPIO_WritePin(LED_blue_GPIO_Port, LED_blue_Pin, GPIO_PIN_SET);
			  ProcessCommand(_command_id);
 800112a:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <application_main+0x1b0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f85a 	bl	80011e8 <ProcessCommand>
			  //HAL_GPIO_WritePin(LED_blue_GPIO_Port, LED_blue_Pin, GPIO_PIN_RESET);
		  }


		  //connection control
		  Communication_ConnectedTimer();
 8001134:	f000 feba 	bl	8001eac <Communication_ConnectedTimer>
		  AppConnectedExecute(_AppConnected);
 8001138:	4b20      	ldr	r3, [pc, #128]	; (80011bc <application_main+0x1b4>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f001 f867 	bl	8002210 <AppConnectedExecute>


		  if((HAL_GetTick() - timer) > 200)
 8001142:	f004 fb35 	bl	80057b0 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2bc8      	cmp	r3, #200	; 0xc8
 800114e:	d9b6      	bls.n	80010be <application_main+0xb6>
		  {
			  timer = HAL_GetTick();
 8001150:	f004 fb2e 	bl	80057b0 <HAL_GetTick>
 8001154:	6078      	str	r0, [r7, #4]
			  AdaptiveVoltageTune(0);
 8001156:	2000      	movs	r0, #0
 8001158:	f002 fc76 	bl	8003a48 <AdaptiveVoltageTune>
			  AdaptiveVoltageTune(1);
 800115c:	2001      	movs	r0, #1
 800115e:	f002 fc73 	bl	8003a48 <AdaptiveVoltageTune>
			  AdaptiveVoltageTune(2);
 8001162:	2002      	movs	r0, #2
 8001164:	f002 fc70 	bl	8003a48 <AdaptiveVoltageTune>
	  {
 8001168:	e7a9      	b.n	80010be <application_main+0xb6>
 800116a:	bf00      	nop
 800116c:	20001980 	.word	0x20001980
 8001170:	200019e4 	.word	0x200019e4
 8001174:	200019f8 	.word	0x200019f8
 8001178:	20001a0c 	.word	0x20001a0c
 800117c:	200019e8 	.word	0x200019e8
 8001180:	200019fc 	.word	0x200019fc
 8001184:	20001a10 	.word	0x20001a10
 8001188:	20000300 	.word	0x20000300
 800118c:	200019ed 	.word	0x200019ed
 8001190:	20001a01 	.word	0x20001a01
 8001194:	20001a15 	.word	0x20001a15
 8001198:	200019ec 	.word	0x200019ec
 800119c:	20001a00 	.word	0x20001a00
 80011a0:	20001a14 	.word	0x20001a14
 80011a4:	40020400 	.word	0x40020400
 80011a8:	20002de0 	.word	0x20002de0
 80011ac:	20002d98 	.word	0x20002d98
 80011b0:	20000318 	.word	0x20000318
 80011b4:	20001a88 	.word	0x20001a88
 80011b8:	200002bc 	.word	0x200002bc
 80011bc:	200002b8 	.word	0x200002b8

080011c0 <HAL_TIM_PeriodElapsedCallback>:
/* @brief callback of timer period elapsed -> for ADC measure and read error signals
 *
 *
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	if(htim == &htim10)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a06      	ldr	r2, [pc, #24]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d105      	bne.n	80011dc <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		ReadADCChannels();
 80011d0:	f001 f99e 	bl	8002510 <ReadADCChannels>
		ADCStore();
 80011d4:	f001 f9be 	bl	8002554 <ADCStore>
		ErrorSignalsRead();
 80011d8:	f000 ff6c 	bl	80020b4 <ErrorSignalsRead>
	}
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20002d98 	.word	0x20002d98

080011e8 <ProcessCommand>:
 * @param command_id -> number of data command
 * @param value -> value for control
 *
 */
void ProcessCommand(int command_id)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	switch(command_id)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b61      	cmp	r3, #97	; 0x61
 80011f4:	f200 82b0 	bhi.w	8001758 <ProcessCommand+0x570>
 80011f8:	a201      	add	r2, pc, #4	; (adr r2, 8001200 <ProcessCommand+0x18>)
 80011fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fe:	bf00      	nop
 8001200:	08001389 	.word	0x08001389
 8001204:	0800138f 	.word	0x0800138f
 8001208:	080013a1 	.word	0x080013a1
 800120c:	080013b9 	.word	0x080013b9
 8001210:	080013d1 	.word	0x080013d1
 8001214:	080013e9 	.word	0x080013e9
 8001218:	08001401 	.word	0x08001401
 800121c:	08001419 	.word	0x08001419
 8001220:	08001431 	.word	0x08001431
 8001224:	08001441 	.word	0x08001441
 8001228:	08001451 	.word	0x08001451
 800122c:	08001461 	.word	0x08001461
 8001230:	08001487 	.word	0x08001487
 8001234:	080014ad 	.word	0x080014ad
 8001238:	08001759 	.word	0x08001759
 800123c:	08001759 	.word	0x08001759
 8001240:	08001759 	.word	0x08001759
 8001244:	08001759 	.word	0x08001759
 8001248:	08001759 	.word	0x08001759
 800124c:	08001759 	.word	0x08001759
 8001250:	080014eb 	.word	0x080014eb
 8001254:	080014e5 	.word	0x080014e5
 8001258:	080014d3 	.word	0x080014d3
 800125c:	08001759 	.word	0x08001759
 8001260:	080014d9 	.word	0x080014d9
 8001264:	080014f1 	.word	0x080014f1
 8001268:	080014fd 	.word	0x080014fd
 800126c:	08001509 	.word	0x08001509
 8001270:	08001515 	.word	0x08001515
 8001274:	08001521 	.word	0x08001521
 8001278:	0800152d 	.word	0x0800152d
 800127c:	08001759 	.word	0x08001759
 8001280:	08001759 	.word	0x08001759
 8001284:	08001759 	.word	0x08001759
 8001288:	08001759 	.word	0x08001759
 800128c:	08001759 	.word	0x08001759
 8001290:	08001539 	.word	0x08001539
 8001294:	0800153f 	.word	0x0800153f
 8001298:	08001551 	.word	0x08001551
 800129c:	08001563 	.word	0x08001563
 80012a0:	08001575 	.word	0x08001575
 80012a4:	08001587 	.word	0x08001587
 80012a8:	08001599 	.word	0x08001599
 80012ac:	080015ab 	.word	0x080015ab
 80012b0:	080015bd 	.word	0x080015bd
 80012b4:	080015cf 	.word	0x080015cf
 80012b8:	080015e1 	.word	0x080015e1
 80012bc:	080015f3 	.word	0x080015f3
 80012c0:	08001605 	.word	0x08001605
 80012c4:	08001759 	.word	0x08001759
 80012c8:	08001759 	.word	0x08001759
 80012cc:	08001759 	.word	0x08001759
 80012d0:	08001759 	.word	0x08001759
 80012d4:	08001759 	.word	0x08001759
 80012d8:	08001759 	.word	0x08001759
 80012dc:	08001759 	.word	0x08001759
 80012e0:	08001759 	.word	0x08001759
 80012e4:	08001759 	.word	0x08001759
 80012e8:	08001759 	.word	0x08001759
 80012ec:	08001759 	.word	0x08001759
 80012f0:	08001759 	.word	0x08001759
 80012f4:	08001617 	.word	0x08001617
 80012f8:	08001629 	.word	0x08001629
 80012fc:	0800163b 	.word	0x0800163b
 8001300:	0800164d 	.word	0x0800164d
 8001304:	0800166d 	.word	0x0800166d
 8001308:	0800167f 	.word	0x0800167f
 800130c:	08001759 	.word	0x08001759
 8001310:	08001759 	.word	0x08001759
 8001314:	08001759 	.word	0x08001759
 8001318:	08001759 	.word	0x08001759
 800131c:	08001759 	.word	0x08001759
 8001320:	08001759 	.word	0x08001759
 8001324:	08001691 	.word	0x08001691
 8001328:	08001697 	.word	0x08001697
 800132c:	0800169d 	.word	0x0800169d
 8001330:	080016ad 	.word	0x080016ad
 8001334:	080016bd 	.word	0x080016bd
 8001338:	080016cd 	.word	0x080016cd
 800133c:	080016dd 	.word	0x080016dd
 8001340:	080016ed 	.word	0x080016ed
 8001344:	08001759 	.word	0x08001759
 8001348:	08001759 	.word	0x08001759
 800134c:	08001759 	.word	0x08001759
 8001350:	080016fd 	.word	0x080016fd
 8001354:	08001703 	.word	0x08001703
 8001358:	08001711 	.word	0x08001711
 800135c:	0800171f 	.word	0x0800171f
 8001360:	0800172d 	.word	0x0800172d
 8001364:	08001759 	.word	0x08001759
 8001368:	08001759 	.word	0x08001759
 800136c:	08001759 	.word	0x08001759
 8001370:	08001759 	.word	0x08001759
 8001374:	0800173b 	.word	0x0800173b
 8001378:	08001741 	.word	0x08001741
 800137c:	08001747 	.word	0x08001747
 8001380:	08001753 	.word	0x08001753
 8001384:	0800174d 	.word	0x0800174d
	{
		case cmd_NON:
			GetDiff();
 8001388:	f002 fc70 	bl	8003c6c <GetDiff>
			break;
 800138c:	e1eb      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_Connected:

			//if(_command_source == csource_ETH) ETH_udp_StoreEndpoint();
			Comunication_ResetConnectedTimer();
 800138e:	f000 fd7d 	bl	8001e8c <Comunication_ResetConnectedTimer>
			SendCommunication(cmd_Connected,_command_value);
 8001392:	4bb3      	ldr	r3, [pc, #716]	; (8001660 <ProcessCommand+0x478>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4619      	mov	r1, r3
 8001398:	2001      	movs	r0, #1
 800139a:	f000 fc51 	bl	8001c40 <SendCommunication>
			break;
 800139e:	e1e2      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_enable_CH1:
			Channel_Enable(0, _command_value);
 80013a0:	4baf      	ldr	r3, [pc, #700]	; (8001660 <ProcessCommand+0x478>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	bf14      	ite	ne
 80013a8:	2301      	movne	r3, #1
 80013aa:	2300      	moveq	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	4619      	mov	r1, r3
 80013b0:	2000      	movs	r0, #0
 80013b2:	f001 fea5 	bl	8003100 <Channel_Enable>
			break;
 80013b6:	e1d6      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_enable_CH2:
			Channel_Enable(1, _command_value);
 80013b8:	4ba9      	ldr	r3, [pc, #676]	; (8001660 <ProcessCommand+0x478>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	bf14      	ite	ne
 80013c0:	2301      	movne	r3, #1
 80013c2:	2300      	moveq	r3, #0
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4619      	mov	r1, r3
 80013c8:	2001      	movs	r0, #1
 80013ca:	f001 fe99 	bl	8003100 <Channel_Enable>
			break;
 80013ce:	e1ca      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_enable_CH3:
			Channel_Enable(2, _command_value);
 80013d0:	4ba3      	ldr	r3, [pc, #652]	; (8001660 <ProcessCommand+0x478>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	bf14      	ite	ne
 80013d8:	2301      	movne	r3, #1
 80013da:	2300      	moveq	r3, #0
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	4619      	mov	r1, r3
 80013e0:	2002      	movs	r0, #2
 80013e2:	f001 fe8d 	bl	8003100 <Channel_Enable>
			break;
 80013e6:	e1be      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_output_CH1:
			Channel_Output(0, _command_value);
 80013e8:	4b9d      	ldr	r3, [pc, #628]	; (8001660 <ProcessCommand+0x478>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	bf14      	ite	ne
 80013f0:	2301      	movne	r3, #1
 80013f2:	2300      	moveq	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	4619      	mov	r1, r3
 80013f8:	2000      	movs	r0, #0
 80013fa:	f002 f885 	bl	8003508 <Channel_Output>
			break;
 80013fe:	e1b2      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_output_CH2:
			Channel_Output(1, _command_value);
 8001400:	4b97      	ldr	r3, [pc, #604]	; (8001660 <ProcessCommand+0x478>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	bf14      	ite	ne
 8001408:	2301      	movne	r3, #1
 800140a:	2300      	moveq	r3, #0
 800140c:	b2db      	uxtb	r3, r3
 800140e:	4619      	mov	r1, r3
 8001410:	2001      	movs	r0, #1
 8001412:	f002 f879 	bl	8003508 <Channel_Output>
			break;
 8001416:	e1a6      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_output_CH3:
			Channel_Output(2, _command_value);
 8001418:	4b91      	ldr	r3, [pc, #580]	; (8001660 <ProcessCommand+0x478>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	bf14      	ite	ne
 8001420:	2301      	movne	r3, #1
 8001422:	2300      	moveq	r3, #0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	4619      	mov	r1, r3
 8001428:	2002      	movs	r0, #2
 800142a:	f002 f86d 	bl	8003508 <Channel_Output>
			break;
 800142e:	e19a      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_set_voltage_CH1:
			Set_Voltage(0, _command_value);
 8001430:	4b8b      	ldr	r3, [pc, #556]	; (8001660 <ProcessCommand+0x478>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	b29b      	uxth	r3, r3
 8001436:	4619      	mov	r1, r3
 8001438:	2000      	movs	r0, #0
 800143a:	f001 fc73 	bl	8002d24 <Set_Voltage>
			break;
 800143e:	e192      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_set_voltage_CH2:
			Set_Voltage(1, _command_value);
 8001440:	4b87      	ldr	r3, [pc, #540]	; (8001660 <ProcessCommand+0x478>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	b29b      	uxth	r3, r3
 8001446:	4619      	mov	r1, r3
 8001448:	2001      	movs	r0, #1
 800144a:	f001 fc6b 	bl	8002d24 <Set_Voltage>
			break;
 800144e:	e18a      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_set_voltage_CH3:
			Set_Voltage(2, _command_value);
 8001450:	4b83      	ldr	r3, [pc, #524]	; (8001660 <ProcessCommand+0x478>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	b29b      	uxth	r3, r3
 8001456:	4619      	mov	r1, r3
 8001458:	2002      	movs	r0, #2
 800145a:	f001 fc63 	bl	8002d24 <Set_Voltage>
			break;
 800145e:	e182      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_polarity_CH1:
			if(_command_value == 1)Channel_Polarity(0, polarity_positive);
 8001460:	4b7f      	ldr	r3, [pc, #508]	; (8001660 <ProcessCommand+0x478>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d104      	bne.n	8001472 <ProcessCommand+0x28a>
 8001468:	2100      	movs	r1, #0
 800146a:	2000      	movs	r0, #0
 800146c:	f001 ffde 	bl	800342c <Channel_Polarity>
			else if (_command_value == 2)Channel_Polarity(0, polarity_negative);
			break;
 8001470:	e174      	b.n	800175c <ProcessCommand+0x574>
			else if (_command_value == 2)Channel_Polarity(0, polarity_negative);
 8001472:	4b7b      	ldr	r3, [pc, #492]	; (8001660 <ProcessCommand+0x478>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b02      	cmp	r3, #2
 8001478:	f040 8170 	bne.w	800175c <ProcessCommand+0x574>
 800147c:	2101      	movs	r1, #1
 800147e:	2000      	movs	r0, #0
 8001480:	f001 ffd4 	bl	800342c <Channel_Polarity>
			break;
 8001484:	e16a      	b.n	800175c <ProcessCommand+0x574>

		case cmd_polarity_CH2:
			if(_command_value == 1)Channel_Polarity(1, polarity_positive);
 8001486:	4b76      	ldr	r3, [pc, #472]	; (8001660 <ProcessCommand+0x478>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d104      	bne.n	8001498 <ProcessCommand+0x2b0>
 800148e:	2100      	movs	r1, #0
 8001490:	2001      	movs	r0, #1
 8001492:	f001 ffcb 	bl	800342c <Channel_Polarity>
			else if (_command_value == 2)Channel_Polarity(1, polarity_negative);
			break;
 8001496:	e163      	b.n	8001760 <ProcessCommand+0x578>
			else if (_command_value == 2)Channel_Polarity(1, polarity_negative);
 8001498:	4b71      	ldr	r3, [pc, #452]	; (8001660 <ProcessCommand+0x478>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b02      	cmp	r3, #2
 800149e:	f040 815f 	bne.w	8001760 <ProcessCommand+0x578>
 80014a2:	2101      	movs	r1, #1
 80014a4:	2001      	movs	r0, #1
 80014a6:	f001 ffc1 	bl	800342c <Channel_Polarity>
			break;
 80014aa:	e159      	b.n	8001760 <ProcessCommand+0x578>

		case cmd_polarity_CH3:
			if(_command_value == 1)Channel_Polarity(2, polarity_positive);
 80014ac:	4b6c      	ldr	r3, [pc, #432]	; (8001660 <ProcessCommand+0x478>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d104      	bne.n	80014be <ProcessCommand+0x2d6>
 80014b4:	2100      	movs	r1, #0
 80014b6:	2002      	movs	r0, #2
 80014b8:	f001 ffb8 	bl	800342c <Channel_Polarity>
			else if (_command_value == 2)Channel_Polarity(2, polarity_negative);
			break;
 80014bc:	e152      	b.n	8001764 <ProcessCommand+0x57c>
			else if (_command_value == 2)Channel_Polarity(2, polarity_negative);
 80014be:	4b68      	ldr	r3, [pc, #416]	; (8001660 <ProcessCommand+0x478>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	f040 814e 	bne.w	8001764 <ProcessCommand+0x57c>
 80014c8:	2101      	movs	r1, #1
 80014ca:	2002      	movs	r0, #2
 80014cc:	f001 ffae 	bl	800342c <Channel_Polarity>
			break;
 80014d0:	e148      	b.n	8001764 <ProcessCommand+0x57c>

		case cmd_getsetting:
			Get_Setting();
 80014d2:	f002 fa0f 	bl	80038f4 <Get_Setting>
			break;
 80014d6:	e146      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_LED:
			LedSwitch(_command_value);
 80014d8:	4b61      	ldr	r3, [pc, #388]	; (8001660 <ProcessCommand+0x478>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f001 f8b1 	bl	8002644 <LedSwitch>
			break;
 80014e2:	e140      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_getallvalues:
			Get_AllMeasurement();
 80014e4:	f002 f9ee 	bl	80038c4 <Get_AllMeasurement>
			//ErrorWatching();
			break;
 80014e8:	e13d      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_error_signals:
			Get_ErrorSignals();
 80014ea:	f002 f9a3 	bl	8003834 <Get_ErrorSignals>
			break;
 80014ee:	e13a      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_ip_store_endpoint:
			ETH_udp_StoreEndpoint(_u32_command_value);
 80014f0:	4b5c      	ldr	r3, [pc, #368]	; (8001664 <ProcessCommand+0x47c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f002 ff5d 	bl	80043b4 <ETH_udp_StoreEndpoint>
			break;
 80014fa:	e134      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_ip_store_mac:
			ETH_StoreMac(_u32_command_value);
 80014fc:	4b59      	ldr	r3, [pc, #356]	; (8001664 <ProcessCommand+0x47c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f002 fdef 	bl	80040e4 <ETH_StoreMac>
			break;
 8001506:	e12e      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_ip_store_myip:
			ETH_StoreIP(_u32_command_value);
 8001508:	4b56      	ldr	r3, [pc, #344]	; (8001664 <ProcessCommand+0x47c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f002 fdf9 	bl	8004104 <ETH_StoreIP>
			break;
 8001512:	e128      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_ip_store_mymask:
			ETH_StoreNETMASK(_u32_command_value);
 8001514:	4b53      	ldr	r3, [pc, #332]	; (8001664 <ProcessCommand+0x47c>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f002 fe03 	bl	8004124 <ETH_StoreNETMASK>
			break;
 800151e:	e122      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_ip_store_mygatew:
			ETH_StoreGATEWAY(_u32_command_value);
 8001520:	4b50      	ldr	r3, [pc, #320]	; (8001664 <ProcessCommand+0x47c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f002 fe0d 	bl	8004144 <ETH_StoreGATEWAY>
			break;
 800152a:	e11c      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_ip_store_UdpRecvPort:
			ETH_Store_UdpRecPort(_u32_command_value);
 800152c:	4b4d      	ldr	r3, [pc, #308]	; (8001664 <ProcessCommand+0x47c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f002 fe17 	bl	8004164 <ETH_Store_UdpRecPort>
			break;
 8001536:	e116      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_ip_getsetting:
			ETH_SendSetting();
 8001538:	f002 fe80 	bl	800423c <ETH_SendSetting>
			break;
 800153c:	e113      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_adc_set_k0:
			StoreADCConstant(0, _float_command_value);
 800153e:	4b4a      	ldr	r3, [pc, #296]	; (8001668 <ProcessCommand+0x480>)
 8001540:	edd3 7a00 	vldr	s15, [r3]
 8001544:	eeb0 0a67 	vmov.f32	s0, s15
 8001548:	2000      	movs	r0, #0
 800154a:	f000 ff3f 	bl	80023cc <StoreADCConstant>
			break;
 800154e:	e10a      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_adc_set_k1:
			StoreADCConstant(1, _float_command_value);
 8001550:	4b45      	ldr	r3, [pc, #276]	; (8001668 <ProcessCommand+0x480>)
 8001552:	edd3 7a00 	vldr	s15, [r3]
 8001556:	eeb0 0a67 	vmov.f32	s0, s15
 800155a:	2001      	movs	r0, #1
 800155c:	f000 ff36 	bl	80023cc <StoreADCConstant>
			break;
 8001560:	e101      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_adc_set_k2:
			StoreADCConstant(2, _float_command_value);
 8001562:	4b41      	ldr	r3, [pc, #260]	; (8001668 <ProcessCommand+0x480>)
 8001564:	edd3 7a00 	vldr	s15, [r3]
 8001568:	eeb0 0a67 	vmov.f32	s0, s15
 800156c:	2002      	movs	r0, #2
 800156e:	f000 ff2d 	bl	80023cc <StoreADCConstant>
			break;
 8001572:	e0f8      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_adc_set_k3:
			StoreADCConstant(3, _float_command_value);
 8001574:	4b3c      	ldr	r3, [pc, #240]	; (8001668 <ProcessCommand+0x480>)
 8001576:	edd3 7a00 	vldr	s15, [r3]
 800157a:	eeb0 0a67 	vmov.f32	s0, s15
 800157e:	2003      	movs	r0, #3
 8001580:	f000 ff24 	bl	80023cc <StoreADCConstant>
			break;
 8001584:	e0ef      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_adc_set_k4:
			StoreADCConstant(4, _float_command_value);
 8001586:	4b38      	ldr	r3, [pc, #224]	; (8001668 <ProcessCommand+0x480>)
 8001588:	edd3 7a00 	vldr	s15, [r3]
 800158c:	eeb0 0a67 	vmov.f32	s0, s15
 8001590:	2004      	movs	r0, #4
 8001592:	f000 ff1b 	bl	80023cc <StoreADCConstant>
			break;
 8001596:	e0e6      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_adc_set_k5:
			StoreADCConstant(5, _float_command_value);
 8001598:	4b33      	ldr	r3, [pc, #204]	; (8001668 <ProcessCommand+0x480>)
 800159a:	edd3 7a00 	vldr	s15, [r3]
 800159e:	eeb0 0a67 	vmov.f32	s0, s15
 80015a2:	2005      	movs	r0, #5
 80015a4:	f000 ff12 	bl	80023cc <StoreADCConstant>
			break;
 80015a8:	e0dd      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_adc_set_q0:
			StoreADCConstant(6, _float_command_value);
 80015aa:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <ProcessCommand+0x480>)
 80015ac:	edd3 7a00 	vldr	s15, [r3]
 80015b0:	eeb0 0a67 	vmov.f32	s0, s15
 80015b4:	2006      	movs	r0, #6
 80015b6:	f000 ff09 	bl	80023cc <StoreADCConstant>
			break;
 80015ba:	e0d4      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_adc_set_q1:
			StoreADCConstant(7, _float_command_value);
 80015bc:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <ProcessCommand+0x480>)
 80015be:	edd3 7a00 	vldr	s15, [r3]
 80015c2:	eeb0 0a67 	vmov.f32	s0, s15
 80015c6:	2007      	movs	r0, #7
 80015c8:	f000 ff00 	bl	80023cc <StoreADCConstant>
			break;
 80015cc:	e0cb      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_adc_set_q2:
			StoreADCConstant(8, _float_command_value);
 80015ce:	4b26      	ldr	r3, [pc, #152]	; (8001668 <ProcessCommand+0x480>)
 80015d0:	edd3 7a00 	vldr	s15, [r3]
 80015d4:	eeb0 0a67 	vmov.f32	s0, s15
 80015d8:	2008      	movs	r0, #8
 80015da:	f000 fef7 	bl	80023cc <StoreADCConstant>
			break;
 80015de:	e0c2      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_adc_set_q3:
			StoreADCConstant(9, _float_command_value);
 80015e0:	4b21      	ldr	r3, [pc, #132]	; (8001668 <ProcessCommand+0x480>)
 80015e2:	edd3 7a00 	vldr	s15, [r3]
 80015e6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ea:	2009      	movs	r0, #9
 80015ec:	f000 feee 	bl	80023cc <StoreADCConstant>
			break;
 80015f0:	e0b9      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_adc_set_q4:
			StoreADCConstant(10, _float_command_value);
 80015f2:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <ProcessCommand+0x480>)
 80015f4:	edd3 7a00 	vldr	s15, [r3]
 80015f8:	eeb0 0a67 	vmov.f32	s0, s15
 80015fc:	200a      	movs	r0, #10
 80015fe:	f000 fee5 	bl	80023cc <StoreADCConstant>
			break;
 8001602:	e0b0      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_adc_set_q5:
			StoreADCConstant(11, _float_command_value);
 8001604:	4b18      	ldr	r3, [pc, #96]	; (8001668 <ProcessCommand+0x480>)
 8001606:	edd3 7a00 	vldr	s15, [r3]
 800160a:	eeb0 0a67 	vmov.f32	s0, s15
 800160e:	200b      	movs	r0, #11
 8001610:	f000 fedc 	bl	80023cc <StoreADCConstant>
			break;
 8001614:	e0a7      	b.n	8001766 <ProcessCommand+0x57e>


		case cmd_dac_set_k0:
			StoreDACConstant(0, _float_command_value);
 8001616:	4b14      	ldr	r3, [pc, #80]	; (8001668 <ProcessCommand+0x480>)
 8001618:	edd3 7a00 	vldr	s15, [r3]
 800161c:	eeb0 0a67 	vmov.f32	s0, s15
 8001620:	2000      	movs	r0, #0
 8001622:	f001 f99d 	bl	8002960 <StoreDACConstant>
			break;
 8001626:	e09e      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_dac_set_k1:
			StoreDACConstant(1, _float_command_value);
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <ProcessCommand+0x480>)
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	eeb0 0a67 	vmov.f32	s0, s15
 8001632:	2001      	movs	r0, #1
 8001634:	f001 f994 	bl	8002960 <StoreDACConstant>
			break;
 8001638:	e095      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_dac_set_k2:
			StoreDACConstant(2, _float_command_value);
 800163a:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <ProcessCommand+0x480>)
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	eeb0 0a67 	vmov.f32	s0, s15
 8001644:	2002      	movs	r0, #2
 8001646:	f001 f98b 	bl	8002960 <StoreDACConstant>
			break;
 800164a:	e08c      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_dac_set_q0:
			StoreDACConstant(3, _float_command_value);
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <ProcessCommand+0x480>)
 800164e:	edd3 7a00 	vldr	s15, [r3]
 8001652:	eeb0 0a67 	vmov.f32	s0, s15
 8001656:	2003      	movs	r0, #3
 8001658:	f001 f982 	bl	8002960 <StoreDACConstant>
			break;
 800165c:	e083      	b.n	8001766 <ProcessCommand+0x57e>
 800165e:	bf00      	nop
 8001660:	200002c0 	.word	0x200002c0
 8001664:	200002c8 	.word	0x200002c8
 8001668:	200002c4 	.word	0x200002c4

		case cmd_dac_set_q1:
			StoreDACConstant(4, _float_command_value);
 800166c:	4b40      	ldr	r3, [pc, #256]	; (8001770 <ProcessCommand+0x588>)
 800166e:	edd3 7a00 	vldr	s15, [r3]
 8001672:	eeb0 0a67 	vmov.f32	s0, s15
 8001676:	2004      	movs	r0, #4
 8001678:	f001 f972 	bl	8002960 <StoreDACConstant>
			break;
 800167c:	e073      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_dac_set_q2:
			StoreDACConstant(5, _float_command_value);
 800167e:	4b3c      	ldr	r3, [pc, #240]	; (8001770 <ProcessCommand+0x588>)
 8001680:	edd3 7a00 	vldr	s15, [r3]
 8001684:	eeb0 0a67 	vmov.f32	s0, s15
 8001688:	2005      	movs	r0, #5
 800168a:	f001 f969 	bl	8002960 <StoreDACConstant>
			break;
 800168e:	e06a      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_adc_getallcoef:
			SendADCCoefficients();
 8001690:	f000 feb4 	bl	80023fc <SendADCCoefficients>
			break;
 8001694:	e067      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_dac_getallcoef:
			SendDACCoefficients();
 8001696:	f001 f97b 	bl	8002990 <SendDACCoefficients>
			break;
 800169a:	e064      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_set_pre_reg_CH1: //debug
			Set_PreReg_Voltage(0, _command_value);
 800169c:	4b35      	ldr	r3, [pc, #212]	; (8001774 <ProcessCommand+0x58c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	4619      	mov	r1, r3
 80016a4:	2000      	movs	r0, #0
 80016a6:	f001 faa1 	bl	8002bec <Set_PreReg_Voltage>
			break;
 80016aa:	e05c      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_set_pre_reg_CH2: //debug
			Set_PreReg_Voltage(1, _command_value);
 80016ac:	4b31      	ldr	r3, [pc, #196]	; (8001774 <ProcessCommand+0x58c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	4619      	mov	r1, r3
 80016b4:	2001      	movs	r0, #1
 80016b6:	f001 fa99 	bl	8002bec <Set_PreReg_Voltage>
			break;
 80016ba:	e054      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_set_pre_reg_CH3: //debug
			Set_PreReg_Voltage(2, _command_value);
 80016bc:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <ProcessCommand+0x58c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	4619      	mov	r1, r3
 80016c4:	2002      	movs	r0, #2
 80016c6:	f001 fa91 	bl	8002bec <Set_PreReg_Voltage>
			break;
 80016ca:	e04c      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_set_out_reg_CH1: //debug
			Set_OutReg_Voltage(0, _command_value);
 80016cc:	4b29      	ldr	r3, [pc, #164]	; (8001774 <ProcessCommand+0x58c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	4619      	mov	r1, r3
 80016d4:	2000      	movs	r0, #0
 80016d6:	f001 fab7 	bl	8002c48 <Set_OutReg_Voltage>
			break;
 80016da:	e044      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_set_out_reg_CH2: //debug
			Set_OutReg_Voltage(1, _command_value);
 80016dc:	4b25      	ldr	r3, [pc, #148]	; (8001774 <ProcessCommand+0x58c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	4619      	mov	r1, r3
 80016e4:	2001      	movs	r0, #1
 80016e6:	f001 faaf 	bl	8002c48 <Set_OutReg_Voltage>
			break;
 80016ea:	e03c      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_set_out_reg_CH3: //debug
			Set_OutReg_Voltage(2, _command_value);
 80016ec:	4b21      	ldr	r3, [pc, #132]	; (8001774 <ProcessCommand+0x58c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	4619      	mov	r1, r3
 80016f4:	2002      	movs	r0, #2
 80016f6:	f001 faa7 	bl	8002c48 <Set_OutReg_Voltage>
			break;
 80016fa:	e034      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_errState_Get:
			Get_State_err();
 80016fc:	f002 f956 	bl	80039ac <Get_State_err>
			break;
 8001700:	e031      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_CfgSet_EnableErrorExecute:
			SetConfigData(0, _command_value);
 8001702:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <ProcessCommand+0x58c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4619      	mov	r1, r3
 8001708:	2000      	movs	r0, #0
 800170a:	f002 fc13 	bl	8003f34 <SetConfigData>
			break;
 800170e:	e02a      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_CfgSet_DisableInConnLost:
			SetConfigData(1, _command_value);
 8001710:	4b18      	ldr	r3, [pc, #96]	; (8001774 <ProcessCommand+0x58c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	2001      	movs	r0, #1
 8001718:	f002 fc0c 	bl	8003f34 <SetConfigData>
			break;
 800171c:	e023      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_CfgSet_CtrlOutWithChEnable:
			SetConfigData(2, _command_value);
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <ProcessCommand+0x58c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4619      	mov	r1, r3
 8001724:	2002      	movs	r0, #2
 8001726:	f002 fc05 	bl	8003f34 <SetConfigData>
			break;
 800172a:	e01c      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_CfgSet_ErrorExecuteAutoRestart:
			SetConfigData(3, _command_value);
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <ProcessCommand+0x58c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4619      	mov	r1, r3
 8001732:	2003      	movs	r0, #3
 8001734:	f002 fbfe 	bl	8003f34 <SetConfigData>
			break;
 8001738:	e015      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_Cfg_Get:
			SendConfigData();
 800173a:	f002 fc11 	bl	8003f60 <SendConfigData>
			break;
 800173e:	e012      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_params_store:
			ParamsStore();
 8001740:	f002 fbc0 	bl	8003ec4 <ParamsStore>
			break;
 8001744:	e00f      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_params_default:
			RestoreParamsDefault();
 8001746:	f002 fbdd 	bl	8003f04 <RestoreParamsDefault>
			break;
 800174a:	e00c      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_reset:
			System_Reset();
 800174c:	f002 f96a 	bl	8003a24 <System_Reset>
			break;
 8001750:	e009      	b.n	8001766 <ProcessCommand+0x57e>

		case cmd_Eth_ReInit:
			ETH_udp_Init();
 8001752:	f002 fdf1 	bl	8004338 <ETH_udp_Init>
			break;
 8001756:	e006      	b.n	8001766 <ProcessCommand+0x57e>


		default:
			break;
 8001758:	bf00      	nop
 800175a:	e004      	b.n	8001766 <ProcessCommand+0x57e>
			break;
 800175c:	bf00      	nop
 800175e:	e002      	b.n	8001766 <ProcessCommand+0x57e>
			break;
 8001760:	bf00      	nop
 8001762:	e000      	b.n	8001766 <ProcessCommand+0x57e>
			break;
 8001764:	bf00      	nop
	}
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200002c4 	.word	0x200002c4
 8001774:	200002c0 	.word	0x200002c0

08001778 <get_string_length>:
 * @param s -> pointer on string
 *
 * @return length of string
 */
int get_string_length(const char *s)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
    int len=0;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
    while (s[len] != 0)
 8001784:	e002      	b.n	800178c <get_string_length+0x14>
    {
        len++;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3301      	adds	r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
    while (s[len] != 0)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f6      	bne.n	8001786 <get_string_length+0xe>
    }

    return len;
 8001798:	68fb      	ldr	r3, [r7, #12]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <StringIsEqual>:
 *
 * @return true -> string is equal
 * @retuen false -> string is not equal
 */
bool StringIsEqual(const uint8_t *one, int one_start, int one_end, const uint8_t *two,int two_start, int two_end)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b089      	sub	sp, #36	; 0x24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	603b      	str	r3, [r7, #0]
	if(!((one_start >= 0) || (two_start >= 0) || (one_end >= 0) || (two_end >= 0))) return false; //start and stop must be equal or bigger than 0
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	da0a      	bge.n	80017d0 <StringIsEqual+0x2a>
 80017ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017bc:	2b00      	cmp	r3, #0
 80017be:	da07      	bge.n	80017d0 <StringIsEqual+0x2a>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	da04      	bge.n	80017d0 <StringIsEqual+0x2a>
 80017c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	da01      	bge.n	80017d0 <StringIsEqual+0x2a>
 80017cc:	2300      	movs	r3, #0
 80017ce:	e02c      	b.n	800182a <StringIsEqual+0x84>

	int one_length = one_end - one_start;
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	61bb      	str	r3, [r7, #24]
	int two_length = two_end - two_start;
 80017d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	617b      	str	r3, [r7, #20]

	if(!((one_length > 0) || (two_length > 0))) return false; //length must be bigger than 0
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	dc04      	bgt.n	80017f0 <StringIsEqual+0x4a>
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	dc01      	bgt.n	80017f0 <StringIsEqual+0x4a>
 80017ec:	2300      	movs	r3, #0
 80017ee:	e01c      	b.n	800182a <StringIsEqual+0x84>
	if(!(one_length == two_length)) return false; //length of one and two must be equal
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d001      	beq.n	80017fc <StringIsEqual+0x56>
 80017f8:	2300      	movs	r3, #0
 80017fa:	e016      	b.n	800182a <StringIsEqual+0x84>

	for(int i = 0;i < one_length; i++)
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
 8001800:	e00e      	b.n	8001820 <StringIsEqual+0x7a>
	{
		if(!(one[i] == two[i])) return false;
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	4413      	add	r3, r2
 8001808:	781a      	ldrb	r2, [r3, #0]
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	6839      	ldr	r1, [r7, #0]
 800180e:	440b      	add	r3, r1
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d001      	beq.n	800181a <StringIsEqual+0x74>
 8001816:	2300      	movs	r3, #0
 8001818:	e007      	b.n	800182a <StringIsEqual+0x84>
	for(int i = 0;i < one_length; i++)
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3301      	adds	r3, #1
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	69fa      	ldr	r2, [r7, #28]
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	429a      	cmp	r2, r3
 8001826:	dbec      	blt.n	8001802 <StringIsEqual+0x5c>
	}

	return true;
 8001828:	2301      	movs	r3, #1
}
 800182a:	4618      	mov	r0, r3
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <GetDelimiterPosition>:
 * @param character -> searched character
 *
 * @return position of searched character or -1 if character is not found
 */
int GetDelimiterPosition(const uint8_t *string, int length, uint8_t character)
{
 8001836:	b480      	push	{r7}
 8001838:	b087      	sub	sp, #28
 800183a:	af00      	add	r7, sp, #0
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	4613      	mov	r3, r2
 8001842:	71fb      	strb	r3, [r7, #7]
	for(int i = 0;i<length; i++)
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	e00b      	b.n	8001862 <GetDelimiterPosition+0x2c>
	{
		if(string[i] == character)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	79fa      	ldrb	r2, [r7, #7]
 8001854:	429a      	cmp	r2, r3
 8001856:	d101      	bne.n	800185c <GetDelimiterPosition+0x26>
		{
			return i;
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	e008      	b.n	800186e <GetDelimiterPosition+0x38>
	for(int i = 0;i<length; i++)
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	429a      	cmp	r2, r3
 8001868:	dbef      	blt.n	800184a <GetDelimiterPosition+0x14>
		}
	}

	return -1;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800186e:	4618      	mov	r0, r3
 8001870:	371c      	adds	r7, #28
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <ProcessLine>:
 *
 * @return true -> correct processing
 * @return false -> wrong command
 */
bool ProcessLine(const uint8_t *Buffer, int legth)
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b08f      	sub	sp, #60	; 0x3c
 8001880:	af02      	add	r7, sp, #8
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
	int delim_position = GetDelimiterPosition(Buffer,legth,(uint8_t)'='); //position of delimiter =
 8001886:	223d      	movs	r2, #61	; 0x3d
 8001888:	6839      	ldr	r1, [r7, #0]
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff ffd3 	bl	8001836 <GetDelimiterPosition>
 8001890:	6238      	str	r0, [r7, #32]
	if(delim_position == -1) return false; //delimiter not found
 8001892:	6a3b      	ldr	r3, [r7, #32]
 8001894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001898:	d101      	bne.n	800189e <ProcessLine+0x22>
 800189a:	2300      	movs	r3, #0
 800189c:	e0e2      	b.n	8001a64 <ProcessLine+0x1e8>

	_command_id  = -1;
 800189e:	4b73      	ldr	r3, [pc, #460]	; (8001a6c <ProcessLine+0x1f0>)
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	601a      	str	r2, [r3, #0]

	_command_value = 0;
 80018a6:	4b72      	ldr	r3, [pc, #456]	; (8001a70 <ProcessLine+0x1f4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
	_float_command_value = 0;
 80018ac:	4b71      	ldr	r3, [pc, #452]	; (8001a74 <ProcessLine+0x1f8>)
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
	_u32_command_value = 0;
 80018b4:	4b70      	ldr	r3, [pc, #448]	; (8001a78 <ProcessLine+0x1fc>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]

	if(Buffer[0] == '/') //string start with "/"...command is convert from number
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b2f      	cmp	r3, #47	; 0x2f
 80018c0:	d133      	bne.n	800192a <ProcessLine+0xae>
	{
		uint8_t buffer_for_id[3] = {0}; //buffer for convert
 80018c2:	4b6e      	ldr	r3, [pc, #440]	; (8001a7c <ProcessLine+0x200>)
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	81bb      	strh	r3, [r7, #12]
 80018c8:	2300      	movs	r3, #0
 80018ca:	73bb      	strb	r3, [r7, #14]

		for(int i = 1; i<(delim_position); i++ )
 80018cc:	2301      	movs	r3, #1
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d0:	e019      	b.n	8001906 <ProcessLine+0x8a>
		{
			if(i > 3) break;// i bigger then buffer_for_id
 80018d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	dc1b      	bgt.n	8001910 <ProcessLine+0x94>
			char c = Buffer[i]; //take character from Buffer
 80018d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	77fb      	strb	r3, [r7, #31]
			if(!(c >= '0' && c <= '9')) return false; //character is not number
 80018e2:	7ffb      	ldrb	r3, [r7, #31]
 80018e4:	2b2f      	cmp	r3, #47	; 0x2f
 80018e6:	d902      	bls.n	80018ee <ProcessLine+0x72>
 80018e8:	7ffb      	ldrb	r3, [r7, #31]
 80018ea:	2b39      	cmp	r3, #57	; 0x39
 80018ec:	d901      	bls.n	80018f2 <ProcessLine+0x76>
 80018ee:	2300      	movs	r3, #0
 80018f0:	e0b8      	b.n	8001a64 <ProcessLine+0x1e8>
			buffer_for_id[i-1] = c;
 80018f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f4:	3b01      	subs	r3, #1
 80018f6:	3330      	adds	r3, #48	; 0x30
 80018f8:	443b      	add	r3, r7
 80018fa:	7ffa      	ldrb	r2, [r7, #31]
 80018fc:	f803 2c24 	strb.w	r2, [r3, #-36]
		for(int i = 1; i<(delim_position); i++ )
 8001900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001902:	3301      	adds	r3, #1
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001908:	6a3b      	ldr	r3, [r7, #32]
 800190a:	429a      	cmp	r2, r3
 800190c:	dbe1      	blt.n	80018d2 <ProcessLine+0x56>
 800190e:	e000      	b.n	8001912 <ProcessLine+0x96>
			if(i > 3) break;// i bigger then buffer_for_id
 8001910:	bf00      	nop

		}
			_command_form = cform_short;
 8001912:	4b5b      	ldr	r3, [pc, #364]	; (8001a80 <ProcessLine+0x204>)
 8001914:	2201      	movs	r2, #1
 8001916:	701a      	strb	r2, [r3, #0]
			_command_id = atoi((char *)buffer_for_id); //convert string to int
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	4618      	mov	r0, r3
 800191e:	f008 fa92 	bl	8009e46 <atoi>
 8001922:	4603      	mov	r3, r0
 8001924:	4a51      	ldr	r2, [pc, #324]	; (8001a6c <ProcessLine+0x1f0>)
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	e02a      	b.n	8001980 <ProcessLine+0x104>
	}

	else //command not start with "/"
	{
		//search equal string in command_string table
		for(int i = 0;i<(sizeof(command_strings)/STRING_TABLE_SIZE); i++)
 800192a:	2300      	movs	r3, #0
 800192c:	62bb      	str	r3, [r7, #40]	; 0x28
 800192e:	e021      	b.n	8001974 <ProcessLine+0xf8>
		{
			if(StringIsEqual(Buffer, 0, delim_position, (uint8_t *)command_strings[i], 0, get_string_length(command_strings[i])))
 8001930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001932:	2232      	movs	r2, #50	; 0x32
 8001934:	fb02 f303 	mul.w	r3, r2, r3
 8001938:	4a52      	ldr	r2, [pc, #328]	; (8001a84 <ProcessLine+0x208>)
 800193a:	189c      	adds	r4, r3, r2
 800193c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193e:	2232      	movs	r2, #50	; 0x32
 8001940:	fb02 f303 	mul.w	r3, r2, r3
 8001944:	4a4f      	ldr	r2, [pc, #316]	; (8001a84 <ProcessLine+0x208>)
 8001946:	4413      	add	r3, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff15 	bl	8001778 <get_string_length>
 800194e:	4603      	mov	r3, r0
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	2300      	movs	r3, #0
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	4623      	mov	r3, r4
 8001958:	6a3a      	ldr	r2, [r7, #32]
 800195a:	2100      	movs	r1, #0
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f7ff ff22 	bl	80017a6 <StringIsEqual>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <ProcessLine+0xf2>
			{
				_command_id  = i; //get command position
 8001968:	4a40      	ldr	r2, [pc, #256]	; (8001a6c <ProcessLine+0x1f0>)
 800196a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196c:	6013      	str	r3, [r2, #0]
		for(int i = 0;i<(sizeof(command_strings)/STRING_TABLE_SIZE); i++)
 800196e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001970:	3301      	adds	r3, #1
 8001972:	62bb      	str	r3, [r7, #40]	; 0x28
 8001974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001976:	2b61      	cmp	r3, #97	; 0x61
 8001978:	d9da      	bls.n	8001930 <ProcessLine+0xb4>
			}
		}
		_command_form = cform_full;
 800197a:	4b41      	ldr	r3, [pc, #260]	; (8001a80 <ProcessLine+0x204>)
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
	}

	if(_command_id == -1) return false; //command not found
 8001980:	4b3a      	ldr	r3, [pc, #232]	; (8001a6c <ProcessLine+0x1f0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001988:	d101      	bne.n	800198e <ProcessLine+0x112>
 800198a:	2300      	movs	r3, #0
 800198c:	e06a      	b.n	8001a64 <ProcessLine+0x1e8>

	if(Command_parse[_command_id] == cparse_non) return true; //non parsing
 800198e:	4b37      	ldr	r3, [pc, #220]	; (8001a6c <ProcessLine+0x1f0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a3d      	ldr	r2, [pc, #244]	; (8001a88 <ProcessLine+0x20c>)
 8001994:	5cd3      	ldrb	r3, [r2, r3]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <ProcessLine+0x122>
 800199a:	2301      	movs	r3, #1
 800199c:	e062      	b.n	8001a64 <ProcessLine+0x1e8>


	uint8_t buffer_for_number[12] = {0}; //buffer for convert
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]

	//take character to convert from Buffer
	for(int i = 0; i<(legth-delim_position-1); i++ )
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
 80019b0:	e021      	b.n	80019f6 <ProcessLine+0x17a>
	{
		if(i > 11) return false;// i bigger then buffer_for_int size
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	2b0b      	cmp	r3, #11
 80019b6:	dd01      	ble.n	80019bc <ProcessLine+0x140>
 80019b8:	2300      	movs	r3, #0
 80019ba:	e053      	b.n	8001a64 <ProcessLine+0x1e8>
		char c = Buffer[delim_position+1+i]; //take character from Buffer
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	4413      	add	r3, r2
 80019c4:	461a      	mov	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	77bb      	strb	r3, [r7, #30]
		if(!((c >= '0' && c <= '9') || c == '.')) return false; //character is not number
 80019ce:	7fbb      	ldrb	r3, [r7, #30]
 80019d0:	2b2f      	cmp	r3, #47	; 0x2f
 80019d2:	d902      	bls.n	80019da <ProcessLine+0x15e>
 80019d4:	7fbb      	ldrb	r3, [r7, #30]
 80019d6:	2b39      	cmp	r3, #57	; 0x39
 80019d8:	d904      	bls.n	80019e4 <ProcessLine+0x168>
 80019da:	7fbb      	ldrb	r3, [r7, #30]
 80019dc:	2b2e      	cmp	r3, #46	; 0x2e
 80019de:	d001      	beq.n	80019e4 <ProcessLine+0x168>
 80019e0:	2300      	movs	r3, #0
 80019e2:	e03f      	b.n	8001a64 <ProcessLine+0x1e8>
		buffer_for_number[i] = c;
 80019e4:	f107 0210 	add.w	r2, r7, #16
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	4413      	add	r3, r2
 80019ec:	7fba      	ldrb	r2, [r7, #30]
 80019ee:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<(legth-delim_position-1); i++ )
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	3301      	adds	r3, #1
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	3b01      	subs	r3, #1
 80019fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dbd6      	blt.n	80019b2 <ProcessLine+0x136>
	}

	//convert buffer to number according to Command_parse
	if(Command_parse[_command_id] == cparse_int)
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <ProcessLine+0x1f0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a1f      	ldr	r2, [pc, #124]	; (8001a88 <ProcessLine+0x20c>)
 8001a0a:	5cd3      	ldrb	r3, [r2, r3]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d108      	bne.n	8001a22 <ProcessLine+0x1a6>
	{
		_command_value = atoi((char *)buffer_for_number); //convert string to int
 8001a10:	f107 0310 	add.w	r3, r7, #16
 8001a14:	4618      	mov	r0, r3
 8001a16:	f008 fa16 	bl	8009e46 <atoi>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <ProcessLine+0x1f4>)
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	e01f      	b.n	8001a62 <ProcessLine+0x1e6>
	}
	else if(Command_parse[_command_id] == cparse_float)
 8001a22:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <ProcessLine+0x1f0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a18      	ldr	r2, [pc, #96]	; (8001a88 <ProcessLine+0x20c>)
 8001a28:	5cd3      	ldrb	r3, [r2, r3]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d10a      	bne.n	8001a44 <ProcessLine+0x1c8>
	{
		_float_command_value = atoff((char *)buffer_for_number); //convert string to float
 8001a2e:	f107 0310 	add.w	r3, r7, #16
 8001a32:	4618      	mov	r0, r3
 8001a34:	f008 fa04 	bl	8009e40 <atoff>
 8001a38:	eef0 7a40 	vmov.f32	s15, s0
 8001a3c:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <ProcessLine+0x1f8>)
 8001a3e:	edc3 7a00 	vstr	s15, [r3]
 8001a42:	e00e      	b.n	8001a62 <ProcessLine+0x1e6>
	}
	else if(Command_parse[_command_id] == cparse_u32t)
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <ProcessLine+0x1f0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a0f      	ldr	r2, [pc, #60]	; (8001a88 <ProcessLine+0x20c>)
 8001a4a:	5cd3      	ldrb	r3, [r2, r3]
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d108      	bne.n	8001a62 <ProcessLine+0x1e6>
	{
		_u32_command_value = (uint32_t)atoll((char *)buffer_for_number); //convert string to uint32_t
 8001a50:	f107 0310 	add.w	r3, r7, #16
 8001a54:	4618      	mov	r0, r3
 8001a56:	f008 f9fa 	bl	8009e4e <atoll>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <ProcessLine+0x1fc>)
 8001a60:	601a      	str	r2, [r3, #0]
	}


	return true;
 8001a62:	2301      	movs	r3, #1
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3734      	adds	r7, #52	; 0x34
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd90      	pop	{r4, r7, pc}
 8001a6c:	200002bc 	.word	0x200002bc
 8001a70:	200002c0 	.word	0x200002c0
 8001a74:	200002c4 	.word	0x200002c4
 8001a78:	200002c8 	.word	0x200002c8
 8001a7c:	0800e598 	.word	0x0800e598
 8001a80:	200002cc 	.word	0x200002cc
 8001a84:	0800e5e4 	.word	0x0800e5e4
 8001a88:	20000000 	.word	0x20000000

08001a8c <ProcessCommunication_UART>:
 *
 * @return true -> correct processing
 * @return false -> wrong command or not found new line
 */
bool ProcessCommunication_UART()
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b0a4      	sub	sp, #144	; 0x90
 8001a90:	af00      	add	r7, sp, #0
	if(!Uart_BufferNotEmpty()) return false;
 8001a92:	f002 fd2d 	bl	80044f0 <Uart_BufferNotEmpty>
 8001a96:	4603      	mov	r3, r0
 8001a98:	f083 0301 	eor.w	r3, r3, #1
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <ProcessCommunication_UART+0x1a>
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e05c      	b.n	8001b60 <ProcessCommunication_UART+0xd4>

	uint8_t line_buffer[128] = {0};
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	f107 0308 	add.w	r3, r7, #8
 8001aae:	227c      	movs	r2, #124	; 0x7c
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f008 fa10 	bl	8009ed8 <memset>
	uint8_t line_counter = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	uint32_t timeout_timer = HAL_GetTick();
 8001abe:	f003 fe77 	bl	80057b0 <HAL_GetTick>
 8001ac2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

	while(true)
	{
		if((HAL_GetTick() - timeout_timer) >= 50) return false;
 8001ac6:	f003 fe73 	bl	80057b0 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b31      	cmp	r3, #49	; 0x31
 8001ad4:	d901      	bls.n	8001ada <ProcessCommunication_UART+0x4e>
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	e042      	b.n	8001b60 <ProcessCommunication_UART+0xd4>
		if(!Uart_BufferNotEmpty()) continue;
 8001ada:	f002 fd09 	bl	80044f0 <Uart_BufferNotEmpty>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f083 0301 	eor.w	r3, r3, #1
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d138      	bne.n	8001b5c <ProcessCommunication_UART+0xd0>

		uint8_t data = Uart_ReadBuffer();
 8001aea:	f002 fd43 	bl	8004574 <Uart_ReadBuffer>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

		if(data == '\n' || data == '\r')
 8001af4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001af8:	2b0a      	cmp	r3, #10
 8001afa:	d003      	beq.n	8001b04 <ProcessCommunication_UART+0x78>
 8001afc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001b00:	2b0d      	cmp	r3, #13
 8001b02:	d118      	bne.n	8001b36 <ProcessCommunication_UART+0xaa>
		{
			if(line_counter == 0) return false;
 8001b04:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <ProcessCommunication_UART+0x84>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	e027      	b.n	8001b60 <ProcessCommunication_UART+0xd4>

			bool b = ProcessLine(line_buffer, line_counter);
 8001b10:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff feaf 	bl	800187c <ProcessLine>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

			line_counter = 0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			_command_source = csource_UART;
 8001b2a:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <ProcessCommunication_UART+0xdc>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
			return b;
 8001b30:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001b34:	e014      	b.n	8001b60 <ProcessCommunication_UART+0xd4>
		}
		else
		{
			line_buffer[line_counter] = data;
 8001b36:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001b3a:	3390      	adds	r3, #144	; 0x90
 8001b3c:	443b      	add	r3, r7
 8001b3e:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001b42:	f803 2c8c 	strb.w	r2, [r3, #-140]
			line_counter++;
 8001b46:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			if(line_counter > (sizeof(line_buffer)-1)) return false;
 8001b50:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	dab6      	bge.n	8001ac6 <ProcessCommunication_UART+0x3a>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	e001      	b.n	8001b60 <ProcessCommunication_UART+0xd4>
		if(!Uart_BufferNotEmpty()) continue;
 8001b5c:	bf00      	nop
	{
 8001b5e:	e7b2      	b.n	8001ac6 <ProcessCommunication_UART+0x3a>
		}
	}
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3790      	adds	r7, #144	; 0x90
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	200002cd 	.word	0x200002cd

08001b6c <ProcessCommunication_ETH>:
 *
 * @return true -> correct processing
 * @return false -> wrong command or not found new line
 */
bool ProcessCommunication_ETH()
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b0a4      	sub	sp, #144	; 0x90
 8001b70:	af00      	add	r7, sp, #0
	if(!ETH_BufferNotEmpty()) return false;
 8001b72:	f000 fb77 	bl	8002264 <ETH_BufferNotEmpty>
 8001b76:	4603      	mov	r3, r0
 8001b78:	f083 0301 	eor.w	r3, r3, #1
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <ProcessCommunication_ETH+0x1a>
 8001b82:	2300      	movs	r3, #0
 8001b84:	e056      	b.n	8001c34 <ProcessCommunication_ETH+0xc8>

	uint8_t line_buffer[128] = {0};
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	f107 0308 	add.w	r3, r7, #8
 8001b8e:	227c      	movs	r2, #124	; 0x7c
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f008 f9a0 	bl	8009ed8 <memset>
	uint8_t line_counter = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	uint32_t timeout_timer = HAL_GetTick();
 8001b9e:	f003 fe07 	bl	80057b0 <HAL_GetTick>
 8001ba2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

	while(true)
	{
		if((HAL_GetTick()-timeout_timer) >= 50) return false;
 8001ba6:	f003 fe03 	bl	80057b0 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b31      	cmp	r3, #49	; 0x31
 8001bb4:	d901      	bls.n	8001bba <ProcessCommunication_ETH+0x4e>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e03c      	b.n	8001c34 <ProcessCommunication_ETH+0xc8>
		if(!ETH_BufferNotEmpty()) continue;
 8001bba:	f000 fb53 	bl	8002264 <ETH_BufferNotEmpty>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	f083 0301 	eor.w	r3, r3, #1
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d132      	bne.n	8001c30 <ProcessCommunication_ETH+0xc4>

		uint8_t data = ETH_ReadBuffer();
 8001bca:	f000 fb99 	bl	8002300 <ETH_ReadBuffer>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

		if(data == '\n' || data == '\r')
 8001bd4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001bd8:	2b0a      	cmp	r3, #10
 8001bda:	d003      	beq.n	8001be4 <ProcessCommunication_ETH+0x78>
 8001bdc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001be0:	2b0d      	cmp	r3, #13
 8001be2:	d112      	bne.n	8001c0a <ProcessCommunication_ETH+0x9e>
		{
			bool b = ProcessLine(line_buffer, line_counter);
 8001be4:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fe45 	bl	800187c <ProcessLine>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

			line_counter = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			_command_source = csource_ETH;
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <ProcessCommunication_ETH+0xd0>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]
			return b;
 8001c04:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001c08:	e014      	b.n	8001c34 <ProcessCommunication_ETH+0xc8>
		}
		else
		{
			line_buffer[line_counter] = data;
 8001c0a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001c0e:	3390      	adds	r3, #144	; 0x90
 8001c10:	443b      	add	r3, r7
 8001c12:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001c16:	f803 2c8c 	strb.w	r2, [r3, #-140]
			line_counter++;
 8001c1a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001c1e:	3301      	adds	r3, #1
 8001c20:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			if(line_counter > (sizeof(line_buffer)-1)) return false;
 8001c24:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	dabc      	bge.n	8001ba6 <ProcessCommunication_ETH+0x3a>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e001      	b.n	8001c34 <ProcessCommunication_ETH+0xc8>
		if(!ETH_BufferNotEmpty()) continue;
 8001c30:	bf00      	nop
	{
 8001c32:	e7b8      	b.n	8001ba6 <ProcessCommunication_ETH+0x3a>
		}
	}
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3790      	adds	r7, #144	; 0x90
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	200002cd 	.word	0x200002cd

08001c40 <SendCommunication>:
 * @param command_id -> number of data command
 * @param data -> data to be transmitted
 *
 */
void SendCommunication(eCommand_Id command_id, int data)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b0a4      	sub	sp, #144	; 0x90
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	6039      	str	r1, [r7, #0]
 8001c4a:	71fb      	strb	r3, [r7, #7]
	char sprint_buffer[128];
	uint8_t size = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	if(_command_form == cform_full)
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <SendCommunication+0x94>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10f      	bne.n	8001c7a <SendCommunication+0x3a>
	{
		size = sprintf(sprint_buffer,"%s=%d\r\n",command_strings[command_id],data);
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	2232      	movs	r2, #50	; 0x32
 8001c5e:	fb02 f303 	mul.w	r3, r2, r3
 8001c62:	4a1d      	ldr	r2, [pc, #116]	; (8001cd8 <SendCommunication+0x98>)
 8001c64:	441a      	add	r2, r3
 8001c66:	f107 000c 	add.w	r0, r7, #12
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	491b      	ldr	r1, [pc, #108]	; (8001cdc <SendCommunication+0x9c>)
 8001c6e:	f008 fe95 	bl	800a99c <siprintf>
 8001c72:	4603      	mov	r3, r0
 8001c74:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001c78:	e00d      	b.n	8001c96 <SendCommunication+0x56>
	}
	else if(_command_form == cform_short)
 8001c7a:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <SendCommunication+0x94>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d109      	bne.n	8001c96 <SendCommunication+0x56>
	{
		size = sprintf(sprint_buffer,"/%d=%d\r\n",(int)command_id,data);
 8001c82:	79fa      	ldrb	r2, [r7, #7]
 8001c84:	f107 000c 	add.w	r0, r7, #12
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	4915      	ldr	r1, [pc, #84]	; (8001ce0 <SendCommunication+0xa0>)
 8001c8c:	f008 fe86 	bl	800a99c <siprintf>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	}

	if(_command_source == csource_UART)
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <SendCommunication+0xa4>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d109      	bne.n	8001cb2 <SendCommunication+0x72>
	{
		Uart_Send(sprint_buffer, size);
 8001c9e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	4611      	mov	r1, r2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f002 fc8c 	bl	80045c8 <Uart_Send>
	else if(_command_source == csource_ETH)
	{
		ETH_Send(sprint_buffer, size);
	}

}
 8001cb0:	e00c      	b.n	8001ccc <SendCommunication+0x8c>
	else if(_command_source == csource_ETH)
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <SendCommunication+0xa4>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d108      	bne.n	8001ccc <SendCommunication+0x8c>
		ETH_Send(sprint_buffer, size);
 8001cba:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	f107 030c 	add.w	r3, r7, #12
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 fb44 	bl	8002354 <ETH_Send>
}
 8001ccc:	bf00      	nop
 8001cce:	3790      	adds	r7, #144	; 0x90
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	200002cc 	.word	0x200002cc
 8001cd8:	0800e5e4 	.word	0x0800e5e4
 8001cdc:	0800e59c 	.word	0x0800e59c
 8001ce0:	0800e5a4 	.word	0x0800e5a4
 8001ce4:	200002cd 	.word	0x200002cd

08001ce8 <SendCommunication_float>:
 * @param command_id -> number of data command
 * @param data -> data to be transmitted
 *
 */
void SendCommunication_float(eCommand_Id command_id, float data)
{
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 8001cee:	af02      	add	r7, sp, #8
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001cf6:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8001cfa:	ed83 0a00 	vstr	s0, [r3]
 8001cfe:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001d02:	f2a3 4309 	subw	r3, r3, #1033	; 0x409
 8001d06:	701a      	strb	r2, [r3, #0]
	char sprint_buffer[1024];
	uint8_t size = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f

	if(_command_form == cform_full)
 8001d0e:	4b30      	ldr	r3, [pc, #192]	; (8001dd0 <SendCommunication_float+0xe8>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d11e      	bne.n	8001d54 <SendCommunication_float+0x6c>
	{
		size = sprintf(sprint_buffer,"%s=%f\r\n",command_strings[command_id],data);
 8001d16:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001d1a:	f2a3 4309 	subw	r3, r3, #1033	; 0x409
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2232      	movs	r2, #50	; 0x32
 8001d22:	fb02 f303 	mul.w	r3, r2, r3
 8001d26:	4a2b      	ldr	r2, [pc, #172]	; (8001dd4 <SendCommunication_float+0xec>)
 8001d28:	189c      	adds	r4, r3, r2
 8001d2a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001d2e:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	f7fe fc10 	bl	8000558 <__aeabi_f2d>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	f107 000c 	add.w	r0, r7, #12
 8001d40:	e9cd 2300 	strd	r2, r3, [sp]
 8001d44:	4622      	mov	r2, r4
 8001d46:	4924      	ldr	r1, [pc, #144]	; (8001dd8 <SendCommunication_float+0xf0>)
 8001d48:	f008 fe28 	bl	800a99c <siprintf>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
 8001d52:	e01c      	b.n	8001d8e <SendCommunication_float+0xa6>
	}
	else if(_command_form == cform_short)
 8001d54:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <SendCommunication_float+0xe8>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d118      	bne.n	8001d8e <SendCommunication_float+0xa6>
	{
		size = sprintf(sprint_buffer,"/%d=%f\r\n",(int)command_id,data);
 8001d5c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001d60:	f2a3 4309 	subw	r3, r3, #1033	; 0x409
 8001d64:	781c      	ldrb	r4, [r3, #0]
 8001d66:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001d6a:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8001d6e:	6818      	ldr	r0, [r3, #0]
 8001d70:	f7fe fbf2 	bl	8000558 <__aeabi_f2d>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	f107 000c 	add.w	r0, r7, #12
 8001d7c:	e9cd 2300 	strd	r2, r3, [sp]
 8001d80:	4622      	mov	r2, r4
 8001d82:	4916      	ldr	r1, [pc, #88]	; (8001ddc <SendCommunication_float+0xf4>)
 8001d84:	f008 fe0a 	bl	800a99c <siprintf>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
	}

	if(_command_source == csource_UART)
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <SendCommunication_float+0xf8>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d109      	bne.n	8001daa <SendCommunication_float+0xc2>
	{
		Uart_Send(sprint_buffer, size);
 8001d96:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	4611      	mov	r1, r2
 8001da2:	4618      	mov	r0, r3
 8001da4:	f002 fc10 	bl	80045c8 <Uart_Send>
	else if(_command_source == csource_ETH)
	{
		ETH_Send(sprint_buffer, size);
	}

}
 8001da8:	e00c      	b.n	8001dc4 <SendCommunication_float+0xdc>
	else if(_command_source == csource_ETH)
 8001daa:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <SendCommunication_float+0xf8>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d108      	bne.n	8001dc4 <SendCommunication_float+0xdc>
		ETH_Send(sprint_buffer, size);
 8001db2:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 fac8 	bl	8002354 <ETH_Send>
}
 8001dc4:	bf00      	nop
 8001dc6:	f207 4714 	addw	r7, r7, #1044	; 0x414
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd90      	pop	{r4, r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200002cc 	.word	0x200002cc
 8001dd4:	0800e5e4 	.word	0x0800e5e4
 8001dd8:	0800e5b0 	.word	0x0800e5b0
 8001ddc:	0800e5b8 	.word	0x0800e5b8
 8001de0:	200002cd 	.word	0x200002cd

08001de4 <SendCommunication_u32>:
 * @param command_id -> number of data command
 * @param data -> data to be transmitted
 *
 */
void SendCommunication_u32(eCommand_Id command_id, uint32_t data)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b09c      	sub	sp, #112	; 0x70
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	71fb      	strb	r3, [r7, #7]
	char sprint_buffer[100];
	uint8_t size = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	if(_command_form == cform_full)
 8001df6:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <SendCommunication_u32+0x94>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10f      	bne.n	8001e1e <SendCommunication_u32+0x3a>
	{
		size = sprintf(sprint_buffer,"%s=%lu\r\n",command_strings[command_id],data);
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	2232      	movs	r2, #50	; 0x32
 8001e02:	fb02 f303 	mul.w	r3, r2, r3
 8001e06:	4a1d      	ldr	r2, [pc, #116]	; (8001e7c <SendCommunication_u32+0x98>)
 8001e08:	441a      	add	r2, r3
 8001e0a:	f107 0008 	add.w	r0, r7, #8
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	491b      	ldr	r1, [pc, #108]	; (8001e80 <SendCommunication_u32+0x9c>)
 8001e12:	f008 fdc3 	bl	800a99c <siprintf>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001e1c:	e00d      	b.n	8001e3a <SendCommunication_u32+0x56>
	}
	else if(_command_form == cform_short)
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <SendCommunication_u32+0x94>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d109      	bne.n	8001e3a <SendCommunication_u32+0x56>
	{
		size = sprintf(sprint_buffer,"/%d=%lu\r\n",(int)command_id,data);
 8001e26:	79fa      	ldrb	r2, [r7, #7]
 8001e28:	f107 0008 	add.w	r0, r7, #8
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	4915      	ldr	r1, [pc, #84]	; (8001e84 <SendCommunication_u32+0xa0>)
 8001e30:	f008 fdb4 	bl	800a99c <siprintf>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if(_command_source == csource_UART)
 8001e3a:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <SendCommunication_u32+0xa4>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d109      	bne.n	8001e56 <SendCommunication_u32+0x72>
	{
		Uart_Send(sprint_buffer, size);
 8001e42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	f107 0308 	add.w	r3, r7, #8
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f002 fbba 	bl	80045c8 <Uart_Send>
	else if(_command_source == csource_ETH)
	{
		ETH_Send(sprint_buffer, size);
	}

}
 8001e54:	e00c      	b.n	8001e70 <SendCommunication_u32+0x8c>
	else if(_command_source == csource_ETH)
 8001e56:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <SendCommunication_u32+0xa4>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d108      	bne.n	8001e70 <SendCommunication_u32+0x8c>
		ETH_Send(sprint_buffer, size);
 8001e5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	f107 0308 	add.w	r3, r7, #8
 8001e68:	4611      	mov	r1, r2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 fa72 	bl	8002354 <ETH_Send>
}
 8001e70:	bf00      	nop
 8001e72:	3770      	adds	r7, #112	; 0x70
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	200002cc 	.word	0x200002cc
 8001e7c:	0800e5e4 	.word	0x0800e5e4
 8001e80:	0800e5c4 	.word	0x0800e5c4
 8001e84:	0800e5d0 	.word	0x0800e5d0
 8001e88:	200002cd 	.word	0x200002cd

08001e8c <Comunication_ResetConnectedTimer>:


void Comunication_ResetConnectedTimer()
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	ConnectedTimer = HAL_GetTick();
 8001e90:	f003 fc8e 	bl	80057b0 <HAL_GetTick>
 8001e94:	4603      	mov	r3, r0
 8001e96:	4a03      	ldr	r2, [pc, #12]	; (8001ea4 <Comunication_ResetConnectedTimer+0x18>)
 8001e98:	6013      	str	r3, [r2, #0]
	_AppConnected = true;
 8001e9a:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <Comunication_ResetConnectedTimer+0x1c>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	701a      	strb	r2, [r3, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200002b4 	.word	0x200002b4
 8001ea8:	200002b8 	.word	0x200002b8

08001eac <Communication_ConnectedTimer>:

void Communication_ConnectedTimer()
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0

	  if((HAL_GetTick() - ConnectedTimer) > ConnectedTimer_Value)
 8001eb0:	f003 fc7e 	bl	80057b0 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <Communication_ConnectedTimer+0x20>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ec0:	d902      	bls.n	8001ec8 <Communication_ConnectedTimer+0x1c>
	  {
		  _AppConnected = false;
 8001ec2:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <Communication_ConnectedTimer+0x24>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
	  }

}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	200002b4 	.word	0x200002b4
 8001ed0:	200002b8 	.word	0x200002b8

08001ed4 <ErrorExecute>:

/* @brief reaction on error signal
 *
 */
void ErrorExecute(uint8_t channel)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <ErrorExecute+0x1c>
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d002      	beq.n	8001ef0 <ErrorExecute+0x1c>
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d11d      	bne.n	8001f2c <ErrorExecute+0x58>

	//_Found_Error = false;

	//power good execution -> channel disable
	if(_FoundErrorforEach[channel])
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	4a10      	ldr	r2, [pc, #64]	; (8001f34 <ErrorExecute+0x60>)
 8001ef4:	5cd3      	ldrb	r3, [r2, r3]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d019      	beq.n	8001f2e <ErrorExecute+0x5a>
	{
		//Channel_Enable(channel, false);

		if(MainParams.sramOffset_ErrorExecuteAutoRestore)
 8001efa:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <ErrorExecute+0x64>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d004      	beq.n	8001f0c <ErrorExecute+0x38>
		{
			Channel_Restart(channel);
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f001 f9b7 	bl	8003278 <Channel_Restart>
 8001f0a:	e010      	b.n	8001f2e <ErrorExecute+0x5a>
		}
		else
		{
			ChannelsStatus[channel].disableInError = true;
 8001f0c:	79fa      	ldrb	r2, [r7, #7]
 8001f0e:	490b      	ldr	r1, [pc, #44]	; (8001f3c <ErrorExecute+0x68>)
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	3312      	adds	r3, #18
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
			Channel_Enable(channel, false);
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	2100      	movs	r1, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f001 f8eb 	bl	8003100 <Channel_Enable>
 8001f2a:	e000      	b.n	8001f2e <ErrorExecute+0x5a>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8001f2c:	bf00      	nop
		else
			Channel_Enable(channel, false);
			*/
	}

}
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	2000031c 	.word	0x2000031c
 8001f38:	20001a88 	.word	0x20001a88
 8001f3c:	200019dc 	.word	0x200019dc

08001f40 <ErrorSignalTime>:


void ErrorSignalTime()
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0

	_FoundError_OR = false;
 8001f46:	4b28      	ldr	r3, [pc, #160]	; (8001fe8 <ErrorSignalTime+0xa8>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < 6; i++)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	e042      	b.n	8001fd8 <ErrorSignalTime+0x98>
	{
		if(*p_ERROR_data[i]) //error je 1
 8001f52:	4a26      	ldr	r2, [pc, #152]	; (8001fec <ErrorSignalTime+0xac>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d014      	beq.n	8001f8a <ErrorSignalTime+0x4a>
		{
			if((HAL_GetTick() - ErrorTimer[i]) > Error_Time)
 8001f60:	f003 fc26 	bl	80057b0 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	4922      	ldr	r1, [pc, #136]	; (8001ff0 <ErrorSignalTime+0xb0>)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d914      	bls.n	8001fa2 <ErrorSignalTime+0x62>
			{
				_Found_Error = true;
 8001f78:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <ErrorSignalTime+0xb4>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
				_FoundErrorforEach[i] = true;
 8001f7e:	4a1e      	ldr	r2, [pc, #120]	; (8001ff8 <ErrorSignalTime+0xb8>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4413      	add	r3, r2
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
 8001f88:	e00b      	b.n	8001fa2 <ErrorSignalTime+0x62>
			}
		}
		else
		{
			ErrorTimer[i] = HAL_GetTick();
 8001f8a:	f003 fc11 	bl	80057b0 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	4917      	ldr	r1, [pc, #92]	; (8001ff0 <ErrorSignalTime+0xb0>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			_FoundErrorforEach[i] = false;
 8001f98:	4a17      	ldr	r2, [pc, #92]	; (8001ff8 <ErrorSignalTime+0xb8>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
		}


		if(_FoundErrorforEach[i])
 8001fa2:	4a15      	ldr	r2, [pc, #84]	; (8001ff8 <ErrorSignalTime+0xb8>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <ErrorSignalTime+0x74>
		{
			_Found_Error = true;
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <ErrorSignalTime+0xb4>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
		}

		_FoundError_OR = _FoundError_OR | _FoundErrorforEach[i];
 8001fb4:	4a10      	ldr	r2, [pc, #64]	; (8001ff8 <ErrorSignalTime+0xb8>)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	781a      	ldrb	r2, [r3, #0]
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <ErrorSignalTime+0xa8>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf14      	ite	ne
 8001fc8:	2301      	movne	r3, #1
 8001fca:	2300      	moveq	r3, #0
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <ErrorSignalTime+0xa8>)
 8001fd0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b05      	cmp	r3, #5
 8001fdc:	ddb9      	ble.n	8001f52 <ErrorSignalTime+0x12>

	}

	//_FoundError_OR = _FoundErrorforEach[0] || _FoundErrorforEach[1] || _FoundErrorforEach[2];

}
 8001fde:	bf00      	nop
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000319 	.word	0x20000319
 8001fec:	20000300 	.word	0x20000300
 8001ff0:	200002e8 	.word	0x200002e8
 8001ff4:	20000318 	.word	0x20000318
 8001ff8:	2000031c 	.word	0x2000031c

08001ffc <ErrorTimerReset>:

void ErrorTimerReset(int channel)
{
 8001ffc:	b590      	push	{r4, r7, lr}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	ErrorTimer[channel] = HAL_GetTick();
 8002004:	f003 fbd4 	bl	80057b0 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	4908      	ldr	r1, [pc, #32]	; (800202c <ErrorTimerReset+0x30>)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	ErrorTimer[channel+3 ] = HAL_GetTick();
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	1cdc      	adds	r4, r3, #3
 8002016:	f003 fbcb 	bl	80057b0 <HAL_GetTick>
 800201a:	4603      	mov	r3, r0
 800201c:	4a03      	ldr	r2, [pc, #12]	; (800202c <ErrorTimerReset+0x30>)
 800201e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	bd90      	pop	{r4, r7, pc}
 800202a:	bf00      	nop
 800202c:	200002e8 	.word	0x200002e8

08002030 <ErrorProcess>:
 *  write to _Found_Error:
 *  	true -> found error
 *  	false -> non error
 */
void ErrorProcess()
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0

	for(int errbit = 0; errbit < 6; errbit++)
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	e02c      	b.n	8002096 <ErrorProcess+0x66>
	{
		int ee = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < Error_Array_Size ; i++)
 8002040:	2300      	movs	r3, #0
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	e011      	b.n	800206a <ErrorProcess+0x3a>
		{
			if(Error_Array_Reg[i] & (1 << errbit)) ee++;
 8002046:	4a19      	ldr	r2, [pc, #100]	; (80020ac <ErrorProcess+0x7c>)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4413      	add	r3, r2
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	fa42 f303 	asr.w	r3, r2, r3
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d002      	beq.n	8002064 <ErrorProcess+0x34>
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	3301      	adds	r3, #1
 8002062:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < Error_Array_Size ; i++)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3301      	adds	r3, #1
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b13      	cmp	r3, #19
 800206e:	ddea      	ble.n	8002046 <ErrorProcess+0x16>
		}

		if(ee >= Error_Threshold)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2b0f      	cmp	r3, #15
 8002074:	dd06      	ble.n	8002084 <ErrorProcess+0x54>
		{
			*p_ERROR_data[errbit] = true;
 8002076:	4a0e      	ldr	r2, [pc, #56]	; (80020b0 <ErrorProcess+0x80>)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
 8002082:	e005      	b.n	8002090 <ErrorProcess+0x60>
			//_Found_Error = true;
		}
		else
		{
			*p_ERROR_data[errbit] = false;
 8002084:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <ErrorProcess+0x80>)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
	for(int errbit = 0; errbit < 6; errbit++)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	3301      	adds	r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2b05      	cmp	r3, #5
 800209a:	ddcf      	ble.n	800203c <ErrorProcess+0xc>
		}

	}
}
 800209c:	bf00      	nop
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	200002d0 	.word	0x200002d0
 80020b0:	20000300 	.word	0x20000300

080020b4 <ErrorSignalsRead>:
 *
 * @return true -> found error, after process (after Error_Array_Size counts)
 * @return false -> non error
 */
void ErrorSignalsRead()
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0

	uint8_t temp_error_reg = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	71fb      	strb	r3, [r7, #7]
	
	if(ChannelsStatus[0].enable && !ChannelsChange[0].restart_request)
 80020be:	4b4e      	ldr	r3, [pc, #312]	; (80021f8 <ErrorSignalsRead+0x144>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d026      	beq.n	8002114 <ErrorSignalsRead+0x60>
 80020c6:	4b4d      	ldr	r3, [pc, #308]	; (80021fc <ErrorSignalsRead+0x148>)
 80020c8:	78db      	ldrb	r3, [r3, #3]
 80020ca:	f083 0301 	eor.w	r3, r3, #1
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d01f      	beq.n	8002114 <ErrorSignalsRead+0x60>
	{
		temp_error_reg |= (!((bool)HAL_GPIO_ReadPin(PG_1_GPIO_Port, PG_1_Pin)))  << 0;
 80020d4:	2110      	movs	r1, #16
 80020d6:	484a      	ldr	r0, [pc, #296]	; (8002200 <ErrorSignalsRead+0x14c>)
 80020d8:	f004 fb72 	bl	80067c0 <HAL_GPIO_ReadPin>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	bf0c      	ite	eq
 80020e2:	2301      	moveq	r3, #1
 80020e4:	2300      	movne	r3, #0
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	b25a      	sxtb	r2, r3
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	b25b      	sxtb	r3, r3
 80020f2:	71fb      	strb	r3, [r7, #7]
		temp_error_reg |= ((bool)HAL_GPIO_ReadPin(OC_1_GPIO_Port, OC_1_Pin))  << 3;
 80020f4:	2140      	movs	r1, #64	; 0x40
 80020f6:	4842      	ldr	r0, [pc, #264]	; (8002200 <ErrorSignalsRead+0x14c>)
 80020f8:	f004 fb62 	bl	80067c0 <HAL_GPIO_ReadPin>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <ErrorSignalsRead+0x52>
 8002102:	2308      	movs	r3, #8
 8002104:	e000      	b.n	8002108 <ErrorSignalsRead+0x54>
 8002106:	2300      	movs	r3, #0
 8002108:	b25a      	sxtb	r2, r3
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	4313      	orrs	r3, r2
 8002110:	b25b      	sxtb	r3, r3
 8002112:	71fb      	strb	r3, [r7, #7]
	}

	if(ChannelsStatus[1].enable && !ChannelsChange[1].restart_request)
 8002114:	4b38      	ldr	r3, [pc, #224]	; (80021f8 <ErrorSignalsRead+0x144>)
 8002116:	7d1b      	ldrb	r3, [r3, #20]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d026      	beq.n	800216a <ErrorSignalsRead+0xb6>
 800211c:	4b37      	ldr	r3, [pc, #220]	; (80021fc <ErrorSignalsRead+0x148>)
 800211e:	7fdb      	ldrb	r3, [r3, #31]
 8002120:	f083 0301 	eor.w	r3, r3, #1
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d01f      	beq.n	800216a <ErrorSignalsRead+0xb6>
	{
		temp_error_reg |= (!((bool)HAL_GPIO_ReadPin(PG_2_GPIO_Port, PG_2_Pin)))  << 1;
 800212a:	2120      	movs	r1, #32
 800212c:	4834      	ldr	r0, [pc, #208]	; (8002200 <ErrorSignalsRead+0x14c>)
 800212e:	f004 fb47 	bl	80067c0 <HAL_GPIO_ReadPin>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <ErrorSignalsRead+0x88>
 8002138:	2302      	movs	r3, #2
 800213a:	e000      	b.n	800213e <ErrorSignalsRead+0x8a>
 800213c:	2300      	movs	r3, #0
 800213e:	b25a      	sxtb	r2, r3
 8002140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002144:	4313      	orrs	r3, r2
 8002146:	b25b      	sxtb	r3, r3
 8002148:	71fb      	strb	r3, [r7, #7]
		temp_error_reg |= ((bool)HAL_GPIO_ReadPin(OC_3_GPIO_Port, OC_2_Pin))  << 4;
 800214a:	2180      	movs	r1, #128	; 0x80
 800214c:	482c      	ldr	r0, [pc, #176]	; (8002200 <ErrorSignalsRead+0x14c>)
 800214e:	f004 fb37 	bl	80067c0 <HAL_GPIO_ReadPin>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <ErrorSignalsRead+0xa8>
 8002158:	2310      	movs	r3, #16
 800215a:	e000      	b.n	800215e <ErrorSignalsRead+0xaa>
 800215c:	2300      	movs	r3, #0
 800215e:	b25a      	sxtb	r2, r3
 8002160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002164:	4313      	orrs	r3, r2
 8002166:	b25b      	sxtb	r3, r3
 8002168:	71fb      	strb	r3, [r7, #7]
	}

	if(ChannelsStatus[2].enable && !ChannelsChange[2].restart_request)
 800216a:	4b23      	ldr	r3, [pc, #140]	; (80021f8 <ErrorSignalsRead+0x144>)
 800216c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002170:	2b00      	cmp	r3, #0
 8002172:	d028      	beq.n	80021c6 <ErrorSignalsRead+0x112>
 8002174:	4b21      	ldr	r3, [pc, #132]	; (80021fc <ErrorSignalsRead+0x148>)
 8002176:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800217a:	f083 0301 	eor.w	r3, r3, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d020      	beq.n	80021c6 <ErrorSignalsRead+0x112>
	{
		temp_error_reg |= (!((bool)HAL_GPIO_ReadPin(PG_3_GPIO_Port, PG_3_Pin)))  << 2;
 8002184:	2104      	movs	r1, #4
 8002186:	481f      	ldr	r0, [pc, #124]	; (8002204 <ErrorSignalsRead+0x150>)
 8002188:	f004 fb1a 	bl	80067c0 <HAL_GPIO_ReadPin>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <ErrorSignalsRead+0xe2>
 8002192:	2304      	movs	r3, #4
 8002194:	e000      	b.n	8002198 <ErrorSignalsRead+0xe4>
 8002196:	2300      	movs	r3, #0
 8002198:	b25a      	sxtb	r2, r3
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	4313      	orrs	r3, r2
 80021a0:	b25b      	sxtb	r3, r3
 80021a2:	71fb      	strb	r3, [r7, #7]
		temp_error_reg |= ((bool)HAL_GPIO_ReadPin(OC_3_GPIO_Port, OC_3_Pin))  << 5;
 80021a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021a8:	4815      	ldr	r0, [pc, #84]	; (8002200 <ErrorSignalsRead+0x14c>)
 80021aa:	f004 fb09 	bl	80067c0 <HAL_GPIO_ReadPin>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <ErrorSignalsRead+0x104>
 80021b4:	2320      	movs	r3, #32
 80021b6:	e000      	b.n	80021ba <ErrorSignalsRead+0x106>
 80021b8:	2300      	movs	r3, #0
 80021ba:	b25a      	sxtb	r2, r3
 80021bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	b25b      	sxtb	r3, r3
 80021c4:	71fb      	strb	r3, [r7, #7]
	}



	Error_Array_Reg[Error_Array_Counter] = temp_error_reg;
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <ErrorSignalsRead+0x154>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	4619      	mov	r1, r3
 80021cc:	4a0f      	ldr	r2, [pc, #60]	; (800220c <ErrorSignalsRead+0x158>)
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	5453      	strb	r3, [r2, r1]
	Error_Array_Counter++;
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <ErrorSignalsRead+0x154>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	3301      	adds	r3, #1
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <ErrorSignalsRead+0x154>)
 80021dc:	701a      	strb	r2, [r3, #0]
	if(Error_Array_Counter > (Error_Array_Size - 1))
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <ErrorSignalsRead+0x154>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b13      	cmp	r3, #19
 80021e4:	d904      	bls.n	80021f0 <ErrorSignalsRead+0x13c>
	{
		Error_Array_Counter = 0;
 80021e6:	4b08      	ldr	r3, [pc, #32]	; (8002208 <ErrorSignalsRead+0x154>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
		ErrorProcess();
 80021ec:	f7ff ff20 	bl	8002030 <ErrorProcess>
	}
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	200019dc 	.word	0x200019dc
 80021fc:	20001a18 	.word	0x20001a18
 8002200:	40020800 	.word	0x40020800
 8002204:	40020400 	.word	0x40020400
 8002208:	200002e4 	.word	0x200002e4
 800220c:	200002d0 	.word	0x200002d0

08002210 <AppConnectedExecute>:


void AppConnectedExecute(bool AppConnected)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, AppConnected);


	if((AppConnected == false) && MainParams.sramOffset_DisableSupplyInLostConnection)
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	f083 0301 	eor.w	r3, r3, #1
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d018      	beq.n	8002258 <AppConnectedExecute+0x48>
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <AppConnectedExecute+0x50>)
 8002228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800222a:	2b00      	cmp	r3, #0
 800222c:	d014      	beq.n	8002258 <AppConnectedExecute+0x48>
	{

		for(int i = 0; i< 3; i++)
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	e00e      	b.n	8002252 <AppConnectedExecute+0x42>
		{
			Channel_Enable(i, false);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2100      	movs	r1, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f000 ff60 	bl	8003100 <Channel_Enable>
			Channel_Output(i, false);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2100      	movs	r1, #0
 8002246:	4618      	mov	r0, r3
 8002248:	f001 f95e 	bl	8003508 <Channel_Output>
		for(int i = 0; i< 3; i++)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	3301      	adds	r3, #1
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b02      	cmp	r3, #2
 8002256:	dded      	ble.n	8002234 <AppConnectedExecute+0x24>
		}

	}
}
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20001a88 	.word	0x20001a88

08002264 <ETH_BufferNotEmpty>:
 *
 * @return true -> FIFO is not empty
 * @return false -> FIFO is empty
 */
bool ETH_BufferNotEmpty()
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
	return (eth_bcounter > 0);
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <ETH_BufferNotEmpty+0x1c>)
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	bf14      	ite	ne
 8002270:	2301      	movne	r3, #1
 8002272:	2300      	moveq	r3, #0
 8002274:	b2db      	uxtb	r3, r3
}
 8002276:	4618      	mov	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	20001328 	.word	0x20001328

08002284 <ETH_WriteBuffer>:

/* @brief function add data byte to FIFO
 *
 */
void ETH_WriteBuffer(const uint8_t *Buffer, int length)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
	for(int i = 0;i<length;i++)
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	e024      	b.n	80022de <ETH_WriteBuffer+0x5a>
	{
		if(eth_bcounter >= (eth_buffer_size-1)) return;
 8002294:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <ETH_WriteBuffer+0x70>)
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	f640 72fe 	movw	r2, #4094	; 0xffe
 800229c:	4293      	cmp	r3, r2
 800229e:	d823      	bhi.n	80022e8 <ETH_WriteBuffer+0x64>

		eth_buffer[eth_wpointer] = Buffer[i];
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <ETH_WriteBuffer+0x74>)
 80022a8:	8812      	ldrh	r2, [r2, #0]
 80022aa:	7819      	ldrb	r1, [r3, #0]
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <ETH_WriteBuffer+0x78>)
 80022ae:	5499      	strb	r1, [r3, r2]
		eth_bcounter++;
 80022b0:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <ETH_WriteBuffer+0x70>)
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <ETH_WriteBuffer+0x70>)
 80022ba:	801a      	strh	r2, [r3, #0]
		eth_wpointer++;
 80022bc:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <ETH_WriteBuffer+0x74>)
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	3301      	adds	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <ETH_WriteBuffer+0x74>)
 80022c6:	801a      	strh	r2, [r3, #0]
		if(eth_wpointer > eth_buffer_size - 1) eth_wpointer = 0;
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <ETH_WriteBuffer+0x74>)
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d0:	d302      	bcc.n	80022d8 <ETH_WriteBuffer+0x54>
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <ETH_WriteBuffer+0x74>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	801a      	strh	r2, [r3, #0]
	for(int i = 0;i<length;i++)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	3301      	adds	r3, #1
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	dbd6      	blt.n	8002294 <ETH_WriteBuffer+0x10>
 80022e6:	e000      	b.n	80022ea <ETH_WriteBuffer+0x66>
		if(eth_bcounter >= (eth_buffer_size-1)) return;
 80022e8:	bf00      	nop
	}
}
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	20001328 	.word	0x20001328
 80022f8:	20001324 	.word	0x20001324
 80022fc:	20000324 	.word	0x20000324

08002300 <ETH_ReadBuffer>:
/* @brief read data byty from FIFO
 *
 * @return one element uint8_t data 
 */
uint8_t ETH_ReadBuffer()
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
	uint8_t data = eth_buffer[eth_rpointer];
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <ETH_ReadBuffer+0x48>)
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <ETH_ReadBuffer+0x4c>)
 800230e:	5c9b      	ldrb	r3, [r3, r2]
 8002310:	71fb      	strb	r3, [r7, #7]
	eth_bcounter--;
 8002312:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <ETH_ReadBuffer+0x50>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <ETH_ReadBuffer+0x50>)
 800231c:	801a      	strh	r2, [r3, #0]
	eth_rpointer++;
 800231e:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <ETH_ReadBuffer+0x48>)
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	3301      	adds	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <ETH_ReadBuffer+0x48>)
 8002328:	801a      	strh	r2, [r3, #0]
	if(eth_rpointer > eth_buffer_size - 1) eth_rpointer = 0;
 800232a:	4b07      	ldr	r3, [pc, #28]	; (8002348 <ETH_ReadBuffer+0x48>)
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002332:	d302      	bcc.n	800233a <ETH_ReadBuffer+0x3a>
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <ETH_ReadBuffer+0x48>)
 8002336:	2200      	movs	r2, #0
 8002338:	801a      	strh	r2, [r3, #0]

	return data;
 800233a:	79fb      	ldrb	r3, [r7, #7]
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	20001326 	.word	0x20001326
 800234c:	20000324 	.word	0x20000324
 8002350:	20001328 	.word	0x20001328

08002354 <ETH_Send>:
 * @param data -> pointer on data buffer with message
 * @param size -> lenght of data buffer
 *
 */
void ETH_Send(char *data, uint16_t size)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	807b      	strh	r3, [r7, #2]
	ETH_udp_Transmit((uint8_t *)data,size);
 8002360:	887b      	ldrh	r3, [r7, #2]
 8002362:	4619      	mov	r1, r3
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f002 f849 	bl	80043fc <ETH_udp_Transmit>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <GetCoef_k>:
/* @brief get K coeficient for ADC
 *
 *	@channel -> adc channel
 */
float GetCoef_k(int channel)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	float *addr = ((float *)&MainParams.sramOffset_ReadCoef_k_0) + channel;//  + (4 * channel);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4a06      	ldr	r2, [pc, #24]	; (800239c <GetCoef_k+0x28>)
 8002382:	4413      	add	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
	return *addr;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	ee07 3a90 	vmov	s15, r3
}
 800238e:	eeb0 0a67 	vmov.f32	s0, s15
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	20001aa4 	.word	0x20001aa4

080023a0 <GetCoef_q>:
/* @brief get Q coeficient for ADC
 *
 *	@channel -> adc channel
 */
float GetCoef_q(int channel)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
	float *addr =((float *)&MainParams.sramOffset_ReadCoef_q_0) + channel;//  + (4 * channel);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4a06      	ldr	r2, [pc, #24]	; (80023c8 <GetCoef_q+0x28>)
 80023ae:	4413      	add	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
	return *addr;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	ee07 3a90 	vmov	s15, r3
}
 80023ba:	eeb0 0a67 	vmov.f32	s0, s15
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	20001abc 	.word	0x20001abc

080023cc <StoreADCConstant>:
 * @param value -> value of coefficient
 *
 *
 */
void StoreADCConstant(uint8_t coef, float value)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	ed87 0a00 	vstr	s0, [r7]
 80023d8:	71fb      	strb	r3, [r7, #7]
	float *addr = ((float *)&MainParams.sramOffset_ReadCoef_k_0) + coef;//  + (4 * channel);
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <StoreADCConstant+0x2c>)
 80023e0:	4413      	add	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]
	*addr = value;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	601a      	str	r2, [r3, #0]
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20001aa4 	.word	0x20001aa4

080023fc <SendADCCoefficients>:
/* @brief send ADC coefficients to communication
 *
 *
 */
void SendADCCoefficients()
{
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
	for(int i = 0;i<12;i++)
 8002402:	2300      	movs	r3, #0
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	e010      	b.n	800242a <SendADCCoefficients+0x2e>
	{
		SendCommunication_float(cmd_adc_get_k0 + i,GetCoef_k(i));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	3331      	adds	r3, #49	; 0x31
 800240e:	b2dc      	uxtb	r4, r3
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ffaf 	bl	8002374 <GetCoef_k>
 8002416:	eef0 7a40 	vmov.f32	s15, s0
 800241a:	eeb0 0a67 	vmov.f32	s0, s15
 800241e:	4620      	mov	r0, r4
 8002420:	f7ff fc62 	bl	8001ce8 <SendCommunication_float>
	for(int i = 0;i<12;i++)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3301      	adds	r3, #1
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b0b      	cmp	r3, #11
 800242e:	ddeb      	ble.n	8002408 <SendADCCoefficients+0xc>
	}
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	bd90      	pop	{r4, r7, pc}

0800243a <CalcAvg>:
 *
 * @return average of array
 *
 */
uint16_t CalcAvg(uint16_t *array, uint16_t length)
{
 800243a:	b480      	push	{r7}
 800243c:	b085      	sub	sp, #20
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	807b      	strh	r3, [r7, #2]
	uint32_t AVG = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i<length ; i++)
 800244a:	2300      	movs	r3, #0
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	e00b      	b.n	8002468 <CalcAvg+0x2e>
	{
		AVG += array[i];
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	4413      	add	r3, r2
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4413      	add	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<length ; i++)
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	3301      	adds	r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	887b      	ldrh	r3, [r7, #2]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	429a      	cmp	r2, r3
 800246e:	dbef      	blt.n	8002450 <CalcAvg+0x16>
	}

	return (AVG/length);
 8002470:	887b      	ldrh	r3, [r7, #2]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	fbb2 f3f3 	udiv	r3, r2, r3
 8002478:	b29b      	uxth	r3, r3
}
 800247a:	4618      	mov	r0, r3
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <CalcAdcValue>:
 * @param value -> ADC data
 *
 * @return voltage or current (float)
 */
float CalcAdcValue(uint8_t channel,uint16_t value)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	460a      	mov	r2, r1
 8002492:	71fb      	strb	r3, [r7, #7]
 8002494:	4613      	mov	r3, r2
 8002496:	80bb      	strh	r3, [r7, #4]
	float f = (float)value/ADC_coef;
 8002498:	88bb      	ldrh	r3, [r7, #4]
 800249a:	ee07 3a90 	vmov	s15, r3
 800249e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a2:	ee17 0a90 	vmov	r0, s15
 80024a6:	f7fe f857 	bl	8000558 <__aeabi_f2d>
 80024aa:	a317      	add	r3, pc, #92	; (adr r3, 8002508 <CalcAdcValue+0x80>)
 80024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b0:	f7fe f9d4 	bl	800085c <__aeabi_ddiv>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	f7fe fb9c 	bl	8000bf8 <__aeabi_d2f>
 80024c0:	4603      	mov	r3, r0
 80024c2:	617b      	str	r3, [r7, #20]

	float Coef_k = GetCoef_k(channel);
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff ff54 	bl	8002374 <GetCoef_k>
 80024cc:	ed87 0a04 	vstr	s0, [r7, #16]
	float Coef_q = GetCoef_q(channel);
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff ff64 	bl	80023a0 <GetCoef_q>
 80024d8:	ed87 0a03 	vstr	s0, [r7, #12]


	f = (f - Coef_q) / Coef_k;
 80024dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80024e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80024e4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80024ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024f0:	edc7 7a05 	vstr	s15, [r7, #20]

	return f;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	ee07 3a90 	vmov	s15, r3
}
 80024fa:	eeb0 0a67 	vmov.f32	s0, s15
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	f3af 8000 	nop.w
 8002508:	7b0b3919 	.word	0x7b0b3919
 800250c:	4093665a 	.word	0x4093665a

08002510 <ReadADCChannels>:
 *
 *	data save to Read_Data
 *
 */
void ReadADCChannels()
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8002516:	2200      	movs	r2, #0
 8002518:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800251c:	4809      	ldr	r0, [pc, #36]	; (8002544 <ReadADCChannels+0x34>)
 800251e:	f004 f967 	bl	80067f0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, Adresses, Read_Data, 8,2);
 8002522:	2302      	movs	r3, #2
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	2308      	movs	r3, #8
 8002528:	4a07      	ldr	r2, [pc, #28]	; (8002548 <ReadADCChannels+0x38>)
 800252a:	4908      	ldr	r1, [pc, #32]	; (800254c <ReadADCChannels+0x3c>)
 800252c:	4808      	ldr	r0, [pc, #32]	; (8002550 <ReadADCChannels+0x40>)
 800252e:	f005 f9eb 	bl	8007908 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8002532:	2201      	movs	r2, #1
 8002534:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <ReadADCChannels+0x34>)
 800253a:	f004 f959 	bl	80067f0 <HAL_GPIO_WritePin>
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40020400 	.word	0x40020400
 8002548:	20001970 	.word	0x20001970
 800254c:	20000064 	.word	0x20000064
 8002550:	20002c8c 	.word	0x20002c8c

08002554 <ADCStore>:
 *
 *	processed data (measurement average) are saved on selected addresses in p_ADC_data array
 *
 */
void ADCStore()
{
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af00      	add	r7, sp, #0
	//save data from ADC data read buffer
	for(int i = 0;i<8;i++)
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
 800255e:	e01d      	b.n	800259c <ADCStore+0x48>
	{
		meas_data[i][meas_counter] = 0 | Read_Data[2*i] | (Read_Data[(2*i)+1] << 8);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	4a33      	ldr	r2, [pc, #204]	; (8002634 <ADCStore+0xe0>)
 8002566:	5cd3      	ldrb	r3, [r2, r3]
 8002568:	b21a      	sxth	r2, r3
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	3301      	adds	r3, #1
 8002570:	4930      	ldr	r1, [pc, #192]	; (8002634 <ADCStore+0xe0>)
 8002572:	5ccb      	ldrb	r3, [r1, r3]
 8002574:	021b      	lsls	r3, r3, #8
 8002576:	b21b      	sxth	r3, r3
 8002578:	4313      	orrs	r3, r2
 800257a:	b21a      	sxth	r2, r3
 800257c:	4b2e      	ldr	r3, [pc, #184]	; (8002638 <ADCStore+0xe4>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	461c      	mov	r4, r3
 8002582:	b290      	uxth	r0, r2
 8002584:	4a2d      	ldr	r2, [pc, #180]	; (800263c <ADCStore+0xe8>)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	2164      	movs	r1, #100	; 0x64
 800258a:	fb01 f303 	mul.w	r3, r1, r3
 800258e:	4423      	add	r3, r4
 8002590:	4601      	mov	r1, r0
 8002592:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0;i<8;i++)
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3301      	adds	r3, #1
 800259a:	61fb      	str	r3, [r7, #28]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	2b07      	cmp	r3, #7
 80025a0:	ddde      	ble.n	8002560 <ADCStore+0xc>
	}

	meas_counter++;
 80025a2:	4b25      	ldr	r3, [pc, #148]	; (8002638 <ADCStore+0xe4>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	3301      	adds	r3, #1
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4b23      	ldr	r3, [pc, #140]	; (8002638 <ADCStore+0xe4>)
 80025ac:	701a      	strb	r2, [r3, #0]

	//all buffers full - calculate average and store on selected addresses
	if(meas_counter > (meas_size - 1))
 80025ae:	4b22      	ldr	r3, [pc, #136]	; (8002638 <ADCStore+0xe4>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b63      	cmp	r3, #99	; 0x63
 80025b4:	d939      	bls.n	800262a <ADCStore+0xd6>
	{
		meas_counter = 0;
 80025b6:	4b20      	ldr	r3, [pc, #128]	; (8002638 <ADCStore+0xe4>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]

		uint16_t avg[8];
		for(int i = 0; i < 8 ;i++)
 80025bc:	2300      	movs	r3, #0
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	e014      	b.n	80025ec <ADCStore+0x98>
		{
			avg[i] = CalcAvg(meas_data[i], meas_size); //calculate average
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	22c8      	movs	r2, #200	; 0xc8
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	4a1c      	ldr	r2, [pc, #112]	; (800263c <ADCStore+0xe8>)
 80025cc:	4413      	add	r3, r2
 80025ce:	2164      	movs	r1, #100	; 0x64
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff32 	bl	800243a <CalcAvg>
 80025d6:	4603      	mov	r3, r0
 80025d8:	461a      	mov	r2, r3
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	3320      	adds	r3, #32
 80025e0:	443b      	add	r3, r7
 80025e2:	f823 2c1c 	strh.w	r2, [r3, #-28]
		for(int i = 0; i < 8 ;i++)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	3301      	adds	r3, #1
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	2b07      	cmp	r3, #7
 80025f0:	dde7      	ble.n	80025c2 <ADCStore+0x6e>
		}

		for(int i = 0; i<6;i++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	e015      	b.n	8002624 <ADCStore+0xd0>
		{
			*p_ADC_data[i] = CalcAdcValue(i,avg[i]); //calculate value(voltage or current and saved on selected addresses)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	3320      	adds	r3, #32
 8002602:	443b      	add	r3, r7
 8002604:	f833 1c1c 	ldrh.w	r1, [r3, #-28]
 8002608:	480d      	ldr	r0, [pc, #52]	; (8002640 <ADCStore+0xec>)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8002610:	4610      	mov	r0, r2
 8002612:	f7ff ff39 	bl	8002488 <CalcAdcValue>
 8002616:	eef0 7a40 	vmov.f32	s15, s0
 800261a:	edc4 7a00 	vstr	s15, [r4]
		for(int i = 0; i<6;i++)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	3301      	adds	r3, #1
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2b05      	cmp	r3, #5
 8002628:	dde6      	ble.n	80025f8 <ADCStore+0xa4>
		}

	}
}
 800262a:	bf00      	nop
 800262c:	3724      	adds	r7, #36	; 0x24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd90      	pop	{r4, r7, pc}
 8002632:	bf00      	nop
 8002634:	20001970 	.word	0x20001970
 8002638:	2000196c 	.word	0x2000196c
 800263c:	2000132c 	.word	0x2000132c
 8002640:	20001980 	.word	0x20001980

08002644 <LedSwitch>:

/* @brief switch red led on nucleo board
 *
 */
void LedSwitch(int value)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, value);
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <Enable_GPIO>:
 * @param channel -> channel of power supply
 * @param value   -> enable-true, disable-false
 *
 */
void Enable_GPIO(uint8_t channel, bool value)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	460a      	mov	r2, r1
 8002662:	71fb      	strb	r3, [r7, #7]
 8002664:	4613      	mov	r3, r2
 8002666:	71bb      	strb	r3, [r7, #6]
	switch(channel)
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d015      	beq.n	800269a <Enable_GPIO+0x42>
 800266e:	2b02      	cmp	r3, #2
 8002670:	dc1b      	bgt.n	80026aa <Enable_GPIO+0x52>
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <Enable_GPIO+0x24>
 8002676:	2b01      	cmp	r3, #1
 8002678:	d007      	beq.n	800268a <Enable_GPIO+0x32>
		case 2:
			HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, value);
			break;

		default:
			break;
 800267a:	e016      	b.n	80026aa <Enable_GPIO+0x52>
			HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, value);
 800267c:	79bb      	ldrb	r3, [r7, #6]
 800267e:	461a      	mov	r2, r3
 8002680:	2108      	movs	r1, #8
 8002682:	480c      	ldr	r0, [pc, #48]	; (80026b4 <Enable_GPIO+0x5c>)
 8002684:	f004 f8b4 	bl	80067f0 <HAL_GPIO_WritePin>
			break;
 8002688:	e010      	b.n	80026ac <Enable_GPIO+0x54>
			HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, value);
 800268a:	79bb      	ldrb	r3, [r7, #6]
 800268c:	461a      	mov	r2, r3
 800268e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002692:	4809      	ldr	r0, [pc, #36]	; (80026b8 <Enable_GPIO+0x60>)
 8002694:	f004 f8ac 	bl	80067f0 <HAL_GPIO_WritePin>
			break;
 8002698:	e008      	b.n	80026ac <Enable_GPIO+0x54>
			HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, value);
 800269a:	79bb      	ldrb	r3, [r7, #6]
 800269c:	461a      	mov	r2, r3
 800269e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026a2:	4805      	ldr	r0, [pc, #20]	; (80026b8 <Enable_GPIO+0x60>)
 80026a4:	f004 f8a4 	bl	80067f0 <HAL_GPIO_WritePin>
			break;
 80026a8:	e000      	b.n	80026ac <Enable_GPIO+0x54>
			break;
 80026aa:	bf00      	nop

	}
}
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40020800 	.word	0x40020800
 80026b8:	40020400 	.word	0x40020400

080026bc <Output_GPIO>:
 * @param relay_p   -> relay for positive polarity (direct relay)
 * @param relay_n   -> relay for negative polarity (reverse relay)
 *
 */
void Output_GPIO(uint8_t channel, bool relay_p, bool relay_n)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	71fb      	strb	r3, [r7, #7]
 80026c6:	460b      	mov	r3, r1
 80026c8:	71bb      	strb	r3, [r7, #6]
 80026ca:	4613      	mov	r3, r2
 80026cc:	717b      	strb	r3, [r7, #5]
	if(relay_p && relay_n) return;
 80026ce:	79bb      	ldrb	r3, [r7, #6]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <Output_GPIO+0x1e>
 80026d4:	797b      	ldrb	r3, [r7, #5]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d133      	bne.n	8002742 <Output_GPIO+0x86>

	switch(channel)
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d022      	beq.n	8002726 <Output_GPIO+0x6a>
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	dc30      	bgt.n	8002746 <Output_GPIO+0x8a>
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <Output_GPIO+0x32>
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d00e      	beq.n	800270a <Output_GPIO+0x4e>
			HAL_GPIO_WritePin(SWDIR_3_GPIO_Port, SWDIR_3_Pin, relay_p);
			HAL_GPIO_WritePin(SWREV_3_GPIO_Port, SWREV_3_Pin, relay_n);
			break;

		default:
			break;
 80026ec:	e02b      	b.n	8002746 <Output_GPIO+0x8a>
			HAL_GPIO_WritePin(SWDIR_1_GPIO_Port, SWDIR_1_Pin, relay_p);
 80026ee:	79bb      	ldrb	r3, [r7, #6]
 80026f0:	461a      	mov	r2, r3
 80026f2:	2104      	movs	r1, #4
 80026f4:	4816      	ldr	r0, [pc, #88]	; (8002750 <Output_GPIO+0x94>)
 80026f6:	f004 f87b 	bl	80067f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SWREV_1_GPIO_Port, SWREV_1_Pin, relay_n);
 80026fa:	797b      	ldrb	r3, [r7, #5]
 80026fc:	461a      	mov	r2, r3
 80026fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002702:	4813      	ldr	r0, [pc, #76]	; (8002750 <Output_GPIO+0x94>)
 8002704:	f004 f874 	bl	80067f0 <HAL_GPIO_WritePin>
			break;
 8002708:	e01e      	b.n	8002748 <Output_GPIO+0x8c>
			HAL_GPIO_WritePin(SWDIR_2_GPIO_Port, SWDIR_2_Pin, relay_p);
 800270a:	79bb      	ldrb	r3, [r7, #6]
 800270c:	461a      	mov	r2, r3
 800270e:	2102      	movs	r1, #2
 8002710:	480f      	ldr	r0, [pc, #60]	; (8002750 <Output_GPIO+0x94>)
 8002712:	f004 f86d 	bl	80067f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SWREV_2_GPIO_Port, SWREV_2_Pin, relay_n);
 8002716:	797b      	ldrb	r3, [r7, #5]
 8002718:	461a      	mov	r2, r3
 800271a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800271e:	480c      	ldr	r0, [pc, #48]	; (8002750 <Output_GPIO+0x94>)
 8002720:	f004 f866 	bl	80067f0 <HAL_GPIO_WritePin>
			break;
 8002724:	e010      	b.n	8002748 <Output_GPIO+0x8c>
			HAL_GPIO_WritePin(SWDIR_3_GPIO_Port, SWDIR_3_Pin, relay_p);
 8002726:	79bb      	ldrb	r3, [r7, #6]
 8002728:	461a      	mov	r2, r3
 800272a:	2101      	movs	r1, #1
 800272c:	4808      	ldr	r0, [pc, #32]	; (8002750 <Output_GPIO+0x94>)
 800272e:	f004 f85f 	bl	80067f0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SWREV_3_GPIO_Port, SWREV_3_Pin, relay_n);
 8002732:	797b      	ldrb	r3, [r7, #5]
 8002734:	461a      	mov	r2, r3
 8002736:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800273a:	4805      	ldr	r0, [pc, #20]	; (8002750 <Output_GPIO+0x94>)
 800273c:	f004 f858 	bl	80067f0 <HAL_GPIO_WritePin>
			break;
 8002740:	e002      	b.n	8002748 <Output_GPIO+0x8c>
	if(relay_p && relay_n) return;
 8002742:	bf00      	nop
 8002744:	e000      	b.n	8002748 <Output_GPIO+0x8c>
			break;
 8002746:	bf00      	nop

	}
}
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40020800 	.word	0x40020800

08002754 <app_leds_init>:

LEDs_struct LEDs_GREEN_LED1, LEDs_GREEN_LED2, LEDs_RED_LED;


void app_leds_init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
	/* init of LEDs structures */
	LEDs_GREEN_LED1.port_address = (uint32_t*) LED_0_GPIO_Port;
 8002758:	4b24      	ldr	r3, [pc, #144]	; (80027ec <app_leds_init+0x98>)
 800275a:	4a25      	ldr	r2, [pc, #148]	; (80027f0 <app_leds_init+0x9c>)
 800275c:	601a      	str	r2, [r3, #0]
	LEDs_GREEN_LED1.channel_mask = LED_0_Pin;
 800275e:	4b23      	ldr	r3, [pc, #140]	; (80027ec <app_leds_init+0x98>)
 8002760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002764:	605a      	str	r2, [r3, #4]
	LEDs_GREEN_LED1.polarity = 0;
 8002766:	4b21      	ldr	r3, [pc, #132]	; (80027ec <app_leds_init+0x98>)
 8002768:	2200      	movs	r2, #0
 800276a:	721a      	strb	r2, [r3, #8]
	LEDs_GREEN_LED1.led_time = 0;
 800276c:	4b1f      	ldr	r3, [pc, #124]	; (80027ec <app_leds_init+0x98>)
 800276e:	2200      	movs	r2, #0
 8002770:	60da      	str	r2, [r3, #12]
	LEDs_GREEN_LED1.mode = LEDS_OFF;
 8002772:	4b1e      	ldr	r3, [pc, #120]	; (80027ec <app_leds_init+0x98>)
 8002774:	2200      	movs	r2, #0
 8002776:	725a      	strb	r2, [r3, #9]

	LEDs_GREEN_LED2.port_address = (uint32_t*) LED_1_GPIO_Port;
 8002778:	4b1e      	ldr	r3, [pc, #120]	; (80027f4 <app_leds_init+0xa0>)
 800277a:	4a1f      	ldr	r2, [pc, #124]	; (80027f8 <app_leds_init+0xa4>)
 800277c:	601a      	str	r2, [r3, #0]
	LEDs_GREEN_LED2.channel_mask = LED_1_Pin;
 800277e:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <app_leds_init+0xa0>)
 8002780:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002784:	605a      	str	r2, [r3, #4]
	LEDs_GREEN_LED2.polarity = 0;
 8002786:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <app_leds_init+0xa0>)
 8002788:	2200      	movs	r2, #0
 800278a:	721a      	strb	r2, [r3, #8]
	LEDs_GREEN_LED2.led_time = 0;
 800278c:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <app_leds_init+0xa0>)
 800278e:	2200      	movs	r2, #0
 8002790:	60da      	str	r2, [r3, #12]
	LEDs_GREEN_LED2.mode = LEDS_OFF;
 8002792:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <app_leds_init+0xa0>)
 8002794:	2200      	movs	r2, #0
 8002796:	725a      	strb	r2, [r3, #9]

	LEDs_RED_LED.port_address = (uint32_t*) LED_2_GPIO_Port;
 8002798:	4b18      	ldr	r3, [pc, #96]	; (80027fc <app_leds_init+0xa8>)
 800279a:	4a19      	ldr	r2, [pc, #100]	; (8002800 <app_leds_init+0xac>)
 800279c:	601a      	str	r2, [r3, #0]
	LEDs_RED_LED.channel_mask = LED_2_Pin;
 800279e:	4b17      	ldr	r3, [pc, #92]	; (80027fc <app_leds_init+0xa8>)
 80027a0:	2220      	movs	r2, #32
 80027a2:	605a      	str	r2, [r3, #4]
	LEDs_RED_LED.polarity = 0;
 80027a4:	4b15      	ldr	r3, [pc, #84]	; (80027fc <app_leds_init+0xa8>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	721a      	strb	r2, [r3, #8]
	LEDs_RED_LED.led_time = 0;
 80027aa:	4b14      	ldr	r3, [pc, #80]	; (80027fc <app_leds_init+0xa8>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	60da      	str	r2, [r3, #12]
	LEDs_RED_LED. blink_state = 0;
 80027b0:	4b12      	ldr	r3, [pc, #72]	; (80027fc <app_leds_init+0xa8>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	741a      	strb	r2, [r3, #16]
	LEDs_RED_LED.mode = LEDS_OFF;
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <app_leds_init+0xa8>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	725a      	strb	r2, [r3, #9]


	  //leds
	  ledsUpadateLEDState(&LEDs_GREEN_LED1, HAL_GetTick());
 80027bc:	f002 fff8 	bl	80057b0 <HAL_GetTick>
 80027c0:	4603      	mov	r3, r0
 80027c2:	4619      	mov	r1, r3
 80027c4:	4809      	ldr	r0, [pc, #36]	; (80027ec <app_leds_init+0x98>)
 80027c6:	f001 ff11 	bl	80045ec <ledsUpadateLEDState>
	  ledsUpadateLEDState(&LEDs_GREEN_LED2, HAL_GetTick());
 80027ca:	f002 fff1 	bl	80057b0 <HAL_GetTick>
 80027ce:	4603      	mov	r3, r0
 80027d0:	4619      	mov	r1, r3
 80027d2:	4808      	ldr	r0, [pc, #32]	; (80027f4 <app_leds_init+0xa0>)
 80027d4:	f001 ff0a 	bl	80045ec <ledsUpadateLEDState>
	  ledsUpadateLEDState(&LEDs_RED_LED, HAL_GetTick());
 80027d8:	f002 ffea 	bl	80057b0 <HAL_GetTick>
 80027dc:	4603      	mov	r3, r0
 80027de:	4619      	mov	r1, r3
 80027e0:	4806      	ldr	r0, [pc, #24]	; (80027fc <app_leds_init+0xa8>)
 80027e2:	f001 ff03 	bl	80045ec <ledsUpadateLEDState>
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	200019a0 	.word	0x200019a0
 80027f0:	40020800 	.word	0x40020800
 80027f4:	200019b4 	.word	0x200019b4
 80027f8:	40020000 	.word	0x40020000
 80027fc:	200019c8 	.word	0x200019c8
 8002800:	40020400 	.word	0x40020400

08002804 <app_leds_drive>:


void app_leds_drive()
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0

	//connect led
	if(_AppConnected)
 8002808:	4b38      	ldr	r3, [pc, #224]	; (80028ec <app_leds_drive+0xe8>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <app_leds_drive+0x14>
	{
		 LEDs_GREEN_LED1.mode = LEDS_FAST_FLASH;
 8002810:	4b37      	ldr	r3, [pc, #220]	; (80028f0 <app_leds_drive+0xec>)
 8002812:	2203      	movs	r2, #3
 8002814:	725a      	strb	r2, [r3, #9]
 8002816:	e002      	b.n	800281e <app_leds_drive+0x1a>
	}
	else
	{
		 LEDs_GREEN_LED1.mode = LEDS_SLOW_BLINK;
 8002818:	4b35      	ldr	r3, [pc, #212]	; (80028f0 <app_leds_drive+0xec>)
 800281a:	2206      	movs	r2, #6
 800281c:	725a      	strb	r2, [r3, #9]




	 //channels enable led
	 if(ChannelsStatus[0].enable || ChannelsStatus[1].enable || ChannelsStatus[1].enable)
 800281e:	4b35      	ldr	r3, [pc, #212]	; (80028f4 <app_leds_drive+0xf0>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d107      	bne.n	8002836 <app_leds_drive+0x32>
 8002826:	4b33      	ldr	r3, [pc, #204]	; (80028f4 <app_leds_drive+0xf0>)
 8002828:	7d1b      	ldrb	r3, [r3, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d103      	bne.n	8002836 <app_leds_drive+0x32>
 800282e:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <app_leds_drive+0xf0>)
 8002830:	7d1b      	ldrb	r3, [r3, #20]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <app_leds_drive+0x3a>
	 {
		 LEDs_GREEN_LED2.mode = LEDS_ON;
 8002836:	4b30      	ldr	r3, [pc, #192]	; (80028f8 <app_leds_drive+0xf4>)
 8002838:	2201      	movs	r2, #1
 800283a:	725a      	strb	r2, [r3, #9]
 800283c:	e002      	b.n	8002844 <app_leds_drive+0x40>
		  //LEDs_RED_LED.mode = LEDS_FAST_BLINK;
	 }
	 else
	 {
		 LEDs_GREEN_LED2.mode = LEDS_OFF;
 800283e:	4b2e      	ldr	r3, [pc, #184]	; (80028f8 <app_leds_drive+0xf4>)
 8002840:	2200      	movs	r2, #0
 8002842:	725a      	strb	r2, [r3, #9]
		 //LEDs_RED_LED.mode = LEDS_OFF;
	 }


	 //red led
	if(_FoundError_OR)
 8002844:	4b2d      	ldr	r3, [pc, #180]	; (80028fc <app_leds_drive+0xf8>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <app_leds_drive+0x50>
	{
		LEDs_RED_LED.mode = LEDS_ON;
 800284c:	4b2c      	ldr	r3, [pc, #176]	; (8002900 <app_leds_drive+0xfc>)
 800284e:	2201      	movs	r2, #1
 8002850:	725a      	strb	r2, [r3, #9]
 8002852:	e034      	b.n	80028be <app_leds_drive+0xba>
	}
	else if(ChannelsStatus[0].disableInError || ChannelsStatus[1].disableInError || ChannelsStatus[1].disableInError)
 8002854:	4b27      	ldr	r3, [pc, #156]	; (80028f4 <app_leds_drive+0xf0>)
 8002856:	7c9b      	ldrb	r3, [r3, #18]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d109      	bne.n	8002870 <app_leds_drive+0x6c>
 800285c:	4b25      	ldr	r3, [pc, #148]	; (80028f4 <app_leds_drive+0xf0>)
 800285e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002862:	2b00      	cmp	r3, #0
 8002864:	d104      	bne.n	8002870 <app_leds_drive+0x6c>
 8002866:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <app_leds_drive+0xf0>)
 8002868:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <app_leds_drive+0x74>
	{
		LEDs_RED_LED.mode = LEDS_ON;
 8002870:	4b23      	ldr	r3, [pc, #140]	; (8002900 <app_leds_drive+0xfc>)
 8002872:	2201      	movs	r2, #1
 8002874:	725a      	strb	r2, [r3, #9]
 8002876:	e022      	b.n	80028be <app_leds_drive+0xba>
	}
	else if(ChannelsChange[0].restart_request || ChannelsChange[1].restart_request || ChannelsChange[1].restart_request)
 8002878:	4b22      	ldr	r3, [pc, #136]	; (8002904 <app_leds_drive+0x100>)
 800287a:	78db      	ldrb	r3, [r3, #3]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d107      	bne.n	8002890 <app_leds_drive+0x8c>
 8002880:	4b20      	ldr	r3, [pc, #128]	; (8002904 <app_leds_drive+0x100>)
 8002882:	7fdb      	ldrb	r3, [r3, #31]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d103      	bne.n	8002890 <app_leds_drive+0x8c>
 8002888:	4b1e      	ldr	r3, [pc, #120]	; (8002904 <app_leds_drive+0x100>)
 800288a:	7fdb      	ldrb	r3, [r3, #31]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <app_leds_drive+0x94>
	{
		LEDs_RED_LED.mode = LEDS_ON;
 8002890:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <app_leds_drive+0xfc>)
 8002892:	2201      	movs	r2, #1
 8002894:	725a      	strb	r2, [r3, #9]
 8002896:	e012      	b.n	80028be <app_leds_drive+0xba>
	}
	else if(ChannelsStatus[0].enable || ChannelsStatus[1].enable || ChannelsStatus[1].enable)
 8002898:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <app_leds_drive+0xf0>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d107      	bne.n	80028b0 <app_leds_drive+0xac>
 80028a0:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <app_leds_drive+0xf0>)
 80028a2:	7d1b      	ldrb	r3, [r3, #20]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d103      	bne.n	80028b0 <app_leds_drive+0xac>
 80028a8:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <app_leds_drive+0xf0>)
 80028aa:	7d1b      	ldrb	r3, [r3, #20]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <app_leds_drive+0xb4>
	{
		LEDs_RED_LED.mode = LEDS_SLOW_BLINK;
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <app_leds_drive+0xfc>)
 80028b2:	2206      	movs	r2, #6
 80028b4:	725a      	strb	r2, [r3, #9]
 80028b6:	e002      	b.n	80028be <app_leds_drive+0xba>
	}
	else
	{
		LEDs_RED_LED.mode = LEDS_OFF;
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <app_leds_drive+0xfc>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	725a      	strb	r2, [r3, #9]
	}



	  //leds update
	  ledsUpadateLEDState(&LEDs_GREEN_LED1, HAL_GetTick());
 80028be:	f002 ff77 	bl	80057b0 <HAL_GetTick>
 80028c2:	4603      	mov	r3, r0
 80028c4:	4619      	mov	r1, r3
 80028c6:	480a      	ldr	r0, [pc, #40]	; (80028f0 <app_leds_drive+0xec>)
 80028c8:	f001 fe90 	bl	80045ec <ledsUpadateLEDState>
	  ledsUpadateLEDState(&LEDs_GREEN_LED2, HAL_GetTick());
 80028cc:	f002 ff70 	bl	80057b0 <HAL_GetTick>
 80028d0:	4603      	mov	r3, r0
 80028d2:	4619      	mov	r1, r3
 80028d4:	4808      	ldr	r0, [pc, #32]	; (80028f8 <app_leds_drive+0xf4>)
 80028d6:	f001 fe89 	bl	80045ec <ledsUpadateLEDState>
	  ledsUpadateLEDState(&LEDs_RED_LED, HAL_GetTick());
 80028da:	f002 ff69 	bl	80057b0 <HAL_GetTick>
 80028de:	4603      	mov	r3, r0
 80028e0:	4619      	mov	r1, r3
 80028e2:	4807      	ldr	r0, [pc, #28]	; (8002900 <app_leds_drive+0xfc>)
 80028e4:	f001 fe82 	bl	80045ec <ledsUpadateLEDState>

}
 80028e8:	bf00      	nop
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	200002b8 	.word	0x200002b8
 80028f0:	200019a0 	.word	0x200019a0
 80028f4:	200019dc 	.word	0x200019dc
 80028f8:	200019b4 	.word	0x200019b4
 80028fc:	20000319 	.word	0x20000319
 8002900:	200019c8 	.word	0x200019c8
 8002904:	20001a18 	.word	0x20001a18

08002908 <GetDacCoef_k>:
/* @brief get K coeficient for DAC
 *
 *	@channel -> adc channel
 */
float GetDacCoef_k(int channel)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	float *addr = ((float *)&MainParams.sramOffset_AdjCoef_k_ch0) + channel;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4a06      	ldr	r2, [pc, #24]	; (8002930 <GetDacCoef_k+0x28>)
 8002916:	4413      	add	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
	return *addr;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	ee07 3a90 	vmov	s15, r3
}
 8002922:	eeb0 0a67 	vmov.f32	s0, s15
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	20001ad4 	.word	0x20001ad4

08002934 <GetDacCoef_q>:
/* @brief get Q coeficient for DAC
 *
 *	@channel -> adc channel
 */
float GetDacCoef_q(int channel)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	float *addr = ((float *)&MainParams.sramOffset_AdjCoef_q_ch0) + channel;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4a06      	ldr	r2, [pc, #24]	; (800295c <GetDacCoef_q+0x28>)
 8002942:	4413      	add	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
	return *addr;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	ee07 3a90 	vmov	s15, r3
}
 800294e:	eeb0 0a67 	vmov.f32	s0, s15
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	20001ae0 	.word	0x20001ae0

08002960 <StoreDACConstant>:
 * @param value -> value of coefficient
 *
 *
 */
void StoreDACConstant(uint8_t coef, float value)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	ed87 0a00 	vstr	s0, [r7]
 800296c:	71fb      	strb	r3, [r7, #7]
	float *addr = ((float *)&MainParams.sramOffset_AdjCoef_k_ch0) + coef;//  + (4 * channel);
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4a06      	ldr	r2, [pc, #24]	; (800298c <StoreDACConstant+0x2c>)
 8002974:	4413      	add	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
	*addr = value;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	601a      	str	r2, [r3, #0]
}
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20001ad4 	.word	0x20001ad4

08002990 <SendDACCoefficients>:
/* @brief send DAC coefficients to communication
 *
 *
 */
void SendDACCoefficients()
{
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
	for(int i = 0;i<6;i++)
 8002996:	2300      	movs	r3, #0
 8002998:	607b      	str	r3, [r7, #4]
 800299a:	e010      	b.n	80029be <SendDACCoefficients+0x2e>
	{
		SendCommunication_float(cmd_dac_get_k0 + i, GetDacCoef_k(i));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	3343      	adds	r3, #67	; 0x43
 80029a2:	b2dc      	uxtb	r4, r3
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff ffaf 	bl	8002908 <GetDacCoef_k>
 80029aa:	eef0 7a40 	vmov.f32	s15, s0
 80029ae:	eeb0 0a67 	vmov.f32	s0, s15
 80029b2:	4620      	mov	r0, r4
 80029b4:	f7ff f998 	bl	8001ce8 <SendCommunication_float>
	for(int i = 0;i<6;i++)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3301      	adds	r3, #1
 80029bc:	607b      	str	r3, [r7, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b05      	cmp	r3, #5
 80029c2:	ddeb      	ble.n	800299c <SendDACCoefficients+0xc>
	}

}
 80029c4:	bf00      	nop
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd90      	pop	{r4, r7, pc}
	...

080029d0 <Get_PreRegulatorVoltage>:
 * @param voltage -> request voltage on power supply output
 *
 * @return uint16_t value of voltage for pre regulator
 */
uint16_t Get_PreRegulatorVoltage(uint16_t voltage)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	80fb      	strh	r3, [r7, #6]
	return (0.15789 * (float)voltage) + 21.05263;
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	ee07 3a90 	vmov	s15, r3
 80029e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e4:	ee17 0a90 	vmov	r0, s15
 80029e8:	f7fd fdb6 	bl	8000558 <__aeabi_f2d>
 80029ec:	a30c      	add	r3, pc, #48	; (adr r3, 8002a20 <Get_PreRegulatorVoltage+0x50>)
 80029ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f2:	f7fd fe09 	bl	8000608 <__aeabi_dmul>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4610      	mov	r0, r2
 80029fc:	4619      	mov	r1, r3
 80029fe:	a30a      	add	r3, pc, #40	; (adr r3, 8002a28 <Get_PreRegulatorVoltage+0x58>)
 8002a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a04:	f7fd fc4a 	bl	800029c <__adddf3>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	4619      	mov	r1, r3
 8002a10:	f7fe f8d2 	bl	8000bb8 <__aeabi_d2uiz>
 8002a14:	4603      	mov	r3, r0
 8002a16:	b29b      	uxth	r3, r3
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	512ec6bd 	.word	0x512ec6bd
 8002a24:	3fc435bd 	.word	0x3fc435bd
 8002a28:	28e0c9da 	.word	0x28e0c9da
 8002a2c:	40350d79 	.word	0x40350d79

08002a30 <Get_DACValue>:

//Calculate DAC register value from recomended voltage
uint16_t Get_DACValue(int dac_channel, uint16_t value)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	807b      	strh	r3, [r7, #2]
	uint16_t code;


	if(dac_channel == 0 || dac_channel == 1 || dac_channel == 2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <Get_DACValue+0x1e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d002      	beq.n	8002a4e <Get_DACValue+0x1e>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d12a      	bne.n	8002aa4 <Get_DACValue+0x74>
	{
		code = (uint16_t)(((PreReg_Coef_q - (float)value) / PreReg_Coef_k) * (float)DAC_coef);
 8002a4e:	887b      	ldrh	r3, [r7, #2]
 8002a50:	ee07 3a90 	vmov	s15, r3
 8002a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a58:	ee17 0a90 	vmov	r0, s15
 8002a5c:	f7fd fd7c 	bl	8000558 <__aeabi_f2d>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	a125      	add	r1, pc, #148	; (adr r1, 8002afc <Get_DACValue+0xcc>)
 8002a66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a6a:	f7fd fc15 	bl	8000298 <__aeabi_dsub>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4610      	mov	r0, r2
 8002a74:	4619      	mov	r1, r3
 8002a76:	a323      	add	r3, pc, #140	; (adr r3, 8002b04 <Get_DACValue+0xd4>)
 8002a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7c:	f7fd feee 	bl	800085c <__aeabi_ddiv>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	a320      	add	r3, pc, #128	; (adr r3, 8002b0c <Get_DACValue+0xdc>)
 8002a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8e:	f7fd fdbb 	bl	8000608 <__aeabi_dmul>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f7fe f88d 	bl	8000bb8 <__aeabi_d2uiz>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	82fb      	strh	r3, [r7, #22]
 8002aa2:	e023      	b.n	8002aec <Get_DACValue+0xbc>
	}
	else
	{
		float coef_k = GetDacCoef_k(dac_channel - 3);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3b03      	subs	r3, #3
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff ff2d 	bl	8002908 <GetDacCoef_k>
 8002aae:	ed87 0a04 	vstr	s0, [r7, #16]
		float coef_q = GetDacCoef_q(dac_channel - 3);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3b03      	subs	r3, #3
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff ff3c 	bl	8002934 <GetDacCoef_q>
 8002abc:	ed87 0a03 	vstr	s0, [r7, #12]

		code = (uint16_t)(((coef_q - (float)value) / coef_k) * (float)DAC_coef);
 8002ac0:	887b      	ldrh	r3, [r7, #2]
 8002ac2:	ee07 3a90 	vmov	s15, r3
 8002ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aca:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ace:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002ad2:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ada:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002af8 <Get_DACValue+0xc8>
 8002ade:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ae6:	ee17 3a90 	vmov	r3, s15
 8002aea:	82fb      	strh	r3, [r7, #22]
	}


	return code;
 8002aec:	8afb      	ldrh	r3, [r7, #22]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3718      	adds	r7, #24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	454ccccd 	.word	0x454ccccd
 8002afc:	3dee7818 	.word	0x3dee7818
 8002b00:	405ff4dc 	.word	0x405ff4dc
 8002b04:	c39af4e3 	.word	0xc39af4e3
 8002b08:	405537da 	.word	0x405537da
 8002b0c:	a0000000 	.word	0xa0000000
 8002b10:	40a99999 	.word	0x40a99999
 8002b14:	00000000 	.word	0x00000000

08002b18 <Get_DACValue_F>:

uint16_t Get_DACValue_F(int dac_channel, float value)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	ed87 0a00 	vstr	s0, [r7]
	uint16_t code;


	if(dac_channel == 0 || dac_channel == 1 || dac_channel == 2)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d005      	beq.n	8002b36 <Get_DACValue_F+0x1e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d002      	beq.n	8002b36 <Get_DACValue_F+0x1e>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d124      	bne.n	8002b80 <Get_DACValue_F+0x68>
	{
		code = (uint16_t)(((PreReg_Coef_q - (float)value) / PreReg_Coef_k) * (float)DAC_coef);
 8002b36:	6838      	ldr	r0, [r7, #0]
 8002b38:	f7fd fd0e 	bl	8000558 <__aeabi_f2d>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	a124      	add	r1, pc, #144	; (adr r1, 8002bd4 <Get_DACValue_F+0xbc>)
 8002b42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b46:	f7fd fba7 	bl	8000298 <__aeabi_dsub>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4610      	mov	r0, r2
 8002b50:	4619      	mov	r1, r3
 8002b52:	a322      	add	r3, pc, #136	; (adr r3, 8002bdc <Get_DACValue_F+0xc4>)
 8002b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b58:	f7fd fe80 	bl	800085c <__aeabi_ddiv>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	a31f      	add	r3, pc, #124	; (adr r3, 8002be4 <Get_DACValue_F+0xcc>)
 8002b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6a:	f7fd fd4d 	bl	8000608 <__aeabi_dmul>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4610      	mov	r0, r2
 8002b74:	4619      	mov	r1, r3
 8002b76:	f7fe f81f 	bl	8000bb8 <__aeabi_d2uiz>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	82fb      	strh	r3, [r7, #22]
 8002b7e:	e020      	b.n	8002bc2 <Get_DACValue_F+0xaa>
	}
	else
	{
		float coef_k = GetDacCoef_k(dac_channel - 3);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3b03      	subs	r3, #3
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff febf 	bl	8002908 <GetDacCoef_k>
 8002b8a:	ed87 0a04 	vstr	s0, [r7, #16]
		float coef_q = GetDacCoef_q(dac_channel - 3);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3b03      	subs	r3, #3
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fece 	bl	8002934 <GetDacCoef_q>
 8002b98:	ed87 0a03 	vstr	s0, [r7, #12]

		code = (uint16_t)((((float)coef_q - (float)value) / coef_k) * (float)DAC_coef);
 8002b9c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ba0:	edd7 7a00 	vldr	s15, [r7]
 8002ba4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002ba8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bb0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002bd0 <Get_DACValue_F+0xb8>
 8002bb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bbc:	ee17 3a90 	vmov	r3, s15
 8002bc0:	82fb      	strh	r3, [r7, #22]
	}


	return code;
 8002bc2:	8afb      	ldrh	r3, [r7, #22]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3718      	adds	r7, #24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	f3af 8000 	nop.w
 8002bd0:	454ccccd 	.word	0x454ccccd
 8002bd4:	3dee7818 	.word	0x3dee7818
 8002bd8:	405ff4dc 	.word	0x405ff4dc
 8002bdc:	c39af4e3 	.word	0xc39af4e3
 8002be0:	405537da 	.word	0x405537da
 8002be4:	a0000000 	.word	0xa0000000
 8002be8:	40a99999 	.word	0x40a99999

08002bec <Set_PreReg_Voltage>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param voltage -> request voltage on regulator output
 * 
 */
void Set_PreReg_Voltage(uint8_t channel, uint16_t voltage)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	460a      	mov	r2, r1
 8002bf6:	71fb      	strb	r3, [r7, #7]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	80bb      	strh	r3, [r7, #4]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002bfc:	79fb      	ldrb	r3, [r7, #7]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d005      	beq.n	8002c0e <Set_PreReg_Voltage+0x22>
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d002      	beq.n	8002c0e <Set_PreReg_Voltage+0x22>
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d116      	bne.n	8002c3c <Set_PreReg_Voltage+0x50>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 8002c0e:	88bb      	ldrh	r3, [r7, #4]
 8002c10:	2b1d      	cmp	r3, #29
 8002c12:	d804      	bhi.n	8002c1e <Set_PreReg_Voltage+0x32>
 8002c14:	88bb      	ldrh	r3, [r7, #4]
 8002c16:	f240 2226 	movw	r2, #550	; 0x226
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d810      	bhi.n	8002c40 <Set_PreReg_Voltage+0x54>

	uint16_t value = Get_DACValue(channel, voltage);
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	88ba      	ldrh	r2, [r7, #4]
 8002c22:	4611      	mov	r1, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ff03 	bl	8002a30 <Get_DACValue>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	81fb      	strh	r3, [r7, #14]
	SendValueToDAC(channel,value);
 8002c2e:	89fa      	ldrh	r2, [r7, #14]
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	4611      	mov	r1, r2
 8002c34:	4618      	mov	r0, r3
 8002c36:	f001 f9e7 	bl	8004008 <SendValueToDAC>
 8002c3a:	e002      	b.n	8002c42 <Set_PreReg_Voltage+0x56>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002c3c:	bf00      	nop
 8002c3e:	e000      	b.n	8002c42 <Set_PreReg_Voltage+0x56>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 8002c40:	bf00      	nop
}
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <Set_OutReg_Voltage>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param voltage -> request voltage on regulator output
 * 
 */
void Set_OutReg_Voltage(uint8_t channel, uint16_t voltage)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	460a      	mov	r2, r1
 8002c52:	71fb      	strb	r3, [r7, #7]
 8002c54:	4613      	mov	r3, r2
 8002c56:	80bb      	strh	r3, [r7, #4]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <Set_OutReg_Voltage+0x22>
 8002c5e:	79fb      	ldrb	r3, [r7, #7]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d002      	beq.n	8002c6a <Set_OutReg_Voltage+0x22>
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d119      	bne.n	8002c9e <Set_OutReg_Voltage+0x56>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 8002c6a:	88bb      	ldrh	r3, [r7, #4]
 8002c6c:	2b1d      	cmp	r3, #29
 8002c6e:	d804      	bhi.n	8002c7a <Set_OutReg_Voltage+0x32>
 8002c70:	88bb      	ldrh	r3, [r7, #4]
 8002c72:	f240 2226 	movw	r2, #550	; 0x226
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d813      	bhi.n	8002ca2 <Set_OutReg_Voltage+0x5a>

	uint16_t value = Get_DACValue(channel + 3, voltage);
 8002c7a:	79fb      	ldrb	r3, [r7, #7]
 8002c7c:	3303      	adds	r3, #3
 8002c7e:	88ba      	ldrh	r2, [r7, #4]
 8002c80:	4611      	mov	r1, r2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fed4 	bl	8002a30 <Get_DACValue>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	81fb      	strh	r3, [r7, #14]
	SendValueToDAC(channel + 3, value);
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	3303      	adds	r3, #3
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	89fa      	ldrh	r2, [r7, #14]
 8002c94:	4611      	mov	r1, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f001 f9b6 	bl	8004008 <SendValueToDAC>
 8002c9c:	e002      	b.n	8002ca4 <Set_OutReg_Voltage+0x5c>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002c9e:	bf00      	nop
 8002ca0:	e000      	b.n	8002ca4 <Set_OutReg_Voltage+0x5c>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 8002ca2:	bf00      	nop
}
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <Set_OutReg_Voltage_F>:

void Set_OutReg_Voltage_F(uint8_t channel, float voltage)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	ed87 0a00 	vstr	s0, [r7]
 8002cb8:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <Set_OutReg_Voltage_F+0x20>
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d002      	beq.n	8002ccc <Set_OutReg_Voltage_F+0x20>
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d123      	bne.n	8002d14 <Set_OutReg_Voltage_F+0x68>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 8002ccc:	edd7 7a00 	vldr	s15, [r7]
 8002cd0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002cd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cdc:	d508      	bpl.n	8002cf0 <Set_OutReg_Voltage_F+0x44>
 8002cde:	edd7 7a00 	vldr	s15, [r7]
 8002ce2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002d20 <Set_OutReg_Voltage_F+0x74>
 8002ce6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cee:	dc13      	bgt.n	8002d18 <Set_OutReg_Voltage_F+0x6c>

	uint16_t value = Get_DACValue_F(channel + 3, voltage);
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	3303      	adds	r3, #3
 8002cf4:	ed97 0a00 	vldr	s0, [r7]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff ff0d 	bl	8002b18 <Get_DACValue_F>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	81fb      	strh	r3, [r7, #14]
	SendValueToDAC(channel + 3, value);
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	3303      	adds	r3, #3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	89fa      	ldrh	r2, [r7, #14]
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f001 f97b 	bl	8004008 <SendValueToDAC>
 8002d12:	e002      	b.n	8002d1a <Set_OutReg_Voltage_F+0x6e>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002d14:	bf00      	nop
 8002d16:	e000      	b.n	8002d1a <Set_OutReg_Voltage_F+0x6e>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 8002d18:	bf00      	nop
}
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	44098000 	.word	0x44098000

08002d24 <Set_Voltage>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param voltage -> request voltage on output of power supply channel
 * 
 */
void Set_Voltage(uint8_t channel, uint16_t voltage)
{
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	460a      	mov	r2, r1
 8002d2e:	71fb      	strb	r3, [r7, #7]
 8002d30:	4613      	mov	r3, r2
 8002d32:	80bb      	strh	r3, [r7, #4]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d006      	beq.n	8002d48 <Set_Voltage+0x24>
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d003      	beq.n	8002d48 <Set_Voltage+0x24>
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	f040 80ba 	bne.w	8002ebc <Set_Voltage+0x198>
	if((voltage < minimum_voltage) || (voltage > maximum_voltage)) return;
 8002d48:	88bb      	ldrh	r3, [r7, #4]
 8002d4a:	2b1d      	cmp	r3, #29
 8002d4c:	f240 80b8 	bls.w	8002ec0 <Set_Voltage+0x19c>
 8002d50:	88bb      	ldrh	r3, [r7, #4]
 8002d52:	f240 2226 	movw	r2, #550	; 0x226
 8002d56:	4293      	cmp	r3, r2
 8002d58:	f200 80b2 	bhi.w	8002ec0 <Set_Voltage+0x19c>

	ChannelsChange[channel].request_voltage = voltage; //store request voltage
 8002d5c:	79fa      	ldrb	r2, [r7, #7]
 8002d5e:	495a      	ldr	r1, [pc, #360]	; (8002ec8 <Set_Voltage+0x1a4>)
 8002d60:	4613      	mov	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	1a9b      	subs	r3, r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	3316      	adds	r3, #22
 8002d6c:	88ba      	ldrh	r2, [r7, #4]
 8002d6e:	801a      	strh	r2, [r3, #0]

	adaptiveVoltRequest[channel] = true;
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	4a56      	ldr	r2, [pc, #344]	; (8002ecc <Set_Voltage+0x1a8>)
 8002d74:	2101      	movs	r1, #1
 8002d76:	54d1      	strb	r1, [r2, r3]

	if(abs(voltage - ChannelsStatus[channel].set_voltage) > ramp_v_step) //voltage ramping if difference is bigger that voltage ramp step
 8002d78:	88b9      	ldrh	r1, [r7, #4]
 8002d7a:	79fa      	ldrb	r2, [r7, #7]
 8002d7c:	4854      	ldr	r0, [pc, #336]	; (8002ed0 <Set_Voltage+0x1ac>)
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4403      	add	r3, r0
 8002d88:	3302      	adds	r3, #2
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	1acb      	subs	r3, r1, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	bfb8      	it	lt
 8002d92:	425b      	neglt	r3, r3
 8002d94:	2b05      	cmp	r3, #5
 8002d96:	dd75      	ble.n	8002e84 <Set_Voltage+0x160>
	{
		//ChannelsChange[channel].request_voltage = voltage; //store request voltage

		//calculate new voltage
		if(ChannelsStatus[channel].set_voltage < ChannelsChange[channel].request_voltage)
 8002d98:	79fa      	ldrb	r2, [r7, #7]
 8002d9a:	494d      	ldr	r1, [pc, #308]	; (8002ed0 <Set_Voltage+0x1ac>)
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	3302      	adds	r3, #2
 8002da8:	8819      	ldrh	r1, [r3, #0]
 8002daa:	79fa      	ldrb	r2, [r7, #7]
 8002dac:	4846      	ldr	r0, [pc, #280]	; (8002ec8 <Set_Voltage+0x1a4>)
 8002dae:	4613      	mov	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4403      	add	r3, r0
 8002db8:	3316      	adds	r3, #22
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	4299      	cmp	r1, r3
 8002dbe:	d215      	bcs.n	8002dec <Set_Voltage+0xc8>
		{
			ChannelsStatus[channel].set_voltage += ramp_v_step;
 8002dc0:	79fa      	ldrb	r2, [r7, #7]
 8002dc2:	4943      	ldr	r1, [pc, #268]	; (8002ed0 <Set_Voltage+0x1ac>)
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	440b      	add	r3, r1
 8002dce:	3302      	adds	r3, #2
 8002dd0:	881b      	ldrh	r3, [r3, #0]
 8002dd2:	79fa      	ldrb	r2, [r7, #7]
 8002dd4:	3305      	adds	r3, #5
 8002dd6:	b298      	uxth	r0, r3
 8002dd8:	493d      	ldr	r1, [pc, #244]	; (8002ed0 <Set_Voltage+0x1ac>)
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	3302      	adds	r3, #2
 8002de6:	4602      	mov	r2, r0
 8002de8:	801a      	strh	r2, [r3, #0]
 8002dea:	e014      	b.n	8002e16 <Set_Voltage+0xf2>
		}
		else
		{
			ChannelsStatus[channel].set_voltage -= ramp_v_step;
 8002dec:	79fa      	ldrb	r2, [r7, #7]
 8002dee:	4938      	ldr	r1, [pc, #224]	; (8002ed0 <Set_Voltage+0x1ac>)
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	79fa      	ldrb	r2, [r7, #7]
 8002e00:	3b05      	subs	r3, #5
 8002e02:	b298      	uxth	r0, r3
 8002e04:	4932      	ldr	r1, [pc, #200]	; (8002ed0 <Set_Voltage+0x1ac>)
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	3302      	adds	r3, #2
 8002e12:	4602      	mov	r2, r0
 8002e14:	801a      	strh	r2, [r3, #0]
		}

		//Set voltage
		Set_OutReg_Voltage(channel, ChannelsStatus[channel].set_voltage);
 8002e16:	79fa      	ldrb	r2, [r7, #7]
 8002e18:	492d      	ldr	r1, [pc, #180]	; (8002ed0 <Set_Voltage+0x1ac>)
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	3302      	adds	r3, #2
 8002e26:	881a      	ldrh	r2, [r3, #0]
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff0b 	bl	8002c48 <Set_OutReg_Voltage>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(ChannelsStatus[channel].set_voltage));
 8002e32:	79fa      	ldrb	r2, [r7, #7]
 8002e34:	4926      	ldr	r1, [pc, #152]	; (8002ed0 <Set_Voltage+0x1ac>)
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	3302      	adds	r3, #2
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fdc3 	bl	80029d0 <Get_PreRegulatorVoltage>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff feca 	bl	8002bec <Set_PreReg_Voltage>

		//Enable and set ramping timer
		ChannelsChange[channel].voltage_ramp = true;
 8002e58:	79fa      	ldrb	r2, [r7, #7]
 8002e5a:	491b      	ldr	r1, [pc, #108]	; (8002ec8 <Set_Voltage+0x1a4>)
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	1a9b      	subs	r3, r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	2201      	movs	r2, #1
 8002e68:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].voltage_ramp_timer = HAL_GetTick();
 8002e6a:	79fc      	ldrb	r4, [r7, #7]
 8002e6c:	f002 fca0 	bl	80057b0 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	4915      	ldr	r1, [pc, #84]	; (8002ec8 <Set_Voltage+0x1a4>)
 8002e74:	4623      	mov	r3, r4
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	1b1b      	subs	r3, r3, r4
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	3304      	adds	r3, #4
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	e01e      	b.n	8002ec2 <Set_Voltage+0x19e>
	}
	else //without voltage ramping if difference is smaller that voltage ramp step
	{
		//ChannelsChange[channel].request_voltage = voltage; //store request voltage
		ChannelsStatus[channel].set_voltage = voltage;
 8002e84:	79fa      	ldrb	r2, [r7, #7]
 8002e86:	4912      	ldr	r1, [pc, #72]	; (8002ed0 <Set_Voltage+0x1ac>)
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	3302      	adds	r3, #2
 8002e94:	88ba      	ldrh	r2, [r7, #4]
 8002e96:	801a      	strh	r2, [r3, #0]
		Set_OutReg_Voltage(channel, voltage);
 8002e98:	88ba      	ldrh	r2, [r7, #4]
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff fed2 	bl	8002c48 <Set_OutReg_Voltage>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(voltage));
 8002ea4:	88bb      	ldrh	r3, [r7, #4]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff fd92 	bl	80029d0 <Get_PreRegulatorVoltage>
 8002eac:	4603      	mov	r3, r0
 8002eae:	461a      	mov	r2, r3
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff fe99 	bl	8002bec <Set_PreReg_Voltage>
 8002eba:	e002      	b.n	8002ec2 <Set_Voltage+0x19e>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002ebc:	bf00      	nop
 8002ebe:	e000      	b.n	8002ec2 <Set_Voltage+0x19e>
	if((voltage < minimum_voltage) || (voltage > maximum_voltage)) return;
 8002ec0:	bf00      	nop
	}

}
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd90      	pop	{r4, r7, pc}
 8002ec8:	20001a18 	.word	0x20001a18
 8002ecc:	20001a84 	.word	0x20001a84
 8002ed0:	200019dc 	.word	0x200019dc

08002ed4 <Set_VoltageInEnable>:


void Set_VoltageInEnable(uint8_t channel)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d005      	beq.n	8002ef0 <Set_VoltageInEnable+0x1c>
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d002      	beq.n	8002ef0 <Set_VoltageInEnable+0x1c>
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d11d      	bne.n	8002f2c <Set_VoltageInEnable+0x58>

	uint16_t voltage = minimum_voltage;
 8002ef0:	231e      	movs	r3, #30
 8002ef2:	81fb      	strh	r3, [r7, #14]

	Set_OutReg_Voltage(channel, voltage);
 8002ef4:	89fa      	ldrh	r2, [r7, #14]
 8002ef6:	79fb      	ldrb	r3, [r7, #7]
 8002ef8:	4611      	mov	r1, r2
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff fea4 	bl	8002c48 <Set_OutReg_Voltage>
	Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(voltage));
 8002f00:	89fb      	ldrh	r3, [r7, #14]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff fd64 	bl	80029d0 <Get_PreRegulatorVoltage>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	4611      	mov	r1, r2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fe6b 	bl	8002bec <Set_PreReg_Voltage>

	ChannelsStatus[channel].set_voltage = voltage;
 8002f16:	79fa      	ldrb	r2, [r7, #7]
 8002f18:	4906      	ldr	r1, [pc, #24]	; (8002f34 <Set_VoltageInEnable+0x60>)
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	3302      	adds	r3, #2
 8002f26:	89fa      	ldrh	r2, [r7, #14]
 8002f28:	801a      	strh	r2, [r3, #0]
 8002f2a:	e000      	b.n	8002f2e <Set_VoltageInEnable+0x5a>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002f2c:	bf00      	nop
}
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	200019dc 	.word	0x200019dc

08002f38 <Set_Voltage_From_Ramping>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param voltage -> request voltage on output of power supply channel
 *
 */
void Set_Voltage_From_Ramping(uint8_t channel)
{
 8002f38:	b590      	push	{r4, r7, lr}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d006      	beq.n	8002f56 <Set_Voltage_From_Ramping+0x1e>
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d003      	beq.n	8002f56 <Set_Voltage_From_Ramping+0x1e>
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	f040 80cd 	bne.w	80030f0 <Set_Voltage_From_Ramping+0x1b8>

	if(abs(ChannelsStatus[channel].set_voltage - ChannelsChange[channel].request_voltage) > ramp_v_step) //keep ramping
 8002f56:	79fa      	ldrb	r2, [r7, #7]
 8002f58:	4967      	ldr	r1, [pc, #412]	; (80030f8 <Set_Voltage_From_Ramping+0x1c0>)
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	3302      	adds	r3, #2
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	79fa      	ldrb	r2, [r7, #7]
 8002f6c:	4963      	ldr	r1, [pc, #396]	; (80030fc <Set_Voltage_From_Ramping+0x1c4>)
 8002f6e:	4613      	mov	r3, r2
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	3316      	adds	r3, #22
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	1ac3      	subs	r3, r0, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	bfb8      	it	lt
 8002f82:	425b      	neglt	r3, r3
 8002f84:	2b05      	cmp	r3, #5
 8002f86:	dd75      	ble.n	8003074 <Set_Voltage_From_Ramping+0x13c>
	{

		//calculate new voltage
		if(ChannelsStatus[channel].set_voltage < ChannelsChange[channel].request_voltage)
 8002f88:	79fa      	ldrb	r2, [r7, #7]
 8002f8a:	495b      	ldr	r1, [pc, #364]	; (80030f8 <Set_Voltage_From_Ramping+0x1c0>)
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	3302      	adds	r3, #2
 8002f98:	8819      	ldrh	r1, [r3, #0]
 8002f9a:	79fa      	ldrb	r2, [r7, #7]
 8002f9c:	4857      	ldr	r0, [pc, #348]	; (80030fc <Set_Voltage_From_Ramping+0x1c4>)
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4403      	add	r3, r0
 8002fa8:	3316      	adds	r3, #22
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	4299      	cmp	r1, r3
 8002fae:	d215      	bcs.n	8002fdc <Set_Voltage_From_Ramping+0xa4>
		{
			ChannelsStatus[channel].set_voltage += ramp_v_step;
 8002fb0:	79fa      	ldrb	r2, [r7, #7]
 8002fb2:	4951      	ldr	r1, [pc, #324]	; (80030f8 <Set_Voltage_From_Ramping+0x1c0>)
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	3302      	adds	r3, #2
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	79fa      	ldrb	r2, [r7, #7]
 8002fc4:	3305      	adds	r3, #5
 8002fc6:	b298      	uxth	r0, r3
 8002fc8:	494b      	ldr	r1, [pc, #300]	; (80030f8 <Set_Voltage_From_Ramping+0x1c0>)
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3302      	adds	r3, #2
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	801a      	strh	r2, [r3, #0]
 8002fda:	e014      	b.n	8003006 <Set_Voltage_From_Ramping+0xce>
		}
		else
		{
			ChannelsStatus[channel].set_voltage -= ramp_v_step;
 8002fdc:	79fa      	ldrb	r2, [r7, #7]
 8002fde:	4946      	ldr	r1, [pc, #280]	; (80030f8 <Set_Voltage_From_Ramping+0x1c0>)
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	3302      	adds	r3, #2
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	79fa      	ldrb	r2, [r7, #7]
 8002ff0:	3b05      	subs	r3, #5
 8002ff2:	b298      	uxth	r0, r3
 8002ff4:	4940      	ldr	r1, [pc, #256]	; (80030f8 <Set_Voltage_From_Ramping+0x1c0>)
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	3302      	adds	r3, #2
 8003002:	4602      	mov	r2, r0
 8003004:	801a      	strh	r2, [r3, #0]
		}

		//Set out voltage
		Set_OutReg_Voltage(channel, ChannelsStatus[channel].set_voltage);
 8003006:	79fa      	ldrb	r2, [r7, #7]
 8003008:	493b      	ldr	r1, [pc, #236]	; (80030f8 <Set_Voltage_From_Ramping+0x1c0>)
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	3302      	adds	r3, #2
 8003016:	881a      	ldrh	r2, [r3, #0]
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	4611      	mov	r1, r2
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fe13 	bl	8002c48 <Set_OutReg_Voltage>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(ChannelsStatus[channel].set_voltage));
 8003022:	79fa      	ldrb	r2, [r7, #7]
 8003024:	4934      	ldr	r1, [pc, #208]	; (80030f8 <Set_Voltage_From_Ramping+0x1c0>)
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	3302      	adds	r3, #2
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff fccb 	bl	80029d0 <Get_PreRegulatorVoltage>
 800303a:	4603      	mov	r3, r0
 800303c:	461a      	mov	r2, r3
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fdd2 	bl	8002bec <Set_PreReg_Voltage>

		//Reset ramping timer
		ChannelsChange[channel].voltage_ramp = true;
 8003048:	79fa      	ldrb	r2, [r7, #7]
 800304a:	492c      	ldr	r1, [pc, #176]	; (80030fc <Set_Voltage_From_Ramping+0x1c4>)
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	2201      	movs	r2, #1
 8003058:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].voltage_ramp_timer = HAL_GetTick();
 800305a:	79fc      	ldrb	r4, [r7, #7]
 800305c:	f002 fba8 	bl	80057b0 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	4926      	ldr	r1, [pc, #152]	; (80030fc <Set_Voltage_From_Ramping+0x1c4>)
 8003064:	4623      	mov	r3, r4
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	1b1b      	subs	r3, r3, r4
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	3304      	adds	r3, #4
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	e03e      	b.n	80030f2 <Set_Voltage_From_Ramping+0x1ba>
	}
	else
	{
		//Disable ramping timer
		ChannelsChange[channel].voltage_ramp = false;
 8003074:	79fa      	ldrb	r2, [r7, #7]
 8003076:	4921      	ldr	r1, [pc, #132]	; (80030fc <Set_Voltage_From_Ramping+0x1c4>)
 8003078:	4613      	mov	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	2200      	movs	r2, #0
 8003084:	701a      	strb	r2, [r3, #0]

		ChannelsStatus[channel].set_voltage = ChannelsChange[channel].request_voltage;
 8003086:	79f9      	ldrb	r1, [r7, #7]
 8003088:	79fa      	ldrb	r2, [r7, #7]
 800308a:	481c      	ldr	r0, [pc, #112]	; (80030fc <Set_Voltage_From_Ramping+0x1c4>)
 800308c:	460b      	mov	r3, r1
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	1a5b      	subs	r3, r3, r1
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4403      	add	r3, r0
 8003096:	3316      	adds	r3, #22
 8003098:	8818      	ldrh	r0, [r3, #0]
 800309a:	4917      	ldr	r1, [pc, #92]	; (80030f8 <Set_Voltage_From_Ramping+0x1c0>)
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	3302      	adds	r3, #2
 80030a8:	4602      	mov	r2, r0
 80030aa:	801a      	strh	r2, [r3, #0]

		Set_OutReg_Voltage(channel, ChannelsStatus[channel].set_voltage);
 80030ac:	79fa      	ldrb	r2, [r7, #7]
 80030ae:	4912      	ldr	r1, [pc, #72]	; (80030f8 <Set_Voltage_From_Ramping+0x1c0>)
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	3302      	adds	r3, #2
 80030bc:	881a      	ldrh	r2, [r3, #0]
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fdc0 	bl	8002c48 <Set_OutReg_Voltage>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(ChannelsStatus[channel].set_voltage));
 80030c8:	79fa      	ldrb	r2, [r7, #7]
 80030ca:	490b      	ldr	r1, [pc, #44]	; (80030f8 <Set_Voltage_From_Ramping+0x1c0>)
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	3302      	adds	r3, #2
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fc78 	bl	80029d0 <Get_PreRegulatorVoltage>
 80030e0:	4603      	mov	r3, r0
 80030e2:	461a      	mov	r2, r3
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	4611      	mov	r1, r2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fd7f 	bl	8002bec <Set_PreReg_Voltage>
 80030ee:	e000      	b.n	80030f2 <Set_Voltage_From_Ramping+0x1ba>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 80030f0:	bf00      	nop
	}

}
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd90      	pop	{r4, r7, pc}
 80030f8:	200019dc 	.word	0x200019dc
 80030fc:	20001a18 	.word	0x20001a18

08003100 <Channel_Enable>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param enable -> true - enable, false disble 
 * 
 */
void Channel_Enable(uint8_t channel, bool enable)
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	460a      	mov	r2, r1
 800310a:	71fb      	strb	r3, [r7, #7]
 800310c:	4613      	mov	r3, r2
 800310e:	71bb      	strb	r3, [r7, #6]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8003110:	79fb      	ldrb	r3, [r7, #7]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d006      	beq.n	8003124 <Channel_Enable+0x24>
 8003116:	79fb      	ldrb	r3, [r7, #7]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d003      	beq.n	8003124 <Channel_Enable+0x24>
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	2b02      	cmp	r3, #2
 8003120:	f040 809e 	bne.w	8003260 <Channel_Enable+0x160>
	if(enable == ChannelsStatus[channel].enable) return;
 8003124:	79fa      	ldrb	r2, [r7, #7]
 8003126:	4951      	ldr	r1, [pc, #324]	; (800326c <Channel_Enable+0x16c>)
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	79ba      	ldrb	r2, [r7, #6]
 8003136:	429a      	cmp	r2, r3
 8003138:	f000 8094 	beq.w	8003264 <Channel_Enable+0x164>


	ChannelsChange[channel].voltageBeforeEnable = ChannelsChange[channel].request_voltage;
 800313c:	79f9      	ldrb	r1, [r7, #7]
 800313e:	79fa      	ldrb	r2, [r7, #7]
 8003140:	484b      	ldr	r0, [pc, #300]	; (8003270 <Channel_Enable+0x170>)
 8003142:	460b      	mov	r3, r1
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	1a5b      	subs	r3, r3, r1
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4403      	add	r3, r0
 800314c:	3316      	adds	r3, #22
 800314e:	8818      	ldrh	r0, [r3, #0]
 8003150:	4947      	ldr	r1, [pc, #284]	; (8003270 <Channel_Enable+0x170>)
 8003152:	4613      	mov	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	3318      	adds	r3, #24
 800315e:	4602      	mov	r2, r0
 8003160:	801a      	strh	r2, [r3, #0]

	ChannelsChange[channel].restarts_counter = 0;
 8003162:	79fa      	ldrb	r2, [r7, #7]
 8003164:	4942      	ldr	r1, [pc, #264]	; (8003270 <Channel_Enable+0x170>)
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	3314      	adds	r3, #20
 8003172:	2200      	movs	r2, #0
 8003174:	701a      	strb	r2, [r3, #0]
	ChannelsStatus[channel].disableInError = false;
 8003176:	79fa      	ldrb	r2, [r7, #7]
 8003178:	493c      	ldr	r1, [pc, #240]	; (800326c <Channel_Enable+0x16c>)
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	3312      	adds	r3, #18
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]

	if(enable)
 800318a:	79bb      	ldrb	r3, [r7, #6]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d032      	beq.n	80031f6 <Channel_Enable+0xf6>
	{
		//Set_Voltage(channel, minimum_voltage);
		Set_VoltageInEnable(channel);
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fe9e 	bl	8002ed4 <Set_VoltageInEnable>
		Enable_GPIO(channel, true);
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	2101      	movs	r1, #1
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fa5b 	bl	8002658 <Enable_GPIO>
		ChannelsStatus[channel].enable = true;
 80031a2:	79fa      	ldrb	r2, [r7, #7]
 80031a4:	4931      	ldr	r1, [pc, #196]	; (800326c <Channel_Enable+0x16c>)
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	2201      	movs	r2, #1
 80031b2:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].restart_request = false;
 80031b4:	79fa      	ldrb	r2, [r7, #7]
 80031b6:	492e      	ldr	r1, [pc, #184]	; (8003270 <Channel_Enable+0x170>)
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	3303      	adds	r3, #3
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].enable_request = true;
 80031c8:	79fa      	ldrb	r2, [r7, #7]
 80031ca:	4929      	ldr	r1, [pc, #164]	; (8003270 <Channel_Enable+0x170>)
 80031cc:	4613      	mov	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	3301      	adds	r3, #1
 80031d8:	2201      	movs	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].enable_timer = HAL_GetTick();
 80031dc:	79fc      	ldrb	r4, [r7, #7]
 80031de:	f002 fae7 	bl	80057b0 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	4922      	ldr	r1, [pc, #136]	; (8003270 <Channel_Enable+0x170>)
 80031e6:	4623      	mov	r3, r4
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	1b1b      	subs	r3, r3, r4
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	3308      	adds	r3, #8
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	e021      	b.n	800323a <Channel_Enable+0x13a>
	}
	else
	{
		ChannelsChange[channel].enable_request = false;
 80031f6:	79fa      	ldrb	r2, [r7, #7]
 80031f8:	491d      	ldr	r1, [pc, #116]	; (8003270 <Channel_Enable+0x170>)
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	3301      	adds	r3, #1
 8003206:	2200      	movs	r2, #0
 8003208:	701a      	strb	r2, [r3, #0]
		ChannelsStatus[channel].enable = false;
 800320a:	79fa      	ldrb	r2, [r7, #7]
 800320c:	4917      	ldr	r1, [pc, #92]	; (800326c <Channel_Enable+0x16c>)
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].restart_request = false;
 800321c:	79fa      	ldrb	r2, [r7, #7]
 800321e:	4914      	ldr	r1, [pc, #80]	; (8003270 <Channel_Enable+0x170>)
 8003220:	4613      	mov	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	3303      	adds	r3, #3
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
		Enable_GPIO(channel, false);
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fa0f 	bl	8002658 <Enable_GPIO>
	}


	if(MainParams.sramOffset_ControlOutputWithChannelEnable) //je aktivni funkce ovladani vystupu s eneble
 800323a:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <Channel_Enable+0x174>)
 800323c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d011      	beq.n	8003266 <Channel_Enable+0x166>
	{
		if(enable)
 8003242:	79bb      	ldrb	r3, [r7, #6]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d005      	beq.n	8003254 <Channel_Enable+0x154>
		{
			Channel_Output(channel, true);
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	2101      	movs	r1, #1
 800324c:	4618      	mov	r0, r3
 800324e:	f000 f95b 	bl	8003508 <Channel_Output>
 8003252:	e008      	b.n	8003266 <Channel_Enable+0x166>
		}
		else
		{
			Channel_Output(channel, false);
 8003254:	79fb      	ldrb	r3, [r7, #7]
 8003256:	2100      	movs	r1, #0
 8003258:	4618      	mov	r0, r3
 800325a:	f000 f955 	bl	8003508 <Channel_Output>
 800325e:	e002      	b.n	8003266 <Channel_Enable+0x166>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8003260:	bf00      	nop
 8003262:	e000      	b.n	8003266 <Channel_Enable+0x166>
	if(enable == ChannelsStatus[channel].enable) return;
 8003264:	bf00      	nop
		}
	}

}
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	bd90      	pop	{r4, r7, pc}
 800326c:	200019dc 	.word	0x200019dc
 8003270:	20001a18 	.word	0x20001a18
 8003274:	20001a88 	.word	0x20001a88

08003278 <Channel_Restart>:

void Channel_Restart(uint8_t channel)
{
 8003278:	b590      	push	{r4, r7, lr}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <Channel_Restart+0x1c>
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d002      	beq.n	8003294 <Channel_Restart+0x1c>
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	2b02      	cmp	r3, #2
 8003292:	d161      	bne.n	8003358 <Channel_Restart+0xe0>

	if(ChannelsStatus[channel].enable == false)
 8003294:	79fa      	ldrb	r2, [r7, #7]
 8003296:	4932      	ldr	r1, [pc, #200]	; (8003360 <Channel_Restart+0xe8>)
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	f083 0301 	eor.w	r3, r3, #1
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <Channel_Restart+0x4c>
	{
		ChannelsChange[channel].restart_request = false;
 80032ae:	79fa      	ldrb	r2, [r7, #7]
 80032b0:	492c      	ldr	r1, [pc, #176]	; (8003364 <Channel_Restart+0xec>)
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	3303      	adds	r3, #3
 80032be:	2200      	movs	r2, #0
 80032c0:	701a      	strb	r2, [r3, #0]
		return;
 80032c2:	e04a      	b.n	800335a <Channel_Restart+0xe2>
	}

	//ChannelsChange[channel].restarts_counter++;

	ErrorTimerReset(channel);
 80032c4:	79fb      	ldrb	r3, [r7, #7]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe fe98 	bl	8001ffc <ErrorTimerReset>

	if(ChannelsChange[channel].restarts_counter >= max_restart_count)
 80032cc:	79fa      	ldrb	r2, [r7, #7]
 80032ce:	4925      	ldr	r1, [pc, #148]	; (8003364 <Channel_Restart+0xec>)
 80032d0:	4613      	mov	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	1a9b      	subs	r3, r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	3314      	adds	r3, #20
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d919      	bls.n	8003316 <Channel_Restart+0x9e>
	{
		Channel_Enable(channel, false);
 80032e2:	79fb      	ldrb	r3, [r7, #7]
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff ff0a 	bl	8003100 <Channel_Enable>
		ChannelsStatus[channel].disableInError = true;
 80032ec:	79fa      	ldrb	r2, [r7, #7]
 80032ee:	491c      	ldr	r1, [pc, #112]	; (8003360 <Channel_Restart+0xe8>)
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	3312      	adds	r3, #18
 80032fc:	2201      	movs	r2, #1
 80032fe:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].restart_request = false;
 8003300:	79fa      	ldrb	r2, [r7, #7]
 8003302:	4918      	ldr	r1, [pc, #96]	; (8003364 <Channel_Restart+0xec>)
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	3303      	adds	r3, #3
 8003310:	2200      	movs	r2, #0
 8003312:	701a      	strb	r2, [r3, #0]
 8003314:	e021      	b.n	800335a <Channel_Restart+0xe2>
	}
	else
	{
		ChannelsChange[channel].restart_request = true;
 8003316:	79fa      	ldrb	r2, [r7, #7]
 8003318:	4912      	ldr	r1, [pc, #72]	; (8003364 <Channel_Restart+0xec>)
 800331a:	4613      	mov	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	3303      	adds	r3, #3
 8003326:	2201      	movs	r2, #1
 8003328:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].restart_timer = HAL_GetTick();
 800332a:	79fc      	ldrb	r4, [r7, #7]
 800332c:	f002 fa40 	bl	80057b0 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	490c      	ldr	r1, [pc, #48]	; (8003364 <Channel_Restart+0xec>)
 8003334:	4623      	mov	r3, r4
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	1b1b      	subs	r3, r3, r4
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	3310      	adds	r3, #16
 8003340:	601a      	str	r2, [r3, #0]

		Enable_GPIO(channel, false);
 8003342:	79fb      	ldrb	r3, [r7, #7]
 8003344:	2100      	movs	r1, #0
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff f986 	bl	8002658 <Enable_GPIO>
		Channel_Output(channel, false);
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	2100      	movs	r1, #0
 8003350:	4618      	mov	r0, r3
 8003352:	f000 f8d9 	bl	8003508 <Channel_Output>
 8003356:	e000      	b.n	800335a <Channel_Restart+0xe2>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8003358:	bf00      	nop

	}


}
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	bd90      	pop	{r4, r7, pc}
 8003360:	200019dc 	.word	0x200019dc
 8003364:	20001a18 	.word	0x20001a18

08003368 <Channel_Enable_fromRestart>:

void Channel_Enable_fromRestart(uint8_t channel)
{
 8003368:	b590      	push	{r4, r7, lr}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	71fb      	strb	r3, [r7, #7]
	ChannelsChange[channel].voltageBeforeEnable = ChannelsChange[channel].request_voltage;
 8003372:	79f9      	ldrb	r1, [r7, #7]
 8003374:	79fa      	ldrb	r2, [r7, #7]
 8003376:	482a      	ldr	r0, [pc, #168]	; (8003420 <Channel_Enable_fromRestart+0xb8>)
 8003378:	460b      	mov	r3, r1
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	1a5b      	subs	r3, r3, r1
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4403      	add	r3, r0
 8003382:	3316      	adds	r3, #22
 8003384:	8818      	ldrh	r0, [r3, #0]
 8003386:	4926      	ldr	r1, [pc, #152]	; (8003420 <Channel_Enable_fromRestart+0xb8>)
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	3318      	adds	r3, #24
 8003394:	4602      	mov	r2, r0
 8003396:	801a      	strh	r2, [r3, #0]

	Set_VoltageInEnable(channel);
 8003398:	79fb      	ldrb	r3, [r7, #7]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff fd9a 	bl	8002ed4 <Set_VoltageInEnable>
	Enable_GPIO(channel, true);
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	2101      	movs	r1, #1
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff f957 	bl	8002658 <Enable_GPIO>
	ChannelsStatus[channel].enable = true;
 80033aa:	79fa      	ldrb	r2, [r7, #7]
 80033ac:	491d      	ldr	r1, [pc, #116]	; (8003424 <Channel_Enable_fromRestart+0xbc>)
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	2201      	movs	r2, #1
 80033ba:	701a      	strb	r2, [r3, #0]
	ChannelsChange[channel].restart_request = false;
 80033bc:	79fa      	ldrb	r2, [r7, #7]
 80033be:	4918      	ldr	r1, [pc, #96]	; (8003420 <Channel_Enable_fromRestart+0xb8>)
 80033c0:	4613      	mov	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	3303      	adds	r3, #3
 80033cc:	2200      	movs	r2, #0
 80033ce:	701a      	strb	r2, [r3, #0]
	ChannelsChange[channel].enable_request = true;
 80033d0:	79fa      	ldrb	r2, [r7, #7]
 80033d2:	4913      	ldr	r1, [pc, #76]	; (8003420 <Channel_Enable_fromRestart+0xb8>)
 80033d4:	4613      	mov	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	3301      	adds	r3, #1
 80033e0:	2201      	movs	r2, #1
 80033e2:	701a      	strb	r2, [r3, #0]
	ChannelsChange[channel].enable_timer = HAL_GetTick();
 80033e4:	79fc      	ldrb	r4, [r7, #7]
 80033e6:	f002 f9e3 	bl	80057b0 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	490c      	ldr	r1, [pc, #48]	; (8003420 <Channel_Enable_fromRestart+0xb8>)
 80033ee:	4623      	mov	r3, r4
 80033f0:	00db      	lsls	r3, r3, #3
 80033f2:	1b1b      	subs	r3, r3, r4
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	440b      	add	r3, r1
 80033f8:	3308      	adds	r3, #8
 80033fa:	601a      	str	r2, [r3, #0]

	Channel_Output(channel, true);
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	2101      	movs	r1, #1
 8003400:	4618      	mov	r0, r3
 8003402:	f000 f881 	bl	8003508 <Channel_Output>

	if(MainParams.sramOffset_ControlOutputWithChannelEnable) //je aktivni funkce ovladani vystupu s eneble
 8003406:	4b08      	ldr	r3, [pc, #32]	; (8003428 <Channel_Enable_fromRestart+0xc0>)
 8003408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800340a:	2b00      	cmp	r3, #0
 800340c:	d004      	beq.n	8003418 <Channel_Enable_fromRestart+0xb0>
	{
		Channel_Output(channel, true);
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	2101      	movs	r1, #1
 8003412:	4618      	mov	r0, r3
 8003414:	f000 f878 	bl	8003508 <Channel_Output>
	}


}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	bd90      	pop	{r4, r7, pc}
 8003420:	20001a18 	.word	0x20001a18
 8003424:	200019dc 	.word	0x200019dc
 8003428:	20001a88 	.word	0x20001a88

0800342c <Channel_Polarity>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param polarity -> polarity of output voltage
 * 
 */
void Channel_Polarity(uint8_t channel, eOutputPolarity polarity)
{
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b083      	sub	sp, #12
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	460a      	mov	r2, r1
 8003436:	71fb      	strb	r3, [r7, #7]
 8003438:	4613      	mov	r3, r2
 800343a:	71bb      	strb	r3, [r7, #6]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 800343c:	79fb      	ldrb	r3, [r7, #7]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d005      	beq.n	800344e <Channel_Polarity+0x22>
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d002      	beq.n	800344e <Channel_Polarity+0x22>
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d14b      	bne.n	80034e6 <Channel_Polarity+0xba>
	if(polarity == ChannelsStatus[channel].polarity) return;
 800344e:	79fa      	ldrb	r2, [r7, #7]
 8003450:	492a      	ldr	r1, [pc, #168]	; (80034fc <Channel_Polarity+0xd0>)
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	3304      	adds	r3, #4
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	79ba      	ldrb	r2, [r7, #6]
 8003462:	429a      	cmp	r2, r3
 8003464:	d041      	beq.n	80034ea <Channel_Polarity+0xbe>

	if(MainParams.sramOffset_ControlOutputWithChannelEnable && ChannelsStatus[channel].enable) return; // polarita nejde prepnout, kdyz je kanál zapnutý
 8003466:	4b26      	ldr	r3, [pc, #152]	; (8003500 <Channel_Polarity+0xd4>)
 8003468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d009      	beq.n	8003482 <Channel_Polarity+0x56>
 800346e:	79fa      	ldrb	r2, [r7, #7]
 8003470:	4922      	ldr	r1, [pc, #136]	; (80034fc <Channel_Polarity+0xd0>)
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d135      	bne.n	80034ee <Channel_Polarity+0xc2>


	if(ChannelsChange[channel].polarity_request) return;
 8003482:	79fa      	ldrb	r2, [r7, #7]
 8003484:	491f      	ldr	r1, [pc, #124]	; (8003504 <Channel_Polarity+0xd8>)
 8003486:	4613      	mov	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	3302      	adds	r3, #2
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d12c      	bne.n	80034f2 <Channel_Polarity+0xc6>

	ChannelsStatus[channel].polarity = polarity;
 8003498:	79fa      	ldrb	r2, [r7, #7]
 800349a:	4918      	ldr	r1, [pc, #96]	; (80034fc <Channel_Polarity+0xd0>)
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	3304      	adds	r3, #4
 80034a8:	79ba      	ldrb	r2, [r7, #6]
 80034aa:	701a      	strb	r2, [r3, #0]
	Output_GPIO(channel, false, false);
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	2200      	movs	r2, #0
 80034b0:	2100      	movs	r1, #0
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff f902 	bl	80026bc <Output_GPIO>

	ChannelsChange[channel].polarity_request = true;
 80034b8:	79fa      	ldrb	r2, [r7, #7]
 80034ba:	4912      	ldr	r1, [pc, #72]	; (8003504 <Channel_Polarity+0xd8>)
 80034bc:	4613      	mov	r3, r2
 80034be:	00db      	lsls	r3, r3, #3
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	3302      	adds	r3, #2
 80034c8:	2201      	movs	r2, #1
 80034ca:	701a      	strb	r2, [r3, #0]
	ChannelsChange[channel].polarity_timer = HAL_GetTick();
 80034cc:	79fc      	ldrb	r4, [r7, #7]
 80034ce:	f002 f96f 	bl	80057b0 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	490b      	ldr	r1, [pc, #44]	; (8003504 <Channel_Polarity+0xd8>)
 80034d6:	4623      	mov	r3, r4
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	1b1b      	subs	r3, r3, r4
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	330c      	adds	r3, #12
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	e006      	b.n	80034f4 <Channel_Polarity+0xc8>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 80034e6:	bf00      	nop
 80034e8:	e004      	b.n	80034f4 <Channel_Polarity+0xc8>
	if(polarity == ChannelsStatus[channel].polarity) return;
 80034ea:	bf00      	nop
 80034ec:	e002      	b.n	80034f4 <Channel_Polarity+0xc8>
	if(MainParams.sramOffset_ControlOutputWithChannelEnable && ChannelsStatus[channel].enable) return; // polarita nejde prepnout, kdyz je kanál zapnutý
 80034ee:	bf00      	nop
 80034f0:	e000      	b.n	80034f4 <Channel_Polarity+0xc8>
	if(ChannelsChange[channel].polarity_request) return;
 80034f2:	bf00      	nop

}
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd90      	pop	{r4, r7, pc}
 80034fa:	bf00      	nop
 80034fc:	200019dc 	.word	0x200019dc
 8003500:	20001a88 	.word	0x20001a88
 8003504:	20001a18 	.word	0x20001a18

08003508 <Channel_Output>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param output -> true - output on, false - output off
 * 
 */
void Channel_Output(uint8_t channel, bool output)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	460a      	mov	r2, r1
 8003512:	71fb      	strb	r3, [r7, #7]
 8003514:	4613      	mov	r3, r2
 8003516:	71bb      	strb	r3, [r7, #6]

	if(MainParams.sramOffset_ControlOutputWithChannelEnable && ChannelsStatus[channel].enable && !ChannelsChange[channel].enable_request && output) return; // vystup nejde zapnout, kdyz je kanál zapnutý
 8003518:	4b28      	ldr	r3, [pc, #160]	; (80035bc <Channel_Output+0xb4>)
 800351a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800351c:	2b00      	cmp	r3, #0
 800351e:	d01a      	beq.n	8003556 <Channel_Output+0x4e>
 8003520:	79fa      	ldrb	r2, [r7, #7]
 8003522:	4927      	ldr	r1, [pc, #156]	; (80035c0 <Channel_Output+0xb8>)
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d010      	beq.n	8003556 <Channel_Output+0x4e>
 8003534:	79fa      	ldrb	r2, [r7, #7]
 8003536:	4923      	ldr	r1, [pc, #140]	; (80035c4 <Channel_Output+0xbc>)
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	3301      	adds	r3, #1
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	f083 0301 	eor.w	r3, r3, #1
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <Channel_Output+0x4e>
 8003550:	79bb      	ldrb	r3, [r7, #6]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d12d      	bne.n	80035b2 <Channel_Output+0xaa>

	ChannelsStatus[channel].output = output;
 8003556:	79fa      	ldrb	r2, [r7, #7]
 8003558:	4919      	ldr	r1, [pc, #100]	; (80035c0 <Channel_Output+0xb8>)
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	3305      	adds	r3, #5
 8003566:	79ba      	ldrb	r2, [r7, #6]
 8003568:	701a      	strb	r2, [r3, #0]

	if(ChannelsStatus[channel].polarity == polarity_positive)
 800356a:	79fa      	ldrb	r2, [r7, #7]
 800356c:	4914      	ldr	r1, [pc, #80]	; (80035c0 <Channel_Output+0xb8>)
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	3304      	adds	r3, #4
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d106      	bne.n	800358e <Channel_Output+0x86>
	{
		Output_GPIO(channel, output, false);
 8003580:	79b9      	ldrb	r1, [r7, #6]
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	2200      	movs	r2, #0
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff f898 	bl	80026bc <Output_GPIO>
 800358c:	e012      	b.n	80035b4 <Channel_Output+0xac>
	}
	else if(ChannelsStatus[channel].polarity == polarity_negative)
 800358e:	79fa      	ldrb	r2, [r7, #7]
 8003590:	490b      	ldr	r1, [pc, #44]	; (80035c0 <Channel_Output+0xb8>)
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	3304      	adds	r3, #4
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d107      	bne.n	80035b4 <Channel_Output+0xac>
	{
		Output_GPIO(channel, false, output);
 80035a4:	79ba      	ldrb	r2, [r7, #6]
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	2100      	movs	r1, #0
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff f886 	bl	80026bc <Output_GPIO>
 80035b0:	e000      	b.n	80035b4 <Channel_Output+0xac>
	if(MainParams.sramOffset_ControlOutputWithChannelEnable && ChannelsStatus[channel].enable && !ChannelsChange[channel].enable_request && output) return; // vystup nejde zapnout, kdyz je kanál zapnutý
 80035b2:	bf00      	nop
	}
}
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20001a88 	.word	0x20001a88
 80035c0:	200019dc 	.word	0x200019dc
 80035c4:	20001a18 	.word	0x20001a18

080035c8 <ChannelControl>:
 *
 * @param channel -> Channel of power supply (0,1,2)
 * 
 */
void ChannelControl(uint8_t channel)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]
	//voltage ramping
	if(ChannelsChange[channel].voltage_ramp)
 80035d2:	79fa      	ldrb	r2, [r7, #7]
 80035d4:	496d      	ldr	r1, [pc, #436]	; (800378c <ChannelControl+0x1c4>)
 80035d6:	4613      	mov	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	1a9b      	subs	r3, r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d012      	beq.n	800360c <ChannelControl+0x44>
	{
		if((HAL_GetTick()-ChannelsChange[channel].voltage_ramp_timer) >= ramp_t_step)
 80035e6:	f002 f8e3 	bl	80057b0 <HAL_GetTick>
 80035ea:	4601      	mov	r1, r0
 80035ec:	79fa      	ldrb	r2, [r7, #7]
 80035ee:	4867      	ldr	r0, [pc, #412]	; (800378c <ChannelControl+0x1c4>)
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4403      	add	r3, r0
 80035fa:	3304      	adds	r3, #4
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	1acb      	subs	r3, r1, r3
 8003600:	2b31      	cmp	r3, #49	; 0x31
 8003602:	d903      	bls.n	800360c <ChannelControl+0x44>
		{
			Set_Voltage_From_Ramping(channel);
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff fc96 	bl	8002f38 <Set_Voltage_From_Ramping>
		}
	}

	//enable control
	if(ChannelsChange[channel].enable_request)
 800360c:	79fa      	ldrb	r2, [r7, #7]
 800360e:	495f      	ldr	r1, [pc, #380]	; (800378c <ChannelControl+0x1c4>)
 8003610:	4613      	mov	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	3301      	adds	r3, #1
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d02b      	beq.n	800367a <ChannelControl+0xb2>
	{
		if((HAL_GetTick()-ChannelsChange[channel].enable_timer) >= delay_enable)
 8003622:	f002 f8c5 	bl	80057b0 <HAL_GetTick>
 8003626:	4601      	mov	r1, r0
 8003628:	79fa      	ldrb	r2, [r7, #7]
 800362a:	4858      	ldr	r0, [pc, #352]	; (800378c <ChannelControl+0x1c4>)
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	1a9b      	subs	r3, r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4403      	add	r3, r0
 8003636:	3308      	adds	r3, #8
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	1acb      	subs	r3, r1, r3
 800363c:	2bc7      	cmp	r3, #199	; 0xc7
 800363e:	d91c      	bls.n	800367a <ChannelControl+0xb2>
		{
			ChannelsChange[channel].enable_request = false;
 8003640:	79fa      	ldrb	r2, [r7, #7]
 8003642:	4952      	ldr	r1, [pc, #328]	; (800378c <ChannelControl+0x1c4>)
 8003644:	4613      	mov	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	3301      	adds	r3, #1
 8003650:	2200      	movs	r2, #0
 8003652:	701a      	strb	r2, [r3, #0]
			Enable_GPIO(channel, true);
 8003654:	79fb      	ldrb	r3, [r7, #7]
 8003656:	2101      	movs	r1, #1
 8003658:	4618      	mov	r0, r3
 800365a:	f7fe fffd 	bl	8002658 <Enable_GPIO>
			//nastavit napeti
			Set_Voltage(channel, ChannelsChange[channel].request_voltage );
 800365e:	79fa      	ldrb	r2, [r7, #7]
 8003660:	494a      	ldr	r1, [pc, #296]	; (800378c <ChannelControl+0x1c4>)
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	3316      	adds	r3, #22
 800366e:	881a      	ldrh	r2, [r3, #0]
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fb55 	bl	8002d24 <Set_Voltage>
		}
	}

	//polarity change control
	if(ChannelsChange[channel].polarity_request)
 800367a:	79fa      	ldrb	r2, [r7, #7]
 800367c:	4943      	ldr	r1, [pc, #268]	; (800378c <ChannelControl+0x1c4>)
 800367e:	4613      	mov	r3, r2
 8003680:	00db      	lsls	r3, r3, #3
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	3302      	adds	r3, #2
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d045      	beq.n	800371c <ChannelControl+0x154>
	{
		if((HAL_GetTick()-ChannelsChange[channel].polarity_timer) >= delay_polarity)
 8003690:	f002 f88e 	bl	80057b0 <HAL_GetTick>
 8003694:	4601      	mov	r1, r0
 8003696:	79fa      	ldrb	r2, [r7, #7]
 8003698:	483c      	ldr	r0, [pc, #240]	; (800378c <ChannelControl+0x1c4>)
 800369a:	4613      	mov	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4403      	add	r3, r0
 80036a4:	330c      	adds	r3, #12
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	1acb      	subs	r3, r1, r3
 80036aa:	2bc7      	cmp	r3, #199	; 0xc7
 80036ac:	d936      	bls.n	800371c <ChannelControl+0x154>
		{
			ChannelsChange[channel].polarity_request = false;
 80036ae:	79fa      	ldrb	r2, [r7, #7]
 80036b0:	4936      	ldr	r1, [pc, #216]	; (800378c <ChannelControl+0x1c4>)
 80036b2:	4613      	mov	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	1a9b      	subs	r3, r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	3302      	adds	r3, #2
 80036be:	2200      	movs	r2, #0
 80036c0:	701a      	strb	r2, [r3, #0]
			bool output = ChannelsStatus[channel].output;
 80036c2:	79fa      	ldrb	r2, [r7, #7]
 80036c4:	4932      	ldr	r1, [pc, #200]	; (8003790 <ChannelControl+0x1c8>)
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	3305      	adds	r3, #5
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	73fb      	strb	r3, [r7, #15]

			if(ChannelsStatus[channel].polarity == polarity_positive)
 80036d6:	79fa      	ldrb	r2, [r7, #7]
 80036d8:	492d      	ldr	r1, [pc, #180]	; (8003790 <ChannelControl+0x1c8>)
 80036da:	4613      	mov	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	440b      	add	r3, r1
 80036e4:	3304      	adds	r3, #4
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d106      	bne.n	80036fa <ChannelControl+0x132>
			{
				Output_GPIO(channel, output, false);
 80036ec:	7bf9      	ldrb	r1, [r7, #15]
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	2200      	movs	r2, #0
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fe ffe2 	bl	80026bc <Output_GPIO>
 80036f8:	e010      	b.n	800371c <ChannelControl+0x154>
			}
			else if(ChannelsStatus[channel].polarity == polarity_negative)
 80036fa:	79fa      	ldrb	r2, [r7, #7]
 80036fc:	4924      	ldr	r1, [pc, #144]	; (8003790 <ChannelControl+0x1c8>)
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	3304      	adds	r3, #4
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d105      	bne.n	800371c <ChannelControl+0x154>
			{
				Output_GPIO(channel, false, output);
 8003710:	7bfa      	ldrb	r2, [r7, #15]
 8003712:	79fb      	ldrb	r3, [r7, #7]
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe ffd0 	bl	80026bc <Output_GPIO>

		}
	}

	//restart channel
	if(ChannelsChange[channel].restart_request)
 800371c:	79fa      	ldrb	r2, [r7, #7]
 800371e:	491b      	ldr	r1, [pc, #108]	; (800378c <ChannelControl+0x1c4>)
 8003720:	4613      	mov	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	3303      	adds	r3, #3
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d028      	beq.n	8003784 <ChannelControl+0x1bc>
	{
		if((HAL_GetTick()-ChannelsChange[channel].restart_timer) >= delay_restart)
 8003732:	f002 f83d 	bl	80057b0 <HAL_GetTick>
 8003736:	4601      	mov	r1, r0
 8003738:	79fa      	ldrb	r2, [r7, #7]
 800373a:	4814      	ldr	r0, [pc, #80]	; (800378c <ChannelControl+0x1c4>)
 800373c:	4613      	mov	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4403      	add	r3, r0
 8003746:	3310      	adds	r3, #16
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	1acb      	subs	r3, r1, r3
 800374c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003750:	4293      	cmp	r3, r2
 8003752:	d917      	bls.n	8003784 <ChannelControl+0x1bc>
		{
			//ChannelsChange[channel].restart_request = false;
			//ChannelsChange[channel].restarts_counter++;
			ChannelsChange[channel].restarts_counter++;
 8003754:	79fa      	ldrb	r2, [r7, #7]
 8003756:	490d      	ldr	r1, [pc, #52]	; (800378c <ChannelControl+0x1c4>)
 8003758:	4613      	mov	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	3314      	adds	r3, #20
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	3301      	adds	r3, #1
 8003768:	b2d8      	uxtb	r0, r3
 800376a:	4908      	ldr	r1, [pc, #32]	; (800378c <ChannelControl+0x1c4>)
 800376c:	4613      	mov	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	3314      	adds	r3, #20
 8003778:	4602      	mov	r2, r0
 800377a:	701a      	strb	r2, [r3, #0]
			Channel_Enable_fromRestart(channel);
 800377c:	79fb      	ldrb	r3, [r7, #7]
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff fdf2 	bl	8003368 <Channel_Enable_fromRestart>

		}
	}

}
 8003784:	bf00      	nop
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	20001a18 	.word	0x20001a18
 8003790:	200019dc 	.word	0x200019dc

08003794 <Get_ChannelVoltage>:
 *
 * @param channel -> Channel of power supply (0,1,2)
 * 
 */
void Get_ChannelVoltage(uint8_t channel)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d005      	beq.n	80037b0 <Get_ChannelVoltage+0x1c>
 80037a4:	79fb      	ldrb	r3, [r7, #7]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d002      	beq.n	80037b0 <Get_ChannelVoltage+0x1c>
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d112      	bne.n	80037d6 <Get_ChannelVoltage+0x42>

	//SendCommunication(cmd_get_voltage_CH1 + channel, ChannelsStatus[channel].voltage_measurement*100);
	SendCommunication_float(cmd_get_voltage_CH1 + channel, ChannelsStatus[channel].voltage_measurement);
 80037b0:	79fb      	ldrb	r3, [r7, #7]
 80037b2:	330e      	adds	r3, #14
 80037b4:	b2d9      	uxtb	r1, r3
 80037b6:	79fa      	ldrb	r2, [r7, #7]
 80037b8:	4809      	ldr	r0, [pc, #36]	; (80037e0 <Get_ChannelVoltage+0x4c>)
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4403      	add	r3, r0
 80037c4:	3308      	adds	r3, #8
 80037c6:	edd3 7a00 	vldr	s15, [r3]
 80037ca:	eeb0 0a67 	vmov.f32	s0, s15
 80037ce:	4608      	mov	r0, r1
 80037d0:	f7fe fa8a 	bl	8001ce8 <SendCommunication_float>
 80037d4:	e000      	b.n	80037d8 <Get_ChannelVoltage+0x44>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 80037d6:	bf00      	nop
}
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	200019dc 	.word	0x200019dc

080037e4 <Get_ChannelCurrent>:
 *
 * @param channel -> Channel of power supply (0,1,2)
 * 
 */
void Get_ChannelCurrent(uint8_t channel)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <Get_ChannelCurrent+0x1c>
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d002      	beq.n	8003800 <Get_ChannelCurrent+0x1c>
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d112      	bne.n	8003826 <Get_ChannelCurrent+0x42>

	//SendCommunication(cmd_get_current_CH1 + channel, ChannelsStatus[channel].current_measurement*1000);
	SendCommunication_float(cmd_get_current_CH1 + channel, ChannelsStatus[channel].current_measurement);
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	3311      	adds	r3, #17
 8003804:	b2d9      	uxtb	r1, r3
 8003806:	79fa      	ldrb	r2, [r7, #7]
 8003808:	4809      	ldr	r0, [pc, #36]	; (8003830 <Get_ChannelCurrent+0x4c>)
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4403      	add	r3, r0
 8003814:	330c      	adds	r3, #12
 8003816:	edd3 7a00 	vldr	s15, [r3]
 800381a:	eeb0 0a67 	vmov.f32	s0, s15
 800381e:	4608      	mov	r0, r1
 8003820:	f7fe fa62 	bl	8001ce8 <SendCommunication_float>
 8003824:	e000      	b.n	8003828 <Get_ChannelCurrent+0x44>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8003826:	bf00      	nop
}
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	200019dc 	.word	0x200019dc

08003834 <Get_ErrorSignals>:

void Get_ErrorSignals()
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
	uint8_t error_reg = 0;
 800383a:	2300      	movs	r3, #0
 800383c:	71fb      	strb	r3, [r7, #7]

	error_reg |= ChannelsStatus[0].power_good << 0;
 800383e:	4b20      	ldr	r3, [pc, #128]	; (80038c0 <Get_ErrorSignals+0x8c>)
 8003840:	7c5b      	ldrb	r3, [r3, #17]
 8003842:	461a      	mov	r2, r3
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	4313      	orrs	r3, r2
 8003848:	71fb      	strb	r3, [r7, #7]
	error_reg |= ChannelsStatus[1].power_good << 1;
 800384a:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <Get_ErrorSignals+0x8c>)
 800384c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	b25a      	sxtb	r2, r3
 8003854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003858:	4313      	orrs	r3, r2
 800385a:	b25b      	sxtb	r3, r3
 800385c:	71fb      	strb	r3, [r7, #7]
	error_reg |= ChannelsStatus[2].power_good << 2;
 800385e:	4b18      	ldr	r3, [pc, #96]	; (80038c0 <Get_ErrorSignals+0x8c>)
 8003860:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	b25a      	sxtb	r2, r3
 8003868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386c:	4313      	orrs	r3, r2
 800386e:	b25b      	sxtb	r3, r3
 8003870:	71fb      	strb	r3, [r7, #7]

	error_reg |= ChannelsStatus[0].over_current << 3;
 8003872:	4b13      	ldr	r3, [pc, #76]	; (80038c0 <Get_ErrorSignals+0x8c>)
 8003874:	7c1b      	ldrb	r3, [r3, #16]
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	b25a      	sxtb	r2, r3
 800387a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387e:	4313      	orrs	r3, r2
 8003880:	b25b      	sxtb	r3, r3
 8003882:	71fb      	strb	r3, [r7, #7]
	error_reg |= ChannelsStatus[1].over_current << 4;
 8003884:	4b0e      	ldr	r3, [pc, #56]	; (80038c0 <Get_ErrorSignals+0x8c>)
 8003886:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	b25a      	sxtb	r2, r3
 800388e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003892:	4313      	orrs	r3, r2
 8003894:	b25b      	sxtb	r3, r3
 8003896:	71fb      	strb	r3, [r7, #7]
	error_reg |= ChannelsStatus[2].over_current << 5;
 8003898:	4b09      	ldr	r3, [pc, #36]	; (80038c0 <Get_ErrorSignals+0x8c>)
 800389a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800389e:	015b      	lsls	r3, r3, #5
 80038a0:	b25a      	sxtb	r2, r3
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	b25b      	sxtb	r3, r3
 80038aa:	71fb      	strb	r3, [r7, #7]

	SendCommunication(cmd_error_signals, error_reg);
 80038ac:	79fb      	ldrb	r3, [r7, #7]
 80038ae:	4619      	mov	r1, r3
 80038b0:	2014      	movs	r0, #20
 80038b2:	f7fe f9c5 	bl	8001c40 <SendCommunication>
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	200019dc 	.word	0x200019dc

080038c4 <Get_AllMeasurement>:
/* @brief Send by communication all measured value, all voltages and currents
 *
 * 
 */
void Get_AllMeasurement()
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
	Get_ChannelVoltage(0);
 80038c8:	2000      	movs	r0, #0
 80038ca:	f7ff ff63 	bl	8003794 <Get_ChannelVoltage>
	Get_ChannelVoltage(1);
 80038ce:	2001      	movs	r0, #1
 80038d0:	f7ff ff60 	bl	8003794 <Get_ChannelVoltage>
	Get_ChannelVoltage(2);
 80038d4:	2002      	movs	r0, #2
 80038d6:	f7ff ff5d 	bl	8003794 <Get_ChannelVoltage>
	Get_ChannelCurrent(0);
 80038da:	2000      	movs	r0, #0
 80038dc:	f7ff ff82 	bl	80037e4 <Get_ChannelCurrent>
	Get_ChannelCurrent(1);
 80038e0:	2001      	movs	r0, #1
 80038e2:	f7ff ff7f 	bl	80037e4 <Get_ChannelCurrent>
	Get_ChannelCurrent(2);
 80038e6:	2002      	movs	r0, #2
 80038e8:	f7ff ff7c 	bl	80037e4 <Get_ChannelCurrent>

	Get_ErrorSignals();
 80038ec:	f7ff ffa2 	bl	8003834 <Get_ErrorSignals>
}
 80038f0:	bf00      	nop
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <Get_Setting>:
/* @brief Send by communication setting of power supply
 *
 * 
 */
void Get_Setting()
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
	SendCommunication(cmd_set_voltage_CH1, ChannelsChange[0].request_voltage);
 80038f8:	4b2a      	ldr	r3, [pc, #168]	; (80039a4 <Get_Setting+0xb0>)
 80038fa:	8adb      	ldrh	r3, [r3, #22]
 80038fc:	4619      	mov	r1, r3
 80038fe:	2008      	movs	r0, #8
 8003900:	f7fe f99e 	bl	8001c40 <SendCommunication>
	SendCommunication(cmd_set_voltage_CH2, ChannelsChange[1].request_voltage);
 8003904:	4b27      	ldr	r3, [pc, #156]	; (80039a4 <Get_Setting+0xb0>)
 8003906:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003908:	4619      	mov	r1, r3
 800390a:	2009      	movs	r0, #9
 800390c:	f7fe f998 	bl	8001c40 <SendCommunication>
	SendCommunication(cmd_set_voltage_CH3, ChannelsChange[2].request_voltage);
 8003910:	4b24      	ldr	r3, [pc, #144]	; (80039a4 <Get_Setting+0xb0>)
 8003912:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8003916:	4619      	mov	r1, r3
 8003918:	200a      	movs	r0, #10
 800391a:	f7fe f991 	bl	8001c40 <SendCommunication>

	//SendCommunication(cmd_set_voltage_CH1,ChannelsStatus[0].set_voltage);
	//SendCommunication(cmd_set_voltage_CH2,ChannelsStatus[1].set_voltage);
	//SendCommunication(cmd_set_voltage_CH3,ChannelsStatus[2].set_voltage);

	SendCommunication(cmd_enable_CH1, ChannelsStatus[0].enable);
 800391e:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <Get_Setting+0xb4>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	4619      	mov	r1, r3
 8003924:	2002      	movs	r0, #2
 8003926:	f7fe f98b 	bl	8001c40 <SendCommunication>
	SendCommunication(cmd_enable_CH2, ChannelsStatus[1].enable);
 800392a:	4b1f      	ldr	r3, [pc, #124]	; (80039a8 <Get_Setting+0xb4>)
 800392c:	7d1b      	ldrb	r3, [r3, #20]
 800392e:	4619      	mov	r1, r3
 8003930:	2003      	movs	r0, #3
 8003932:	f7fe f985 	bl	8001c40 <SendCommunication>
	SendCommunication(cmd_enable_CH3, ChannelsStatus[2].enable);
 8003936:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <Get_Setting+0xb4>)
 8003938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800393c:	4619      	mov	r1, r3
 800393e:	2004      	movs	r0, #4
 8003940:	f7fe f97e 	bl	8001c40 <SendCommunication>

	SendCommunication(cmd_polarity_CH1, ChannelsStatus[0].polarity + 1);
 8003944:	4b18      	ldr	r3, [pc, #96]	; (80039a8 <Get_Setting+0xb4>)
 8003946:	791b      	ldrb	r3, [r3, #4]
 8003948:	3301      	adds	r3, #1
 800394a:	4619      	mov	r1, r3
 800394c:	200b      	movs	r0, #11
 800394e:	f7fe f977 	bl	8001c40 <SendCommunication>
	SendCommunication(cmd_polarity_CH2, ChannelsStatus[1].polarity + 1);
 8003952:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <Get_Setting+0xb4>)
 8003954:	7e1b      	ldrb	r3, [r3, #24]
 8003956:	3301      	adds	r3, #1
 8003958:	4619      	mov	r1, r3
 800395a:	200c      	movs	r0, #12
 800395c:	f7fe f970 	bl	8001c40 <SendCommunication>
	SendCommunication(cmd_polarity_CH3, ChannelsStatus[2].polarity + 1);
 8003960:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <Get_Setting+0xb4>)
 8003962:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003966:	3301      	adds	r3, #1
 8003968:	4619      	mov	r1, r3
 800396a:	200d      	movs	r0, #13
 800396c:	f7fe f968 	bl	8001c40 <SendCommunication>

	SendCommunication(cmd_output_CH1, ChannelsStatus[0].output);
 8003970:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <Get_Setting+0xb4>)
 8003972:	795b      	ldrb	r3, [r3, #5]
 8003974:	4619      	mov	r1, r3
 8003976:	2005      	movs	r0, #5
 8003978:	f7fe f962 	bl	8001c40 <SendCommunication>
	SendCommunication(cmd_output_CH2, ChannelsStatus[1].output);
 800397c:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <Get_Setting+0xb4>)
 800397e:	7e5b      	ldrb	r3, [r3, #25]
 8003980:	4619      	mov	r1, r3
 8003982:	2006      	movs	r0, #6
 8003984:	f7fe f95c 	bl	8001c40 <SendCommunication>
	SendCommunication(cmd_output_CH3, ChannelsStatus[2].output);
 8003988:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <Get_Setting+0xb4>)
 800398a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800398e:	4619      	mov	r1, r3
 8003990:	2007      	movs	r0, #7
 8003992:	f7fe f955 	bl	8001c40 <SendCommunication>

	SendCommunication(cmd_thats_all, 1);
 8003996:	2101      	movs	r1, #1
 8003998:	2017      	movs	r0, #23
 800399a:	f7fe f951 	bl	8001c40 <SendCommunication>
}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20001a18 	.word	0x20001a18
 80039a8:	200019dc 	.word	0x200019dc

080039ac <Get_State_err>:

void Get_State_err()
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0

	for(int i = 0; i <3; i++)
 80039b2:	2300      	movs	r3, #0
 80039b4:	607b      	str	r3, [r7, #4]
 80039b6:	e028      	b.n	8003a0a <Get_State_err+0x5e>
	{
		uint8_t err_state = 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	70fb      	strb	r3, [r7, #3]

		if(ChannelsStatus[i].disableInError)//kanal byl vypnut z erroru
 80039bc:	4917      	ldr	r1, [pc, #92]	; (8003a1c <Get_State_err+0x70>)
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	3312      	adds	r3, #18
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <Get_State_err+0x2c>
		{
			err_state = 1;
 80039d2:	2301      	movs	r3, #1
 80039d4:	70fb      	strb	r3, [r7, #3]
 80039d6:	e00c      	b.n	80039f2 <Get_State_err+0x46>
		}
		else if(ChannelsChange[i].restart_request) //kanal se restartuje
 80039d8:	4911      	ldr	r1, [pc, #68]	; (8003a20 <Get_State_err+0x74>)
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	3303      	adds	r3, #3
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <Get_State_err+0x46>
		{
			err_state = 2;
 80039ee:	2302      	movs	r3, #2
 80039f0:	70fb      	strb	r3, [r7, #3]
		}

		SendCommunication(cmd_ch1_get_err_state + i, err_state);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	3351      	adds	r3, #81	; 0x51
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	78fa      	ldrb	r2, [r7, #3]
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fe f91e 	bl	8001c40 <SendCommunication>
	for(int i = 0; i <3; i++)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3301      	adds	r3, #1
 8003a08:	607b      	str	r3, [r7, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	ddd3      	ble.n	80039b8 <Get_State_err+0xc>
	}

}
 8003a10:	bf00      	nop
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	200019dc 	.word	0x200019dc
 8003a20:	20001a18 	.word	0x20001a18

08003a24 <System_Reset>:
/* @brief reset MCU
 *
 *
 */
void System_Reset()
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003a28:	f3bf 8f4f 	dsb	sy
}
 8003a2c:	bf00      	nop
	__DSB();
	SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) | (SCB_AIRCR_SYSRESETREQ_Msk));
 8003a2e:	4b03      	ldr	r3, [pc, #12]	; (8003a3c <System_Reset+0x18>)
 8003a30:	4a03      	ldr	r2, [pc, #12]	; (8003a40 <System_Reset+0x1c>)
 8003a32:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a34:	f3bf 8f4f 	dsb	sy
}
 8003a38:	bf00      	nop
	__DSB();
	while(1);
 8003a3a:	e7fe      	b.n	8003a3a <System_Reset+0x16>
 8003a3c:	e000ed00 	.word	0xe000ed00
 8003a40:	05fa0004 	.word	0x05fa0004
 8003a44:	00000000 	.word	0x00000000

08003a48 <AdaptiveVoltageTune>:
}



void AdaptiveVoltageTune(int channel)
{
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
	if(ChannelsChange[channel].voltage_ramp == true || ChannelsStatus[channel].enable == false)
 8003a50:	4981      	ldr	r1, [pc, #516]	; (8003c58 <AdaptiveVoltageTune+0x210>)
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	4613      	mov	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	1a9b      	subs	r3, r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10c      	bne.n	8003a7e <AdaptiveVoltageTune+0x36>
 8003a64:	497d      	ldr	r1, [pc, #500]	; (8003c5c <AdaptiveVoltageTune+0x214>)
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	f083 0301 	eor.w	r3, r3, #1
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <AdaptiveVoltageTune+0x46>
	{
		addSetVoltage[channel] = 0;
 8003a7e:	4a78      	ldr	r2, [pc, #480]	; (8003c60 <AdaptiveVoltageTune+0x218>)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
		return;
 8003a8c:	e0dd      	b.n	8003c4a <AdaptiveVoltageTune+0x202>
	}


	float measVoltage = ChannelsStatus[channel].voltage_measurement;
 8003a8e:	4973      	ldr	r1, [pc, #460]	; (8003c5c <AdaptiveVoltageTune+0x214>)
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	617b      	str	r3, [r7, #20]
	uint16_t setVoltage = ChannelsStatus[channel].set_voltage;
 8003aa2:	496e      	ldr	r1, [pc, #440]	; (8003c5c <AdaptiveVoltageTune+0x214>)
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	3302      	adds	r3, #2
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	827b      	strh	r3, [r7, #18]

	diff[channel] = measVoltage - (float)setVoltage;
 8003ab6:	8a7b      	ldrh	r3, [r7, #18]
 8003ab8:	ee07 3a90 	vmov	s15, r3
 8003abc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ac0:	ed97 7a05 	vldr	s14, [r7, #20]
 8003ac4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ac8:	4a66      	ldr	r2, [pc, #408]	; (8003c64 <AdaptiveVoltageTune+0x21c>)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	edc3 7a00 	vstr	s15, [r3]

	if(abs(diff[channel] > 2))
 8003ad4:	4a63      	ldr	r2, [pc, #396]	; (8003c64 <AdaptiveVoltageTune+0x21c>)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	edd3 7a00 	vldr	s15, [r3]
 8003ae0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003ae4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aec:	dd04      	ble.n	8003af8 <AdaptiveVoltageTune+0xb0>
	{
		adaptiveVoltRequest[channel] = true;
 8003aee:	4a5e      	ldr	r2, [pc, #376]	; (8003c68 <AdaptiveVoltageTune+0x220>)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4413      	add	r3, r2
 8003af4:	2201      	movs	r2, #1
 8003af6:	701a      	strb	r2, [r3, #0]
	}

	if(adaptiveVoltRequest[channel] == false) return;
 8003af8:	4a5b      	ldr	r2, [pc, #364]	; (8003c68 <AdaptiveVoltageTune+0x220>)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4413      	add	r3, r2
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	f083 0301 	eor.w	r3, r3, #1
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f040 809e 	bne.w	8003c48 <AdaptiveVoltageTune+0x200>

	if(diff[channel] > 0.50)
 8003b0c:	4a55      	ldr	r2, [pc, #340]	; (8003c64 <AdaptiveVoltageTune+0x21c>)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	edd3 7a00 	vldr	s15, [r3]
 8003b18:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b24:	dd3c      	ble.n	8003ba0 <AdaptiveVoltageTune+0x158>
	{
		addSetVoltage[channel] -= 0.2;
 8003b26:	4a4e      	ldr	r2, [pc, #312]	; (8003c60 <AdaptiveVoltageTune+0x218>)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fc fd11 	bl	8000558 <__aeabi_f2d>
 8003b36:	a346      	add	r3, pc, #280	; (adr r3, 8003c50 <AdaptiveVoltageTune+0x208>)
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	f7fc fbac 	bl	8000298 <__aeabi_dsub>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4610      	mov	r0, r2
 8003b46:	4619      	mov	r1, r3
 8003b48:	f7fd f856 	bl	8000bf8 <__aeabi_d2f>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	4944      	ldr	r1, [pc, #272]	; (8003c60 <AdaptiveVoltageTune+0x218>)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	601a      	str	r2, [r3, #0]

		uint16_t voltage = setVoltage + addSetVoltage[channel];
 8003b58:	8a7b      	ldrh	r3, [r7, #18]
 8003b5a:	ee07 3a90 	vmov	s15, r3
 8003b5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b62:	4a3f      	ldr	r2, [pc, #252]	; (8003c60 <AdaptiveVoltageTune+0x218>)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	edd3 7a00 	vldr	s15, [r3]
 8003b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b76:	ee17 3a90 	vmov	r3, s15
 8003b7a:	823b      	strh	r3, [r7, #16]

		Set_OutReg_Voltage(channel, voltage);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	8a3a      	ldrh	r2, [r7, #16]
 8003b82:	4611      	mov	r1, r2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff f85f 	bl	8002c48 <Set_OutReg_Voltage>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(voltage));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	b2dc      	uxtb	r4, r3
 8003b8e:	8a3b      	ldrh	r3, [r7, #16]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fe ff1d 	bl	80029d0 <Get_PreRegulatorVoltage>
 8003b96:	4603      	mov	r3, r0
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	f7ff f826 	bl	8002bec <Set_PreReg_Voltage>
	}
	if(diff[channel] < -0.50)
 8003ba0:	4a30      	ldr	r2, [pc, #192]	; (8003c64 <AdaptiveVoltageTune+0x21c>)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	edd3 7a00 	vldr	s15, [r3]
 8003bac:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8003bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb8:	d540      	bpl.n	8003c3c <AdaptiveVoltageTune+0x1f4>
	{
		addSetVoltage[channel] += 0.2;
 8003bba:	4a29      	ldr	r2, [pc, #164]	; (8003c60 <AdaptiveVoltageTune+0x218>)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fc fcc7 	bl	8000558 <__aeabi_f2d>
 8003bca:	a321      	add	r3, pc, #132	; (adr r3, 8003c50 <AdaptiveVoltageTune+0x208>)
 8003bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd0:	f7fc fb64 	bl	800029c <__adddf3>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4610      	mov	r0, r2
 8003bda:	4619      	mov	r1, r3
 8003bdc:	f7fd f80c 	bl	8000bf8 <__aeabi_d2f>
 8003be0:	4602      	mov	r2, r0
 8003be2:	491f      	ldr	r1, [pc, #124]	; (8003c60 <AdaptiveVoltageTune+0x218>)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	601a      	str	r2, [r3, #0]

		float voltage = setVoltage + addSetVoltage[channel];
 8003bec:	8a7b      	ldrh	r3, [r7, #18]
 8003bee:	ee07 3a90 	vmov	s15, r3
 8003bf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bf6:	4a1a      	ldr	r2, [pc, #104]	; (8003c60 <AdaptiveVoltageTune+0x218>)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	edd3 7a00 	vldr	s15, [r3]
 8003c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c06:	edc7 7a03 	vstr	s15, [r7, #12]

		Set_OutReg_Voltage_F(channel, voltage);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	ed97 0a03 	vldr	s0, [r7, #12]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff f84a 	bl	8002cac <Set_OutReg_Voltage_F>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(voltage));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	b2dc      	uxtb	r4, r3
 8003c1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c24:	ee17 3a90 	vmov	r3, s15
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fe fed0 	bl	80029d0 <Get_PreRegulatorVoltage>
 8003c30:	4603      	mov	r3, r0
 8003c32:	4619      	mov	r1, r3
 8003c34:	4620      	mov	r0, r4
 8003c36:	f7fe ffd9 	bl	8002bec <Set_PreReg_Voltage>
 8003c3a:	e006      	b.n	8003c4a <AdaptiveVoltageTune+0x202>
	}
	else
	{
		adaptiveVoltRequest[channel] = false;
 8003c3c:	4a0a      	ldr	r2, [pc, #40]	; (8003c68 <AdaptiveVoltageTune+0x220>)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4413      	add	r3, r2
 8003c42:	2200      	movs	r2, #0
 8003c44:	701a      	strb	r2, [r3, #0]
 8003c46:	e000      	b.n	8003c4a <AdaptiveVoltageTune+0x202>
	if(adaptiveVoltRequest[channel] == false) return;
 8003c48:	bf00      	nop
	}


}
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd90      	pop	{r4, r7, pc}
 8003c50:	9999999a 	.word	0x9999999a
 8003c54:	3fc99999 	.word	0x3fc99999
 8003c58:	20001a18 	.word	0x20001a18
 8003c5c:	200019dc 	.word	0x200019dc
 8003c60:	20001a78 	.word	0x20001a78
 8003c64:	20001a6c 	.word	0x20001a6c
 8003c68:	20001a84 	.word	0x20001a84

08003c6c <GetDiff>:

void GetDiff()
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
	SendCommunication_float(cmd_NON, diff[0]);
 8003c72:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <GetDiff+0x54>)
 8003c74:	edd3 7a00 	vldr	s15, [r3]
 8003c78:	eeb0 0a67 	vmov.f32	s0, s15
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	f7fe f833 	bl	8001ce8 <SendCommunication_float>
	SendCommunication_float(cmd_NON, addSetVoltage[0]);
 8003c82:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <GetDiff+0x58>)
 8003c84:	edd3 7a00 	vldr	s15, [r3]
 8003c88:	eeb0 0a67 	vmov.f32	s0, s15
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	f7fe f82b 	bl	8001ce8 <SendCommunication_float>

	float voltage = ChannelsStatus[0].set_voltage + addSetVoltage[0];
 8003c92:	4b0d      	ldr	r3, [pc, #52]	; (8003cc8 <GetDiff+0x5c>)
 8003c94:	885b      	ldrh	r3, [r3, #2]
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c9e:	4b09      	ldr	r3, [pc, #36]	; (8003cc4 <GetDiff+0x58>)
 8003ca0:	edd3 7a00 	vldr	s15, [r3]
 8003ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ca8:	edc7 7a01 	vstr	s15, [r7, #4]
	SendCommunication_float(cmd_NON, voltage);
 8003cac:	ed97 0a01 	vldr	s0, [r7, #4]
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	f7fe f819 	bl	8001ce8 <SendCommunication_float>
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20001a6c 	.word	0x20001a6c
 8003cc4:	20001a78 	.word	0x20001a78
 8003cc8:	200019dc 	.word	0x200019dc

08003ccc <MakeUint32FromFloat>:
FlashSectorParams MainParams;
FlashSectorParams DefaultParams;


uint32_t MakeUint32FromFloat(float value)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	ed87 0a01 	vstr	s0, [r7, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
	uint32_t x;
	memcpy(&x,&value,sizeof(x));
 8003cd8:	60fb      	str	r3, [r7, #12]

	return x;
 8003cda:	68fb      	ldr	r3, [r7, #12]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <ParamsDefaultValues>:



void ParamsDefaultValues()
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0

	DefaultParams.sramOffset_StoreControl_0 = 0;
 8003cec:	4b51      	ldr	r3, [pc, #324]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]
	DefaultParams.sramOffset_StoreControl_1 = 0;
 8003cf2:	4b50      	ldr	r3, [pc, #320]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	605a      	str	r2, [r3, #4]

	DefaultParams.sramOffset_MAC_aadress = 0xE7;
 8003cf8:	4b4e      	ldr	r3, [pc, #312]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003cfa:	22e7      	movs	r2, #231	; 0xe7
 8003cfc:	609a      	str	r2, [r3, #8]
	DefaultParams.sramOffset_IP_ADDRESS = ip_MAKEU32(192,168,0,23);
 8003cfe:	4b4d      	ldr	r3, [pc, #308]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003d00:	4a4d      	ldr	r2, [pc, #308]	; (8003e38 <ParamsDefaultValues+0x150>)
 8003d02:	60da      	str	r2, [r3, #12]
	DefaultParams.sramOffset_NETMASK_ADDRESS = ip_MAKEU32(255,255,255,0);
 8003d04:	4b4b      	ldr	r3, [pc, #300]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003d06:	f06f 02ff 	mvn.w	r2, #255	; 0xff
 8003d0a:	611a      	str	r2, [r3, #16]
	DefaultParams.sramOffset_GATEWAY_ADDRESS = ip_MAKEU32(192,168,0,1);
 8003d0c:	4b49      	ldr	r3, [pc, #292]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003d0e:	4a4b      	ldr	r2, [pc, #300]	; (8003e3c <ParamsDefaultValues+0x154>)
 8003d10:	615a      	str	r2, [r3, #20]
	DefaultParams.sramOffset_UdpRecvPort = 5005;
 8003d12:	4b48      	ldr	r3, [pc, #288]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003d14:	f241 328d 	movw	r2, #5005	; 0x138d
 8003d18:	619a      	str	r2, [r3, #24]

	DefaultParams.sramOffset_ReadCoef_k_0 = MakeUint32FromFloat(Default_Meas_U_Coef_k);
 8003d1a:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8003e40 <ParamsDefaultValues+0x158>
 8003d1e:	f7ff ffd5 	bl	8003ccc <MakeUint32FromFloat>
 8003d22:	4603      	mov	r3, r0
 8003d24:	4a43      	ldr	r2, [pc, #268]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003d26:	61d3      	str	r3, [r2, #28]
	DefaultParams.sramOffset_ReadCoef_k_1 = MakeUint32FromFloat(Default_Meas_U_Coef_k);
 8003d28:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8003e40 <ParamsDefaultValues+0x158>
 8003d2c:	f7ff ffce 	bl	8003ccc <MakeUint32FromFloat>
 8003d30:	4603      	mov	r3, r0
 8003d32:	4a40      	ldr	r2, [pc, #256]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003d34:	6213      	str	r3, [r2, #32]
	DefaultParams.sramOffset_ReadCoef_k_2 = MakeUint32FromFloat(Default_Meas_U_Coef_k);
 8003d36:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8003e40 <ParamsDefaultValues+0x158>
 8003d3a:	f7ff ffc7 	bl	8003ccc <MakeUint32FromFloat>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	4a3c      	ldr	r2, [pc, #240]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003d42:	6253      	str	r3, [r2, #36]	; 0x24
	DefaultParams.sramOffset_ReadCoef_k_3 = MakeUint32FromFloat(Default_Meas_I_Coef_k);
 8003d44:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8003e44 <ParamsDefaultValues+0x15c>
 8003d48:	f7ff ffc0 	bl	8003ccc <MakeUint32FromFloat>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	4a39      	ldr	r2, [pc, #228]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003d50:	6293      	str	r3, [r2, #40]	; 0x28
	DefaultParams.sramOffset_ReadCoef_k_4 = MakeUint32FromFloat(Default_Meas_I_Coef_k);
 8003d52:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8003e44 <ParamsDefaultValues+0x15c>
 8003d56:	f7ff ffb9 	bl	8003ccc <MakeUint32FromFloat>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	4a35      	ldr	r2, [pc, #212]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003d5e:	62d3      	str	r3, [r2, #44]	; 0x2c
	DefaultParams.sramOffset_ReadCoef_k_5 = MakeUint32FromFloat(Default_Meas_I_Coef_k);
 8003d60:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8003e44 <ParamsDefaultValues+0x15c>
 8003d64:	f7ff ffb2 	bl	8003ccc <MakeUint32FromFloat>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	4a32      	ldr	r2, [pc, #200]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003d6c:	6313      	str	r3, [r2, #48]	; 0x30

	DefaultParams.sramOffset_ReadCoef_q_0 = MakeUint32FromFloat(Default_Meas_U_Coef_q);
 8003d6e:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8003e48 <ParamsDefaultValues+0x160>
 8003d72:	f7ff ffab 	bl	8003ccc <MakeUint32FromFloat>
 8003d76:	4603      	mov	r3, r0
 8003d78:	4a2e      	ldr	r2, [pc, #184]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003d7a:	6353      	str	r3, [r2, #52]	; 0x34
	DefaultParams.sramOffset_ReadCoef_q_1 = MakeUint32FromFloat(Default_Meas_U_Coef_q);
 8003d7c:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8003e48 <ParamsDefaultValues+0x160>
 8003d80:	f7ff ffa4 	bl	8003ccc <MakeUint32FromFloat>
 8003d84:	4603      	mov	r3, r0
 8003d86:	4a2b      	ldr	r2, [pc, #172]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003d88:	6393      	str	r3, [r2, #56]	; 0x38
	DefaultParams.sramOffset_ReadCoef_q_2 = MakeUint32FromFloat(Default_Meas_U_Coef_q);
 8003d8a:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8003e48 <ParamsDefaultValues+0x160>
 8003d8e:	f7ff ff9d 	bl	8003ccc <MakeUint32FromFloat>
 8003d92:	4603      	mov	r3, r0
 8003d94:	4a27      	ldr	r2, [pc, #156]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003d96:	63d3      	str	r3, [r2, #60]	; 0x3c
	DefaultParams.sramOffset_ReadCoef_q_3 = MakeUint32FromFloat(Default_Meas_I_Coef_q);
 8003d98:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8003e4c <ParamsDefaultValues+0x164>
 8003d9c:	f7ff ff96 	bl	8003ccc <MakeUint32FromFloat>
 8003da0:	4603      	mov	r3, r0
 8003da2:	4a24      	ldr	r2, [pc, #144]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003da4:	6413      	str	r3, [r2, #64]	; 0x40
	DefaultParams.sramOffset_ReadCoef_q_4 = MakeUint32FromFloat(Default_Meas_I_Coef_q);
 8003da6:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8003e4c <ParamsDefaultValues+0x164>
 8003daa:	f7ff ff8f 	bl	8003ccc <MakeUint32FromFloat>
 8003dae:	4603      	mov	r3, r0
 8003db0:	4a20      	ldr	r2, [pc, #128]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003db2:	6453      	str	r3, [r2, #68]	; 0x44
	DefaultParams.sramOffset_ReadCoef_q_5 = MakeUint32FromFloat(Default_Meas_I_Coef_q);
 8003db4:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8003e4c <ParamsDefaultValues+0x164>
 8003db8:	f7ff ff88 	bl	8003ccc <MakeUint32FromFloat>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	4a1d      	ldr	r2, [pc, #116]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003dc0:	6493      	str	r3, [r2, #72]	; 0x48

	DefaultParams.sramOffset_AdjCoef_k_ch0 =  MakeUint32FromFloat(Default_AdjCoef_k);
 8003dc2:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8003e50 <ParamsDefaultValues+0x168>
 8003dc6:	f7ff ff81 	bl	8003ccc <MakeUint32FromFloat>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	4a19      	ldr	r2, [pc, #100]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003dce:	64d3      	str	r3, [r2, #76]	; 0x4c
	DefaultParams.sramOffset_AdjCoef_k_ch1  =  MakeUint32FromFloat(Default_AdjCoef_k);
 8003dd0:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8003e50 <ParamsDefaultValues+0x168>
 8003dd4:	f7ff ff7a 	bl	8003ccc <MakeUint32FromFloat>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	4a16      	ldr	r2, [pc, #88]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003ddc:	6513      	str	r3, [r2, #80]	; 0x50
	DefaultParams.sramOffset_AdjCoef_k_ch2  =  MakeUint32FromFloat(Default_AdjCoef_k);
 8003dde:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8003e50 <ParamsDefaultValues+0x168>
 8003de2:	f7ff ff73 	bl	8003ccc <MakeUint32FromFloat>
 8003de6:	4603      	mov	r3, r0
 8003de8:	4a12      	ldr	r2, [pc, #72]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003dea:	6553      	str	r3, [r2, #84]	; 0x54
	DefaultParams.sramOffset_AdjCoef_q_ch0 = MakeUint32FromFloat(Default_AdjCoef_q);
 8003dec:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8003e54 <ParamsDefaultValues+0x16c>
 8003df0:	f7ff ff6c 	bl	8003ccc <MakeUint32FromFloat>
 8003df4:	4603      	mov	r3, r0
 8003df6:	4a0f      	ldr	r2, [pc, #60]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003df8:	6593      	str	r3, [r2, #88]	; 0x58
	DefaultParams.sramOffset_AdjCoef_q_ch1 =  MakeUint32FromFloat(Default_AdjCoef_q);
 8003dfa:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8003e54 <ParamsDefaultValues+0x16c>
 8003dfe:	f7ff ff65 	bl	8003ccc <MakeUint32FromFloat>
 8003e02:	4603      	mov	r3, r0
 8003e04:	4a0b      	ldr	r2, [pc, #44]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003e06:	65d3      	str	r3, [r2, #92]	; 0x5c
	DefaultParams.sramOffset_AdjCoef_q_ch2  =  MakeUint32FromFloat(Default_AdjCoef_q);
 8003e08:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8003e54 <ParamsDefaultValues+0x16c>
 8003e0c:	f7ff ff5e 	bl	8003ccc <MakeUint32FromFloat>
 8003e10:	4603      	mov	r3, r0
 8003e12:	4a08      	ldr	r2, [pc, #32]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003e14:	6613      	str	r3, [r2, #96]	; 0x60

	DefaultParams.sramOffset_EnableErrorExecute = 1;
 8003e16:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003e18:	2201      	movs	r2, #1
 8003e1a:	665a      	str	r2, [r3, #100]	; 0x64
	DefaultParams.sramOffset_DisableSupplyInLostConnection = 0;
 8003e1c:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	669a      	str	r2, [r3, #104]	; 0x68
	DefaultParams.sramOffset_ControlOutputWithChannelEnable = 1;
 8003e22:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003e24:	2201      	movs	r2, #1
 8003e26:	66da      	str	r2, [r3, #108]	; 0x6c
	DefaultParams.sramOffset_ErrorExecuteAutoRestore = 1;
 8003e28:	4b02      	ldr	r3, [pc, #8]	; (8003e34 <ParamsDefaultValues+0x14c>)
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	671a      	str	r2, [r3, #112]	; 0x70


}
 8003e2e:	bf00      	nop
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20001afc 	.word	0x20001afc
 8003e38:	c0a80017 	.word	0xc0a80017
 8003e3c:	c0a80001 	.word	0xc0a80001
 8003e40:	3bb1a468 	.word	0x3bb1a468
 8003e44:	3dc710cb 	.word	0x3dc710cb
 8003e48:	3d6cb0db 	.word	0x3d6cb0db
 8003e4c:	3d7d8adb 	.word	0x3d7d8adb
 8003e50:	4408f759 	.word	0x4408f759
 8003e54:	4420b02d 	.word	0x4420b02d

08003e58 <ParamsLoad>:


void ParamsLoad()
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b0a0      	sub	sp, #128	; 0x80
 8003e5c:	af00      	add	r7, sp, #0

	FlashSectorParams LoadParams;

	Flash_ReadParamStruct(&LoadParams);
 8003e5e:	1d3b      	adds	r3, r7, #4
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fe4f 	bl	8004b04 <Flash_ReadParamStruct>

	uint32_t StoreControl_0 = LoadParams.sramOffset_StoreControl_0;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	67bb      	str	r3, [r7, #120]	; 0x78
	//uint32_t StoreControl_1 = LoadParams.sramOffset_StoreControl_1;


	for(int i = 2; i < NUMBER_OF_PARAMS;i++)
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e6e:	e01b      	b.n	8003ea8 <ParamsLoad+0x50>
	{
		//if((StoreControl_0 == STORE_VALIDE_CODE) &&  ((StoreControl_1 >> i) & 0x000001))
		if(StoreControl_0 == STORE_VALIDE_CODE)
 8003e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e72:	4a11      	ldr	r2, [pc, #68]	; (8003eb8 <ParamsLoad+0x60>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d10a      	bne.n	8003e8e <ParamsLoad+0x36>
		{
			*((uint32_t*)(&MainParams)+i) = *((uint32_t*)(&LoadParams)+i);
 8003e78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	1d3a      	adds	r2, r7, #4
 8003e7e:	441a      	add	r2, r3
 8003e80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	490d      	ldr	r1, [pc, #52]	; (8003ebc <ParamsLoad+0x64>)
 8003e86:	440b      	add	r3, r1
 8003e88:	6812      	ldr	r2, [r2, #0]
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	e009      	b.n	8003ea2 <ParamsLoad+0x4a>


		}
		else
		{
			*((uint32_t*)(&MainParams)+i) = *((uint32_t*)(&DefaultParams)+i);
 8003e8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4a0b      	ldr	r2, [pc, #44]	; (8003ec0 <ParamsLoad+0x68>)
 8003e94:	441a      	add	r2, r3
 8003e96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4908      	ldr	r1, [pc, #32]	; (8003ebc <ParamsLoad+0x64>)
 8003e9c:	440b      	add	r3, r1
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	601a      	str	r2, [r3, #0]
	for(int i = 2; i < NUMBER_OF_PARAMS;i++)
 8003ea2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ea8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003eaa:	2b1c      	cmp	r3, #28
 8003eac:	d9e0      	bls.n	8003e70 <ParamsLoad+0x18>
		}
	}

}
 8003eae:	bf00      	nop
 8003eb0:	bf00      	nop
 8003eb2:	3780      	adds	r7, #128	; 0x80
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	a4b7a4b7 	.word	0xa4b7a4b7
 8003ebc:	20001a88 	.word	0x20001a88
 8003ec0:	20001afc 	.word	0x20001afc

08003ec4 <ParamsStore>:

void ParamsStore()
{
 8003ec4:	b590      	push	{r4, r7, lr}
 8003ec6:	b09b      	sub	sp, #108	; 0x6c
 8003ec8:	af1a      	add	r7, sp, #104	; 0x68
	MainParams.sramOffset_StoreControl_0 = STORE_VALIDE_CODE;
 8003eca:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <ParamsStore+0x34>)
 8003ecc:	4a0b      	ldr	r2, [pc, #44]	; (8003efc <ParamsStore+0x38>)
 8003ece:	601a      	str	r2, [r3, #0]
	MainParams.sramOffset_StoreControl_1 = 0xA1B2C3D4;
 8003ed0:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <ParamsStore+0x34>)
 8003ed2:	4a0b      	ldr	r2, [pc, #44]	; (8003f00 <ParamsStore+0x3c>)
 8003ed4:	605a      	str	r2, [r3, #4]

	Flash_WriteParamStruct(MainParams);
 8003ed6:	4c08      	ldr	r4, [pc, #32]	; (8003ef8 <ParamsStore+0x34>)
 8003ed8:	4668      	mov	r0, sp
 8003eda:	f104 0310 	add.w	r3, r4, #16
 8003ede:	2264      	movs	r2, #100	; 0x64
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f005 ffeb 	bl	8009ebc <memcpy>
 8003ee6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003eea:	f000 fe2d 	bl	8004b48 <Flash_WriteParamStruct>
}
 8003eee:	bf00      	nop
 8003ef0:	3704      	adds	r7, #4
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd90      	pop	{r4, r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20001a88 	.word	0x20001a88
 8003efc:	a4b7a4b7 	.word	0xa4b7a4b7
 8003f00:	a1b2c3d4 	.word	0xa1b2c3d4

08003f04 <RestoreParamsDefault>:

void RestoreParamsDefault()
{
 8003f04:	b590      	push	{r4, r7, lr}
 8003f06:	b09b      	sub	sp, #108	; 0x6c
 8003f08:	af1a      	add	r7, sp, #104	; 0x68
	Flash_WriteParamStruct(DefaultParams);
 8003f0a:	4c09      	ldr	r4, [pc, #36]	; (8003f30 <RestoreParamsDefault+0x2c>)
 8003f0c:	4668      	mov	r0, sp
 8003f0e:	f104 0310 	add.w	r3, r4, #16
 8003f12:	2264      	movs	r2, #100	; 0x64
 8003f14:	4619      	mov	r1, r3
 8003f16:	f005 ffd1 	bl	8009ebc <memcpy>
 8003f1a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003f1e:	f000 fe13 	bl	8004b48 <Flash_WriteParamStruct>
	ParamsLoad();
 8003f22:	f7ff ff99 	bl	8003e58 <ParamsLoad>
}
 8003f26:	bf00      	nop
 8003f28:	3704      	adds	r7, #4
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd90      	pop	{r4, r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20001afc 	.word	0x20001afc

08003f34 <SetConfigData>:




void SetConfigData(int cfg, int value)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
	uint32_t *addr = &MainParams.sramOffset_EnableErrorExecute + cfg;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4a06      	ldr	r2, [pc, #24]	; (8003f5c <SetConfigData+0x28>)
 8003f44:	4413      	add	r3, r2
 8003f46:	60fb      	str	r3, [r7, #12]

	*addr = value;
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	601a      	str	r2, [r3, #0]

}
 8003f4e:	bf00      	nop
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	20001aec 	.word	0x20001aec

08003f60 <SendConfigData>:


void SendConfigData()
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0

	SendCommunication(cmd_CfgGet_EnableErrorExecute, MainParams.sramOffset_EnableErrorExecute);
 8003f64:	4b0c      	ldr	r3, [pc, #48]	; (8003f98 <SendConfigData+0x38>)
 8003f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f68:	4619      	mov	r1, r3
 8003f6a:	2059      	movs	r0, #89	; 0x59
 8003f6c:	f7fd fe68 	bl	8001c40 <SendCommunication>
	SendCommunication(cmd_CfgGet_DisableInConnLost, MainParams.sramOffset_DisableSupplyInLostConnection);
 8003f70:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <SendConfigData+0x38>)
 8003f72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f74:	4619      	mov	r1, r3
 8003f76:	205a      	movs	r0, #90	; 0x5a
 8003f78:	f7fd fe62 	bl	8001c40 <SendCommunication>
	SendCommunication(cmd_CfgGet_CtrlOutWithChEnable, MainParams.sramOffset_ControlOutputWithChannelEnable);
 8003f7c:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <SendConfigData+0x38>)
 8003f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f80:	4619      	mov	r1, r3
 8003f82:	205b      	movs	r0, #91	; 0x5b
 8003f84:	f7fd fe5c 	bl	8001c40 <SendCommunication>
	SendCommunication(cmd_CfgGet_ErrorExecuteAutoRestart, MainParams.sramOffset_ErrorExecuteAutoRestore);
 8003f88:	4b03      	ldr	r3, [pc, #12]	; (8003f98 <SendConfigData+0x38>)
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	205c      	movs	r0, #92	; 0x5c
 8003f90:	f7fd fe56 	bl	8001c40 <SendCommunication>

}
 8003f94:	bf00      	nop
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20001a88 	.word	0x20001a88

08003f9c <SendCommandToDAC>:
 * @param value -> value to write in DAC register
 * @param rw    -> read/write bit
 *
 */
void SendCommandToDAC(uint8_t adr, uint16_t value,  bool rw)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	71fb      	strb	r3, [r7, #7]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	80bb      	strh	r3, [r7, #4]
 8003faa:	4613      	mov	r3, r2
 8003fac:	71bb      	strb	r3, [r7, #6]

	uint8_t data[3];

	data[2] = value & (0x00FF);
 8003fae:	88bb      	ldrh	r3, [r7, #4]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	73bb      	strb	r3, [r7, #14]
	data[1] = value >> 8;
 8003fb4:	88bb      	ldrh	r3, [r7, #4]
 8003fb6:	0a1b      	lsrs	r3, r3, #8
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	737b      	strb	r3, [r7, #13]
	data[0] = (adr & 0x0F) | (rw << 7);
 8003fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc2:	f003 030f 	and.w	r3, r3, #15
 8003fc6:	b25a      	sxtb	r2, r3
 8003fc8:	79bb      	ldrb	r3, [r7, #6]
 8003fca:	01db      	lsls	r3, r3, #7
 8003fcc:	b25b      	sxtb	r3, r3
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	b25b      	sxtb	r3, r3
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2110      	movs	r1, #16
 8003fda:	4809      	ldr	r0, [pc, #36]	; (8004000 <SendCommandToDAC+0x64>)
 8003fdc:	f002 fc08 	bl	80067f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, sizeof(data),10);
 8003fe0:	f107 010c 	add.w	r1, r7, #12
 8003fe4:	230a      	movs	r3, #10
 8003fe6:	2203      	movs	r2, #3
 8003fe8:	4806      	ldr	r0, [pc, #24]	; (8004004 <SendCommandToDAC+0x68>)
 8003fea:	f003 fa40 	bl	800746e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8003fee:	2201      	movs	r2, #1
 8003ff0:	2110      	movs	r1, #16
 8003ff2:	4803      	ldr	r0, [pc, #12]	; (8004000 <SendCommandToDAC+0x64>)
 8003ff4:	f002 fbfc 	bl	80067f0 <HAL_GPIO_WritePin>
}
 8003ff8:	bf00      	nop
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40020000 	.word	0x40020000
 8004004:	20002c34 	.word	0x20002c34

08004008 <SendValueToDAC>:
 * @param dac_channel -> DAC output channel
 * @param value       -> value to write in DAC output register
 *
 */
void SendValueToDAC(uint8_t dac_channel, uint16_t value)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	460a      	mov	r2, r1
 8004012:	71fb      	strb	r3, [r7, #7]
 8004014:	4613      	mov	r3, r2
 8004016:	80bb      	strh	r3, [r7, #4]

	uint8_t data[3];

	data[2] = value & 0x000F;
 8004018:	88bb      	ldrh	r3, [r7, #4]
 800401a:	b2db      	uxtb	r3, r3
 800401c:	f003 030f 	and.w	r3, r3, #15
 8004020:	b2db      	uxtb	r3, r3
 8004022:	73bb      	strb	r3, [r7, #14]
	data[1] = value >> 4;
 8004024:	88bb      	ldrh	r3, [r7, #4]
 8004026:	091b      	lsrs	r3, r3, #4
 8004028:	b29b      	uxth	r3, r3
 800402a:	b2db      	uxtb	r3, r3
 800402c:	737b      	strb	r3, [r7, #13]
	data[0] = (dac_channel & 0x07) | (1 << 3) | (0 << 7);
 800402e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	b25b      	sxtb	r3, r3
 8004038:	f043 0308 	orr.w	r3, r3, #8
 800403c:	b25b      	sxtb	r3, r3
 800403e:	b2db      	uxtb	r3, r3
 8004040:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8004042:	2200      	movs	r2, #0
 8004044:	2110      	movs	r1, #16
 8004046:	4809      	ldr	r0, [pc, #36]	; (800406c <SendValueToDAC+0x64>)
 8004048:	f002 fbd2 	bl	80067f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, sizeof(data),10);
 800404c:	f107 010c 	add.w	r1, r7, #12
 8004050:	230a      	movs	r3, #10
 8004052:	2203      	movs	r2, #3
 8004054:	4806      	ldr	r0, [pc, #24]	; (8004070 <SendValueToDAC+0x68>)
 8004056:	f003 fa0a 	bl	800746e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800405a:	2201      	movs	r2, #1
 800405c:	2110      	movs	r1, #16
 800405e:	4803      	ldr	r0, [pc, #12]	; (800406c <SendValueToDAC+0x64>)
 8004060:	f002 fbc6 	bl	80067f0 <HAL_GPIO_WritePin>

}
 8004064:	bf00      	nop
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40020000 	.word	0x40020000
 8004070:	20002c34 	.word	0x20002c34

08004074 <DAC_Init>:

/* @brief DAC initialization
 *
 */
void DAC_Init()
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
	SendCommandToDAC(0, 0, 0); //dummy command
 800407a:	2200      	movs	r2, #0
 800407c:	2100      	movs	r1, #0
 800407e:	2000      	movs	r0, #0
 8004080:	f7ff ff8c 	bl	8003f9c <SendCommandToDAC>
	SendCommandToDAC(5, 0xA, 0); //reset up
 8004084:	2200      	movs	r2, #0
 8004086:	210a      	movs	r1, #10
 8004088:	2005      	movs	r0, #5
 800408a:	f7ff ff87 	bl	8003f9c <SendCommandToDAC>
	SendCommandToDAC(5, 0, 0); //reset down
 800408e:	2200      	movs	r2, #0
 8004090:	2100      	movs	r1, #0
 8004092:	2005      	movs	r0, #5
 8004094:	f7ff ff82 	bl	8003f9c <SendCommandToDAC>
	SendCommandToDAC(2, 0, 0); //sync register -> all 0
 8004098:	2200      	movs	r2, #0
 800409a:	2100      	movs	r1, #0
 800409c:	2002      	movs	r0, #2
 800409e:	f7ff ff7d 	bl	8003f9c <SendCommandToDAC>
	SendCommandToDAC(3, 0, 0); //config register -> all 0
 80040a2:	2200      	movs	r2, #0
 80040a4:	2100      	movs	r1, #0
 80040a6:	2003      	movs	r0, #3
 80040a8:	f7ff ff78 	bl	8003f9c <SendCommandToDAC>
	SendCommandToDAC(4, 0 | (1 << 8)  , 0); //gain register -> reference diveded by 2
 80040ac:	2200      	movs	r2, #0
 80040ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040b2:	2004      	movs	r0, #4
 80040b4:	f7ff ff72 	bl	8003f9c <SendCommandToDAC>

	for(int i = 0; i < 8; i++)
 80040b8:	2300      	movs	r3, #0
 80040ba:	607b      	str	r3, [r7, #4]
 80040bc:	e009      	b.n	80040d2 <DAC_Init+0x5e>
	{
		SendValueToDAC(i, 4095); // set all DAC channels on maximum value -> minimum output voltage of power supply
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	f640 71ff 	movw	r1, #4095	; 0xfff
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff ff9e 	bl	8004008 <SendValueToDAC>
	for(int i = 0; i < 8; i++)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3301      	adds	r3, #1
 80040d0:	607b      	str	r3, [r7, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b07      	cmp	r3, #7
 80040d6:	ddf2      	ble.n	80040be <DAC_Init+0x4a>
	}

}
 80040d8:	bf00      	nop
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <ETH_StoreMac>:
//ip_addr_t endpoint_ip;
//struct udp_pcb * udp_pcb;


void ETH_StoreMac(uint32_t mac)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
	MainParams.sramOffset_MAC_aadress = mac;
 80040ec:	4a04      	ldr	r2, [pc, #16]	; (8004100 <ETH_StoreMac+0x1c>)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6093      	str	r3, [r2, #8]
}
 80040f2:	bf00      	nop
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	20001a88 	.word	0x20001a88

08004104 <ETH_StoreIP>:
 *
 * @param ip -> ip address
 *
 */
void ETH_StoreIP(uint32_t ip)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
	MainParams.sramOffset_IP_ADDRESS = ip;
 800410c:	4a04      	ldr	r2, [pc, #16]	; (8004120 <ETH_StoreIP+0x1c>)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	60d3      	str	r3, [r2, #12]
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20001a88 	.word	0x20001a88

08004124 <ETH_StoreNETMASK>:
 *
 * @param netmask -> netmask address
 *
 */
void ETH_StoreNETMASK(uint32_t netmask)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
	MainParams.sramOffset_NETMASK_ADDRESS = netmask;
 800412c:	4a04      	ldr	r2, [pc, #16]	; (8004140 <ETH_StoreNETMASK+0x1c>)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6113      	str	r3, [r2, #16]
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	20001a88 	.word	0x20001a88

08004144 <ETH_StoreGATEWAY>:
 *
 * @param gateway -> gateway address
 *
 */
void ETH_StoreGATEWAY(uint32_t gateway)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
	MainParams.sramOffset_GATEWAY_ADDRESS = gateway;
 800414c:	4a04      	ldr	r2, [pc, #16]	; (8004160 <ETH_StoreGATEWAY+0x1c>)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6153      	str	r3, [r2, #20]
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	20001a88 	.word	0x20001a88

08004164 <ETH_Store_UdpRecPort>:

void ETH_Store_UdpRecPort(uint32_t port)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
	MainParams.sramOffset_UdpRecvPort = port;
 800416c:	4a04      	ldr	r2, [pc, #16]	; (8004180 <ETH_Store_UdpRecPort+0x1c>)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6193      	str	r3, [r2, #24]
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	20001a88 	.word	0x20001a88

08004184 <W5500_Select>:




void W5500_Select(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8004188:	2200      	movs	r2, #0
 800418a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800418e:	4802      	ldr	r0, [pc, #8]	; (8004198 <W5500_Select+0x14>)
 8004190:	f002 fb2e 	bl	80067f0 <HAL_GPIO_WritePin>
}
 8004194:	bf00      	nop
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40020000 	.word	0x40020000

0800419c <W5500_Unselect>:

void W5500_Unselect(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80041a0:	2201      	movs	r2, #1
 80041a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041a6:	4802      	ldr	r0, [pc, #8]	; (80041b0 <W5500_Unselect+0x14>)
 80041a8:	f002 fb22 	bl	80067f0 <HAL_GPIO_WritePin>
}
 80041ac:	bf00      	nop
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40020000 	.word	0x40020000

080041b4 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi3, buff, len, HAL_MAX_DELAY);
 80041c0:	887a      	ldrh	r2, [r7, #2]
 80041c2:	f04f 33ff 	mov.w	r3, #4294967295
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	4803      	ldr	r0, [pc, #12]	; (80041d8 <W5500_ReadBuff+0x24>)
 80041ca:	f003 fa8c 	bl	80076e6 <HAL_SPI_Receive>
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20002ce4 	.word	0x20002ce4

080041dc <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi3, buff, len, HAL_MAX_DELAY);
 80041e8:	887a      	ldrh	r2, [r7, #2]
 80041ea:	f04f 33ff 	mov.w	r3, #4294967295
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4803      	ldr	r0, [pc, #12]	; (8004200 <W5500_WriteBuff+0x24>)
 80041f2:	f003 f93c 	bl	800746e <HAL_SPI_Transmit>
}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	20002ce4 	.word	0x20002ce4

08004204 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 800420a:	1dfb      	adds	r3, r7, #7
 800420c:	2101      	movs	r1, #1
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff ffd0 	bl	80041b4 <W5500_ReadBuff>
    return byte;
 8004214:	79fb      	ldrb	r3, [r7, #7]
}
 8004216:	4618      	mov	r0, r3
 8004218:	3708      	adds	r7, #8
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b082      	sub	sp, #8
 8004222:	af00      	add	r7, sp, #0
 8004224:	4603      	mov	r3, r0
 8004226:	71fb      	strb	r3, [r7, #7]
    W5500_WriteBuff(&byte, sizeof(byte));
 8004228:	1dfb      	adds	r3, r7, #7
 800422a:	2101      	movs	r1, #1
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff ffd5 	bl	80041dc <W5500_WriteBuff>
}
 8004232:	bf00      	nop
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <ETH_SendSetting>:
/* @brief send setting of ethernet
 *
 *
 */
void ETH_SendSetting()
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
	uint32_t x;

	SendCommunication(cmd_ip_get_mac, MainParams.sramOffset_MAC_aadress);
 8004242:	4b12      	ldr	r3, [pc, #72]	; (800428c <ETH_SendSetting+0x50>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	4619      	mov	r1, r3
 8004248:	201f      	movs	r0, #31
 800424a:	f7fd fcf9 	bl	8001c40 <SendCommunication>

	x = MainParams.sramOffset_IP_ADDRESS;
 800424e:	4b0f      	ldr	r3, [pc, #60]	; (800428c <ETH_SendSetting+0x50>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	607b      	str	r3, [r7, #4]
	SendCommunication_u32(cmd_ip_get_myip, x);
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	2020      	movs	r0, #32
 8004258:	f7fd fdc4 	bl	8001de4 <SendCommunication_u32>

	x = MainParams.sramOffset_NETMASK_ADDRESS;
 800425c:	4b0b      	ldr	r3, [pc, #44]	; (800428c <ETH_SendSetting+0x50>)
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	607b      	str	r3, [r7, #4]
	SendCommunication_u32(cmd_ip_get_mymask, x);
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	2021      	movs	r0, #33	; 0x21
 8004266:	f7fd fdbd 	bl	8001de4 <SendCommunication_u32>

	x = MainParams.sramOffset_GATEWAY_ADDRESS;
 800426a:	4b08      	ldr	r3, [pc, #32]	; (800428c <ETH_SendSetting+0x50>)
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	607b      	str	r3, [r7, #4]
	SendCommunication_u32(cmd_ip_get_mygatew, x);
 8004270:	6879      	ldr	r1, [r7, #4]
 8004272:	2022      	movs	r0, #34	; 0x22
 8004274:	f7fd fdb6 	bl	8001de4 <SendCommunication_u32>

	SendCommunication(cmd_ip_get_UdpRecvPort, MainParams.sramOffset_UdpRecvPort);
 8004278:	4b04      	ldr	r3, [pc, #16]	; (800428c <ETH_SendSetting+0x50>)
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	4619      	mov	r1, r3
 800427e:	2023      	movs	r0, #35	; 0x23
 8004280:	f7fd fcde 	bl	8001c40 <SendCommunication>

	//SendCommunication_u32(cmd_ip_get_myip, ETH_GetIP());
	//SendCommunication_u32(cmd_ip_get_mymask, ETH_GetNETMASK());
	//SendCommunication_u32(cmd_ip_get_mygatew, ETH_GetGATEWAY());
}
 8004284:	bf00      	nop
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20001a88 	.word	0x20001a88

08004290 <ETH_load_ip>:




void ETH_load_ip()
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
	uint32_t x;

		myNetInfo.mac[5] = MainParams.sramOffset_MAC_aadress;
 8004296:	4b26      	ldr	r3, [pc, #152]	; (8004330 <ETH_load_ip+0xa0>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	b2da      	uxtb	r2, r3
 800429c:	4b25      	ldr	r3, [pc, #148]	; (8004334 <ETH_load_ip+0xa4>)
 800429e:	715a      	strb	r2, [r3, #5]

		x = MainParams.sramOffset_IP_ADDRESS;
 80042a0:	4b23      	ldr	r3, [pc, #140]	; (8004330 <ETH_load_ip+0xa0>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	607b      	str	r3, [r7, #4]
		myNetInfo.ip[0] = ip_GET8(x,0);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	0e1b      	lsrs	r3, r3, #24
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	4b21      	ldr	r3, [pc, #132]	; (8004334 <ETH_load_ip+0xa4>)
 80042ae:	719a      	strb	r2, [r3, #6]
		myNetInfo.ip[1] = ip_GET8(x,1);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	0c1b      	lsrs	r3, r3, #16
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	4b1f      	ldr	r3, [pc, #124]	; (8004334 <ETH_load_ip+0xa4>)
 80042b8:	71da      	strb	r2, [r3, #7]
		myNetInfo.ip[2] = ip_GET8(x,2);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	0a1b      	lsrs	r3, r3, #8
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	4b1c      	ldr	r3, [pc, #112]	; (8004334 <ETH_load_ip+0xa4>)
 80042c2:	721a      	strb	r2, [r3, #8]
		myNetInfo.ip[3] = ip_GET8(x,3);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	4b1a      	ldr	r3, [pc, #104]	; (8004334 <ETH_load_ip+0xa4>)
 80042ca:	725a      	strb	r2, [r3, #9]

		x = MainParams.sramOffset_NETMASK_ADDRESS;
 80042cc:	4b18      	ldr	r3, [pc, #96]	; (8004330 <ETH_load_ip+0xa0>)
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	607b      	str	r3, [r7, #4]
		myNetInfo.sn[0] = ip_GET8(x,0);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	0e1b      	lsrs	r3, r3, #24
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	4b16      	ldr	r3, [pc, #88]	; (8004334 <ETH_load_ip+0xa4>)
 80042da:	729a      	strb	r2, [r3, #10]
		myNetInfo.sn[1] = ip_GET8(x,1);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	0c1b      	lsrs	r3, r3, #16
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	4b14      	ldr	r3, [pc, #80]	; (8004334 <ETH_load_ip+0xa4>)
 80042e4:	72da      	strb	r2, [r3, #11]
		myNetInfo.sn[2] = ip_GET8(x,2);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	0a1b      	lsrs	r3, r3, #8
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	4b11      	ldr	r3, [pc, #68]	; (8004334 <ETH_load_ip+0xa4>)
 80042ee:	731a      	strb	r2, [r3, #12]
		myNetInfo.sn[3] = ip_GET8(x,3);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	4b0f      	ldr	r3, [pc, #60]	; (8004334 <ETH_load_ip+0xa4>)
 80042f6:	735a      	strb	r2, [r3, #13]

		x = MainParams.sramOffset_GATEWAY_ADDRESS;
 80042f8:	4b0d      	ldr	r3, [pc, #52]	; (8004330 <ETH_load_ip+0xa0>)
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	607b      	str	r3, [r7, #4]
		myNetInfo.gw[0] = ip_GET8(x,0);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	0e1b      	lsrs	r3, r3, #24
 8004302:	b2da      	uxtb	r2, r3
 8004304:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <ETH_load_ip+0xa4>)
 8004306:	739a      	strb	r2, [r3, #14]
		myNetInfo.gw[1] = ip_GET8(x,1);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	0c1b      	lsrs	r3, r3, #16
 800430c:	b2da      	uxtb	r2, r3
 800430e:	4b09      	ldr	r3, [pc, #36]	; (8004334 <ETH_load_ip+0xa4>)
 8004310:	73da      	strb	r2, [r3, #15]
		myNetInfo.gw[2] = ip_GET8(x,2);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	0a1b      	lsrs	r3, r3, #8
 8004316:	b2da      	uxtb	r2, r3
 8004318:	4b06      	ldr	r3, [pc, #24]	; (8004334 <ETH_load_ip+0xa4>)
 800431a:	741a      	strb	r2, [r3, #16]
		myNetInfo.gw[3] = ip_GET8(x,3);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	b2da      	uxtb	r2, r3
 8004320:	4b04      	ldr	r3, [pc, #16]	; (8004334 <ETH_load_ip+0xa4>)
 8004322:	745a      	strb	r2, [r3, #17]

}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	20001a88 	.word	0x20001a88
 8004334:	20000074 	.word	0x20000074

08004338 <ETH_udp_Init>:
/* @brief UDP communication init
 *
 *
 */
void ETH_udp_Init()
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
	//---------udp_connect(udp_pcb, IP46_ADDR_ANY(), UDP_PORT);
	//udp_connect(udp_pcb, &endpoint_ip, UDP_PORT);

	//---------udp_recv(udp_pcb, UDP_Receiver_handler, NULL);

    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 800433e:	4915      	ldr	r1, [pc, #84]	; (8004394 <ETH_udp_Init+0x5c>)
 8004340:	4815      	ldr	r0, [pc, #84]	; (8004398 <ETH_udp_Init+0x60>)
 8004342:	f005 fbe7 	bl	8009b14 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8004346:	4915      	ldr	r1, [pc, #84]	; (800439c <ETH_udp_Init+0x64>)
 8004348:	4815      	ldr	r0, [pc, #84]	; (80043a0 <ETH_udp_Init+0x68>)
 800434a:	f005 fc09 	bl	8009b60 <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 800434e:	4915      	ldr	r1, [pc, #84]	; (80043a4 <ETH_udp_Init+0x6c>)
 8004350:	4815      	ldr	r0, [pc, #84]	; (80043a8 <ETH_udp_Init+0x70>)
 8004352:	f005 fc31 	bl	8009bb8 <reg_wizchip_spiburst_cbfunc>

    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 8004356:	4a15      	ldr	r2, [pc, #84]	; (80043ac <ETH_udp_Init+0x74>)
 8004358:	1d3b      	adds	r3, r7, #4
 800435a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800435e:	e883 0003 	stmia.w	r3, {r0, r1}
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8004362:	1d3a      	adds	r2, r7, #4
 8004364:	1d3b      	adds	r3, r7, #4
 8004366:	4611      	mov	r1, r2
 8004368:	4618      	mov	r0, r3
 800436a:	f005 fc9d 	bl	8009ca8 <wizchip_init>


    ETH_load_ip();
 800436e:	f7ff ff8f 	bl	8004290 <ETH_load_ip>

    wizchip_setnetinfo(&myNetInfo);
 8004372:	480f      	ldr	r0, [pc, #60]	; (80043b0 <ETH_udp_Init+0x78>)
 8004374:	f005 fd24 	bl	8009dc0 <wizchip_setnetinfo>

    int udp_socket = socket(UDP_SOCKET, Sn_MR_UDP, UDP_PORT, SF_IO_NONBLOCK);
 8004378:	2301      	movs	r3, #1
 800437a:	f241 328d 	movw	r2, #5005	; 0x138d
 800437e:	2102      	movs	r1, #2
 8004380:	2003      	movs	r0, #3
 8004382:	f004 febb 	bl	80090fc <socket>
 8004386:	4603      	mov	r3, r0
 8004388:	60fb      	str	r3, [r7, #12]

    if(udp_socket != UDP_SOCKET)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2b03      	cmp	r3, #3
    {
    	//error
    	return;
    }

}
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	0800419d 	.word	0x0800419d
 8004398:	08004185 	.word	0x08004185
 800439c:	0800421f 	.word	0x0800421f
 80043a0:	08004205 	.word	0x08004205
 80043a4:	080041dd 	.word	0x080041dd
 80043a8:	080041b5 	.word	0x080041b5
 80043ac:	0800e5dc 	.word	0x0800e5dc
 80043b0:	20000074 	.word	0x20000074

080043b4 <ETH_udp_StoreEndpoint>:
/* @brief store UDP endpoint
 *
 *
 */
void ETH_udp_StoreEndpoint(uint32_t port)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
	//---------endpoint_ip = last_message_ip;
	//---------udp_connect(udp_pcb, &endpoint_ip, UDP_PORT);

		//memcpy(endpoint_ip,last_message_ip,sizeof(last_message_ip));

	endpoint_ip[0] = last_message_ip[0];
 80043bc:	4b0c      	ldr	r3, [pc, #48]	; (80043f0 <ETH_udp_StoreEndpoint+0x3c>)
 80043be:	781a      	ldrb	r2, [r3, #0]
 80043c0:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <ETH_udp_StoreEndpoint+0x40>)
 80043c2:	701a      	strb	r2, [r3, #0]
	endpoint_ip[1] = last_message_ip[1];
 80043c4:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <ETH_udp_StoreEndpoint+0x3c>)
 80043c6:	785a      	ldrb	r2, [r3, #1]
 80043c8:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <ETH_udp_StoreEndpoint+0x40>)
 80043ca:	705a      	strb	r2, [r3, #1]
	endpoint_ip[2] = last_message_ip[2];
 80043cc:	4b08      	ldr	r3, [pc, #32]	; (80043f0 <ETH_udp_StoreEndpoint+0x3c>)
 80043ce:	789a      	ldrb	r2, [r3, #2]
 80043d0:	4b08      	ldr	r3, [pc, #32]	; (80043f4 <ETH_udp_StoreEndpoint+0x40>)
 80043d2:	709a      	strb	r2, [r3, #2]
	endpoint_ip[3] = last_message_ip[3];
 80043d4:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <ETH_udp_StoreEndpoint+0x3c>)
 80043d6:	78da      	ldrb	r2, [r3, #3]
 80043d8:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <ETH_udp_StoreEndpoint+0x40>)
 80043da:	70da      	strb	r2, [r3, #3]

	endpoint_port = port;
 80043dc:	4a06      	ldr	r2, [pc, #24]	; (80043f8 <ETH_udp_StoreEndpoint+0x44>)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6013      	str	r3, [r2, #0]

}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20001b70 	.word	0x20001b70
 80043f4:	20001b74 	.word	0x20001b74
 80043f8:	20001b78 	.word	0x20001b78

080043fc <ETH_udp_Transmit>:
 * @param *pData -> pointer on data to send
 * @param Size -> Size od data
 *
 */
void ETH_udp_Transmit(uint8_t *pData, uint16_t Size)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b086      	sub	sp, #24
 8004400:	af02      	add	r7, sp, #8
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	807b      	strh	r3, [r7, #2]
	//uint16_t sentsize;

    //while(!(sentsize >= Size))
    //{

    	ret = sendto(UDP_SOCKET, pData, Size, endpoint_ip, endpoint_port);
 8004408:	4b07      	ldr	r3, [pc, #28]	; (8004428 <ETH_udp_Transmit+0x2c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	b29b      	uxth	r3, r3
 800440e:	887a      	ldrh	r2, [r7, #2]
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	4b06      	ldr	r3, [pc, #24]	; (800442c <ETH_udp_Transmit+0x30>)
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	2003      	movs	r0, #3
 8004418:	f004 fff4 	bl	8009404 <sendto>
 800441c:	60f8      	str	r0, [r7, #12]

    	//sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
    //}


}
 800441e:	bf00      	nop
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	20001b78 	.word	0x20001b78
 800442c:	20001b74 	.word	0x20001b74

08004430 <ETH_udp_Receive>:


void ETH_udp_Receive()
{
 8004430:	b580      	push	{r7, lr}
 8004432:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8004436:	b086      	sub	sp, #24
 8004438:	af02      	add	r7, sp, #8
	int32_t  ret;
	uint8_t buf[DATA_BUF_SIZE];
	uint16_t size;
	uint16_t destport;

	size = getSn_RX_RSR(UDP_SOCKET);
 800443a:	2003      	movs	r0, #3
 800443c:	f004 fd13 	bl	8008e66 <getSn_RX_RSR>
 8004440:	4603      	mov	r3, r0
 8004442:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004446:	f102 020e 	add.w	r2, r2, #14
 800444a:	8013      	strh	r3, [r2, #0]

    if(size > 0)
 800444c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004450:	f103 030e 	add.w	r3, r3, #14
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d042      	beq.n	80044e0 <ETH_udp_Receive+0xb0>
    {

    	if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 800445a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800445e:	f103 030e 	add.w	r3, r3, #14
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004468:	d906      	bls.n	8004478 <ETH_udp_Receive+0x48>
 800446a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800446e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004472:	f102 020e 	add.w	r2, r2, #14
 8004476:	8013      	strh	r3, [r2, #0]

    	ret = recvfrom(UDP_SOCKET, buf, size, last_message_ip, (uint16_t*)&destport);
 8004478:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800447c:	f103 030e 	add.w	r3, r3, #14
 8004480:	881a      	ldrh	r2, [r3, #0]
 8004482:	f107 0110 	add.w	r1, r7, #16
 8004486:	3908      	subs	r1, #8
 8004488:	f107 0310 	add.w	r3, r7, #16
 800448c:	3b0a      	subs	r3, #10
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	4b16      	ldr	r3, [pc, #88]	; (80044ec <ETH_udp_Receive+0xbc>)
 8004492:	2003      	movs	r0, #3
 8004494:	f005 f8ec 	bl	8009670 <recvfrom>
 8004498:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800449c:	f103 0308 	add.w	r3, r3, #8
 80044a0:	6018      	str	r0, [r3, #0]


    	if(ret <= 0)
 80044a2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80044a6:	f103 0308 	add.w	r3, r3, #8
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	dd16      	ble.n	80044de <ETH_udp_Receive+0xae>
    	{
    		return;
    	}

    	size = (uint16_t) ret;
 80044b0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80044b4:	f103 0308 	add.w	r3, r3, #8
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80044be:	f102 020e 	add.w	r2, r2, #14
 80044c2:	8013      	strh	r3, [r2, #0]


    	ETH_WriteBuffer(buf, size);
 80044c4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80044c8:	f103 030e 	add.w	r3, r3, #14
 80044cc:	881a      	ldrh	r2, [r3, #0]
 80044ce:	f107 0310 	add.w	r3, r7, #16
 80044d2:	3b08      	subs	r3, #8
 80044d4:	4611      	mov	r1, r2
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fd fed4 	bl	8002284 <ETH_WriteBuffer>
 80044dc:	e000      	b.n	80044e0 <ETH_udp_Receive+0xb0>
    		return;
 80044de:	bf00      	nop

    }


}
 80044e0:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20001b70 	.word	0x20001b70

080044f0 <Uart_BufferNotEmpty>:
 *
 * @return true -> FIFO is not empty
 * @return false -> FIFO is empty
 */
bool Uart_BufferNotEmpty()
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
	return (uart_bcounter > 0);
 80044f4:	4b05      	ldr	r3, [pc, #20]	; (800450c <Uart_BufferNotEmpty+0x1c>)
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	bf14      	ite	ne
 80044fc:	2301      	movne	r3, #1
 80044fe:	2300      	moveq	r3, #0
 8004500:	b2db      	uxtb	r3, r3
}
 8004502:	4618      	mov	r0, r3
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	20002b80 	.word	0x20002b80

08004510 <Uart_WriteBuffer>:

/* @brief function add data byte to FIFO
 *
 */
void Uart_WriteBuffer(uint8_t data)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	71fb      	strb	r3, [r7, #7]
	if(uart_bcounter >= (uart_buffer_size-1)) return;
 800451a:	4b13      	ldr	r3, [pc, #76]	; (8004568 <Uart_WriteBuffer+0x58>)
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004522:	4293      	cmp	r3, r2
 8004524:	d81a      	bhi.n	800455c <Uart_WriteBuffer+0x4c>

	uart_buffer[uart_wpointer] = data;
 8004526:	4b11      	ldr	r3, [pc, #68]	; (800456c <Uart_WriteBuffer+0x5c>)
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	4619      	mov	r1, r3
 800452c:	4a10      	ldr	r2, [pc, #64]	; (8004570 <Uart_WriteBuffer+0x60>)
 800452e:	79fb      	ldrb	r3, [r7, #7]
 8004530:	5453      	strb	r3, [r2, r1]
	uart_bcounter++;
 8004532:	4b0d      	ldr	r3, [pc, #52]	; (8004568 <Uart_WriteBuffer+0x58>)
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	3301      	adds	r3, #1
 8004538:	b29a      	uxth	r2, r3
 800453a:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <Uart_WriteBuffer+0x58>)
 800453c:	801a      	strh	r2, [r3, #0]
	uart_wpointer++;
 800453e:	4b0b      	ldr	r3, [pc, #44]	; (800456c <Uart_WriteBuffer+0x5c>)
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	3301      	adds	r3, #1
 8004544:	b29a      	uxth	r2, r3
 8004546:	4b09      	ldr	r3, [pc, #36]	; (800456c <Uart_WriteBuffer+0x5c>)
 8004548:	801a      	strh	r2, [r3, #0]
	if(uart_wpointer > uart_buffer_size - 1) uart_wpointer = 0;
 800454a:	4b08      	ldr	r3, [pc, #32]	; (800456c <Uart_WriteBuffer+0x5c>)
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004552:	d304      	bcc.n	800455e <Uart_WriteBuffer+0x4e>
 8004554:	4b05      	ldr	r3, [pc, #20]	; (800456c <Uart_WriteBuffer+0x5c>)
 8004556:	2200      	movs	r2, #0
 8004558:	801a      	strh	r2, [r3, #0]
 800455a:	e000      	b.n	800455e <Uart_WriteBuffer+0x4e>
	if(uart_bcounter >= (uart_buffer_size-1)) return;
 800455c:	bf00      	nop

}
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	20002b80 	.word	0x20002b80
 800456c:	20002b7c 	.word	0x20002b7c
 8004570:	20001b7c 	.word	0x20001b7c

08004574 <Uart_ReadBuffer>:
/* @brief read data byte from FIFO
 *
 * @return one element uint8_t data 
 */
uint8_t Uart_ReadBuffer()
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
	uint8_t data = uart_buffer[uart_rpointer];
 800457a:	4b10      	ldr	r3, [pc, #64]	; (80045bc <Uart_ReadBuffer+0x48>)
 800457c:	881b      	ldrh	r3, [r3, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	4b0f      	ldr	r3, [pc, #60]	; (80045c0 <Uart_ReadBuffer+0x4c>)
 8004582:	5c9b      	ldrb	r3, [r3, r2]
 8004584:	71fb      	strb	r3, [r7, #7]
	uart_bcounter--;
 8004586:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <Uart_ReadBuffer+0x50>)
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	3b01      	subs	r3, #1
 800458c:	b29a      	uxth	r2, r3
 800458e:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <Uart_ReadBuffer+0x50>)
 8004590:	801a      	strh	r2, [r3, #0]
	uart_rpointer++;
 8004592:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <Uart_ReadBuffer+0x48>)
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	3301      	adds	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	4b08      	ldr	r3, [pc, #32]	; (80045bc <Uart_ReadBuffer+0x48>)
 800459c:	801a      	strh	r2, [r3, #0]
	if(uart_rpointer > uart_buffer_size - 1) uart_rpointer = 0;
 800459e:	4b07      	ldr	r3, [pc, #28]	; (80045bc <Uart_ReadBuffer+0x48>)
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a6:	d302      	bcc.n	80045ae <Uart_ReadBuffer+0x3a>
 80045a8:	4b04      	ldr	r3, [pc, #16]	; (80045bc <Uart_ReadBuffer+0x48>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	801a      	strh	r2, [r3, #0]

	return data;
 80045ae:	79fb      	ldrb	r3, [r7, #7]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	20002b7e 	.word	0x20002b7e
 80045c0:	20001b7c 	.word	0x20001b7c
 80045c4:	20002b80 	.word	0x20002b80

080045c8 <Uart_Send>:
 * @param data -> pointer on data buffer with message
 * @param size -> lenght of data buffer
 *
 */
void Uart_Send(char *data, uint16_t size)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	807b      	strh	r3, [r7, #2]

	HAL_UART_Transmit(&huart2, (uint8_t *)data, size,100);
 80045d4:	887a      	ldrh	r2, [r7, #2]
 80045d6:	2364      	movs	r3, #100	; 0x64
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	4803      	ldr	r0, [pc, #12]	; (80045e8 <Uart_Send+0x20>)
 80045dc:	f003 ff29 	bl	8008432 <HAL_UART_Transmit>
}
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	20002de0 	.word	0x20002de0

080045ec <ledsUpadateLEDState>:

#include "stm_leds.h"


void ledsUpadateLEDState(LED_struct * actual_led, uint32_t sysTime)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]

	switch (actual_led->mode)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	7a5b      	ldrb	r3, [r3, #9]
 80045fa:	2b06      	cmp	r3, #6
 80045fc:	f200 8103 	bhi.w	8004806 <ledsUpadateLEDState+0x21a>
 8004600:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <ledsUpadateLEDState+0x1c>)
 8004602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004606:	bf00      	nop
 8004608:	08004625 	.word	0x08004625
 800460c:	0800464b 	.word	0x0800464b
 8004610:	08004671 	.word	0x08004671
 8004614:	080046ab 	.word	0x080046ab
 8004618:	080046d7 	.word	0x080046d7
 800461c:	08004705 	.word	0x08004705
 8004620:	08004785 	.word	0x08004785
	{

		case LEDS_OFF:
			if(actual_led->polarity)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	7a1b      	ldrb	r3, [r3, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d006      	beq.n	800463a <ledsUpadateLEDState+0x4e>
			{
				*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	3318      	adds	r3, #24
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	6852      	ldr	r2, [r2, #4]
 8004636:	601a      	str	r2, [r3, #0]
			}
			else
			{
				*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
			}
			break;
 8004638:	e0ee      	b.n	8004818 <ledsUpadateLEDState+0x22c>
				*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3318      	adds	r3, #24
 8004644:	0412      	lsls	r2, r2, #16
 8004646:	601a      	str	r2, [r3, #0]
			break;
 8004648:	e0e6      	b.n	8004818 <ledsUpadateLEDState+0x22c>

		case LEDS_ON:
			if(actual_led->polarity)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	7a1b      	ldrb	r3, [r3, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d007      	beq.n	8004662 <ledsUpadateLEDState+0x76>
			{
				*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	3318      	adds	r3, #24
 800465c:	0412      	lsls	r2, r2, #16
 800465e:	601a      	str	r2, [r3, #0]
			}
			else
			{
				*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
			}
			break;
 8004660:	e0da      	b.n	8004818 <ledsUpadateLEDState+0x22c>
				*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	3318      	adds	r3, #24
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6852      	ldr	r2, [r2, #4]
 800466c:	601a      	str	r2, [r3, #0]
			break;
 800466e:	e0d3      	b.n	8004818 <ledsUpadateLEDState+0x22c>

		case LEDS_DELAYED_OFF:
			if(actual_led->polarity)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	7a1b      	ldrb	r3, [r3, #8]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d007      	beq.n	8004688 <ledsUpadateLEDState+0x9c>
			{
				*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685a      	ldr	r2, [r3, #4]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	3318      	adds	r3, #24
 8004682:	0412      	lsls	r2, r2, #16
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e005      	b.n	8004694 <ledsUpadateLEDState+0xa8>
			}
			else
			{
				*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3318      	adds	r3, #24
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	6852      	ldr	r2, [r2, #4]
 8004692:	601a      	str	r2, [r3, #0]
			}

			if((sysTime - actual_led->led_time) > DELAYED_OFF_DELAY)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b14      	cmp	r3, #20
 800469e:	f240 80b4 	bls.w	800480a <ledsUpadateLEDState+0x21e>
			{
				actual_led->mode = LEDS_OFF;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	725a      	strb	r2, [r3, #9]
			}
			break;
 80046a8:	e0af      	b.n	800480a <ledsUpadateLEDState+0x21e>

		case LEDS_FAST_FLASH:
			if((sysTime - actual_led->led_time) > FAST_FLASH_DELAY)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b64      	cmp	r3, #100	; 0x64
 80046b4:	f240 80ab 	bls.w	800480e <ledsUpadateLEDState+0x222>
			{
				*(actual_led->port_address+5) ^= actual_led->channel_mask; // GPIOx_ODR
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	3314      	adds	r3, #20
 80046be:	6819      	ldr	r1, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3314      	adds	r3, #20
 80046ca:	404a      	eors	r2, r1
 80046cc:	601a      	str	r2, [r3, #0]
				actual_led->led_time = sysTime;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	60da      	str	r2, [r3, #12]
			}
			break;
 80046d4:	e09b      	b.n	800480e <ledsUpadateLEDState+0x222>

		case LEDS_SLOW_FLASH:
			if((sysTime - actual_led->led_time) > SLOW_FLASH_DELAY)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80046e2:	f240 8096 	bls.w	8004812 <ledsUpadateLEDState+0x226>
			{
				*(actual_led->port_address+5) ^= actual_led->channel_mask; // GPIOx_ODR
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3314      	adds	r3, #20
 80046ec:	6819      	ldr	r1, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3314      	adds	r3, #20
 80046f8:	404a      	eors	r2, r1
 80046fa:	601a      	str	r2, [r3, #0]
				actual_led->led_time = sysTime;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	60da      	str	r2, [r3, #12]
			}
			break;
 8004702:	e086      	b.n	8004812 <ledsUpadateLEDState+0x226>

		case LEDS_FAST_BLINK:
			if((sysTime - actual_led->led_time) > BLINK_DELAY)//timer
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b64      	cmp	r3, #100	; 0x64
 800470e:	d939      	bls.n	8004784 <ledsUpadateLEDState+0x198>
			{
				actual_led->led_time = sysTime;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	60da      	str	r2, [r3, #12]


				if(actual_led-> blink_state > FAST_BLINK_RATIO) actual_led-> blink_state = 0;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	7c1b      	ldrb	r3, [r3, #16]
 800471a:	2b05      	cmp	r3, #5
 800471c:	d903      	bls.n	8004726 <ledsUpadateLEDState+0x13a>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	741a      	strb	r2, [r3, #16]
 8004724:	e005      	b.n	8004732 <ledsUpadateLEDState+0x146>
				else actual_led-> blink_state++;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	7c1b      	ldrb	r3, [r3, #16]
 800472a:	3301      	adds	r3, #1
 800472c:	b2da      	uxtb	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	741a      	strb	r2, [r3, #16]

				if((actual_led-> blink_state == 0)) //led on
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	7c1b      	ldrb	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d112      	bne.n	8004760 <ledsUpadateLEDState+0x174>
				{

					if(actual_led->polarity)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	7a1b      	ldrb	r3, [r3, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d007      	beq.n	8004752 <ledsUpadateLEDState+0x166>
					{
						*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3318      	adds	r3, #24
 800474c:	0412      	lsls	r2, r2, #16
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	e018      	b.n	8004784 <ledsUpadateLEDState+0x198>
					}
					else
					{
						*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3318      	adds	r3, #24
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6852      	ldr	r2, [r2, #4]
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	e011      	b.n	8004784 <ledsUpadateLEDState+0x198>
					}
				}
				else //led off
				{

					if(actual_led->polarity)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	7a1b      	ldrb	r3, [r3, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d006      	beq.n	8004776 <ledsUpadateLEDState+0x18a>
					{
						*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3318      	adds	r3, #24
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6852      	ldr	r2, [r2, #4]
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	e006      	b.n	8004784 <ledsUpadateLEDState+0x198>
					}
					else
					{
						*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3318      	adds	r3, #24
 8004780:	0412      	lsls	r2, r2, #16
 8004782:	601a      	str	r2, [r3, #0]
					}
				}
			}

		case LEDS_SLOW_BLINK:
					if((sysTime - actual_led->led_time) > BLINK_DELAY)//timer
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b64      	cmp	r3, #100	; 0x64
 800478e:	d942      	bls.n	8004816 <ledsUpadateLEDState+0x22a>
					{
						actual_led->led_time = sysTime;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	60da      	str	r2, [r3, #12]


						if(actual_led-> blink_state > SLOW_BLINK_RATIO) actual_led-> blink_state = 0;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	7c1b      	ldrb	r3, [r3, #16]
 800479a:	2b19      	cmp	r3, #25
 800479c:	d903      	bls.n	80047a6 <ledsUpadateLEDState+0x1ba>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	741a      	strb	r2, [r3, #16]
 80047a4:	e005      	b.n	80047b2 <ledsUpadateLEDState+0x1c6>
						else actual_led-> blink_state++;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	7c1b      	ldrb	r3, [r3, #16]
 80047aa:	3301      	adds	r3, #1
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	741a      	strb	r2, [r3, #16]

						if((actual_led-> blink_state == 0)) //led on
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	7c1b      	ldrb	r3, [r3, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d112      	bne.n	80047e0 <ledsUpadateLEDState+0x1f4>
						{

							if(actual_led->polarity)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	7a1b      	ldrb	r3, [r3, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d007      	beq.n	80047d2 <ledsUpadateLEDState+0x1e6>
							{
								*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	3318      	adds	r3, #24
 80047cc:	0412      	lsls	r2, r2, #16
 80047ce:	601a      	str	r2, [r3, #0]
							}
						}

					}

			break;
 80047d0:	e021      	b.n	8004816 <ledsUpadateLEDState+0x22a>
								*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3318      	adds	r3, #24
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	6852      	ldr	r2, [r2, #4]
 80047dc:	601a      	str	r2, [r3, #0]
			break;
 80047de:	e01a      	b.n	8004816 <ledsUpadateLEDState+0x22a>
							if(actual_led->polarity)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	7a1b      	ldrb	r3, [r3, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d006      	beq.n	80047f6 <ledsUpadateLEDState+0x20a>
								*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3318      	adds	r3, #24
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	6852      	ldr	r2, [r2, #4]
 80047f2:	601a      	str	r2, [r3, #0]
			break;
 80047f4:	e00f      	b.n	8004816 <ledsUpadateLEDState+0x22a>
								*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3318      	adds	r3, #24
 8004800:	0412      	lsls	r2, r2, #16
 8004802:	601a      	str	r2, [r3, #0]
			break;
 8004804:	e007      	b.n	8004816 <ledsUpadateLEDState+0x22a>

		default:
			break;
 8004806:	bf00      	nop
 8004808:	e006      	b.n	8004818 <ledsUpadateLEDState+0x22c>
			break;
 800480a:	bf00      	nop
 800480c:	e004      	b.n	8004818 <ledsUpadateLEDState+0x22c>
			break;
 800480e:	bf00      	nop
 8004810:	e002      	b.n	8004818 <ledsUpadateLEDState+0x22c>
			break;
 8004812:	bf00      	nop
 8004814:	e000      	b.n	8004818 <ledsUpadateLEDState+0x22c>
			break;
 8004816:	bf00      	nop
	}

	return;
 8004818:	bf00      	nop

}
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800482a:	463b      	mov	r3, r7
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	605a      	str	r2, [r3, #4]
 8004832:	609a      	str	r2, [r3, #8]
 8004834:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004836:	4b21      	ldr	r3, [pc, #132]	; (80048bc <MX_ADC1_Init+0x98>)
 8004838:	4a21      	ldr	r2, [pc, #132]	; (80048c0 <MX_ADC1_Init+0x9c>)
 800483a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800483c:	4b1f      	ldr	r3, [pc, #124]	; (80048bc <MX_ADC1_Init+0x98>)
 800483e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004842:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004844:	4b1d      	ldr	r3, [pc, #116]	; (80048bc <MX_ADC1_Init+0x98>)
 8004846:	2200      	movs	r2, #0
 8004848:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800484a:	4b1c      	ldr	r3, [pc, #112]	; (80048bc <MX_ADC1_Init+0x98>)
 800484c:	2200      	movs	r2, #0
 800484e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004850:	4b1a      	ldr	r3, [pc, #104]	; (80048bc <MX_ADC1_Init+0x98>)
 8004852:	2200      	movs	r2, #0
 8004854:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004856:	4b19      	ldr	r3, [pc, #100]	; (80048bc <MX_ADC1_Init+0x98>)
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800485e:	4b17      	ldr	r3, [pc, #92]	; (80048bc <MX_ADC1_Init+0x98>)
 8004860:	2200      	movs	r2, #0
 8004862:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004864:	4b15      	ldr	r3, [pc, #84]	; (80048bc <MX_ADC1_Init+0x98>)
 8004866:	4a17      	ldr	r2, [pc, #92]	; (80048c4 <MX_ADC1_Init+0xa0>)
 8004868:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800486a:	4b14      	ldr	r3, [pc, #80]	; (80048bc <MX_ADC1_Init+0x98>)
 800486c:	2200      	movs	r2, #0
 800486e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004870:	4b12      	ldr	r3, [pc, #72]	; (80048bc <MX_ADC1_Init+0x98>)
 8004872:	2201      	movs	r2, #1
 8004874:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004876:	4b11      	ldr	r3, [pc, #68]	; (80048bc <MX_ADC1_Init+0x98>)
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800487e:	4b0f      	ldr	r3, [pc, #60]	; (80048bc <MX_ADC1_Init+0x98>)
 8004880:	2201      	movs	r2, #1
 8004882:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004884:	480d      	ldr	r0, [pc, #52]	; (80048bc <MX_ADC1_Init+0x98>)
 8004886:	f000 ff9f 	bl	80057c8 <HAL_ADC_Init>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d001      	beq.n	8004894 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004890:	f000 fb08 	bl	8004ea4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004894:	2300      	movs	r3, #0
 8004896:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004898:	2301      	movs	r3, #1
 800489a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800489c:	2300      	movs	r3, #0
 800489e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80048a0:	463b      	mov	r3, r7
 80048a2:	4619      	mov	r1, r3
 80048a4:	4805      	ldr	r0, [pc, #20]	; (80048bc <MX_ADC1_Init+0x98>)
 80048a6:	f000 ffd3 	bl	8005850 <HAL_ADC_ConfigChannel>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d001      	beq.n	80048b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80048b0:	f000 faf8 	bl	8004ea4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80048b4:	bf00      	nop
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	20002b84 	.word	0x20002b84
 80048c0:	40012000 	.word	0x40012000
 80048c4:	0f000001 	.word	0x0f000001

080048c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	; 0x28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d0:	f107 0314 	add.w	r3, r7, #20
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	605a      	str	r2, [r3, #4]
 80048da:	609a      	str	r2, [r3, #8]
 80048dc:	60da      	str	r2, [r3, #12]
 80048de:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a17      	ldr	r2, [pc, #92]	; (8004944 <HAL_ADC_MspInit+0x7c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d127      	bne.n	800493a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80048ea:	2300      	movs	r3, #0
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	4b16      	ldr	r3, [pc, #88]	; (8004948 <HAL_ADC_MspInit+0x80>)
 80048f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f2:	4a15      	ldr	r2, [pc, #84]	; (8004948 <HAL_ADC_MspInit+0x80>)
 80048f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f8:	6453      	str	r3, [r2, #68]	; 0x44
 80048fa:	4b13      	ldr	r3, [pc, #76]	; (8004948 <HAL_ADC_MspInit+0x80>)
 80048fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	4b0f      	ldr	r3, [pc, #60]	; (8004948 <HAL_ADC_MspInit+0x80>)
 800490c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490e:	4a0e      	ldr	r2, [pc, #56]	; (8004948 <HAL_ADC_MspInit+0x80>)
 8004910:	f043 0301 	orr.w	r3, r3, #1
 8004914:	6313      	str	r3, [r2, #48]	; 0x30
 8004916:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <HAL_ADC_MspInit+0x80>)
 8004918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004922:	2303      	movs	r3, #3
 8004924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004926:	2303      	movs	r3, #3
 8004928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492a:	2300      	movs	r3, #0
 800492c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800492e:	f107 0314 	add.w	r3, r7, #20
 8004932:	4619      	mov	r1, r3
 8004934:	4805      	ldr	r0, [pc, #20]	; (800494c <HAL_ADC_MspInit+0x84>)
 8004936:	f001 fdbf 	bl	80064b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800493a:	bf00      	nop
 800493c:	3728      	adds	r7, #40	; 0x28
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	40012000 	.word	0x40012000
 8004948:	40023800 	.word	0x40023800
 800494c:	40020000 	.word	0x40020000

08004950 <Flash_GetSector>:

/*
 * Function returns Flash Sector by given address
 */
uint32_t Flash_GetSector(uint32_t StartSectorAddress)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]

  uint32_t sector = 0;
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]

  if((StartSectorAddress < 0x08003FFF) && (StartSectorAddress >= 0x08000000))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a2e      	ldr	r2, [pc, #184]	; (8004a18 <Flash_GetSector+0xc8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d806      	bhi.n	8004972 <Flash_GetSector+0x22>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800496a:	d302      	bcc.n	8004972 <Flash_GetSector+0x22>
	{
	  sector = FLASH_SECTOR_0;
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	e04b      	b.n	8004a0a <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x08007FFF) && (StartSectorAddress >= 0x08004000))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a29      	ldr	r2, [pc, #164]	; (8004a1c <Flash_GetSector+0xcc>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d806      	bhi.n	8004988 <Flash_GetSector+0x38>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a28      	ldr	r2, [pc, #160]	; (8004a20 <Flash_GetSector+0xd0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d302      	bcc.n	8004988 <Flash_GetSector+0x38>
	{
	  sector = FLASH_SECTOR_1;
 8004982:	2301      	movs	r3, #1
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	e040      	b.n	8004a0a <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0800BFFF) && (StartSectorAddress >= 0x08008000))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a26      	ldr	r2, [pc, #152]	; (8004a24 <Flash_GetSector+0xd4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d806      	bhi.n	800499e <Flash_GetSector+0x4e>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a25      	ldr	r2, [pc, #148]	; (8004a28 <Flash_GetSector+0xd8>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d302      	bcc.n	800499e <Flash_GetSector+0x4e>
	{
	  sector = FLASH_SECTOR_2;
 8004998:	2302      	movs	r3, #2
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	e035      	b.n	8004a0a <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0800FFFF) && (StartSectorAddress >= 0x0800C000))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a22      	ldr	r2, [pc, #136]	; (8004a2c <Flash_GetSector+0xdc>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d206      	bcs.n	80049b4 <Flash_GetSector+0x64>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a21      	ldr	r2, [pc, #132]	; (8004a30 <Flash_GetSector+0xe0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d302      	bcc.n	80049b4 <Flash_GetSector+0x64>
	{
	  sector = FLASH_SECTOR_3;
 80049ae:	2303      	movs	r3, #3
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	e02a      	b.n	8004a0a <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0801FFFF) && (StartSectorAddress >= 0x08010000))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a1f      	ldr	r2, [pc, #124]	; (8004a34 <Flash_GetSector+0xe4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d206      	bcs.n	80049ca <Flash_GetSector+0x7a>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a1b      	ldr	r2, [pc, #108]	; (8004a2c <Flash_GetSector+0xdc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d902      	bls.n	80049ca <Flash_GetSector+0x7a>
	{
	  sector = FLASH_SECTOR_4;
 80049c4:	2304      	movs	r3, #4
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e01f      	b.n	8004a0a <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0803FFFF) && (StartSectorAddress >= 0x08020000))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a1a      	ldr	r2, [pc, #104]	; (8004a38 <Flash_GetSector+0xe8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d206      	bcs.n	80049e0 <Flash_GetSector+0x90>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a17      	ldr	r2, [pc, #92]	; (8004a34 <Flash_GetSector+0xe4>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d902      	bls.n	80049e0 <Flash_GetSector+0x90>
	{
	  sector = FLASH_SECTOR_5;
 80049da:	2305      	movs	r3, #5
 80049dc:	60fb      	str	r3, [r7, #12]
 80049de:	e014      	b.n	8004a0a <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0805FFFF) && (StartSectorAddress >= 0x08040000))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a16      	ldr	r2, [pc, #88]	; (8004a3c <Flash_GetSector+0xec>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d206      	bcs.n	80049f6 <Flash_GetSector+0xa6>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a13      	ldr	r2, [pc, #76]	; (8004a38 <Flash_GetSector+0xe8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d902      	bls.n	80049f6 <Flash_GetSector+0xa6>
	{
	  sector = FLASH_SECTOR_6;
 80049f0:	2306      	movs	r3, #6
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	e009      	b.n	8004a0a <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0807FFFF) && (StartSectorAddress >= 0x08060000))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a11      	ldr	r2, [pc, #68]	; (8004a40 <Flash_GetSector+0xf0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d205      	bcs.n	8004a0a <Flash_GetSector+0xba>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a0e      	ldr	r2, [pc, #56]	; (8004a3c <Flash_GetSector+0xec>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d901      	bls.n	8004a0a <Flash_GetSector+0xba>
	{
	  sector = FLASH_SECTOR_7;
 8004a06:	2307      	movs	r3, #7
 8004a08:	60fb      	str	r3, [r7, #12]
	}

  return sector;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	08003ffe 	.word	0x08003ffe
 8004a1c:	08007ffe 	.word	0x08007ffe
 8004a20:	08004000 	.word	0x08004000
 8004a24:	0800bffe 	.word	0x0800bffe
 8004a28:	08008000 	.word	0x08008000
 8004a2c:	0800ffff 	.word	0x0800ffff
 8004a30:	0800c000 	.word	0x0800c000
 8004a34:	0801ffff 	.word	0x0801ffff
 8004a38:	0803ffff 	.word	0x0803ffff
 8004a3c:	0805ffff 	.word	0x0805ffff
 8004a40:	0807ffff 	.word	0x0807ffff

08004a44 <Flash_WriteData>:
 * Function writes given number of uint32_t words to given flash address
 * Function unlocks flash, erases needed sector(s), flash given memmory and locks Flash
 * Function returns 0 if there was no error
 */
uint32_t Flash_WriteData (uint32_t StartSectorAddress, uint32_t *Data, uint16_t NumOfWords)
{
 8004a44:	b5b0      	push	{r4, r5, r7, lr}
 8004a46:	b08a      	sub	sp, #40	; 0x28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	80fb      	strh	r3, [r7, #6]
  static FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t loc_Error;

  /* Unlock the Flash to enable the flash control register access */
  HAL_FLASH_Unlock();
 8004a52:	f001 fa91 	bl	8005f78 <HAL_FLASH_Unlock>


  /* Get the number of sector to erase from 1st sector */

  uint32_t StartSector = Flash_GetSector(StartSectorAddress);
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f7ff ff7a 	bl	8004950 <Flash_GetSector>
 8004a5c:	6238      	str	r0, [r7, #32]
  uint32_t EndSectorAddress = StartSectorAddress + NumOfWords*4;
 8004a5e:	88fb      	ldrh	r3, [r7, #6]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	461a      	mov	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4413      	add	r3, r2
 8004a68:	61fb      	str	r3, [r7, #28]
  uint32_t EndSector = Flash_GetSector(EndSectorAddress);
 8004a6a:	69f8      	ldr	r0, [r7, #28]
 8004a6c:	f7ff ff70 	bl	8004950 <Flash_GetSector>
 8004a70:	61b8      	str	r0, [r7, #24]

  /* Fill EraseInit structure*/
  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8004a72:	4b23      	ldr	r3, [pc, #140]	; (8004b00 <Flash_WriteData+0xbc>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]
  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8004a78:	4b21      	ldr	r3, [pc, #132]	; (8004b00 <Flash_WriteData+0xbc>)
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	611a      	str	r2, [r3, #16]
  EraseInitStruct.Sector        = StartSector;
 8004a7e:	4a20      	ldr	r2, [pc, #128]	; (8004b00 <Flash_WriteData+0xbc>)
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	6093      	str	r3, [r2, #8]
  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	4a1c      	ldr	r2, [pc, #112]	; (8004b00 <Flash_WriteData+0xbc>)
 8004a8e:	60d3      	str	r3, [r2, #12]

  /* Erase the user Flash area with given setting */
  /* Note!: Erase is done on whole sector/page */
  if (HAL_FLASHEx_Erase(&EraseInitStruct, &loc_Error) != HAL_OK)
 8004a90:	f107 0314 	add.w	r3, r7, #20
 8004a94:	4619      	mov	r1, r3
 8004a96:	481a      	ldr	r0, [pc, #104]	; (8004b00 <Flash_WriteData+0xbc>)
 8004a98:	f001 fbec 	bl	8006274 <HAL_FLASHEx_Erase>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <Flash_WriteData+0x66>
  {
	  return HAL_FLASH_GetError ();
 8004aa2:	f001 fa9b 	bl	8005fdc <HAL_FLASH_GetError>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	e025      	b.n	8004af6 <Flash_WriteData+0xb2>
  }

  /* Program the user Flash area word by word*/

  for (uint16_t i = 0;  i < NumOfWords; i++) 
 8004aaa:	2300      	movs	r3, #0
 8004aac:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004aae:	e01b      	b.n	8004ae8 <Flash_WriteData+0xa4>
  {


	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[i]) == HAL_OK)
 8004ab0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2200      	movs	r2, #0
 8004abc:	461c      	mov	r4, r3
 8004abe:	4615      	mov	r5, r2
 8004ac0:	4622      	mov	r2, r4
 8004ac2:	462b      	mov	r3, r5
 8004ac4:	68f9      	ldr	r1, [r7, #12]
 8004ac6:	2002      	movs	r0, #2
 8004ac8:	f001 fa02 	bl	8005ed0 <HAL_FLASH_Program>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d103      	bne.n	8004ada <Flash_WriteData+0x96>
    {
        //Shift address by 4 (Word Size)
    	StartSectorAddress += 4;  // StartPageAddress += 2 for half word and 8 for double word
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	e003      	b.n	8004ae2 <Flash_WriteData+0x9e>
    	//i++;
    }
    else
    {
      /* Error occurred while writing data in Flash memory*/
      return HAL_FLASH_GetError ();
 8004ada:	f001 fa7f 	bl	8005fdc <HAL_FLASH_GetError>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	e009      	b.n	8004af6 <Flash_WriteData+0xb2>
  for (uint16_t i = 0;  i < NumOfWords; i++) 
 8004ae2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ae8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004aea:	88fb      	ldrh	r3, [r7, #6]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d3df      	bcc.n	8004ab0 <Flash_WriteData+0x6c>
    }
  }

  /* Lock the Flash to disable the flash control register access */
  HAL_FLASH_Lock();
 8004af0:	f001 fa64 	bl	8005fbc <HAL_FLASH_Lock>

  return 0;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3728      	adds	r7, #40	; 0x28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bdb0      	pop	{r4, r5, r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20002bcc 	.word	0x20002bcc

08004b04 <Flash_ReadParamStruct>:
/*
 * Read Data from fixed address in sector 7 given by BASE_PARAM_ADR
 * Data are read to FlashSectorParams struct
 */
void Flash_ReadParamStruct(FlashSectorParams* s_data)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUMBER_OF_PARAMS; i++)
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	e00f      	b.n	8004b32 <Flash_ReadParamStruct+0x2e>
	{
		*((uint32_t*)(s_data)+i)=*((uint32_t*)(BASE_PARAM_ADR+4*i));
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004b18:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4619      	mov	r1, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	4413      	add	r3, r2
 8004b28:	680a      	ldr	r2, [r1, #0]
 8004b2a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUMBER_OF_PARAMS; i++)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2b1c      	cmp	r3, #28
 8004b36:	d9ec      	bls.n	8004b12 <Flash_ReadParamStruct+0xe>
	}
}
 8004b38:	bf00      	nop
 8004b3a:	bf00      	nop
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
	...

08004b48 <Flash_WriteParamStruct>:
 * Write Data to fixed address in sector 7 given by BASE_PARAM_ADR
 * Write data have FlashSectorParams struct format.. number of parametrs are given by NUMBER_OF_PARAMS define
 * Function returns 0 if there was no error
 */
uint32_t Flash_WriteParamStruct(FlashSectorParams ParamsData)
{
 8004b48:	b084      	sub	sp, #16
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b082      	sub	sp, #8
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	f107 0c10 	add.w	ip, r7, #16
 8004b54:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 uint32_t loc_Error;

	 loc_Error = Flash_WriteData(BASE_PARAM_ADR,(uint32_t*)&ParamsData,NUMBER_OF_PARAMS);
 8004b58:	221d      	movs	r2, #29
 8004b5a:	f107 0110 	add.w	r1, r7, #16
 8004b5e:	4806      	ldr	r0, [pc, #24]	; (8004b78 <Flash_WriteParamStruct+0x30>)
 8004b60:	f7ff ff70 	bl	8004a44 <Flash_WriteData>
 8004b64:	6078      	str	r0, [r7, #4]

	 return loc_Error;
 8004b66:	687b      	ldr	r3, [r7, #4]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3708      	adds	r7, #8
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b72:	b004      	add	sp, #16
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	08060000 	.word	0x08060000

08004b7c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b088      	sub	sp, #32
 8004b80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b82:	f107 030c 	add.w	r3, r7, #12
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	605a      	str	r2, [r3, #4]
 8004b8c:	609a      	str	r2, [r3, #8]
 8004b8e:	60da      	str	r2, [r3, #12]
 8004b90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b92:	2300      	movs	r3, #0
 8004b94:	60bb      	str	r3, [r7, #8]
 8004b96:	4b42      	ldr	r3, [pc, #264]	; (8004ca0 <MX_GPIO_Init+0x124>)
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	4a41      	ldr	r2, [pc, #260]	; (8004ca0 <MX_GPIO_Init+0x124>)
 8004b9c:	f043 0304 	orr.w	r3, r3, #4
 8004ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ba2:	4b3f      	ldr	r3, [pc, #252]	; (8004ca0 <MX_GPIO_Init+0x124>)
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	60bb      	str	r3, [r7, #8]
 8004bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bae:	2300      	movs	r3, #0
 8004bb0:	607b      	str	r3, [r7, #4]
 8004bb2:	4b3b      	ldr	r3, [pc, #236]	; (8004ca0 <MX_GPIO_Init+0x124>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	4a3a      	ldr	r2, [pc, #232]	; (8004ca0 <MX_GPIO_Init+0x124>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8004bbe:	4b38      	ldr	r3, [pc, #224]	; (8004ca0 <MX_GPIO_Init+0x124>)
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	607b      	str	r3, [r7, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bca:	2300      	movs	r3, #0
 8004bcc:	603b      	str	r3, [r7, #0]
 8004bce:	4b34      	ldr	r3, [pc, #208]	; (8004ca0 <MX_GPIO_Init+0x124>)
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	4a33      	ldr	r2, [pc, #204]	; (8004ca0 <MX_GPIO_Init+0x124>)
 8004bd4:	f043 0302 	orr.w	r3, r3, #2
 8004bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8004bda:	4b31      	ldr	r3, [pc, #196]	; (8004ca0 <MX_GPIO_Init+0x124>)
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	603b      	str	r3, [r7, #0]
 8004be4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SWREV_3_Pin|SWREV_2_Pin|SWREV_1_Pin|SWDIR_3_Pin
 8004be6:	2200      	movs	r2, #0
 8004be8:	f24e 210f 	movw	r1, #57871	; 0xe20f
 8004bec:	482d      	ldr	r0, [pc, #180]	; (8004ca4 <MX_GPIO_Init+0x128>)
 8004bee:	f001 fdff 	bl	80067f0 <HAL_GPIO_WritePin>
                          |SWDIR_2_Pin|SWDIR_1_Pin|EN_1_Pin|LED_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|LED_1_Pin|EXT_0_Pin|EXT_1_Pin
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f648 3110 	movw	r1, #35600	; 0x8b10
 8004bf8:	482b      	ldr	r0, [pc, #172]	; (8004ca8 <MX_GPIO_Init+0x12c>)
 8004bfa:	f001 fdf9 	bl	80067f0 <HAL_GPIO_WritePin>
                          |SPI3_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN_Pin|SPI2_CS_Pin|W55_RST_Pin|W55_INT_Pin
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f241 7138 	movw	r1, #5944	; 0x1738
 8004c04:	4829      	ldr	r0, [pc, #164]	; (8004cac <MX_GPIO_Init+0x130>)
 8004c06:	f001 fdf3 	bl	80067f0 <HAL_GPIO_WritePin>
                          |LED_2_Pin|EN_3_Pin|EN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SWREV_3_Pin|SWREV_2_Pin|SWREV_1_Pin|SWDIR_3_Pin
 8004c0a:	f24e 230f 	movw	r3, #57871	; 0xe20f
 8004c0e:	60fb      	str	r3, [r7, #12]
                          |SWDIR_2_Pin|SWDIR_1_Pin|EN_1_Pin|LED_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c10:	2301      	movs	r3, #1
 8004c12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c1c:	f107 030c 	add.w	r3, r7, #12
 8004c20:	4619      	mov	r1, r3
 8004c22:	4820      	ldr	r0, [pc, #128]	; (8004ca4 <MX_GPIO_Init+0x128>)
 8004c24:	f001 fc48 	bl	80064b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LED_1_Pin|EXT_0_Pin|EXT_1_Pin
 8004c28:	f648 3310 	movw	r3, #35600	; 0x8b10
 8004c2c:	60fb      	str	r3, [r7, #12]
                          |SPI3_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c36:	2300      	movs	r3, #0
 8004c38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c3a:	f107 030c 	add.w	r3, r7, #12
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4819      	ldr	r0, [pc, #100]	; (8004ca8 <MX_GPIO_Init+0x12c>)
 8004c42:	f001 fc39 	bl	80064b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = PG_1_Pin|PG_2_Pin|OC_1_Pin|OC_2_Pin
 8004c46:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8004c4a:	60fb      	str	r3, [r7, #12]
                          |OC_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c54:	f107 030c 	add.w	r3, r7, #12
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4812      	ldr	r0, [pc, #72]	; (8004ca4 <MX_GPIO_Init+0x128>)
 8004c5c:	f001 fc2c 	bl	80064b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PG_3_Pin;
 8004c60:	2304      	movs	r3, #4
 8004c62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c64:	2300      	movs	r3, #0
 8004c66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PG_3_GPIO_Port, &GPIO_InitStruct);
 8004c6c:	f107 030c 	add.w	r3, r7, #12
 8004c70:	4619      	mov	r1, r3
 8004c72:	480e      	ldr	r0, [pc, #56]	; (8004cac <MX_GPIO_Init+0x130>)
 8004c74:	f001 fc20 	bl	80064b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PWR_EN_Pin|SPI2_CS_Pin|W55_RST_Pin|W55_INT_Pin
 8004c78:	f241 7338 	movw	r3, #5944	; 0x1738
 8004c7c:	60fb      	str	r3, [r7, #12]
                          |LED_2_Pin|EN_3_Pin|EN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c82:	2300      	movs	r3, #0
 8004c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c86:	2300      	movs	r3, #0
 8004c88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c8a:	f107 030c 	add.w	r3, r7, #12
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4806      	ldr	r0, [pc, #24]	; (8004cac <MX_GPIO_Init+0x130>)
 8004c92:	f001 fc11 	bl	80064b8 <HAL_GPIO_Init>

}
 8004c96:	bf00      	nop
 8004c98:	3720      	adds	r7, #32
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40023800 	.word	0x40023800
 8004ca4:	40020800 	.word	0x40020800
 8004ca8:	40020000 	.word	0x40020000
 8004cac:	40020400 	.word	0x40020400

08004cb0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004cb4:	4b12      	ldr	r3, [pc, #72]	; (8004d00 <MX_I2C1_Init+0x50>)
 8004cb6:	4a13      	ldr	r2, [pc, #76]	; (8004d04 <MX_I2C1_Init+0x54>)
 8004cb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004cba:	4b11      	ldr	r3, [pc, #68]	; (8004d00 <MX_I2C1_Init+0x50>)
 8004cbc:	4a12      	ldr	r2, [pc, #72]	; (8004d08 <MX_I2C1_Init+0x58>)
 8004cbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004cc0:	4b0f      	ldr	r3, [pc, #60]	; (8004d00 <MX_I2C1_Init+0x50>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004cc6:	4b0e      	ldr	r3, [pc, #56]	; (8004d00 <MX_I2C1_Init+0x50>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <MX_I2C1_Init+0x50>)
 8004cce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004cd2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004cd4:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <MX_I2C1_Init+0x50>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004cda:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <MX_I2C1_Init+0x50>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004ce0:	4b07      	ldr	r3, [pc, #28]	; (8004d00 <MX_I2C1_Init+0x50>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004ce6:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <MX_I2C1_Init+0x50>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004cec:	4804      	ldr	r0, [pc, #16]	; (8004d00 <MX_I2C1_Init+0x50>)
 8004cee:	f001 fd99 	bl	8006824 <HAL_I2C_Init>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004cf8:	f000 f8d4 	bl	8004ea4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004cfc:	bf00      	nop
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	20002be0 	.word	0x20002be0
 8004d04:	40005400 	.word	0x40005400
 8004d08:	000186a0 	.word	0x000186a0

08004d0c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08a      	sub	sp, #40	; 0x28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d14:	f107 0314 	add.w	r3, r7, #20
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	605a      	str	r2, [r3, #4]
 8004d1e:	609a      	str	r2, [r3, #8]
 8004d20:	60da      	str	r2, [r3, #12]
 8004d22:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a19      	ldr	r2, [pc, #100]	; (8004d90 <HAL_I2C_MspInit+0x84>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d12b      	bne.n	8004d86 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d2e:	2300      	movs	r3, #0
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	4b18      	ldr	r3, [pc, #96]	; (8004d94 <HAL_I2C_MspInit+0x88>)
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	4a17      	ldr	r2, [pc, #92]	; (8004d94 <HAL_I2C_MspInit+0x88>)
 8004d38:	f043 0302 	orr.w	r3, r3, #2
 8004d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d3e:	4b15      	ldr	r3, [pc, #84]	; (8004d94 <HAL_I2C_MspInit+0x88>)
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	613b      	str	r3, [r7, #16]
 8004d48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004d4a:	23c0      	movs	r3, #192	; 0xc0
 8004d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d4e:	2312      	movs	r3, #18
 8004d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d56:	2303      	movs	r3, #3
 8004d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004d5a:	2304      	movs	r3, #4
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d5e:	f107 0314 	add.w	r3, r7, #20
 8004d62:	4619      	mov	r1, r3
 8004d64:	480c      	ldr	r0, [pc, #48]	; (8004d98 <HAL_I2C_MspInit+0x8c>)
 8004d66:	f001 fba7 	bl	80064b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	4b09      	ldr	r3, [pc, #36]	; (8004d94 <HAL_I2C_MspInit+0x88>)
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	4a08      	ldr	r2, [pc, #32]	; (8004d94 <HAL_I2C_MspInit+0x88>)
 8004d74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d78:	6413      	str	r3, [r2, #64]	; 0x40
 8004d7a:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <HAL_I2C_MspInit+0x88>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004d86:	bf00      	nop
 8004d88:	3728      	adds	r7, #40	; 0x28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	40005400 	.word	0x40005400
 8004d94:	40023800 	.word	0x40023800
 8004d98:	40020400 	.word	0x40020400

08004d9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004da0:	f000 fca0 	bl	80056e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004da4:	f000 f816 	bl	8004dd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004da8:	f7ff fee8 	bl	8004b7c <MX_GPIO_Init>
  MX_ADC1_Init();
 8004dac:	f7ff fd3a 	bl	8004824 <MX_ADC1_Init>
  MX_I2C1_Init();
 8004db0:	f7ff ff7e 	bl	8004cb0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004db4:	f000 f87c 	bl	8004eb0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8004db8:	f000 f8b2 	bl	8004f20 <MX_SPI2_Init>
  MX_SPI3_Init();
 8004dbc:	f000 f8e8 	bl	8004f90 <MX_SPI3_Init>
  MX_SPI5_Init();
 8004dc0:	f000 f91c 	bl	8004ffc <MX_SPI5_Init>
  MX_USART2_UART_Init();
 8004dc4:	f000 fbea 	bl	800559c <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8004dc8:	f000 fb9c 	bl	8005504 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  application_main();
 8004dcc:	f7fc f91c 	bl	8001008 <application_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004dd0:	e7fe      	b.n	8004dd0 <main+0x34>
	...

08004dd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b094      	sub	sp, #80	; 0x50
 8004dd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004dda:	f107 0320 	add.w	r3, r7, #32
 8004dde:	2230      	movs	r2, #48	; 0x30
 8004de0:	2100      	movs	r1, #0
 8004de2:	4618      	mov	r0, r3
 8004de4:	f005 f878 	bl	8009ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004de8:	f107 030c 	add.w	r3, r7, #12
 8004dec:	2200      	movs	r2, #0
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	605a      	str	r2, [r3, #4]
 8004df2:	609a      	str	r2, [r3, #8]
 8004df4:	60da      	str	r2, [r3, #12]
 8004df6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004df8:	2300      	movs	r3, #0
 8004dfa:	60bb      	str	r3, [r7, #8]
 8004dfc:	4b27      	ldr	r3, [pc, #156]	; (8004e9c <SystemClock_Config+0xc8>)
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e00:	4a26      	ldr	r2, [pc, #152]	; (8004e9c <SystemClock_Config+0xc8>)
 8004e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e06:	6413      	str	r3, [r2, #64]	; 0x40
 8004e08:	4b24      	ldr	r3, [pc, #144]	; (8004e9c <SystemClock_Config+0xc8>)
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e14:	2300      	movs	r3, #0
 8004e16:	607b      	str	r3, [r7, #4]
 8004e18:	4b21      	ldr	r3, [pc, #132]	; (8004ea0 <SystemClock_Config+0xcc>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a20      	ldr	r2, [pc, #128]	; (8004ea0 <SystemClock_Config+0xcc>)
 8004e1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	4b1e      	ldr	r3, [pc, #120]	; (8004ea0 <SystemClock_Config+0xcc>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004e2c:	607b      	str	r3, [r7, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004e30:	2302      	movs	r3, #2
 8004e32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004e34:	2301      	movs	r3, #1
 8004e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004e38:	2310      	movs	r3, #16
 8004e3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004e40:	2300      	movs	r3, #0
 8004e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004e44:	2308      	movs	r3, #8
 8004e46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004e48:	2364      	movs	r3, #100	; 0x64
 8004e4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004e50:	2304      	movs	r3, #4
 8004e52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004e54:	f107 0320 	add.w	r3, r7, #32
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f001 fe27 	bl	8006aac <HAL_RCC_OscConfig>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004e64:	f000 f81e 	bl	8004ea4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004e68:	230f      	movs	r3, #15
 8004e6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004e70:	2300      	movs	r3, #0
 8004e72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004e7e:	f107 030c 	add.w	r3, r7, #12
 8004e82:	2103      	movs	r1, #3
 8004e84:	4618      	mov	r0, r3
 8004e86:	f002 f889 	bl	8006f9c <HAL_RCC_ClockConfig>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004e90:	f000 f808 	bl	8004ea4 <Error_Handler>
  }
}
 8004e94:	bf00      	nop
 8004e96:	3750      	adds	r7, #80	; 0x50
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	40007000 	.word	0x40007000

08004ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004ea8:	b672      	cpsid	i
}
 8004eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004eac:	e7fe      	b.n	8004eac <Error_Handler+0x8>
	...

08004eb0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi5;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004eb4:	4b18      	ldr	r3, [pc, #96]	; (8004f18 <MX_SPI1_Init+0x68>)
 8004eb6:	4a19      	ldr	r2, [pc, #100]	; (8004f1c <MX_SPI1_Init+0x6c>)
 8004eb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004eba:	4b17      	ldr	r3, [pc, #92]	; (8004f18 <MX_SPI1_Init+0x68>)
 8004ebc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004ec0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8004ec2:	4b15      	ldr	r3, [pc, #84]	; (8004f18 <MX_SPI1_Init+0x68>)
 8004ec4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004ec8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004eca:	4b13      	ldr	r3, [pc, #76]	; (8004f18 <MX_SPI1_Init+0x68>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ed0:	4b11      	ldr	r3, [pc, #68]	; (8004f18 <MX_SPI1_Init+0x68>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004ed6:	4b10      	ldr	r3, [pc, #64]	; (8004f18 <MX_SPI1_Init+0x68>)
 8004ed8:	2201      	movs	r2, #1
 8004eda:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004edc:	4b0e      	ldr	r3, [pc, #56]	; (8004f18 <MX_SPI1_Init+0x68>)
 8004ede:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ee2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004ee4:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <MX_SPI1_Init+0x68>)
 8004ee6:	2238      	movs	r2, #56	; 0x38
 8004ee8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004eea:	4b0b      	ldr	r3, [pc, #44]	; (8004f18 <MX_SPI1_Init+0x68>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ef0:	4b09      	ldr	r3, [pc, #36]	; (8004f18 <MX_SPI1_Init+0x68>)
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ef6:	4b08      	ldr	r3, [pc, #32]	; (8004f18 <MX_SPI1_Init+0x68>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <MX_SPI1_Init+0x68>)
 8004efe:	220a      	movs	r2, #10
 8004f00:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004f02:	4805      	ldr	r0, [pc, #20]	; (8004f18 <MX_SPI1_Init+0x68>)
 8004f04:	f002 fa2a 	bl	800735c <HAL_SPI_Init>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8004f0e:	f7ff ffc9 	bl	8004ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004f12:	bf00      	nop
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20002c34 	.word	0x20002c34
 8004f1c:	40013000 	.word	0x40013000

08004f20 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004f24:	4b18      	ldr	r3, [pc, #96]	; (8004f88 <MX_SPI2_Init+0x68>)
 8004f26:	4a19      	ldr	r2, [pc, #100]	; (8004f8c <MX_SPI2_Init+0x6c>)
 8004f28:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004f2a:	4b17      	ldr	r3, [pc, #92]	; (8004f88 <MX_SPI2_Init+0x68>)
 8004f2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004f30:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004f32:	4b15      	ldr	r3, [pc, #84]	; (8004f88 <MX_SPI2_Init+0x68>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8004f38:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <MX_SPI2_Init+0x68>)
 8004f3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f3e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f40:	4b11      	ldr	r3, [pc, #68]	; (8004f88 <MX_SPI2_Init+0x68>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f46:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <MX_SPI2_Init+0x68>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004f4c:	4b0e      	ldr	r3, [pc, #56]	; (8004f88 <MX_SPI2_Init+0x68>)
 8004f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f52:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004f54:	4b0c      	ldr	r3, [pc, #48]	; (8004f88 <MX_SPI2_Init+0x68>)
 8004f56:	2210      	movs	r2, #16
 8004f58:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f5a:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <MX_SPI2_Init+0x68>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f60:	4b09      	ldr	r3, [pc, #36]	; (8004f88 <MX_SPI2_Init+0x68>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f66:	4b08      	ldr	r3, [pc, #32]	; (8004f88 <MX_SPI2_Init+0x68>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004f6c:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <MX_SPI2_Init+0x68>)
 8004f6e:	220a      	movs	r2, #10
 8004f70:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004f72:	4805      	ldr	r0, [pc, #20]	; (8004f88 <MX_SPI2_Init+0x68>)
 8004f74:	f002 f9f2 	bl	800735c <HAL_SPI_Init>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8004f7e:	f7ff ff91 	bl	8004ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004f82:	bf00      	nop
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20002c8c 	.word	0x20002c8c
 8004f8c:	40003800 	.word	0x40003800

08004f90 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004f94:	4b17      	ldr	r3, [pc, #92]	; (8004ff4 <MX_SPI3_Init+0x64>)
 8004f96:	4a18      	ldr	r2, [pc, #96]	; (8004ff8 <MX_SPI3_Init+0x68>)
 8004f98:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004f9a:	4b16      	ldr	r3, [pc, #88]	; (8004ff4 <MX_SPI3_Init+0x64>)
 8004f9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004fa0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004fa2:	4b14      	ldr	r3, [pc, #80]	; (8004ff4 <MX_SPI3_Init+0x64>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004fa8:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <MX_SPI3_Init+0x64>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fae:	4b11      	ldr	r3, [pc, #68]	; (8004ff4 <MX_SPI3_Init+0x64>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004fb4:	4b0f      	ldr	r3, [pc, #60]	; (8004ff4 <MX_SPI3_Init+0x64>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004fba:	4b0e      	ldr	r3, [pc, #56]	; (8004ff4 <MX_SPI3_Init+0x64>)
 8004fbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fc0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004fc2:	4b0c      	ldr	r3, [pc, #48]	; (8004ff4 <MX_SPI3_Init+0x64>)
 8004fc4:	2218      	movs	r2, #24
 8004fc6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004fc8:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <MX_SPI3_Init+0x64>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004fce:	4b09      	ldr	r3, [pc, #36]	; (8004ff4 <MX_SPI3_Init+0x64>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fd4:	4b07      	ldr	r3, [pc, #28]	; (8004ff4 <MX_SPI3_Init+0x64>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8004fda:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <MX_SPI3_Init+0x64>)
 8004fdc:	220a      	movs	r2, #10
 8004fde:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004fe0:	4804      	ldr	r0, [pc, #16]	; (8004ff4 <MX_SPI3_Init+0x64>)
 8004fe2:	f002 f9bb 	bl	800735c <HAL_SPI_Init>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d001      	beq.n	8004ff0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8004fec:	f7ff ff5a 	bl	8004ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004ff0:	bf00      	nop
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	20002ce4 	.word	0x20002ce4
 8004ff8:	40003c00 	.word	0x40003c00

08004ffc <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8005000:	4b17      	ldr	r3, [pc, #92]	; (8005060 <MX_SPI5_Init+0x64>)
 8005002:	4a18      	ldr	r2, [pc, #96]	; (8005064 <MX_SPI5_Init+0x68>)
 8005004:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8005006:	4b16      	ldr	r3, [pc, #88]	; (8005060 <MX_SPI5_Init+0x64>)
 8005008:	f44f 7282 	mov.w	r2, #260	; 0x104
 800500c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800500e:	4b14      	ldr	r3, [pc, #80]	; (8005060 <MX_SPI5_Init+0x64>)
 8005010:	2200      	movs	r2, #0
 8005012:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8005014:	4b12      	ldr	r3, [pc, #72]	; (8005060 <MX_SPI5_Init+0x64>)
 8005016:	2200      	movs	r2, #0
 8005018:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800501a:	4b11      	ldr	r3, [pc, #68]	; (8005060 <MX_SPI5_Init+0x64>)
 800501c:	2200      	movs	r2, #0
 800501e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005020:	4b0f      	ldr	r3, [pc, #60]	; (8005060 <MX_SPI5_Init+0x64>)
 8005022:	2200      	movs	r2, #0
 8005024:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8005026:	4b0e      	ldr	r3, [pc, #56]	; (8005060 <MX_SPI5_Init+0x64>)
 8005028:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800502c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800502e:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <MX_SPI5_Init+0x64>)
 8005030:	2200      	movs	r2, #0
 8005032:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005034:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <MX_SPI5_Init+0x64>)
 8005036:	2200      	movs	r2, #0
 8005038:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800503a:	4b09      	ldr	r3, [pc, #36]	; (8005060 <MX_SPI5_Init+0x64>)
 800503c:	2200      	movs	r2, #0
 800503e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005040:	4b07      	ldr	r3, [pc, #28]	; (8005060 <MX_SPI5_Init+0x64>)
 8005042:	2200      	movs	r2, #0
 8005044:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8005046:	4b06      	ldr	r3, [pc, #24]	; (8005060 <MX_SPI5_Init+0x64>)
 8005048:	220a      	movs	r2, #10
 800504a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800504c:	4804      	ldr	r0, [pc, #16]	; (8005060 <MX_SPI5_Init+0x64>)
 800504e:	f002 f985 	bl	800735c <HAL_SPI_Init>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8005058:	f7ff ff24 	bl	8004ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800505c:	bf00      	nop
 800505e:	bd80      	pop	{r7, pc}
 8005060:	20002d3c 	.word	0x20002d3c
 8005064:	40015000 	.word	0x40015000

08005068 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b090      	sub	sp, #64	; 0x40
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	605a      	str	r2, [r3, #4]
 800507a:	609a      	str	r2, [r3, #8]
 800507c:	60da      	str	r2, [r3, #12]
 800507e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a74      	ldr	r2, [pc, #464]	; (8005258 <HAL_SPI_MspInit+0x1f0>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d12c      	bne.n	80050e4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800508a:	2300      	movs	r3, #0
 800508c:	62bb      	str	r3, [r7, #40]	; 0x28
 800508e:	4b73      	ldr	r3, [pc, #460]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 8005090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005092:	4a72      	ldr	r2, [pc, #456]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 8005094:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005098:	6453      	str	r3, [r2, #68]	; 0x44
 800509a:	4b70      	ldr	r3, [pc, #448]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 800509c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800509e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050a6:	2300      	movs	r3, #0
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
 80050aa:	4b6c      	ldr	r3, [pc, #432]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 80050ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ae:	4a6b      	ldr	r2, [pc, #428]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 80050b0:	f043 0301 	orr.w	r3, r3, #1
 80050b4:	6313      	str	r3, [r2, #48]	; 0x30
 80050b6:	4b69      	ldr	r3, [pc, #420]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 80050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	627b      	str	r3, [r7, #36]	; 0x24
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80050c2:	23a0      	movs	r3, #160	; 0xa0
 80050c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050c6:	2302      	movs	r3, #2
 80050c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050ce:	2303      	movs	r3, #3
 80050d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80050d2:	2305      	movs	r3, #5
 80050d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80050da:	4619      	mov	r1, r3
 80050dc:	4860      	ldr	r0, [pc, #384]	; (8005260 <HAL_SPI_MspInit+0x1f8>)
 80050de:	f001 f9eb 	bl	80064b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80050e2:	e0b5      	b.n	8005250 <HAL_SPI_MspInit+0x1e8>
  else if(spiHandle->Instance==SPI2)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a5e      	ldr	r2, [pc, #376]	; (8005264 <HAL_SPI_MspInit+0x1fc>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d12d      	bne.n	800514a <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80050ee:	2300      	movs	r3, #0
 80050f0:	623b      	str	r3, [r7, #32]
 80050f2:	4b5a      	ldr	r3, [pc, #360]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	4a59      	ldr	r2, [pc, #356]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 80050f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050fc:	6413      	str	r3, [r2, #64]	; 0x40
 80050fe:	4b57      	ldr	r3, [pc, #348]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005106:	623b      	str	r3, [r7, #32]
 8005108:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
 800510e:	4b53      	ldr	r3, [pc, #332]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	4a52      	ldr	r2, [pc, #328]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 8005114:	f043 0302 	orr.w	r3, r3, #2
 8005118:	6313      	str	r3, [r2, #48]	; 0x30
 800511a:	4b50      	ldr	r3, [pc, #320]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	61fb      	str	r3, [r7, #28]
 8005124:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005126:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800512a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800512c:	2302      	movs	r3, #2
 800512e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005130:	2300      	movs	r3, #0
 8005132:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005134:	2303      	movs	r3, #3
 8005136:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005138:	2305      	movs	r3, #5
 800513a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800513c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005140:	4619      	mov	r1, r3
 8005142:	4849      	ldr	r0, [pc, #292]	; (8005268 <HAL_SPI_MspInit+0x200>)
 8005144:	f001 f9b8 	bl	80064b8 <HAL_GPIO_Init>
}
 8005148:	e082      	b.n	8005250 <HAL_SPI_MspInit+0x1e8>
  else if(spiHandle->Instance==SPI3)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a47      	ldr	r2, [pc, #284]	; (800526c <HAL_SPI_MspInit+0x204>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d12d      	bne.n	80051b0 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005154:	2300      	movs	r3, #0
 8005156:	61bb      	str	r3, [r7, #24]
 8005158:	4b40      	ldr	r3, [pc, #256]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	4a3f      	ldr	r2, [pc, #252]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 800515e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005162:	6413      	str	r3, [r2, #64]	; 0x40
 8005164:	4b3d      	ldr	r3, [pc, #244]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 8005166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800516c:	61bb      	str	r3, [r7, #24]
 800516e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005170:	2300      	movs	r3, #0
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	4b39      	ldr	r3, [pc, #228]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 8005176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005178:	4a38      	ldr	r2, [pc, #224]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 800517a:	f043 0304 	orr.w	r3, r3, #4
 800517e:	6313      	str	r3, [r2, #48]	; 0x30
 8005180:	4b36      	ldr	r3, [pc, #216]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 8005182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800518c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005190:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005192:	2302      	movs	r3, #2
 8005194:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005196:	2300      	movs	r3, #0
 8005198:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800519a:	2303      	movs	r3, #3
 800519c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800519e:	2306      	movs	r3, #6
 80051a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80051a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051a6:	4619      	mov	r1, r3
 80051a8:	4831      	ldr	r0, [pc, #196]	; (8005270 <HAL_SPI_MspInit+0x208>)
 80051aa:	f001 f985 	bl	80064b8 <HAL_GPIO_Init>
}
 80051ae:	e04f      	b.n	8005250 <HAL_SPI_MspInit+0x1e8>
  else if(spiHandle->Instance==SPI5)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a2f      	ldr	r2, [pc, #188]	; (8005274 <HAL_SPI_MspInit+0x20c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d14a      	bne.n	8005250 <HAL_SPI_MspInit+0x1e8>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80051ba:	2300      	movs	r3, #0
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	4b27      	ldr	r3, [pc, #156]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 80051c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c2:	4a26      	ldr	r2, [pc, #152]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 80051c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051c8:	6453      	str	r3, [r2, #68]	; 0x44
 80051ca:	4b24      	ldr	r3, [pc, #144]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 80051cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	4b20      	ldr	r3, [pc, #128]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 80051dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051de:	4a1f      	ldr	r2, [pc, #124]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 80051e0:	f043 0302 	orr.w	r3, r3, #2
 80051e4:	6313      	str	r3, [r2, #48]	; 0x30
 80051e6:	4b1d      	ldr	r3, [pc, #116]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051f2:	2300      	movs	r3, #0
 80051f4:	60bb      	str	r3, [r7, #8]
 80051f6:	4b19      	ldr	r3, [pc, #100]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 80051f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fa:	4a18      	ldr	r2, [pc, #96]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 80051fc:	f043 0301 	orr.w	r3, r3, #1
 8005200:	6313      	str	r3, [r2, #48]	; 0x30
 8005202:	4b16      	ldr	r3, [pc, #88]	; (800525c <HAL_SPI_MspInit+0x1f4>)
 8005204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	60bb      	str	r3, [r7, #8]
 800520c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800520e:	2303      	movs	r3, #3
 8005210:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005212:	2302      	movs	r3, #2
 8005214:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005216:	2300      	movs	r3, #0
 8005218:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800521a:	2303      	movs	r3, #3
 800521c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800521e:	2306      	movs	r3, #6
 8005220:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005226:	4619      	mov	r1, r3
 8005228:	480f      	ldr	r0, [pc, #60]	; (8005268 <HAL_SPI_MspInit+0x200>)
 800522a:	f001 f945 	bl	80064b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800522e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005232:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005234:	2302      	movs	r3, #2
 8005236:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005238:	2300      	movs	r3, #0
 800523a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800523c:	2303      	movs	r3, #3
 800523e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8005240:	2306      	movs	r3, #6
 8005242:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005244:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005248:	4619      	mov	r1, r3
 800524a:	4805      	ldr	r0, [pc, #20]	; (8005260 <HAL_SPI_MspInit+0x1f8>)
 800524c:	f001 f934 	bl	80064b8 <HAL_GPIO_Init>
}
 8005250:	bf00      	nop
 8005252:	3740      	adds	r7, #64	; 0x40
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	40013000 	.word	0x40013000
 800525c:	40023800 	.word	0x40023800
 8005260:	40020000 	.word	0x40020000
 8005264:	40003800 	.word	0x40003800
 8005268:	40020400 	.word	0x40020400
 800526c:	40003c00 	.word	0x40003c00
 8005270:	40020800 	.word	0x40020800
 8005274:	40015000 	.word	0x40015000

08005278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800527e:	2300      	movs	r3, #0
 8005280:	607b      	str	r3, [r7, #4]
 8005282:	4b10      	ldr	r3, [pc, #64]	; (80052c4 <HAL_MspInit+0x4c>)
 8005284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005286:	4a0f      	ldr	r2, [pc, #60]	; (80052c4 <HAL_MspInit+0x4c>)
 8005288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800528c:	6453      	str	r3, [r2, #68]	; 0x44
 800528e:	4b0d      	ldr	r3, [pc, #52]	; (80052c4 <HAL_MspInit+0x4c>)
 8005290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005296:	607b      	str	r3, [r7, #4]
 8005298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800529a:	2300      	movs	r3, #0
 800529c:	603b      	str	r3, [r7, #0]
 800529e:	4b09      	ldr	r3, [pc, #36]	; (80052c4 <HAL_MspInit+0x4c>)
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	4a08      	ldr	r2, [pc, #32]	; (80052c4 <HAL_MspInit+0x4c>)
 80052a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a8:	6413      	str	r3, [r2, #64]	; 0x40
 80052aa:	4b06      	ldr	r3, [pc, #24]	; (80052c4 <HAL_MspInit+0x4c>)
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b2:	603b      	str	r3, [r7, #0]
 80052b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80052b6:	bf00      	nop
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	40023800 	.word	0x40023800

080052c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80052cc:	e7fe      	b.n	80052cc <NMI_Handler+0x4>

080052ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052ce:	b480      	push	{r7}
 80052d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052d2:	e7fe      	b.n	80052d2 <HardFault_Handler+0x4>

080052d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052d8:	e7fe      	b.n	80052d8 <MemManage_Handler+0x4>

080052da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052da:	b480      	push	{r7}
 80052dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052de:	e7fe      	b.n	80052de <BusFault_Handler+0x4>

080052e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052e4:	e7fe      	b.n	80052e4 <UsageFault_Handler+0x4>

080052e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80052e6:	b480      	push	{r7}
 80052e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80052ea:	bf00      	nop
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80052f8:	bf00      	nop
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005302:	b480      	push	{r7}
 8005304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005306:	bf00      	nop
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005314:	f000 fa38 	bl	8005788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005318:	bf00      	nop
 800531a:	bd80      	pop	{r7, pc}

0800531c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8005320:	4802      	ldr	r0, [pc, #8]	; (800532c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005322:	f002 fe75 	bl	8008010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005326:	bf00      	nop
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	20002d98 	.word	0x20002d98

08005330 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	USART2->SR &= ~USART_SR_RXNE_Msk;
 8005334:	4b06      	ldr	r3, [pc, #24]	; (8005350 <USART2_IRQHandler+0x20>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a05      	ldr	r2, [pc, #20]	; (8005350 <USART2_IRQHandler+0x20>)
 800533a:	f023 0320 	bic.w	r3, r3, #32
 800533e:	6013      	str	r3, [r2, #0]
	Uart_WriteBuffer(USART2->DR);
 8005340:	4b03      	ldr	r3, [pc, #12]	; (8005350 <USART2_IRQHandler+0x20>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff f8e2 	bl	8004510 <Uart_WriteBuffer>

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800534c:	bf00      	nop
 800534e:	bd80      	pop	{r7, pc}
 8005350:	40004400 	.word	0x40004400

08005354 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  return 1;
 8005358:	2301      	movs	r3, #1
}
 800535a:	4618      	mov	r0, r3
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <_kill>:

int _kill(int pid, int sig)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800536e:	f004 fd73 	bl	8009e58 <__errno>
 8005372:	4603      	mov	r3, r0
 8005374:	2216      	movs	r2, #22
 8005376:	601a      	str	r2, [r3, #0]
  return -1;
 8005378:	f04f 33ff 	mov.w	r3, #4294967295
}
 800537c:	4618      	mov	r0, r3
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <_exit>:

void _exit (int status)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800538c:	f04f 31ff 	mov.w	r1, #4294967295
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff ffe7 	bl	8005364 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005396:	e7fe      	b.n	8005396 <_exit+0x12>

08005398 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053a4:	2300      	movs	r3, #0
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	e00a      	b.n	80053c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80053aa:	f3af 8000 	nop.w
 80053ae:	4601      	mov	r1, r0
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	60ba      	str	r2, [r7, #8]
 80053b6:	b2ca      	uxtb	r2, r1
 80053b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	3301      	adds	r3, #1
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	dbf0      	blt.n	80053aa <_read+0x12>
  }

  return len;
 80053c8:	687b      	ldr	r3, [r7, #4]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3718      	adds	r7, #24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b086      	sub	sp, #24
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053de:	2300      	movs	r3, #0
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	e009      	b.n	80053f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	1c5a      	adds	r2, r3, #1
 80053e8:	60ba      	str	r2, [r7, #8]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	3301      	adds	r3, #1
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	dbf1      	blt.n	80053e4 <_write+0x12>
  }
  return len;
 8005400:	687b      	ldr	r3, [r7, #4]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <_close>:

int _close(int file)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005412:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005416:	4618      	mov	r0, r3
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005432:	605a      	str	r2, [r3, #4]
  return 0;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <_isatty>:

int _isatty(int file)
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800544a:	2301      	movs	r3, #1
}
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
	...

08005474 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800547c:	4a14      	ldr	r2, [pc, #80]	; (80054d0 <_sbrk+0x5c>)
 800547e:	4b15      	ldr	r3, [pc, #84]	; (80054d4 <_sbrk+0x60>)
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005488:	4b13      	ldr	r3, [pc, #76]	; (80054d8 <_sbrk+0x64>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d102      	bne.n	8005496 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005490:	4b11      	ldr	r3, [pc, #68]	; (80054d8 <_sbrk+0x64>)
 8005492:	4a12      	ldr	r2, [pc, #72]	; (80054dc <_sbrk+0x68>)
 8005494:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005496:	4b10      	ldr	r3, [pc, #64]	; (80054d8 <_sbrk+0x64>)
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4413      	add	r3, r2
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d207      	bcs.n	80054b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80054a4:	f004 fcd8 	bl	8009e58 <__errno>
 80054a8:	4603      	mov	r3, r0
 80054aa:	220c      	movs	r2, #12
 80054ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80054ae:	f04f 33ff 	mov.w	r3, #4294967295
 80054b2:	e009      	b.n	80054c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80054b4:	4b08      	ldr	r3, [pc, #32]	; (80054d8 <_sbrk+0x64>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80054ba:	4b07      	ldr	r3, [pc, #28]	; (80054d8 <_sbrk+0x64>)
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4413      	add	r3, r2
 80054c2:	4a05      	ldr	r2, [pc, #20]	; (80054d8 <_sbrk+0x64>)
 80054c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80054c6:	68fb      	ldr	r3, [r7, #12]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	20020000 	.word	0x20020000
 80054d4:	00000400 	.word	0x00000400
 80054d8:	20002d94 	.word	0x20002d94
 80054dc:	20002e80 	.word	0x20002e80

080054e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80054e4:	4b06      	ldr	r3, [pc, #24]	; (8005500 <SystemInit+0x20>)
 80054e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ea:	4a05      	ldr	r2, [pc, #20]	; (8005500 <SystemInit+0x20>)
 80054ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80054f4:	bf00      	nop
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	e000ed00 	.word	0xe000ed00

08005504 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005508:	4b0e      	ldr	r3, [pc, #56]	; (8005544 <MX_TIM10_Init+0x40>)
 800550a:	4a0f      	ldr	r2, [pc, #60]	; (8005548 <MX_TIM10_Init+0x44>)
 800550c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 800550e:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <MX_TIM10_Init+0x40>)
 8005510:	2263      	movs	r2, #99	; 0x63
 8005512:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005514:	4b0b      	ldr	r3, [pc, #44]	; (8005544 <MX_TIM10_Init+0x40>)
 8005516:	2200      	movs	r2, #0
 8005518:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1999;
 800551a:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <MX_TIM10_Init+0x40>)
 800551c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8005520:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005522:	4b08      	ldr	r3, [pc, #32]	; (8005544 <MX_TIM10_Init+0x40>)
 8005524:	2200      	movs	r2, #0
 8005526:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005528:	4b06      	ldr	r3, [pc, #24]	; (8005544 <MX_TIM10_Init+0x40>)
 800552a:	2200      	movs	r2, #0
 800552c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800552e:	4805      	ldr	r0, [pc, #20]	; (8005544 <MX_TIM10_Init+0x40>)
 8005530:	f002 fcbc 	bl	8007eac <HAL_TIM_Base_Init>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800553a:	f7ff fcb3 	bl	8004ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800553e:	bf00      	nop
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	20002d98 	.word	0x20002d98
 8005548:	40014400 	.word	0x40014400

0800554c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a0e      	ldr	r2, [pc, #56]	; (8005594 <HAL_TIM_Base_MspInit+0x48>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d115      	bne.n	800558a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]
 8005562:	4b0d      	ldr	r3, [pc, #52]	; (8005598 <HAL_TIM_Base_MspInit+0x4c>)
 8005564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005566:	4a0c      	ldr	r2, [pc, #48]	; (8005598 <HAL_TIM_Base_MspInit+0x4c>)
 8005568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800556c:	6453      	str	r3, [r2, #68]	; 0x44
 800556e:	4b0a      	ldr	r3, [pc, #40]	; (8005598 <HAL_TIM_Base_MspInit+0x4c>)
 8005570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800557a:	2200      	movs	r2, #0
 800557c:	2100      	movs	r1, #0
 800557e:	2019      	movs	r0, #25
 8005580:	f000 fc6f 	bl	8005e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005584:	2019      	movs	r0, #25
 8005586:	f000 fc88 	bl	8005e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800558a:	bf00      	nop
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	40014400 	.word	0x40014400
 8005598:	40023800 	.word	0x40023800

0800559c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80055a0:	4b11      	ldr	r3, [pc, #68]	; (80055e8 <MX_USART2_UART_Init+0x4c>)
 80055a2:	4a12      	ldr	r2, [pc, #72]	; (80055ec <MX_USART2_UART_Init+0x50>)
 80055a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80055a6:	4b10      	ldr	r3, [pc, #64]	; (80055e8 <MX_USART2_UART_Init+0x4c>)
 80055a8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80055ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80055ae:	4b0e      	ldr	r3, [pc, #56]	; (80055e8 <MX_USART2_UART_Init+0x4c>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80055b4:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <MX_USART2_UART_Init+0x4c>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80055ba:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <MX_USART2_UART_Init+0x4c>)
 80055bc:	2200      	movs	r2, #0
 80055be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80055c0:	4b09      	ldr	r3, [pc, #36]	; (80055e8 <MX_USART2_UART_Init+0x4c>)
 80055c2:	220c      	movs	r2, #12
 80055c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055c6:	4b08      	ldr	r3, [pc, #32]	; (80055e8 <MX_USART2_UART_Init+0x4c>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80055cc:	4b06      	ldr	r3, [pc, #24]	; (80055e8 <MX_USART2_UART_Init+0x4c>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80055d2:	4805      	ldr	r0, [pc, #20]	; (80055e8 <MX_USART2_UART_Init+0x4c>)
 80055d4:	f002 fee0 	bl	8008398 <HAL_UART_Init>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80055de:	f7ff fc61 	bl	8004ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80055e2:	bf00      	nop
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20002de0 	.word	0x20002de0
 80055ec:	40004400 	.word	0x40004400

080055f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08a      	sub	sp, #40	; 0x28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055f8:	f107 0314 	add.w	r3, r7, #20
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	605a      	str	r2, [r3, #4]
 8005602:	609a      	str	r2, [r3, #8]
 8005604:	60da      	str	r2, [r3, #12]
 8005606:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a1d      	ldr	r2, [pc, #116]	; (8005684 <HAL_UART_MspInit+0x94>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d133      	bne.n	800567a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005612:	2300      	movs	r3, #0
 8005614:	613b      	str	r3, [r7, #16]
 8005616:	4b1c      	ldr	r3, [pc, #112]	; (8005688 <HAL_UART_MspInit+0x98>)
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	4a1b      	ldr	r2, [pc, #108]	; (8005688 <HAL_UART_MspInit+0x98>)
 800561c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005620:	6413      	str	r3, [r2, #64]	; 0x40
 8005622:	4b19      	ldr	r3, [pc, #100]	; (8005688 <HAL_UART_MspInit+0x98>)
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562a:	613b      	str	r3, [r7, #16]
 800562c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800562e:	2300      	movs	r3, #0
 8005630:	60fb      	str	r3, [r7, #12]
 8005632:	4b15      	ldr	r3, [pc, #84]	; (8005688 <HAL_UART_MspInit+0x98>)
 8005634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005636:	4a14      	ldr	r2, [pc, #80]	; (8005688 <HAL_UART_MspInit+0x98>)
 8005638:	f043 0301 	orr.w	r3, r3, #1
 800563c:	6313      	str	r3, [r2, #48]	; 0x30
 800563e:	4b12      	ldr	r3, [pc, #72]	; (8005688 <HAL_UART_MspInit+0x98>)
 8005640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800564a:	230c      	movs	r3, #12
 800564c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800564e:	2302      	movs	r3, #2
 8005650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005652:	2300      	movs	r3, #0
 8005654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005656:	2303      	movs	r3, #3
 8005658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800565a:	2307      	movs	r3, #7
 800565c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800565e:	f107 0314 	add.w	r3, r7, #20
 8005662:	4619      	mov	r1, r3
 8005664:	4809      	ldr	r0, [pc, #36]	; (800568c <HAL_UART_MspInit+0x9c>)
 8005666:	f000 ff27 	bl	80064b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800566a:	2200      	movs	r2, #0
 800566c:	2100      	movs	r1, #0
 800566e:	2026      	movs	r0, #38	; 0x26
 8005670:	f000 fbf7 	bl	8005e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005674:	2026      	movs	r0, #38	; 0x26
 8005676:	f000 fc10 	bl	8005e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800567a:	bf00      	nop
 800567c:	3728      	adds	r7, #40	; 0x28
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	40004400 	.word	0x40004400
 8005688:	40023800 	.word	0x40023800
 800568c:	40020000 	.word	0x40020000

08005690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80056c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005694:	480d      	ldr	r0, [pc, #52]	; (80056cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005696:	490e      	ldr	r1, [pc, #56]	; (80056d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005698:	4a0e      	ldr	r2, [pc, #56]	; (80056d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800569a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800569c:	e002      	b.n	80056a4 <LoopCopyDataInit>

0800569e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800569e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80056a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80056a2:	3304      	adds	r3, #4

080056a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80056a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80056a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80056a8:	d3f9      	bcc.n	800569e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80056aa:	4a0b      	ldr	r2, [pc, #44]	; (80056d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80056ac:	4c0b      	ldr	r4, [pc, #44]	; (80056dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80056ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80056b0:	e001      	b.n	80056b6 <LoopFillZerobss>

080056b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80056b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80056b4:	3204      	adds	r2, #4

080056b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80056b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80056b8:	d3fb      	bcc.n	80056b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80056ba:	f7ff ff11 	bl	80054e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056be:	f004 fbd1 	bl	8009e64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056c2:	f7ff fb6b 	bl	8004d9c <main>
  bx  lr    
 80056c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80056c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80056cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80056d0:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 80056d4:	0800fdd8 	.word	0x0800fdd8
  ldr r2, =_sbss
 80056d8:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 80056dc:	20002e7c 	.word	0x20002e7c

080056e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80056e0:	e7fe      	b.n	80056e0 <ADC_IRQHandler>
	...

080056e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80056e8:	4b0e      	ldr	r3, [pc, #56]	; (8005724 <HAL_Init+0x40>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a0d      	ldr	r2, [pc, #52]	; (8005724 <HAL_Init+0x40>)
 80056ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80056f4:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <HAL_Init+0x40>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a0a      	ldr	r2, [pc, #40]	; (8005724 <HAL_Init+0x40>)
 80056fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005700:	4b08      	ldr	r3, [pc, #32]	; (8005724 <HAL_Init+0x40>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a07      	ldr	r2, [pc, #28]	; (8005724 <HAL_Init+0x40>)
 8005706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800570a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800570c:	2003      	movs	r0, #3
 800570e:	f000 fb9d 	bl	8005e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005712:	200f      	movs	r0, #15
 8005714:	f000 f808 	bl	8005728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005718:	f7ff fdae 	bl	8005278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	40023c00 	.word	0x40023c00

08005728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005730:	4b12      	ldr	r3, [pc, #72]	; (800577c <HAL_InitTick+0x54>)
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	4b12      	ldr	r3, [pc, #72]	; (8005780 <HAL_InitTick+0x58>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	4619      	mov	r1, r3
 800573a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800573e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005742:	fbb2 f3f3 	udiv	r3, r2, r3
 8005746:	4618      	mov	r0, r3
 8005748:	f000 fbb5 	bl	8005eb6 <HAL_SYSTICK_Config>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e00e      	b.n	8005774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b0f      	cmp	r3, #15
 800575a:	d80a      	bhi.n	8005772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800575c:	2200      	movs	r2, #0
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	f04f 30ff 	mov.w	r0, #4294967295
 8005764:	f000 fb7d 	bl	8005e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005768:	4a06      	ldr	r2, [pc, #24]	; (8005784 <HAL_InitTick+0x5c>)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	e000      	b.n	8005774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
}
 8005774:	4618      	mov	r0, r3
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	2000008c 	.word	0x2000008c
 8005780:	20000094 	.word	0x20000094
 8005784:	20000090 	.word	0x20000090

08005788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800578c:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <HAL_IncTick+0x20>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	461a      	mov	r2, r3
 8005792:	4b06      	ldr	r3, [pc, #24]	; (80057ac <HAL_IncTick+0x24>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4413      	add	r3, r2
 8005798:	4a04      	ldr	r2, [pc, #16]	; (80057ac <HAL_IncTick+0x24>)
 800579a:	6013      	str	r3, [r2, #0]
}
 800579c:	bf00      	nop
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	20000094 	.word	0x20000094
 80057ac:	20002e24 	.word	0x20002e24

080057b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80057b0:	b480      	push	{r7}
 80057b2:	af00      	add	r7, sp, #0
  return uwTick;
 80057b4:	4b03      	ldr	r3, [pc, #12]	; (80057c4 <HAL_GetTick+0x14>)
 80057b6:	681b      	ldr	r3, [r3, #0]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	20002e24 	.word	0x20002e24

080057c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057d0:	2300      	movs	r3, #0
 80057d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e033      	b.n	8005846 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d109      	bne.n	80057fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff f86e 	bl	80048c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	f003 0310 	and.w	r3, r3, #16
 8005802:	2b00      	cmp	r3, #0
 8005804:	d118      	bne.n	8005838 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800580e:	f023 0302 	bic.w	r3, r3, #2
 8005812:	f043 0202 	orr.w	r2, r3, #2
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f94a 	bl	8005ab4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	f023 0303 	bic.w	r3, r3, #3
 800582e:	f043 0201 	orr.w	r2, r3, #1
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	641a      	str	r2, [r3, #64]	; 0x40
 8005836:	e001      	b.n	800583c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005844:	7bfb      	ldrb	r3, [r7, #15]
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
	...

08005850 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800585a:	2300      	movs	r3, #0
 800585c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <HAL_ADC_ConfigChannel+0x1c>
 8005868:	2302      	movs	r3, #2
 800586a:	e113      	b.n	8005a94 <HAL_ADC_ConfigChannel+0x244>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2b09      	cmp	r3, #9
 800587a:	d925      	bls.n	80058c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68d9      	ldr	r1, [r3, #12]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	b29b      	uxth	r3, r3
 8005888:	461a      	mov	r2, r3
 800588a:	4613      	mov	r3, r2
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	4413      	add	r3, r2
 8005890:	3b1e      	subs	r3, #30
 8005892:	2207      	movs	r2, #7
 8005894:	fa02 f303 	lsl.w	r3, r2, r3
 8005898:	43da      	mvns	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	400a      	ands	r2, r1
 80058a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68d9      	ldr	r1, [r3, #12]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	4618      	mov	r0, r3
 80058b4:	4603      	mov	r3, r0
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	4403      	add	r3, r0
 80058ba:	3b1e      	subs	r3, #30
 80058bc:	409a      	lsls	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	60da      	str	r2, [r3, #12]
 80058c6:	e022      	b.n	800590e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6919      	ldr	r1, [r3, #16]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	461a      	mov	r2, r3
 80058d6:	4613      	mov	r3, r2
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	4413      	add	r3, r2
 80058dc:	2207      	movs	r2, #7
 80058de:	fa02 f303 	lsl.w	r3, r2, r3
 80058e2:	43da      	mvns	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	400a      	ands	r2, r1
 80058ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6919      	ldr	r1, [r3, #16]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	4618      	mov	r0, r3
 80058fe:	4603      	mov	r3, r0
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	4403      	add	r3, r0
 8005904:	409a      	lsls	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	2b06      	cmp	r3, #6
 8005914:	d824      	bhi.n	8005960 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	4613      	mov	r3, r2
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	3b05      	subs	r3, #5
 8005928:	221f      	movs	r2, #31
 800592a:	fa02 f303 	lsl.w	r3, r2, r3
 800592e:	43da      	mvns	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	400a      	ands	r2, r1
 8005936:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	b29b      	uxth	r3, r3
 8005944:	4618      	mov	r0, r3
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	4613      	mov	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	3b05      	subs	r3, #5
 8005952:	fa00 f203 	lsl.w	r2, r0, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	635a      	str	r2, [r3, #52]	; 0x34
 800595e:	e04c      	b.n	80059fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	2b0c      	cmp	r3, #12
 8005966:	d824      	bhi.n	80059b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	4613      	mov	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	3b23      	subs	r3, #35	; 0x23
 800597a:	221f      	movs	r2, #31
 800597c:	fa02 f303 	lsl.w	r3, r2, r3
 8005980:	43da      	mvns	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	400a      	ands	r2, r1
 8005988:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	b29b      	uxth	r3, r3
 8005996:	4618      	mov	r0, r3
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	3b23      	subs	r3, #35	; 0x23
 80059a4:	fa00 f203 	lsl.w	r2, r0, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	430a      	orrs	r2, r1
 80059ae:	631a      	str	r2, [r3, #48]	; 0x30
 80059b0:	e023      	b.n	80059fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	4613      	mov	r3, r2
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	3b41      	subs	r3, #65	; 0x41
 80059c4:	221f      	movs	r2, #31
 80059c6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ca:	43da      	mvns	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	400a      	ands	r2, r1
 80059d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	b29b      	uxth	r3, r3
 80059e0:	4618      	mov	r0, r3
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	4613      	mov	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	3b41      	subs	r3, #65	; 0x41
 80059ee:	fa00 f203 	lsl.w	r2, r0, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80059fa:	4b29      	ldr	r3, [pc, #164]	; (8005aa0 <HAL_ADC_ConfigChannel+0x250>)
 80059fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a28      	ldr	r2, [pc, #160]	; (8005aa4 <HAL_ADC_ConfigChannel+0x254>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d10f      	bne.n	8005a28 <HAL_ADC_ConfigChannel+0x1d8>
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b12      	cmp	r3, #18
 8005a0e:	d10b      	bne.n	8005a28 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a1d      	ldr	r2, [pc, #116]	; (8005aa4 <HAL_ADC_ConfigChannel+0x254>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d12b      	bne.n	8005a8a <HAL_ADC_ConfigChannel+0x23a>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a1c      	ldr	r2, [pc, #112]	; (8005aa8 <HAL_ADC_ConfigChannel+0x258>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d003      	beq.n	8005a44 <HAL_ADC_ConfigChannel+0x1f4>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b11      	cmp	r3, #17
 8005a42:	d122      	bne.n	8005a8a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a11      	ldr	r2, [pc, #68]	; (8005aa8 <HAL_ADC_ConfigChannel+0x258>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d111      	bne.n	8005a8a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005a66:	4b11      	ldr	r3, [pc, #68]	; (8005aac <HAL_ADC_ConfigChannel+0x25c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a11      	ldr	r2, [pc, #68]	; (8005ab0 <HAL_ADC_ConfigChannel+0x260>)
 8005a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a70:	0c9a      	lsrs	r2, r3, #18
 8005a72:	4613      	mov	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	4413      	add	r3, r2
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005a7c:	e002      	b.n	8005a84 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	3b01      	subs	r3, #1
 8005a82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1f9      	bne.n	8005a7e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	40012300 	.word	0x40012300
 8005aa4:	40012000 	.word	0x40012000
 8005aa8:	10000012 	.word	0x10000012
 8005aac:	2000008c 	.word	0x2000008c
 8005ab0:	431bde83 	.word	0x431bde83

08005ab4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005abc:	4b79      	ldr	r3, [pc, #484]	; (8005ca4 <ADC_Init+0x1f0>)
 8005abe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	431a      	orrs	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ae8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	6859      	ldr	r1, [r3, #4]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	021a      	lsls	r2, r3, #8
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005b0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6859      	ldr	r1, [r3, #4]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	689a      	ldr	r2, [r3, #8]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6899      	ldr	r1, [r3, #8]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68da      	ldr	r2, [r3, #12]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b46:	4a58      	ldr	r2, [pc, #352]	; (8005ca8 <ADC_Init+0x1f4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d022      	beq.n	8005b92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6899      	ldr	r1, [r3, #8]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005b7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6899      	ldr	r1, [r3, #8]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	609a      	str	r2, [r3, #8]
 8005b90:	e00f      	b.n	8005bb2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ba0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005bb0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0202 	bic.w	r2, r2, #2
 8005bc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6899      	ldr	r1, [r3, #8]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	7e1b      	ldrb	r3, [r3, #24]
 8005bcc:	005a      	lsls	r2, r3, #1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d01b      	beq.n	8005c18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005bfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6859      	ldr	r1, [r3, #4]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	035a      	lsls	r2, r3, #13
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	605a      	str	r2, [r3, #4]
 8005c16:	e007      	b.n	8005c28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005c36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	051a      	lsls	r2, r3, #20
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	6899      	ldr	r1, [r3, #8]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c6a:	025a      	lsls	r2, r3, #9
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689a      	ldr	r2, [r3, #8]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6899      	ldr	r1, [r3, #8]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	029a      	lsls	r2, r3, #10
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	609a      	str	r2, [r3, #8]
}
 8005c98:	bf00      	nop
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	40012300 	.word	0x40012300
 8005ca8:	0f000001 	.word	0x0f000001

08005cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cbc:	4b0c      	ldr	r3, [pc, #48]	; (8005cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005cc8:	4013      	ands	r3, r2
 8005cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cde:	4a04      	ldr	r2, [pc, #16]	; (8005cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	60d3      	str	r3, [r2, #12]
}
 8005ce4:	bf00      	nop
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	e000ed00 	.word	0xe000ed00

08005cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cf8:	4b04      	ldr	r3, [pc, #16]	; (8005d0c <__NVIC_GetPriorityGrouping+0x18>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	0a1b      	lsrs	r3, r3, #8
 8005cfe:	f003 0307 	and.w	r3, r3, #7
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	e000ed00 	.word	0xe000ed00

08005d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	4603      	mov	r3, r0
 8005d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	db0b      	blt.n	8005d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d22:	79fb      	ldrb	r3, [r7, #7]
 8005d24:	f003 021f 	and.w	r2, r3, #31
 8005d28:	4907      	ldr	r1, [pc, #28]	; (8005d48 <__NVIC_EnableIRQ+0x38>)
 8005d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	2001      	movs	r0, #1
 8005d32:	fa00 f202 	lsl.w	r2, r0, r2
 8005d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	e000e100 	.word	0xe000e100

08005d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	4603      	mov	r3, r0
 8005d54:	6039      	str	r1, [r7, #0]
 8005d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	db0a      	blt.n	8005d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	490c      	ldr	r1, [pc, #48]	; (8005d98 <__NVIC_SetPriority+0x4c>)
 8005d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d6a:	0112      	lsls	r2, r2, #4
 8005d6c:	b2d2      	uxtb	r2, r2
 8005d6e:	440b      	add	r3, r1
 8005d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d74:	e00a      	b.n	8005d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	4908      	ldr	r1, [pc, #32]	; (8005d9c <__NVIC_SetPriority+0x50>)
 8005d7c:	79fb      	ldrb	r3, [r7, #7]
 8005d7e:	f003 030f 	and.w	r3, r3, #15
 8005d82:	3b04      	subs	r3, #4
 8005d84:	0112      	lsls	r2, r2, #4
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	440b      	add	r3, r1
 8005d8a:	761a      	strb	r2, [r3, #24]
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr
 8005d98:	e000e100 	.word	0xe000e100
 8005d9c:	e000ed00 	.word	0xe000ed00

08005da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b089      	sub	sp, #36	; 0x24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f003 0307 	and.w	r3, r3, #7
 8005db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	f1c3 0307 	rsb	r3, r3, #7
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	bf28      	it	cs
 8005dbe:	2304      	movcs	r3, #4
 8005dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	3304      	adds	r3, #4
 8005dc6:	2b06      	cmp	r3, #6
 8005dc8:	d902      	bls.n	8005dd0 <NVIC_EncodePriority+0x30>
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	3b03      	subs	r3, #3
 8005dce:	e000      	b.n	8005dd2 <NVIC_EncodePriority+0x32>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	fa02 f303 	lsl.w	r3, r2, r3
 8005dde:	43da      	mvns	r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	401a      	ands	r2, r3
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005de8:	f04f 31ff 	mov.w	r1, #4294967295
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	fa01 f303 	lsl.w	r3, r1, r3
 8005df2:	43d9      	mvns	r1, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005df8:	4313      	orrs	r3, r2
         );
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3724      	adds	r7, #36	; 0x24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
	...

08005e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e18:	d301      	bcc.n	8005e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e00f      	b.n	8005e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e1e:	4a0a      	ldr	r2, [pc, #40]	; (8005e48 <SysTick_Config+0x40>)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e26:	210f      	movs	r1, #15
 8005e28:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2c:	f7ff ff8e 	bl	8005d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e30:	4b05      	ldr	r3, [pc, #20]	; (8005e48 <SysTick_Config+0x40>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e36:	4b04      	ldr	r3, [pc, #16]	; (8005e48 <SysTick_Config+0x40>)
 8005e38:	2207      	movs	r2, #7
 8005e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	e000e010 	.word	0xe000e010

08005e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7ff ff29 	bl	8005cac <__NVIC_SetPriorityGrouping>
}
 8005e5a:	bf00      	nop
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b086      	sub	sp, #24
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	4603      	mov	r3, r0
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	607a      	str	r2, [r7, #4]
 8005e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e74:	f7ff ff3e 	bl	8005cf4 <__NVIC_GetPriorityGrouping>
 8005e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	68b9      	ldr	r1, [r7, #8]
 8005e7e:	6978      	ldr	r0, [r7, #20]
 8005e80:	f7ff ff8e 	bl	8005da0 <NVIC_EncodePriority>
 8005e84:	4602      	mov	r2, r0
 8005e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7ff ff5d 	bl	8005d4c <__NVIC_SetPriority>
}
 8005e92:	bf00      	nop
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b082      	sub	sp, #8
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7ff ff31 	bl	8005d10 <__NVIC_EnableIRQ>
}
 8005eae:	bf00      	nop
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7ff ffa2 	bl	8005e08 <SysTick_Config>
 8005ec4:	4603      	mov	r3, r0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005ee2:	4b23      	ldr	r3, [pc, #140]	; (8005f70 <HAL_FLASH_Program+0xa0>)
 8005ee4:	7e1b      	ldrb	r3, [r3, #24]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d101      	bne.n	8005eee <HAL_FLASH_Program+0x1e>
 8005eea:	2302      	movs	r3, #2
 8005eec:	e03b      	b.n	8005f66 <HAL_FLASH_Program+0x96>
 8005eee:	4b20      	ldr	r3, [pc, #128]	; (8005f70 <HAL_FLASH_Program+0xa0>)
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ef4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ef8:	f000 f87c 	bl	8005ff4 <FLASH_WaitForLastOperation>
 8005efc:	4603      	mov	r3, r0
 8005efe:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005f00:	7dfb      	ldrb	r3, [r7, #23]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d12b      	bne.n	8005f5e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d105      	bne.n	8005f18 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005f0c:	783b      	ldrb	r3, [r7, #0]
 8005f0e:	4619      	mov	r1, r3
 8005f10:	68b8      	ldr	r0, [r7, #8]
 8005f12:	f000 f927 	bl	8006164 <FLASH_Program_Byte>
 8005f16:	e016      	b.n	8005f46 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d105      	bne.n	8005f2a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005f1e:	883b      	ldrh	r3, [r7, #0]
 8005f20:	4619      	mov	r1, r3
 8005f22:	68b8      	ldr	r0, [r7, #8]
 8005f24:	f000 f8fa 	bl	800611c <FLASH_Program_HalfWord>
 8005f28:	e00d      	b.n	8005f46 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d105      	bne.n	8005f3c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	4619      	mov	r1, r3
 8005f34:	68b8      	ldr	r0, [r7, #8]
 8005f36:	f000 f8cf 	bl	80060d8 <FLASH_Program_Word>
 8005f3a:	e004      	b.n	8005f46 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005f3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f40:	68b8      	ldr	r0, [r7, #8]
 8005f42:	f000 f897 	bl	8006074 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f46:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005f4a:	f000 f853 	bl	8005ff4 <FLASH_WaitForLastOperation>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005f52:	4b08      	ldr	r3, [pc, #32]	; (8005f74 <HAL_FLASH_Program+0xa4>)
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	4a07      	ldr	r2, [pc, #28]	; (8005f74 <HAL_FLASH_Program+0xa4>)
 8005f58:	f023 0301 	bic.w	r3, r3, #1
 8005f5c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005f5e:	4b04      	ldr	r3, [pc, #16]	; (8005f70 <HAL_FLASH_Program+0xa0>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20002e28 	.word	0x20002e28
 8005f74:	40023c00 	.word	0x40023c00

08005f78 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005f82:	4b0b      	ldr	r3, [pc, #44]	; (8005fb0 <HAL_FLASH_Unlock+0x38>)
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	da0b      	bge.n	8005fa2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005f8a:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <HAL_FLASH_Unlock+0x38>)
 8005f8c:	4a09      	ldr	r2, [pc, #36]	; (8005fb4 <HAL_FLASH_Unlock+0x3c>)
 8005f8e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005f90:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <HAL_FLASH_Unlock+0x38>)
 8005f92:	4a09      	ldr	r2, [pc, #36]	; (8005fb8 <HAL_FLASH_Unlock+0x40>)
 8005f94:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005f96:	4b06      	ldr	r3, [pc, #24]	; (8005fb0 <HAL_FLASH_Unlock+0x38>)
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	da01      	bge.n	8005fa2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005fa2:	79fb      	ldrb	r3, [r7, #7]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	40023c00 	.word	0x40023c00
 8005fb4:	45670123 	.word	0x45670123
 8005fb8:	cdef89ab 	.word	0xcdef89ab

08005fbc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005fc0:	4b05      	ldr	r3, [pc, #20]	; (8005fd8 <HAL_FLASH_Lock+0x1c>)
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	4a04      	ldr	r2, [pc, #16]	; (8005fd8 <HAL_FLASH_Lock+0x1c>)
 8005fc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fca:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr
 8005fd8:	40023c00 	.word	0x40023c00

08005fdc <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8005fe0:	4b03      	ldr	r3, [pc, #12]	; (8005ff0 <HAL_FLASH_GetError+0x14>)
 8005fe2:	69db      	ldr	r3, [r3, #28]
}  
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	20002e28 	.word	0x20002e28

08005ff4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006000:	4b1a      	ldr	r3, [pc, #104]	; (800606c <FLASH_WaitForLastOperation+0x78>)
 8006002:	2200      	movs	r2, #0
 8006004:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8006006:	f7ff fbd3 	bl	80057b0 <HAL_GetTick>
 800600a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800600c:	e010      	b.n	8006030 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006014:	d00c      	beq.n	8006030 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d007      	beq.n	800602c <FLASH_WaitForLastOperation+0x38>
 800601c:	f7ff fbc8 	bl	80057b0 <HAL_GetTick>
 8006020:	4602      	mov	r2, r0
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	429a      	cmp	r2, r3
 800602a:	d201      	bcs.n	8006030 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e019      	b.n	8006064 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006030:	4b0f      	ldr	r3, [pc, #60]	; (8006070 <FLASH_WaitForLastOperation+0x7c>)
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1e8      	bne.n	800600e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800603c:	4b0c      	ldr	r3, [pc, #48]	; (8006070 <FLASH_WaitForLastOperation+0x7c>)
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	d002      	beq.n	800604e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006048:	4b09      	ldr	r3, [pc, #36]	; (8006070 <FLASH_WaitForLastOperation+0x7c>)
 800604a:	2201      	movs	r2, #1
 800604c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800604e:	4b08      	ldr	r3, [pc, #32]	; (8006070 <FLASH_WaitForLastOperation+0x7c>)
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800605a:	f000 f8a5 	bl	80061a8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e000      	b.n	8006064 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006062:	2300      	movs	r3, #0
  
}  
 8006064:	4618      	mov	r0, r3
 8006066:	3710      	adds	r7, #16
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	20002e28 	.word	0x20002e28
 8006070:	40023c00 	.word	0x40023c00

08006074 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	60f8      	str	r0, [r7, #12]
 800607c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006080:	4b14      	ldr	r3, [pc, #80]	; (80060d4 <FLASH_Program_DoubleWord+0x60>)
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	4a13      	ldr	r2, [pc, #76]	; (80060d4 <FLASH_Program_DoubleWord+0x60>)
 8006086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800608a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800608c:	4b11      	ldr	r3, [pc, #68]	; (80060d4 <FLASH_Program_DoubleWord+0x60>)
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	4a10      	ldr	r2, [pc, #64]	; (80060d4 <FLASH_Program_DoubleWord+0x60>)
 8006092:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006096:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006098:	4b0e      	ldr	r3, [pc, #56]	; (80060d4 <FLASH_Program_DoubleWord+0x60>)
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	4a0d      	ldr	r2, [pc, #52]	; (80060d4 <FLASH_Program_DoubleWord+0x60>)
 800609e:	f043 0301 	orr.w	r3, r3, #1
 80060a2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80060aa:	f3bf 8f6f 	isb	sy
}
 80060ae:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80060b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80060b4:	f04f 0200 	mov.w	r2, #0
 80060b8:	f04f 0300 	mov.w	r3, #0
 80060bc:	000a      	movs	r2, r1
 80060be:	2300      	movs	r3, #0
 80060c0:	68f9      	ldr	r1, [r7, #12]
 80060c2:	3104      	adds	r1, #4
 80060c4:	4613      	mov	r3, r2
 80060c6:	600b      	str	r3, [r1, #0]
}
 80060c8:	bf00      	nop
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr
 80060d4:	40023c00 	.word	0x40023c00

080060d8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80060e2:	4b0d      	ldr	r3, [pc, #52]	; (8006118 <FLASH_Program_Word+0x40>)
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	4a0c      	ldr	r2, [pc, #48]	; (8006118 <FLASH_Program_Word+0x40>)
 80060e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80060ee:	4b0a      	ldr	r3, [pc, #40]	; (8006118 <FLASH_Program_Word+0x40>)
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	4a09      	ldr	r2, [pc, #36]	; (8006118 <FLASH_Program_Word+0x40>)
 80060f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80060fa:	4b07      	ldr	r3, [pc, #28]	; (8006118 <FLASH_Program_Word+0x40>)
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	4a06      	ldr	r2, [pc, #24]	; (8006118 <FLASH_Program_Word+0x40>)
 8006100:	f043 0301 	orr.w	r3, r3, #1
 8006104:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	601a      	str	r2, [r3, #0]
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	40023c00 	.word	0x40023c00

0800611c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
 8006124:	460b      	mov	r3, r1
 8006126:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006128:	4b0d      	ldr	r3, [pc, #52]	; (8006160 <FLASH_Program_HalfWord+0x44>)
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	4a0c      	ldr	r2, [pc, #48]	; (8006160 <FLASH_Program_HalfWord+0x44>)
 800612e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006132:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006134:	4b0a      	ldr	r3, [pc, #40]	; (8006160 <FLASH_Program_HalfWord+0x44>)
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	4a09      	ldr	r2, [pc, #36]	; (8006160 <FLASH_Program_HalfWord+0x44>)
 800613a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800613e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006140:	4b07      	ldr	r3, [pc, #28]	; (8006160 <FLASH_Program_HalfWord+0x44>)
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	4a06      	ldr	r2, [pc, #24]	; (8006160 <FLASH_Program_HalfWord+0x44>)
 8006146:	f043 0301 	orr.w	r3, r3, #1
 800614a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	887a      	ldrh	r2, [r7, #2]
 8006150:	801a      	strh	r2, [r3, #0]
}
 8006152:	bf00      	nop
 8006154:	370c      	adds	r7, #12
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	40023c00 	.word	0x40023c00

08006164 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	460b      	mov	r3, r1
 800616e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006170:	4b0c      	ldr	r3, [pc, #48]	; (80061a4 <FLASH_Program_Byte+0x40>)
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	4a0b      	ldr	r2, [pc, #44]	; (80061a4 <FLASH_Program_Byte+0x40>)
 8006176:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800617a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800617c:	4b09      	ldr	r3, [pc, #36]	; (80061a4 <FLASH_Program_Byte+0x40>)
 800617e:	4a09      	ldr	r2, [pc, #36]	; (80061a4 <FLASH_Program_Byte+0x40>)
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006184:	4b07      	ldr	r3, [pc, #28]	; (80061a4 <FLASH_Program_Byte+0x40>)
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	4a06      	ldr	r2, [pc, #24]	; (80061a4 <FLASH_Program_Byte+0x40>)
 800618a:	f043 0301 	orr.w	r3, r3, #1
 800618e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	78fa      	ldrb	r2, [r7, #3]
 8006194:	701a      	strb	r2, [r3, #0]
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	40023c00 	.word	0x40023c00

080061a8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80061a8:	b480      	push	{r7}
 80061aa:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80061ac:	4b2f      	ldr	r3, [pc, #188]	; (800626c <FLASH_SetErrorCode+0xc4>)
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f003 0310 	and.w	r3, r3, #16
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d008      	beq.n	80061ca <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80061b8:	4b2d      	ldr	r3, [pc, #180]	; (8006270 <FLASH_SetErrorCode+0xc8>)
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	f043 0310 	orr.w	r3, r3, #16
 80061c0:	4a2b      	ldr	r2, [pc, #172]	; (8006270 <FLASH_SetErrorCode+0xc8>)
 80061c2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80061c4:	4b29      	ldr	r3, [pc, #164]	; (800626c <FLASH_SetErrorCode+0xc4>)
 80061c6:	2210      	movs	r2, #16
 80061c8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80061ca:	4b28      	ldr	r3, [pc, #160]	; (800626c <FLASH_SetErrorCode+0xc4>)
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d008      	beq.n	80061e8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80061d6:	4b26      	ldr	r3, [pc, #152]	; (8006270 <FLASH_SetErrorCode+0xc8>)
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	f043 0308 	orr.w	r3, r3, #8
 80061de:	4a24      	ldr	r2, [pc, #144]	; (8006270 <FLASH_SetErrorCode+0xc8>)
 80061e0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80061e2:	4b22      	ldr	r3, [pc, #136]	; (800626c <FLASH_SetErrorCode+0xc4>)
 80061e4:	2220      	movs	r2, #32
 80061e6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80061e8:	4b20      	ldr	r3, [pc, #128]	; (800626c <FLASH_SetErrorCode+0xc4>)
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d008      	beq.n	8006206 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80061f4:	4b1e      	ldr	r3, [pc, #120]	; (8006270 <FLASH_SetErrorCode+0xc8>)
 80061f6:	69db      	ldr	r3, [r3, #28]
 80061f8:	f043 0304 	orr.w	r3, r3, #4
 80061fc:	4a1c      	ldr	r2, [pc, #112]	; (8006270 <FLASH_SetErrorCode+0xc8>)
 80061fe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006200:	4b1a      	ldr	r3, [pc, #104]	; (800626c <FLASH_SetErrorCode+0xc4>)
 8006202:	2240      	movs	r2, #64	; 0x40
 8006204:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006206:	4b19      	ldr	r3, [pc, #100]	; (800626c <FLASH_SetErrorCode+0xc4>)
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800620e:	2b00      	cmp	r3, #0
 8006210:	d008      	beq.n	8006224 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006212:	4b17      	ldr	r3, [pc, #92]	; (8006270 <FLASH_SetErrorCode+0xc8>)
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	f043 0302 	orr.w	r3, r3, #2
 800621a:	4a15      	ldr	r2, [pc, #84]	; (8006270 <FLASH_SetErrorCode+0xc8>)
 800621c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800621e:	4b13      	ldr	r3, [pc, #76]	; (800626c <FLASH_SetErrorCode+0xc4>)
 8006220:	2280      	movs	r2, #128	; 0x80
 8006222:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8006224:	4b11      	ldr	r3, [pc, #68]	; (800626c <FLASH_SetErrorCode+0xc4>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800622c:	2b00      	cmp	r3, #0
 800622e:	d009      	beq.n	8006244 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8006230:	4b0f      	ldr	r3, [pc, #60]	; (8006270 <FLASH_SetErrorCode+0xc8>)
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	f043 0301 	orr.w	r3, r3, #1
 8006238:	4a0d      	ldr	r2, [pc, #52]	; (8006270 <FLASH_SetErrorCode+0xc8>)
 800623a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800623c:	4b0b      	ldr	r3, [pc, #44]	; (800626c <FLASH_SetErrorCode+0xc4>)
 800623e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006242:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006244:	4b09      	ldr	r3, [pc, #36]	; (800626c <FLASH_SetErrorCode+0xc4>)
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d008      	beq.n	8006262 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006250:	4b07      	ldr	r3, [pc, #28]	; (8006270 <FLASH_SetErrorCode+0xc8>)
 8006252:	69db      	ldr	r3, [r3, #28]
 8006254:	f043 0320 	orr.w	r3, r3, #32
 8006258:	4a05      	ldr	r2, [pc, #20]	; (8006270 <FLASH_SetErrorCode+0xc8>)
 800625a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800625c:	4b03      	ldr	r3, [pc, #12]	; (800626c <FLASH_SetErrorCode+0xc4>)
 800625e:	2202      	movs	r2, #2
 8006260:	60da      	str	r2, [r3, #12]
  }
}
 8006262:	bf00      	nop
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	40023c00 	.word	0x40023c00
 8006270:	20002e28 	.word	0x20002e28

08006274 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006286:	4b31      	ldr	r3, [pc, #196]	; (800634c <HAL_FLASHEx_Erase+0xd8>)
 8006288:	7e1b      	ldrb	r3, [r3, #24]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d101      	bne.n	8006292 <HAL_FLASHEx_Erase+0x1e>
 800628e:	2302      	movs	r3, #2
 8006290:	e058      	b.n	8006344 <HAL_FLASHEx_Erase+0xd0>
 8006292:	4b2e      	ldr	r3, [pc, #184]	; (800634c <HAL_FLASHEx_Erase+0xd8>)
 8006294:	2201      	movs	r2, #1
 8006296:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006298:	f24c 3050 	movw	r0, #50000	; 0xc350
 800629c:	f7ff feaa 	bl	8005ff4 <FLASH_WaitForLastOperation>
 80062a0:	4603      	mov	r3, r0
 80062a2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d148      	bne.n	800633c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	f04f 32ff 	mov.w	r2, #4294967295
 80062b0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d115      	bne.n	80062e6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	4619      	mov	r1, r3
 80062c6:	4610      	mov	r0, r2
 80062c8:	f000 f844 	bl	8006354 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80062cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80062d0:	f7ff fe90 	bl	8005ff4 <FLASH_WaitForLastOperation>
 80062d4:	4603      	mov	r3, r0
 80062d6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80062d8:	4b1d      	ldr	r3, [pc, #116]	; (8006350 <HAL_FLASHEx_Erase+0xdc>)
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	4a1c      	ldr	r2, [pc, #112]	; (8006350 <HAL_FLASHEx_Erase+0xdc>)
 80062de:	f023 0304 	bic.w	r3, r3, #4
 80062e2:	6113      	str	r3, [r2, #16]
 80062e4:	e028      	b.n	8006338 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	60bb      	str	r3, [r7, #8]
 80062ec:	e01c      	b.n	8006328 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	4619      	mov	r1, r3
 80062f6:	68b8      	ldr	r0, [r7, #8]
 80062f8:	f000 f850 	bl	800639c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80062fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006300:	f7ff fe78 	bl	8005ff4 <FLASH_WaitForLastOperation>
 8006304:	4603      	mov	r3, r0
 8006306:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006308:	4b11      	ldr	r3, [pc, #68]	; (8006350 <HAL_FLASHEx_Erase+0xdc>)
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	4a10      	ldr	r2, [pc, #64]	; (8006350 <HAL_FLASHEx_Erase+0xdc>)
 800630e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8006312:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8006314:	7bfb      	ldrb	r3, [r7, #15]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	601a      	str	r2, [r3, #0]
          break;
 8006320:	e00a      	b.n	8006338 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	3301      	adds	r3, #1
 8006326:	60bb      	str	r3, [r7, #8]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	4413      	add	r3, r2
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	429a      	cmp	r2, r3
 8006336:	d3da      	bcc.n	80062ee <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006338:	f000 f878 	bl	800642c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800633c:	4b03      	ldr	r3, [pc, #12]	; (800634c <HAL_FLASHEx_Erase+0xd8>)
 800633e:	2200      	movs	r2, #0
 8006340:	761a      	strb	r2, [r3, #24]

  return status;
 8006342:	7bfb      	ldrb	r3, [r7, #15]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	20002e28 	.word	0x20002e28
 8006350:	40023c00 	.word	0x40023c00

08006354 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	4603      	mov	r3, r0
 800635c:	6039      	str	r1, [r7, #0]
 800635e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006360:	4b0d      	ldr	r3, [pc, #52]	; (8006398 <FLASH_MassErase+0x44>)
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	4a0c      	ldr	r2, [pc, #48]	; (8006398 <FLASH_MassErase+0x44>)
 8006366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800636a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800636c:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <FLASH_MassErase+0x44>)
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	4a09      	ldr	r2, [pc, #36]	; (8006398 <FLASH_MassErase+0x44>)
 8006372:	f043 0304 	orr.w	r3, r3, #4
 8006376:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8006378:	4b07      	ldr	r3, [pc, #28]	; (8006398 <FLASH_MassErase+0x44>)
 800637a:	691a      	ldr	r2, [r3, #16]
 800637c:	79fb      	ldrb	r3, [r7, #7]
 800637e:	021b      	lsls	r3, r3, #8
 8006380:	4313      	orrs	r3, r2
 8006382:	4a05      	ldr	r2, [pc, #20]	; (8006398 <FLASH_MassErase+0x44>)
 8006384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006388:	6113      	str	r3, [r2, #16]
}
 800638a:	bf00      	nop
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	40023c00 	.word	0x40023c00

0800639c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	460b      	mov	r3, r1
 80063a6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80063a8:	2300      	movs	r3, #0
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80063ac:	78fb      	ldrb	r3, [r7, #3]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d102      	bne.n	80063b8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80063b2:	2300      	movs	r3, #0
 80063b4:	60fb      	str	r3, [r7, #12]
 80063b6:	e010      	b.n	80063da <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80063b8:	78fb      	ldrb	r3, [r7, #3]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d103      	bne.n	80063c6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80063be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	e009      	b.n	80063da <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80063c6:	78fb      	ldrb	r3, [r7, #3]
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d103      	bne.n	80063d4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80063cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	e002      	b.n	80063da <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80063d4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80063d8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80063da:	4b13      	ldr	r3, [pc, #76]	; (8006428 <FLASH_Erase_Sector+0x8c>)
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	4a12      	ldr	r2, [pc, #72]	; (8006428 <FLASH_Erase_Sector+0x8c>)
 80063e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80063e6:	4b10      	ldr	r3, [pc, #64]	; (8006428 <FLASH_Erase_Sector+0x8c>)
 80063e8:	691a      	ldr	r2, [r3, #16]
 80063ea:	490f      	ldr	r1, [pc, #60]	; (8006428 <FLASH_Erase_Sector+0x8c>)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80063f2:	4b0d      	ldr	r3, [pc, #52]	; (8006428 <FLASH_Erase_Sector+0x8c>)
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	4a0c      	ldr	r2, [pc, #48]	; (8006428 <FLASH_Erase_Sector+0x8c>)
 80063f8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80063fc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80063fe:	4b0a      	ldr	r3, [pc, #40]	; (8006428 <FLASH_Erase_Sector+0x8c>)
 8006400:	691a      	ldr	r2, [r3, #16]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	00db      	lsls	r3, r3, #3
 8006406:	4313      	orrs	r3, r2
 8006408:	4a07      	ldr	r2, [pc, #28]	; (8006428 <FLASH_Erase_Sector+0x8c>)
 800640a:	f043 0302 	orr.w	r3, r3, #2
 800640e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006410:	4b05      	ldr	r3, [pc, #20]	; (8006428 <FLASH_Erase_Sector+0x8c>)
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	4a04      	ldr	r2, [pc, #16]	; (8006428 <FLASH_Erase_Sector+0x8c>)
 8006416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800641a:	6113      	str	r3, [r2, #16]
}
 800641c:	bf00      	nop
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	40023c00 	.word	0x40023c00

0800642c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8006430:	4b20      	ldr	r3, [pc, #128]	; (80064b4 <FLASH_FlushCaches+0x88>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006438:	2b00      	cmp	r3, #0
 800643a:	d017      	beq.n	800646c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800643c:	4b1d      	ldr	r3, [pc, #116]	; (80064b4 <FLASH_FlushCaches+0x88>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a1c      	ldr	r2, [pc, #112]	; (80064b4 <FLASH_FlushCaches+0x88>)
 8006442:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006446:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006448:	4b1a      	ldr	r3, [pc, #104]	; (80064b4 <FLASH_FlushCaches+0x88>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a19      	ldr	r2, [pc, #100]	; (80064b4 <FLASH_FlushCaches+0x88>)
 800644e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	4b17      	ldr	r3, [pc, #92]	; (80064b4 <FLASH_FlushCaches+0x88>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a16      	ldr	r2, [pc, #88]	; (80064b4 <FLASH_FlushCaches+0x88>)
 800645a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800645e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006460:	4b14      	ldr	r3, [pc, #80]	; (80064b4 <FLASH_FlushCaches+0x88>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a13      	ldr	r2, [pc, #76]	; (80064b4 <FLASH_FlushCaches+0x88>)
 8006466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800646a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800646c:	4b11      	ldr	r3, [pc, #68]	; (80064b4 <FLASH_FlushCaches+0x88>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006474:	2b00      	cmp	r3, #0
 8006476:	d017      	beq.n	80064a8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006478:	4b0e      	ldr	r3, [pc, #56]	; (80064b4 <FLASH_FlushCaches+0x88>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a0d      	ldr	r2, [pc, #52]	; (80064b4 <FLASH_FlushCaches+0x88>)
 800647e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006482:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006484:	4b0b      	ldr	r3, [pc, #44]	; (80064b4 <FLASH_FlushCaches+0x88>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a0a      	ldr	r2, [pc, #40]	; (80064b4 <FLASH_FlushCaches+0x88>)
 800648a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	4b08      	ldr	r3, [pc, #32]	; (80064b4 <FLASH_FlushCaches+0x88>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a07      	ldr	r2, [pc, #28]	; (80064b4 <FLASH_FlushCaches+0x88>)
 8006496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800649a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800649c:	4b05      	ldr	r3, [pc, #20]	; (80064b4 <FLASH_FlushCaches+0x88>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a04      	ldr	r2, [pc, #16]	; (80064b4 <FLASH_FlushCaches+0x88>)
 80064a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064a6:	6013      	str	r3, [r2, #0]
  }
}
 80064a8:	bf00      	nop
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40023c00 	.word	0x40023c00

080064b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b089      	sub	sp, #36	; 0x24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064ce:	2300      	movs	r3, #0
 80064d0:	61fb      	str	r3, [r7, #28]
 80064d2:	e159      	b.n	8006788 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80064d4:	2201      	movs	r2, #1
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	fa02 f303 	lsl.w	r3, r2, r3
 80064dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	4013      	ands	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	f040 8148 	bne.w	8006782 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f003 0303 	and.w	r3, r3, #3
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d005      	beq.n	800650a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006506:	2b02      	cmp	r3, #2
 8006508:	d130      	bne.n	800656c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	2203      	movs	r2, #3
 8006516:	fa02 f303 	lsl.w	r3, r2, r3
 800651a:	43db      	mvns	r3, r3
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	4013      	ands	r3, r2
 8006520:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	68da      	ldr	r2, [r3, #12]
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	005b      	lsls	r3, r3, #1
 800652a:	fa02 f303 	lsl.w	r3, r2, r3
 800652e:	69ba      	ldr	r2, [r7, #24]
 8006530:	4313      	orrs	r3, r2
 8006532:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006540:	2201      	movs	r2, #1
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	fa02 f303 	lsl.w	r3, r2, r3
 8006548:	43db      	mvns	r3, r3
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	4013      	ands	r3, r2
 800654e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	091b      	lsrs	r3, r3, #4
 8006556:	f003 0201 	and.w	r2, r3, #1
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	fa02 f303 	lsl.w	r3, r2, r3
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	4313      	orrs	r3, r2
 8006564:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f003 0303 	and.w	r3, r3, #3
 8006574:	2b03      	cmp	r3, #3
 8006576:	d017      	beq.n	80065a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	2203      	movs	r2, #3
 8006584:	fa02 f303 	lsl.w	r3, r2, r3
 8006588:	43db      	mvns	r3, r3
 800658a:	69ba      	ldr	r2, [r7, #24]
 800658c:	4013      	ands	r3, r2
 800658e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	005b      	lsls	r3, r3, #1
 8006598:	fa02 f303 	lsl.w	r3, r2, r3
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	4313      	orrs	r3, r2
 80065a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f003 0303 	and.w	r3, r3, #3
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d123      	bne.n	80065fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	08da      	lsrs	r2, r3, #3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	3208      	adds	r2, #8
 80065bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	f003 0307 	and.w	r3, r3, #7
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	220f      	movs	r2, #15
 80065cc:	fa02 f303 	lsl.w	r3, r2, r3
 80065d0:	43db      	mvns	r3, r3
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	4013      	ands	r3, r2
 80065d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	691a      	ldr	r2, [r3, #16]
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	f003 0307 	and.w	r3, r3, #7
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	fa02 f303 	lsl.w	r3, r2, r3
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	08da      	lsrs	r2, r3, #3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	3208      	adds	r2, #8
 80065f6:	69b9      	ldr	r1, [r7, #24]
 80065f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	2203      	movs	r2, #3
 8006608:	fa02 f303 	lsl.w	r3, r2, r3
 800660c:	43db      	mvns	r3, r3
 800660e:	69ba      	ldr	r2, [r7, #24]
 8006610:	4013      	ands	r3, r2
 8006612:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f003 0203 	and.w	r2, r3, #3
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	005b      	lsls	r3, r3, #1
 8006620:	fa02 f303 	lsl.w	r3, r2, r3
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	4313      	orrs	r3, r2
 8006628:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 80a2 	beq.w	8006782 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800663e:	2300      	movs	r3, #0
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	4b57      	ldr	r3, [pc, #348]	; (80067a0 <HAL_GPIO_Init+0x2e8>)
 8006644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006646:	4a56      	ldr	r2, [pc, #344]	; (80067a0 <HAL_GPIO_Init+0x2e8>)
 8006648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800664c:	6453      	str	r3, [r2, #68]	; 0x44
 800664e:	4b54      	ldr	r3, [pc, #336]	; (80067a0 <HAL_GPIO_Init+0x2e8>)
 8006650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800665a:	4a52      	ldr	r2, [pc, #328]	; (80067a4 <HAL_GPIO_Init+0x2ec>)
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	089b      	lsrs	r3, r3, #2
 8006660:	3302      	adds	r3, #2
 8006662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006666:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	f003 0303 	and.w	r3, r3, #3
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	220f      	movs	r2, #15
 8006672:	fa02 f303 	lsl.w	r3, r2, r3
 8006676:	43db      	mvns	r3, r3
 8006678:	69ba      	ldr	r2, [r7, #24]
 800667a:	4013      	ands	r3, r2
 800667c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a49      	ldr	r2, [pc, #292]	; (80067a8 <HAL_GPIO_Init+0x2f0>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d019      	beq.n	80066ba <HAL_GPIO_Init+0x202>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a48      	ldr	r2, [pc, #288]	; (80067ac <HAL_GPIO_Init+0x2f4>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d013      	beq.n	80066b6 <HAL_GPIO_Init+0x1fe>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a47      	ldr	r2, [pc, #284]	; (80067b0 <HAL_GPIO_Init+0x2f8>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d00d      	beq.n	80066b2 <HAL_GPIO_Init+0x1fa>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a46      	ldr	r2, [pc, #280]	; (80067b4 <HAL_GPIO_Init+0x2fc>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d007      	beq.n	80066ae <HAL_GPIO_Init+0x1f6>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a45      	ldr	r2, [pc, #276]	; (80067b8 <HAL_GPIO_Init+0x300>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d101      	bne.n	80066aa <HAL_GPIO_Init+0x1f2>
 80066a6:	2304      	movs	r3, #4
 80066a8:	e008      	b.n	80066bc <HAL_GPIO_Init+0x204>
 80066aa:	2307      	movs	r3, #7
 80066ac:	e006      	b.n	80066bc <HAL_GPIO_Init+0x204>
 80066ae:	2303      	movs	r3, #3
 80066b0:	e004      	b.n	80066bc <HAL_GPIO_Init+0x204>
 80066b2:	2302      	movs	r3, #2
 80066b4:	e002      	b.n	80066bc <HAL_GPIO_Init+0x204>
 80066b6:	2301      	movs	r3, #1
 80066b8:	e000      	b.n	80066bc <HAL_GPIO_Init+0x204>
 80066ba:	2300      	movs	r3, #0
 80066bc:	69fa      	ldr	r2, [r7, #28]
 80066be:	f002 0203 	and.w	r2, r2, #3
 80066c2:	0092      	lsls	r2, r2, #2
 80066c4:	4093      	lsls	r3, r2
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066cc:	4935      	ldr	r1, [pc, #212]	; (80067a4 <HAL_GPIO_Init+0x2ec>)
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	089b      	lsrs	r3, r3, #2
 80066d2:	3302      	adds	r3, #2
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80066da:	4b38      	ldr	r3, [pc, #224]	; (80067bc <HAL_GPIO_Init+0x304>)
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	43db      	mvns	r3, r3
 80066e4:	69ba      	ldr	r2, [r7, #24]
 80066e6:	4013      	ands	r3, r2
 80066e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d003      	beq.n	80066fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80066fe:	4a2f      	ldr	r2, [pc, #188]	; (80067bc <HAL_GPIO_Init+0x304>)
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006704:	4b2d      	ldr	r3, [pc, #180]	; (80067bc <HAL_GPIO_Init+0x304>)
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	43db      	mvns	r3, r3
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	4013      	ands	r3, r2
 8006712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006720:	69ba      	ldr	r2, [r7, #24]
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	4313      	orrs	r3, r2
 8006726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006728:	4a24      	ldr	r2, [pc, #144]	; (80067bc <HAL_GPIO_Init+0x304>)
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800672e:	4b23      	ldr	r3, [pc, #140]	; (80067bc <HAL_GPIO_Init+0x304>)
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	43db      	mvns	r3, r3
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	4013      	ands	r3, r2
 800673c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006752:	4a1a      	ldr	r2, [pc, #104]	; (80067bc <HAL_GPIO_Init+0x304>)
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006758:	4b18      	ldr	r3, [pc, #96]	; (80067bc <HAL_GPIO_Init+0x304>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	43db      	mvns	r3, r3
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	4013      	ands	r3, r2
 8006766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d003      	beq.n	800677c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	4313      	orrs	r3, r2
 800677a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800677c:	4a0f      	ldr	r2, [pc, #60]	; (80067bc <HAL_GPIO_Init+0x304>)
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	3301      	adds	r3, #1
 8006786:	61fb      	str	r3, [r7, #28]
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	2b0f      	cmp	r3, #15
 800678c:	f67f aea2 	bls.w	80064d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	3724      	adds	r7, #36	; 0x24
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	40023800 	.word	0x40023800
 80067a4:	40013800 	.word	0x40013800
 80067a8:	40020000 	.word	0x40020000
 80067ac:	40020400 	.word	0x40020400
 80067b0:	40020800 	.word	0x40020800
 80067b4:	40020c00 	.word	0x40020c00
 80067b8:	40021000 	.word	0x40021000
 80067bc:	40013c00 	.word	0x40013c00

080067c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	691a      	ldr	r2, [r3, #16]
 80067d0:	887b      	ldrh	r3, [r7, #2]
 80067d2:	4013      	ands	r3, r2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80067d8:	2301      	movs	r3, #1
 80067da:	73fb      	strb	r3, [r7, #15]
 80067dc:	e001      	b.n	80067e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80067de:	2300      	movs	r3, #0
 80067e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80067e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3714      	adds	r7, #20
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	807b      	strh	r3, [r7, #2]
 80067fc:	4613      	mov	r3, r2
 80067fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006800:	787b      	ldrb	r3, [r7, #1]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006806:	887a      	ldrh	r2, [r7, #2]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800680c:	e003      	b.n	8006816 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800680e:	887b      	ldrh	r3, [r7, #2]
 8006810:	041a      	lsls	r2, r3, #16
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	619a      	str	r2, [r3, #24]
}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
	...

08006824 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e12b      	b.n	8006a8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d106      	bne.n	8006850 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7fe fa5e 	bl	8004d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2224      	movs	r2, #36	; 0x24
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0201 	bic.w	r2, r2, #1
 8006866:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006876:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006886:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006888:	f000 fd40 	bl	800730c <HAL_RCC_GetPCLK1Freq>
 800688c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	4a81      	ldr	r2, [pc, #516]	; (8006a98 <HAL_I2C_Init+0x274>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d807      	bhi.n	80068a8 <HAL_I2C_Init+0x84>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4a80      	ldr	r2, [pc, #512]	; (8006a9c <HAL_I2C_Init+0x278>)
 800689c:	4293      	cmp	r3, r2
 800689e:	bf94      	ite	ls
 80068a0:	2301      	movls	r3, #1
 80068a2:	2300      	movhi	r3, #0
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	e006      	b.n	80068b6 <HAL_I2C_Init+0x92>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4a7d      	ldr	r2, [pc, #500]	; (8006aa0 <HAL_I2C_Init+0x27c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	bf94      	ite	ls
 80068b0:	2301      	movls	r3, #1
 80068b2:	2300      	movhi	r3, #0
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e0e7      	b.n	8006a8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	4a78      	ldr	r2, [pc, #480]	; (8006aa4 <HAL_I2C_Init+0x280>)
 80068c2:	fba2 2303 	umull	r2, r3, r2, r3
 80068c6:	0c9b      	lsrs	r3, r3, #18
 80068c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	430a      	orrs	r2, r1
 80068dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	4a6a      	ldr	r2, [pc, #424]	; (8006a98 <HAL_I2C_Init+0x274>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d802      	bhi.n	80068f8 <HAL_I2C_Init+0xd4>
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	3301      	adds	r3, #1
 80068f6:	e009      	b.n	800690c <HAL_I2C_Init+0xe8>
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80068fe:	fb02 f303 	mul.w	r3, r2, r3
 8006902:	4a69      	ldr	r2, [pc, #420]	; (8006aa8 <HAL_I2C_Init+0x284>)
 8006904:	fba2 2303 	umull	r2, r3, r2, r3
 8006908:	099b      	lsrs	r3, r3, #6
 800690a:	3301      	adds	r3, #1
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	6812      	ldr	r2, [r2, #0]
 8006910:	430b      	orrs	r3, r1
 8006912:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	69db      	ldr	r3, [r3, #28]
 800691a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800691e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	495c      	ldr	r1, [pc, #368]	; (8006a98 <HAL_I2C_Init+0x274>)
 8006928:	428b      	cmp	r3, r1
 800692a:	d819      	bhi.n	8006960 <HAL_I2C_Init+0x13c>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	1e59      	subs	r1, r3, #1
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	fbb1 f3f3 	udiv	r3, r1, r3
 800693a:	1c59      	adds	r1, r3, #1
 800693c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006940:	400b      	ands	r3, r1
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00a      	beq.n	800695c <HAL_I2C_Init+0x138>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	1e59      	subs	r1, r3, #1
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	fbb1 f3f3 	udiv	r3, r1, r3
 8006954:	3301      	adds	r3, #1
 8006956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800695a:	e051      	b.n	8006a00 <HAL_I2C_Init+0x1dc>
 800695c:	2304      	movs	r3, #4
 800695e:	e04f      	b.n	8006a00 <HAL_I2C_Init+0x1dc>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d111      	bne.n	800698c <HAL_I2C_Init+0x168>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	1e58      	subs	r0, r3, #1
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6859      	ldr	r1, [r3, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	440b      	add	r3, r1
 8006976:	fbb0 f3f3 	udiv	r3, r0, r3
 800697a:	3301      	adds	r3, #1
 800697c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006980:	2b00      	cmp	r3, #0
 8006982:	bf0c      	ite	eq
 8006984:	2301      	moveq	r3, #1
 8006986:	2300      	movne	r3, #0
 8006988:	b2db      	uxtb	r3, r3
 800698a:	e012      	b.n	80069b2 <HAL_I2C_Init+0x18e>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	1e58      	subs	r0, r3, #1
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6859      	ldr	r1, [r3, #4]
 8006994:	460b      	mov	r3, r1
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	440b      	add	r3, r1
 800699a:	0099      	lsls	r1, r3, #2
 800699c:	440b      	add	r3, r1
 800699e:	fbb0 f3f3 	udiv	r3, r0, r3
 80069a2:	3301      	adds	r3, #1
 80069a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	bf0c      	ite	eq
 80069ac:	2301      	moveq	r3, #1
 80069ae:	2300      	movne	r3, #0
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d001      	beq.n	80069ba <HAL_I2C_Init+0x196>
 80069b6:	2301      	movs	r3, #1
 80069b8:	e022      	b.n	8006a00 <HAL_I2C_Init+0x1dc>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d10e      	bne.n	80069e0 <HAL_I2C_Init+0x1bc>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	1e58      	subs	r0, r3, #1
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6859      	ldr	r1, [r3, #4]
 80069ca:	460b      	mov	r3, r1
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	440b      	add	r3, r1
 80069d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80069d4:	3301      	adds	r3, #1
 80069d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069de:	e00f      	b.n	8006a00 <HAL_I2C_Init+0x1dc>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	1e58      	subs	r0, r3, #1
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6859      	ldr	r1, [r3, #4]
 80069e8:	460b      	mov	r3, r1
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	440b      	add	r3, r1
 80069ee:	0099      	lsls	r1, r3, #2
 80069f0:	440b      	add	r3, r1
 80069f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80069f6:	3301      	adds	r3, #1
 80069f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a00:	6879      	ldr	r1, [r7, #4]
 8006a02:	6809      	ldr	r1, [r1, #0]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	69da      	ldr	r2, [r3, #28]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	431a      	orrs	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	6911      	ldr	r1, [r2, #16]
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	68d2      	ldr	r2, [r2, #12]
 8006a3a:	4311      	orrs	r1, r2
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	6812      	ldr	r2, [r2, #0]
 8006a40:	430b      	orrs	r3, r1
 8006a42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	695a      	ldr	r2, [r3, #20]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0201 	orr.w	r2, r2, #1
 8006a6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2220      	movs	r2, #32
 8006a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	000186a0 	.word	0x000186a0
 8006a9c:	001e847f 	.word	0x001e847f
 8006aa0:	003d08ff 	.word	0x003d08ff
 8006aa4:	431bde83 	.word	0x431bde83
 8006aa8:	10624dd3 	.word	0x10624dd3

08006aac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e267      	b.n	8006f8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d075      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006aca:	4b88      	ldr	r3, [pc, #544]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f003 030c 	and.w	r3, r3, #12
 8006ad2:	2b04      	cmp	r3, #4
 8006ad4:	d00c      	beq.n	8006af0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ad6:	4b85      	ldr	r3, [pc, #532]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ade:	2b08      	cmp	r3, #8
 8006ae0:	d112      	bne.n	8006b08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ae2:	4b82      	ldr	r3, [pc, #520]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006aee:	d10b      	bne.n	8006b08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006af0:	4b7e      	ldr	r3, [pc, #504]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d05b      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x108>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d157      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e242      	b.n	8006f8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b10:	d106      	bne.n	8006b20 <HAL_RCC_OscConfig+0x74>
 8006b12:	4b76      	ldr	r3, [pc, #472]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a75      	ldr	r2, [pc, #468]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b1c:	6013      	str	r3, [r2, #0]
 8006b1e:	e01d      	b.n	8006b5c <HAL_RCC_OscConfig+0xb0>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b28:	d10c      	bne.n	8006b44 <HAL_RCC_OscConfig+0x98>
 8006b2a:	4b70      	ldr	r3, [pc, #448]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a6f      	ldr	r2, [pc, #444]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b34:	6013      	str	r3, [r2, #0]
 8006b36:	4b6d      	ldr	r3, [pc, #436]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a6c      	ldr	r2, [pc, #432]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b40:	6013      	str	r3, [r2, #0]
 8006b42:	e00b      	b.n	8006b5c <HAL_RCC_OscConfig+0xb0>
 8006b44:	4b69      	ldr	r3, [pc, #420]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a68      	ldr	r2, [pc, #416]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b4e:	6013      	str	r3, [r2, #0]
 8006b50:	4b66      	ldr	r3, [pc, #408]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a65      	ldr	r2, [pc, #404]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d013      	beq.n	8006b8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b64:	f7fe fe24 	bl	80057b0 <HAL_GetTick>
 8006b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b6a:	e008      	b.n	8006b7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b6c:	f7fe fe20 	bl	80057b0 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b64      	cmp	r3, #100	; 0x64
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e207      	b.n	8006f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b7e:	4b5b      	ldr	r3, [pc, #364]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0f0      	beq.n	8006b6c <HAL_RCC_OscConfig+0xc0>
 8006b8a:	e014      	b.n	8006bb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b8c:	f7fe fe10 	bl	80057b0 <HAL_GetTick>
 8006b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b92:	e008      	b.n	8006ba6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b94:	f7fe fe0c 	bl	80057b0 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b64      	cmp	r3, #100	; 0x64
 8006ba0:	d901      	bls.n	8006ba6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e1f3      	b.n	8006f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ba6:	4b51      	ldr	r3, [pc, #324]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1f0      	bne.n	8006b94 <HAL_RCC_OscConfig+0xe8>
 8006bb2:	e000      	b.n	8006bb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d063      	beq.n	8006c8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bc2:	4b4a      	ldr	r3, [pc, #296]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f003 030c 	and.w	r3, r3, #12
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00b      	beq.n	8006be6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bce:	4b47      	ldr	r3, [pc, #284]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bd6:	2b08      	cmp	r3, #8
 8006bd8:	d11c      	bne.n	8006c14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bda:	4b44      	ldr	r3, [pc, #272]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d116      	bne.n	8006c14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006be6:	4b41      	ldr	r3, [pc, #260]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d005      	beq.n	8006bfe <HAL_RCC_OscConfig+0x152>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d001      	beq.n	8006bfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e1c7      	b.n	8006f8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bfe:	4b3b      	ldr	r3, [pc, #236]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	00db      	lsls	r3, r3, #3
 8006c0c:	4937      	ldr	r1, [pc, #220]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c12:	e03a      	b.n	8006c8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d020      	beq.n	8006c5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c1c:	4b34      	ldr	r3, [pc, #208]	; (8006cf0 <HAL_RCC_OscConfig+0x244>)
 8006c1e:	2201      	movs	r2, #1
 8006c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c22:	f7fe fdc5 	bl	80057b0 <HAL_GetTick>
 8006c26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c28:	e008      	b.n	8006c3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c2a:	f7fe fdc1 	bl	80057b0 <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d901      	bls.n	8006c3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e1a8      	b.n	8006f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c3c:	4b2b      	ldr	r3, [pc, #172]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0f0      	beq.n	8006c2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c48:	4b28      	ldr	r3, [pc, #160]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	00db      	lsls	r3, r3, #3
 8006c56:	4925      	ldr	r1, [pc, #148]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	600b      	str	r3, [r1, #0]
 8006c5c:	e015      	b.n	8006c8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c5e:	4b24      	ldr	r3, [pc, #144]	; (8006cf0 <HAL_RCC_OscConfig+0x244>)
 8006c60:	2200      	movs	r2, #0
 8006c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c64:	f7fe fda4 	bl	80057b0 <HAL_GetTick>
 8006c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c6a:	e008      	b.n	8006c7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c6c:	f7fe fda0 	bl	80057b0 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d901      	bls.n	8006c7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e187      	b.n	8006f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c7e:	4b1b      	ldr	r3, [pc, #108]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1f0      	bne.n	8006c6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0308 	and.w	r3, r3, #8
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d036      	beq.n	8006d04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	695b      	ldr	r3, [r3, #20]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d016      	beq.n	8006ccc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c9e:	4b15      	ldr	r3, [pc, #84]	; (8006cf4 <HAL_RCC_OscConfig+0x248>)
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca4:	f7fe fd84 	bl	80057b0 <HAL_GetTick>
 8006ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006caa:	e008      	b.n	8006cbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cac:	f7fe fd80 	bl	80057b0 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e167      	b.n	8006f8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cbe:	4b0b      	ldr	r3, [pc, #44]	; (8006cec <HAL_RCC_OscConfig+0x240>)
 8006cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0f0      	beq.n	8006cac <HAL_RCC_OscConfig+0x200>
 8006cca:	e01b      	b.n	8006d04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ccc:	4b09      	ldr	r3, [pc, #36]	; (8006cf4 <HAL_RCC_OscConfig+0x248>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cd2:	f7fe fd6d 	bl	80057b0 <HAL_GetTick>
 8006cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cd8:	e00e      	b.n	8006cf8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cda:	f7fe fd69 	bl	80057b0 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d907      	bls.n	8006cf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ce8:	2303      	movs	r3, #3
 8006cea:	e150      	b.n	8006f8e <HAL_RCC_OscConfig+0x4e2>
 8006cec:	40023800 	.word	0x40023800
 8006cf0:	42470000 	.word	0x42470000
 8006cf4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cf8:	4b88      	ldr	r3, [pc, #544]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1ea      	bne.n	8006cda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0304 	and.w	r3, r3, #4
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 8097 	beq.w	8006e40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d12:	2300      	movs	r3, #0
 8006d14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d16:	4b81      	ldr	r3, [pc, #516]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10f      	bne.n	8006d42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d22:	2300      	movs	r3, #0
 8006d24:	60bb      	str	r3, [r7, #8]
 8006d26:	4b7d      	ldr	r3, [pc, #500]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2a:	4a7c      	ldr	r2, [pc, #496]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d30:	6413      	str	r3, [r2, #64]	; 0x40
 8006d32:	4b7a      	ldr	r3, [pc, #488]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d3a:	60bb      	str	r3, [r7, #8]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d42:	4b77      	ldr	r3, [pc, #476]	; (8006f20 <HAL_RCC_OscConfig+0x474>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d118      	bne.n	8006d80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d4e:	4b74      	ldr	r3, [pc, #464]	; (8006f20 <HAL_RCC_OscConfig+0x474>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a73      	ldr	r2, [pc, #460]	; (8006f20 <HAL_RCC_OscConfig+0x474>)
 8006d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d5a:	f7fe fd29 	bl	80057b0 <HAL_GetTick>
 8006d5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d60:	e008      	b.n	8006d74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d62:	f7fe fd25 	bl	80057b0 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d901      	bls.n	8006d74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e10c      	b.n	8006f8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d74:	4b6a      	ldr	r3, [pc, #424]	; (8006f20 <HAL_RCC_OscConfig+0x474>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d0f0      	beq.n	8006d62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d106      	bne.n	8006d96 <HAL_RCC_OscConfig+0x2ea>
 8006d88:	4b64      	ldr	r3, [pc, #400]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8c:	4a63      	ldr	r2, [pc, #396]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006d8e:	f043 0301 	orr.w	r3, r3, #1
 8006d92:	6713      	str	r3, [r2, #112]	; 0x70
 8006d94:	e01c      	b.n	8006dd0 <HAL_RCC_OscConfig+0x324>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	2b05      	cmp	r3, #5
 8006d9c:	d10c      	bne.n	8006db8 <HAL_RCC_OscConfig+0x30c>
 8006d9e:	4b5f      	ldr	r3, [pc, #380]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da2:	4a5e      	ldr	r2, [pc, #376]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006da4:	f043 0304 	orr.w	r3, r3, #4
 8006da8:	6713      	str	r3, [r2, #112]	; 0x70
 8006daa:	4b5c      	ldr	r3, [pc, #368]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dae:	4a5b      	ldr	r2, [pc, #364]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006db0:	f043 0301 	orr.w	r3, r3, #1
 8006db4:	6713      	str	r3, [r2, #112]	; 0x70
 8006db6:	e00b      	b.n	8006dd0 <HAL_RCC_OscConfig+0x324>
 8006db8:	4b58      	ldr	r3, [pc, #352]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dbc:	4a57      	ldr	r2, [pc, #348]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006dbe:	f023 0301 	bic.w	r3, r3, #1
 8006dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8006dc4:	4b55      	ldr	r3, [pc, #340]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc8:	4a54      	ldr	r2, [pc, #336]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006dca:	f023 0304 	bic.w	r3, r3, #4
 8006dce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d015      	beq.n	8006e04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dd8:	f7fe fcea 	bl	80057b0 <HAL_GetTick>
 8006ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dde:	e00a      	b.n	8006df6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006de0:	f7fe fce6 	bl	80057b0 <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d901      	bls.n	8006df6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e0cb      	b.n	8006f8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006df6:	4b49      	ldr	r3, [pc, #292]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dfa:	f003 0302 	and.w	r3, r3, #2
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d0ee      	beq.n	8006de0 <HAL_RCC_OscConfig+0x334>
 8006e02:	e014      	b.n	8006e2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e04:	f7fe fcd4 	bl	80057b0 <HAL_GetTick>
 8006e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e0a:	e00a      	b.n	8006e22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e0c:	f7fe fcd0 	bl	80057b0 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d901      	bls.n	8006e22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e0b5      	b.n	8006f8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e22:	4b3e      	ldr	r3, [pc, #248]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e26:	f003 0302 	and.w	r3, r3, #2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1ee      	bne.n	8006e0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e2e:	7dfb      	ldrb	r3, [r7, #23]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d105      	bne.n	8006e40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e34:	4b39      	ldr	r3, [pc, #228]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e38:	4a38      	ldr	r2, [pc, #224]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006e3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 80a1 	beq.w	8006f8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e4a:	4b34      	ldr	r3, [pc, #208]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f003 030c 	and.w	r3, r3, #12
 8006e52:	2b08      	cmp	r3, #8
 8006e54:	d05c      	beq.n	8006f10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d141      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e5e:	4b31      	ldr	r3, [pc, #196]	; (8006f24 <HAL_RCC_OscConfig+0x478>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e64:	f7fe fca4 	bl	80057b0 <HAL_GetTick>
 8006e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e6c:	f7fe fca0 	bl	80057b0 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e087      	b.n	8006f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e7e:	4b27      	ldr	r3, [pc, #156]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1f0      	bne.n	8006e6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	69da      	ldr	r2, [r3, #28]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	431a      	orrs	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e98:	019b      	lsls	r3, r3, #6
 8006e9a:	431a      	orrs	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea0:	085b      	lsrs	r3, r3, #1
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	041b      	lsls	r3, r3, #16
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eac:	061b      	lsls	r3, r3, #24
 8006eae:	491b      	ldr	r1, [pc, #108]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006eb4:	4b1b      	ldr	r3, [pc, #108]	; (8006f24 <HAL_RCC_OscConfig+0x478>)
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eba:	f7fe fc79 	bl	80057b0 <HAL_GetTick>
 8006ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ec0:	e008      	b.n	8006ed4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ec2:	f7fe fc75 	bl	80057b0 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d901      	bls.n	8006ed4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e05c      	b.n	8006f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ed4:	4b11      	ldr	r3, [pc, #68]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d0f0      	beq.n	8006ec2 <HAL_RCC_OscConfig+0x416>
 8006ee0:	e054      	b.n	8006f8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ee2:	4b10      	ldr	r3, [pc, #64]	; (8006f24 <HAL_RCC_OscConfig+0x478>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ee8:	f7fe fc62 	bl	80057b0 <HAL_GetTick>
 8006eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eee:	e008      	b.n	8006f02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ef0:	f7fe fc5e 	bl	80057b0 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e045      	b.n	8006f8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f02:	4b06      	ldr	r3, [pc, #24]	; (8006f1c <HAL_RCC_OscConfig+0x470>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1f0      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x444>
 8006f0e:	e03d      	b.n	8006f8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d107      	bne.n	8006f28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e038      	b.n	8006f8e <HAL_RCC_OscConfig+0x4e2>
 8006f1c:	40023800 	.word	0x40023800
 8006f20:	40007000 	.word	0x40007000
 8006f24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f28:	4b1b      	ldr	r3, [pc, #108]	; (8006f98 <HAL_RCC_OscConfig+0x4ec>)
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d028      	beq.n	8006f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d121      	bne.n	8006f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d11a      	bne.n	8006f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f58:	4013      	ands	r3, r2
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d111      	bne.n	8006f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6e:	085b      	lsrs	r3, r3, #1
 8006f70:	3b01      	subs	r3, #1
 8006f72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d107      	bne.n	8006f88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d001      	beq.n	8006f8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e000      	b.n	8006f8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3718      	adds	r7, #24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	40023800 	.word	0x40023800

08006f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e0cc      	b.n	800714a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fb0:	4b68      	ldr	r3, [pc, #416]	; (8007154 <HAL_RCC_ClockConfig+0x1b8>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0307 	and.w	r3, r3, #7
 8006fb8:	683a      	ldr	r2, [r7, #0]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d90c      	bls.n	8006fd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fbe:	4b65      	ldr	r3, [pc, #404]	; (8007154 <HAL_RCC_ClockConfig+0x1b8>)
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	b2d2      	uxtb	r2, r2
 8006fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fc6:	4b63      	ldr	r3, [pc, #396]	; (8007154 <HAL_RCC_ClockConfig+0x1b8>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0307 	and.w	r3, r3, #7
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d001      	beq.n	8006fd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e0b8      	b.n	800714a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d020      	beq.n	8007026 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0304 	and.w	r3, r3, #4
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d005      	beq.n	8006ffc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ff0:	4b59      	ldr	r3, [pc, #356]	; (8007158 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	4a58      	ldr	r2, [pc, #352]	; (8007158 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ffa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0308 	and.w	r3, r3, #8
 8007004:	2b00      	cmp	r3, #0
 8007006:	d005      	beq.n	8007014 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007008:	4b53      	ldr	r3, [pc, #332]	; (8007158 <HAL_RCC_ClockConfig+0x1bc>)
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	4a52      	ldr	r2, [pc, #328]	; (8007158 <HAL_RCC_ClockConfig+0x1bc>)
 800700e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007012:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007014:	4b50      	ldr	r3, [pc, #320]	; (8007158 <HAL_RCC_ClockConfig+0x1bc>)
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	494d      	ldr	r1, [pc, #308]	; (8007158 <HAL_RCC_ClockConfig+0x1bc>)
 8007022:	4313      	orrs	r3, r2
 8007024:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	d044      	beq.n	80070bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d107      	bne.n	800704a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800703a:	4b47      	ldr	r3, [pc, #284]	; (8007158 <HAL_RCC_ClockConfig+0x1bc>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d119      	bne.n	800707a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e07f      	b.n	800714a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	2b02      	cmp	r3, #2
 8007050:	d003      	beq.n	800705a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007056:	2b03      	cmp	r3, #3
 8007058:	d107      	bne.n	800706a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800705a:	4b3f      	ldr	r3, [pc, #252]	; (8007158 <HAL_RCC_ClockConfig+0x1bc>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d109      	bne.n	800707a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e06f      	b.n	800714a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800706a:	4b3b      	ldr	r3, [pc, #236]	; (8007158 <HAL_RCC_ClockConfig+0x1bc>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e067      	b.n	800714a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800707a:	4b37      	ldr	r3, [pc, #220]	; (8007158 <HAL_RCC_ClockConfig+0x1bc>)
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f023 0203 	bic.w	r2, r3, #3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	4934      	ldr	r1, [pc, #208]	; (8007158 <HAL_RCC_ClockConfig+0x1bc>)
 8007088:	4313      	orrs	r3, r2
 800708a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800708c:	f7fe fb90 	bl	80057b0 <HAL_GetTick>
 8007090:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007092:	e00a      	b.n	80070aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007094:	f7fe fb8c 	bl	80057b0 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	f241 3288 	movw	r2, #5000	; 0x1388
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d901      	bls.n	80070aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e04f      	b.n	800714a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070aa:	4b2b      	ldr	r3, [pc, #172]	; (8007158 <HAL_RCC_ClockConfig+0x1bc>)
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f003 020c 	and.w	r2, r3, #12
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d1eb      	bne.n	8007094 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070bc:	4b25      	ldr	r3, [pc, #148]	; (8007154 <HAL_RCC_ClockConfig+0x1b8>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0307 	and.w	r3, r3, #7
 80070c4:	683a      	ldr	r2, [r7, #0]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d20c      	bcs.n	80070e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ca:	4b22      	ldr	r3, [pc, #136]	; (8007154 <HAL_RCC_ClockConfig+0x1b8>)
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	b2d2      	uxtb	r2, r2
 80070d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070d2:	4b20      	ldr	r3, [pc, #128]	; (8007154 <HAL_RCC_ClockConfig+0x1b8>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d001      	beq.n	80070e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e032      	b.n	800714a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d008      	beq.n	8007102 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070f0:	4b19      	ldr	r3, [pc, #100]	; (8007158 <HAL_RCC_ClockConfig+0x1bc>)
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	4916      	ldr	r1, [pc, #88]	; (8007158 <HAL_RCC_ClockConfig+0x1bc>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0308 	and.w	r3, r3, #8
 800710a:	2b00      	cmp	r3, #0
 800710c:	d009      	beq.n	8007122 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800710e:	4b12      	ldr	r3, [pc, #72]	; (8007158 <HAL_RCC_ClockConfig+0x1bc>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	00db      	lsls	r3, r3, #3
 800711c:	490e      	ldr	r1, [pc, #56]	; (8007158 <HAL_RCC_ClockConfig+0x1bc>)
 800711e:	4313      	orrs	r3, r2
 8007120:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007122:	f000 f821 	bl	8007168 <HAL_RCC_GetSysClockFreq>
 8007126:	4602      	mov	r2, r0
 8007128:	4b0b      	ldr	r3, [pc, #44]	; (8007158 <HAL_RCC_ClockConfig+0x1bc>)
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	091b      	lsrs	r3, r3, #4
 800712e:	f003 030f 	and.w	r3, r3, #15
 8007132:	490a      	ldr	r1, [pc, #40]	; (800715c <HAL_RCC_ClockConfig+0x1c0>)
 8007134:	5ccb      	ldrb	r3, [r1, r3]
 8007136:	fa22 f303 	lsr.w	r3, r2, r3
 800713a:	4a09      	ldr	r2, [pc, #36]	; (8007160 <HAL_RCC_ClockConfig+0x1c4>)
 800713c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800713e:	4b09      	ldr	r3, [pc, #36]	; (8007164 <HAL_RCC_ClockConfig+0x1c8>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4618      	mov	r0, r3
 8007144:	f7fe faf0 	bl	8005728 <HAL_InitTick>

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	40023c00 	.word	0x40023c00
 8007158:	40023800 	.word	0x40023800
 800715c:	0800f908 	.word	0x0800f908
 8007160:	2000008c 	.word	0x2000008c
 8007164:	20000090 	.word	0x20000090

08007168 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800716c:	b090      	sub	sp, #64	; 0x40
 800716e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	637b      	str	r3, [r7, #52]	; 0x34
 8007174:	2300      	movs	r3, #0
 8007176:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007178:	2300      	movs	r3, #0
 800717a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007180:	4b59      	ldr	r3, [pc, #356]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f003 030c 	and.w	r3, r3, #12
 8007188:	2b08      	cmp	r3, #8
 800718a:	d00d      	beq.n	80071a8 <HAL_RCC_GetSysClockFreq+0x40>
 800718c:	2b08      	cmp	r3, #8
 800718e:	f200 80a1 	bhi.w	80072d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8007192:	2b00      	cmp	r3, #0
 8007194:	d002      	beq.n	800719c <HAL_RCC_GetSysClockFreq+0x34>
 8007196:	2b04      	cmp	r3, #4
 8007198:	d003      	beq.n	80071a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800719a:	e09b      	b.n	80072d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800719c:	4b53      	ldr	r3, [pc, #332]	; (80072ec <HAL_RCC_GetSysClockFreq+0x184>)
 800719e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80071a0:	e09b      	b.n	80072da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071a2:	4b53      	ldr	r3, [pc, #332]	; (80072f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80071a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071a6:	e098      	b.n	80072da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071a8:	4b4f      	ldr	r3, [pc, #316]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071b2:	4b4d      	ldr	r3, [pc, #308]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d028      	beq.n	8007210 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071be:	4b4a      	ldr	r3, [pc, #296]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	099b      	lsrs	r3, r3, #6
 80071c4:	2200      	movs	r2, #0
 80071c6:	623b      	str	r3, [r7, #32]
 80071c8:	627a      	str	r2, [r7, #36]	; 0x24
 80071ca:	6a3b      	ldr	r3, [r7, #32]
 80071cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80071d0:	2100      	movs	r1, #0
 80071d2:	4b47      	ldr	r3, [pc, #284]	; (80072f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80071d4:	fb03 f201 	mul.w	r2, r3, r1
 80071d8:	2300      	movs	r3, #0
 80071da:	fb00 f303 	mul.w	r3, r0, r3
 80071de:	4413      	add	r3, r2
 80071e0:	4a43      	ldr	r2, [pc, #268]	; (80072f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80071e2:	fba0 1202 	umull	r1, r2, r0, r2
 80071e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071e8:	460a      	mov	r2, r1
 80071ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80071ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071ee:	4413      	add	r3, r2
 80071f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071f4:	2200      	movs	r2, #0
 80071f6:	61bb      	str	r3, [r7, #24]
 80071f8:	61fa      	str	r2, [r7, #28]
 80071fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007202:	f7f9 fd49 	bl	8000c98 <__aeabi_uldivmod>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4613      	mov	r3, r2
 800720c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800720e:	e053      	b.n	80072b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007210:	4b35      	ldr	r3, [pc, #212]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	099b      	lsrs	r3, r3, #6
 8007216:	2200      	movs	r2, #0
 8007218:	613b      	str	r3, [r7, #16]
 800721a:	617a      	str	r2, [r7, #20]
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007222:	f04f 0b00 	mov.w	fp, #0
 8007226:	4652      	mov	r2, sl
 8007228:	465b      	mov	r3, fp
 800722a:	f04f 0000 	mov.w	r0, #0
 800722e:	f04f 0100 	mov.w	r1, #0
 8007232:	0159      	lsls	r1, r3, #5
 8007234:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007238:	0150      	lsls	r0, r2, #5
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	ebb2 080a 	subs.w	r8, r2, sl
 8007242:	eb63 090b 	sbc.w	r9, r3, fp
 8007246:	f04f 0200 	mov.w	r2, #0
 800724a:	f04f 0300 	mov.w	r3, #0
 800724e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007252:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007256:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800725a:	ebb2 0408 	subs.w	r4, r2, r8
 800725e:	eb63 0509 	sbc.w	r5, r3, r9
 8007262:	f04f 0200 	mov.w	r2, #0
 8007266:	f04f 0300 	mov.w	r3, #0
 800726a:	00eb      	lsls	r3, r5, #3
 800726c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007270:	00e2      	lsls	r2, r4, #3
 8007272:	4614      	mov	r4, r2
 8007274:	461d      	mov	r5, r3
 8007276:	eb14 030a 	adds.w	r3, r4, sl
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	eb45 030b 	adc.w	r3, r5, fp
 8007280:	607b      	str	r3, [r7, #4]
 8007282:	f04f 0200 	mov.w	r2, #0
 8007286:	f04f 0300 	mov.w	r3, #0
 800728a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800728e:	4629      	mov	r1, r5
 8007290:	028b      	lsls	r3, r1, #10
 8007292:	4621      	mov	r1, r4
 8007294:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007298:	4621      	mov	r1, r4
 800729a:	028a      	lsls	r2, r1, #10
 800729c:	4610      	mov	r0, r2
 800729e:	4619      	mov	r1, r3
 80072a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a2:	2200      	movs	r2, #0
 80072a4:	60bb      	str	r3, [r7, #8]
 80072a6:	60fa      	str	r2, [r7, #12]
 80072a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072ac:	f7f9 fcf4 	bl	8000c98 <__aeabi_uldivmod>
 80072b0:	4602      	mov	r2, r0
 80072b2:	460b      	mov	r3, r1
 80072b4:	4613      	mov	r3, r2
 80072b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072b8:	4b0b      	ldr	r3, [pc, #44]	; (80072e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	0c1b      	lsrs	r3, r3, #16
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	3301      	adds	r3, #1
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80072c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80072ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80072d2:	e002      	b.n	80072da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072d4:	4b05      	ldr	r3, [pc, #20]	; (80072ec <HAL_RCC_GetSysClockFreq+0x184>)
 80072d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80072d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3740      	adds	r7, #64	; 0x40
 80072e0:	46bd      	mov	sp, r7
 80072e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072e6:	bf00      	nop
 80072e8:	40023800 	.word	0x40023800
 80072ec:	00f42400 	.word	0x00f42400
 80072f0:	017d7840 	.word	0x017d7840

080072f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072f4:	b480      	push	{r7}
 80072f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072f8:	4b03      	ldr	r3, [pc, #12]	; (8007308 <HAL_RCC_GetHCLKFreq+0x14>)
 80072fa:	681b      	ldr	r3, [r3, #0]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	2000008c 	.word	0x2000008c

0800730c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007310:	f7ff fff0 	bl	80072f4 <HAL_RCC_GetHCLKFreq>
 8007314:	4602      	mov	r2, r0
 8007316:	4b05      	ldr	r3, [pc, #20]	; (800732c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	0a9b      	lsrs	r3, r3, #10
 800731c:	f003 0307 	and.w	r3, r3, #7
 8007320:	4903      	ldr	r1, [pc, #12]	; (8007330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007322:	5ccb      	ldrb	r3, [r1, r3]
 8007324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007328:	4618      	mov	r0, r3
 800732a:	bd80      	pop	{r7, pc}
 800732c:	40023800 	.word	0x40023800
 8007330:	0800f918 	.word	0x0800f918

08007334 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007338:	f7ff ffdc 	bl	80072f4 <HAL_RCC_GetHCLKFreq>
 800733c:	4602      	mov	r2, r0
 800733e:	4b05      	ldr	r3, [pc, #20]	; (8007354 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	0b5b      	lsrs	r3, r3, #13
 8007344:	f003 0307 	and.w	r3, r3, #7
 8007348:	4903      	ldr	r1, [pc, #12]	; (8007358 <HAL_RCC_GetPCLK2Freq+0x24>)
 800734a:	5ccb      	ldrb	r3, [r1, r3]
 800734c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007350:	4618      	mov	r0, r3
 8007352:	bd80      	pop	{r7, pc}
 8007354:	40023800 	.word	0x40023800
 8007358:	0800f918 	.word	0x0800f918

0800735c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d101      	bne.n	800736e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e07b      	b.n	8007466 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007372:	2b00      	cmp	r3, #0
 8007374:	d108      	bne.n	8007388 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800737e:	d009      	beq.n	8007394 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	61da      	str	r2, [r3, #28]
 8007386:	e005      	b.n	8007394 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d106      	bne.n	80073b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7fd fe5a 	bl	8005068 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2202      	movs	r2, #2
 80073b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80073dc:	431a      	orrs	r2, r3
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073e6:	431a      	orrs	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	f003 0302 	and.w	r3, r3, #2
 80073f0:	431a      	orrs	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	695b      	ldr	r3, [r3, #20]
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007404:	431a      	orrs	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	69db      	ldr	r3, [r3, #28]
 800740a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800740e:	431a      	orrs	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a1b      	ldr	r3, [r3, #32]
 8007414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007418:	ea42 0103 	orr.w	r1, r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007420:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	430a      	orrs	r2, r1
 800742a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	0c1b      	lsrs	r3, r3, #16
 8007432:	f003 0104 	and.w	r1, r3, #4
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743a:	f003 0210 	and.w	r2, r3, #16
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69da      	ldr	r2, [r3, #28]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007454:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b088      	sub	sp, #32
 8007472:	af00      	add	r7, sp, #0
 8007474:	60f8      	str	r0, [r7, #12]
 8007476:	60b9      	str	r1, [r7, #8]
 8007478:	603b      	str	r3, [r7, #0]
 800747a:	4613      	mov	r3, r2
 800747c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007488:	2b01      	cmp	r3, #1
 800748a:	d101      	bne.n	8007490 <HAL_SPI_Transmit+0x22>
 800748c:	2302      	movs	r3, #2
 800748e:	e126      	b.n	80076de <HAL_SPI_Transmit+0x270>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007498:	f7fe f98a 	bl	80057b0 <HAL_GetTick>
 800749c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800749e:	88fb      	ldrh	r3, [r7, #6]
 80074a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d002      	beq.n	80074b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80074ae:	2302      	movs	r3, #2
 80074b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074b2:	e10b      	b.n	80076cc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d002      	beq.n	80074c0 <HAL_SPI_Transmit+0x52>
 80074ba:	88fb      	ldrh	r3, [r7, #6]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d102      	bne.n	80074c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074c4:	e102      	b.n	80076cc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2203      	movs	r2, #3
 80074ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	88fa      	ldrh	r2, [r7, #6]
 80074de:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	88fa      	ldrh	r2, [r7, #6]
 80074e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800750c:	d10f      	bne.n	800752e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800751c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800752c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007538:	2b40      	cmp	r3, #64	; 0x40
 800753a:	d007      	beq.n	800754c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800754a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007554:	d14b      	bne.n	80075ee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <HAL_SPI_Transmit+0xf6>
 800755e:	8afb      	ldrh	r3, [r7, #22]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d13e      	bne.n	80075e2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007568:	881a      	ldrh	r2, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007574:	1c9a      	adds	r2, r3, #2
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800757e:	b29b      	uxth	r3, r3
 8007580:	3b01      	subs	r3, #1
 8007582:	b29a      	uxth	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007588:	e02b      	b.n	80075e2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	f003 0302 	and.w	r3, r3, #2
 8007594:	2b02      	cmp	r3, #2
 8007596:	d112      	bne.n	80075be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759c:	881a      	ldrh	r2, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a8:	1c9a      	adds	r2, r3, #2
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	3b01      	subs	r3, #1
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80075bc:	e011      	b.n	80075e2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075be:	f7fe f8f7 	bl	80057b0 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d803      	bhi.n	80075d6 <HAL_SPI_Transmit+0x168>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d4:	d102      	bne.n	80075dc <HAL_SPI_Transmit+0x16e>
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d102      	bne.n	80075e2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075e0:	e074      	b.n	80076cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1ce      	bne.n	800758a <HAL_SPI_Transmit+0x11c>
 80075ec:	e04c      	b.n	8007688 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <HAL_SPI_Transmit+0x18e>
 80075f6:	8afb      	ldrh	r3, [r7, #22]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d140      	bne.n	800767e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	330c      	adds	r3, #12
 8007606:	7812      	ldrb	r2, [r2, #0]
 8007608:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760e:	1c5a      	adds	r2, r3, #1
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007618:	b29b      	uxth	r3, r3
 800761a:	3b01      	subs	r3, #1
 800761c:	b29a      	uxth	r2, r3
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007622:	e02c      	b.n	800767e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f003 0302 	and.w	r3, r3, #2
 800762e:	2b02      	cmp	r3, #2
 8007630:	d113      	bne.n	800765a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	330c      	adds	r3, #12
 800763c:	7812      	ldrb	r2, [r2, #0]
 800763e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007644:	1c5a      	adds	r2, r3, #1
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800764e:	b29b      	uxth	r3, r3
 8007650:	3b01      	subs	r3, #1
 8007652:	b29a      	uxth	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	86da      	strh	r2, [r3, #54]	; 0x36
 8007658:	e011      	b.n	800767e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800765a:	f7fe f8a9 	bl	80057b0 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	683a      	ldr	r2, [r7, #0]
 8007666:	429a      	cmp	r2, r3
 8007668:	d803      	bhi.n	8007672 <HAL_SPI_Transmit+0x204>
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007670:	d102      	bne.n	8007678 <HAL_SPI_Transmit+0x20a>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d102      	bne.n	800767e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800767c:	e026      	b.n	80076cc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007682:	b29b      	uxth	r3, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1cd      	bne.n	8007624 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 fbcb 	bl	8007e28 <SPI_EndRxTxTransaction>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d002      	beq.n	800769e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2220      	movs	r2, #32
 800769c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10a      	bne.n	80076bc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076a6:	2300      	movs	r3, #0
 80076a8:	613b      	str	r3, [r7, #16]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	613b      	str	r3, [r7, #16]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	613b      	str	r3, [r7, #16]
 80076ba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d002      	beq.n	80076ca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	77fb      	strb	r3, [r7, #31]
 80076c8:	e000      	b.n	80076cc <HAL_SPI_Transmit+0x25e>
  }

error:
 80076ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80076dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3720      	adds	r7, #32
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b088      	sub	sp, #32
 80076ea:	af02      	add	r7, sp, #8
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	603b      	str	r3, [r7, #0]
 80076f2:	4613      	mov	r3, r2
 80076f4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007702:	d112      	bne.n	800772a <HAL_SPI_Receive+0x44>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10e      	bne.n	800772a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2204      	movs	r2, #4
 8007710:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007714:	88fa      	ldrh	r2, [r7, #6]
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	4613      	mov	r3, r2
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	68b9      	ldr	r1, [r7, #8]
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f000 f8f1 	bl	8007908 <HAL_SPI_TransmitReceive>
 8007726:	4603      	mov	r3, r0
 8007728:	e0ea      	b.n	8007900 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007730:	2b01      	cmp	r3, #1
 8007732:	d101      	bne.n	8007738 <HAL_SPI_Receive+0x52>
 8007734:	2302      	movs	r3, #2
 8007736:	e0e3      	b.n	8007900 <HAL_SPI_Receive+0x21a>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007740:	f7fe f836 	bl	80057b0 <HAL_GetTick>
 8007744:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b01      	cmp	r3, #1
 8007750:	d002      	beq.n	8007758 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007752:	2302      	movs	r3, #2
 8007754:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007756:	e0ca      	b.n	80078ee <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d002      	beq.n	8007764 <HAL_SPI_Receive+0x7e>
 800775e:	88fb      	ldrh	r3, [r7, #6]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d102      	bne.n	800776a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007768:	e0c1      	b.n	80078ee <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2204      	movs	r2, #4
 800776e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2200      	movs	r2, #0
 8007776:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	88fa      	ldrh	r2, [r7, #6]
 8007782:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	88fa      	ldrh	r2, [r7, #6]
 8007788:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077b0:	d10f      	bne.n	80077d2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077dc:	2b40      	cmp	r3, #64	; 0x40
 80077de:	d007      	beq.n	80077f0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077ee:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d162      	bne.n	80078be <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80077f8:	e02e      	b.n	8007858 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	2b01      	cmp	r3, #1
 8007806:	d115      	bne.n	8007834 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f103 020c 	add.w	r2, r3, #12
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007814:	7812      	ldrb	r2, [r2, #0]
 8007816:	b2d2      	uxtb	r2, r2
 8007818:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781e:	1c5a      	adds	r2, r3, #1
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007828:	b29b      	uxth	r3, r3
 800782a:	3b01      	subs	r3, #1
 800782c:	b29a      	uxth	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007832:	e011      	b.n	8007858 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007834:	f7fd ffbc 	bl	80057b0 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	429a      	cmp	r2, r3
 8007842:	d803      	bhi.n	800784c <HAL_SPI_Receive+0x166>
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800784a:	d102      	bne.n	8007852 <HAL_SPI_Receive+0x16c>
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d102      	bne.n	8007858 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007856:	e04a      	b.n	80078ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800785c:	b29b      	uxth	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1cb      	bne.n	80077fa <HAL_SPI_Receive+0x114>
 8007862:	e031      	b.n	80078c8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b01      	cmp	r3, #1
 8007870:	d113      	bne.n	800789a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68da      	ldr	r2, [r3, #12]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787c:	b292      	uxth	r2, r2
 800787e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007884:	1c9a      	adds	r2, r3, #2
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800788e:	b29b      	uxth	r3, r3
 8007890:	3b01      	subs	r3, #1
 8007892:	b29a      	uxth	r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007898:	e011      	b.n	80078be <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800789a:	f7fd ff89 	bl	80057b0 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d803      	bhi.n	80078b2 <HAL_SPI_Receive+0x1cc>
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b0:	d102      	bne.n	80078b8 <HAL_SPI_Receive+0x1d2>
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d102      	bne.n	80078be <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80078b8:	2303      	movs	r3, #3
 80078ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80078bc:	e017      	b.n	80078ee <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d1cd      	bne.n	8007864 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f000 fa45 	bl	8007d5c <SPI_EndRxTransaction>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2220      	movs	r2, #32
 80078dc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d002      	beq.n	80078ec <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	75fb      	strb	r3, [r7, #23]
 80078ea:	e000      	b.n	80078ee <HAL_SPI_Receive+0x208>
  }

error :
 80078ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80078fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007900:	4618      	mov	r0, r3
 8007902:	3718      	adds	r7, #24
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08c      	sub	sp, #48	; 0x30
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007916:	2301      	movs	r3, #1
 8007918:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007926:	2b01      	cmp	r3, #1
 8007928:	d101      	bne.n	800792e <HAL_SPI_TransmitReceive+0x26>
 800792a:	2302      	movs	r3, #2
 800792c:	e18a      	b.n	8007c44 <HAL_SPI_TransmitReceive+0x33c>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007936:	f7fd ff3b 	bl	80057b0 <HAL_GetTick>
 800793a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800794c:	887b      	ldrh	r3, [r7, #2]
 800794e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007950:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007954:	2b01      	cmp	r3, #1
 8007956:	d00f      	beq.n	8007978 <HAL_SPI_TransmitReceive+0x70>
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800795e:	d107      	bne.n	8007970 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d103      	bne.n	8007970 <HAL_SPI_TransmitReceive+0x68>
 8007968:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800796c:	2b04      	cmp	r3, #4
 800796e:	d003      	beq.n	8007978 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007970:	2302      	movs	r3, #2
 8007972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007976:	e15b      	b.n	8007c30 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d005      	beq.n	800798a <HAL_SPI_TransmitReceive+0x82>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d002      	beq.n	800798a <HAL_SPI_TransmitReceive+0x82>
 8007984:	887b      	ldrh	r3, [r7, #2]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d103      	bne.n	8007992 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007990:	e14e      	b.n	8007c30 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b04      	cmp	r3, #4
 800799c:	d003      	beq.n	80079a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2205      	movs	r2, #5
 80079a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	887a      	ldrh	r2, [r7, #2]
 80079b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	887a      	ldrh	r2, [r7, #2]
 80079bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	887a      	ldrh	r2, [r7, #2]
 80079c8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	887a      	ldrh	r2, [r7, #2]
 80079ce:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2200      	movs	r2, #0
 80079da:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e6:	2b40      	cmp	r3, #64	; 0x40
 80079e8:	d007      	beq.n	80079fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a02:	d178      	bne.n	8007af6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d002      	beq.n	8007a12 <HAL_SPI_TransmitReceive+0x10a>
 8007a0c:	8b7b      	ldrh	r3, [r7, #26]
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d166      	bne.n	8007ae0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a16:	881a      	ldrh	r2, [r3, #0]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a22:	1c9a      	adds	r2, r3, #2
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	3b01      	subs	r3, #1
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a36:	e053      	b.n	8007ae0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f003 0302 	and.w	r3, r3, #2
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d11b      	bne.n	8007a7e <HAL_SPI_TransmitReceive+0x176>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d016      	beq.n	8007a7e <HAL_SPI_TransmitReceive+0x176>
 8007a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d113      	bne.n	8007a7e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5a:	881a      	ldrh	r2, [r3, #0]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a66:	1c9a      	adds	r2, r3, #2
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	3b01      	subs	r3, #1
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d119      	bne.n	8007ac0 <HAL_SPI_TransmitReceive+0x1b8>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d014      	beq.n	8007ac0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68da      	ldr	r2, [r3, #12]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa0:	b292      	uxth	r2, r2
 8007aa2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa8:	1c9a      	adds	r2, r3, #2
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007abc:	2301      	movs	r3, #1
 8007abe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ac0:	f7fd fe76 	bl	80057b0 <HAL_GetTick>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac8:	1ad3      	subs	r3, r2, r3
 8007aca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d807      	bhi.n	8007ae0 <HAL_SPI_TransmitReceive+0x1d8>
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad6:	d003      	beq.n	8007ae0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007ade:	e0a7      	b.n	8007c30 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1a6      	bne.n	8007a38 <HAL_SPI_TransmitReceive+0x130>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1a1      	bne.n	8007a38 <HAL_SPI_TransmitReceive+0x130>
 8007af4:	e07c      	b.n	8007bf0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d002      	beq.n	8007b04 <HAL_SPI_TransmitReceive+0x1fc>
 8007afe:	8b7b      	ldrh	r3, [r7, #26]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d16b      	bne.n	8007bdc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	330c      	adds	r3, #12
 8007b0e:	7812      	ldrb	r2, [r2, #0]
 8007b10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b16:	1c5a      	adds	r2, r3, #1
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	3b01      	subs	r3, #1
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b2a:	e057      	b.n	8007bdc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f003 0302 	and.w	r3, r3, #2
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d11c      	bne.n	8007b74 <HAL_SPI_TransmitReceive+0x26c>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d017      	beq.n	8007b74 <HAL_SPI_TransmitReceive+0x26c>
 8007b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d114      	bne.n	8007b74 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	330c      	adds	r3, #12
 8007b54:	7812      	ldrb	r2, [r2, #0]
 8007b56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5c:	1c5a      	adds	r2, r3, #1
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d119      	bne.n	8007bb6 <HAL_SPI_TransmitReceive+0x2ae>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d014      	beq.n	8007bb6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68da      	ldr	r2, [r3, #12]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b96:	b2d2      	uxtb	r2, r2
 8007b98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9e:	1c5a      	adds	r2, r3, #1
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	3b01      	subs	r3, #1
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007bb6:	f7fd fdfb 	bl	80057b0 <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d803      	bhi.n	8007bce <HAL_SPI_TransmitReceive+0x2c6>
 8007bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bcc:	d102      	bne.n	8007bd4 <HAL_SPI_TransmitReceive+0x2cc>
 8007bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d103      	bne.n	8007bdc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007bda:	e029      	b.n	8007c30 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1a2      	bne.n	8007b2c <HAL_SPI_TransmitReceive+0x224>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d19d      	bne.n	8007b2c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007bf4:	68f8      	ldr	r0, [r7, #12]
 8007bf6:	f000 f917 	bl	8007e28 <SPI_EndRxTxTransaction>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d006      	beq.n	8007c0e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2220      	movs	r2, #32
 8007c0a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007c0c:	e010      	b.n	8007c30 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10b      	bne.n	8007c2e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007c16:	2300      	movs	r3, #0
 8007c18:	617b      	str	r3, [r7, #20]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	617b      	str	r3, [r7, #20]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	617b      	str	r3, [r7, #20]
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	e000      	b.n	8007c30 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007c2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3730      	adds	r7, #48	; 0x30
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b088      	sub	sp, #32
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	603b      	str	r3, [r7, #0]
 8007c58:	4613      	mov	r3, r2
 8007c5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c5c:	f7fd fda8 	bl	80057b0 <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c64:	1a9b      	subs	r3, r3, r2
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	4413      	add	r3, r2
 8007c6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c6c:	f7fd fda0 	bl	80057b0 <HAL_GetTick>
 8007c70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c72:	4b39      	ldr	r3, [pc, #228]	; (8007d58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	015b      	lsls	r3, r3, #5
 8007c78:	0d1b      	lsrs	r3, r3, #20
 8007c7a:	69fa      	ldr	r2, [r7, #28]
 8007c7c:	fb02 f303 	mul.w	r3, r2, r3
 8007c80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c82:	e054      	b.n	8007d2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8a:	d050      	beq.n	8007d2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c8c:	f7fd fd90 	bl	80057b0 <HAL_GetTick>
 8007c90:	4602      	mov	r2, r0
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	69fa      	ldr	r2, [r7, #28]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d902      	bls.n	8007ca2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d13d      	bne.n	8007d1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	685a      	ldr	r2, [r3, #4]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007cb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cba:	d111      	bne.n	8007ce0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cc4:	d004      	beq.n	8007cd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cce:	d107      	bne.n	8007ce0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ce8:	d10f      	bne.n	8007d0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007cf8:	601a      	str	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e017      	b.n	8007d4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d101      	bne.n	8007d28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	689a      	ldr	r2, [r3, #8]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	4013      	ands	r3, r2
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	bf0c      	ite	eq
 8007d3e:	2301      	moveq	r3, #1
 8007d40:	2300      	movne	r3, #0
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	461a      	mov	r2, r3
 8007d46:	79fb      	ldrb	r3, [r7, #7]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d19b      	bne.n	8007c84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3720      	adds	r7, #32
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	2000008c 	.word	0x2000008c

08007d5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b086      	sub	sp, #24
 8007d60:	af02      	add	r7, sp, #8
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d70:	d111      	bne.n	8007d96 <SPI_EndRxTransaction+0x3a>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d7a:	d004      	beq.n	8007d86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d84:	d107      	bne.n	8007d96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d94:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d9e:	d12a      	bne.n	8007df6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007da8:	d012      	beq.n	8007dd0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	2200      	movs	r2, #0
 8007db2:	2180      	movs	r1, #128	; 0x80
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f7ff ff49 	bl	8007c4c <SPI_WaitFlagStateUntilTimeout>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d02d      	beq.n	8007e1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc4:	f043 0220 	orr.w	r2, r3, #32
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e026      	b.n	8007e1e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	2101      	movs	r1, #1
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f7ff ff36 	bl	8007c4c <SPI_WaitFlagStateUntilTimeout>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d01a      	beq.n	8007e1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dea:	f043 0220 	orr.w	r2, r3, #32
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e013      	b.n	8007e1e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	2101      	movs	r1, #1
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f7ff ff23 	bl	8007c4c <SPI_WaitFlagStateUntilTimeout>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d007      	beq.n	8007e1c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e10:	f043 0220 	orr.w	r2, r3, #32
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e000      	b.n	8007e1e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
	...

08007e28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b088      	sub	sp, #32
 8007e2c:	af02      	add	r7, sp, #8
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007e34:	4b1b      	ldr	r3, [pc, #108]	; (8007ea4 <SPI_EndRxTxTransaction+0x7c>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a1b      	ldr	r2, [pc, #108]	; (8007ea8 <SPI_EndRxTxTransaction+0x80>)
 8007e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e3e:	0d5b      	lsrs	r3, r3, #21
 8007e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e44:	fb02 f303 	mul.w	r3, r2, r3
 8007e48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e52:	d112      	bne.n	8007e7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2180      	movs	r1, #128	; 0x80
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f7ff fef4 	bl	8007c4c <SPI_WaitFlagStateUntilTimeout>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d016      	beq.n	8007e98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e6e:	f043 0220 	orr.w	r2, r3, #32
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e00f      	b.n	8007e9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00a      	beq.n	8007e96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e90:	2b80      	cmp	r3, #128	; 0x80
 8007e92:	d0f2      	beq.n	8007e7a <SPI_EndRxTxTransaction+0x52>
 8007e94:	e000      	b.n	8007e98 <SPI_EndRxTxTransaction+0x70>
        break;
 8007e96:	bf00      	nop
  }

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3718      	adds	r7, #24
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	2000008c 	.word	0x2000008c
 8007ea8:	165e9f81 	.word	0x165e9f81

08007eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e041      	b.n	8007f42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d106      	bne.n	8007ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f7fd fb3a 	bl	800554c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2202      	movs	r2, #2
 8007edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	3304      	adds	r3, #4
 8007ee8:	4619      	mov	r1, r3
 8007eea:	4610      	mov	r0, r2
 8007eec:	f000 f9c0 	bl	8008270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
	...

08007f4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b085      	sub	sp, #20
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d001      	beq.n	8007f64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e044      	b.n	8007fee <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2202      	movs	r2, #2
 8007f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68da      	ldr	r2, [r3, #12]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f042 0201 	orr.w	r2, r2, #1
 8007f7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a1e      	ldr	r2, [pc, #120]	; (8007ffc <HAL_TIM_Base_Start_IT+0xb0>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d018      	beq.n	8007fb8 <HAL_TIM_Base_Start_IT+0x6c>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f8e:	d013      	beq.n	8007fb8 <HAL_TIM_Base_Start_IT+0x6c>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a1a      	ldr	r2, [pc, #104]	; (8008000 <HAL_TIM_Base_Start_IT+0xb4>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d00e      	beq.n	8007fb8 <HAL_TIM_Base_Start_IT+0x6c>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a19      	ldr	r2, [pc, #100]	; (8008004 <HAL_TIM_Base_Start_IT+0xb8>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d009      	beq.n	8007fb8 <HAL_TIM_Base_Start_IT+0x6c>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a17      	ldr	r2, [pc, #92]	; (8008008 <HAL_TIM_Base_Start_IT+0xbc>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d004      	beq.n	8007fb8 <HAL_TIM_Base_Start_IT+0x6c>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a16      	ldr	r2, [pc, #88]	; (800800c <HAL_TIM_Base_Start_IT+0xc0>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d111      	bne.n	8007fdc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f003 0307 	and.w	r3, r3, #7
 8007fc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2b06      	cmp	r3, #6
 8007fc8:	d010      	beq.n	8007fec <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f042 0201 	orr.w	r2, r2, #1
 8007fd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fda:	e007      	b.n	8007fec <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f042 0201 	orr.w	r2, r2, #1
 8007fea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	40010000 	.word	0x40010000
 8008000:	40000400 	.word	0x40000400
 8008004:	40000800 	.word	0x40000800
 8008008:	40000c00 	.word	0x40000c00
 800800c:	40014000 	.word	0x40014000

08008010 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	f003 0302 	and.w	r3, r3, #2
 8008022:	2b02      	cmp	r3, #2
 8008024:	d122      	bne.n	800806c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	f003 0302 	and.w	r3, r3, #2
 8008030:	2b02      	cmp	r3, #2
 8008032:	d11b      	bne.n	800806c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f06f 0202 	mvn.w	r2, #2
 800803c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	699b      	ldr	r3, [r3, #24]
 800804a:	f003 0303 	and.w	r3, r3, #3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f8ee 	bl	8008234 <HAL_TIM_IC_CaptureCallback>
 8008058:	e005      	b.n	8008066 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f8e0 	bl	8008220 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 f8f1 	bl	8008248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	f003 0304 	and.w	r3, r3, #4
 8008076:	2b04      	cmp	r3, #4
 8008078:	d122      	bne.n	80080c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	f003 0304 	and.w	r3, r3, #4
 8008084:	2b04      	cmp	r3, #4
 8008086:	d11b      	bne.n	80080c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f06f 0204 	mvn.w	r2, #4
 8008090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2202      	movs	r2, #2
 8008096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d003      	beq.n	80080ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f8c4 	bl	8008234 <HAL_TIM_IC_CaptureCallback>
 80080ac:	e005      	b.n	80080ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f8b6 	bl	8008220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f8c7 	bl	8008248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	f003 0308 	and.w	r3, r3, #8
 80080ca:	2b08      	cmp	r3, #8
 80080cc:	d122      	bne.n	8008114 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	f003 0308 	and.w	r3, r3, #8
 80080d8:	2b08      	cmp	r3, #8
 80080da:	d11b      	bne.n	8008114 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f06f 0208 	mvn.w	r2, #8
 80080e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2204      	movs	r2, #4
 80080ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	f003 0303 	and.w	r3, r3, #3
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f89a 	bl	8008234 <HAL_TIM_IC_CaptureCallback>
 8008100:	e005      	b.n	800810e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f88c 	bl	8008220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 f89d 	bl	8008248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	f003 0310 	and.w	r3, r3, #16
 800811e:	2b10      	cmp	r3, #16
 8008120:	d122      	bne.n	8008168 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	f003 0310 	and.w	r3, r3, #16
 800812c:	2b10      	cmp	r3, #16
 800812e:	d11b      	bne.n	8008168 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f06f 0210 	mvn.w	r2, #16
 8008138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2208      	movs	r2, #8
 800813e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800814a:	2b00      	cmp	r3, #0
 800814c:	d003      	beq.n	8008156 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f870 	bl	8008234 <HAL_TIM_IC_CaptureCallback>
 8008154:	e005      	b.n	8008162 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f862 	bl	8008220 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f873 	bl	8008248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	2b01      	cmp	r3, #1
 8008174:	d10e      	bne.n	8008194 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	f003 0301 	and.w	r3, r3, #1
 8008180:	2b01      	cmp	r3, #1
 8008182:	d107      	bne.n	8008194 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f06f 0201 	mvn.w	r2, #1
 800818c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7f9 f816 	bl	80011c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800819e:	2b80      	cmp	r3, #128	; 0x80
 80081a0:	d10e      	bne.n	80081c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ac:	2b80      	cmp	r3, #128	; 0x80
 80081ae:	d107      	bne.n	80081c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80081b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f8e2 	bl	8008384 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ca:	2b40      	cmp	r3, #64	; 0x40
 80081cc:	d10e      	bne.n	80081ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d8:	2b40      	cmp	r3, #64	; 0x40
 80081da:	d107      	bne.n	80081ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f838 	bl	800825c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	691b      	ldr	r3, [r3, #16]
 80081f2:	f003 0320 	and.w	r3, r3, #32
 80081f6:	2b20      	cmp	r3, #32
 80081f8:	d10e      	bne.n	8008218 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68db      	ldr	r3, [r3, #12]
 8008200:	f003 0320 	and.w	r3, r3, #32
 8008204:	2b20      	cmp	r3, #32
 8008206:	d107      	bne.n	8008218 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f06f 0220 	mvn.w	r2, #32
 8008210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f8ac 	bl	8008370 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008218:	bf00      	nop
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800823c:	bf00      	nop
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008248:	b480      	push	{r7}
 800824a:	b083      	sub	sp, #12
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a34      	ldr	r2, [pc, #208]	; (8008354 <TIM_Base_SetConfig+0xe4>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d00f      	beq.n	80082a8 <TIM_Base_SetConfig+0x38>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800828e:	d00b      	beq.n	80082a8 <TIM_Base_SetConfig+0x38>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a31      	ldr	r2, [pc, #196]	; (8008358 <TIM_Base_SetConfig+0xe8>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d007      	beq.n	80082a8 <TIM_Base_SetConfig+0x38>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a30      	ldr	r2, [pc, #192]	; (800835c <TIM_Base_SetConfig+0xec>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d003      	beq.n	80082a8 <TIM_Base_SetConfig+0x38>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4a2f      	ldr	r2, [pc, #188]	; (8008360 <TIM_Base_SetConfig+0xf0>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d108      	bne.n	80082ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a25      	ldr	r2, [pc, #148]	; (8008354 <TIM_Base_SetConfig+0xe4>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d01b      	beq.n	80082fa <TIM_Base_SetConfig+0x8a>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082c8:	d017      	beq.n	80082fa <TIM_Base_SetConfig+0x8a>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a22      	ldr	r2, [pc, #136]	; (8008358 <TIM_Base_SetConfig+0xe8>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d013      	beq.n	80082fa <TIM_Base_SetConfig+0x8a>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a21      	ldr	r2, [pc, #132]	; (800835c <TIM_Base_SetConfig+0xec>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d00f      	beq.n	80082fa <TIM_Base_SetConfig+0x8a>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	4a20      	ldr	r2, [pc, #128]	; (8008360 <TIM_Base_SetConfig+0xf0>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d00b      	beq.n	80082fa <TIM_Base_SetConfig+0x8a>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a1f      	ldr	r2, [pc, #124]	; (8008364 <TIM_Base_SetConfig+0xf4>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d007      	beq.n	80082fa <TIM_Base_SetConfig+0x8a>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a1e      	ldr	r2, [pc, #120]	; (8008368 <TIM_Base_SetConfig+0xf8>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d003      	beq.n	80082fa <TIM_Base_SetConfig+0x8a>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a1d      	ldr	r2, [pc, #116]	; (800836c <TIM_Base_SetConfig+0xfc>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d108      	bne.n	800830c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	4313      	orrs	r3, r2
 800830a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	4313      	orrs	r3, r2
 8008318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	689a      	ldr	r2, [r3, #8]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4a08      	ldr	r2, [pc, #32]	; (8008354 <TIM_Base_SetConfig+0xe4>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d103      	bne.n	8008340 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	691a      	ldr	r2, [r3, #16]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	615a      	str	r2, [r3, #20]
}
 8008346:	bf00      	nop
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	40010000 	.word	0x40010000
 8008358:	40000400 	.word	0x40000400
 800835c:	40000800 	.word	0x40000800
 8008360:	40000c00 	.word	0x40000c00
 8008364:	40014000 	.word	0x40014000
 8008368:	40014400 	.word	0x40014400
 800836c:	40014800 	.word	0x40014800

08008370 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d101      	bne.n	80083aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	e03f      	b.n	800842a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d106      	bne.n	80083c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f7fd f916 	bl	80055f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2224      	movs	r2, #36	; 0x24
 80083c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68da      	ldr	r2, [r3, #12]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80083dc:	6878      	ldr	r0, [r7, #4]
 80083de:	f000 f929 	bl	8008634 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	691a      	ldr	r2, [r3, #16]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	695a      	ldr	r2, [r3, #20]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008400:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68da      	ldr	r2, [r3, #12]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008410:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2220      	movs	r2, #32
 800841c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2220      	movs	r2, #32
 8008424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008428:	2300      	movs	r3, #0
}
 800842a:	4618      	mov	r0, r3
 800842c:	3708      	adds	r7, #8
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b08a      	sub	sp, #40	; 0x28
 8008436:	af02      	add	r7, sp, #8
 8008438:	60f8      	str	r0, [r7, #12]
 800843a:	60b9      	str	r1, [r7, #8]
 800843c:	603b      	str	r3, [r7, #0]
 800843e:	4613      	mov	r3, r2
 8008440:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008442:	2300      	movs	r3, #0
 8008444:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800844c:	b2db      	uxtb	r3, r3
 800844e:	2b20      	cmp	r3, #32
 8008450:	d17c      	bne.n	800854c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <HAL_UART_Transmit+0x2c>
 8008458:	88fb      	ldrh	r3, [r7, #6]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	e075      	b.n	800854e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008468:	2b01      	cmp	r3, #1
 800846a:	d101      	bne.n	8008470 <HAL_UART_Transmit+0x3e>
 800846c:	2302      	movs	r3, #2
 800846e:	e06e      	b.n	800854e <HAL_UART_Transmit+0x11c>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2221      	movs	r2, #33	; 0x21
 8008482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008486:	f7fd f993 	bl	80057b0 <HAL_GetTick>
 800848a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	88fa      	ldrh	r2, [r7, #6]
 8008490:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	88fa      	ldrh	r2, [r7, #6]
 8008496:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084a0:	d108      	bne.n	80084b4 <HAL_UART_Transmit+0x82>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	691b      	ldr	r3, [r3, #16]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d104      	bne.n	80084b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80084aa:	2300      	movs	r3, #0
 80084ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	61bb      	str	r3, [r7, #24]
 80084b2:	e003      	b.n	80084bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80084b8:	2300      	movs	r3, #0
 80084ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80084c4:	e02a      	b.n	800851c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	9300      	str	r3, [sp, #0]
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	2200      	movs	r2, #0
 80084ce:	2180      	movs	r1, #128	; 0x80
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f000 f840 	bl	8008556 <UART_WaitOnFlagUntilTimeout>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d001      	beq.n	80084e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80084dc:	2303      	movs	r3, #3
 80084de:	e036      	b.n	800854e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d10b      	bne.n	80084fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	881b      	ldrh	r3, [r3, #0]
 80084ea:	461a      	mov	r2, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	3302      	adds	r3, #2
 80084fa:	61bb      	str	r3, [r7, #24]
 80084fc:	e007      	b.n	800850e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	781a      	ldrb	r2, [r3, #0]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	3301      	adds	r3, #1
 800850c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008512:	b29b      	uxth	r3, r3
 8008514:	3b01      	subs	r3, #1
 8008516:	b29a      	uxth	r2, r3
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008520:	b29b      	uxth	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1cf      	bne.n	80084c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	9300      	str	r3, [sp, #0]
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	2200      	movs	r2, #0
 800852e:	2140      	movs	r1, #64	; 0x40
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f000 f810 	bl	8008556 <UART_WaitOnFlagUntilTimeout>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e006      	b.n	800854e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2220      	movs	r2, #32
 8008544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008548:	2300      	movs	r3, #0
 800854a:	e000      	b.n	800854e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800854c:	2302      	movs	r3, #2
  }
}
 800854e:	4618      	mov	r0, r3
 8008550:	3720      	adds	r7, #32
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b090      	sub	sp, #64	; 0x40
 800855a:	af00      	add	r7, sp, #0
 800855c:	60f8      	str	r0, [r7, #12]
 800855e:	60b9      	str	r1, [r7, #8]
 8008560:	603b      	str	r3, [r7, #0]
 8008562:	4613      	mov	r3, r2
 8008564:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008566:	e050      	b.n	800860a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008568:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800856a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856e:	d04c      	beq.n	800860a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008572:	2b00      	cmp	r3, #0
 8008574:	d007      	beq.n	8008586 <UART_WaitOnFlagUntilTimeout+0x30>
 8008576:	f7fd f91b 	bl	80057b0 <HAL_GetTick>
 800857a:	4602      	mov	r2, r0
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	1ad3      	subs	r3, r2, r3
 8008580:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008582:	429a      	cmp	r2, r3
 8008584:	d241      	bcs.n	800860a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	330c      	adds	r3, #12
 800858c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008590:	e853 3f00 	ldrex	r3, [r3]
 8008594:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008598:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800859c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	330c      	adds	r3, #12
 80085a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80085a6:	637a      	str	r2, [r7, #52]	; 0x34
 80085a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085ae:	e841 2300 	strex	r3, r2, [r1]
 80085b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1e5      	bne.n	8008586 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	3314      	adds	r3, #20
 80085c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	e853 3f00 	ldrex	r3, [r3]
 80085c8:	613b      	str	r3, [r7, #16]
   return(result);
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	f023 0301 	bic.w	r3, r3, #1
 80085d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3314      	adds	r3, #20
 80085d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085da:	623a      	str	r2, [r7, #32]
 80085dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085de:	69f9      	ldr	r1, [r7, #28]
 80085e0:	6a3a      	ldr	r2, [r7, #32]
 80085e2:	e841 2300 	strex	r3, r2, [r1]
 80085e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1e5      	bne.n	80085ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2220      	movs	r2, #32
 80085f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2220      	movs	r2, #32
 80085fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e00f      	b.n	800862a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	4013      	ands	r3, r2
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	429a      	cmp	r2, r3
 8008618:	bf0c      	ite	eq
 800861a:	2301      	moveq	r3, #1
 800861c:	2300      	movne	r3, #0
 800861e:	b2db      	uxtb	r3, r3
 8008620:	461a      	mov	r2, r3
 8008622:	79fb      	ldrb	r3, [r7, #7]
 8008624:	429a      	cmp	r2, r3
 8008626:	d09f      	beq.n	8008568 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3740      	adds	r7, #64	; 0x40
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
	...

08008634 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008638:	b0c0      	sub	sp, #256	; 0x100
 800863a:	af00      	add	r7, sp, #0
 800863c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800864c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008650:	68d9      	ldr	r1, [r3, #12]
 8008652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008656:	681a      	ldr	r2, [r3, #0]
 8008658:	ea40 0301 	orr.w	r3, r0, r1
 800865c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800865e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008662:	689a      	ldr	r2, [r3, #8]
 8008664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	431a      	orrs	r2, r3
 800866c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008670:	695b      	ldr	r3, [r3, #20]
 8008672:	431a      	orrs	r2, r3
 8008674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008678:	69db      	ldr	r3, [r3, #28]
 800867a:	4313      	orrs	r3, r2
 800867c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68db      	ldr	r3, [r3, #12]
 8008688:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800868c:	f021 010c 	bic.w	r1, r1, #12
 8008690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800869a:	430b      	orrs	r3, r1
 800869c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800869e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	695b      	ldr	r3, [r3, #20]
 80086a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80086aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ae:	6999      	ldr	r1, [r3, #24]
 80086b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	ea40 0301 	orr.w	r3, r0, r1
 80086ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80086bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	4b8f      	ldr	r3, [pc, #572]	; (8008900 <UART_SetConfig+0x2cc>)
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d005      	beq.n	80086d4 <UART_SetConfig+0xa0>
 80086c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	4b8d      	ldr	r3, [pc, #564]	; (8008904 <UART_SetConfig+0x2d0>)
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d104      	bne.n	80086de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80086d4:	f7fe fe2e 	bl	8007334 <HAL_RCC_GetPCLK2Freq>
 80086d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80086dc:	e003      	b.n	80086e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80086de:	f7fe fe15 	bl	800730c <HAL_RCC_GetPCLK1Freq>
 80086e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ea:	69db      	ldr	r3, [r3, #28]
 80086ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086f0:	f040 810c 	bne.w	800890c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80086f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086f8:	2200      	movs	r2, #0
 80086fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008702:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008706:	4622      	mov	r2, r4
 8008708:	462b      	mov	r3, r5
 800870a:	1891      	adds	r1, r2, r2
 800870c:	65b9      	str	r1, [r7, #88]	; 0x58
 800870e:	415b      	adcs	r3, r3
 8008710:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008712:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008716:	4621      	mov	r1, r4
 8008718:	eb12 0801 	adds.w	r8, r2, r1
 800871c:	4629      	mov	r1, r5
 800871e:	eb43 0901 	adc.w	r9, r3, r1
 8008722:	f04f 0200 	mov.w	r2, #0
 8008726:	f04f 0300 	mov.w	r3, #0
 800872a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800872e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008732:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008736:	4690      	mov	r8, r2
 8008738:	4699      	mov	r9, r3
 800873a:	4623      	mov	r3, r4
 800873c:	eb18 0303 	adds.w	r3, r8, r3
 8008740:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008744:	462b      	mov	r3, r5
 8008746:	eb49 0303 	adc.w	r3, r9, r3
 800874a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800874e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800875a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800875e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008762:	460b      	mov	r3, r1
 8008764:	18db      	adds	r3, r3, r3
 8008766:	653b      	str	r3, [r7, #80]	; 0x50
 8008768:	4613      	mov	r3, r2
 800876a:	eb42 0303 	adc.w	r3, r2, r3
 800876e:	657b      	str	r3, [r7, #84]	; 0x54
 8008770:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008774:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008778:	f7f8 fa8e 	bl	8000c98 <__aeabi_uldivmod>
 800877c:	4602      	mov	r2, r0
 800877e:	460b      	mov	r3, r1
 8008780:	4b61      	ldr	r3, [pc, #388]	; (8008908 <UART_SetConfig+0x2d4>)
 8008782:	fba3 2302 	umull	r2, r3, r3, r2
 8008786:	095b      	lsrs	r3, r3, #5
 8008788:	011c      	lsls	r4, r3, #4
 800878a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800878e:	2200      	movs	r2, #0
 8008790:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008794:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008798:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800879c:	4642      	mov	r2, r8
 800879e:	464b      	mov	r3, r9
 80087a0:	1891      	adds	r1, r2, r2
 80087a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80087a4:	415b      	adcs	r3, r3
 80087a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80087ac:	4641      	mov	r1, r8
 80087ae:	eb12 0a01 	adds.w	sl, r2, r1
 80087b2:	4649      	mov	r1, r9
 80087b4:	eb43 0b01 	adc.w	fp, r3, r1
 80087b8:	f04f 0200 	mov.w	r2, #0
 80087bc:	f04f 0300 	mov.w	r3, #0
 80087c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80087c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80087c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087cc:	4692      	mov	sl, r2
 80087ce:	469b      	mov	fp, r3
 80087d0:	4643      	mov	r3, r8
 80087d2:	eb1a 0303 	adds.w	r3, sl, r3
 80087d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087da:	464b      	mov	r3, r9
 80087dc:	eb4b 0303 	adc.w	r3, fp, r3
 80087e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80087e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80087f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80087f8:	460b      	mov	r3, r1
 80087fa:	18db      	adds	r3, r3, r3
 80087fc:	643b      	str	r3, [r7, #64]	; 0x40
 80087fe:	4613      	mov	r3, r2
 8008800:	eb42 0303 	adc.w	r3, r2, r3
 8008804:	647b      	str	r3, [r7, #68]	; 0x44
 8008806:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800880a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800880e:	f7f8 fa43 	bl	8000c98 <__aeabi_uldivmod>
 8008812:	4602      	mov	r2, r0
 8008814:	460b      	mov	r3, r1
 8008816:	4611      	mov	r1, r2
 8008818:	4b3b      	ldr	r3, [pc, #236]	; (8008908 <UART_SetConfig+0x2d4>)
 800881a:	fba3 2301 	umull	r2, r3, r3, r1
 800881e:	095b      	lsrs	r3, r3, #5
 8008820:	2264      	movs	r2, #100	; 0x64
 8008822:	fb02 f303 	mul.w	r3, r2, r3
 8008826:	1acb      	subs	r3, r1, r3
 8008828:	00db      	lsls	r3, r3, #3
 800882a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800882e:	4b36      	ldr	r3, [pc, #216]	; (8008908 <UART_SetConfig+0x2d4>)
 8008830:	fba3 2302 	umull	r2, r3, r3, r2
 8008834:	095b      	lsrs	r3, r3, #5
 8008836:	005b      	lsls	r3, r3, #1
 8008838:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800883c:	441c      	add	r4, r3
 800883e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008842:	2200      	movs	r2, #0
 8008844:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008848:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800884c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008850:	4642      	mov	r2, r8
 8008852:	464b      	mov	r3, r9
 8008854:	1891      	adds	r1, r2, r2
 8008856:	63b9      	str	r1, [r7, #56]	; 0x38
 8008858:	415b      	adcs	r3, r3
 800885a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800885c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008860:	4641      	mov	r1, r8
 8008862:	1851      	adds	r1, r2, r1
 8008864:	6339      	str	r1, [r7, #48]	; 0x30
 8008866:	4649      	mov	r1, r9
 8008868:	414b      	adcs	r3, r1
 800886a:	637b      	str	r3, [r7, #52]	; 0x34
 800886c:	f04f 0200 	mov.w	r2, #0
 8008870:	f04f 0300 	mov.w	r3, #0
 8008874:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008878:	4659      	mov	r1, fp
 800887a:	00cb      	lsls	r3, r1, #3
 800887c:	4651      	mov	r1, sl
 800887e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008882:	4651      	mov	r1, sl
 8008884:	00ca      	lsls	r2, r1, #3
 8008886:	4610      	mov	r0, r2
 8008888:	4619      	mov	r1, r3
 800888a:	4603      	mov	r3, r0
 800888c:	4642      	mov	r2, r8
 800888e:	189b      	adds	r3, r3, r2
 8008890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008894:	464b      	mov	r3, r9
 8008896:	460a      	mov	r2, r1
 8008898:	eb42 0303 	adc.w	r3, r2, r3
 800889c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80088ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80088b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80088b4:	460b      	mov	r3, r1
 80088b6:	18db      	adds	r3, r3, r3
 80088b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80088ba:	4613      	mov	r3, r2
 80088bc:	eb42 0303 	adc.w	r3, r2, r3
 80088c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80088c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80088ca:	f7f8 f9e5 	bl	8000c98 <__aeabi_uldivmod>
 80088ce:	4602      	mov	r2, r0
 80088d0:	460b      	mov	r3, r1
 80088d2:	4b0d      	ldr	r3, [pc, #52]	; (8008908 <UART_SetConfig+0x2d4>)
 80088d4:	fba3 1302 	umull	r1, r3, r3, r2
 80088d8:	095b      	lsrs	r3, r3, #5
 80088da:	2164      	movs	r1, #100	; 0x64
 80088dc:	fb01 f303 	mul.w	r3, r1, r3
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	00db      	lsls	r3, r3, #3
 80088e4:	3332      	adds	r3, #50	; 0x32
 80088e6:	4a08      	ldr	r2, [pc, #32]	; (8008908 <UART_SetConfig+0x2d4>)
 80088e8:	fba2 2303 	umull	r2, r3, r2, r3
 80088ec:	095b      	lsrs	r3, r3, #5
 80088ee:	f003 0207 	and.w	r2, r3, #7
 80088f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4422      	add	r2, r4
 80088fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80088fc:	e105      	b.n	8008b0a <UART_SetConfig+0x4d6>
 80088fe:	bf00      	nop
 8008900:	40011000 	.word	0x40011000
 8008904:	40011400 	.word	0x40011400
 8008908:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800890c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008910:	2200      	movs	r2, #0
 8008912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008916:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800891a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800891e:	4642      	mov	r2, r8
 8008920:	464b      	mov	r3, r9
 8008922:	1891      	adds	r1, r2, r2
 8008924:	6239      	str	r1, [r7, #32]
 8008926:	415b      	adcs	r3, r3
 8008928:	627b      	str	r3, [r7, #36]	; 0x24
 800892a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800892e:	4641      	mov	r1, r8
 8008930:	1854      	adds	r4, r2, r1
 8008932:	4649      	mov	r1, r9
 8008934:	eb43 0501 	adc.w	r5, r3, r1
 8008938:	f04f 0200 	mov.w	r2, #0
 800893c:	f04f 0300 	mov.w	r3, #0
 8008940:	00eb      	lsls	r3, r5, #3
 8008942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008946:	00e2      	lsls	r2, r4, #3
 8008948:	4614      	mov	r4, r2
 800894a:	461d      	mov	r5, r3
 800894c:	4643      	mov	r3, r8
 800894e:	18e3      	adds	r3, r4, r3
 8008950:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008954:	464b      	mov	r3, r9
 8008956:	eb45 0303 	adc.w	r3, r5, r3
 800895a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800895e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800896a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800896e:	f04f 0200 	mov.w	r2, #0
 8008972:	f04f 0300 	mov.w	r3, #0
 8008976:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800897a:	4629      	mov	r1, r5
 800897c:	008b      	lsls	r3, r1, #2
 800897e:	4621      	mov	r1, r4
 8008980:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008984:	4621      	mov	r1, r4
 8008986:	008a      	lsls	r2, r1, #2
 8008988:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800898c:	f7f8 f984 	bl	8000c98 <__aeabi_uldivmod>
 8008990:	4602      	mov	r2, r0
 8008992:	460b      	mov	r3, r1
 8008994:	4b60      	ldr	r3, [pc, #384]	; (8008b18 <UART_SetConfig+0x4e4>)
 8008996:	fba3 2302 	umull	r2, r3, r3, r2
 800899a:	095b      	lsrs	r3, r3, #5
 800899c:	011c      	lsls	r4, r3, #4
 800899e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089a2:	2200      	movs	r2, #0
 80089a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80089a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80089ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80089b0:	4642      	mov	r2, r8
 80089b2:	464b      	mov	r3, r9
 80089b4:	1891      	adds	r1, r2, r2
 80089b6:	61b9      	str	r1, [r7, #24]
 80089b8:	415b      	adcs	r3, r3
 80089ba:	61fb      	str	r3, [r7, #28]
 80089bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80089c0:	4641      	mov	r1, r8
 80089c2:	1851      	adds	r1, r2, r1
 80089c4:	6139      	str	r1, [r7, #16]
 80089c6:	4649      	mov	r1, r9
 80089c8:	414b      	adcs	r3, r1
 80089ca:	617b      	str	r3, [r7, #20]
 80089cc:	f04f 0200 	mov.w	r2, #0
 80089d0:	f04f 0300 	mov.w	r3, #0
 80089d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80089d8:	4659      	mov	r1, fp
 80089da:	00cb      	lsls	r3, r1, #3
 80089dc:	4651      	mov	r1, sl
 80089de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089e2:	4651      	mov	r1, sl
 80089e4:	00ca      	lsls	r2, r1, #3
 80089e6:	4610      	mov	r0, r2
 80089e8:	4619      	mov	r1, r3
 80089ea:	4603      	mov	r3, r0
 80089ec:	4642      	mov	r2, r8
 80089ee:	189b      	adds	r3, r3, r2
 80089f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80089f4:	464b      	mov	r3, r9
 80089f6:	460a      	mov	r2, r1
 80089f8:	eb42 0303 	adc.w	r3, r2, r3
 80089fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	67bb      	str	r3, [r7, #120]	; 0x78
 8008a0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008a0c:	f04f 0200 	mov.w	r2, #0
 8008a10:	f04f 0300 	mov.w	r3, #0
 8008a14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008a18:	4649      	mov	r1, r9
 8008a1a:	008b      	lsls	r3, r1, #2
 8008a1c:	4641      	mov	r1, r8
 8008a1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a22:	4641      	mov	r1, r8
 8008a24:	008a      	lsls	r2, r1, #2
 8008a26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008a2a:	f7f8 f935 	bl	8000c98 <__aeabi_uldivmod>
 8008a2e:	4602      	mov	r2, r0
 8008a30:	460b      	mov	r3, r1
 8008a32:	4b39      	ldr	r3, [pc, #228]	; (8008b18 <UART_SetConfig+0x4e4>)
 8008a34:	fba3 1302 	umull	r1, r3, r3, r2
 8008a38:	095b      	lsrs	r3, r3, #5
 8008a3a:	2164      	movs	r1, #100	; 0x64
 8008a3c:	fb01 f303 	mul.w	r3, r1, r3
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	011b      	lsls	r3, r3, #4
 8008a44:	3332      	adds	r3, #50	; 0x32
 8008a46:	4a34      	ldr	r2, [pc, #208]	; (8008b18 <UART_SetConfig+0x4e4>)
 8008a48:	fba2 2303 	umull	r2, r3, r2, r3
 8008a4c:	095b      	lsrs	r3, r3, #5
 8008a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a52:	441c      	add	r4, r3
 8008a54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a58:	2200      	movs	r2, #0
 8008a5a:	673b      	str	r3, [r7, #112]	; 0x70
 8008a5c:	677a      	str	r2, [r7, #116]	; 0x74
 8008a5e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008a62:	4642      	mov	r2, r8
 8008a64:	464b      	mov	r3, r9
 8008a66:	1891      	adds	r1, r2, r2
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	415b      	adcs	r3, r3
 8008a6c:	60fb      	str	r3, [r7, #12]
 8008a6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a72:	4641      	mov	r1, r8
 8008a74:	1851      	adds	r1, r2, r1
 8008a76:	6039      	str	r1, [r7, #0]
 8008a78:	4649      	mov	r1, r9
 8008a7a:	414b      	adcs	r3, r1
 8008a7c:	607b      	str	r3, [r7, #4]
 8008a7e:	f04f 0200 	mov.w	r2, #0
 8008a82:	f04f 0300 	mov.w	r3, #0
 8008a86:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008a8a:	4659      	mov	r1, fp
 8008a8c:	00cb      	lsls	r3, r1, #3
 8008a8e:	4651      	mov	r1, sl
 8008a90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a94:	4651      	mov	r1, sl
 8008a96:	00ca      	lsls	r2, r1, #3
 8008a98:	4610      	mov	r0, r2
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	4642      	mov	r2, r8
 8008aa0:	189b      	adds	r3, r3, r2
 8008aa2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008aa4:	464b      	mov	r3, r9
 8008aa6:	460a      	mov	r2, r1
 8008aa8:	eb42 0303 	adc.w	r3, r2, r3
 8008aac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	663b      	str	r3, [r7, #96]	; 0x60
 8008ab8:	667a      	str	r2, [r7, #100]	; 0x64
 8008aba:	f04f 0200 	mov.w	r2, #0
 8008abe:	f04f 0300 	mov.w	r3, #0
 8008ac2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008ac6:	4649      	mov	r1, r9
 8008ac8:	008b      	lsls	r3, r1, #2
 8008aca:	4641      	mov	r1, r8
 8008acc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ad0:	4641      	mov	r1, r8
 8008ad2:	008a      	lsls	r2, r1, #2
 8008ad4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008ad8:	f7f8 f8de 	bl	8000c98 <__aeabi_uldivmod>
 8008adc:	4602      	mov	r2, r0
 8008ade:	460b      	mov	r3, r1
 8008ae0:	4b0d      	ldr	r3, [pc, #52]	; (8008b18 <UART_SetConfig+0x4e4>)
 8008ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8008ae6:	095b      	lsrs	r3, r3, #5
 8008ae8:	2164      	movs	r1, #100	; 0x64
 8008aea:	fb01 f303 	mul.w	r3, r1, r3
 8008aee:	1ad3      	subs	r3, r2, r3
 8008af0:	011b      	lsls	r3, r3, #4
 8008af2:	3332      	adds	r3, #50	; 0x32
 8008af4:	4a08      	ldr	r2, [pc, #32]	; (8008b18 <UART_SetConfig+0x4e4>)
 8008af6:	fba2 2303 	umull	r2, r3, r2, r3
 8008afa:	095b      	lsrs	r3, r3, #5
 8008afc:	f003 020f 	and.w	r2, r3, #15
 8008b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4422      	add	r2, r4
 8008b08:	609a      	str	r2, [r3, #8]
}
 8008b0a:	bf00      	nop
 8008b0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008b10:	46bd      	mov	sp, r7
 8008b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b16:	bf00      	nop
 8008b18:	51eb851f 	.word	0x51eb851f

08008b1c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8008b24:	4b22      	ldr	r3, [pc, #136]	; (8008bb0 <WIZCHIP_READ+0x94>)
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	4798      	blx	r3
   WIZCHIP.CS._select();
 8008b2a:	4b21      	ldr	r3, [pc, #132]	; (8008bb0 <WIZCHIP_READ+0x94>)
 8008b2c:	695b      	ldr	r3, [r3, #20]
 8008b2e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8008b30:	4b1f      	ldr	r3, [pc, #124]	; (8008bb0 <WIZCHIP_READ+0x94>)
 8008b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d003      	beq.n	8008b40 <WIZCHIP_READ+0x24>
 8008b38:	4b1d      	ldr	r3, [pc, #116]	; (8008bb0 <WIZCHIP_READ+0x94>)
 8008b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d114      	bne.n	8008b6a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8008b40:	4b1b      	ldr	r3, [pc, #108]	; (8008bb0 <WIZCHIP_READ+0x94>)
 8008b42:	6a1b      	ldr	r3, [r3, #32]
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	0c12      	lsrs	r2, r2, #16
 8008b48:	b2d2      	uxtb	r2, r2
 8008b4a:	4610      	mov	r0, r2
 8008b4c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8008b4e:	4b18      	ldr	r3, [pc, #96]	; (8008bb0 <WIZCHIP_READ+0x94>)
 8008b50:	6a1b      	ldr	r3, [r3, #32]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	0a12      	lsrs	r2, r2, #8
 8008b56:	b2d2      	uxtb	r2, r2
 8008b58:	4610      	mov	r0, r2
 8008b5a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8008b5c:	4b14      	ldr	r3, [pc, #80]	; (8008bb0 <WIZCHIP_READ+0x94>)
 8008b5e:	6a1b      	ldr	r3, [r3, #32]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	b2d2      	uxtb	r2, r2
 8008b64:	4610      	mov	r0, r2
 8008b66:	4798      	blx	r3
 8008b68:	e011      	b.n	8008b8e <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	0c1b      	lsrs	r3, r3, #16
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	0a1b      	lsrs	r3, r3, #8
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8008b80:	4b0b      	ldr	r3, [pc, #44]	; (8008bb0 <WIZCHIP_READ+0x94>)
 8008b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b84:	f107 020c 	add.w	r2, r7, #12
 8008b88:	2103      	movs	r1, #3
 8008b8a:	4610      	mov	r0, r2
 8008b8c:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8008b8e:	4b08      	ldr	r3, [pc, #32]	; (8008bb0 <WIZCHIP_READ+0x94>)
 8008b90:	69db      	ldr	r3, [r3, #28]
 8008b92:	4798      	blx	r3
 8008b94:	4603      	mov	r3, r0
 8008b96:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8008b98:	4b05      	ldr	r3, [pc, #20]	; (8008bb0 <WIZCHIP_READ+0x94>)
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8008b9e:	4b04      	ldr	r3, [pc, #16]	; (8008bb0 <WIZCHIP_READ+0x94>)
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	4798      	blx	r3
   return ret;
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	20000098 	.word	0x20000098

08008bb4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8008bc0:	4b22      	ldr	r3, [pc, #136]	; (8008c4c <WIZCHIP_WRITE+0x98>)
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	4798      	blx	r3
   WIZCHIP.CS._select();
 8008bc6:	4b21      	ldr	r3, [pc, #132]	; (8008c4c <WIZCHIP_WRITE+0x98>)
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f043 0304 	orr.w	r3, r3, #4
 8008bd2:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8008bd4:	4b1d      	ldr	r3, [pc, #116]	; (8008c4c <WIZCHIP_WRITE+0x98>)
 8008bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d119      	bne.n	8008c10 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8008bdc:	4b1b      	ldr	r3, [pc, #108]	; (8008c4c <WIZCHIP_WRITE+0x98>)
 8008bde:	6a1b      	ldr	r3, [r3, #32]
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	0c12      	lsrs	r2, r2, #16
 8008be4:	b2d2      	uxtb	r2, r2
 8008be6:	4610      	mov	r0, r2
 8008be8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8008bea:	4b18      	ldr	r3, [pc, #96]	; (8008c4c <WIZCHIP_WRITE+0x98>)
 8008bec:	6a1b      	ldr	r3, [r3, #32]
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	0a12      	lsrs	r2, r2, #8
 8008bf2:	b2d2      	uxtb	r2, r2
 8008bf4:	4610      	mov	r0, r2
 8008bf6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8008bf8:	4b14      	ldr	r3, [pc, #80]	; (8008c4c <WIZCHIP_WRITE+0x98>)
 8008bfa:	6a1b      	ldr	r3, [r3, #32]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	b2d2      	uxtb	r2, r2
 8008c00:	4610      	mov	r0, r2
 8008c02:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8008c04:	4b11      	ldr	r3, [pc, #68]	; (8008c4c <WIZCHIP_WRITE+0x98>)
 8008c06:	6a1b      	ldr	r3, [r3, #32]
 8008c08:	78fa      	ldrb	r2, [r7, #3]
 8008c0a:	4610      	mov	r0, r2
 8008c0c:	4798      	blx	r3
 8008c0e:	e013      	b.n	8008c38 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	0c1b      	lsrs	r3, r3, #16
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	0a1b      	lsrs	r3, r3, #8
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8008c26:	78fb      	ldrb	r3, [r7, #3]
 8008c28:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8008c2a:	4b08      	ldr	r3, [pc, #32]	; (8008c4c <WIZCHIP_WRITE+0x98>)
 8008c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2e:	f107 020c 	add.w	r2, r7, #12
 8008c32:	2104      	movs	r1, #4
 8008c34:	4610      	mov	r0, r2
 8008c36:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8008c38:	4b04      	ldr	r3, [pc, #16]	; (8008c4c <WIZCHIP_WRITE+0x98>)
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8008c3e:	4b03      	ldr	r3, [pc, #12]	; (8008c4c <WIZCHIP_WRITE+0x98>)
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	4798      	blx	r3
}
 8008c44:	bf00      	nop
 8008c46:	3710      	adds	r7, #16
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	20000098 	.word	0x20000098

08008c50 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8008c50:	b590      	push	{r4, r7, lr}
 8008c52:	b087      	sub	sp, #28
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8008c5e:	4b2b      	ldr	r3, [pc, #172]	; (8008d0c <WIZCHIP_READ_BUF+0xbc>)
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	4798      	blx	r3
   WIZCHIP.CS._select();
 8008c64:	4b29      	ldr	r3, [pc, #164]	; (8008d0c <WIZCHIP_READ_BUF+0xbc>)
 8008c66:	695b      	ldr	r3, [r3, #20]
 8008c68:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8008c6a:	4b28      	ldr	r3, [pc, #160]	; (8008d0c <WIZCHIP_READ_BUF+0xbc>)
 8008c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d003      	beq.n	8008c7a <WIZCHIP_READ_BUF+0x2a>
 8008c72:	4b26      	ldr	r3, [pc, #152]	; (8008d0c <WIZCHIP_READ_BUF+0xbc>)
 8008c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d126      	bne.n	8008cc8 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8008c7a:	4b24      	ldr	r3, [pc, #144]	; (8008d0c <WIZCHIP_READ_BUF+0xbc>)
 8008c7c:	6a1b      	ldr	r3, [r3, #32]
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	0c12      	lsrs	r2, r2, #16
 8008c82:	b2d2      	uxtb	r2, r2
 8008c84:	4610      	mov	r0, r2
 8008c86:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8008c88:	4b20      	ldr	r3, [pc, #128]	; (8008d0c <WIZCHIP_READ_BUF+0xbc>)
 8008c8a:	6a1b      	ldr	r3, [r3, #32]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	0a12      	lsrs	r2, r2, #8
 8008c90:	b2d2      	uxtb	r2, r2
 8008c92:	4610      	mov	r0, r2
 8008c94:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8008c96:	4b1d      	ldr	r3, [pc, #116]	; (8008d0c <WIZCHIP_READ_BUF+0xbc>)
 8008c98:	6a1b      	ldr	r3, [r3, #32]
 8008c9a:	68fa      	ldr	r2, [r7, #12]
 8008c9c:	b2d2      	uxtb	r2, r2
 8008c9e:	4610      	mov	r0, r2
 8008ca0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	82fb      	strh	r3, [r7, #22]
 8008ca6:	e00a      	b.n	8008cbe <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8008ca8:	4b18      	ldr	r3, [pc, #96]	; (8008d0c <WIZCHIP_READ_BUF+0xbc>)
 8008caa:	69db      	ldr	r3, [r3, #28]
 8008cac:	8afa      	ldrh	r2, [r7, #22]
 8008cae:	68b9      	ldr	r1, [r7, #8]
 8008cb0:	188c      	adds	r4, r1, r2
 8008cb2:	4798      	blx	r3
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8008cb8:	8afb      	ldrh	r3, [r7, #22]
 8008cba:	3301      	adds	r3, #1
 8008cbc:	82fb      	strh	r3, [r7, #22]
 8008cbe:	8afa      	ldrh	r2, [r7, #22]
 8008cc0:	88fb      	ldrh	r3, [r7, #6]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d3f0      	bcc.n	8008ca8 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8008cc6:	e017      	b.n	8008cf8 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	0c1b      	lsrs	r3, r3, #16
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	0a1b      	lsrs	r3, r3, #8
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8008cde:	4b0b      	ldr	r3, [pc, #44]	; (8008d0c <WIZCHIP_READ_BUF+0xbc>)
 8008ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce2:	f107 0210 	add.w	r2, r7, #16
 8008ce6:	2103      	movs	r1, #3
 8008ce8:	4610      	mov	r0, r2
 8008cea:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8008cec:	4b07      	ldr	r3, [pc, #28]	; (8008d0c <WIZCHIP_READ_BUF+0xbc>)
 8008cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf0:	88fa      	ldrh	r2, [r7, #6]
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	68b8      	ldr	r0, [r7, #8]
 8008cf6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8008cf8:	4b04      	ldr	r3, [pc, #16]	; (8008d0c <WIZCHIP_READ_BUF+0xbc>)
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8008cfe:	4b03      	ldr	r3, [pc, #12]	; (8008d0c <WIZCHIP_READ_BUF+0xbc>)
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	4798      	blx	r3
}
 8008d04:	bf00      	nop
 8008d06:	371c      	adds	r7, #28
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd90      	pop	{r4, r7, pc}
 8008d0c:	20000098 	.word	0x20000098

08008d10 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8008d1e:	4b2b      	ldr	r3, [pc, #172]	; (8008dcc <WIZCHIP_WRITE_BUF+0xbc>)
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	4798      	blx	r3
   WIZCHIP.CS._select();
 8008d24:	4b29      	ldr	r3, [pc, #164]	; (8008dcc <WIZCHIP_WRITE_BUF+0xbc>)
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f043 0304 	orr.w	r3, r3, #4
 8008d30:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8008d32:	4b26      	ldr	r3, [pc, #152]	; (8008dcc <WIZCHIP_WRITE_BUF+0xbc>)
 8008d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d126      	bne.n	8008d88 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8008d3a:	4b24      	ldr	r3, [pc, #144]	; (8008dcc <WIZCHIP_WRITE_BUF+0xbc>)
 8008d3c:	6a1b      	ldr	r3, [r3, #32]
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	0c12      	lsrs	r2, r2, #16
 8008d42:	b2d2      	uxtb	r2, r2
 8008d44:	4610      	mov	r0, r2
 8008d46:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8008d48:	4b20      	ldr	r3, [pc, #128]	; (8008dcc <WIZCHIP_WRITE_BUF+0xbc>)
 8008d4a:	6a1b      	ldr	r3, [r3, #32]
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	0a12      	lsrs	r2, r2, #8
 8008d50:	b2d2      	uxtb	r2, r2
 8008d52:	4610      	mov	r0, r2
 8008d54:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8008d56:	4b1d      	ldr	r3, [pc, #116]	; (8008dcc <WIZCHIP_WRITE_BUF+0xbc>)
 8008d58:	6a1b      	ldr	r3, [r3, #32]
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	b2d2      	uxtb	r2, r2
 8008d5e:	4610      	mov	r0, r2
 8008d60:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8008d62:	2300      	movs	r3, #0
 8008d64:	82fb      	strh	r3, [r7, #22]
 8008d66:	e00a      	b.n	8008d7e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8008d68:	4b18      	ldr	r3, [pc, #96]	; (8008dcc <WIZCHIP_WRITE_BUF+0xbc>)
 8008d6a:	6a1b      	ldr	r3, [r3, #32]
 8008d6c:	8afa      	ldrh	r2, [r7, #22]
 8008d6e:	68b9      	ldr	r1, [r7, #8]
 8008d70:	440a      	add	r2, r1
 8008d72:	7812      	ldrb	r2, [r2, #0]
 8008d74:	4610      	mov	r0, r2
 8008d76:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8008d78:	8afb      	ldrh	r3, [r7, #22]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	82fb      	strh	r3, [r7, #22]
 8008d7e:	8afa      	ldrh	r2, [r7, #22]
 8008d80:	88fb      	ldrh	r3, [r7, #6]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d3f0      	bcc.n	8008d68 <WIZCHIP_WRITE_BUF+0x58>
 8008d86:	e017      	b.n	8008db8 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	0c1b      	lsrs	r3, r3, #16
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	0a1b      	lsrs	r3, r3, #8
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8008d9e:	4b0b      	ldr	r3, [pc, #44]	; (8008dcc <WIZCHIP_WRITE_BUF+0xbc>)
 8008da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da2:	f107 0210 	add.w	r2, r7, #16
 8008da6:	2103      	movs	r1, #3
 8008da8:	4610      	mov	r0, r2
 8008daa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8008dac:	4b07      	ldr	r3, [pc, #28]	; (8008dcc <WIZCHIP_WRITE_BUF+0xbc>)
 8008dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db0:	88fa      	ldrh	r2, [r7, #6]
 8008db2:	4611      	mov	r1, r2
 8008db4:	68b8      	ldr	r0, [r7, #8]
 8008db6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8008db8:	4b04      	ldr	r3, [pc, #16]	; (8008dcc <WIZCHIP_WRITE_BUF+0xbc>)
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8008dbe:	4b03      	ldr	r3, [pc, #12]	; (8008dcc <WIZCHIP_WRITE_BUF+0xbc>)
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	4798      	blx	r3
}
 8008dc4:	bf00      	nop
 8008dc6:	3718      	adds	r7, #24
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	20000098 	.word	0x20000098

08008dd0 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8008dd0:	b590      	push	{r4, r7, lr}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	81fb      	strh	r3, [r7, #14]
 8008dde:	2300      	movs	r3, #0
 8008de0:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8008de2:	79fb      	ldrb	r3, [r7, #7]
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	3301      	adds	r3, #1
 8008de8:	00db      	lsls	r3, r3, #3
 8008dea:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7ff fe94 	bl	8008b1c <WIZCHIP_READ>
 8008df4:	4603      	mov	r3, r0
 8008df6:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8008df8:	89bb      	ldrh	r3, [r7, #12]
 8008dfa:	021b      	lsls	r3, r3, #8
 8008dfc:	b29c      	uxth	r4, r3
 8008dfe:	79fb      	ldrb	r3, [r7, #7]
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	3301      	adds	r3, #1
 8008e04:	00db      	lsls	r3, r3, #3
 8008e06:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7ff fe86 	bl	8008b1c <WIZCHIP_READ>
 8008e10:	4603      	mov	r3, r0
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	4423      	add	r3, r4
 8008e16:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8008e18:	89bb      	ldrh	r3, [r7, #12]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d01a      	beq.n	8008e54 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8008e1e:	79fb      	ldrb	r3, [r7, #7]
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	3301      	adds	r3, #1
 8008e24:	00db      	lsls	r3, r3, #3
 8008e26:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7ff fe76 	bl	8008b1c <WIZCHIP_READ>
 8008e30:	4603      	mov	r3, r0
 8008e32:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8008e34:	89fb      	ldrh	r3, [r7, #14]
 8008e36:	021b      	lsls	r3, r3, #8
 8008e38:	b29c      	uxth	r4, r3
 8008e3a:	79fb      	ldrb	r3, [r7, #7]
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	3301      	adds	r3, #1
 8008e40:	00db      	lsls	r3, r3, #3
 8008e42:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7ff fe68 	bl	8008b1c <WIZCHIP_READ>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	4423      	add	r3, r4
 8008e52:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8008e54:	89fa      	ldrh	r2, [r7, #14]
 8008e56:	89bb      	ldrh	r3, [r7, #12]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d1c2      	bne.n	8008de2 <getSn_TX_FSR+0x12>
   return val;
 8008e5c:	89fb      	ldrh	r3, [r7, #14]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3714      	adds	r7, #20
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd90      	pop	{r4, r7, pc}

08008e66 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8008e66:	b590      	push	{r4, r7, lr}
 8008e68:	b085      	sub	sp, #20
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	81fb      	strh	r3, [r7, #14]
 8008e74:	2300      	movs	r3, #0
 8008e76:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8008e78:	79fb      	ldrb	r3, [r7, #7]
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	00db      	lsls	r3, r3, #3
 8008e80:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7ff fe49 	bl	8008b1c <WIZCHIP_READ>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8008e8e:	89bb      	ldrh	r3, [r7, #12]
 8008e90:	021b      	lsls	r3, r3, #8
 8008e92:	b29c      	uxth	r4, r3
 8008e94:	79fb      	ldrb	r3, [r7, #7]
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	3301      	adds	r3, #1
 8008e9a:	00db      	lsls	r3, r3, #3
 8008e9c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7ff fe3b 	bl	8008b1c <WIZCHIP_READ>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	4423      	add	r3, r4
 8008eac:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8008eae:	89bb      	ldrh	r3, [r7, #12]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d01a      	beq.n	8008eea <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8008eb4:	79fb      	ldrb	r3, [r7, #7]
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	3301      	adds	r3, #1
 8008eba:	00db      	lsls	r3, r3, #3
 8008ebc:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7ff fe2b 	bl	8008b1c <WIZCHIP_READ>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8008eca:	89fb      	ldrh	r3, [r7, #14]
 8008ecc:	021b      	lsls	r3, r3, #8
 8008ece:	b29c      	uxth	r4, r3
 8008ed0:	79fb      	ldrb	r3, [r7, #7]
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	00db      	lsls	r3, r3, #3
 8008ed8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7ff fe1d 	bl	8008b1c <WIZCHIP_READ>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	4423      	add	r3, r4
 8008ee8:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8008eea:	89fa      	ldrh	r2, [r7, #14]
 8008eec:	89bb      	ldrh	r3, [r7, #12]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d1c2      	bne.n	8008e78 <getSn_RX_RSR+0x12>
   return val;
 8008ef2:	89fb      	ldrh	r3, [r7, #14]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd90      	pop	{r4, r7, pc}

08008efc <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8008efc:	b590      	push	{r4, r7, lr}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	4603      	mov	r3, r0
 8008f04:	6039      	str	r1, [r7, #0]
 8008f06:	71fb      	strb	r3, [r7, #7]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8008f10:	2300      	movs	r3, #0
 8008f12:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8008f14:	88bb      	ldrh	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d048      	beq.n	8008fac <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8008f1a:	79fb      	ldrb	r3, [r7, #7]
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	3301      	adds	r3, #1
 8008f20:	00db      	lsls	r3, r3, #3
 8008f22:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7ff fdf8 	bl	8008b1c <WIZCHIP_READ>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	021b      	lsls	r3, r3, #8
 8008f32:	b29c      	uxth	r4, r3
 8008f34:	79fb      	ldrb	r3, [r7, #7]
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	3301      	adds	r3, #1
 8008f3a:	00db      	lsls	r3, r3, #3
 8008f3c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7ff fdeb 	bl	8008b1c <WIZCHIP_READ>
 8008f46:	4603      	mov	r3, r0
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	4423      	add	r3, r4
 8008f4c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8008f4e:	89fb      	ldrh	r3, [r7, #14]
 8008f50:	021b      	lsls	r3, r3, #8
 8008f52:	79fa      	ldrb	r2, [r7, #7]
 8008f54:	0092      	lsls	r2, r2, #2
 8008f56:	3202      	adds	r2, #2
 8008f58:	00d2      	lsls	r2, r2, #3
 8008f5a:	4413      	add	r3, r2
 8008f5c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8008f5e:	88bb      	ldrh	r3, [r7, #4]
 8008f60:	461a      	mov	r2, r3
 8008f62:	6839      	ldr	r1, [r7, #0]
 8008f64:	68b8      	ldr	r0, [r7, #8]
 8008f66:	f7ff fed3 	bl	8008d10 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8008f6a:	89fa      	ldrh	r2, [r7, #14]
 8008f6c:	88bb      	ldrh	r3, [r7, #4]
 8008f6e:	4413      	add	r3, r2
 8008f70:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8008f72:	79fb      	ldrb	r3, [r7, #7]
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	3301      	adds	r3, #1
 8008f78:	00db      	lsls	r3, r3, #3
 8008f7a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8008f7e:	461a      	mov	r2, r3
 8008f80:	89fb      	ldrh	r3, [r7, #14]
 8008f82:	0a1b      	lsrs	r3, r3, #8
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	4619      	mov	r1, r3
 8008f8a:	4610      	mov	r0, r2
 8008f8c:	f7ff fe12 	bl	8008bb4 <WIZCHIP_WRITE>
 8008f90:	79fb      	ldrb	r3, [r7, #7]
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	3301      	adds	r3, #1
 8008f96:	00db      	lsls	r3, r3, #3
 8008f98:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	89fb      	ldrh	r3, [r7, #14]
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	f7ff fe05 	bl	8008bb4 <WIZCHIP_WRITE>
 8008faa:	e000      	b.n	8008fae <wiz_send_data+0xb2>
   if(len == 0)  return;
 8008fac:	bf00      	nop
}
 8008fae:	3714      	adds	r7, #20
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd90      	pop	{r4, r7, pc}

08008fb4 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8008fb4:	b590      	push	{r4, r7, lr}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	4603      	mov	r3, r0
 8008fbc:	6039      	str	r1, [r7, #0]
 8008fbe:	71fb      	strb	r3, [r7, #7]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8008fcc:	88bb      	ldrh	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d048      	beq.n	8009064 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8008fd2:	79fb      	ldrb	r3, [r7, #7]
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	00db      	lsls	r3, r3, #3
 8008fda:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7ff fd9c 	bl	8008b1c <WIZCHIP_READ>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	021b      	lsls	r3, r3, #8
 8008fea:	b29c      	uxth	r4, r3
 8008fec:	79fb      	ldrb	r3, [r7, #7]
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	00db      	lsls	r3, r3, #3
 8008ff4:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7ff fd8f 	bl	8008b1c <WIZCHIP_READ>
 8008ffe:	4603      	mov	r3, r0
 8009000:	b29b      	uxth	r3, r3
 8009002:	4423      	add	r3, r4
 8009004:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8009006:	89fb      	ldrh	r3, [r7, #14]
 8009008:	021b      	lsls	r3, r3, #8
 800900a:	79fa      	ldrb	r2, [r7, #7]
 800900c:	0092      	lsls	r2, r2, #2
 800900e:	3203      	adds	r2, #3
 8009010:	00d2      	lsls	r2, r2, #3
 8009012:	4413      	add	r3, r2
 8009014:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8009016:	88bb      	ldrh	r3, [r7, #4]
 8009018:	461a      	mov	r2, r3
 800901a:	6839      	ldr	r1, [r7, #0]
 800901c:	68b8      	ldr	r0, [r7, #8]
 800901e:	f7ff fe17 	bl	8008c50 <WIZCHIP_READ_BUF>
   ptr += len;
 8009022:	89fa      	ldrh	r2, [r7, #14]
 8009024:	88bb      	ldrh	r3, [r7, #4]
 8009026:	4413      	add	r3, r2
 8009028:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800902a:	79fb      	ldrb	r3, [r7, #7]
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	3301      	adds	r3, #1
 8009030:	00db      	lsls	r3, r3, #3
 8009032:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8009036:	461a      	mov	r2, r3
 8009038:	89fb      	ldrh	r3, [r7, #14]
 800903a:	0a1b      	lsrs	r3, r3, #8
 800903c:	b29b      	uxth	r3, r3
 800903e:	b2db      	uxtb	r3, r3
 8009040:	4619      	mov	r1, r3
 8009042:	4610      	mov	r0, r2
 8009044:	f7ff fdb6 	bl	8008bb4 <WIZCHIP_WRITE>
 8009048:	79fb      	ldrb	r3, [r7, #7]
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	3301      	adds	r3, #1
 800904e:	00db      	lsls	r3, r3, #3
 8009050:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8009054:	461a      	mov	r2, r3
 8009056:	89fb      	ldrh	r3, [r7, #14]
 8009058:	b2db      	uxtb	r3, r3
 800905a:	4619      	mov	r1, r3
 800905c:	4610      	mov	r0, r2
 800905e:	f7ff fda9 	bl	8008bb4 <WIZCHIP_WRITE>
 8009062:	e000      	b.n	8009066 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8009064:	bf00      	nop
}
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	bd90      	pop	{r4, r7, pc}

0800906c <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 800906c:	b590      	push	{r4, r7, lr}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	4603      	mov	r3, r0
 8009074:	460a      	mov	r2, r1
 8009076:	71fb      	strb	r3, [r7, #7]
 8009078:	4613      	mov	r3, r2
 800907a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 800907c:	2300      	movs	r3, #0
 800907e:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8009080:	79fb      	ldrb	r3, [r7, #7]
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	3301      	adds	r3, #1
 8009086:	00db      	lsls	r3, r3, #3
 8009088:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800908c:	4618      	mov	r0, r3
 800908e:	f7ff fd45 	bl	8008b1c <WIZCHIP_READ>
 8009092:	4603      	mov	r3, r0
 8009094:	b29b      	uxth	r3, r3
 8009096:	021b      	lsls	r3, r3, #8
 8009098:	b29c      	uxth	r4, r3
 800909a:	79fb      	ldrb	r3, [r7, #7]
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	3301      	adds	r3, #1
 80090a0:	00db      	lsls	r3, r3, #3
 80090a2:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7ff fd38 	bl	8008b1c <WIZCHIP_READ>
 80090ac:	4603      	mov	r3, r0
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	4423      	add	r3, r4
 80090b2:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 80090b4:	89fa      	ldrh	r2, [r7, #14]
 80090b6:	88bb      	ldrh	r3, [r7, #4]
 80090b8:	4413      	add	r3, r2
 80090ba:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 80090bc:	79fb      	ldrb	r3, [r7, #7]
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	3301      	adds	r3, #1
 80090c2:	00db      	lsls	r3, r3, #3
 80090c4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80090c8:	461a      	mov	r2, r3
 80090ca:	89fb      	ldrh	r3, [r7, #14]
 80090cc:	0a1b      	lsrs	r3, r3, #8
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	4619      	mov	r1, r3
 80090d4:	4610      	mov	r0, r2
 80090d6:	f7ff fd6d 	bl	8008bb4 <WIZCHIP_WRITE>
 80090da:	79fb      	ldrb	r3, [r7, #7]
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	3301      	adds	r3, #1
 80090e0:	00db      	lsls	r3, r3, #3
 80090e2:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80090e6:	461a      	mov	r2, r3
 80090e8:	89fb      	ldrh	r3, [r7, #14]
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	4619      	mov	r1, r3
 80090ee:	4610      	mov	r0, r2
 80090f0:	f7ff fd60 	bl	8008bb4 <WIZCHIP_WRITE>
}
 80090f4:	bf00      	nop
 80090f6:	3714      	adds	r7, #20
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd90      	pop	{r4, r7, pc}

080090fc <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80090fc:	b590      	push	{r4, r7, lr}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	4604      	mov	r4, r0
 8009104:	4608      	mov	r0, r1
 8009106:	4611      	mov	r1, r2
 8009108:	461a      	mov	r2, r3
 800910a:	4623      	mov	r3, r4
 800910c:	71fb      	strb	r3, [r7, #7]
 800910e:	4603      	mov	r3, r0
 8009110:	71bb      	strb	r3, [r7, #6]
 8009112:	460b      	mov	r3, r1
 8009114:	80bb      	strh	r3, [r7, #4]
 8009116:	4613      	mov	r3, r2
 8009118:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 800911a:	79fb      	ldrb	r3, [r7, #7]
 800911c:	2b08      	cmp	r3, #8
 800911e:	d902      	bls.n	8009126 <socket+0x2a>
 8009120:	f04f 33ff 	mov.w	r3, #4294967295
 8009124:	e0f2      	b.n	800930c <socket+0x210>
	switch(protocol)
 8009126:	79bb      	ldrb	r3, [r7, #6]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d005      	beq.n	8009138 <socket+0x3c>
 800912c:	2b00      	cmp	r3, #0
 800912e:	dd11      	ble.n	8009154 <socket+0x58>
 8009130:	3b02      	subs	r3, #2
 8009132:	2b02      	cmp	r3, #2
 8009134:	d80e      	bhi.n	8009154 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8009136:	e011      	b.n	800915c <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8009138:	f107 030c 	add.w	r3, r7, #12
 800913c:	2204      	movs	r2, #4
 800913e:	4619      	mov	r1, r3
 8009140:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8009144:	f7ff fd84 	bl	8008c50 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d105      	bne.n	800915a <socket+0x5e>
 800914e:	f06f 0302 	mvn.w	r3, #2
 8009152:	e0db      	b.n	800930c <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8009154:	f06f 0304 	mvn.w	r3, #4
 8009158:	e0d8      	b.n	800930c <socket+0x210>
	    break;
 800915a:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800915c:	78fb      	ldrb	r3, [r7, #3]
 800915e:	f003 0304 	and.w	r3, r3, #4
 8009162:	2b00      	cmp	r3, #0
 8009164:	d002      	beq.n	800916c <socket+0x70>
 8009166:	f06f 0305 	mvn.w	r3, #5
 800916a:	e0cf      	b.n	800930c <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 800916c:	78fb      	ldrb	r3, [r7, #3]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d025      	beq.n	80091be <socket+0xc2>
	{
   	switch(protocol)
 8009172:	79bb      	ldrb	r3, [r7, #6]
 8009174:	2b01      	cmp	r3, #1
 8009176:	d002      	beq.n	800917e <socket+0x82>
 8009178:	2b02      	cmp	r3, #2
 800917a:	d008      	beq.n	800918e <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800917c:	e024      	b.n	80091c8 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800917e:	78fb      	ldrb	r3, [r7, #3]
 8009180:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8009184:	2b00      	cmp	r3, #0
 8009186:	d11c      	bne.n	80091c2 <socket+0xc6>
 8009188:	f06f 0305 	mvn.w	r3, #5
 800918c:	e0be      	b.n	800930c <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 800918e:	78fb      	ldrb	r3, [r7, #3]
 8009190:	f003 0320 	and.w	r3, r3, #32
 8009194:	2b00      	cmp	r3, #0
 8009196:	d006      	beq.n	80091a6 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8009198:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800919c:	2b00      	cmp	r3, #0
 800919e:	db02      	blt.n	80091a6 <socket+0xaa>
 80091a0:	f06f 0305 	mvn.w	r3, #5
 80091a4:	e0b2      	b.n	800930c <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 80091a6:	78fb      	ldrb	r3, [r7, #3]
 80091a8:	f003 0310 	and.w	r3, r3, #16
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00a      	beq.n	80091c6 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80091b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	db06      	blt.n	80091c6 <socket+0xca>
 80091b8:	f06f 0305 	mvn.w	r3, #5
 80091bc:	e0a6      	b.n	800930c <socket+0x210>
   	}
   }
 80091be:	bf00      	nop
 80091c0:	e002      	b.n	80091c8 <socket+0xcc>
   	      break;
 80091c2:	bf00      	nop
 80091c4:	e000      	b.n	80091c8 <socket+0xcc>
   	      break;
 80091c6:	bf00      	nop
	close(sn);
 80091c8:	79fb      	ldrb	r3, [r7, #7]
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 f8ac 	bl	8009328 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80091d0:	79fb      	ldrb	r3, [r7, #7]
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	3301      	adds	r3, #1
 80091d6:	00db      	lsls	r3, r3, #3
 80091d8:	4618      	mov	r0, r3
 80091da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091de:	f023 030f 	bic.w	r3, r3, #15
 80091e2:	b25a      	sxtb	r2, r3
 80091e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	b25b      	sxtb	r3, r3
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	4619      	mov	r1, r3
 80091f0:	f7ff fce0 	bl	8008bb4 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80091f4:	88bb      	ldrh	r3, [r7, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d110      	bne.n	800921c <socket+0x120>
	{
	   port = sock_any_port++;
 80091fa:	4b46      	ldr	r3, [pc, #280]	; (8009314 <socket+0x218>)
 80091fc:	881b      	ldrh	r3, [r3, #0]
 80091fe:	1c5a      	adds	r2, r3, #1
 8009200:	b291      	uxth	r1, r2
 8009202:	4a44      	ldr	r2, [pc, #272]	; (8009314 <socket+0x218>)
 8009204:	8011      	strh	r1, [r2, #0]
 8009206:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8009208:	4b42      	ldr	r3, [pc, #264]	; (8009314 <socket+0x218>)
 800920a:	881b      	ldrh	r3, [r3, #0]
 800920c:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8009210:	4293      	cmp	r3, r2
 8009212:	d103      	bne.n	800921c <socket+0x120>
 8009214:	4b3f      	ldr	r3, [pc, #252]	; (8009314 <socket+0x218>)
 8009216:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800921a:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 800921c:	79fb      	ldrb	r3, [r7, #7]
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	3301      	adds	r3, #1
 8009222:	00db      	lsls	r3, r3, #3
 8009224:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009228:	461a      	mov	r2, r3
 800922a:	88bb      	ldrh	r3, [r7, #4]
 800922c:	0a1b      	lsrs	r3, r3, #8
 800922e:	b29b      	uxth	r3, r3
 8009230:	b2db      	uxtb	r3, r3
 8009232:	4619      	mov	r1, r3
 8009234:	4610      	mov	r0, r2
 8009236:	f7ff fcbd 	bl	8008bb4 <WIZCHIP_WRITE>
 800923a:	79fb      	ldrb	r3, [r7, #7]
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	3301      	adds	r3, #1
 8009240:	00db      	lsls	r3, r3, #3
 8009242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009246:	461a      	mov	r2, r3
 8009248:	88bb      	ldrh	r3, [r7, #4]
 800924a:	b2db      	uxtb	r3, r3
 800924c:	4619      	mov	r1, r3
 800924e:	4610      	mov	r0, r2
 8009250:	f7ff fcb0 	bl	8008bb4 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8009254:	79fb      	ldrb	r3, [r7, #7]
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	3301      	adds	r3, #1
 800925a:	00db      	lsls	r3, r3, #3
 800925c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009260:	2101      	movs	r1, #1
 8009262:	4618      	mov	r0, r3
 8009264:	f7ff fca6 	bl	8008bb4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8009268:	bf00      	nop
 800926a:	79fb      	ldrb	r3, [r7, #7]
 800926c:	009b      	lsls	r3, r3, #2
 800926e:	3301      	adds	r3, #1
 8009270:	00db      	lsls	r3, r3, #3
 8009272:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009276:	4618      	mov	r0, r3
 8009278:	f7ff fc50 	bl	8008b1c <WIZCHIP_READ>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1f3      	bne.n	800926a <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8009282:	79fb      	ldrb	r3, [r7, #7]
 8009284:	2201      	movs	r2, #1
 8009286:	fa02 f303 	lsl.w	r3, r2, r3
 800928a:	b21b      	sxth	r3, r3
 800928c:	43db      	mvns	r3, r3
 800928e:	b21a      	sxth	r2, r3
 8009290:	4b21      	ldr	r3, [pc, #132]	; (8009318 <socket+0x21c>)
 8009292:	881b      	ldrh	r3, [r3, #0]
 8009294:	b21b      	sxth	r3, r3
 8009296:	4013      	ands	r3, r2
 8009298:	b21b      	sxth	r3, r3
 800929a:	b29a      	uxth	r2, r3
 800929c:	4b1e      	ldr	r3, [pc, #120]	; (8009318 <socket+0x21c>)
 800929e:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80092a0:	78fb      	ldrb	r3, [r7, #3]
 80092a2:	f003 0201 	and.w	r2, r3, #1
 80092a6:	79fb      	ldrb	r3, [r7, #7]
 80092a8:	fa02 f303 	lsl.w	r3, r2, r3
 80092ac:	b21a      	sxth	r2, r3
 80092ae:	4b1a      	ldr	r3, [pc, #104]	; (8009318 <socket+0x21c>)
 80092b0:	881b      	ldrh	r3, [r3, #0]
 80092b2:	b21b      	sxth	r3, r3
 80092b4:	4313      	orrs	r3, r2
 80092b6:	b21b      	sxth	r3, r3
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	4b17      	ldr	r3, [pc, #92]	; (8009318 <socket+0x21c>)
 80092bc:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80092be:	79fb      	ldrb	r3, [r7, #7]
 80092c0:	2201      	movs	r2, #1
 80092c2:	fa02 f303 	lsl.w	r3, r2, r3
 80092c6:	b21b      	sxth	r3, r3
 80092c8:	43db      	mvns	r3, r3
 80092ca:	b21a      	sxth	r2, r3
 80092cc:	4b13      	ldr	r3, [pc, #76]	; (800931c <socket+0x220>)
 80092ce:	881b      	ldrh	r3, [r3, #0]
 80092d0:	b21b      	sxth	r3, r3
 80092d2:	4013      	ands	r3, r2
 80092d4:	b21b      	sxth	r3, r3
 80092d6:	b29a      	uxth	r2, r3
 80092d8:	4b10      	ldr	r3, [pc, #64]	; (800931c <socket+0x220>)
 80092da:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80092dc:	79fb      	ldrb	r3, [r7, #7]
 80092de:	4a10      	ldr	r2, [pc, #64]	; (8009320 <socket+0x224>)
 80092e0:	2100      	movs	r1, #0
 80092e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80092e6:	79fb      	ldrb	r3, [r7, #7]
 80092e8:	4a0e      	ldr	r2, [pc, #56]	; (8009324 <socket+0x228>)
 80092ea:	2100      	movs	r1, #0
 80092ec:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80092ee:	bf00      	nop
 80092f0:	79fb      	ldrb	r3, [r7, #7]
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	3301      	adds	r3, #1
 80092f6:	00db      	lsls	r3, r3, #3
 80092f8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7ff fc0d 	bl	8008b1c <WIZCHIP_READ>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d0f3      	beq.n	80092f0 <socket+0x1f4>
   return (int8_t)sn;
 8009308:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 800930c:	4618      	mov	r0, r3
 800930e:	3714      	adds	r7, #20
 8009310:	46bd      	mov	sp, r7
 8009312:	bd90      	pop	{r4, r7, pc}
 8009314:	20000096 	.word	0x20000096
 8009318:	20002e48 	.word	0x20002e48
 800931c:	20002e4a 	.word	0x20002e4a
 8009320:	20002e4c 	.word	0x20002e4c
 8009324:	20002e5c 	.word	0x20002e5c

08009328 <close>:

int8_t close(uint8_t sn)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	4603      	mov	r3, r0
 8009330:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8009332:	79fb      	ldrb	r3, [r7, #7]
 8009334:	2b08      	cmp	r3, #8
 8009336:	d902      	bls.n	800933e <close+0x16>
 8009338:	f04f 33ff 	mov.w	r3, #4294967295
 800933c:	e055      	b.n	80093ea <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800933e:	79fb      	ldrb	r3, [r7, #7]
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	3301      	adds	r3, #1
 8009344:	00db      	lsls	r3, r3, #3
 8009346:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800934a:	2110      	movs	r1, #16
 800934c:	4618      	mov	r0, r3
 800934e:	f7ff fc31 	bl	8008bb4 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8009352:	bf00      	nop
 8009354:	79fb      	ldrb	r3, [r7, #7]
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	3301      	adds	r3, #1
 800935a:	00db      	lsls	r3, r3, #3
 800935c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009360:	4618      	mov	r0, r3
 8009362:	f7ff fbdb 	bl	8008b1c <WIZCHIP_READ>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d1f3      	bne.n	8009354 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800936c:	79fb      	ldrb	r3, [r7, #7]
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	3301      	adds	r3, #1
 8009372:	00db      	lsls	r3, r3, #3
 8009374:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009378:	211f      	movs	r1, #31
 800937a:	4618      	mov	r0, r3
 800937c:	f7ff fc1a 	bl	8008bb4 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8009380:	79fb      	ldrb	r3, [r7, #7]
 8009382:	2201      	movs	r2, #1
 8009384:	fa02 f303 	lsl.w	r3, r2, r3
 8009388:	b21b      	sxth	r3, r3
 800938a:	43db      	mvns	r3, r3
 800938c:	b21a      	sxth	r2, r3
 800938e:	4b19      	ldr	r3, [pc, #100]	; (80093f4 <close+0xcc>)
 8009390:	881b      	ldrh	r3, [r3, #0]
 8009392:	b21b      	sxth	r3, r3
 8009394:	4013      	ands	r3, r2
 8009396:	b21b      	sxth	r3, r3
 8009398:	b29a      	uxth	r2, r3
 800939a:	4b16      	ldr	r3, [pc, #88]	; (80093f4 <close+0xcc>)
 800939c:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800939e:	79fb      	ldrb	r3, [r7, #7]
 80093a0:	2201      	movs	r2, #1
 80093a2:	fa02 f303 	lsl.w	r3, r2, r3
 80093a6:	b21b      	sxth	r3, r3
 80093a8:	43db      	mvns	r3, r3
 80093aa:	b21a      	sxth	r2, r3
 80093ac:	4b12      	ldr	r3, [pc, #72]	; (80093f8 <close+0xd0>)
 80093ae:	881b      	ldrh	r3, [r3, #0]
 80093b0:	b21b      	sxth	r3, r3
 80093b2:	4013      	ands	r3, r2
 80093b4:	b21b      	sxth	r3, r3
 80093b6:	b29a      	uxth	r2, r3
 80093b8:	4b0f      	ldr	r3, [pc, #60]	; (80093f8 <close+0xd0>)
 80093ba:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80093bc:	79fb      	ldrb	r3, [r7, #7]
 80093be:	4a0f      	ldr	r2, [pc, #60]	; (80093fc <close+0xd4>)
 80093c0:	2100      	movs	r1, #0
 80093c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80093c6:	79fb      	ldrb	r3, [r7, #7]
 80093c8:	4a0d      	ldr	r2, [pc, #52]	; (8009400 <close+0xd8>)
 80093ca:	2100      	movs	r1, #0
 80093cc:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80093ce:	bf00      	nop
 80093d0:	79fb      	ldrb	r3, [r7, #7]
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	3301      	adds	r3, #1
 80093d6:	00db      	lsls	r3, r3, #3
 80093d8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80093dc:	4618      	mov	r0, r3
 80093de:	f7ff fb9d 	bl	8008b1c <WIZCHIP_READ>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1f3      	bne.n	80093d0 <close+0xa8>
	return SOCK_OK;
 80093e8:	2301      	movs	r3, #1
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	20002e48 	.word	0x20002e48
 80093f8:	20002e4a 	.word	0x20002e4a
 80093fc:	20002e4c 	.word	0x20002e4c
 8009400:	20002e5c 	.word	0x20002e5c

08009404 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
 800940a:	60b9      	str	r1, [r7, #8]
 800940c:	607b      	str	r3, [r7, #4]
 800940e:	4603      	mov	r3, r0
 8009410:	73fb      	strb	r3, [r7, #15]
 8009412:	4613      	mov	r3, r2
 8009414:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8009416:	2300      	movs	r3, #0
 8009418:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 800941a:	2300      	movs	r3, #0
 800941c:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800941e:	7bfb      	ldrb	r3, [r7, #15]
 8009420:	2b08      	cmp	r3, #8
 8009422:	d902      	bls.n	800942a <sendto+0x26>
 8009424:	f04f 33ff 	mov.w	r3, #4294967295
 8009428:	e11b      	b.n	8009662 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 800942a:	7bfb      	ldrb	r3, [r7, #15]
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	3301      	adds	r3, #1
 8009430:	00db      	lsls	r3, r3, #3
 8009432:	4618      	mov	r0, r3
 8009434:	f7ff fb72 	bl	8008b1c <WIZCHIP_READ>
 8009438:	4603      	mov	r3, r0
 800943a:	f003 030f 	and.w	r3, r3, #15
 800943e:	3b02      	subs	r3, #2
 8009440:	2b02      	cmp	r3, #2
 8009442:	d902      	bls.n	800944a <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8009444:	f06f 0304 	mvn.w	r3, #4
 8009448:	e10b      	b.n	8009662 <sendto+0x25e>
         break;
 800944a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800944c:	89bb      	ldrh	r3, [r7, #12]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d102      	bne.n	8009458 <sendto+0x54>
 8009452:	f06f 030d 	mvn.w	r3, #13
 8009456:	e104      	b.n	8009662 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	021b      	lsls	r3, r3, #8
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	3201      	adds	r2, #1
 8009466:	7812      	ldrb	r2, [r2, #0]
 8009468:	4413      	add	r3, r2
 800946a:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	021b      	lsls	r3, r3, #8
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	3202      	adds	r2, #2
 8009474:	7812      	ldrb	r2, [r2, #0]
 8009476:	4413      	add	r3, r2
 8009478:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	021b      	lsls	r3, r3, #8
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	3203      	adds	r2, #3
 8009482:	7812      	ldrb	r2, [r2, #0]
 8009484:	4413      	add	r3, r2
 8009486:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10e      	bne.n	80094ac <sendto+0xa8>
 800948e:	7bfb      	ldrb	r3, [r7, #15]
 8009490:	009b      	lsls	r3, r3, #2
 8009492:	3301      	adds	r3, #1
 8009494:	00db      	lsls	r3, r3, #3
 8009496:	4618      	mov	r0, r3
 8009498:	f7ff fb40 	bl	8008b1c <WIZCHIP_READ>
 800949c:	4603      	mov	r3, r0
 800949e:	f003 0304 	and.w	r3, r3, #4
 80094a2:	2b04      	cmp	r3, #4
 80094a4:	d002      	beq.n	80094ac <sendto+0xa8>
 80094a6:	f06f 030b 	mvn.w	r3, #11
 80094aa:	e0da      	b.n	8009662 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80094ac:	8c3b      	ldrh	r3, [r7, #32]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10e      	bne.n	80094d0 <sendto+0xcc>
 80094b2:	7bfb      	ldrb	r3, [r7, #15]
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	3301      	adds	r3, #1
 80094b8:	00db      	lsls	r3, r3, #3
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7ff fb2e 	bl	8008b1c <WIZCHIP_READ>
 80094c0:	4603      	mov	r3, r0
 80094c2:	f003 0304 	and.w	r3, r3, #4
 80094c6:	2b04      	cmp	r3, #4
 80094c8:	d002      	beq.n	80094d0 <sendto+0xcc>
 80094ca:	f06f 030a 	mvn.w	r3, #10
 80094ce:	e0c8      	b.n	8009662 <sendto+0x25e>
   tmp = getSn_SR(sn);
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	3301      	adds	r3, #1
 80094d6:	00db      	lsls	r3, r3, #3
 80094d8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80094dc:	4618      	mov	r0, r3
 80094de:	f7ff fb1d 	bl	8008b1c <WIZCHIP_READ>
 80094e2:	4603      	mov	r3, r0
 80094e4:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80094e6:	7dfb      	ldrb	r3, [r7, #23]
 80094e8:	2b42      	cmp	r3, #66	; 0x42
 80094ea:	d008      	beq.n	80094fe <sendto+0xfa>
 80094ec:	7dfb      	ldrb	r3, [r7, #23]
 80094ee:	2b22      	cmp	r3, #34	; 0x22
 80094f0:	d005      	beq.n	80094fe <sendto+0xfa>
 80094f2:	7dfb      	ldrb	r3, [r7, #23]
 80094f4:	2b32      	cmp	r3, #50	; 0x32
 80094f6:	d002      	beq.n	80094fe <sendto+0xfa>
 80094f8:	f06f 0306 	mvn.w	r3, #6
 80094fc:	e0b1      	b.n	8009662 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 80094fe:	7bfb      	ldrb	r3, [r7, #15]
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	3301      	adds	r3, #1
 8009504:	00db      	lsls	r3, r3, #3
 8009506:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800950a:	2204      	movs	r2, #4
 800950c:	6879      	ldr	r1, [r7, #4]
 800950e:	4618      	mov	r0, r3
 8009510:	f7ff fbfe 	bl	8008d10 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	3301      	adds	r3, #1
 800951a:	00db      	lsls	r3, r3, #3
 800951c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009520:	461a      	mov	r2, r3
 8009522:	8c3b      	ldrh	r3, [r7, #32]
 8009524:	0a1b      	lsrs	r3, r3, #8
 8009526:	b29b      	uxth	r3, r3
 8009528:	b2db      	uxtb	r3, r3
 800952a:	4619      	mov	r1, r3
 800952c:	4610      	mov	r0, r2
 800952e:	f7ff fb41 	bl	8008bb4 <WIZCHIP_WRITE>
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	3301      	adds	r3, #1
 8009538:	00db      	lsls	r3, r3, #3
 800953a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800953e:	461a      	mov	r2, r3
 8009540:	8c3b      	ldrh	r3, [r7, #32]
 8009542:	b2db      	uxtb	r3, r3
 8009544:	4619      	mov	r1, r3
 8009546:	4610      	mov	r0, r2
 8009548:	f7ff fb34 	bl	8008bb4 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 800954c:	7bfb      	ldrb	r3, [r7, #15]
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	3301      	adds	r3, #1
 8009552:	00db      	lsls	r3, r3, #3
 8009554:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8009558:	4618      	mov	r0, r3
 800955a:	f7ff fadf 	bl	8008b1c <WIZCHIP_READ>
 800955e:	4603      	mov	r3, r0
 8009560:	b29b      	uxth	r3, r3
 8009562:	029b      	lsls	r3, r3, #10
 8009564:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8009566:	89ba      	ldrh	r2, [r7, #12]
 8009568:	8abb      	ldrh	r3, [r7, #20]
 800956a:	429a      	cmp	r2, r3
 800956c:	d901      	bls.n	8009572 <sendto+0x16e>
 800956e:	8abb      	ldrh	r3, [r7, #20]
 8009570:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8009572:	7bfb      	ldrb	r3, [r7, #15]
 8009574:	4618      	mov	r0, r3
 8009576:	f7ff fc2b 	bl	8008dd0 <getSn_TX_FSR>
 800957a:	4603      	mov	r3, r0
 800957c:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800957e:	7bfb      	ldrb	r3, [r7, #15]
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	3301      	adds	r3, #1
 8009584:	00db      	lsls	r3, r3, #3
 8009586:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800958a:	4618      	mov	r0, r3
 800958c:	f7ff fac6 	bl	8008b1c <WIZCHIP_READ>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d102      	bne.n	800959c <sendto+0x198>
 8009596:	f06f 0303 	mvn.w	r3, #3
 800959a:	e062      	b.n	8009662 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800959c:	4b33      	ldr	r3, [pc, #204]	; (800966c <sendto+0x268>)
 800959e:	881b      	ldrh	r3, [r3, #0]
 80095a0:	461a      	mov	r2, r3
 80095a2:	7bfb      	ldrb	r3, [r7, #15]
 80095a4:	fa42 f303 	asr.w	r3, r2, r3
 80095a8:	f003 0301 	and.w	r3, r3, #1
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d005      	beq.n	80095bc <sendto+0x1b8>
 80095b0:	89ba      	ldrh	r2, [r7, #12]
 80095b2:	8abb      	ldrh	r3, [r7, #20]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d901      	bls.n	80095bc <sendto+0x1b8>
 80095b8:	2300      	movs	r3, #0
 80095ba:	e052      	b.n	8009662 <sendto+0x25e>
      if(len <= freesize) break;
 80095bc:	89ba      	ldrh	r2, [r7, #12]
 80095be:	8abb      	ldrh	r3, [r7, #20]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d900      	bls.n	80095c6 <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 80095c4:	e7d5      	b.n	8009572 <sendto+0x16e>
      if(len <= freesize) break;
 80095c6:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80095c8:	89ba      	ldrh	r2, [r7, #12]
 80095ca:	7bfb      	ldrb	r3, [r7, #15]
 80095cc:	68b9      	ldr	r1, [r7, #8]
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7ff fc94 	bl	8008efc <wiz_send_data>
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   

   setSn_CR(sn,Sn_CR_SEND);
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	3301      	adds	r3, #1
 80095da:	00db      	lsls	r3, r3, #3
 80095dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80095e0:	2120      	movs	r1, #32
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7ff fae6 	bl	8008bb4 <WIZCHIP_WRITE>


	/* wait to process the command... */
	while(getSn_CR(sn));
 80095e8:	bf00      	nop
 80095ea:	7bfb      	ldrb	r3, [r7, #15]
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	3301      	adds	r3, #1
 80095f0:	00db      	lsls	r3, r3, #3
 80095f2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7ff fa90 	bl	8008b1c <WIZCHIP_READ>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1f3      	bne.n	80095ea <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 8009602:	7bfb      	ldrb	r3, [r7, #15]
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	3301      	adds	r3, #1
 8009608:	00db      	lsls	r3, r3, #3
 800960a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800960e:	4618      	mov	r0, r3
 8009610:	f7ff fa84 	bl	8008b1c <WIZCHIP_READ>
 8009614:	4603      	mov	r3, r0
 8009616:	f003 031f 	and.w	r3, r3, #31
 800961a:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 800961c:	7dfb      	ldrb	r3, [r7, #23]
 800961e:	f003 0310 	and.w	r3, r3, #16
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00c      	beq.n	8009640 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8009626:	7bfb      	ldrb	r3, [r7, #15]
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	3301      	adds	r3, #1
 800962c:	00db      	lsls	r3, r3, #3
 800962e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009632:	2110      	movs	r1, #16
 8009634:	4618      	mov	r0, r3
 8009636:	f7ff fabd 	bl	8008bb4 <WIZCHIP_WRITE>
         break;
 800963a:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800963c:	89bb      	ldrh	r3, [r7, #12]
 800963e:	e010      	b.n	8009662 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8009640:	7dfb      	ldrb	r3, [r7, #23]
 8009642:	f003 0308 	and.w	r3, r3, #8
 8009646:	2b00      	cmp	r3, #0
 8009648:	d0db      	beq.n	8009602 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800964a:	7bfb      	ldrb	r3, [r7, #15]
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	3301      	adds	r3, #1
 8009650:	00db      	lsls	r3, r3, #3
 8009652:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009656:	2108      	movs	r1, #8
 8009658:	4618      	mov	r0, r3
 800965a:	f7ff faab 	bl	8008bb4 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 800965e:	f06f 030c 	mvn.w	r3, #12
}
 8009662:	4618      	mov	r0, r3
 8009664:	3718      	adds	r7, #24
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	20002e48 	.word	0x20002e48

08009670 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b088      	sub	sp, #32
 8009674:	af00      	add	r7, sp, #0
 8009676:	60b9      	str	r1, [r7, #8]
 8009678:	607b      	str	r3, [r7, #4]
 800967a:	4603      	mov	r3, r0
 800967c:	73fb      	strb	r3, [r7, #15]
 800967e:	4613      	mov	r3, r2
 8009680:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8009682:	2300      	movs	r3, #0
 8009684:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8009686:	7bfb      	ldrb	r3, [r7, #15]
 8009688:	2b08      	cmp	r3, #8
 800968a:	d902      	bls.n	8009692 <recvfrom+0x22>
 800968c:	f04f 33ff 	mov.w	r3, #4294967295
 8009690:	e1d4      	b.n	8009a3c <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8009692:	7bfb      	ldrb	r3, [r7, #15]
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	3301      	adds	r3, #1
 8009698:	00db      	lsls	r3, r3, #3
 800969a:	4618      	mov	r0, r3
 800969c:	f7ff fa3e 	bl	8008b1c <WIZCHIP_READ>
 80096a0:	4603      	mov	r3, r0
 80096a2:	777b      	strb	r3, [r7, #29]
 80096a4:	7f7b      	ldrb	r3, [r7, #29]
 80096a6:	f003 030f 	and.w	r3, r3, #15
 80096aa:	3b02      	subs	r3, #2
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d902      	bls.n	80096b6 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 80096b0:	f06f 0304 	mvn.w	r3, #4
 80096b4:	e1c2      	b.n	8009a3c <recvfrom+0x3cc>
         break;
 80096b6:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80096b8:	89bb      	ldrh	r3, [r7, #12]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d102      	bne.n	80096c4 <recvfrom+0x54>
 80096be:	f06f 030d 	mvn.w	r3, #13
 80096c2:	e1bb      	b.n	8009a3c <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 80096c4:	7bfb      	ldrb	r3, [r7, #15]
 80096c6:	4a88      	ldr	r2, [pc, #544]	; (80098e8 <recvfrom+0x278>)
 80096c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d128      	bne.n	8009722 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80096d0:	7bfb      	ldrb	r3, [r7, #15]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7ff fbc7 	bl	8008e66 <getSn_RX_RSR>
 80096d8:	4603      	mov	r3, r0
 80096da:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	3301      	adds	r3, #1
 80096e2:	00db      	lsls	r3, r3, #3
 80096e4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7ff fa17 	bl	8008b1c <WIZCHIP_READ>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d102      	bne.n	80096fa <recvfrom+0x8a>
 80096f4:	f06f 0303 	mvn.w	r3, #3
 80096f8:	e1a0      	b.n	8009a3c <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 80096fa:	4b7c      	ldr	r3, [pc, #496]	; (80098ec <recvfrom+0x27c>)
 80096fc:	881b      	ldrh	r3, [r3, #0]
 80096fe:	461a      	mov	r2, r3
 8009700:	7bfb      	ldrb	r3, [r7, #15]
 8009702:	fa42 f303 	asr.w	r3, r2, r3
 8009706:	f003 0301 	and.w	r3, r3, #1
 800970a:	2b00      	cmp	r3, #0
 800970c:	d004      	beq.n	8009718 <recvfrom+0xa8>
 800970e:	8bfb      	ldrh	r3, [r7, #30]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d101      	bne.n	8009718 <recvfrom+0xa8>
 8009714:	2300      	movs	r3, #0
 8009716:	e191      	b.n	8009a3c <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8009718:	8bfb      	ldrh	r3, [r7, #30]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d100      	bne.n	8009720 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 800971e:	e7d7      	b.n	80096d0 <recvfrom+0x60>
         if(pack_len != 0) break;
 8009720:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8009722:	7f7b      	ldrb	r3, [r7, #29]
 8009724:	f003 0307 	and.w	r3, r3, #7
 8009728:	2b04      	cmp	r3, #4
 800972a:	d079      	beq.n	8009820 <recvfrom+0x1b0>
 800972c:	2b04      	cmp	r3, #4
 800972e:	f300 8142 	bgt.w	80099b6 <recvfrom+0x346>
 8009732:	2b02      	cmp	r3, #2
 8009734:	d003      	beq.n	800973e <recvfrom+0xce>
 8009736:	2b03      	cmp	r3, #3
 8009738:	f000 80dc 	beq.w	80098f4 <recvfrom+0x284>
 800973c:	e13b      	b.n	80099b6 <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 800973e:	7bfb      	ldrb	r3, [r7, #15]
 8009740:	4a69      	ldr	r2, [pc, #420]	; (80098e8 <recvfrom+0x278>)
 8009742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d152      	bne.n	80097f0 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 800974a:	f107 0114 	add.w	r1, r7, #20
 800974e:	7bfb      	ldrb	r3, [r7, #15]
 8009750:	2208      	movs	r2, #8
 8009752:	4618      	mov	r0, r3
 8009754:	f7ff fc2e 	bl	8008fb4 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8009758:	7bfb      	ldrb	r3, [r7, #15]
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	3301      	adds	r3, #1
 800975e:	00db      	lsls	r3, r3, #3
 8009760:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009764:	2140      	movs	r1, #64	; 0x40
 8009766:	4618      	mov	r0, r3
 8009768:	f7ff fa24 	bl	8008bb4 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800976c:	bf00      	nop
 800976e:	7bfb      	ldrb	r3, [r7, #15]
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	3301      	adds	r3, #1
 8009774:	00db      	lsls	r3, r3, #3
 8009776:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800977a:	4618      	mov	r0, r3
 800977c:	f7ff f9ce 	bl	8008b1c <WIZCHIP_READ>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1f3      	bne.n	800976e <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8009786:	7d3a      	ldrb	r2, [r7, #20]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	3301      	adds	r3, #1
 8009790:	7d7a      	ldrb	r2, [r7, #21]
 8009792:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	3302      	adds	r3, #2
 8009798:	7dba      	ldrb	r2, [r7, #22]
 800979a:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	3303      	adds	r3, #3
 80097a0:	7dfa      	ldrb	r2, [r7, #23]
 80097a2:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80097a4:	7e3b      	ldrb	r3, [r7, #24]
 80097a6:	b29a      	uxth	r2, r3
 80097a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097aa:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 80097ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ae:	881b      	ldrh	r3, [r3, #0]
 80097b0:	021b      	lsls	r3, r3, #8
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	7e7b      	ldrb	r3, [r7, #25]
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	4413      	add	r3, r2
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097be:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80097c0:	7eba      	ldrb	r2, [r7, #26]
 80097c2:	7bfb      	ldrb	r3, [r7, #15]
 80097c4:	b291      	uxth	r1, r2
 80097c6:	4a48      	ldr	r2, [pc, #288]	; (80098e8 <recvfrom+0x278>)
 80097c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80097cc:	7bfb      	ldrb	r3, [r7, #15]
 80097ce:	4a46      	ldr	r2, [pc, #280]	; (80098e8 <recvfrom+0x278>)
 80097d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097d4:	021b      	lsls	r3, r3, #8
 80097d6:	b299      	uxth	r1, r3
 80097d8:	7efb      	ldrb	r3, [r7, #27]
 80097da:	b29a      	uxth	r2, r3
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
 80097de:	440a      	add	r2, r1
 80097e0:	b291      	uxth	r1, r2
 80097e2:	4a41      	ldr	r2, [pc, #260]	; (80098e8 <recvfrom+0x278>)
 80097e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
 80097ea:	4a41      	ldr	r2, [pc, #260]	; (80098f0 <recvfrom+0x280>)
 80097ec:	2180      	movs	r1, #128	; 0x80
 80097ee:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
 80097f2:	4a3d      	ldr	r2, [pc, #244]	; (80098e8 <recvfrom+0x278>)
 80097f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097f8:	89ba      	ldrh	r2, [r7, #12]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d202      	bcs.n	8009804 <recvfrom+0x194>
 80097fe:	89bb      	ldrh	r3, [r7, #12]
 8009800:	83fb      	strh	r3, [r7, #30]
 8009802:	e004      	b.n	800980e <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8009804:	7bfb      	ldrb	r3, [r7, #15]
 8009806:	4a38      	ldr	r2, [pc, #224]	; (80098e8 <recvfrom+0x278>)
 8009808:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800980c:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 800980e:	8bfb      	ldrh	r3, [r7, #30]
 8009810:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8009812:	8bfa      	ldrh	r2, [r7, #30]
 8009814:	7bfb      	ldrb	r3, [r7, #15]
 8009816:	68b9      	ldr	r1, [r7, #8]
 8009818:	4618      	mov	r0, r3
 800981a:	f7ff fbcb 	bl	8008fb4 <wiz_recv_data>
			break;
 800981e:	e0d6      	b.n	80099ce <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8009820:	7bfb      	ldrb	r3, [r7, #15]
 8009822:	4a31      	ldr	r2, [pc, #196]	; (80098e8 <recvfrom+0x278>)
 8009824:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d146      	bne.n	80098ba <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 800982c:	f107 0114 	add.w	r1, r7, #20
 8009830:	7bfb      	ldrb	r3, [r7, #15]
 8009832:	2202      	movs	r2, #2
 8009834:	4618      	mov	r0, r3
 8009836:	f7ff fbbd 	bl	8008fb4 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800983a:	7bfb      	ldrb	r3, [r7, #15]
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	3301      	adds	r3, #1
 8009840:	00db      	lsls	r3, r3, #3
 8009842:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009846:	2140      	movs	r1, #64	; 0x40
 8009848:	4618      	mov	r0, r3
 800984a:	f7ff f9b3 	bl	8008bb4 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800984e:	bf00      	nop
 8009850:	7bfb      	ldrb	r3, [r7, #15]
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	3301      	adds	r3, #1
 8009856:	00db      	lsls	r3, r3, #3
 8009858:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800985c:	4618      	mov	r0, r3
 800985e:	f7ff f95d 	bl	8008b1c <WIZCHIP_READ>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1f3      	bne.n	8009850 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8009868:	7d3a      	ldrb	r2, [r7, #20]
 800986a:	7bfb      	ldrb	r3, [r7, #15]
 800986c:	b291      	uxth	r1, r2
 800986e:	4a1e      	ldr	r2, [pc, #120]	; (80098e8 <recvfrom+0x278>)
 8009870:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8009874:	7bfb      	ldrb	r3, [r7, #15]
 8009876:	4a1c      	ldr	r2, [pc, #112]	; (80098e8 <recvfrom+0x278>)
 8009878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800987c:	021b      	lsls	r3, r3, #8
 800987e:	b29a      	uxth	r2, r3
 8009880:	7d7b      	ldrb	r3, [r7, #21]
 8009882:	b29b      	uxth	r3, r3
 8009884:	4413      	add	r3, r2
 8009886:	b29a      	uxth	r2, r3
 8009888:	7bfb      	ldrb	r3, [r7, #15]
 800988a:	3a02      	subs	r2, #2
 800988c:	b291      	uxth	r1, r2
 800988e:	4a16      	ldr	r2, [pc, #88]	; (80098e8 <recvfrom+0x278>)
 8009890:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8009894:	7bfb      	ldrb	r3, [r7, #15]
 8009896:	4a14      	ldr	r2, [pc, #80]	; (80098e8 <recvfrom+0x278>)
 8009898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800989c:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d906      	bls.n	80098b2 <recvfrom+0x242>
   			{
   			   close(sn);
 80098a4:	7bfb      	ldrb	r3, [r7, #15]
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7ff fd3e 	bl	8009328 <close>
   			   return SOCKFATAL_PACKLEN;
 80098ac:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 80098b0:	e0c4      	b.n	8009a3c <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 80098b2:	7bfb      	ldrb	r3, [r7, #15]
 80098b4:	4a0e      	ldr	r2, [pc, #56]	; (80098f0 <recvfrom+0x280>)
 80098b6:	2180      	movs	r1, #128	; 0x80
 80098b8:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80098ba:	7bfb      	ldrb	r3, [r7, #15]
 80098bc:	4a0a      	ldr	r2, [pc, #40]	; (80098e8 <recvfrom+0x278>)
 80098be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098c2:	89ba      	ldrh	r2, [r7, #12]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d202      	bcs.n	80098ce <recvfrom+0x25e>
 80098c8:	89bb      	ldrh	r3, [r7, #12]
 80098ca:	83fb      	strh	r3, [r7, #30]
 80098cc:	e004      	b.n	80098d8 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 80098ce:	7bfb      	ldrb	r3, [r7, #15]
 80098d0:	4a05      	ldr	r2, [pc, #20]	; (80098e8 <recvfrom+0x278>)
 80098d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098d6:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80098d8:	8bfa      	ldrh	r2, [r7, #30]
 80098da:	7bfb      	ldrb	r3, [r7, #15]
 80098dc:	68b9      	ldr	r1, [r7, #8]
 80098de:	4618      	mov	r0, r3
 80098e0:	f7ff fb68 	bl	8008fb4 <wiz_recv_data>
		   break;
 80098e4:	e073      	b.n	80099ce <recvfrom+0x35e>
 80098e6:	bf00      	nop
 80098e8:	20002e4c 	.word	0x20002e4c
 80098ec:	20002e48 	.word	0x20002e48
 80098f0:	20002e5c 	.word	0x20002e5c
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80098f4:	7bfb      	ldrb	r3, [r7, #15]
 80098f6:	4a53      	ldr	r2, [pc, #332]	; (8009a44 <recvfrom+0x3d4>)
 80098f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d144      	bne.n	800998a <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8009900:	f107 0114 	add.w	r1, r7, #20
 8009904:	7bfb      	ldrb	r3, [r7, #15]
 8009906:	2206      	movs	r2, #6
 8009908:	4618      	mov	r0, r3
 800990a:	f7ff fb53 	bl	8008fb4 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800990e:	7bfb      	ldrb	r3, [r7, #15]
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	3301      	adds	r3, #1
 8009914:	00db      	lsls	r3, r3, #3
 8009916:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800991a:	2140      	movs	r1, #64	; 0x40
 800991c:	4618      	mov	r0, r3
 800991e:	f7ff f949 	bl	8008bb4 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8009922:	bf00      	nop
 8009924:	7bfb      	ldrb	r3, [r7, #15]
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	3301      	adds	r3, #1
 800992a:	00db      	lsls	r3, r3, #3
 800992c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009930:	4618      	mov	r0, r3
 8009932:	f7ff f8f3 	bl	8008b1c <WIZCHIP_READ>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d1f3      	bne.n	8009924 <recvfrom+0x2b4>
   			addr[0] = head[0];
 800993c:	7d3a      	ldrb	r2, [r7, #20]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	3301      	adds	r3, #1
 8009946:	7d7a      	ldrb	r2, [r7, #21]
 8009948:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	3302      	adds	r3, #2
 800994e:	7dba      	ldrb	r2, [r7, #22]
 8009950:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	3303      	adds	r3, #3
 8009956:	7dfa      	ldrb	r2, [r7, #23]
 8009958:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 800995a:	7e3a      	ldrb	r2, [r7, #24]
 800995c:	7bfb      	ldrb	r3, [r7, #15]
 800995e:	b291      	uxth	r1, r2
 8009960:	4a38      	ldr	r2, [pc, #224]	; (8009a44 <recvfrom+0x3d4>)
 8009962:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8009966:	7bfb      	ldrb	r3, [r7, #15]
 8009968:	4a36      	ldr	r2, [pc, #216]	; (8009a44 <recvfrom+0x3d4>)
 800996a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800996e:	021b      	lsls	r3, r3, #8
 8009970:	b299      	uxth	r1, r3
 8009972:	7e7b      	ldrb	r3, [r7, #25]
 8009974:	b29a      	uxth	r2, r3
 8009976:	7bfb      	ldrb	r3, [r7, #15]
 8009978:	440a      	add	r2, r1
 800997a:	b291      	uxth	r1, r2
 800997c:	4a31      	ldr	r2, [pc, #196]	; (8009a44 <recvfrom+0x3d4>)
 800997e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8009982:	7bfb      	ldrb	r3, [r7, #15]
 8009984:	4a30      	ldr	r2, [pc, #192]	; (8009a48 <recvfrom+0x3d8>)
 8009986:	2180      	movs	r1, #128	; 0x80
 8009988:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 800998a:	7bfb      	ldrb	r3, [r7, #15]
 800998c:	4a2d      	ldr	r2, [pc, #180]	; (8009a44 <recvfrom+0x3d4>)
 800998e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009992:	89ba      	ldrh	r2, [r7, #12]
 8009994:	429a      	cmp	r2, r3
 8009996:	d202      	bcs.n	800999e <recvfrom+0x32e>
 8009998:	89bb      	ldrh	r3, [r7, #12]
 800999a:	83fb      	strh	r3, [r7, #30]
 800999c:	e004      	b.n	80099a8 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 800999e:	7bfb      	ldrb	r3, [r7, #15]
 80099a0:	4a28      	ldr	r2, [pc, #160]	; (8009a44 <recvfrom+0x3d4>)
 80099a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099a6:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80099a8:	8bfa      	ldrh	r2, [r7, #30]
 80099aa:	7bfb      	ldrb	r3, [r7, #15]
 80099ac:	68b9      	ldr	r1, [r7, #8]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7ff fb00 	bl	8008fb4 <wiz_recv_data>
			break;
 80099b4:	e00b      	b.n	80099ce <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 80099b6:	8bfa      	ldrh	r2, [r7, #30]
 80099b8:	7bfb      	ldrb	r3, [r7, #15]
 80099ba:	4611      	mov	r1, r2
 80099bc:	4618      	mov	r0, r3
 80099be:	f7ff fb55 	bl	800906c <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80099c2:	7bfb      	ldrb	r3, [r7, #15]
 80099c4:	491f      	ldr	r1, [pc, #124]	; (8009a44 <recvfrom+0x3d4>)
 80099c6:	8bfa      	ldrh	r2, [r7, #30]
 80099c8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 80099cc:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 80099ce:	7bfb      	ldrb	r3, [r7, #15]
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	3301      	adds	r3, #1
 80099d4:	00db      	lsls	r3, r3, #3
 80099d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80099da:	2140      	movs	r1, #64	; 0x40
 80099dc:	4618      	mov	r0, r3
 80099de:	f7ff f8e9 	bl	8008bb4 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80099e2:	bf00      	nop
 80099e4:	7bfb      	ldrb	r3, [r7, #15]
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	3301      	adds	r3, #1
 80099ea:	00db      	lsls	r3, r3, #3
 80099ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7ff f893 	bl	8008b1c <WIZCHIP_READ>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1f3      	bne.n	80099e4 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 80099fc:	7bfb      	ldrb	r3, [r7, #15]
 80099fe:	4a11      	ldr	r2, [pc, #68]	; (8009a44 <recvfrom+0x3d4>)
 8009a00:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8009a04:	7bfb      	ldrb	r3, [r7, #15]
 8009a06:	8bfa      	ldrh	r2, [r7, #30]
 8009a08:	1a8a      	subs	r2, r1, r2
 8009a0a:	b291      	uxth	r1, r2
 8009a0c:	4a0d      	ldr	r2, [pc, #52]	; (8009a44 <recvfrom+0x3d4>)
 8009a0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8009a12:	7bfb      	ldrb	r3, [r7, #15]
 8009a14:	4a0b      	ldr	r2, [pc, #44]	; (8009a44 <recvfrom+0x3d4>)
 8009a16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d009      	beq.n	8009a32 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8009a1e:	7bfb      	ldrb	r3, [r7, #15]
 8009a20:	4a09      	ldr	r2, [pc, #36]	; (8009a48 <recvfrom+0x3d8>)
 8009a22:	5cd2      	ldrb	r2, [r2, r3]
 8009a24:	7bfb      	ldrb	r3, [r7, #15]
 8009a26:	f042 0201 	orr.w	r2, r2, #1
 8009a2a:	b2d1      	uxtb	r1, r2
 8009a2c:	4a06      	ldr	r2, [pc, #24]	; (8009a48 <recvfrom+0x3d8>)
 8009a2e:	54d1      	strb	r1, [r2, r3]
 8009a30:	e003      	b.n	8009a3a <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8009a32:	7bfb      	ldrb	r3, [r7, #15]
 8009a34:	4a04      	ldr	r2, [pc, #16]	; (8009a48 <recvfrom+0x3d8>)
 8009a36:	2100      	movs	r1, #0
 8009a38:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8009a3a:	8bfb      	ldrh	r3, [r7, #30]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3720      	adds	r7, #32
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	20002e4c 	.word	0x20002e4c
 8009a48:	20002e5c 	.word	0x20002e5c

08009a4c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8009a4c:	b480      	push	{r7}
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	bf00      	nop
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr

08009a5a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8009a5a:	b480      	push	{r7}
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	bf00      	nop
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8009a68:	b480      	push	{r7}
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	bf00      	nop
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a74:	4770      	bx	lr

08009a76 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8009a76:	b480      	push	{r7}
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	bf00      	nop
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	4618      	mov	r0, r3
 8009a94:	370c      	adds	r7, #12
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr

08009a9e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8009a9e:	b480      	push	{r7}
 8009aa0:	b083      	sub	sp, #12
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	70fb      	strb	r3, [r7, #3]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	78fa      	ldrb	r2, [r7, #3]
 8009aae:	701a      	strb	r2, [r3, #0]
 8009ab0:	bf00      	nop
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8009abc:	b480      	push	{r7}
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	71fb      	strb	r3, [r7, #7]
 8009ad6:	bf00      	nop
 8009ad8:	370c      	adds	r7, #12
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr

08009ae2 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8009ae2:	b480      	push	{r7}
 8009ae4:	b083      	sub	sp, #12
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
 8009aea:	460b      	mov	r3, r1
 8009aec:	807b      	strh	r3, [r7, #2]
 8009aee:	bf00      	nop
 8009af0:	370c      	adds	r7, #12
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8009afa:	b480      	push	{r7}
 8009afc:	b083      	sub	sp, #12
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
 8009b02:	460b      	mov	r3, r1
 8009b04:	807b      	strh	r3, [r7, #2]
 8009b06:	bf00      	nop
 8009b08:	370c      	adds	r7, #12
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
	...

08009b14 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d002      	beq.n	8009b2a <reg_wizchip_cs_cbfunc+0x16>
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d106      	bne.n	8009b38 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8009b2a:	4b0a      	ldr	r3, [pc, #40]	; (8009b54 <reg_wizchip_cs_cbfunc+0x40>)
 8009b2c:	4a0a      	ldr	r2, [pc, #40]	; (8009b58 <reg_wizchip_cs_cbfunc+0x44>)
 8009b2e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8009b30:	4b08      	ldr	r3, [pc, #32]	; (8009b54 <reg_wizchip_cs_cbfunc+0x40>)
 8009b32:	4a0a      	ldr	r2, [pc, #40]	; (8009b5c <reg_wizchip_cs_cbfunc+0x48>)
 8009b34:	619a      	str	r2, [r3, #24]
 8009b36:	e006      	b.n	8009b46 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8009b38:	4a06      	ldr	r2, [pc, #24]	; (8009b54 <reg_wizchip_cs_cbfunc+0x40>)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8009b3e:	4a05      	ldr	r2, [pc, #20]	; (8009b54 <reg_wizchip_cs_cbfunc+0x40>)
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	6193      	str	r3, [r2, #24]
   }
}
 8009b44:	bf00      	nop
 8009b46:	bf00      	nop
 8009b48:	370c      	adds	r7, #12
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b50:	4770      	bx	lr
 8009b52:	bf00      	nop
 8009b54:	20000098 	.word	0x20000098
 8009b58:	08009a69 	.word	0x08009a69
 8009b5c:	08009a77 	.word	0x08009a77

08009b60 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8009b6a:	bf00      	nop
 8009b6c:	4b0f      	ldr	r3, [pc, #60]	; (8009bac <reg_wizchip_spi_cbfunc+0x4c>)
 8009b6e:	881b      	ldrh	r3, [r3, #0]
 8009b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d0f9      	beq.n	8009b6c <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d002      	beq.n	8009b84 <reg_wizchip_spi_cbfunc+0x24>
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d106      	bne.n	8009b92 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8009b84:	4b09      	ldr	r3, [pc, #36]	; (8009bac <reg_wizchip_spi_cbfunc+0x4c>)
 8009b86:	4a0a      	ldr	r2, [pc, #40]	; (8009bb0 <reg_wizchip_spi_cbfunc+0x50>)
 8009b88:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8009b8a:	4b08      	ldr	r3, [pc, #32]	; (8009bac <reg_wizchip_spi_cbfunc+0x4c>)
 8009b8c:	4a09      	ldr	r2, [pc, #36]	; (8009bb4 <reg_wizchip_spi_cbfunc+0x54>)
 8009b8e:	621a      	str	r2, [r3, #32]
 8009b90:	e006      	b.n	8009ba0 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8009b92:	4a06      	ldr	r2, [pc, #24]	; (8009bac <reg_wizchip_spi_cbfunc+0x4c>)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8009b98:	4a04      	ldr	r2, [pc, #16]	; (8009bac <reg_wizchip_spi_cbfunc+0x4c>)
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	6213      	str	r3, [r2, #32]
   }
}
 8009b9e:	bf00      	nop
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	20000098 	.word	0x20000098
 8009bb0:	08009abd 	.word	0x08009abd
 8009bb4:	08009acd 	.word	0x08009acd

08009bb8 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b083      	sub	sp, #12
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8009bc2:	bf00      	nop
 8009bc4:	4b0f      	ldr	r3, [pc, #60]	; (8009c04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8009bc6:	881b      	ldrh	r3, [r3, #0]
 8009bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d0f9      	beq.n	8009bc4 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d002      	beq.n	8009bdc <reg_wizchip_spiburst_cbfunc+0x24>
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d106      	bne.n	8009bea <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8009bdc:	4b09      	ldr	r3, [pc, #36]	; (8009c04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8009bde:	4a0a      	ldr	r2, [pc, #40]	; (8009c08 <reg_wizchip_spiburst_cbfunc+0x50>)
 8009be0:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8009be2:	4b08      	ldr	r3, [pc, #32]	; (8009c04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8009be4:	4a09      	ldr	r2, [pc, #36]	; (8009c0c <reg_wizchip_spiburst_cbfunc+0x54>)
 8009be6:	629a      	str	r2, [r3, #40]	; 0x28
 8009be8:	e006      	b.n	8009bf8 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8009bea:	4a06      	ldr	r2, [pc, #24]	; (8009c04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8009bf0:	4a04      	ldr	r2, [pc, #16]	; (8009c04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8009bf6:	bf00      	nop
 8009bf8:	bf00      	nop
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr
 8009c04:	20000098 	.word	0x20000098
 8009c08:	08009ae3 	.word	0x08009ae3
 8009c0c:	08009afb 	.word	0x08009afb

08009c10 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8009c16:	1d3b      	adds	r3, r7, #4
 8009c18:	2206      	movs	r2, #6
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009c20:	f7ff f816 	bl	8008c50 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8009c24:	f107 0314 	add.w	r3, r7, #20
 8009c28:	2204      	movs	r2, #4
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009c30:	f7ff f80e 	bl	8008c50 <WIZCHIP_READ_BUF>
 8009c34:	f107 0310 	add.w	r3, r7, #16
 8009c38:	2204      	movs	r2, #4
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8009c40:	f7ff f806 	bl	8008c50 <WIZCHIP_READ_BUF>
 8009c44:	f107 030c 	add.w	r3, r7, #12
 8009c48:	2204      	movs	r2, #4
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8009c50:	f7fe fffe 	bl	8008c50 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8009c54:	2180      	movs	r1, #128	; 0x80
 8009c56:	2000      	movs	r0, #0
 8009c58:	f7fe ffac 	bl	8008bb4 <WIZCHIP_WRITE>
   getMR(); // for delay
 8009c5c:	2000      	movs	r0, #0
 8009c5e:	f7fe ff5d 	bl	8008b1c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8009c62:	1d3b      	adds	r3, r7, #4
 8009c64:	2206      	movs	r2, #6
 8009c66:	4619      	mov	r1, r3
 8009c68:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009c6c:	f7ff f850 	bl	8008d10 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8009c70:	f107 0314 	add.w	r3, r7, #20
 8009c74:	2204      	movs	r2, #4
 8009c76:	4619      	mov	r1, r3
 8009c78:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009c7c:	f7ff f848 	bl	8008d10 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8009c80:	f107 0310 	add.w	r3, r7, #16
 8009c84:	2204      	movs	r2, #4
 8009c86:	4619      	mov	r1, r3
 8009c88:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8009c8c:	f7ff f840 	bl	8008d10 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8009c90:	f107 030c 	add.w	r3, r7, #12
 8009c94:	2204      	movs	r2, #4
 8009c96:	4619      	mov	r1, r3
 8009c98:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8009c9c:	f7ff f838 	bl	8008d10 <WIZCHIP_WRITE_BUF>
}
 8009ca0:	bf00      	nop
 8009ca2:	3718      	adds	r7, #24
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8009cb6:	f7ff ffab 	bl	8009c10 <wizchip_sw_reset>
   if(txsize)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d03b      	beq.n	8009d38 <wizchip_init+0x90>
   {
      tmp = 0;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	73fb      	strb	r3, [r7, #15]
 8009cc8:	e015      	b.n	8009cf6 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8009cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	781a      	ldrb	r2, [r3, #0]
 8009cd4:	7bbb      	ldrb	r3, [r7, #14]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8009cdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ce0:	2b10      	cmp	r3, #16
 8009ce2:	dd02      	ble.n	8009cea <wizchip_init+0x42>
 8009ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ce8:	e066      	b.n	8009db8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	73fb      	strb	r3, [r7, #15]
 8009cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cfa:	2b07      	cmp	r3, #7
 8009cfc:	dde5      	ble.n	8009cca <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009cfe:	2300      	movs	r3, #0
 8009d00:	73fb      	strb	r3, [r7, #15]
 8009d02:	e015      	b.n	8009d30 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8009d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	00db      	lsls	r3, r3, #3
 8009d0e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8009d12:	4618      	mov	r0, r3
 8009d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	f7fe ff48 	bl	8008bb4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	73fb      	strb	r3, [r7, #15]
 8009d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d34:	2b07      	cmp	r3, #7
 8009d36:	dde5      	ble.n	8009d04 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d03b      	beq.n	8009db6 <wizchip_init+0x10e>
   {
      tmp = 0;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009d42:	2300      	movs	r3, #0
 8009d44:	73fb      	strb	r3, [r7, #15]
 8009d46:	e015      	b.n	8009d74 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8009d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d4c:	683a      	ldr	r2, [r7, #0]
 8009d4e:	4413      	add	r3, r2
 8009d50:	781a      	ldrb	r2, [r3, #0]
 8009d52:	7bbb      	ldrb	r3, [r7, #14]
 8009d54:	4413      	add	r3, r2
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8009d5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d5e:	2b10      	cmp	r3, #16
 8009d60:	dd02      	ble.n	8009d68 <wizchip_init+0xc0>
 8009d62:	f04f 33ff 	mov.w	r3, #4294967295
 8009d66:	e027      	b.n	8009db8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	3301      	adds	r3, #1
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	73fb      	strb	r3, [r7, #15]
 8009d74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d78:	2b07      	cmp	r3, #7
 8009d7a:	dde5      	ble.n	8009d48 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	73fb      	strb	r3, [r7, #15]
 8009d80:	e015      	b.n	8009dae <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8009d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	3301      	adds	r3, #1
 8009d8a:	00db      	lsls	r3, r3, #3
 8009d8c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8009d90:	4618      	mov	r0, r3
 8009d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d96:	683a      	ldr	r2, [r7, #0]
 8009d98:	4413      	add	r3, r2
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	f7fe ff09 	bl	8008bb4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	3301      	adds	r3, #1
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	73fb      	strb	r3, [r7, #15]
 8009dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009db2:	2b07      	cmp	r3, #7
 8009db4:	dde5      	ble.n	8009d82 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2206      	movs	r2, #6
 8009dcc:	4619      	mov	r1, r3
 8009dce:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009dd2:	f7fe ff9d 	bl	8008d10 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	330e      	adds	r3, #14
 8009dda:	2204      	movs	r2, #4
 8009ddc:	4619      	mov	r1, r3
 8009dde:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009de2:	f7fe ff95 	bl	8008d10 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	330a      	adds	r3, #10
 8009dea:	2204      	movs	r2, #4
 8009dec:	4619      	mov	r1, r3
 8009dee:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8009df2:	f7fe ff8d 	bl	8008d10 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	3306      	adds	r3, #6
 8009dfa:	2204      	movs	r2, #4
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8009e02:	f7fe ff85 	bl	8008d10 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	7c9a      	ldrb	r2, [r3, #18]
 8009e0a:	4b0b      	ldr	r3, [pc, #44]	; (8009e38 <wizchip_setnetinfo+0x78>)
 8009e0c:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	7cda      	ldrb	r2, [r3, #19]
 8009e12:	4b09      	ldr	r3, [pc, #36]	; (8009e38 <wizchip_setnetinfo+0x78>)
 8009e14:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	7d1a      	ldrb	r2, [r3, #20]
 8009e1a:	4b07      	ldr	r3, [pc, #28]	; (8009e38 <wizchip_setnetinfo+0x78>)
 8009e1c:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	7d5a      	ldrb	r2, [r3, #21]
 8009e22:	4b05      	ldr	r3, [pc, #20]	; (8009e38 <wizchip_setnetinfo+0x78>)
 8009e24:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	7d9a      	ldrb	r2, [r3, #22]
 8009e2a:	4b04      	ldr	r3, [pc, #16]	; (8009e3c <wizchip_setnetinfo+0x7c>)
 8009e2c:	701a      	strb	r2, [r3, #0]
}
 8009e2e:	bf00      	nop
 8009e30:	3708      	adds	r7, #8
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	20002e64 	.word	0x20002e64
 8009e3c:	20002e68 	.word	0x20002e68

08009e40 <atoff>:
 8009e40:	2100      	movs	r1, #0
 8009e42:	f001 bc47 	b.w	800b6d4 <strtof>

08009e46 <atoi>:
 8009e46:	220a      	movs	r2, #10
 8009e48:	2100      	movs	r1, #0
 8009e4a:	f001 bd21 	b.w	800b890 <strtol>

08009e4e <atoll>:
 8009e4e:	220a      	movs	r2, #10
 8009e50:	2100      	movs	r1, #0
 8009e52:	f001 bdbd 	b.w	800b9d0 <strtoll>
	...

08009e58 <__errno>:
 8009e58:	4b01      	ldr	r3, [pc, #4]	; (8009e60 <__errno+0x8>)
 8009e5a:	6818      	ldr	r0, [r3, #0]
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	200000c4 	.word	0x200000c4

08009e64 <__libc_init_array>:
 8009e64:	b570      	push	{r4, r5, r6, lr}
 8009e66:	4d0d      	ldr	r5, [pc, #52]	; (8009e9c <__libc_init_array+0x38>)
 8009e68:	4c0d      	ldr	r4, [pc, #52]	; (8009ea0 <__libc_init_array+0x3c>)
 8009e6a:	1b64      	subs	r4, r4, r5
 8009e6c:	10a4      	asrs	r4, r4, #2
 8009e6e:	2600      	movs	r6, #0
 8009e70:	42a6      	cmp	r6, r4
 8009e72:	d109      	bne.n	8009e88 <__libc_init_array+0x24>
 8009e74:	4d0b      	ldr	r5, [pc, #44]	; (8009ea4 <__libc_init_array+0x40>)
 8009e76:	4c0c      	ldr	r4, [pc, #48]	; (8009ea8 <__libc_init_array+0x44>)
 8009e78:	f004 fb80 	bl	800e57c <_init>
 8009e7c:	1b64      	subs	r4, r4, r5
 8009e7e:	10a4      	asrs	r4, r4, #2
 8009e80:	2600      	movs	r6, #0
 8009e82:	42a6      	cmp	r6, r4
 8009e84:	d105      	bne.n	8009e92 <__libc_init_array+0x2e>
 8009e86:	bd70      	pop	{r4, r5, r6, pc}
 8009e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e8c:	4798      	blx	r3
 8009e8e:	3601      	adds	r6, #1
 8009e90:	e7ee      	b.n	8009e70 <__libc_init_array+0xc>
 8009e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e96:	4798      	blx	r3
 8009e98:	3601      	adds	r6, #1
 8009e9a:	e7f2      	b.n	8009e82 <__libc_init_array+0x1e>
 8009e9c:	0800fdd0 	.word	0x0800fdd0
 8009ea0:	0800fdd0 	.word	0x0800fdd0
 8009ea4:	0800fdd0 	.word	0x0800fdd0
 8009ea8:	0800fdd4 	.word	0x0800fdd4

08009eac <malloc>:
 8009eac:	4b02      	ldr	r3, [pc, #8]	; (8009eb8 <malloc+0xc>)
 8009eae:	4601      	mov	r1, r0
 8009eb0:	6818      	ldr	r0, [r3, #0]
 8009eb2:	f000 b885 	b.w	8009fc0 <_malloc_r>
 8009eb6:	bf00      	nop
 8009eb8:	200000c4 	.word	0x200000c4

08009ebc <memcpy>:
 8009ebc:	440a      	add	r2, r1
 8009ebe:	4291      	cmp	r1, r2
 8009ec0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ec4:	d100      	bne.n	8009ec8 <memcpy+0xc>
 8009ec6:	4770      	bx	lr
 8009ec8:	b510      	push	{r4, lr}
 8009eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ece:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ed2:	4291      	cmp	r1, r2
 8009ed4:	d1f9      	bne.n	8009eca <memcpy+0xe>
 8009ed6:	bd10      	pop	{r4, pc}

08009ed8 <memset>:
 8009ed8:	4402      	add	r2, r0
 8009eda:	4603      	mov	r3, r0
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d100      	bne.n	8009ee2 <memset+0xa>
 8009ee0:	4770      	bx	lr
 8009ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ee6:	e7f9      	b.n	8009edc <memset+0x4>

08009ee8 <_free_r>:
 8009ee8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009eea:	2900      	cmp	r1, #0
 8009eec:	d044      	beq.n	8009f78 <_free_r+0x90>
 8009eee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ef2:	9001      	str	r0, [sp, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f1a1 0404 	sub.w	r4, r1, #4
 8009efa:	bfb8      	it	lt
 8009efc:	18e4      	addlt	r4, r4, r3
 8009efe:	f003 fab7 	bl	800d470 <__malloc_lock>
 8009f02:	4a1e      	ldr	r2, [pc, #120]	; (8009f7c <_free_r+0x94>)
 8009f04:	9801      	ldr	r0, [sp, #4]
 8009f06:	6813      	ldr	r3, [r2, #0]
 8009f08:	b933      	cbnz	r3, 8009f18 <_free_r+0x30>
 8009f0a:	6063      	str	r3, [r4, #4]
 8009f0c:	6014      	str	r4, [r2, #0]
 8009f0e:	b003      	add	sp, #12
 8009f10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f14:	f003 bab2 	b.w	800d47c <__malloc_unlock>
 8009f18:	42a3      	cmp	r3, r4
 8009f1a:	d908      	bls.n	8009f2e <_free_r+0x46>
 8009f1c:	6825      	ldr	r5, [r4, #0]
 8009f1e:	1961      	adds	r1, r4, r5
 8009f20:	428b      	cmp	r3, r1
 8009f22:	bf01      	itttt	eq
 8009f24:	6819      	ldreq	r1, [r3, #0]
 8009f26:	685b      	ldreq	r3, [r3, #4]
 8009f28:	1949      	addeq	r1, r1, r5
 8009f2a:	6021      	streq	r1, [r4, #0]
 8009f2c:	e7ed      	b.n	8009f0a <_free_r+0x22>
 8009f2e:	461a      	mov	r2, r3
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	b10b      	cbz	r3, 8009f38 <_free_r+0x50>
 8009f34:	42a3      	cmp	r3, r4
 8009f36:	d9fa      	bls.n	8009f2e <_free_r+0x46>
 8009f38:	6811      	ldr	r1, [r2, #0]
 8009f3a:	1855      	adds	r5, r2, r1
 8009f3c:	42a5      	cmp	r5, r4
 8009f3e:	d10b      	bne.n	8009f58 <_free_r+0x70>
 8009f40:	6824      	ldr	r4, [r4, #0]
 8009f42:	4421      	add	r1, r4
 8009f44:	1854      	adds	r4, r2, r1
 8009f46:	42a3      	cmp	r3, r4
 8009f48:	6011      	str	r1, [r2, #0]
 8009f4a:	d1e0      	bne.n	8009f0e <_free_r+0x26>
 8009f4c:	681c      	ldr	r4, [r3, #0]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	6053      	str	r3, [r2, #4]
 8009f52:	4421      	add	r1, r4
 8009f54:	6011      	str	r1, [r2, #0]
 8009f56:	e7da      	b.n	8009f0e <_free_r+0x26>
 8009f58:	d902      	bls.n	8009f60 <_free_r+0x78>
 8009f5a:	230c      	movs	r3, #12
 8009f5c:	6003      	str	r3, [r0, #0]
 8009f5e:	e7d6      	b.n	8009f0e <_free_r+0x26>
 8009f60:	6825      	ldr	r5, [r4, #0]
 8009f62:	1961      	adds	r1, r4, r5
 8009f64:	428b      	cmp	r3, r1
 8009f66:	bf04      	itt	eq
 8009f68:	6819      	ldreq	r1, [r3, #0]
 8009f6a:	685b      	ldreq	r3, [r3, #4]
 8009f6c:	6063      	str	r3, [r4, #4]
 8009f6e:	bf04      	itt	eq
 8009f70:	1949      	addeq	r1, r1, r5
 8009f72:	6021      	streq	r1, [r4, #0]
 8009f74:	6054      	str	r4, [r2, #4]
 8009f76:	e7ca      	b.n	8009f0e <_free_r+0x26>
 8009f78:	b003      	add	sp, #12
 8009f7a:	bd30      	pop	{r4, r5, pc}
 8009f7c:	20002e6c 	.word	0x20002e6c

08009f80 <sbrk_aligned>:
 8009f80:	b570      	push	{r4, r5, r6, lr}
 8009f82:	4e0e      	ldr	r6, [pc, #56]	; (8009fbc <sbrk_aligned+0x3c>)
 8009f84:	460c      	mov	r4, r1
 8009f86:	6831      	ldr	r1, [r6, #0]
 8009f88:	4605      	mov	r5, r0
 8009f8a:	b911      	cbnz	r1, 8009f92 <sbrk_aligned+0x12>
 8009f8c:	f000 fcf6 	bl	800a97c <_sbrk_r>
 8009f90:	6030      	str	r0, [r6, #0]
 8009f92:	4621      	mov	r1, r4
 8009f94:	4628      	mov	r0, r5
 8009f96:	f000 fcf1 	bl	800a97c <_sbrk_r>
 8009f9a:	1c43      	adds	r3, r0, #1
 8009f9c:	d00a      	beq.n	8009fb4 <sbrk_aligned+0x34>
 8009f9e:	1cc4      	adds	r4, r0, #3
 8009fa0:	f024 0403 	bic.w	r4, r4, #3
 8009fa4:	42a0      	cmp	r0, r4
 8009fa6:	d007      	beq.n	8009fb8 <sbrk_aligned+0x38>
 8009fa8:	1a21      	subs	r1, r4, r0
 8009faa:	4628      	mov	r0, r5
 8009fac:	f000 fce6 	bl	800a97c <_sbrk_r>
 8009fb0:	3001      	adds	r0, #1
 8009fb2:	d101      	bne.n	8009fb8 <sbrk_aligned+0x38>
 8009fb4:	f04f 34ff 	mov.w	r4, #4294967295
 8009fb8:	4620      	mov	r0, r4
 8009fba:	bd70      	pop	{r4, r5, r6, pc}
 8009fbc:	20002e70 	.word	0x20002e70

08009fc0 <_malloc_r>:
 8009fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc4:	1ccd      	adds	r5, r1, #3
 8009fc6:	f025 0503 	bic.w	r5, r5, #3
 8009fca:	3508      	adds	r5, #8
 8009fcc:	2d0c      	cmp	r5, #12
 8009fce:	bf38      	it	cc
 8009fd0:	250c      	movcc	r5, #12
 8009fd2:	2d00      	cmp	r5, #0
 8009fd4:	4607      	mov	r7, r0
 8009fd6:	db01      	blt.n	8009fdc <_malloc_r+0x1c>
 8009fd8:	42a9      	cmp	r1, r5
 8009fda:	d905      	bls.n	8009fe8 <_malloc_r+0x28>
 8009fdc:	230c      	movs	r3, #12
 8009fde:	603b      	str	r3, [r7, #0]
 8009fe0:	2600      	movs	r6, #0
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fe8:	4e2e      	ldr	r6, [pc, #184]	; (800a0a4 <_malloc_r+0xe4>)
 8009fea:	f003 fa41 	bl	800d470 <__malloc_lock>
 8009fee:	6833      	ldr	r3, [r6, #0]
 8009ff0:	461c      	mov	r4, r3
 8009ff2:	bb34      	cbnz	r4, 800a042 <_malloc_r+0x82>
 8009ff4:	4629      	mov	r1, r5
 8009ff6:	4638      	mov	r0, r7
 8009ff8:	f7ff ffc2 	bl	8009f80 <sbrk_aligned>
 8009ffc:	1c43      	adds	r3, r0, #1
 8009ffe:	4604      	mov	r4, r0
 800a000:	d14d      	bne.n	800a09e <_malloc_r+0xde>
 800a002:	6834      	ldr	r4, [r6, #0]
 800a004:	4626      	mov	r6, r4
 800a006:	2e00      	cmp	r6, #0
 800a008:	d140      	bne.n	800a08c <_malloc_r+0xcc>
 800a00a:	6823      	ldr	r3, [r4, #0]
 800a00c:	4631      	mov	r1, r6
 800a00e:	4638      	mov	r0, r7
 800a010:	eb04 0803 	add.w	r8, r4, r3
 800a014:	f000 fcb2 	bl	800a97c <_sbrk_r>
 800a018:	4580      	cmp	r8, r0
 800a01a:	d13a      	bne.n	800a092 <_malloc_r+0xd2>
 800a01c:	6821      	ldr	r1, [r4, #0]
 800a01e:	3503      	adds	r5, #3
 800a020:	1a6d      	subs	r5, r5, r1
 800a022:	f025 0503 	bic.w	r5, r5, #3
 800a026:	3508      	adds	r5, #8
 800a028:	2d0c      	cmp	r5, #12
 800a02a:	bf38      	it	cc
 800a02c:	250c      	movcc	r5, #12
 800a02e:	4629      	mov	r1, r5
 800a030:	4638      	mov	r0, r7
 800a032:	f7ff ffa5 	bl	8009f80 <sbrk_aligned>
 800a036:	3001      	adds	r0, #1
 800a038:	d02b      	beq.n	800a092 <_malloc_r+0xd2>
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	442b      	add	r3, r5
 800a03e:	6023      	str	r3, [r4, #0]
 800a040:	e00e      	b.n	800a060 <_malloc_r+0xa0>
 800a042:	6822      	ldr	r2, [r4, #0]
 800a044:	1b52      	subs	r2, r2, r5
 800a046:	d41e      	bmi.n	800a086 <_malloc_r+0xc6>
 800a048:	2a0b      	cmp	r2, #11
 800a04a:	d916      	bls.n	800a07a <_malloc_r+0xba>
 800a04c:	1961      	adds	r1, r4, r5
 800a04e:	42a3      	cmp	r3, r4
 800a050:	6025      	str	r5, [r4, #0]
 800a052:	bf18      	it	ne
 800a054:	6059      	strne	r1, [r3, #4]
 800a056:	6863      	ldr	r3, [r4, #4]
 800a058:	bf08      	it	eq
 800a05a:	6031      	streq	r1, [r6, #0]
 800a05c:	5162      	str	r2, [r4, r5]
 800a05e:	604b      	str	r3, [r1, #4]
 800a060:	4638      	mov	r0, r7
 800a062:	f104 060b 	add.w	r6, r4, #11
 800a066:	f003 fa09 	bl	800d47c <__malloc_unlock>
 800a06a:	f026 0607 	bic.w	r6, r6, #7
 800a06e:	1d23      	adds	r3, r4, #4
 800a070:	1af2      	subs	r2, r6, r3
 800a072:	d0b6      	beq.n	8009fe2 <_malloc_r+0x22>
 800a074:	1b9b      	subs	r3, r3, r6
 800a076:	50a3      	str	r3, [r4, r2]
 800a078:	e7b3      	b.n	8009fe2 <_malloc_r+0x22>
 800a07a:	6862      	ldr	r2, [r4, #4]
 800a07c:	42a3      	cmp	r3, r4
 800a07e:	bf0c      	ite	eq
 800a080:	6032      	streq	r2, [r6, #0]
 800a082:	605a      	strne	r2, [r3, #4]
 800a084:	e7ec      	b.n	800a060 <_malloc_r+0xa0>
 800a086:	4623      	mov	r3, r4
 800a088:	6864      	ldr	r4, [r4, #4]
 800a08a:	e7b2      	b.n	8009ff2 <_malloc_r+0x32>
 800a08c:	4634      	mov	r4, r6
 800a08e:	6876      	ldr	r6, [r6, #4]
 800a090:	e7b9      	b.n	800a006 <_malloc_r+0x46>
 800a092:	230c      	movs	r3, #12
 800a094:	603b      	str	r3, [r7, #0]
 800a096:	4638      	mov	r0, r7
 800a098:	f003 f9f0 	bl	800d47c <__malloc_unlock>
 800a09c:	e7a1      	b.n	8009fe2 <_malloc_r+0x22>
 800a09e:	6025      	str	r5, [r4, #0]
 800a0a0:	e7de      	b.n	800a060 <_malloc_r+0xa0>
 800a0a2:	bf00      	nop
 800a0a4:	20002e6c 	.word	0x20002e6c

0800a0a8 <__cvt>:
 800a0a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0ac:	ec55 4b10 	vmov	r4, r5, d0
 800a0b0:	2d00      	cmp	r5, #0
 800a0b2:	460e      	mov	r6, r1
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	462b      	mov	r3, r5
 800a0b8:	bfbb      	ittet	lt
 800a0ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a0be:	461d      	movlt	r5, r3
 800a0c0:	2300      	movge	r3, #0
 800a0c2:	232d      	movlt	r3, #45	; 0x2d
 800a0c4:	700b      	strb	r3, [r1, #0]
 800a0c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a0cc:	4691      	mov	r9, r2
 800a0ce:	f023 0820 	bic.w	r8, r3, #32
 800a0d2:	bfbc      	itt	lt
 800a0d4:	4622      	movlt	r2, r4
 800a0d6:	4614      	movlt	r4, r2
 800a0d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a0dc:	d005      	beq.n	800a0ea <__cvt+0x42>
 800a0de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a0e2:	d100      	bne.n	800a0e6 <__cvt+0x3e>
 800a0e4:	3601      	adds	r6, #1
 800a0e6:	2102      	movs	r1, #2
 800a0e8:	e000      	b.n	800a0ec <__cvt+0x44>
 800a0ea:	2103      	movs	r1, #3
 800a0ec:	ab03      	add	r3, sp, #12
 800a0ee:	9301      	str	r3, [sp, #4]
 800a0f0:	ab02      	add	r3, sp, #8
 800a0f2:	9300      	str	r3, [sp, #0]
 800a0f4:	ec45 4b10 	vmov	d0, r4, r5
 800a0f8:	4653      	mov	r3, sl
 800a0fa:	4632      	mov	r2, r6
 800a0fc:	f001 fe00 	bl	800bd00 <_dtoa_r>
 800a100:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a104:	4607      	mov	r7, r0
 800a106:	d102      	bne.n	800a10e <__cvt+0x66>
 800a108:	f019 0f01 	tst.w	r9, #1
 800a10c:	d022      	beq.n	800a154 <__cvt+0xac>
 800a10e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a112:	eb07 0906 	add.w	r9, r7, r6
 800a116:	d110      	bne.n	800a13a <__cvt+0x92>
 800a118:	783b      	ldrb	r3, [r7, #0]
 800a11a:	2b30      	cmp	r3, #48	; 0x30
 800a11c:	d10a      	bne.n	800a134 <__cvt+0x8c>
 800a11e:	2200      	movs	r2, #0
 800a120:	2300      	movs	r3, #0
 800a122:	4620      	mov	r0, r4
 800a124:	4629      	mov	r1, r5
 800a126:	f7f6 fcd7 	bl	8000ad8 <__aeabi_dcmpeq>
 800a12a:	b918      	cbnz	r0, 800a134 <__cvt+0x8c>
 800a12c:	f1c6 0601 	rsb	r6, r6, #1
 800a130:	f8ca 6000 	str.w	r6, [sl]
 800a134:	f8da 3000 	ldr.w	r3, [sl]
 800a138:	4499      	add	r9, r3
 800a13a:	2200      	movs	r2, #0
 800a13c:	2300      	movs	r3, #0
 800a13e:	4620      	mov	r0, r4
 800a140:	4629      	mov	r1, r5
 800a142:	f7f6 fcc9 	bl	8000ad8 <__aeabi_dcmpeq>
 800a146:	b108      	cbz	r0, 800a14c <__cvt+0xa4>
 800a148:	f8cd 900c 	str.w	r9, [sp, #12]
 800a14c:	2230      	movs	r2, #48	; 0x30
 800a14e:	9b03      	ldr	r3, [sp, #12]
 800a150:	454b      	cmp	r3, r9
 800a152:	d307      	bcc.n	800a164 <__cvt+0xbc>
 800a154:	9b03      	ldr	r3, [sp, #12]
 800a156:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a158:	1bdb      	subs	r3, r3, r7
 800a15a:	4638      	mov	r0, r7
 800a15c:	6013      	str	r3, [r2, #0]
 800a15e:	b004      	add	sp, #16
 800a160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a164:	1c59      	adds	r1, r3, #1
 800a166:	9103      	str	r1, [sp, #12]
 800a168:	701a      	strb	r2, [r3, #0]
 800a16a:	e7f0      	b.n	800a14e <__cvt+0xa6>

0800a16c <__exponent>:
 800a16c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a16e:	4603      	mov	r3, r0
 800a170:	2900      	cmp	r1, #0
 800a172:	bfb8      	it	lt
 800a174:	4249      	neglt	r1, r1
 800a176:	f803 2b02 	strb.w	r2, [r3], #2
 800a17a:	bfb4      	ite	lt
 800a17c:	222d      	movlt	r2, #45	; 0x2d
 800a17e:	222b      	movge	r2, #43	; 0x2b
 800a180:	2909      	cmp	r1, #9
 800a182:	7042      	strb	r2, [r0, #1]
 800a184:	dd2a      	ble.n	800a1dc <__exponent+0x70>
 800a186:	f10d 0407 	add.w	r4, sp, #7
 800a18a:	46a4      	mov	ip, r4
 800a18c:	270a      	movs	r7, #10
 800a18e:	46a6      	mov	lr, r4
 800a190:	460a      	mov	r2, r1
 800a192:	fb91 f6f7 	sdiv	r6, r1, r7
 800a196:	fb07 1516 	mls	r5, r7, r6, r1
 800a19a:	3530      	adds	r5, #48	; 0x30
 800a19c:	2a63      	cmp	r2, #99	; 0x63
 800a19e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a1a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a1a6:	4631      	mov	r1, r6
 800a1a8:	dcf1      	bgt.n	800a18e <__exponent+0x22>
 800a1aa:	3130      	adds	r1, #48	; 0x30
 800a1ac:	f1ae 0502 	sub.w	r5, lr, #2
 800a1b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a1b4:	1c44      	adds	r4, r0, #1
 800a1b6:	4629      	mov	r1, r5
 800a1b8:	4561      	cmp	r1, ip
 800a1ba:	d30a      	bcc.n	800a1d2 <__exponent+0x66>
 800a1bc:	f10d 0209 	add.w	r2, sp, #9
 800a1c0:	eba2 020e 	sub.w	r2, r2, lr
 800a1c4:	4565      	cmp	r5, ip
 800a1c6:	bf88      	it	hi
 800a1c8:	2200      	movhi	r2, #0
 800a1ca:	4413      	add	r3, r2
 800a1cc:	1a18      	subs	r0, r3, r0
 800a1ce:	b003      	add	sp, #12
 800a1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a1da:	e7ed      	b.n	800a1b8 <__exponent+0x4c>
 800a1dc:	2330      	movs	r3, #48	; 0x30
 800a1de:	3130      	adds	r1, #48	; 0x30
 800a1e0:	7083      	strb	r3, [r0, #2]
 800a1e2:	70c1      	strb	r1, [r0, #3]
 800a1e4:	1d03      	adds	r3, r0, #4
 800a1e6:	e7f1      	b.n	800a1cc <__exponent+0x60>

0800a1e8 <_printf_float>:
 800a1e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ec:	ed2d 8b02 	vpush	{d8}
 800a1f0:	b08d      	sub	sp, #52	; 0x34
 800a1f2:	460c      	mov	r4, r1
 800a1f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a1f8:	4616      	mov	r6, r2
 800a1fa:	461f      	mov	r7, r3
 800a1fc:	4605      	mov	r5, r0
 800a1fe:	f003 f8a5 	bl	800d34c <_localeconv_r>
 800a202:	f8d0 a000 	ldr.w	sl, [r0]
 800a206:	4650      	mov	r0, sl
 800a208:	f7f5 ffea 	bl	80001e0 <strlen>
 800a20c:	2300      	movs	r3, #0
 800a20e:	930a      	str	r3, [sp, #40]	; 0x28
 800a210:	6823      	ldr	r3, [r4, #0]
 800a212:	9305      	str	r3, [sp, #20]
 800a214:	f8d8 3000 	ldr.w	r3, [r8]
 800a218:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a21c:	3307      	adds	r3, #7
 800a21e:	f023 0307 	bic.w	r3, r3, #7
 800a222:	f103 0208 	add.w	r2, r3, #8
 800a226:	f8c8 2000 	str.w	r2, [r8]
 800a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a232:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a236:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a23a:	9307      	str	r3, [sp, #28]
 800a23c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a240:	ee08 0a10 	vmov	s16, r0
 800a244:	4b9f      	ldr	r3, [pc, #636]	; (800a4c4 <_printf_float+0x2dc>)
 800a246:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a24a:	f04f 32ff 	mov.w	r2, #4294967295
 800a24e:	f7f6 fc75 	bl	8000b3c <__aeabi_dcmpun>
 800a252:	bb88      	cbnz	r0, 800a2b8 <_printf_float+0xd0>
 800a254:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a258:	4b9a      	ldr	r3, [pc, #616]	; (800a4c4 <_printf_float+0x2dc>)
 800a25a:	f04f 32ff 	mov.w	r2, #4294967295
 800a25e:	f7f6 fc4f 	bl	8000b00 <__aeabi_dcmple>
 800a262:	bb48      	cbnz	r0, 800a2b8 <_printf_float+0xd0>
 800a264:	2200      	movs	r2, #0
 800a266:	2300      	movs	r3, #0
 800a268:	4640      	mov	r0, r8
 800a26a:	4649      	mov	r1, r9
 800a26c:	f7f6 fc3e 	bl	8000aec <__aeabi_dcmplt>
 800a270:	b110      	cbz	r0, 800a278 <_printf_float+0x90>
 800a272:	232d      	movs	r3, #45	; 0x2d
 800a274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a278:	4b93      	ldr	r3, [pc, #588]	; (800a4c8 <_printf_float+0x2e0>)
 800a27a:	4894      	ldr	r0, [pc, #592]	; (800a4cc <_printf_float+0x2e4>)
 800a27c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a280:	bf94      	ite	ls
 800a282:	4698      	movls	r8, r3
 800a284:	4680      	movhi	r8, r0
 800a286:	2303      	movs	r3, #3
 800a288:	6123      	str	r3, [r4, #16]
 800a28a:	9b05      	ldr	r3, [sp, #20]
 800a28c:	f023 0204 	bic.w	r2, r3, #4
 800a290:	6022      	str	r2, [r4, #0]
 800a292:	f04f 0900 	mov.w	r9, #0
 800a296:	9700      	str	r7, [sp, #0]
 800a298:	4633      	mov	r3, r6
 800a29a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a29c:	4621      	mov	r1, r4
 800a29e:	4628      	mov	r0, r5
 800a2a0:	f000 f9d8 	bl	800a654 <_printf_common>
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	f040 8090 	bne.w	800a3ca <_printf_float+0x1e2>
 800a2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ae:	b00d      	add	sp, #52	; 0x34
 800a2b0:	ecbd 8b02 	vpop	{d8}
 800a2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b8:	4642      	mov	r2, r8
 800a2ba:	464b      	mov	r3, r9
 800a2bc:	4640      	mov	r0, r8
 800a2be:	4649      	mov	r1, r9
 800a2c0:	f7f6 fc3c 	bl	8000b3c <__aeabi_dcmpun>
 800a2c4:	b140      	cbz	r0, 800a2d8 <_printf_float+0xf0>
 800a2c6:	464b      	mov	r3, r9
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	bfbc      	itt	lt
 800a2cc:	232d      	movlt	r3, #45	; 0x2d
 800a2ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a2d2:	487f      	ldr	r0, [pc, #508]	; (800a4d0 <_printf_float+0x2e8>)
 800a2d4:	4b7f      	ldr	r3, [pc, #508]	; (800a4d4 <_printf_float+0x2ec>)
 800a2d6:	e7d1      	b.n	800a27c <_printf_float+0x94>
 800a2d8:	6863      	ldr	r3, [r4, #4]
 800a2da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a2de:	9206      	str	r2, [sp, #24]
 800a2e0:	1c5a      	adds	r2, r3, #1
 800a2e2:	d13f      	bne.n	800a364 <_printf_float+0x17c>
 800a2e4:	2306      	movs	r3, #6
 800a2e6:	6063      	str	r3, [r4, #4]
 800a2e8:	9b05      	ldr	r3, [sp, #20]
 800a2ea:	6861      	ldr	r1, [r4, #4]
 800a2ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	9303      	str	r3, [sp, #12]
 800a2f4:	ab0a      	add	r3, sp, #40	; 0x28
 800a2f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a2fa:	ab09      	add	r3, sp, #36	; 0x24
 800a2fc:	ec49 8b10 	vmov	d0, r8, r9
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	6022      	str	r2, [r4, #0]
 800a304:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a308:	4628      	mov	r0, r5
 800a30a:	f7ff fecd 	bl	800a0a8 <__cvt>
 800a30e:	9b06      	ldr	r3, [sp, #24]
 800a310:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a312:	2b47      	cmp	r3, #71	; 0x47
 800a314:	4680      	mov	r8, r0
 800a316:	d108      	bne.n	800a32a <_printf_float+0x142>
 800a318:	1cc8      	adds	r0, r1, #3
 800a31a:	db02      	blt.n	800a322 <_printf_float+0x13a>
 800a31c:	6863      	ldr	r3, [r4, #4]
 800a31e:	4299      	cmp	r1, r3
 800a320:	dd41      	ble.n	800a3a6 <_printf_float+0x1be>
 800a322:	f1ab 0b02 	sub.w	fp, fp, #2
 800a326:	fa5f fb8b 	uxtb.w	fp, fp
 800a32a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a32e:	d820      	bhi.n	800a372 <_printf_float+0x18a>
 800a330:	3901      	subs	r1, #1
 800a332:	465a      	mov	r2, fp
 800a334:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a338:	9109      	str	r1, [sp, #36]	; 0x24
 800a33a:	f7ff ff17 	bl	800a16c <__exponent>
 800a33e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a340:	1813      	adds	r3, r2, r0
 800a342:	2a01      	cmp	r2, #1
 800a344:	4681      	mov	r9, r0
 800a346:	6123      	str	r3, [r4, #16]
 800a348:	dc02      	bgt.n	800a350 <_printf_float+0x168>
 800a34a:	6822      	ldr	r2, [r4, #0]
 800a34c:	07d2      	lsls	r2, r2, #31
 800a34e:	d501      	bpl.n	800a354 <_printf_float+0x16c>
 800a350:	3301      	adds	r3, #1
 800a352:	6123      	str	r3, [r4, #16]
 800a354:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d09c      	beq.n	800a296 <_printf_float+0xae>
 800a35c:	232d      	movs	r3, #45	; 0x2d
 800a35e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a362:	e798      	b.n	800a296 <_printf_float+0xae>
 800a364:	9a06      	ldr	r2, [sp, #24]
 800a366:	2a47      	cmp	r2, #71	; 0x47
 800a368:	d1be      	bne.n	800a2e8 <_printf_float+0x100>
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1bc      	bne.n	800a2e8 <_printf_float+0x100>
 800a36e:	2301      	movs	r3, #1
 800a370:	e7b9      	b.n	800a2e6 <_printf_float+0xfe>
 800a372:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a376:	d118      	bne.n	800a3aa <_printf_float+0x1c2>
 800a378:	2900      	cmp	r1, #0
 800a37a:	6863      	ldr	r3, [r4, #4]
 800a37c:	dd0b      	ble.n	800a396 <_printf_float+0x1ae>
 800a37e:	6121      	str	r1, [r4, #16]
 800a380:	b913      	cbnz	r3, 800a388 <_printf_float+0x1a0>
 800a382:	6822      	ldr	r2, [r4, #0]
 800a384:	07d0      	lsls	r0, r2, #31
 800a386:	d502      	bpl.n	800a38e <_printf_float+0x1a6>
 800a388:	3301      	adds	r3, #1
 800a38a:	440b      	add	r3, r1
 800a38c:	6123      	str	r3, [r4, #16]
 800a38e:	65a1      	str	r1, [r4, #88]	; 0x58
 800a390:	f04f 0900 	mov.w	r9, #0
 800a394:	e7de      	b.n	800a354 <_printf_float+0x16c>
 800a396:	b913      	cbnz	r3, 800a39e <_printf_float+0x1b6>
 800a398:	6822      	ldr	r2, [r4, #0]
 800a39a:	07d2      	lsls	r2, r2, #31
 800a39c:	d501      	bpl.n	800a3a2 <_printf_float+0x1ba>
 800a39e:	3302      	adds	r3, #2
 800a3a0:	e7f4      	b.n	800a38c <_printf_float+0x1a4>
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	e7f2      	b.n	800a38c <_printf_float+0x1a4>
 800a3a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a3aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ac:	4299      	cmp	r1, r3
 800a3ae:	db05      	blt.n	800a3bc <_printf_float+0x1d4>
 800a3b0:	6823      	ldr	r3, [r4, #0]
 800a3b2:	6121      	str	r1, [r4, #16]
 800a3b4:	07d8      	lsls	r0, r3, #31
 800a3b6:	d5ea      	bpl.n	800a38e <_printf_float+0x1a6>
 800a3b8:	1c4b      	adds	r3, r1, #1
 800a3ba:	e7e7      	b.n	800a38c <_printf_float+0x1a4>
 800a3bc:	2900      	cmp	r1, #0
 800a3be:	bfd4      	ite	le
 800a3c0:	f1c1 0202 	rsble	r2, r1, #2
 800a3c4:	2201      	movgt	r2, #1
 800a3c6:	4413      	add	r3, r2
 800a3c8:	e7e0      	b.n	800a38c <_printf_float+0x1a4>
 800a3ca:	6823      	ldr	r3, [r4, #0]
 800a3cc:	055a      	lsls	r2, r3, #21
 800a3ce:	d407      	bmi.n	800a3e0 <_printf_float+0x1f8>
 800a3d0:	6923      	ldr	r3, [r4, #16]
 800a3d2:	4642      	mov	r2, r8
 800a3d4:	4631      	mov	r1, r6
 800a3d6:	4628      	mov	r0, r5
 800a3d8:	47b8      	blx	r7
 800a3da:	3001      	adds	r0, #1
 800a3dc:	d12c      	bne.n	800a438 <_printf_float+0x250>
 800a3de:	e764      	b.n	800a2aa <_printf_float+0xc2>
 800a3e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a3e4:	f240 80e0 	bls.w	800a5a8 <_printf_float+0x3c0>
 800a3e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	f7f6 fb72 	bl	8000ad8 <__aeabi_dcmpeq>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	d034      	beq.n	800a462 <_printf_float+0x27a>
 800a3f8:	4a37      	ldr	r2, [pc, #220]	; (800a4d8 <_printf_float+0x2f0>)
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	4631      	mov	r1, r6
 800a3fe:	4628      	mov	r0, r5
 800a400:	47b8      	blx	r7
 800a402:	3001      	adds	r0, #1
 800a404:	f43f af51 	beq.w	800a2aa <_printf_float+0xc2>
 800a408:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a40c:	429a      	cmp	r2, r3
 800a40e:	db02      	blt.n	800a416 <_printf_float+0x22e>
 800a410:	6823      	ldr	r3, [r4, #0]
 800a412:	07d8      	lsls	r0, r3, #31
 800a414:	d510      	bpl.n	800a438 <_printf_float+0x250>
 800a416:	ee18 3a10 	vmov	r3, s16
 800a41a:	4652      	mov	r2, sl
 800a41c:	4631      	mov	r1, r6
 800a41e:	4628      	mov	r0, r5
 800a420:	47b8      	blx	r7
 800a422:	3001      	adds	r0, #1
 800a424:	f43f af41 	beq.w	800a2aa <_printf_float+0xc2>
 800a428:	f04f 0800 	mov.w	r8, #0
 800a42c:	f104 091a 	add.w	r9, r4, #26
 800a430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a432:	3b01      	subs	r3, #1
 800a434:	4543      	cmp	r3, r8
 800a436:	dc09      	bgt.n	800a44c <_printf_float+0x264>
 800a438:	6823      	ldr	r3, [r4, #0]
 800a43a:	079b      	lsls	r3, r3, #30
 800a43c:	f100 8105 	bmi.w	800a64a <_printf_float+0x462>
 800a440:	68e0      	ldr	r0, [r4, #12]
 800a442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a444:	4298      	cmp	r0, r3
 800a446:	bfb8      	it	lt
 800a448:	4618      	movlt	r0, r3
 800a44a:	e730      	b.n	800a2ae <_printf_float+0xc6>
 800a44c:	2301      	movs	r3, #1
 800a44e:	464a      	mov	r2, r9
 800a450:	4631      	mov	r1, r6
 800a452:	4628      	mov	r0, r5
 800a454:	47b8      	blx	r7
 800a456:	3001      	adds	r0, #1
 800a458:	f43f af27 	beq.w	800a2aa <_printf_float+0xc2>
 800a45c:	f108 0801 	add.w	r8, r8, #1
 800a460:	e7e6      	b.n	800a430 <_printf_float+0x248>
 800a462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a464:	2b00      	cmp	r3, #0
 800a466:	dc39      	bgt.n	800a4dc <_printf_float+0x2f4>
 800a468:	4a1b      	ldr	r2, [pc, #108]	; (800a4d8 <_printf_float+0x2f0>)
 800a46a:	2301      	movs	r3, #1
 800a46c:	4631      	mov	r1, r6
 800a46e:	4628      	mov	r0, r5
 800a470:	47b8      	blx	r7
 800a472:	3001      	adds	r0, #1
 800a474:	f43f af19 	beq.w	800a2aa <_printf_float+0xc2>
 800a478:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a47c:	4313      	orrs	r3, r2
 800a47e:	d102      	bne.n	800a486 <_printf_float+0x29e>
 800a480:	6823      	ldr	r3, [r4, #0]
 800a482:	07d9      	lsls	r1, r3, #31
 800a484:	d5d8      	bpl.n	800a438 <_printf_float+0x250>
 800a486:	ee18 3a10 	vmov	r3, s16
 800a48a:	4652      	mov	r2, sl
 800a48c:	4631      	mov	r1, r6
 800a48e:	4628      	mov	r0, r5
 800a490:	47b8      	blx	r7
 800a492:	3001      	adds	r0, #1
 800a494:	f43f af09 	beq.w	800a2aa <_printf_float+0xc2>
 800a498:	f04f 0900 	mov.w	r9, #0
 800a49c:	f104 0a1a 	add.w	sl, r4, #26
 800a4a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4a2:	425b      	negs	r3, r3
 800a4a4:	454b      	cmp	r3, r9
 800a4a6:	dc01      	bgt.n	800a4ac <_printf_float+0x2c4>
 800a4a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4aa:	e792      	b.n	800a3d2 <_printf_float+0x1ea>
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	4652      	mov	r2, sl
 800a4b0:	4631      	mov	r1, r6
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	47b8      	blx	r7
 800a4b6:	3001      	adds	r0, #1
 800a4b8:	f43f aef7 	beq.w	800a2aa <_printf_float+0xc2>
 800a4bc:	f109 0901 	add.w	r9, r9, #1
 800a4c0:	e7ee      	b.n	800a4a0 <_printf_float+0x2b8>
 800a4c2:	bf00      	nop
 800a4c4:	7fefffff 	.word	0x7fefffff
 800a4c8:	0800fa28 	.word	0x0800fa28
 800a4cc:	0800fa2c 	.word	0x0800fa2c
 800a4d0:	0800fa34 	.word	0x0800fa34
 800a4d4:	0800fa30 	.word	0x0800fa30
 800a4d8:	0800fa38 	.word	0x0800fa38
 800a4dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	bfa8      	it	ge
 800a4e4:	461a      	movge	r2, r3
 800a4e6:	2a00      	cmp	r2, #0
 800a4e8:	4691      	mov	r9, r2
 800a4ea:	dc37      	bgt.n	800a55c <_printf_float+0x374>
 800a4ec:	f04f 0b00 	mov.w	fp, #0
 800a4f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4f4:	f104 021a 	add.w	r2, r4, #26
 800a4f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a4fa:	9305      	str	r3, [sp, #20]
 800a4fc:	eba3 0309 	sub.w	r3, r3, r9
 800a500:	455b      	cmp	r3, fp
 800a502:	dc33      	bgt.n	800a56c <_printf_float+0x384>
 800a504:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a508:	429a      	cmp	r2, r3
 800a50a:	db3b      	blt.n	800a584 <_printf_float+0x39c>
 800a50c:	6823      	ldr	r3, [r4, #0]
 800a50e:	07da      	lsls	r2, r3, #31
 800a510:	d438      	bmi.n	800a584 <_printf_float+0x39c>
 800a512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a514:	9a05      	ldr	r2, [sp, #20]
 800a516:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a518:	1a9a      	subs	r2, r3, r2
 800a51a:	eba3 0901 	sub.w	r9, r3, r1
 800a51e:	4591      	cmp	r9, r2
 800a520:	bfa8      	it	ge
 800a522:	4691      	movge	r9, r2
 800a524:	f1b9 0f00 	cmp.w	r9, #0
 800a528:	dc35      	bgt.n	800a596 <_printf_float+0x3ae>
 800a52a:	f04f 0800 	mov.w	r8, #0
 800a52e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a532:	f104 0a1a 	add.w	sl, r4, #26
 800a536:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a53a:	1a9b      	subs	r3, r3, r2
 800a53c:	eba3 0309 	sub.w	r3, r3, r9
 800a540:	4543      	cmp	r3, r8
 800a542:	f77f af79 	ble.w	800a438 <_printf_float+0x250>
 800a546:	2301      	movs	r3, #1
 800a548:	4652      	mov	r2, sl
 800a54a:	4631      	mov	r1, r6
 800a54c:	4628      	mov	r0, r5
 800a54e:	47b8      	blx	r7
 800a550:	3001      	adds	r0, #1
 800a552:	f43f aeaa 	beq.w	800a2aa <_printf_float+0xc2>
 800a556:	f108 0801 	add.w	r8, r8, #1
 800a55a:	e7ec      	b.n	800a536 <_printf_float+0x34e>
 800a55c:	4613      	mov	r3, r2
 800a55e:	4631      	mov	r1, r6
 800a560:	4642      	mov	r2, r8
 800a562:	4628      	mov	r0, r5
 800a564:	47b8      	blx	r7
 800a566:	3001      	adds	r0, #1
 800a568:	d1c0      	bne.n	800a4ec <_printf_float+0x304>
 800a56a:	e69e      	b.n	800a2aa <_printf_float+0xc2>
 800a56c:	2301      	movs	r3, #1
 800a56e:	4631      	mov	r1, r6
 800a570:	4628      	mov	r0, r5
 800a572:	9205      	str	r2, [sp, #20]
 800a574:	47b8      	blx	r7
 800a576:	3001      	adds	r0, #1
 800a578:	f43f ae97 	beq.w	800a2aa <_printf_float+0xc2>
 800a57c:	9a05      	ldr	r2, [sp, #20]
 800a57e:	f10b 0b01 	add.w	fp, fp, #1
 800a582:	e7b9      	b.n	800a4f8 <_printf_float+0x310>
 800a584:	ee18 3a10 	vmov	r3, s16
 800a588:	4652      	mov	r2, sl
 800a58a:	4631      	mov	r1, r6
 800a58c:	4628      	mov	r0, r5
 800a58e:	47b8      	blx	r7
 800a590:	3001      	adds	r0, #1
 800a592:	d1be      	bne.n	800a512 <_printf_float+0x32a>
 800a594:	e689      	b.n	800a2aa <_printf_float+0xc2>
 800a596:	9a05      	ldr	r2, [sp, #20]
 800a598:	464b      	mov	r3, r9
 800a59a:	4442      	add	r2, r8
 800a59c:	4631      	mov	r1, r6
 800a59e:	4628      	mov	r0, r5
 800a5a0:	47b8      	blx	r7
 800a5a2:	3001      	adds	r0, #1
 800a5a4:	d1c1      	bne.n	800a52a <_printf_float+0x342>
 800a5a6:	e680      	b.n	800a2aa <_printf_float+0xc2>
 800a5a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5aa:	2a01      	cmp	r2, #1
 800a5ac:	dc01      	bgt.n	800a5b2 <_printf_float+0x3ca>
 800a5ae:	07db      	lsls	r3, r3, #31
 800a5b0:	d538      	bpl.n	800a624 <_printf_float+0x43c>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	4642      	mov	r2, r8
 800a5b6:	4631      	mov	r1, r6
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	47b8      	blx	r7
 800a5bc:	3001      	adds	r0, #1
 800a5be:	f43f ae74 	beq.w	800a2aa <_printf_float+0xc2>
 800a5c2:	ee18 3a10 	vmov	r3, s16
 800a5c6:	4652      	mov	r2, sl
 800a5c8:	4631      	mov	r1, r6
 800a5ca:	4628      	mov	r0, r5
 800a5cc:	47b8      	blx	r7
 800a5ce:	3001      	adds	r0, #1
 800a5d0:	f43f ae6b 	beq.w	800a2aa <_printf_float+0xc2>
 800a5d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a5d8:	2200      	movs	r2, #0
 800a5da:	2300      	movs	r3, #0
 800a5dc:	f7f6 fa7c 	bl	8000ad8 <__aeabi_dcmpeq>
 800a5e0:	b9d8      	cbnz	r0, 800a61a <_printf_float+0x432>
 800a5e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5e4:	f108 0201 	add.w	r2, r8, #1
 800a5e8:	3b01      	subs	r3, #1
 800a5ea:	4631      	mov	r1, r6
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	47b8      	blx	r7
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	d10e      	bne.n	800a612 <_printf_float+0x42a>
 800a5f4:	e659      	b.n	800a2aa <_printf_float+0xc2>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	4652      	mov	r2, sl
 800a5fa:	4631      	mov	r1, r6
 800a5fc:	4628      	mov	r0, r5
 800a5fe:	47b8      	blx	r7
 800a600:	3001      	adds	r0, #1
 800a602:	f43f ae52 	beq.w	800a2aa <_printf_float+0xc2>
 800a606:	f108 0801 	add.w	r8, r8, #1
 800a60a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a60c:	3b01      	subs	r3, #1
 800a60e:	4543      	cmp	r3, r8
 800a610:	dcf1      	bgt.n	800a5f6 <_printf_float+0x40e>
 800a612:	464b      	mov	r3, r9
 800a614:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a618:	e6dc      	b.n	800a3d4 <_printf_float+0x1ec>
 800a61a:	f04f 0800 	mov.w	r8, #0
 800a61e:	f104 0a1a 	add.w	sl, r4, #26
 800a622:	e7f2      	b.n	800a60a <_printf_float+0x422>
 800a624:	2301      	movs	r3, #1
 800a626:	4642      	mov	r2, r8
 800a628:	e7df      	b.n	800a5ea <_printf_float+0x402>
 800a62a:	2301      	movs	r3, #1
 800a62c:	464a      	mov	r2, r9
 800a62e:	4631      	mov	r1, r6
 800a630:	4628      	mov	r0, r5
 800a632:	47b8      	blx	r7
 800a634:	3001      	adds	r0, #1
 800a636:	f43f ae38 	beq.w	800a2aa <_printf_float+0xc2>
 800a63a:	f108 0801 	add.w	r8, r8, #1
 800a63e:	68e3      	ldr	r3, [r4, #12]
 800a640:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a642:	1a5b      	subs	r3, r3, r1
 800a644:	4543      	cmp	r3, r8
 800a646:	dcf0      	bgt.n	800a62a <_printf_float+0x442>
 800a648:	e6fa      	b.n	800a440 <_printf_float+0x258>
 800a64a:	f04f 0800 	mov.w	r8, #0
 800a64e:	f104 0919 	add.w	r9, r4, #25
 800a652:	e7f4      	b.n	800a63e <_printf_float+0x456>

0800a654 <_printf_common>:
 800a654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a658:	4616      	mov	r6, r2
 800a65a:	4699      	mov	r9, r3
 800a65c:	688a      	ldr	r2, [r1, #8]
 800a65e:	690b      	ldr	r3, [r1, #16]
 800a660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a664:	4293      	cmp	r3, r2
 800a666:	bfb8      	it	lt
 800a668:	4613      	movlt	r3, r2
 800a66a:	6033      	str	r3, [r6, #0]
 800a66c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a670:	4607      	mov	r7, r0
 800a672:	460c      	mov	r4, r1
 800a674:	b10a      	cbz	r2, 800a67a <_printf_common+0x26>
 800a676:	3301      	adds	r3, #1
 800a678:	6033      	str	r3, [r6, #0]
 800a67a:	6823      	ldr	r3, [r4, #0]
 800a67c:	0699      	lsls	r1, r3, #26
 800a67e:	bf42      	ittt	mi
 800a680:	6833      	ldrmi	r3, [r6, #0]
 800a682:	3302      	addmi	r3, #2
 800a684:	6033      	strmi	r3, [r6, #0]
 800a686:	6825      	ldr	r5, [r4, #0]
 800a688:	f015 0506 	ands.w	r5, r5, #6
 800a68c:	d106      	bne.n	800a69c <_printf_common+0x48>
 800a68e:	f104 0a19 	add.w	sl, r4, #25
 800a692:	68e3      	ldr	r3, [r4, #12]
 800a694:	6832      	ldr	r2, [r6, #0]
 800a696:	1a9b      	subs	r3, r3, r2
 800a698:	42ab      	cmp	r3, r5
 800a69a:	dc26      	bgt.n	800a6ea <_printf_common+0x96>
 800a69c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a6a0:	1e13      	subs	r3, r2, #0
 800a6a2:	6822      	ldr	r2, [r4, #0]
 800a6a4:	bf18      	it	ne
 800a6a6:	2301      	movne	r3, #1
 800a6a8:	0692      	lsls	r2, r2, #26
 800a6aa:	d42b      	bmi.n	800a704 <_printf_common+0xb0>
 800a6ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6b0:	4649      	mov	r1, r9
 800a6b2:	4638      	mov	r0, r7
 800a6b4:	47c0      	blx	r8
 800a6b6:	3001      	adds	r0, #1
 800a6b8:	d01e      	beq.n	800a6f8 <_printf_common+0xa4>
 800a6ba:	6823      	ldr	r3, [r4, #0]
 800a6bc:	68e5      	ldr	r5, [r4, #12]
 800a6be:	6832      	ldr	r2, [r6, #0]
 800a6c0:	f003 0306 	and.w	r3, r3, #6
 800a6c4:	2b04      	cmp	r3, #4
 800a6c6:	bf08      	it	eq
 800a6c8:	1aad      	subeq	r5, r5, r2
 800a6ca:	68a3      	ldr	r3, [r4, #8]
 800a6cc:	6922      	ldr	r2, [r4, #16]
 800a6ce:	bf0c      	ite	eq
 800a6d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a6d4:	2500      	movne	r5, #0
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	bfc4      	itt	gt
 800a6da:	1a9b      	subgt	r3, r3, r2
 800a6dc:	18ed      	addgt	r5, r5, r3
 800a6de:	2600      	movs	r6, #0
 800a6e0:	341a      	adds	r4, #26
 800a6e2:	42b5      	cmp	r5, r6
 800a6e4:	d11a      	bne.n	800a71c <_printf_common+0xc8>
 800a6e6:	2000      	movs	r0, #0
 800a6e8:	e008      	b.n	800a6fc <_printf_common+0xa8>
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	4652      	mov	r2, sl
 800a6ee:	4649      	mov	r1, r9
 800a6f0:	4638      	mov	r0, r7
 800a6f2:	47c0      	blx	r8
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	d103      	bne.n	800a700 <_printf_common+0xac>
 800a6f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a700:	3501      	adds	r5, #1
 800a702:	e7c6      	b.n	800a692 <_printf_common+0x3e>
 800a704:	18e1      	adds	r1, r4, r3
 800a706:	1c5a      	adds	r2, r3, #1
 800a708:	2030      	movs	r0, #48	; 0x30
 800a70a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a70e:	4422      	add	r2, r4
 800a710:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a714:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a718:	3302      	adds	r3, #2
 800a71a:	e7c7      	b.n	800a6ac <_printf_common+0x58>
 800a71c:	2301      	movs	r3, #1
 800a71e:	4622      	mov	r2, r4
 800a720:	4649      	mov	r1, r9
 800a722:	4638      	mov	r0, r7
 800a724:	47c0      	blx	r8
 800a726:	3001      	adds	r0, #1
 800a728:	d0e6      	beq.n	800a6f8 <_printf_common+0xa4>
 800a72a:	3601      	adds	r6, #1
 800a72c:	e7d9      	b.n	800a6e2 <_printf_common+0x8e>
	...

0800a730 <_printf_i>:
 800a730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a734:	7e0f      	ldrb	r7, [r1, #24]
 800a736:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a738:	2f78      	cmp	r7, #120	; 0x78
 800a73a:	4691      	mov	r9, r2
 800a73c:	4680      	mov	r8, r0
 800a73e:	460c      	mov	r4, r1
 800a740:	469a      	mov	sl, r3
 800a742:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a746:	d807      	bhi.n	800a758 <_printf_i+0x28>
 800a748:	2f62      	cmp	r7, #98	; 0x62
 800a74a:	d80a      	bhi.n	800a762 <_printf_i+0x32>
 800a74c:	2f00      	cmp	r7, #0
 800a74e:	f000 80d8 	beq.w	800a902 <_printf_i+0x1d2>
 800a752:	2f58      	cmp	r7, #88	; 0x58
 800a754:	f000 80a3 	beq.w	800a89e <_printf_i+0x16e>
 800a758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a75c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a760:	e03a      	b.n	800a7d8 <_printf_i+0xa8>
 800a762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a766:	2b15      	cmp	r3, #21
 800a768:	d8f6      	bhi.n	800a758 <_printf_i+0x28>
 800a76a:	a101      	add	r1, pc, #4	; (adr r1, 800a770 <_printf_i+0x40>)
 800a76c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a770:	0800a7c9 	.word	0x0800a7c9
 800a774:	0800a7dd 	.word	0x0800a7dd
 800a778:	0800a759 	.word	0x0800a759
 800a77c:	0800a759 	.word	0x0800a759
 800a780:	0800a759 	.word	0x0800a759
 800a784:	0800a759 	.word	0x0800a759
 800a788:	0800a7dd 	.word	0x0800a7dd
 800a78c:	0800a759 	.word	0x0800a759
 800a790:	0800a759 	.word	0x0800a759
 800a794:	0800a759 	.word	0x0800a759
 800a798:	0800a759 	.word	0x0800a759
 800a79c:	0800a8e9 	.word	0x0800a8e9
 800a7a0:	0800a80d 	.word	0x0800a80d
 800a7a4:	0800a8cb 	.word	0x0800a8cb
 800a7a8:	0800a759 	.word	0x0800a759
 800a7ac:	0800a759 	.word	0x0800a759
 800a7b0:	0800a90b 	.word	0x0800a90b
 800a7b4:	0800a759 	.word	0x0800a759
 800a7b8:	0800a80d 	.word	0x0800a80d
 800a7bc:	0800a759 	.word	0x0800a759
 800a7c0:	0800a759 	.word	0x0800a759
 800a7c4:	0800a8d3 	.word	0x0800a8d3
 800a7c8:	682b      	ldr	r3, [r5, #0]
 800a7ca:	1d1a      	adds	r2, r3, #4
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	602a      	str	r2, [r5, #0]
 800a7d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a7d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e0a3      	b.n	800a924 <_printf_i+0x1f4>
 800a7dc:	6820      	ldr	r0, [r4, #0]
 800a7de:	6829      	ldr	r1, [r5, #0]
 800a7e0:	0606      	lsls	r6, r0, #24
 800a7e2:	f101 0304 	add.w	r3, r1, #4
 800a7e6:	d50a      	bpl.n	800a7fe <_printf_i+0xce>
 800a7e8:	680e      	ldr	r6, [r1, #0]
 800a7ea:	602b      	str	r3, [r5, #0]
 800a7ec:	2e00      	cmp	r6, #0
 800a7ee:	da03      	bge.n	800a7f8 <_printf_i+0xc8>
 800a7f0:	232d      	movs	r3, #45	; 0x2d
 800a7f2:	4276      	negs	r6, r6
 800a7f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7f8:	485e      	ldr	r0, [pc, #376]	; (800a974 <_printf_i+0x244>)
 800a7fa:	230a      	movs	r3, #10
 800a7fc:	e019      	b.n	800a832 <_printf_i+0x102>
 800a7fe:	680e      	ldr	r6, [r1, #0]
 800a800:	602b      	str	r3, [r5, #0]
 800a802:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a806:	bf18      	it	ne
 800a808:	b236      	sxthne	r6, r6
 800a80a:	e7ef      	b.n	800a7ec <_printf_i+0xbc>
 800a80c:	682b      	ldr	r3, [r5, #0]
 800a80e:	6820      	ldr	r0, [r4, #0]
 800a810:	1d19      	adds	r1, r3, #4
 800a812:	6029      	str	r1, [r5, #0]
 800a814:	0601      	lsls	r1, r0, #24
 800a816:	d501      	bpl.n	800a81c <_printf_i+0xec>
 800a818:	681e      	ldr	r6, [r3, #0]
 800a81a:	e002      	b.n	800a822 <_printf_i+0xf2>
 800a81c:	0646      	lsls	r6, r0, #25
 800a81e:	d5fb      	bpl.n	800a818 <_printf_i+0xe8>
 800a820:	881e      	ldrh	r6, [r3, #0]
 800a822:	4854      	ldr	r0, [pc, #336]	; (800a974 <_printf_i+0x244>)
 800a824:	2f6f      	cmp	r7, #111	; 0x6f
 800a826:	bf0c      	ite	eq
 800a828:	2308      	moveq	r3, #8
 800a82a:	230a      	movne	r3, #10
 800a82c:	2100      	movs	r1, #0
 800a82e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a832:	6865      	ldr	r5, [r4, #4]
 800a834:	60a5      	str	r5, [r4, #8]
 800a836:	2d00      	cmp	r5, #0
 800a838:	bfa2      	ittt	ge
 800a83a:	6821      	ldrge	r1, [r4, #0]
 800a83c:	f021 0104 	bicge.w	r1, r1, #4
 800a840:	6021      	strge	r1, [r4, #0]
 800a842:	b90e      	cbnz	r6, 800a848 <_printf_i+0x118>
 800a844:	2d00      	cmp	r5, #0
 800a846:	d04d      	beq.n	800a8e4 <_printf_i+0x1b4>
 800a848:	4615      	mov	r5, r2
 800a84a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a84e:	fb03 6711 	mls	r7, r3, r1, r6
 800a852:	5dc7      	ldrb	r7, [r0, r7]
 800a854:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a858:	4637      	mov	r7, r6
 800a85a:	42bb      	cmp	r3, r7
 800a85c:	460e      	mov	r6, r1
 800a85e:	d9f4      	bls.n	800a84a <_printf_i+0x11a>
 800a860:	2b08      	cmp	r3, #8
 800a862:	d10b      	bne.n	800a87c <_printf_i+0x14c>
 800a864:	6823      	ldr	r3, [r4, #0]
 800a866:	07de      	lsls	r6, r3, #31
 800a868:	d508      	bpl.n	800a87c <_printf_i+0x14c>
 800a86a:	6923      	ldr	r3, [r4, #16]
 800a86c:	6861      	ldr	r1, [r4, #4]
 800a86e:	4299      	cmp	r1, r3
 800a870:	bfde      	ittt	le
 800a872:	2330      	movle	r3, #48	; 0x30
 800a874:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a878:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a87c:	1b52      	subs	r2, r2, r5
 800a87e:	6122      	str	r2, [r4, #16]
 800a880:	f8cd a000 	str.w	sl, [sp]
 800a884:	464b      	mov	r3, r9
 800a886:	aa03      	add	r2, sp, #12
 800a888:	4621      	mov	r1, r4
 800a88a:	4640      	mov	r0, r8
 800a88c:	f7ff fee2 	bl	800a654 <_printf_common>
 800a890:	3001      	adds	r0, #1
 800a892:	d14c      	bne.n	800a92e <_printf_i+0x1fe>
 800a894:	f04f 30ff 	mov.w	r0, #4294967295
 800a898:	b004      	add	sp, #16
 800a89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a89e:	4835      	ldr	r0, [pc, #212]	; (800a974 <_printf_i+0x244>)
 800a8a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a8a4:	6829      	ldr	r1, [r5, #0]
 800a8a6:	6823      	ldr	r3, [r4, #0]
 800a8a8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a8ac:	6029      	str	r1, [r5, #0]
 800a8ae:	061d      	lsls	r5, r3, #24
 800a8b0:	d514      	bpl.n	800a8dc <_printf_i+0x1ac>
 800a8b2:	07df      	lsls	r7, r3, #31
 800a8b4:	bf44      	itt	mi
 800a8b6:	f043 0320 	orrmi.w	r3, r3, #32
 800a8ba:	6023      	strmi	r3, [r4, #0]
 800a8bc:	b91e      	cbnz	r6, 800a8c6 <_printf_i+0x196>
 800a8be:	6823      	ldr	r3, [r4, #0]
 800a8c0:	f023 0320 	bic.w	r3, r3, #32
 800a8c4:	6023      	str	r3, [r4, #0]
 800a8c6:	2310      	movs	r3, #16
 800a8c8:	e7b0      	b.n	800a82c <_printf_i+0xfc>
 800a8ca:	6823      	ldr	r3, [r4, #0]
 800a8cc:	f043 0320 	orr.w	r3, r3, #32
 800a8d0:	6023      	str	r3, [r4, #0]
 800a8d2:	2378      	movs	r3, #120	; 0x78
 800a8d4:	4828      	ldr	r0, [pc, #160]	; (800a978 <_printf_i+0x248>)
 800a8d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a8da:	e7e3      	b.n	800a8a4 <_printf_i+0x174>
 800a8dc:	0659      	lsls	r1, r3, #25
 800a8de:	bf48      	it	mi
 800a8e0:	b2b6      	uxthmi	r6, r6
 800a8e2:	e7e6      	b.n	800a8b2 <_printf_i+0x182>
 800a8e4:	4615      	mov	r5, r2
 800a8e6:	e7bb      	b.n	800a860 <_printf_i+0x130>
 800a8e8:	682b      	ldr	r3, [r5, #0]
 800a8ea:	6826      	ldr	r6, [r4, #0]
 800a8ec:	6961      	ldr	r1, [r4, #20]
 800a8ee:	1d18      	adds	r0, r3, #4
 800a8f0:	6028      	str	r0, [r5, #0]
 800a8f2:	0635      	lsls	r5, r6, #24
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	d501      	bpl.n	800a8fc <_printf_i+0x1cc>
 800a8f8:	6019      	str	r1, [r3, #0]
 800a8fa:	e002      	b.n	800a902 <_printf_i+0x1d2>
 800a8fc:	0670      	lsls	r0, r6, #25
 800a8fe:	d5fb      	bpl.n	800a8f8 <_printf_i+0x1c8>
 800a900:	8019      	strh	r1, [r3, #0]
 800a902:	2300      	movs	r3, #0
 800a904:	6123      	str	r3, [r4, #16]
 800a906:	4615      	mov	r5, r2
 800a908:	e7ba      	b.n	800a880 <_printf_i+0x150>
 800a90a:	682b      	ldr	r3, [r5, #0]
 800a90c:	1d1a      	adds	r2, r3, #4
 800a90e:	602a      	str	r2, [r5, #0]
 800a910:	681d      	ldr	r5, [r3, #0]
 800a912:	6862      	ldr	r2, [r4, #4]
 800a914:	2100      	movs	r1, #0
 800a916:	4628      	mov	r0, r5
 800a918:	f7f5 fc6a 	bl	80001f0 <memchr>
 800a91c:	b108      	cbz	r0, 800a922 <_printf_i+0x1f2>
 800a91e:	1b40      	subs	r0, r0, r5
 800a920:	6060      	str	r0, [r4, #4]
 800a922:	6863      	ldr	r3, [r4, #4]
 800a924:	6123      	str	r3, [r4, #16]
 800a926:	2300      	movs	r3, #0
 800a928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a92c:	e7a8      	b.n	800a880 <_printf_i+0x150>
 800a92e:	6923      	ldr	r3, [r4, #16]
 800a930:	462a      	mov	r2, r5
 800a932:	4649      	mov	r1, r9
 800a934:	4640      	mov	r0, r8
 800a936:	47d0      	blx	sl
 800a938:	3001      	adds	r0, #1
 800a93a:	d0ab      	beq.n	800a894 <_printf_i+0x164>
 800a93c:	6823      	ldr	r3, [r4, #0]
 800a93e:	079b      	lsls	r3, r3, #30
 800a940:	d413      	bmi.n	800a96a <_printf_i+0x23a>
 800a942:	68e0      	ldr	r0, [r4, #12]
 800a944:	9b03      	ldr	r3, [sp, #12]
 800a946:	4298      	cmp	r0, r3
 800a948:	bfb8      	it	lt
 800a94a:	4618      	movlt	r0, r3
 800a94c:	e7a4      	b.n	800a898 <_printf_i+0x168>
 800a94e:	2301      	movs	r3, #1
 800a950:	4632      	mov	r2, r6
 800a952:	4649      	mov	r1, r9
 800a954:	4640      	mov	r0, r8
 800a956:	47d0      	blx	sl
 800a958:	3001      	adds	r0, #1
 800a95a:	d09b      	beq.n	800a894 <_printf_i+0x164>
 800a95c:	3501      	adds	r5, #1
 800a95e:	68e3      	ldr	r3, [r4, #12]
 800a960:	9903      	ldr	r1, [sp, #12]
 800a962:	1a5b      	subs	r3, r3, r1
 800a964:	42ab      	cmp	r3, r5
 800a966:	dcf2      	bgt.n	800a94e <_printf_i+0x21e>
 800a968:	e7eb      	b.n	800a942 <_printf_i+0x212>
 800a96a:	2500      	movs	r5, #0
 800a96c:	f104 0619 	add.w	r6, r4, #25
 800a970:	e7f5      	b.n	800a95e <_printf_i+0x22e>
 800a972:	bf00      	nop
 800a974:	0800fa3a 	.word	0x0800fa3a
 800a978:	0800fa4b 	.word	0x0800fa4b

0800a97c <_sbrk_r>:
 800a97c:	b538      	push	{r3, r4, r5, lr}
 800a97e:	4d06      	ldr	r5, [pc, #24]	; (800a998 <_sbrk_r+0x1c>)
 800a980:	2300      	movs	r3, #0
 800a982:	4604      	mov	r4, r0
 800a984:	4608      	mov	r0, r1
 800a986:	602b      	str	r3, [r5, #0]
 800a988:	f7fa fd74 	bl	8005474 <_sbrk>
 800a98c:	1c43      	adds	r3, r0, #1
 800a98e:	d102      	bne.n	800a996 <_sbrk_r+0x1a>
 800a990:	682b      	ldr	r3, [r5, #0]
 800a992:	b103      	cbz	r3, 800a996 <_sbrk_r+0x1a>
 800a994:	6023      	str	r3, [r4, #0]
 800a996:	bd38      	pop	{r3, r4, r5, pc}
 800a998:	20002e78 	.word	0x20002e78

0800a99c <siprintf>:
 800a99c:	b40e      	push	{r1, r2, r3}
 800a99e:	b500      	push	{lr}
 800a9a0:	b09c      	sub	sp, #112	; 0x70
 800a9a2:	ab1d      	add	r3, sp, #116	; 0x74
 800a9a4:	9002      	str	r0, [sp, #8]
 800a9a6:	9006      	str	r0, [sp, #24]
 800a9a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a9ac:	4809      	ldr	r0, [pc, #36]	; (800a9d4 <siprintf+0x38>)
 800a9ae:	9107      	str	r1, [sp, #28]
 800a9b0:	9104      	str	r1, [sp, #16]
 800a9b2:	4909      	ldr	r1, [pc, #36]	; (800a9d8 <siprintf+0x3c>)
 800a9b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9b8:	9105      	str	r1, [sp, #20]
 800a9ba:	6800      	ldr	r0, [r0, #0]
 800a9bc:	9301      	str	r3, [sp, #4]
 800a9be:	a902      	add	r1, sp, #8
 800a9c0:	f003 fa94 	bl	800deec <_svfiprintf_r>
 800a9c4:	9b02      	ldr	r3, [sp, #8]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	701a      	strb	r2, [r3, #0]
 800a9ca:	b01c      	add	sp, #112	; 0x70
 800a9cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9d0:	b003      	add	sp, #12
 800a9d2:	4770      	bx	lr
 800a9d4:	200000c4 	.word	0x200000c4
 800a9d8:	ffff0208 	.word	0xffff0208

0800a9dc <__sread>:
 800a9dc:	b510      	push	{r4, lr}
 800a9de:	460c      	mov	r4, r1
 800a9e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9e4:	f003 fcdc 	bl	800e3a0 <_read_r>
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	bfab      	itete	ge
 800a9ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a9ee:	89a3      	ldrhlt	r3, [r4, #12]
 800a9f0:	181b      	addge	r3, r3, r0
 800a9f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a9f6:	bfac      	ite	ge
 800a9f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9fa:	81a3      	strhlt	r3, [r4, #12]
 800a9fc:	bd10      	pop	{r4, pc}

0800a9fe <__swrite>:
 800a9fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa02:	461f      	mov	r7, r3
 800aa04:	898b      	ldrh	r3, [r1, #12]
 800aa06:	05db      	lsls	r3, r3, #23
 800aa08:	4605      	mov	r5, r0
 800aa0a:	460c      	mov	r4, r1
 800aa0c:	4616      	mov	r6, r2
 800aa0e:	d505      	bpl.n	800aa1c <__swrite+0x1e>
 800aa10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa14:	2302      	movs	r3, #2
 800aa16:	2200      	movs	r2, #0
 800aa18:	f002 fca0 	bl	800d35c <_lseek_r>
 800aa1c:	89a3      	ldrh	r3, [r4, #12]
 800aa1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa26:	81a3      	strh	r3, [r4, #12]
 800aa28:	4632      	mov	r2, r6
 800aa2a:	463b      	mov	r3, r7
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa32:	f001 b829 	b.w	800ba88 <_write_r>

0800aa36 <__sseek>:
 800aa36:	b510      	push	{r4, lr}
 800aa38:	460c      	mov	r4, r1
 800aa3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa3e:	f002 fc8d 	bl	800d35c <_lseek_r>
 800aa42:	1c43      	adds	r3, r0, #1
 800aa44:	89a3      	ldrh	r3, [r4, #12]
 800aa46:	bf15      	itete	ne
 800aa48:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa52:	81a3      	strheq	r3, [r4, #12]
 800aa54:	bf18      	it	ne
 800aa56:	81a3      	strhne	r3, [r4, #12]
 800aa58:	bd10      	pop	{r4, pc}

0800aa5a <__sclose>:
 800aa5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa5e:	f001 b8b1 	b.w	800bbc4 <_close_r>

0800aa62 <strncmp>:
 800aa62:	b510      	push	{r4, lr}
 800aa64:	b17a      	cbz	r2, 800aa86 <strncmp+0x24>
 800aa66:	4603      	mov	r3, r0
 800aa68:	3901      	subs	r1, #1
 800aa6a:	1884      	adds	r4, r0, r2
 800aa6c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aa70:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aa74:	4290      	cmp	r0, r2
 800aa76:	d101      	bne.n	800aa7c <strncmp+0x1a>
 800aa78:	42a3      	cmp	r3, r4
 800aa7a:	d101      	bne.n	800aa80 <strncmp+0x1e>
 800aa7c:	1a80      	subs	r0, r0, r2
 800aa7e:	bd10      	pop	{r4, pc}
 800aa80:	2800      	cmp	r0, #0
 800aa82:	d1f3      	bne.n	800aa6c <strncmp+0xa>
 800aa84:	e7fa      	b.n	800aa7c <strncmp+0x1a>
 800aa86:	4610      	mov	r0, r2
 800aa88:	e7f9      	b.n	800aa7e <strncmp+0x1c>

0800aa8a <sulp>:
 800aa8a:	b570      	push	{r4, r5, r6, lr}
 800aa8c:	4604      	mov	r4, r0
 800aa8e:	460d      	mov	r5, r1
 800aa90:	ec45 4b10 	vmov	d0, r4, r5
 800aa94:	4616      	mov	r6, r2
 800aa96:	f003 f869 	bl	800db6c <__ulp>
 800aa9a:	ec51 0b10 	vmov	r0, r1, d0
 800aa9e:	b17e      	cbz	r6, 800aac0 <sulp+0x36>
 800aaa0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aaa4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	dd09      	ble.n	800aac0 <sulp+0x36>
 800aaac:	051b      	lsls	r3, r3, #20
 800aaae:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aab2:	2400      	movs	r4, #0
 800aab4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aab8:	4622      	mov	r2, r4
 800aaba:	462b      	mov	r3, r5
 800aabc:	f7f5 fda4 	bl	8000608 <__aeabi_dmul>
 800aac0:	bd70      	pop	{r4, r5, r6, pc}
 800aac2:	0000      	movs	r0, r0
 800aac4:	0000      	movs	r0, r0
	...

0800aac8 <_strtod_l>:
 800aac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aacc:	ed2d 8b02 	vpush	{d8}
 800aad0:	b09d      	sub	sp, #116	; 0x74
 800aad2:	461f      	mov	r7, r3
 800aad4:	2300      	movs	r3, #0
 800aad6:	9318      	str	r3, [sp, #96]	; 0x60
 800aad8:	4ba2      	ldr	r3, [pc, #648]	; (800ad64 <_strtod_l+0x29c>)
 800aada:	9213      	str	r2, [sp, #76]	; 0x4c
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	9305      	str	r3, [sp, #20]
 800aae0:	4604      	mov	r4, r0
 800aae2:	4618      	mov	r0, r3
 800aae4:	4688      	mov	r8, r1
 800aae6:	f7f5 fb7b 	bl	80001e0 <strlen>
 800aaea:	f04f 0a00 	mov.w	sl, #0
 800aaee:	4605      	mov	r5, r0
 800aaf0:	f04f 0b00 	mov.w	fp, #0
 800aaf4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800aaf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aafa:	781a      	ldrb	r2, [r3, #0]
 800aafc:	2a2b      	cmp	r2, #43	; 0x2b
 800aafe:	d04e      	beq.n	800ab9e <_strtod_l+0xd6>
 800ab00:	d83b      	bhi.n	800ab7a <_strtod_l+0xb2>
 800ab02:	2a0d      	cmp	r2, #13
 800ab04:	d834      	bhi.n	800ab70 <_strtod_l+0xa8>
 800ab06:	2a08      	cmp	r2, #8
 800ab08:	d834      	bhi.n	800ab74 <_strtod_l+0xac>
 800ab0a:	2a00      	cmp	r2, #0
 800ab0c:	d03e      	beq.n	800ab8c <_strtod_l+0xc4>
 800ab0e:	2300      	movs	r3, #0
 800ab10:	930a      	str	r3, [sp, #40]	; 0x28
 800ab12:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ab14:	7833      	ldrb	r3, [r6, #0]
 800ab16:	2b30      	cmp	r3, #48	; 0x30
 800ab18:	f040 80b0 	bne.w	800ac7c <_strtod_l+0x1b4>
 800ab1c:	7873      	ldrb	r3, [r6, #1]
 800ab1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ab22:	2b58      	cmp	r3, #88	; 0x58
 800ab24:	d168      	bne.n	800abf8 <_strtod_l+0x130>
 800ab26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab28:	9301      	str	r3, [sp, #4]
 800ab2a:	ab18      	add	r3, sp, #96	; 0x60
 800ab2c:	9702      	str	r7, [sp, #8]
 800ab2e:	9300      	str	r3, [sp, #0]
 800ab30:	4a8d      	ldr	r2, [pc, #564]	; (800ad68 <_strtod_l+0x2a0>)
 800ab32:	ab19      	add	r3, sp, #100	; 0x64
 800ab34:	a917      	add	r1, sp, #92	; 0x5c
 800ab36:	4620      	mov	r0, r4
 800ab38:	f002 f900 	bl	800cd3c <__gethex>
 800ab3c:	f010 0707 	ands.w	r7, r0, #7
 800ab40:	4605      	mov	r5, r0
 800ab42:	d005      	beq.n	800ab50 <_strtod_l+0x88>
 800ab44:	2f06      	cmp	r7, #6
 800ab46:	d12c      	bne.n	800aba2 <_strtod_l+0xda>
 800ab48:	3601      	adds	r6, #1
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	9617      	str	r6, [sp, #92]	; 0x5c
 800ab4e:	930a      	str	r3, [sp, #40]	; 0x28
 800ab50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	f040 8590 	bne.w	800b678 <_strtod_l+0xbb0>
 800ab58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab5a:	b1eb      	cbz	r3, 800ab98 <_strtod_l+0xd0>
 800ab5c:	4652      	mov	r2, sl
 800ab5e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ab62:	ec43 2b10 	vmov	d0, r2, r3
 800ab66:	b01d      	add	sp, #116	; 0x74
 800ab68:	ecbd 8b02 	vpop	{d8}
 800ab6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab70:	2a20      	cmp	r2, #32
 800ab72:	d1cc      	bne.n	800ab0e <_strtod_l+0x46>
 800ab74:	3301      	adds	r3, #1
 800ab76:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab78:	e7be      	b.n	800aaf8 <_strtod_l+0x30>
 800ab7a:	2a2d      	cmp	r2, #45	; 0x2d
 800ab7c:	d1c7      	bne.n	800ab0e <_strtod_l+0x46>
 800ab7e:	2201      	movs	r2, #1
 800ab80:	920a      	str	r2, [sp, #40]	; 0x28
 800ab82:	1c5a      	adds	r2, r3, #1
 800ab84:	9217      	str	r2, [sp, #92]	; 0x5c
 800ab86:	785b      	ldrb	r3, [r3, #1]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d1c2      	bne.n	800ab12 <_strtod_l+0x4a>
 800ab8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab8e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	f040 856e 	bne.w	800b674 <_strtod_l+0xbac>
 800ab98:	4652      	mov	r2, sl
 800ab9a:	465b      	mov	r3, fp
 800ab9c:	e7e1      	b.n	800ab62 <_strtod_l+0x9a>
 800ab9e:	2200      	movs	r2, #0
 800aba0:	e7ee      	b.n	800ab80 <_strtod_l+0xb8>
 800aba2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800aba4:	b13a      	cbz	r2, 800abb6 <_strtod_l+0xee>
 800aba6:	2135      	movs	r1, #53	; 0x35
 800aba8:	a81a      	add	r0, sp, #104	; 0x68
 800abaa:	f003 f8ea 	bl	800dd82 <__copybits>
 800abae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800abb0:	4620      	mov	r0, r4
 800abb2:	f002 fca9 	bl	800d508 <_Bfree>
 800abb6:	3f01      	subs	r7, #1
 800abb8:	2f04      	cmp	r7, #4
 800abba:	d806      	bhi.n	800abca <_strtod_l+0x102>
 800abbc:	e8df f007 	tbb	[pc, r7]
 800abc0:	1714030a 	.word	0x1714030a
 800abc4:	0a          	.byte	0x0a
 800abc5:	00          	.byte	0x00
 800abc6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800abca:	0728      	lsls	r0, r5, #28
 800abcc:	d5c0      	bpl.n	800ab50 <_strtod_l+0x88>
 800abce:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800abd2:	e7bd      	b.n	800ab50 <_strtod_l+0x88>
 800abd4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800abd8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800abda:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800abde:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800abe2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800abe6:	e7f0      	b.n	800abca <_strtod_l+0x102>
 800abe8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ad6c <_strtod_l+0x2a4>
 800abec:	e7ed      	b.n	800abca <_strtod_l+0x102>
 800abee:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800abf2:	f04f 3aff 	mov.w	sl, #4294967295
 800abf6:	e7e8      	b.n	800abca <_strtod_l+0x102>
 800abf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abfa:	1c5a      	adds	r2, r3, #1
 800abfc:	9217      	str	r2, [sp, #92]	; 0x5c
 800abfe:	785b      	ldrb	r3, [r3, #1]
 800ac00:	2b30      	cmp	r3, #48	; 0x30
 800ac02:	d0f9      	beq.n	800abf8 <_strtod_l+0x130>
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d0a3      	beq.n	800ab50 <_strtod_l+0x88>
 800ac08:	2301      	movs	r3, #1
 800ac0a:	f04f 0900 	mov.w	r9, #0
 800ac0e:	9304      	str	r3, [sp, #16]
 800ac10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac12:	9308      	str	r3, [sp, #32]
 800ac14:	f8cd 901c 	str.w	r9, [sp, #28]
 800ac18:	464f      	mov	r7, r9
 800ac1a:	220a      	movs	r2, #10
 800ac1c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ac1e:	7806      	ldrb	r6, [r0, #0]
 800ac20:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ac24:	b2d9      	uxtb	r1, r3
 800ac26:	2909      	cmp	r1, #9
 800ac28:	d92a      	bls.n	800ac80 <_strtod_l+0x1b8>
 800ac2a:	9905      	ldr	r1, [sp, #20]
 800ac2c:	462a      	mov	r2, r5
 800ac2e:	f7ff ff18 	bl	800aa62 <strncmp>
 800ac32:	b398      	cbz	r0, 800ac9c <_strtod_l+0x1d4>
 800ac34:	2000      	movs	r0, #0
 800ac36:	4632      	mov	r2, r6
 800ac38:	463d      	mov	r5, r7
 800ac3a:	9005      	str	r0, [sp, #20]
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2a65      	cmp	r2, #101	; 0x65
 800ac40:	d001      	beq.n	800ac46 <_strtod_l+0x17e>
 800ac42:	2a45      	cmp	r2, #69	; 0x45
 800ac44:	d118      	bne.n	800ac78 <_strtod_l+0x1b0>
 800ac46:	b91d      	cbnz	r5, 800ac50 <_strtod_l+0x188>
 800ac48:	9a04      	ldr	r2, [sp, #16]
 800ac4a:	4302      	orrs	r2, r0
 800ac4c:	d09e      	beq.n	800ab8c <_strtod_l+0xc4>
 800ac4e:	2500      	movs	r5, #0
 800ac50:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ac54:	f108 0201 	add.w	r2, r8, #1
 800ac58:	9217      	str	r2, [sp, #92]	; 0x5c
 800ac5a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ac5e:	2a2b      	cmp	r2, #43	; 0x2b
 800ac60:	d075      	beq.n	800ad4e <_strtod_l+0x286>
 800ac62:	2a2d      	cmp	r2, #45	; 0x2d
 800ac64:	d07b      	beq.n	800ad5e <_strtod_l+0x296>
 800ac66:	f04f 0c00 	mov.w	ip, #0
 800ac6a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ac6e:	2909      	cmp	r1, #9
 800ac70:	f240 8082 	bls.w	800ad78 <_strtod_l+0x2b0>
 800ac74:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ac78:	2600      	movs	r6, #0
 800ac7a:	e09d      	b.n	800adb8 <_strtod_l+0x2f0>
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	e7c4      	b.n	800ac0a <_strtod_l+0x142>
 800ac80:	2f08      	cmp	r7, #8
 800ac82:	bfd8      	it	le
 800ac84:	9907      	ldrle	r1, [sp, #28]
 800ac86:	f100 0001 	add.w	r0, r0, #1
 800ac8a:	bfda      	itte	le
 800ac8c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ac90:	9307      	strle	r3, [sp, #28]
 800ac92:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ac96:	3701      	adds	r7, #1
 800ac98:	9017      	str	r0, [sp, #92]	; 0x5c
 800ac9a:	e7bf      	b.n	800ac1c <_strtod_l+0x154>
 800ac9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac9e:	195a      	adds	r2, r3, r5
 800aca0:	9217      	str	r2, [sp, #92]	; 0x5c
 800aca2:	5d5a      	ldrb	r2, [r3, r5]
 800aca4:	2f00      	cmp	r7, #0
 800aca6:	d037      	beq.n	800ad18 <_strtod_l+0x250>
 800aca8:	9005      	str	r0, [sp, #20]
 800acaa:	463d      	mov	r5, r7
 800acac:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800acb0:	2b09      	cmp	r3, #9
 800acb2:	d912      	bls.n	800acda <_strtod_l+0x212>
 800acb4:	2301      	movs	r3, #1
 800acb6:	e7c2      	b.n	800ac3e <_strtod_l+0x176>
 800acb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acba:	1c5a      	adds	r2, r3, #1
 800acbc:	9217      	str	r2, [sp, #92]	; 0x5c
 800acbe:	785a      	ldrb	r2, [r3, #1]
 800acc0:	3001      	adds	r0, #1
 800acc2:	2a30      	cmp	r2, #48	; 0x30
 800acc4:	d0f8      	beq.n	800acb8 <_strtod_l+0x1f0>
 800acc6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800acca:	2b08      	cmp	r3, #8
 800accc:	f200 84d9 	bhi.w	800b682 <_strtod_l+0xbba>
 800acd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acd2:	9005      	str	r0, [sp, #20]
 800acd4:	2000      	movs	r0, #0
 800acd6:	9308      	str	r3, [sp, #32]
 800acd8:	4605      	mov	r5, r0
 800acda:	3a30      	subs	r2, #48	; 0x30
 800acdc:	f100 0301 	add.w	r3, r0, #1
 800ace0:	d014      	beq.n	800ad0c <_strtod_l+0x244>
 800ace2:	9905      	ldr	r1, [sp, #20]
 800ace4:	4419      	add	r1, r3
 800ace6:	9105      	str	r1, [sp, #20]
 800ace8:	462b      	mov	r3, r5
 800acea:	eb00 0e05 	add.w	lr, r0, r5
 800acee:	210a      	movs	r1, #10
 800acf0:	4573      	cmp	r3, lr
 800acf2:	d113      	bne.n	800ad1c <_strtod_l+0x254>
 800acf4:	182b      	adds	r3, r5, r0
 800acf6:	2b08      	cmp	r3, #8
 800acf8:	f105 0501 	add.w	r5, r5, #1
 800acfc:	4405      	add	r5, r0
 800acfe:	dc1c      	bgt.n	800ad3a <_strtod_l+0x272>
 800ad00:	9907      	ldr	r1, [sp, #28]
 800ad02:	230a      	movs	r3, #10
 800ad04:	fb03 2301 	mla	r3, r3, r1, r2
 800ad08:	9307      	str	r3, [sp, #28]
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad0e:	1c51      	adds	r1, r2, #1
 800ad10:	9117      	str	r1, [sp, #92]	; 0x5c
 800ad12:	7852      	ldrb	r2, [r2, #1]
 800ad14:	4618      	mov	r0, r3
 800ad16:	e7c9      	b.n	800acac <_strtod_l+0x1e4>
 800ad18:	4638      	mov	r0, r7
 800ad1a:	e7d2      	b.n	800acc2 <_strtod_l+0x1fa>
 800ad1c:	2b08      	cmp	r3, #8
 800ad1e:	dc04      	bgt.n	800ad2a <_strtod_l+0x262>
 800ad20:	9e07      	ldr	r6, [sp, #28]
 800ad22:	434e      	muls	r6, r1
 800ad24:	9607      	str	r6, [sp, #28]
 800ad26:	3301      	adds	r3, #1
 800ad28:	e7e2      	b.n	800acf0 <_strtod_l+0x228>
 800ad2a:	f103 0c01 	add.w	ip, r3, #1
 800ad2e:	f1bc 0f10 	cmp.w	ip, #16
 800ad32:	bfd8      	it	le
 800ad34:	fb01 f909 	mulle.w	r9, r1, r9
 800ad38:	e7f5      	b.n	800ad26 <_strtod_l+0x25e>
 800ad3a:	2d10      	cmp	r5, #16
 800ad3c:	bfdc      	itt	le
 800ad3e:	230a      	movle	r3, #10
 800ad40:	fb03 2909 	mlale	r9, r3, r9, r2
 800ad44:	e7e1      	b.n	800ad0a <_strtod_l+0x242>
 800ad46:	2300      	movs	r3, #0
 800ad48:	9305      	str	r3, [sp, #20]
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e77c      	b.n	800ac48 <_strtod_l+0x180>
 800ad4e:	f04f 0c00 	mov.w	ip, #0
 800ad52:	f108 0202 	add.w	r2, r8, #2
 800ad56:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad58:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ad5c:	e785      	b.n	800ac6a <_strtod_l+0x1a2>
 800ad5e:	f04f 0c01 	mov.w	ip, #1
 800ad62:	e7f6      	b.n	800ad52 <_strtod_l+0x28a>
 800ad64:	0800fc44 	.word	0x0800fc44
 800ad68:	0800fa5c 	.word	0x0800fa5c
 800ad6c:	7ff00000 	.word	0x7ff00000
 800ad70:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad72:	1c51      	adds	r1, r2, #1
 800ad74:	9117      	str	r1, [sp, #92]	; 0x5c
 800ad76:	7852      	ldrb	r2, [r2, #1]
 800ad78:	2a30      	cmp	r2, #48	; 0x30
 800ad7a:	d0f9      	beq.n	800ad70 <_strtod_l+0x2a8>
 800ad7c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ad80:	2908      	cmp	r1, #8
 800ad82:	f63f af79 	bhi.w	800ac78 <_strtod_l+0x1b0>
 800ad86:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ad8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad8c:	9206      	str	r2, [sp, #24]
 800ad8e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad90:	1c51      	adds	r1, r2, #1
 800ad92:	9117      	str	r1, [sp, #92]	; 0x5c
 800ad94:	7852      	ldrb	r2, [r2, #1]
 800ad96:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ad9a:	2e09      	cmp	r6, #9
 800ad9c:	d937      	bls.n	800ae0e <_strtod_l+0x346>
 800ad9e:	9e06      	ldr	r6, [sp, #24]
 800ada0:	1b89      	subs	r1, r1, r6
 800ada2:	2908      	cmp	r1, #8
 800ada4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ada8:	dc02      	bgt.n	800adb0 <_strtod_l+0x2e8>
 800adaa:	4576      	cmp	r6, lr
 800adac:	bfa8      	it	ge
 800adae:	4676      	movge	r6, lr
 800adb0:	f1bc 0f00 	cmp.w	ip, #0
 800adb4:	d000      	beq.n	800adb8 <_strtod_l+0x2f0>
 800adb6:	4276      	negs	r6, r6
 800adb8:	2d00      	cmp	r5, #0
 800adba:	d14d      	bne.n	800ae58 <_strtod_l+0x390>
 800adbc:	9904      	ldr	r1, [sp, #16]
 800adbe:	4301      	orrs	r1, r0
 800adc0:	f47f aec6 	bne.w	800ab50 <_strtod_l+0x88>
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	f47f aee1 	bne.w	800ab8c <_strtod_l+0xc4>
 800adca:	2a69      	cmp	r2, #105	; 0x69
 800adcc:	d027      	beq.n	800ae1e <_strtod_l+0x356>
 800adce:	dc24      	bgt.n	800ae1a <_strtod_l+0x352>
 800add0:	2a49      	cmp	r2, #73	; 0x49
 800add2:	d024      	beq.n	800ae1e <_strtod_l+0x356>
 800add4:	2a4e      	cmp	r2, #78	; 0x4e
 800add6:	f47f aed9 	bne.w	800ab8c <_strtod_l+0xc4>
 800adda:	499f      	ldr	r1, [pc, #636]	; (800b058 <_strtod_l+0x590>)
 800addc:	a817      	add	r0, sp, #92	; 0x5c
 800adde:	f002 fa05 	bl	800d1ec <__match>
 800ade2:	2800      	cmp	r0, #0
 800ade4:	f43f aed2 	beq.w	800ab8c <_strtod_l+0xc4>
 800ade8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	2b28      	cmp	r3, #40	; 0x28
 800adee:	d12d      	bne.n	800ae4c <_strtod_l+0x384>
 800adf0:	499a      	ldr	r1, [pc, #616]	; (800b05c <_strtod_l+0x594>)
 800adf2:	aa1a      	add	r2, sp, #104	; 0x68
 800adf4:	a817      	add	r0, sp, #92	; 0x5c
 800adf6:	f002 fa0d 	bl	800d214 <__hexnan>
 800adfa:	2805      	cmp	r0, #5
 800adfc:	d126      	bne.n	800ae4c <_strtod_l+0x384>
 800adfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae00:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ae04:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ae08:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ae0c:	e6a0      	b.n	800ab50 <_strtod_l+0x88>
 800ae0e:	210a      	movs	r1, #10
 800ae10:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ae14:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ae18:	e7b9      	b.n	800ad8e <_strtod_l+0x2c6>
 800ae1a:	2a6e      	cmp	r2, #110	; 0x6e
 800ae1c:	e7db      	b.n	800add6 <_strtod_l+0x30e>
 800ae1e:	4990      	ldr	r1, [pc, #576]	; (800b060 <_strtod_l+0x598>)
 800ae20:	a817      	add	r0, sp, #92	; 0x5c
 800ae22:	f002 f9e3 	bl	800d1ec <__match>
 800ae26:	2800      	cmp	r0, #0
 800ae28:	f43f aeb0 	beq.w	800ab8c <_strtod_l+0xc4>
 800ae2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae2e:	498d      	ldr	r1, [pc, #564]	; (800b064 <_strtod_l+0x59c>)
 800ae30:	3b01      	subs	r3, #1
 800ae32:	a817      	add	r0, sp, #92	; 0x5c
 800ae34:	9317      	str	r3, [sp, #92]	; 0x5c
 800ae36:	f002 f9d9 	bl	800d1ec <__match>
 800ae3a:	b910      	cbnz	r0, 800ae42 <_strtod_l+0x37a>
 800ae3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae3e:	3301      	adds	r3, #1
 800ae40:	9317      	str	r3, [sp, #92]	; 0x5c
 800ae42:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b074 <_strtod_l+0x5ac>
 800ae46:	f04f 0a00 	mov.w	sl, #0
 800ae4a:	e681      	b.n	800ab50 <_strtod_l+0x88>
 800ae4c:	4886      	ldr	r0, [pc, #536]	; (800b068 <_strtod_l+0x5a0>)
 800ae4e:	f003 fabb 	bl	800e3c8 <nan>
 800ae52:	ec5b ab10 	vmov	sl, fp, d0
 800ae56:	e67b      	b.n	800ab50 <_strtod_l+0x88>
 800ae58:	9b05      	ldr	r3, [sp, #20]
 800ae5a:	9807      	ldr	r0, [sp, #28]
 800ae5c:	1af3      	subs	r3, r6, r3
 800ae5e:	2f00      	cmp	r7, #0
 800ae60:	bf08      	it	eq
 800ae62:	462f      	moveq	r7, r5
 800ae64:	2d10      	cmp	r5, #16
 800ae66:	9306      	str	r3, [sp, #24]
 800ae68:	46a8      	mov	r8, r5
 800ae6a:	bfa8      	it	ge
 800ae6c:	f04f 0810 	movge.w	r8, #16
 800ae70:	f7f5 fb50 	bl	8000514 <__aeabi_ui2d>
 800ae74:	2d09      	cmp	r5, #9
 800ae76:	4682      	mov	sl, r0
 800ae78:	468b      	mov	fp, r1
 800ae7a:	dd13      	ble.n	800aea4 <_strtod_l+0x3dc>
 800ae7c:	4b7b      	ldr	r3, [pc, #492]	; (800b06c <_strtod_l+0x5a4>)
 800ae7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ae82:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ae86:	f7f5 fbbf 	bl	8000608 <__aeabi_dmul>
 800ae8a:	4682      	mov	sl, r0
 800ae8c:	4648      	mov	r0, r9
 800ae8e:	468b      	mov	fp, r1
 800ae90:	f7f5 fb40 	bl	8000514 <__aeabi_ui2d>
 800ae94:	4602      	mov	r2, r0
 800ae96:	460b      	mov	r3, r1
 800ae98:	4650      	mov	r0, sl
 800ae9a:	4659      	mov	r1, fp
 800ae9c:	f7f5 f9fe 	bl	800029c <__adddf3>
 800aea0:	4682      	mov	sl, r0
 800aea2:	468b      	mov	fp, r1
 800aea4:	2d0f      	cmp	r5, #15
 800aea6:	dc38      	bgt.n	800af1a <_strtod_l+0x452>
 800aea8:	9b06      	ldr	r3, [sp, #24]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	f43f ae50 	beq.w	800ab50 <_strtod_l+0x88>
 800aeb0:	dd24      	ble.n	800aefc <_strtod_l+0x434>
 800aeb2:	2b16      	cmp	r3, #22
 800aeb4:	dc0b      	bgt.n	800aece <_strtod_l+0x406>
 800aeb6:	496d      	ldr	r1, [pc, #436]	; (800b06c <_strtod_l+0x5a4>)
 800aeb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aebc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aec0:	4652      	mov	r2, sl
 800aec2:	465b      	mov	r3, fp
 800aec4:	f7f5 fba0 	bl	8000608 <__aeabi_dmul>
 800aec8:	4682      	mov	sl, r0
 800aeca:	468b      	mov	fp, r1
 800aecc:	e640      	b.n	800ab50 <_strtod_l+0x88>
 800aece:	9a06      	ldr	r2, [sp, #24]
 800aed0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800aed4:	4293      	cmp	r3, r2
 800aed6:	db20      	blt.n	800af1a <_strtod_l+0x452>
 800aed8:	4c64      	ldr	r4, [pc, #400]	; (800b06c <_strtod_l+0x5a4>)
 800aeda:	f1c5 050f 	rsb	r5, r5, #15
 800aede:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aee2:	4652      	mov	r2, sl
 800aee4:	465b      	mov	r3, fp
 800aee6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aeea:	f7f5 fb8d 	bl	8000608 <__aeabi_dmul>
 800aeee:	9b06      	ldr	r3, [sp, #24]
 800aef0:	1b5d      	subs	r5, r3, r5
 800aef2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800aef6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aefa:	e7e3      	b.n	800aec4 <_strtod_l+0x3fc>
 800aefc:	9b06      	ldr	r3, [sp, #24]
 800aefe:	3316      	adds	r3, #22
 800af00:	db0b      	blt.n	800af1a <_strtod_l+0x452>
 800af02:	9b05      	ldr	r3, [sp, #20]
 800af04:	1b9e      	subs	r6, r3, r6
 800af06:	4b59      	ldr	r3, [pc, #356]	; (800b06c <_strtod_l+0x5a4>)
 800af08:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800af0c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af10:	4650      	mov	r0, sl
 800af12:	4659      	mov	r1, fp
 800af14:	f7f5 fca2 	bl	800085c <__aeabi_ddiv>
 800af18:	e7d6      	b.n	800aec8 <_strtod_l+0x400>
 800af1a:	9b06      	ldr	r3, [sp, #24]
 800af1c:	eba5 0808 	sub.w	r8, r5, r8
 800af20:	4498      	add	r8, r3
 800af22:	f1b8 0f00 	cmp.w	r8, #0
 800af26:	dd74      	ble.n	800b012 <_strtod_l+0x54a>
 800af28:	f018 030f 	ands.w	r3, r8, #15
 800af2c:	d00a      	beq.n	800af44 <_strtod_l+0x47c>
 800af2e:	494f      	ldr	r1, [pc, #316]	; (800b06c <_strtod_l+0x5a4>)
 800af30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af34:	4652      	mov	r2, sl
 800af36:	465b      	mov	r3, fp
 800af38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af3c:	f7f5 fb64 	bl	8000608 <__aeabi_dmul>
 800af40:	4682      	mov	sl, r0
 800af42:	468b      	mov	fp, r1
 800af44:	f038 080f 	bics.w	r8, r8, #15
 800af48:	d04f      	beq.n	800afea <_strtod_l+0x522>
 800af4a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800af4e:	dd22      	ble.n	800af96 <_strtod_l+0x4ce>
 800af50:	2500      	movs	r5, #0
 800af52:	462e      	mov	r6, r5
 800af54:	9507      	str	r5, [sp, #28]
 800af56:	9505      	str	r5, [sp, #20]
 800af58:	2322      	movs	r3, #34	; 0x22
 800af5a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b074 <_strtod_l+0x5ac>
 800af5e:	6023      	str	r3, [r4, #0]
 800af60:	f04f 0a00 	mov.w	sl, #0
 800af64:	9b07      	ldr	r3, [sp, #28]
 800af66:	2b00      	cmp	r3, #0
 800af68:	f43f adf2 	beq.w	800ab50 <_strtod_l+0x88>
 800af6c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800af6e:	4620      	mov	r0, r4
 800af70:	f002 faca 	bl	800d508 <_Bfree>
 800af74:	9905      	ldr	r1, [sp, #20]
 800af76:	4620      	mov	r0, r4
 800af78:	f002 fac6 	bl	800d508 <_Bfree>
 800af7c:	4631      	mov	r1, r6
 800af7e:	4620      	mov	r0, r4
 800af80:	f002 fac2 	bl	800d508 <_Bfree>
 800af84:	9907      	ldr	r1, [sp, #28]
 800af86:	4620      	mov	r0, r4
 800af88:	f002 fabe 	bl	800d508 <_Bfree>
 800af8c:	4629      	mov	r1, r5
 800af8e:	4620      	mov	r0, r4
 800af90:	f002 faba 	bl	800d508 <_Bfree>
 800af94:	e5dc      	b.n	800ab50 <_strtod_l+0x88>
 800af96:	4b36      	ldr	r3, [pc, #216]	; (800b070 <_strtod_l+0x5a8>)
 800af98:	9304      	str	r3, [sp, #16]
 800af9a:	2300      	movs	r3, #0
 800af9c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800afa0:	4650      	mov	r0, sl
 800afa2:	4659      	mov	r1, fp
 800afa4:	4699      	mov	r9, r3
 800afa6:	f1b8 0f01 	cmp.w	r8, #1
 800afaa:	dc21      	bgt.n	800aff0 <_strtod_l+0x528>
 800afac:	b10b      	cbz	r3, 800afb2 <_strtod_l+0x4ea>
 800afae:	4682      	mov	sl, r0
 800afb0:	468b      	mov	fp, r1
 800afb2:	4b2f      	ldr	r3, [pc, #188]	; (800b070 <_strtod_l+0x5a8>)
 800afb4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800afb8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800afbc:	4652      	mov	r2, sl
 800afbe:	465b      	mov	r3, fp
 800afc0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800afc4:	f7f5 fb20 	bl	8000608 <__aeabi_dmul>
 800afc8:	4b2a      	ldr	r3, [pc, #168]	; (800b074 <_strtod_l+0x5ac>)
 800afca:	460a      	mov	r2, r1
 800afcc:	400b      	ands	r3, r1
 800afce:	492a      	ldr	r1, [pc, #168]	; (800b078 <_strtod_l+0x5b0>)
 800afd0:	428b      	cmp	r3, r1
 800afd2:	4682      	mov	sl, r0
 800afd4:	d8bc      	bhi.n	800af50 <_strtod_l+0x488>
 800afd6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800afda:	428b      	cmp	r3, r1
 800afdc:	bf86      	itte	hi
 800afde:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b07c <_strtod_l+0x5b4>
 800afe2:	f04f 3aff 	movhi.w	sl, #4294967295
 800afe6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800afea:	2300      	movs	r3, #0
 800afec:	9304      	str	r3, [sp, #16]
 800afee:	e084      	b.n	800b0fa <_strtod_l+0x632>
 800aff0:	f018 0f01 	tst.w	r8, #1
 800aff4:	d005      	beq.n	800b002 <_strtod_l+0x53a>
 800aff6:	9b04      	ldr	r3, [sp, #16]
 800aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affc:	f7f5 fb04 	bl	8000608 <__aeabi_dmul>
 800b000:	2301      	movs	r3, #1
 800b002:	9a04      	ldr	r2, [sp, #16]
 800b004:	3208      	adds	r2, #8
 800b006:	f109 0901 	add.w	r9, r9, #1
 800b00a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b00e:	9204      	str	r2, [sp, #16]
 800b010:	e7c9      	b.n	800afa6 <_strtod_l+0x4de>
 800b012:	d0ea      	beq.n	800afea <_strtod_l+0x522>
 800b014:	f1c8 0800 	rsb	r8, r8, #0
 800b018:	f018 020f 	ands.w	r2, r8, #15
 800b01c:	d00a      	beq.n	800b034 <_strtod_l+0x56c>
 800b01e:	4b13      	ldr	r3, [pc, #76]	; (800b06c <_strtod_l+0x5a4>)
 800b020:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b024:	4650      	mov	r0, sl
 800b026:	4659      	mov	r1, fp
 800b028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02c:	f7f5 fc16 	bl	800085c <__aeabi_ddiv>
 800b030:	4682      	mov	sl, r0
 800b032:	468b      	mov	fp, r1
 800b034:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b038:	d0d7      	beq.n	800afea <_strtod_l+0x522>
 800b03a:	f1b8 0f1f 	cmp.w	r8, #31
 800b03e:	dd1f      	ble.n	800b080 <_strtod_l+0x5b8>
 800b040:	2500      	movs	r5, #0
 800b042:	462e      	mov	r6, r5
 800b044:	9507      	str	r5, [sp, #28]
 800b046:	9505      	str	r5, [sp, #20]
 800b048:	2322      	movs	r3, #34	; 0x22
 800b04a:	f04f 0a00 	mov.w	sl, #0
 800b04e:	f04f 0b00 	mov.w	fp, #0
 800b052:	6023      	str	r3, [r4, #0]
 800b054:	e786      	b.n	800af64 <_strtod_l+0x49c>
 800b056:	bf00      	nop
 800b058:	0800fa35 	.word	0x0800fa35
 800b05c:	0800fa70 	.word	0x0800fa70
 800b060:	0800fa2d 	.word	0x0800fa2d
 800b064:	0800faef 	.word	0x0800faef
 800b068:	0800faeb 	.word	0x0800faeb
 800b06c:	0800fce0 	.word	0x0800fce0
 800b070:	0800fcb8 	.word	0x0800fcb8
 800b074:	7ff00000 	.word	0x7ff00000
 800b078:	7ca00000 	.word	0x7ca00000
 800b07c:	7fefffff 	.word	0x7fefffff
 800b080:	f018 0310 	ands.w	r3, r8, #16
 800b084:	bf18      	it	ne
 800b086:	236a      	movne	r3, #106	; 0x6a
 800b088:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b438 <_strtod_l+0x970>
 800b08c:	9304      	str	r3, [sp, #16]
 800b08e:	4650      	mov	r0, sl
 800b090:	4659      	mov	r1, fp
 800b092:	2300      	movs	r3, #0
 800b094:	f018 0f01 	tst.w	r8, #1
 800b098:	d004      	beq.n	800b0a4 <_strtod_l+0x5dc>
 800b09a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b09e:	f7f5 fab3 	bl	8000608 <__aeabi_dmul>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b0a8:	f109 0908 	add.w	r9, r9, #8
 800b0ac:	d1f2      	bne.n	800b094 <_strtod_l+0x5cc>
 800b0ae:	b10b      	cbz	r3, 800b0b4 <_strtod_l+0x5ec>
 800b0b0:	4682      	mov	sl, r0
 800b0b2:	468b      	mov	fp, r1
 800b0b4:	9b04      	ldr	r3, [sp, #16]
 800b0b6:	b1c3      	cbz	r3, 800b0ea <_strtod_l+0x622>
 800b0b8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b0bc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	4659      	mov	r1, fp
 800b0c4:	dd11      	ble.n	800b0ea <_strtod_l+0x622>
 800b0c6:	2b1f      	cmp	r3, #31
 800b0c8:	f340 8124 	ble.w	800b314 <_strtod_l+0x84c>
 800b0cc:	2b34      	cmp	r3, #52	; 0x34
 800b0ce:	bfde      	ittt	le
 800b0d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b0d4:	f04f 33ff 	movle.w	r3, #4294967295
 800b0d8:	fa03 f202 	lslle.w	r2, r3, r2
 800b0dc:	f04f 0a00 	mov.w	sl, #0
 800b0e0:	bfcc      	ite	gt
 800b0e2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b0e6:	ea02 0b01 	andle.w	fp, r2, r1
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	4650      	mov	r0, sl
 800b0f0:	4659      	mov	r1, fp
 800b0f2:	f7f5 fcf1 	bl	8000ad8 <__aeabi_dcmpeq>
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	d1a2      	bne.n	800b040 <_strtod_l+0x578>
 800b0fa:	9b07      	ldr	r3, [sp, #28]
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	9908      	ldr	r1, [sp, #32]
 800b100:	462b      	mov	r3, r5
 800b102:	463a      	mov	r2, r7
 800b104:	4620      	mov	r0, r4
 800b106:	f002 fa67 	bl	800d5d8 <__s2b>
 800b10a:	9007      	str	r0, [sp, #28]
 800b10c:	2800      	cmp	r0, #0
 800b10e:	f43f af1f 	beq.w	800af50 <_strtod_l+0x488>
 800b112:	9b05      	ldr	r3, [sp, #20]
 800b114:	1b9e      	subs	r6, r3, r6
 800b116:	9b06      	ldr	r3, [sp, #24]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	bfb4      	ite	lt
 800b11c:	4633      	movlt	r3, r6
 800b11e:	2300      	movge	r3, #0
 800b120:	930c      	str	r3, [sp, #48]	; 0x30
 800b122:	9b06      	ldr	r3, [sp, #24]
 800b124:	2500      	movs	r5, #0
 800b126:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b12a:	9312      	str	r3, [sp, #72]	; 0x48
 800b12c:	462e      	mov	r6, r5
 800b12e:	9b07      	ldr	r3, [sp, #28]
 800b130:	4620      	mov	r0, r4
 800b132:	6859      	ldr	r1, [r3, #4]
 800b134:	f002 f9a8 	bl	800d488 <_Balloc>
 800b138:	9005      	str	r0, [sp, #20]
 800b13a:	2800      	cmp	r0, #0
 800b13c:	f43f af0c 	beq.w	800af58 <_strtod_l+0x490>
 800b140:	9b07      	ldr	r3, [sp, #28]
 800b142:	691a      	ldr	r2, [r3, #16]
 800b144:	3202      	adds	r2, #2
 800b146:	f103 010c 	add.w	r1, r3, #12
 800b14a:	0092      	lsls	r2, r2, #2
 800b14c:	300c      	adds	r0, #12
 800b14e:	f7fe feb5 	bl	8009ebc <memcpy>
 800b152:	ec4b ab10 	vmov	d0, sl, fp
 800b156:	aa1a      	add	r2, sp, #104	; 0x68
 800b158:	a919      	add	r1, sp, #100	; 0x64
 800b15a:	4620      	mov	r0, r4
 800b15c:	f002 fd82 	bl	800dc64 <__d2b>
 800b160:	ec4b ab18 	vmov	d8, sl, fp
 800b164:	9018      	str	r0, [sp, #96]	; 0x60
 800b166:	2800      	cmp	r0, #0
 800b168:	f43f aef6 	beq.w	800af58 <_strtod_l+0x490>
 800b16c:	2101      	movs	r1, #1
 800b16e:	4620      	mov	r0, r4
 800b170:	f002 facc 	bl	800d70c <__i2b>
 800b174:	4606      	mov	r6, r0
 800b176:	2800      	cmp	r0, #0
 800b178:	f43f aeee 	beq.w	800af58 <_strtod_l+0x490>
 800b17c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b17e:	9904      	ldr	r1, [sp, #16]
 800b180:	2b00      	cmp	r3, #0
 800b182:	bfab      	itete	ge
 800b184:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b186:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b188:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b18a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b18e:	bfac      	ite	ge
 800b190:	eb03 0902 	addge.w	r9, r3, r2
 800b194:	1ad7      	sublt	r7, r2, r3
 800b196:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b198:	eba3 0801 	sub.w	r8, r3, r1
 800b19c:	4490      	add	r8, r2
 800b19e:	4ba1      	ldr	r3, [pc, #644]	; (800b424 <_strtod_l+0x95c>)
 800b1a0:	f108 38ff 	add.w	r8, r8, #4294967295
 800b1a4:	4598      	cmp	r8, r3
 800b1a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b1aa:	f280 80c7 	bge.w	800b33c <_strtod_l+0x874>
 800b1ae:	eba3 0308 	sub.w	r3, r3, r8
 800b1b2:	2b1f      	cmp	r3, #31
 800b1b4:	eba2 0203 	sub.w	r2, r2, r3
 800b1b8:	f04f 0101 	mov.w	r1, #1
 800b1bc:	f300 80b1 	bgt.w	800b322 <_strtod_l+0x85a>
 800b1c0:	fa01 f303 	lsl.w	r3, r1, r3
 800b1c4:	930d      	str	r3, [sp, #52]	; 0x34
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	9308      	str	r3, [sp, #32]
 800b1ca:	eb09 0802 	add.w	r8, r9, r2
 800b1ce:	9b04      	ldr	r3, [sp, #16]
 800b1d0:	45c1      	cmp	r9, r8
 800b1d2:	4417      	add	r7, r2
 800b1d4:	441f      	add	r7, r3
 800b1d6:	464b      	mov	r3, r9
 800b1d8:	bfa8      	it	ge
 800b1da:	4643      	movge	r3, r8
 800b1dc:	42bb      	cmp	r3, r7
 800b1de:	bfa8      	it	ge
 800b1e0:	463b      	movge	r3, r7
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	bfc2      	ittt	gt
 800b1e6:	eba8 0803 	subgt.w	r8, r8, r3
 800b1ea:	1aff      	subgt	r7, r7, r3
 800b1ec:	eba9 0903 	subgt.w	r9, r9, r3
 800b1f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	dd17      	ble.n	800b226 <_strtod_l+0x75e>
 800b1f6:	4631      	mov	r1, r6
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	4620      	mov	r0, r4
 800b1fc:	f002 fb46 	bl	800d88c <__pow5mult>
 800b200:	4606      	mov	r6, r0
 800b202:	2800      	cmp	r0, #0
 800b204:	f43f aea8 	beq.w	800af58 <_strtod_l+0x490>
 800b208:	4601      	mov	r1, r0
 800b20a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b20c:	4620      	mov	r0, r4
 800b20e:	f002 fa93 	bl	800d738 <__multiply>
 800b212:	900b      	str	r0, [sp, #44]	; 0x2c
 800b214:	2800      	cmp	r0, #0
 800b216:	f43f ae9f 	beq.w	800af58 <_strtod_l+0x490>
 800b21a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b21c:	4620      	mov	r0, r4
 800b21e:	f002 f973 	bl	800d508 <_Bfree>
 800b222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b224:	9318      	str	r3, [sp, #96]	; 0x60
 800b226:	f1b8 0f00 	cmp.w	r8, #0
 800b22a:	f300 808c 	bgt.w	800b346 <_strtod_l+0x87e>
 800b22e:	9b06      	ldr	r3, [sp, #24]
 800b230:	2b00      	cmp	r3, #0
 800b232:	dd08      	ble.n	800b246 <_strtod_l+0x77e>
 800b234:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b236:	9905      	ldr	r1, [sp, #20]
 800b238:	4620      	mov	r0, r4
 800b23a:	f002 fb27 	bl	800d88c <__pow5mult>
 800b23e:	9005      	str	r0, [sp, #20]
 800b240:	2800      	cmp	r0, #0
 800b242:	f43f ae89 	beq.w	800af58 <_strtod_l+0x490>
 800b246:	2f00      	cmp	r7, #0
 800b248:	dd08      	ble.n	800b25c <_strtod_l+0x794>
 800b24a:	9905      	ldr	r1, [sp, #20]
 800b24c:	463a      	mov	r2, r7
 800b24e:	4620      	mov	r0, r4
 800b250:	f002 fb76 	bl	800d940 <__lshift>
 800b254:	9005      	str	r0, [sp, #20]
 800b256:	2800      	cmp	r0, #0
 800b258:	f43f ae7e 	beq.w	800af58 <_strtod_l+0x490>
 800b25c:	f1b9 0f00 	cmp.w	r9, #0
 800b260:	dd08      	ble.n	800b274 <_strtod_l+0x7ac>
 800b262:	4631      	mov	r1, r6
 800b264:	464a      	mov	r2, r9
 800b266:	4620      	mov	r0, r4
 800b268:	f002 fb6a 	bl	800d940 <__lshift>
 800b26c:	4606      	mov	r6, r0
 800b26e:	2800      	cmp	r0, #0
 800b270:	f43f ae72 	beq.w	800af58 <_strtod_l+0x490>
 800b274:	9a05      	ldr	r2, [sp, #20]
 800b276:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b278:	4620      	mov	r0, r4
 800b27a:	f002 fbed 	bl	800da58 <__mdiff>
 800b27e:	4605      	mov	r5, r0
 800b280:	2800      	cmp	r0, #0
 800b282:	f43f ae69 	beq.w	800af58 <_strtod_l+0x490>
 800b286:	68c3      	ldr	r3, [r0, #12]
 800b288:	930b      	str	r3, [sp, #44]	; 0x2c
 800b28a:	2300      	movs	r3, #0
 800b28c:	60c3      	str	r3, [r0, #12]
 800b28e:	4631      	mov	r1, r6
 800b290:	f002 fbc6 	bl	800da20 <__mcmp>
 800b294:	2800      	cmp	r0, #0
 800b296:	da60      	bge.n	800b35a <_strtod_l+0x892>
 800b298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b29a:	ea53 030a 	orrs.w	r3, r3, sl
 800b29e:	f040 8082 	bne.w	800b3a6 <_strtod_l+0x8de>
 800b2a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d17d      	bne.n	800b3a6 <_strtod_l+0x8de>
 800b2aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b2ae:	0d1b      	lsrs	r3, r3, #20
 800b2b0:	051b      	lsls	r3, r3, #20
 800b2b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b2b6:	d976      	bls.n	800b3a6 <_strtod_l+0x8de>
 800b2b8:	696b      	ldr	r3, [r5, #20]
 800b2ba:	b913      	cbnz	r3, 800b2c2 <_strtod_l+0x7fa>
 800b2bc:	692b      	ldr	r3, [r5, #16]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	dd71      	ble.n	800b3a6 <_strtod_l+0x8de>
 800b2c2:	4629      	mov	r1, r5
 800b2c4:	2201      	movs	r2, #1
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f002 fb3a 	bl	800d940 <__lshift>
 800b2cc:	4631      	mov	r1, r6
 800b2ce:	4605      	mov	r5, r0
 800b2d0:	f002 fba6 	bl	800da20 <__mcmp>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	dd66      	ble.n	800b3a6 <_strtod_l+0x8de>
 800b2d8:	9904      	ldr	r1, [sp, #16]
 800b2da:	4a53      	ldr	r2, [pc, #332]	; (800b428 <_strtod_l+0x960>)
 800b2dc:	465b      	mov	r3, fp
 800b2de:	2900      	cmp	r1, #0
 800b2e0:	f000 8081 	beq.w	800b3e6 <_strtod_l+0x91e>
 800b2e4:	ea02 010b 	and.w	r1, r2, fp
 800b2e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b2ec:	dc7b      	bgt.n	800b3e6 <_strtod_l+0x91e>
 800b2ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b2f2:	f77f aea9 	ble.w	800b048 <_strtod_l+0x580>
 800b2f6:	4b4d      	ldr	r3, [pc, #308]	; (800b42c <_strtod_l+0x964>)
 800b2f8:	4650      	mov	r0, sl
 800b2fa:	4659      	mov	r1, fp
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f7f5 f983 	bl	8000608 <__aeabi_dmul>
 800b302:	460b      	mov	r3, r1
 800b304:	4303      	orrs	r3, r0
 800b306:	bf08      	it	eq
 800b308:	2322      	moveq	r3, #34	; 0x22
 800b30a:	4682      	mov	sl, r0
 800b30c:	468b      	mov	fp, r1
 800b30e:	bf08      	it	eq
 800b310:	6023      	streq	r3, [r4, #0]
 800b312:	e62b      	b.n	800af6c <_strtod_l+0x4a4>
 800b314:	f04f 32ff 	mov.w	r2, #4294967295
 800b318:	fa02 f303 	lsl.w	r3, r2, r3
 800b31c:	ea03 0a0a 	and.w	sl, r3, sl
 800b320:	e6e3      	b.n	800b0ea <_strtod_l+0x622>
 800b322:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b326:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b32a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b32e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b332:	fa01 f308 	lsl.w	r3, r1, r8
 800b336:	9308      	str	r3, [sp, #32]
 800b338:	910d      	str	r1, [sp, #52]	; 0x34
 800b33a:	e746      	b.n	800b1ca <_strtod_l+0x702>
 800b33c:	2300      	movs	r3, #0
 800b33e:	9308      	str	r3, [sp, #32]
 800b340:	2301      	movs	r3, #1
 800b342:	930d      	str	r3, [sp, #52]	; 0x34
 800b344:	e741      	b.n	800b1ca <_strtod_l+0x702>
 800b346:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b348:	4642      	mov	r2, r8
 800b34a:	4620      	mov	r0, r4
 800b34c:	f002 faf8 	bl	800d940 <__lshift>
 800b350:	9018      	str	r0, [sp, #96]	; 0x60
 800b352:	2800      	cmp	r0, #0
 800b354:	f47f af6b 	bne.w	800b22e <_strtod_l+0x766>
 800b358:	e5fe      	b.n	800af58 <_strtod_l+0x490>
 800b35a:	465f      	mov	r7, fp
 800b35c:	d16e      	bne.n	800b43c <_strtod_l+0x974>
 800b35e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b360:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b364:	b342      	cbz	r2, 800b3b8 <_strtod_l+0x8f0>
 800b366:	4a32      	ldr	r2, [pc, #200]	; (800b430 <_strtod_l+0x968>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d128      	bne.n	800b3be <_strtod_l+0x8f6>
 800b36c:	9b04      	ldr	r3, [sp, #16]
 800b36e:	4651      	mov	r1, sl
 800b370:	b1eb      	cbz	r3, 800b3ae <_strtod_l+0x8e6>
 800b372:	4b2d      	ldr	r3, [pc, #180]	; (800b428 <_strtod_l+0x960>)
 800b374:	403b      	ands	r3, r7
 800b376:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b37a:	f04f 32ff 	mov.w	r2, #4294967295
 800b37e:	d819      	bhi.n	800b3b4 <_strtod_l+0x8ec>
 800b380:	0d1b      	lsrs	r3, r3, #20
 800b382:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b386:	fa02 f303 	lsl.w	r3, r2, r3
 800b38a:	4299      	cmp	r1, r3
 800b38c:	d117      	bne.n	800b3be <_strtod_l+0x8f6>
 800b38e:	4b29      	ldr	r3, [pc, #164]	; (800b434 <_strtod_l+0x96c>)
 800b390:	429f      	cmp	r7, r3
 800b392:	d102      	bne.n	800b39a <_strtod_l+0x8d2>
 800b394:	3101      	adds	r1, #1
 800b396:	f43f addf 	beq.w	800af58 <_strtod_l+0x490>
 800b39a:	4b23      	ldr	r3, [pc, #140]	; (800b428 <_strtod_l+0x960>)
 800b39c:	403b      	ands	r3, r7
 800b39e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b3a2:	f04f 0a00 	mov.w	sl, #0
 800b3a6:	9b04      	ldr	r3, [sp, #16]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d1a4      	bne.n	800b2f6 <_strtod_l+0x82e>
 800b3ac:	e5de      	b.n	800af6c <_strtod_l+0x4a4>
 800b3ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b3b2:	e7ea      	b.n	800b38a <_strtod_l+0x8c2>
 800b3b4:	4613      	mov	r3, r2
 800b3b6:	e7e8      	b.n	800b38a <_strtod_l+0x8c2>
 800b3b8:	ea53 030a 	orrs.w	r3, r3, sl
 800b3bc:	d08c      	beq.n	800b2d8 <_strtod_l+0x810>
 800b3be:	9b08      	ldr	r3, [sp, #32]
 800b3c0:	b1db      	cbz	r3, 800b3fa <_strtod_l+0x932>
 800b3c2:	423b      	tst	r3, r7
 800b3c4:	d0ef      	beq.n	800b3a6 <_strtod_l+0x8de>
 800b3c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3c8:	9a04      	ldr	r2, [sp, #16]
 800b3ca:	4650      	mov	r0, sl
 800b3cc:	4659      	mov	r1, fp
 800b3ce:	b1c3      	cbz	r3, 800b402 <_strtod_l+0x93a>
 800b3d0:	f7ff fb5b 	bl	800aa8a <sulp>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	ec51 0b18 	vmov	r0, r1, d8
 800b3dc:	f7f4 ff5e 	bl	800029c <__adddf3>
 800b3e0:	4682      	mov	sl, r0
 800b3e2:	468b      	mov	fp, r1
 800b3e4:	e7df      	b.n	800b3a6 <_strtod_l+0x8de>
 800b3e6:	4013      	ands	r3, r2
 800b3e8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b3ec:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b3f0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b3f4:	f04f 3aff 	mov.w	sl, #4294967295
 800b3f8:	e7d5      	b.n	800b3a6 <_strtod_l+0x8de>
 800b3fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3fc:	ea13 0f0a 	tst.w	r3, sl
 800b400:	e7e0      	b.n	800b3c4 <_strtod_l+0x8fc>
 800b402:	f7ff fb42 	bl	800aa8a <sulp>
 800b406:	4602      	mov	r2, r0
 800b408:	460b      	mov	r3, r1
 800b40a:	ec51 0b18 	vmov	r0, r1, d8
 800b40e:	f7f4 ff43 	bl	8000298 <__aeabi_dsub>
 800b412:	2200      	movs	r2, #0
 800b414:	2300      	movs	r3, #0
 800b416:	4682      	mov	sl, r0
 800b418:	468b      	mov	fp, r1
 800b41a:	f7f5 fb5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b41e:	2800      	cmp	r0, #0
 800b420:	d0c1      	beq.n	800b3a6 <_strtod_l+0x8de>
 800b422:	e611      	b.n	800b048 <_strtod_l+0x580>
 800b424:	fffffc02 	.word	0xfffffc02
 800b428:	7ff00000 	.word	0x7ff00000
 800b42c:	39500000 	.word	0x39500000
 800b430:	000fffff 	.word	0x000fffff
 800b434:	7fefffff 	.word	0x7fefffff
 800b438:	0800fa88 	.word	0x0800fa88
 800b43c:	4631      	mov	r1, r6
 800b43e:	4628      	mov	r0, r5
 800b440:	f002 fc6c 	bl	800dd1c <__ratio>
 800b444:	ec59 8b10 	vmov	r8, r9, d0
 800b448:	ee10 0a10 	vmov	r0, s0
 800b44c:	2200      	movs	r2, #0
 800b44e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b452:	4649      	mov	r1, r9
 800b454:	f7f5 fb54 	bl	8000b00 <__aeabi_dcmple>
 800b458:	2800      	cmp	r0, #0
 800b45a:	d07a      	beq.n	800b552 <_strtod_l+0xa8a>
 800b45c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d04a      	beq.n	800b4f8 <_strtod_l+0xa30>
 800b462:	4b95      	ldr	r3, [pc, #596]	; (800b6b8 <_strtod_l+0xbf0>)
 800b464:	2200      	movs	r2, #0
 800b466:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b46a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b6b8 <_strtod_l+0xbf0>
 800b46e:	f04f 0800 	mov.w	r8, #0
 800b472:	4b92      	ldr	r3, [pc, #584]	; (800b6bc <_strtod_l+0xbf4>)
 800b474:	403b      	ands	r3, r7
 800b476:	930d      	str	r3, [sp, #52]	; 0x34
 800b478:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b47a:	4b91      	ldr	r3, [pc, #580]	; (800b6c0 <_strtod_l+0xbf8>)
 800b47c:	429a      	cmp	r2, r3
 800b47e:	f040 80b0 	bne.w	800b5e2 <_strtod_l+0xb1a>
 800b482:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b486:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b48a:	ec4b ab10 	vmov	d0, sl, fp
 800b48e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b492:	f002 fb6b 	bl	800db6c <__ulp>
 800b496:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b49a:	ec53 2b10 	vmov	r2, r3, d0
 800b49e:	f7f5 f8b3 	bl	8000608 <__aeabi_dmul>
 800b4a2:	4652      	mov	r2, sl
 800b4a4:	465b      	mov	r3, fp
 800b4a6:	f7f4 fef9 	bl	800029c <__adddf3>
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	4983      	ldr	r1, [pc, #524]	; (800b6bc <_strtod_l+0xbf4>)
 800b4ae:	4a85      	ldr	r2, [pc, #532]	; (800b6c4 <_strtod_l+0xbfc>)
 800b4b0:	4019      	ands	r1, r3
 800b4b2:	4291      	cmp	r1, r2
 800b4b4:	4682      	mov	sl, r0
 800b4b6:	d960      	bls.n	800b57a <_strtod_l+0xab2>
 800b4b8:	ee18 3a90 	vmov	r3, s17
 800b4bc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d104      	bne.n	800b4ce <_strtod_l+0xa06>
 800b4c4:	ee18 3a10 	vmov	r3, s16
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	f43f ad45 	beq.w	800af58 <_strtod_l+0x490>
 800b4ce:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b6d0 <_strtod_l+0xc08>
 800b4d2:	f04f 3aff 	mov.w	sl, #4294967295
 800b4d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f002 f815 	bl	800d508 <_Bfree>
 800b4de:	9905      	ldr	r1, [sp, #20]
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	f002 f811 	bl	800d508 <_Bfree>
 800b4e6:	4631      	mov	r1, r6
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	f002 f80d 	bl	800d508 <_Bfree>
 800b4ee:	4629      	mov	r1, r5
 800b4f0:	4620      	mov	r0, r4
 800b4f2:	f002 f809 	bl	800d508 <_Bfree>
 800b4f6:	e61a      	b.n	800b12e <_strtod_l+0x666>
 800b4f8:	f1ba 0f00 	cmp.w	sl, #0
 800b4fc:	d11b      	bne.n	800b536 <_strtod_l+0xa6e>
 800b4fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b502:	b9f3      	cbnz	r3, 800b542 <_strtod_l+0xa7a>
 800b504:	4b6c      	ldr	r3, [pc, #432]	; (800b6b8 <_strtod_l+0xbf0>)
 800b506:	2200      	movs	r2, #0
 800b508:	4640      	mov	r0, r8
 800b50a:	4649      	mov	r1, r9
 800b50c:	f7f5 faee 	bl	8000aec <__aeabi_dcmplt>
 800b510:	b9d0      	cbnz	r0, 800b548 <_strtod_l+0xa80>
 800b512:	4640      	mov	r0, r8
 800b514:	4649      	mov	r1, r9
 800b516:	4b6c      	ldr	r3, [pc, #432]	; (800b6c8 <_strtod_l+0xc00>)
 800b518:	2200      	movs	r2, #0
 800b51a:	f7f5 f875 	bl	8000608 <__aeabi_dmul>
 800b51e:	4680      	mov	r8, r0
 800b520:	4689      	mov	r9, r1
 800b522:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b526:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b52a:	9315      	str	r3, [sp, #84]	; 0x54
 800b52c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b530:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b534:	e79d      	b.n	800b472 <_strtod_l+0x9aa>
 800b536:	f1ba 0f01 	cmp.w	sl, #1
 800b53a:	d102      	bne.n	800b542 <_strtod_l+0xa7a>
 800b53c:	2f00      	cmp	r7, #0
 800b53e:	f43f ad83 	beq.w	800b048 <_strtod_l+0x580>
 800b542:	4b62      	ldr	r3, [pc, #392]	; (800b6cc <_strtod_l+0xc04>)
 800b544:	2200      	movs	r2, #0
 800b546:	e78e      	b.n	800b466 <_strtod_l+0x99e>
 800b548:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b6c8 <_strtod_l+0xc00>
 800b54c:	f04f 0800 	mov.w	r8, #0
 800b550:	e7e7      	b.n	800b522 <_strtod_l+0xa5a>
 800b552:	4b5d      	ldr	r3, [pc, #372]	; (800b6c8 <_strtod_l+0xc00>)
 800b554:	4640      	mov	r0, r8
 800b556:	4649      	mov	r1, r9
 800b558:	2200      	movs	r2, #0
 800b55a:	f7f5 f855 	bl	8000608 <__aeabi_dmul>
 800b55e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b560:	4680      	mov	r8, r0
 800b562:	4689      	mov	r9, r1
 800b564:	b933      	cbnz	r3, 800b574 <_strtod_l+0xaac>
 800b566:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b56a:	900e      	str	r0, [sp, #56]	; 0x38
 800b56c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b56e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b572:	e7dd      	b.n	800b530 <_strtod_l+0xa68>
 800b574:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b578:	e7f9      	b.n	800b56e <_strtod_l+0xaa6>
 800b57a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b57e:	9b04      	ldr	r3, [sp, #16]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d1a8      	bne.n	800b4d6 <_strtod_l+0xa0e>
 800b584:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b588:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b58a:	0d1b      	lsrs	r3, r3, #20
 800b58c:	051b      	lsls	r3, r3, #20
 800b58e:	429a      	cmp	r2, r3
 800b590:	d1a1      	bne.n	800b4d6 <_strtod_l+0xa0e>
 800b592:	4640      	mov	r0, r8
 800b594:	4649      	mov	r1, r9
 800b596:	f7f5 fb97 	bl	8000cc8 <__aeabi_d2lz>
 800b59a:	f7f5 f807 	bl	80005ac <__aeabi_l2d>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	4640      	mov	r0, r8
 800b5a4:	4649      	mov	r1, r9
 800b5a6:	f7f4 fe77 	bl	8000298 <__aeabi_dsub>
 800b5aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b5b0:	ea43 030a 	orr.w	r3, r3, sl
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	4680      	mov	r8, r0
 800b5b8:	4689      	mov	r9, r1
 800b5ba:	d055      	beq.n	800b668 <_strtod_l+0xba0>
 800b5bc:	a336      	add	r3, pc, #216	; (adr r3, 800b698 <_strtod_l+0xbd0>)
 800b5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c2:	f7f5 fa93 	bl	8000aec <__aeabi_dcmplt>
 800b5c6:	2800      	cmp	r0, #0
 800b5c8:	f47f acd0 	bne.w	800af6c <_strtod_l+0x4a4>
 800b5cc:	a334      	add	r3, pc, #208	; (adr r3, 800b6a0 <_strtod_l+0xbd8>)
 800b5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d2:	4640      	mov	r0, r8
 800b5d4:	4649      	mov	r1, r9
 800b5d6:	f7f5 faa7 	bl	8000b28 <__aeabi_dcmpgt>
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	f43f af7b 	beq.w	800b4d6 <_strtod_l+0xa0e>
 800b5e0:	e4c4      	b.n	800af6c <_strtod_l+0x4a4>
 800b5e2:	9b04      	ldr	r3, [sp, #16]
 800b5e4:	b333      	cbz	r3, 800b634 <_strtod_l+0xb6c>
 800b5e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5e8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b5ec:	d822      	bhi.n	800b634 <_strtod_l+0xb6c>
 800b5ee:	a32e      	add	r3, pc, #184	; (adr r3, 800b6a8 <_strtod_l+0xbe0>)
 800b5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f4:	4640      	mov	r0, r8
 800b5f6:	4649      	mov	r1, r9
 800b5f8:	f7f5 fa82 	bl	8000b00 <__aeabi_dcmple>
 800b5fc:	b1a0      	cbz	r0, 800b628 <_strtod_l+0xb60>
 800b5fe:	4649      	mov	r1, r9
 800b600:	4640      	mov	r0, r8
 800b602:	f7f5 fad9 	bl	8000bb8 <__aeabi_d2uiz>
 800b606:	2801      	cmp	r0, #1
 800b608:	bf38      	it	cc
 800b60a:	2001      	movcc	r0, #1
 800b60c:	f7f4 ff82 	bl	8000514 <__aeabi_ui2d>
 800b610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b612:	4680      	mov	r8, r0
 800b614:	4689      	mov	r9, r1
 800b616:	bb23      	cbnz	r3, 800b662 <_strtod_l+0xb9a>
 800b618:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b61c:	9010      	str	r0, [sp, #64]	; 0x40
 800b61e:	9311      	str	r3, [sp, #68]	; 0x44
 800b620:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b624:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b62a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b62c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b630:	1a9b      	subs	r3, r3, r2
 800b632:	9309      	str	r3, [sp, #36]	; 0x24
 800b634:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b638:	eeb0 0a48 	vmov.f32	s0, s16
 800b63c:	eef0 0a68 	vmov.f32	s1, s17
 800b640:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b644:	f002 fa92 	bl	800db6c <__ulp>
 800b648:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b64c:	ec53 2b10 	vmov	r2, r3, d0
 800b650:	f7f4 ffda 	bl	8000608 <__aeabi_dmul>
 800b654:	ec53 2b18 	vmov	r2, r3, d8
 800b658:	f7f4 fe20 	bl	800029c <__adddf3>
 800b65c:	4682      	mov	sl, r0
 800b65e:	468b      	mov	fp, r1
 800b660:	e78d      	b.n	800b57e <_strtod_l+0xab6>
 800b662:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b666:	e7db      	b.n	800b620 <_strtod_l+0xb58>
 800b668:	a311      	add	r3, pc, #68	; (adr r3, 800b6b0 <_strtod_l+0xbe8>)
 800b66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66e:	f7f5 fa3d 	bl	8000aec <__aeabi_dcmplt>
 800b672:	e7b2      	b.n	800b5da <_strtod_l+0xb12>
 800b674:	2300      	movs	r3, #0
 800b676:	930a      	str	r3, [sp, #40]	; 0x28
 800b678:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b67a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b67c:	6013      	str	r3, [r2, #0]
 800b67e:	f7ff ba6b 	b.w	800ab58 <_strtod_l+0x90>
 800b682:	2a65      	cmp	r2, #101	; 0x65
 800b684:	f43f ab5f 	beq.w	800ad46 <_strtod_l+0x27e>
 800b688:	2a45      	cmp	r2, #69	; 0x45
 800b68a:	f43f ab5c 	beq.w	800ad46 <_strtod_l+0x27e>
 800b68e:	2301      	movs	r3, #1
 800b690:	f7ff bb94 	b.w	800adbc <_strtod_l+0x2f4>
 800b694:	f3af 8000 	nop.w
 800b698:	94a03595 	.word	0x94a03595
 800b69c:	3fdfffff 	.word	0x3fdfffff
 800b6a0:	35afe535 	.word	0x35afe535
 800b6a4:	3fe00000 	.word	0x3fe00000
 800b6a8:	ffc00000 	.word	0xffc00000
 800b6ac:	41dfffff 	.word	0x41dfffff
 800b6b0:	94a03595 	.word	0x94a03595
 800b6b4:	3fcfffff 	.word	0x3fcfffff
 800b6b8:	3ff00000 	.word	0x3ff00000
 800b6bc:	7ff00000 	.word	0x7ff00000
 800b6c0:	7fe00000 	.word	0x7fe00000
 800b6c4:	7c9fffff 	.word	0x7c9fffff
 800b6c8:	3fe00000 	.word	0x3fe00000
 800b6cc:	bff00000 	.word	0xbff00000
 800b6d0:	7fefffff 	.word	0x7fefffff

0800b6d4 <strtof>:
 800b6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800b788 <strtof+0xb4>
 800b6dc:	4b26      	ldr	r3, [pc, #152]	; (800b778 <strtof+0xa4>)
 800b6de:	460a      	mov	r2, r1
 800b6e0:	ed2d 8b02 	vpush	{d8}
 800b6e4:	4601      	mov	r1, r0
 800b6e6:	f8d8 0000 	ldr.w	r0, [r8]
 800b6ea:	f7ff f9ed 	bl	800aac8 <_strtod_l>
 800b6ee:	ec55 4b10 	vmov	r4, r5, d0
 800b6f2:	ee10 2a10 	vmov	r2, s0
 800b6f6:	ee10 0a10 	vmov	r0, s0
 800b6fa:	462b      	mov	r3, r5
 800b6fc:	4629      	mov	r1, r5
 800b6fe:	f7f5 fa1d 	bl	8000b3c <__aeabi_dcmpun>
 800b702:	b190      	cbz	r0, 800b72a <strtof+0x56>
 800b704:	2d00      	cmp	r5, #0
 800b706:	481d      	ldr	r0, [pc, #116]	; (800b77c <strtof+0xa8>)
 800b708:	da09      	bge.n	800b71e <strtof+0x4a>
 800b70a:	f002 fe65 	bl	800e3d8 <nanf>
 800b70e:	eeb1 8a40 	vneg.f32	s16, s0
 800b712:	eeb0 0a48 	vmov.f32	s0, s16
 800b716:	ecbd 8b02 	vpop	{d8}
 800b71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b71e:	ecbd 8b02 	vpop	{d8}
 800b722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b726:	f002 be57 	b.w	800e3d8 <nanf>
 800b72a:	4620      	mov	r0, r4
 800b72c:	4629      	mov	r1, r5
 800b72e:	f7f5 fa63 	bl	8000bf8 <__aeabi_d2f>
 800b732:	ee08 0a10 	vmov	s16, r0
 800b736:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b780 <strtof+0xac>
 800b73a:	eeb0 7ac8 	vabs.f32	s14, s16
 800b73e:	eeb4 7a67 	vcmp.f32	s14, s15
 800b742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b746:	dde4      	ble.n	800b712 <strtof+0x3e>
 800b748:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800b74c:	4b0d      	ldr	r3, [pc, #52]	; (800b784 <strtof+0xb0>)
 800b74e:	f04f 32ff 	mov.w	r2, #4294967295
 800b752:	4620      	mov	r0, r4
 800b754:	4639      	mov	r1, r7
 800b756:	f7f5 f9f1 	bl	8000b3c <__aeabi_dcmpun>
 800b75a:	b940      	cbnz	r0, 800b76e <strtof+0x9a>
 800b75c:	4b09      	ldr	r3, [pc, #36]	; (800b784 <strtof+0xb0>)
 800b75e:	f04f 32ff 	mov.w	r2, #4294967295
 800b762:	4620      	mov	r0, r4
 800b764:	4639      	mov	r1, r7
 800b766:	f7f5 f9cb 	bl	8000b00 <__aeabi_dcmple>
 800b76a:	2800      	cmp	r0, #0
 800b76c:	d0d1      	beq.n	800b712 <strtof+0x3e>
 800b76e:	f8d8 3000 	ldr.w	r3, [r8]
 800b772:	2222      	movs	r2, #34	; 0x22
 800b774:	601a      	str	r2, [r3, #0]
 800b776:	e7cc      	b.n	800b712 <strtof+0x3e>
 800b778:	2000012c 	.word	0x2000012c
 800b77c:	0800faeb 	.word	0x0800faeb
 800b780:	7f7fffff 	.word	0x7f7fffff
 800b784:	7fefffff 	.word	0x7fefffff
 800b788:	200000c4 	.word	0x200000c4

0800b78c <_strtol_l.constprop.0>:
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b792:	d001      	beq.n	800b798 <_strtol_l.constprop.0+0xc>
 800b794:	2b24      	cmp	r3, #36	; 0x24
 800b796:	d906      	bls.n	800b7a6 <_strtol_l.constprop.0+0x1a>
 800b798:	f7fe fb5e 	bl	8009e58 <__errno>
 800b79c:	2316      	movs	r3, #22
 800b79e:	6003      	str	r3, [r0, #0]
 800b7a0:	2000      	movs	r0, #0
 800b7a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7a6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b88c <_strtol_l.constprop.0+0x100>
 800b7aa:	460d      	mov	r5, r1
 800b7ac:	462e      	mov	r6, r5
 800b7ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7b2:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b7b6:	f017 0708 	ands.w	r7, r7, #8
 800b7ba:	d1f7      	bne.n	800b7ac <_strtol_l.constprop.0+0x20>
 800b7bc:	2c2d      	cmp	r4, #45	; 0x2d
 800b7be:	d132      	bne.n	800b826 <_strtol_l.constprop.0+0x9a>
 800b7c0:	782c      	ldrb	r4, [r5, #0]
 800b7c2:	2701      	movs	r7, #1
 800b7c4:	1cb5      	adds	r5, r6, #2
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d05b      	beq.n	800b882 <_strtol_l.constprop.0+0xf6>
 800b7ca:	2b10      	cmp	r3, #16
 800b7cc:	d109      	bne.n	800b7e2 <_strtol_l.constprop.0+0x56>
 800b7ce:	2c30      	cmp	r4, #48	; 0x30
 800b7d0:	d107      	bne.n	800b7e2 <_strtol_l.constprop.0+0x56>
 800b7d2:	782c      	ldrb	r4, [r5, #0]
 800b7d4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b7d8:	2c58      	cmp	r4, #88	; 0x58
 800b7da:	d14d      	bne.n	800b878 <_strtol_l.constprop.0+0xec>
 800b7dc:	786c      	ldrb	r4, [r5, #1]
 800b7de:	2310      	movs	r3, #16
 800b7e0:	3502      	adds	r5, #2
 800b7e2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b7e6:	f108 38ff 	add.w	r8, r8, #4294967295
 800b7ea:	f04f 0c00 	mov.w	ip, #0
 800b7ee:	fbb8 f9f3 	udiv	r9, r8, r3
 800b7f2:	4666      	mov	r6, ip
 800b7f4:	fb03 8a19 	mls	sl, r3, r9, r8
 800b7f8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b7fc:	f1be 0f09 	cmp.w	lr, #9
 800b800:	d816      	bhi.n	800b830 <_strtol_l.constprop.0+0xa4>
 800b802:	4674      	mov	r4, lr
 800b804:	42a3      	cmp	r3, r4
 800b806:	dd24      	ble.n	800b852 <_strtol_l.constprop.0+0xc6>
 800b808:	f1bc 0f00 	cmp.w	ip, #0
 800b80c:	db1e      	blt.n	800b84c <_strtol_l.constprop.0+0xc0>
 800b80e:	45b1      	cmp	r9, r6
 800b810:	d31c      	bcc.n	800b84c <_strtol_l.constprop.0+0xc0>
 800b812:	d101      	bne.n	800b818 <_strtol_l.constprop.0+0x8c>
 800b814:	45a2      	cmp	sl, r4
 800b816:	db19      	blt.n	800b84c <_strtol_l.constprop.0+0xc0>
 800b818:	fb06 4603 	mla	r6, r6, r3, r4
 800b81c:	f04f 0c01 	mov.w	ip, #1
 800b820:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b824:	e7e8      	b.n	800b7f8 <_strtol_l.constprop.0+0x6c>
 800b826:	2c2b      	cmp	r4, #43	; 0x2b
 800b828:	bf04      	itt	eq
 800b82a:	782c      	ldrbeq	r4, [r5, #0]
 800b82c:	1cb5      	addeq	r5, r6, #2
 800b82e:	e7ca      	b.n	800b7c6 <_strtol_l.constprop.0+0x3a>
 800b830:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b834:	f1be 0f19 	cmp.w	lr, #25
 800b838:	d801      	bhi.n	800b83e <_strtol_l.constprop.0+0xb2>
 800b83a:	3c37      	subs	r4, #55	; 0x37
 800b83c:	e7e2      	b.n	800b804 <_strtol_l.constprop.0+0x78>
 800b83e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b842:	f1be 0f19 	cmp.w	lr, #25
 800b846:	d804      	bhi.n	800b852 <_strtol_l.constprop.0+0xc6>
 800b848:	3c57      	subs	r4, #87	; 0x57
 800b84a:	e7db      	b.n	800b804 <_strtol_l.constprop.0+0x78>
 800b84c:	f04f 3cff 	mov.w	ip, #4294967295
 800b850:	e7e6      	b.n	800b820 <_strtol_l.constprop.0+0x94>
 800b852:	f1bc 0f00 	cmp.w	ip, #0
 800b856:	da05      	bge.n	800b864 <_strtol_l.constprop.0+0xd8>
 800b858:	2322      	movs	r3, #34	; 0x22
 800b85a:	6003      	str	r3, [r0, #0]
 800b85c:	4646      	mov	r6, r8
 800b85e:	b942      	cbnz	r2, 800b872 <_strtol_l.constprop.0+0xe6>
 800b860:	4630      	mov	r0, r6
 800b862:	e79e      	b.n	800b7a2 <_strtol_l.constprop.0+0x16>
 800b864:	b107      	cbz	r7, 800b868 <_strtol_l.constprop.0+0xdc>
 800b866:	4276      	negs	r6, r6
 800b868:	2a00      	cmp	r2, #0
 800b86a:	d0f9      	beq.n	800b860 <_strtol_l.constprop.0+0xd4>
 800b86c:	f1bc 0f00 	cmp.w	ip, #0
 800b870:	d000      	beq.n	800b874 <_strtol_l.constprop.0+0xe8>
 800b872:	1e69      	subs	r1, r5, #1
 800b874:	6011      	str	r1, [r2, #0]
 800b876:	e7f3      	b.n	800b860 <_strtol_l.constprop.0+0xd4>
 800b878:	2430      	movs	r4, #48	; 0x30
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d1b1      	bne.n	800b7e2 <_strtol_l.constprop.0+0x56>
 800b87e:	2308      	movs	r3, #8
 800b880:	e7af      	b.n	800b7e2 <_strtol_l.constprop.0+0x56>
 800b882:	2c30      	cmp	r4, #48	; 0x30
 800b884:	d0a5      	beq.n	800b7d2 <_strtol_l.constprop.0+0x46>
 800b886:	230a      	movs	r3, #10
 800b888:	e7ab      	b.n	800b7e2 <_strtol_l.constprop.0+0x56>
 800b88a:	bf00      	nop
 800b88c:	0800f921 	.word	0x0800f921

0800b890 <strtol>:
 800b890:	4613      	mov	r3, r2
 800b892:	460a      	mov	r2, r1
 800b894:	4601      	mov	r1, r0
 800b896:	4802      	ldr	r0, [pc, #8]	; (800b8a0 <strtol+0x10>)
 800b898:	6800      	ldr	r0, [r0, #0]
 800b89a:	f7ff bf77 	b.w	800b78c <_strtol_l.constprop.0>
 800b89e:	bf00      	nop
 800b8a0:	200000c4 	.word	0x200000c4

0800b8a4 <_strtoll_l.constprop.0>:
 800b8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a8:	b085      	sub	sp, #20
 800b8aa:	4688      	mov	r8, r1
 800b8ac:	9201      	str	r2, [sp, #4]
 800b8ae:	4a47      	ldr	r2, [pc, #284]	; (800b9cc <_strtoll_l.constprop.0+0x128>)
 800b8b0:	9003      	str	r0, [sp, #12]
 800b8b2:	461e      	mov	r6, r3
 800b8b4:	460d      	mov	r5, r1
 800b8b6:	462b      	mov	r3, r5
 800b8b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8bc:	5ca7      	ldrb	r7, [r4, r2]
 800b8be:	f017 0708 	ands.w	r7, r7, #8
 800b8c2:	d1f8      	bne.n	800b8b6 <_strtoll_l.constprop.0+0x12>
 800b8c4:	2c2d      	cmp	r4, #45	; 0x2d
 800b8c6:	d147      	bne.n	800b958 <_strtoll_l.constprop.0+0xb4>
 800b8c8:	782c      	ldrb	r4, [r5, #0]
 800b8ca:	2701      	movs	r7, #1
 800b8cc:	1c9d      	adds	r5, r3, #2
 800b8ce:	2e00      	cmp	r6, #0
 800b8d0:	d077      	beq.n	800b9c2 <_strtoll_l.constprop.0+0x11e>
 800b8d2:	2e10      	cmp	r6, #16
 800b8d4:	d109      	bne.n	800b8ea <_strtoll_l.constprop.0+0x46>
 800b8d6:	2c30      	cmp	r4, #48	; 0x30
 800b8d8:	d107      	bne.n	800b8ea <_strtoll_l.constprop.0+0x46>
 800b8da:	782b      	ldrb	r3, [r5, #0]
 800b8dc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b8e0:	2b58      	cmp	r3, #88	; 0x58
 800b8e2:	d169      	bne.n	800b9b8 <_strtoll_l.constprop.0+0x114>
 800b8e4:	786c      	ldrb	r4, [r5, #1]
 800b8e6:	2610      	movs	r6, #16
 800b8e8:	3502      	adds	r5, #2
 800b8ea:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 800b8ee:	f107 3bff 	add.w	fp, r7, #4294967295
 800b8f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8f6:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800b8fa:	4632      	mov	r2, r6
 800b8fc:	464b      	mov	r3, r9
 800b8fe:	4658      	mov	r0, fp
 800b900:	4651      	mov	r1, sl
 800b902:	f7f5 f9c9 	bl	8000c98 <__aeabi_uldivmod>
 800b906:	2300      	movs	r3, #0
 800b908:	9202      	str	r2, [sp, #8]
 800b90a:	468c      	mov	ip, r1
 800b90c:	4602      	mov	r2, r0
 800b90e:	4619      	mov	r1, r3
 800b910:	4618      	mov	r0, r3
 800b912:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b916:	f1be 0f09 	cmp.w	lr, #9
 800b91a:	d822      	bhi.n	800b962 <_strtoll_l.constprop.0+0xbe>
 800b91c:	4674      	mov	r4, lr
 800b91e:	42a6      	cmp	r6, r4
 800b920:	dd30      	ble.n	800b984 <_strtoll_l.constprop.0+0xe0>
 800b922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b926:	d014      	beq.n	800b952 <_strtoll_l.constprop.0+0xae>
 800b928:	4282      	cmp	r2, r0
 800b92a:	eb7c 0301 	sbcs.w	r3, ip, r1
 800b92e:	d326      	bcc.n	800b97e <_strtoll_l.constprop.0+0xda>
 800b930:	458c      	cmp	ip, r1
 800b932:	bf08      	it	eq
 800b934:	4282      	cmpeq	r2, r0
 800b936:	d102      	bne.n	800b93e <_strtoll_l.constprop.0+0x9a>
 800b938:	9b02      	ldr	r3, [sp, #8]
 800b93a:	42a3      	cmp	r3, r4
 800b93c:	db1f      	blt.n	800b97e <_strtoll_l.constprop.0+0xda>
 800b93e:	4371      	muls	r1, r6
 800b940:	fb00 1109 	mla	r1, r0, r9, r1
 800b944:	fba6 0300 	umull	r0, r3, r6, r0
 800b948:	4419      	add	r1, r3
 800b94a:	1820      	adds	r0, r4, r0
 800b94c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800b950:	2301      	movs	r3, #1
 800b952:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b956:	e7dc      	b.n	800b912 <_strtoll_l.constprop.0+0x6e>
 800b958:	2c2b      	cmp	r4, #43	; 0x2b
 800b95a:	bf04      	itt	eq
 800b95c:	782c      	ldrbeq	r4, [r5, #0]
 800b95e:	1c9d      	addeq	r5, r3, #2
 800b960:	e7b5      	b.n	800b8ce <_strtoll_l.constprop.0+0x2a>
 800b962:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b966:	f1be 0f19 	cmp.w	lr, #25
 800b96a:	d801      	bhi.n	800b970 <_strtoll_l.constprop.0+0xcc>
 800b96c:	3c37      	subs	r4, #55	; 0x37
 800b96e:	e7d6      	b.n	800b91e <_strtoll_l.constprop.0+0x7a>
 800b970:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b974:	f1be 0f19 	cmp.w	lr, #25
 800b978:	d804      	bhi.n	800b984 <_strtoll_l.constprop.0+0xe0>
 800b97a:	3c57      	subs	r4, #87	; 0x57
 800b97c:	e7cf      	b.n	800b91e <_strtoll_l.constprop.0+0x7a>
 800b97e:	f04f 33ff 	mov.w	r3, #4294967295
 800b982:	e7e6      	b.n	800b952 <_strtoll_l.constprop.0+0xae>
 800b984:	1c5a      	adds	r2, r3, #1
 800b986:	d109      	bne.n	800b99c <_strtoll_l.constprop.0+0xf8>
 800b988:	9a03      	ldr	r2, [sp, #12]
 800b98a:	2322      	movs	r3, #34	; 0x22
 800b98c:	6013      	str	r3, [r2, #0]
 800b98e:	9b01      	ldr	r3, [sp, #4]
 800b990:	4658      	mov	r0, fp
 800b992:	4651      	mov	r1, sl
 800b994:	b953      	cbnz	r3, 800b9ac <_strtoll_l.constprop.0+0x108>
 800b996:	b005      	add	sp, #20
 800b998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b99c:	b117      	cbz	r7, 800b9a4 <_strtoll_l.constprop.0+0x100>
 800b99e:	4240      	negs	r0, r0
 800b9a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800b9a4:	9a01      	ldr	r2, [sp, #4]
 800b9a6:	2a00      	cmp	r2, #0
 800b9a8:	d0f5      	beq.n	800b996 <_strtoll_l.constprop.0+0xf2>
 800b9aa:	b10b      	cbz	r3, 800b9b0 <_strtoll_l.constprop.0+0x10c>
 800b9ac:	f105 38ff 	add.w	r8, r5, #4294967295
 800b9b0:	9b01      	ldr	r3, [sp, #4]
 800b9b2:	f8c3 8000 	str.w	r8, [r3]
 800b9b6:	e7ee      	b.n	800b996 <_strtoll_l.constprop.0+0xf2>
 800b9b8:	2430      	movs	r4, #48	; 0x30
 800b9ba:	2e00      	cmp	r6, #0
 800b9bc:	d195      	bne.n	800b8ea <_strtoll_l.constprop.0+0x46>
 800b9be:	2608      	movs	r6, #8
 800b9c0:	e793      	b.n	800b8ea <_strtoll_l.constprop.0+0x46>
 800b9c2:	2c30      	cmp	r4, #48	; 0x30
 800b9c4:	d089      	beq.n	800b8da <_strtoll_l.constprop.0+0x36>
 800b9c6:	260a      	movs	r6, #10
 800b9c8:	e78f      	b.n	800b8ea <_strtoll_l.constprop.0+0x46>
 800b9ca:	bf00      	nop
 800b9cc:	0800f921 	.word	0x0800f921

0800b9d0 <strtoll>:
 800b9d0:	4613      	mov	r3, r2
 800b9d2:	460a      	mov	r2, r1
 800b9d4:	4601      	mov	r1, r0
 800b9d6:	4802      	ldr	r0, [pc, #8]	; (800b9e0 <strtoll+0x10>)
 800b9d8:	6800      	ldr	r0, [r0, #0]
 800b9da:	f7ff bf63 	b.w	800b8a4 <_strtoll_l.constprop.0>
 800b9de:	bf00      	nop
 800b9e0:	200000c4 	.word	0x200000c4

0800b9e4 <__swbuf_r>:
 800b9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9e6:	460e      	mov	r6, r1
 800b9e8:	4614      	mov	r4, r2
 800b9ea:	4605      	mov	r5, r0
 800b9ec:	b118      	cbz	r0, 800b9f6 <__swbuf_r+0x12>
 800b9ee:	6983      	ldr	r3, [r0, #24]
 800b9f0:	b90b      	cbnz	r3, 800b9f6 <__swbuf_r+0x12>
 800b9f2:	f001 f88d 	bl	800cb10 <__sinit>
 800b9f6:	4b21      	ldr	r3, [pc, #132]	; (800ba7c <__swbuf_r+0x98>)
 800b9f8:	429c      	cmp	r4, r3
 800b9fa:	d12b      	bne.n	800ba54 <__swbuf_r+0x70>
 800b9fc:	686c      	ldr	r4, [r5, #4]
 800b9fe:	69a3      	ldr	r3, [r4, #24]
 800ba00:	60a3      	str	r3, [r4, #8]
 800ba02:	89a3      	ldrh	r3, [r4, #12]
 800ba04:	071a      	lsls	r2, r3, #28
 800ba06:	d52f      	bpl.n	800ba68 <__swbuf_r+0x84>
 800ba08:	6923      	ldr	r3, [r4, #16]
 800ba0a:	b36b      	cbz	r3, 800ba68 <__swbuf_r+0x84>
 800ba0c:	6923      	ldr	r3, [r4, #16]
 800ba0e:	6820      	ldr	r0, [r4, #0]
 800ba10:	1ac0      	subs	r0, r0, r3
 800ba12:	6963      	ldr	r3, [r4, #20]
 800ba14:	b2f6      	uxtb	r6, r6
 800ba16:	4283      	cmp	r3, r0
 800ba18:	4637      	mov	r7, r6
 800ba1a:	dc04      	bgt.n	800ba26 <__swbuf_r+0x42>
 800ba1c:	4621      	mov	r1, r4
 800ba1e:	4628      	mov	r0, r5
 800ba20:	f000 ffe2 	bl	800c9e8 <_fflush_r>
 800ba24:	bb30      	cbnz	r0, 800ba74 <__swbuf_r+0x90>
 800ba26:	68a3      	ldr	r3, [r4, #8]
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	60a3      	str	r3, [r4, #8]
 800ba2c:	6823      	ldr	r3, [r4, #0]
 800ba2e:	1c5a      	adds	r2, r3, #1
 800ba30:	6022      	str	r2, [r4, #0]
 800ba32:	701e      	strb	r6, [r3, #0]
 800ba34:	6963      	ldr	r3, [r4, #20]
 800ba36:	3001      	adds	r0, #1
 800ba38:	4283      	cmp	r3, r0
 800ba3a:	d004      	beq.n	800ba46 <__swbuf_r+0x62>
 800ba3c:	89a3      	ldrh	r3, [r4, #12]
 800ba3e:	07db      	lsls	r3, r3, #31
 800ba40:	d506      	bpl.n	800ba50 <__swbuf_r+0x6c>
 800ba42:	2e0a      	cmp	r6, #10
 800ba44:	d104      	bne.n	800ba50 <__swbuf_r+0x6c>
 800ba46:	4621      	mov	r1, r4
 800ba48:	4628      	mov	r0, r5
 800ba4a:	f000 ffcd 	bl	800c9e8 <_fflush_r>
 800ba4e:	b988      	cbnz	r0, 800ba74 <__swbuf_r+0x90>
 800ba50:	4638      	mov	r0, r7
 800ba52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba54:	4b0a      	ldr	r3, [pc, #40]	; (800ba80 <__swbuf_r+0x9c>)
 800ba56:	429c      	cmp	r4, r3
 800ba58:	d101      	bne.n	800ba5e <__swbuf_r+0x7a>
 800ba5a:	68ac      	ldr	r4, [r5, #8]
 800ba5c:	e7cf      	b.n	800b9fe <__swbuf_r+0x1a>
 800ba5e:	4b09      	ldr	r3, [pc, #36]	; (800ba84 <__swbuf_r+0xa0>)
 800ba60:	429c      	cmp	r4, r3
 800ba62:	bf08      	it	eq
 800ba64:	68ec      	ldreq	r4, [r5, #12]
 800ba66:	e7ca      	b.n	800b9fe <__swbuf_r+0x1a>
 800ba68:	4621      	mov	r1, r4
 800ba6a:	4628      	mov	r0, r5
 800ba6c:	f000 f81e 	bl	800baac <__swsetup_r>
 800ba70:	2800      	cmp	r0, #0
 800ba72:	d0cb      	beq.n	800ba0c <__swbuf_r+0x28>
 800ba74:	f04f 37ff 	mov.w	r7, #4294967295
 800ba78:	e7ea      	b.n	800ba50 <__swbuf_r+0x6c>
 800ba7a:	bf00      	nop
 800ba7c:	0800fb9c 	.word	0x0800fb9c
 800ba80:	0800fbbc 	.word	0x0800fbbc
 800ba84:	0800fb7c 	.word	0x0800fb7c

0800ba88 <_write_r>:
 800ba88:	b538      	push	{r3, r4, r5, lr}
 800ba8a:	4d07      	ldr	r5, [pc, #28]	; (800baa8 <_write_r+0x20>)
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	4608      	mov	r0, r1
 800ba90:	4611      	mov	r1, r2
 800ba92:	2200      	movs	r2, #0
 800ba94:	602a      	str	r2, [r5, #0]
 800ba96:	461a      	mov	r2, r3
 800ba98:	f7f9 fc9b 	bl	80053d2 <_write>
 800ba9c:	1c43      	adds	r3, r0, #1
 800ba9e:	d102      	bne.n	800baa6 <_write_r+0x1e>
 800baa0:	682b      	ldr	r3, [r5, #0]
 800baa2:	b103      	cbz	r3, 800baa6 <_write_r+0x1e>
 800baa4:	6023      	str	r3, [r4, #0]
 800baa6:	bd38      	pop	{r3, r4, r5, pc}
 800baa8:	20002e78 	.word	0x20002e78

0800baac <__swsetup_r>:
 800baac:	4b32      	ldr	r3, [pc, #200]	; (800bb78 <__swsetup_r+0xcc>)
 800baae:	b570      	push	{r4, r5, r6, lr}
 800bab0:	681d      	ldr	r5, [r3, #0]
 800bab2:	4606      	mov	r6, r0
 800bab4:	460c      	mov	r4, r1
 800bab6:	b125      	cbz	r5, 800bac2 <__swsetup_r+0x16>
 800bab8:	69ab      	ldr	r3, [r5, #24]
 800baba:	b913      	cbnz	r3, 800bac2 <__swsetup_r+0x16>
 800babc:	4628      	mov	r0, r5
 800babe:	f001 f827 	bl	800cb10 <__sinit>
 800bac2:	4b2e      	ldr	r3, [pc, #184]	; (800bb7c <__swsetup_r+0xd0>)
 800bac4:	429c      	cmp	r4, r3
 800bac6:	d10f      	bne.n	800bae8 <__swsetup_r+0x3c>
 800bac8:	686c      	ldr	r4, [r5, #4]
 800baca:	89a3      	ldrh	r3, [r4, #12]
 800bacc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bad0:	0719      	lsls	r1, r3, #28
 800bad2:	d42c      	bmi.n	800bb2e <__swsetup_r+0x82>
 800bad4:	06dd      	lsls	r5, r3, #27
 800bad6:	d411      	bmi.n	800bafc <__swsetup_r+0x50>
 800bad8:	2309      	movs	r3, #9
 800bada:	6033      	str	r3, [r6, #0]
 800badc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bae0:	81a3      	strh	r3, [r4, #12]
 800bae2:	f04f 30ff 	mov.w	r0, #4294967295
 800bae6:	e03e      	b.n	800bb66 <__swsetup_r+0xba>
 800bae8:	4b25      	ldr	r3, [pc, #148]	; (800bb80 <__swsetup_r+0xd4>)
 800baea:	429c      	cmp	r4, r3
 800baec:	d101      	bne.n	800baf2 <__swsetup_r+0x46>
 800baee:	68ac      	ldr	r4, [r5, #8]
 800baf0:	e7eb      	b.n	800baca <__swsetup_r+0x1e>
 800baf2:	4b24      	ldr	r3, [pc, #144]	; (800bb84 <__swsetup_r+0xd8>)
 800baf4:	429c      	cmp	r4, r3
 800baf6:	bf08      	it	eq
 800baf8:	68ec      	ldreq	r4, [r5, #12]
 800bafa:	e7e6      	b.n	800baca <__swsetup_r+0x1e>
 800bafc:	0758      	lsls	r0, r3, #29
 800bafe:	d512      	bpl.n	800bb26 <__swsetup_r+0x7a>
 800bb00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb02:	b141      	cbz	r1, 800bb16 <__swsetup_r+0x6a>
 800bb04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb08:	4299      	cmp	r1, r3
 800bb0a:	d002      	beq.n	800bb12 <__swsetup_r+0x66>
 800bb0c:	4630      	mov	r0, r6
 800bb0e:	f7fe f9eb 	bl	8009ee8 <_free_r>
 800bb12:	2300      	movs	r3, #0
 800bb14:	6363      	str	r3, [r4, #52]	; 0x34
 800bb16:	89a3      	ldrh	r3, [r4, #12]
 800bb18:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bb1c:	81a3      	strh	r3, [r4, #12]
 800bb1e:	2300      	movs	r3, #0
 800bb20:	6063      	str	r3, [r4, #4]
 800bb22:	6923      	ldr	r3, [r4, #16]
 800bb24:	6023      	str	r3, [r4, #0]
 800bb26:	89a3      	ldrh	r3, [r4, #12]
 800bb28:	f043 0308 	orr.w	r3, r3, #8
 800bb2c:	81a3      	strh	r3, [r4, #12]
 800bb2e:	6923      	ldr	r3, [r4, #16]
 800bb30:	b94b      	cbnz	r3, 800bb46 <__swsetup_r+0x9a>
 800bb32:	89a3      	ldrh	r3, [r4, #12]
 800bb34:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bb38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb3c:	d003      	beq.n	800bb46 <__swsetup_r+0x9a>
 800bb3e:	4621      	mov	r1, r4
 800bb40:	4630      	mov	r0, r6
 800bb42:	f001 fc43 	bl	800d3cc <__smakebuf_r>
 800bb46:	89a0      	ldrh	r0, [r4, #12]
 800bb48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bb4c:	f010 0301 	ands.w	r3, r0, #1
 800bb50:	d00a      	beq.n	800bb68 <__swsetup_r+0xbc>
 800bb52:	2300      	movs	r3, #0
 800bb54:	60a3      	str	r3, [r4, #8]
 800bb56:	6963      	ldr	r3, [r4, #20]
 800bb58:	425b      	negs	r3, r3
 800bb5a:	61a3      	str	r3, [r4, #24]
 800bb5c:	6923      	ldr	r3, [r4, #16]
 800bb5e:	b943      	cbnz	r3, 800bb72 <__swsetup_r+0xc6>
 800bb60:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb64:	d1ba      	bne.n	800badc <__swsetup_r+0x30>
 800bb66:	bd70      	pop	{r4, r5, r6, pc}
 800bb68:	0781      	lsls	r1, r0, #30
 800bb6a:	bf58      	it	pl
 800bb6c:	6963      	ldrpl	r3, [r4, #20]
 800bb6e:	60a3      	str	r3, [r4, #8]
 800bb70:	e7f4      	b.n	800bb5c <__swsetup_r+0xb0>
 800bb72:	2000      	movs	r0, #0
 800bb74:	e7f7      	b.n	800bb66 <__swsetup_r+0xba>
 800bb76:	bf00      	nop
 800bb78:	200000c4 	.word	0x200000c4
 800bb7c:	0800fb9c 	.word	0x0800fb9c
 800bb80:	0800fbbc 	.word	0x0800fbbc
 800bb84:	0800fb7c 	.word	0x0800fb7c

0800bb88 <__assert_func>:
 800bb88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb8a:	4614      	mov	r4, r2
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	4b09      	ldr	r3, [pc, #36]	; (800bbb4 <__assert_func+0x2c>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4605      	mov	r5, r0
 800bb94:	68d8      	ldr	r0, [r3, #12]
 800bb96:	b14c      	cbz	r4, 800bbac <__assert_func+0x24>
 800bb98:	4b07      	ldr	r3, [pc, #28]	; (800bbb8 <__assert_func+0x30>)
 800bb9a:	9100      	str	r1, [sp, #0]
 800bb9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bba0:	4906      	ldr	r1, [pc, #24]	; (800bbbc <__assert_func+0x34>)
 800bba2:	462b      	mov	r3, r5
 800bba4:	f001 f832 	bl	800cc0c <fiprintf>
 800bba8:	f002 fc29 	bl	800e3fe <abort>
 800bbac:	4b04      	ldr	r3, [pc, #16]	; (800bbc0 <__assert_func+0x38>)
 800bbae:	461c      	mov	r4, r3
 800bbb0:	e7f3      	b.n	800bb9a <__assert_func+0x12>
 800bbb2:	bf00      	nop
 800bbb4:	200000c4 	.word	0x200000c4
 800bbb8:	0800fab0 	.word	0x0800fab0
 800bbbc:	0800fabd 	.word	0x0800fabd
 800bbc0:	0800faeb 	.word	0x0800faeb

0800bbc4 <_close_r>:
 800bbc4:	b538      	push	{r3, r4, r5, lr}
 800bbc6:	4d06      	ldr	r5, [pc, #24]	; (800bbe0 <_close_r+0x1c>)
 800bbc8:	2300      	movs	r3, #0
 800bbca:	4604      	mov	r4, r0
 800bbcc:	4608      	mov	r0, r1
 800bbce:	602b      	str	r3, [r5, #0]
 800bbd0:	f7f9 fc1b 	bl	800540a <_close>
 800bbd4:	1c43      	adds	r3, r0, #1
 800bbd6:	d102      	bne.n	800bbde <_close_r+0x1a>
 800bbd8:	682b      	ldr	r3, [r5, #0]
 800bbda:	b103      	cbz	r3, 800bbde <_close_r+0x1a>
 800bbdc:	6023      	str	r3, [r4, #0]
 800bbde:	bd38      	pop	{r3, r4, r5, pc}
 800bbe0:	20002e78 	.word	0x20002e78

0800bbe4 <quorem>:
 800bbe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe8:	6903      	ldr	r3, [r0, #16]
 800bbea:	690c      	ldr	r4, [r1, #16]
 800bbec:	42a3      	cmp	r3, r4
 800bbee:	4607      	mov	r7, r0
 800bbf0:	f2c0 8081 	blt.w	800bcf6 <quorem+0x112>
 800bbf4:	3c01      	subs	r4, #1
 800bbf6:	f101 0814 	add.w	r8, r1, #20
 800bbfa:	f100 0514 	add.w	r5, r0, #20
 800bbfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc02:	9301      	str	r3, [sp, #4]
 800bc04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bc14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc18:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc1c:	d331      	bcc.n	800bc82 <quorem+0x9e>
 800bc1e:	f04f 0e00 	mov.w	lr, #0
 800bc22:	4640      	mov	r0, r8
 800bc24:	46ac      	mov	ip, r5
 800bc26:	46f2      	mov	sl, lr
 800bc28:	f850 2b04 	ldr.w	r2, [r0], #4
 800bc2c:	b293      	uxth	r3, r2
 800bc2e:	fb06 e303 	mla	r3, r6, r3, lr
 800bc32:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	ebaa 0303 	sub.w	r3, sl, r3
 800bc3c:	f8dc a000 	ldr.w	sl, [ip]
 800bc40:	0c12      	lsrs	r2, r2, #16
 800bc42:	fa13 f38a 	uxtah	r3, r3, sl
 800bc46:	fb06 e202 	mla	r2, r6, r2, lr
 800bc4a:	9300      	str	r3, [sp, #0]
 800bc4c:	9b00      	ldr	r3, [sp, #0]
 800bc4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bc52:	b292      	uxth	r2, r2
 800bc54:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bc58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc5c:	f8bd 3000 	ldrh.w	r3, [sp]
 800bc60:	4581      	cmp	r9, r0
 800bc62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc66:	f84c 3b04 	str.w	r3, [ip], #4
 800bc6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bc6e:	d2db      	bcs.n	800bc28 <quorem+0x44>
 800bc70:	f855 300b 	ldr.w	r3, [r5, fp]
 800bc74:	b92b      	cbnz	r3, 800bc82 <quorem+0x9e>
 800bc76:	9b01      	ldr	r3, [sp, #4]
 800bc78:	3b04      	subs	r3, #4
 800bc7a:	429d      	cmp	r5, r3
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	d32e      	bcc.n	800bcde <quorem+0xfa>
 800bc80:	613c      	str	r4, [r7, #16]
 800bc82:	4638      	mov	r0, r7
 800bc84:	f001 fecc 	bl	800da20 <__mcmp>
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	db24      	blt.n	800bcd6 <quorem+0xf2>
 800bc8c:	3601      	adds	r6, #1
 800bc8e:	4628      	mov	r0, r5
 800bc90:	f04f 0c00 	mov.w	ip, #0
 800bc94:	f858 2b04 	ldr.w	r2, [r8], #4
 800bc98:	f8d0 e000 	ldr.w	lr, [r0]
 800bc9c:	b293      	uxth	r3, r2
 800bc9e:	ebac 0303 	sub.w	r3, ip, r3
 800bca2:	0c12      	lsrs	r2, r2, #16
 800bca4:	fa13 f38e 	uxtah	r3, r3, lr
 800bca8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bcac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcb6:	45c1      	cmp	r9, r8
 800bcb8:	f840 3b04 	str.w	r3, [r0], #4
 800bcbc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bcc0:	d2e8      	bcs.n	800bc94 <quorem+0xb0>
 800bcc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcca:	b922      	cbnz	r2, 800bcd6 <quorem+0xf2>
 800bccc:	3b04      	subs	r3, #4
 800bcce:	429d      	cmp	r5, r3
 800bcd0:	461a      	mov	r2, r3
 800bcd2:	d30a      	bcc.n	800bcea <quorem+0x106>
 800bcd4:	613c      	str	r4, [r7, #16]
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	b003      	add	sp, #12
 800bcda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcde:	6812      	ldr	r2, [r2, #0]
 800bce0:	3b04      	subs	r3, #4
 800bce2:	2a00      	cmp	r2, #0
 800bce4:	d1cc      	bne.n	800bc80 <quorem+0x9c>
 800bce6:	3c01      	subs	r4, #1
 800bce8:	e7c7      	b.n	800bc7a <quorem+0x96>
 800bcea:	6812      	ldr	r2, [r2, #0]
 800bcec:	3b04      	subs	r3, #4
 800bcee:	2a00      	cmp	r2, #0
 800bcf0:	d1f0      	bne.n	800bcd4 <quorem+0xf0>
 800bcf2:	3c01      	subs	r4, #1
 800bcf4:	e7eb      	b.n	800bcce <quorem+0xea>
 800bcf6:	2000      	movs	r0, #0
 800bcf8:	e7ee      	b.n	800bcd8 <quorem+0xf4>
 800bcfa:	0000      	movs	r0, r0
 800bcfc:	0000      	movs	r0, r0
	...

0800bd00 <_dtoa_r>:
 800bd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd04:	ed2d 8b04 	vpush	{d8-d9}
 800bd08:	ec57 6b10 	vmov	r6, r7, d0
 800bd0c:	b093      	sub	sp, #76	; 0x4c
 800bd0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bd10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bd14:	9106      	str	r1, [sp, #24]
 800bd16:	ee10 aa10 	vmov	sl, s0
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	9209      	str	r2, [sp, #36]	; 0x24
 800bd1e:	930c      	str	r3, [sp, #48]	; 0x30
 800bd20:	46bb      	mov	fp, r7
 800bd22:	b975      	cbnz	r5, 800bd42 <_dtoa_r+0x42>
 800bd24:	2010      	movs	r0, #16
 800bd26:	f7fe f8c1 	bl	8009eac <malloc>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	6260      	str	r0, [r4, #36]	; 0x24
 800bd2e:	b920      	cbnz	r0, 800bd3a <_dtoa_r+0x3a>
 800bd30:	4ba7      	ldr	r3, [pc, #668]	; (800bfd0 <_dtoa_r+0x2d0>)
 800bd32:	21ea      	movs	r1, #234	; 0xea
 800bd34:	48a7      	ldr	r0, [pc, #668]	; (800bfd4 <_dtoa_r+0x2d4>)
 800bd36:	f7ff ff27 	bl	800bb88 <__assert_func>
 800bd3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bd3e:	6005      	str	r5, [r0, #0]
 800bd40:	60c5      	str	r5, [r0, #12]
 800bd42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd44:	6819      	ldr	r1, [r3, #0]
 800bd46:	b151      	cbz	r1, 800bd5e <_dtoa_r+0x5e>
 800bd48:	685a      	ldr	r2, [r3, #4]
 800bd4a:	604a      	str	r2, [r1, #4]
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	4093      	lsls	r3, r2
 800bd50:	608b      	str	r3, [r1, #8]
 800bd52:	4620      	mov	r0, r4
 800bd54:	f001 fbd8 	bl	800d508 <_Bfree>
 800bd58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	601a      	str	r2, [r3, #0]
 800bd5e:	1e3b      	subs	r3, r7, #0
 800bd60:	bfaa      	itet	ge
 800bd62:	2300      	movge	r3, #0
 800bd64:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bd68:	f8c8 3000 	strge.w	r3, [r8]
 800bd6c:	4b9a      	ldr	r3, [pc, #616]	; (800bfd8 <_dtoa_r+0x2d8>)
 800bd6e:	bfbc      	itt	lt
 800bd70:	2201      	movlt	r2, #1
 800bd72:	f8c8 2000 	strlt.w	r2, [r8]
 800bd76:	ea33 030b 	bics.w	r3, r3, fp
 800bd7a:	d11b      	bne.n	800bdb4 <_dtoa_r+0xb4>
 800bd7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd7e:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd82:	6013      	str	r3, [r2, #0]
 800bd84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd88:	4333      	orrs	r3, r6
 800bd8a:	f000 8592 	beq.w	800c8b2 <_dtoa_r+0xbb2>
 800bd8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd90:	b963      	cbnz	r3, 800bdac <_dtoa_r+0xac>
 800bd92:	4b92      	ldr	r3, [pc, #584]	; (800bfdc <_dtoa_r+0x2dc>)
 800bd94:	e022      	b.n	800bddc <_dtoa_r+0xdc>
 800bd96:	4b92      	ldr	r3, [pc, #584]	; (800bfe0 <_dtoa_r+0x2e0>)
 800bd98:	9301      	str	r3, [sp, #4]
 800bd9a:	3308      	adds	r3, #8
 800bd9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bd9e:	6013      	str	r3, [r2, #0]
 800bda0:	9801      	ldr	r0, [sp, #4]
 800bda2:	b013      	add	sp, #76	; 0x4c
 800bda4:	ecbd 8b04 	vpop	{d8-d9}
 800bda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdac:	4b8b      	ldr	r3, [pc, #556]	; (800bfdc <_dtoa_r+0x2dc>)
 800bdae:	9301      	str	r3, [sp, #4]
 800bdb0:	3303      	adds	r3, #3
 800bdb2:	e7f3      	b.n	800bd9c <_dtoa_r+0x9c>
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	4650      	mov	r0, sl
 800bdba:	4659      	mov	r1, fp
 800bdbc:	f7f4 fe8c 	bl	8000ad8 <__aeabi_dcmpeq>
 800bdc0:	ec4b ab19 	vmov	d9, sl, fp
 800bdc4:	4680      	mov	r8, r0
 800bdc6:	b158      	cbz	r0, 800bde0 <_dtoa_r+0xe0>
 800bdc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdca:	2301      	movs	r3, #1
 800bdcc:	6013      	str	r3, [r2, #0]
 800bdce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	f000 856b 	beq.w	800c8ac <_dtoa_r+0xbac>
 800bdd6:	4883      	ldr	r0, [pc, #524]	; (800bfe4 <_dtoa_r+0x2e4>)
 800bdd8:	6018      	str	r0, [r3, #0]
 800bdda:	1e43      	subs	r3, r0, #1
 800bddc:	9301      	str	r3, [sp, #4]
 800bdde:	e7df      	b.n	800bda0 <_dtoa_r+0xa0>
 800bde0:	ec4b ab10 	vmov	d0, sl, fp
 800bde4:	aa10      	add	r2, sp, #64	; 0x40
 800bde6:	a911      	add	r1, sp, #68	; 0x44
 800bde8:	4620      	mov	r0, r4
 800bdea:	f001 ff3b 	bl	800dc64 <__d2b>
 800bdee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bdf2:	ee08 0a10 	vmov	s16, r0
 800bdf6:	2d00      	cmp	r5, #0
 800bdf8:	f000 8084 	beq.w	800bf04 <_dtoa_r+0x204>
 800bdfc:	ee19 3a90 	vmov	r3, s19
 800be00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be04:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800be08:	4656      	mov	r6, sl
 800be0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800be0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800be12:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800be16:	4b74      	ldr	r3, [pc, #464]	; (800bfe8 <_dtoa_r+0x2e8>)
 800be18:	2200      	movs	r2, #0
 800be1a:	4630      	mov	r0, r6
 800be1c:	4639      	mov	r1, r7
 800be1e:	f7f4 fa3b 	bl	8000298 <__aeabi_dsub>
 800be22:	a365      	add	r3, pc, #404	; (adr r3, 800bfb8 <_dtoa_r+0x2b8>)
 800be24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be28:	f7f4 fbee 	bl	8000608 <__aeabi_dmul>
 800be2c:	a364      	add	r3, pc, #400	; (adr r3, 800bfc0 <_dtoa_r+0x2c0>)
 800be2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be32:	f7f4 fa33 	bl	800029c <__adddf3>
 800be36:	4606      	mov	r6, r0
 800be38:	4628      	mov	r0, r5
 800be3a:	460f      	mov	r7, r1
 800be3c:	f7f4 fb7a 	bl	8000534 <__aeabi_i2d>
 800be40:	a361      	add	r3, pc, #388	; (adr r3, 800bfc8 <_dtoa_r+0x2c8>)
 800be42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be46:	f7f4 fbdf 	bl	8000608 <__aeabi_dmul>
 800be4a:	4602      	mov	r2, r0
 800be4c:	460b      	mov	r3, r1
 800be4e:	4630      	mov	r0, r6
 800be50:	4639      	mov	r1, r7
 800be52:	f7f4 fa23 	bl	800029c <__adddf3>
 800be56:	4606      	mov	r6, r0
 800be58:	460f      	mov	r7, r1
 800be5a:	f7f4 fe85 	bl	8000b68 <__aeabi_d2iz>
 800be5e:	2200      	movs	r2, #0
 800be60:	9000      	str	r0, [sp, #0]
 800be62:	2300      	movs	r3, #0
 800be64:	4630      	mov	r0, r6
 800be66:	4639      	mov	r1, r7
 800be68:	f7f4 fe40 	bl	8000aec <__aeabi_dcmplt>
 800be6c:	b150      	cbz	r0, 800be84 <_dtoa_r+0x184>
 800be6e:	9800      	ldr	r0, [sp, #0]
 800be70:	f7f4 fb60 	bl	8000534 <__aeabi_i2d>
 800be74:	4632      	mov	r2, r6
 800be76:	463b      	mov	r3, r7
 800be78:	f7f4 fe2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800be7c:	b910      	cbnz	r0, 800be84 <_dtoa_r+0x184>
 800be7e:	9b00      	ldr	r3, [sp, #0]
 800be80:	3b01      	subs	r3, #1
 800be82:	9300      	str	r3, [sp, #0]
 800be84:	9b00      	ldr	r3, [sp, #0]
 800be86:	2b16      	cmp	r3, #22
 800be88:	d85a      	bhi.n	800bf40 <_dtoa_r+0x240>
 800be8a:	9a00      	ldr	r2, [sp, #0]
 800be8c:	4b57      	ldr	r3, [pc, #348]	; (800bfec <_dtoa_r+0x2ec>)
 800be8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be96:	ec51 0b19 	vmov	r0, r1, d9
 800be9a:	f7f4 fe27 	bl	8000aec <__aeabi_dcmplt>
 800be9e:	2800      	cmp	r0, #0
 800bea0:	d050      	beq.n	800bf44 <_dtoa_r+0x244>
 800bea2:	9b00      	ldr	r3, [sp, #0]
 800bea4:	3b01      	subs	r3, #1
 800bea6:	9300      	str	r3, [sp, #0]
 800bea8:	2300      	movs	r3, #0
 800beaa:	930b      	str	r3, [sp, #44]	; 0x2c
 800beac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800beae:	1b5d      	subs	r5, r3, r5
 800beb0:	1e6b      	subs	r3, r5, #1
 800beb2:	9305      	str	r3, [sp, #20]
 800beb4:	bf45      	ittet	mi
 800beb6:	f1c5 0301 	rsbmi	r3, r5, #1
 800beba:	9304      	strmi	r3, [sp, #16]
 800bebc:	2300      	movpl	r3, #0
 800bebe:	2300      	movmi	r3, #0
 800bec0:	bf4c      	ite	mi
 800bec2:	9305      	strmi	r3, [sp, #20]
 800bec4:	9304      	strpl	r3, [sp, #16]
 800bec6:	9b00      	ldr	r3, [sp, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	db3d      	blt.n	800bf48 <_dtoa_r+0x248>
 800becc:	9b05      	ldr	r3, [sp, #20]
 800bece:	9a00      	ldr	r2, [sp, #0]
 800bed0:	920a      	str	r2, [sp, #40]	; 0x28
 800bed2:	4413      	add	r3, r2
 800bed4:	9305      	str	r3, [sp, #20]
 800bed6:	2300      	movs	r3, #0
 800bed8:	9307      	str	r3, [sp, #28]
 800beda:	9b06      	ldr	r3, [sp, #24]
 800bedc:	2b09      	cmp	r3, #9
 800bede:	f200 8089 	bhi.w	800bff4 <_dtoa_r+0x2f4>
 800bee2:	2b05      	cmp	r3, #5
 800bee4:	bfc4      	itt	gt
 800bee6:	3b04      	subgt	r3, #4
 800bee8:	9306      	strgt	r3, [sp, #24]
 800beea:	9b06      	ldr	r3, [sp, #24]
 800beec:	f1a3 0302 	sub.w	r3, r3, #2
 800bef0:	bfcc      	ite	gt
 800bef2:	2500      	movgt	r5, #0
 800bef4:	2501      	movle	r5, #1
 800bef6:	2b03      	cmp	r3, #3
 800bef8:	f200 8087 	bhi.w	800c00a <_dtoa_r+0x30a>
 800befc:	e8df f003 	tbb	[pc, r3]
 800bf00:	59383a2d 	.word	0x59383a2d
 800bf04:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bf08:	441d      	add	r5, r3
 800bf0a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bf0e:	2b20      	cmp	r3, #32
 800bf10:	bfc1      	itttt	gt
 800bf12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bf16:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bf1a:	fa0b f303 	lslgt.w	r3, fp, r3
 800bf1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bf22:	bfda      	itte	le
 800bf24:	f1c3 0320 	rsble	r3, r3, #32
 800bf28:	fa06 f003 	lslle.w	r0, r6, r3
 800bf2c:	4318      	orrgt	r0, r3
 800bf2e:	f7f4 faf1 	bl	8000514 <__aeabi_ui2d>
 800bf32:	2301      	movs	r3, #1
 800bf34:	4606      	mov	r6, r0
 800bf36:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bf3a:	3d01      	subs	r5, #1
 800bf3c:	930e      	str	r3, [sp, #56]	; 0x38
 800bf3e:	e76a      	b.n	800be16 <_dtoa_r+0x116>
 800bf40:	2301      	movs	r3, #1
 800bf42:	e7b2      	b.n	800beaa <_dtoa_r+0x1aa>
 800bf44:	900b      	str	r0, [sp, #44]	; 0x2c
 800bf46:	e7b1      	b.n	800beac <_dtoa_r+0x1ac>
 800bf48:	9b04      	ldr	r3, [sp, #16]
 800bf4a:	9a00      	ldr	r2, [sp, #0]
 800bf4c:	1a9b      	subs	r3, r3, r2
 800bf4e:	9304      	str	r3, [sp, #16]
 800bf50:	4253      	negs	r3, r2
 800bf52:	9307      	str	r3, [sp, #28]
 800bf54:	2300      	movs	r3, #0
 800bf56:	930a      	str	r3, [sp, #40]	; 0x28
 800bf58:	e7bf      	b.n	800beda <_dtoa_r+0x1da>
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	9308      	str	r3, [sp, #32]
 800bf5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	dc55      	bgt.n	800c010 <_dtoa_r+0x310>
 800bf64:	2301      	movs	r3, #1
 800bf66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	9209      	str	r2, [sp, #36]	; 0x24
 800bf6e:	e00c      	b.n	800bf8a <_dtoa_r+0x28a>
 800bf70:	2301      	movs	r3, #1
 800bf72:	e7f3      	b.n	800bf5c <_dtoa_r+0x25c>
 800bf74:	2300      	movs	r3, #0
 800bf76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf78:	9308      	str	r3, [sp, #32]
 800bf7a:	9b00      	ldr	r3, [sp, #0]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	9302      	str	r3, [sp, #8]
 800bf80:	3301      	adds	r3, #1
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	9303      	str	r3, [sp, #12]
 800bf86:	bfb8      	it	lt
 800bf88:	2301      	movlt	r3, #1
 800bf8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	6042      	str	r2, [r0, #4]
 800bf90:	2204      	movs	r2, #4
 800bf92:	f102 0614 	add.w	r6, r2, #20
 800bf96:	429e      	cmp	r6, r3
 800bf98:	6841      	ldr	r1, [r0, #4]
 800bf9a:	d93d      	bls.n	800c018 <_dtoa_r+0x318>
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	f001 fa73 	bl	800d488 <_Balloc>
 800bfa2:	9001      	str	r0, [sp, #4]
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	d13b      	bne.n	800c020 <_dtoa_r+0x320>
 800bfa8:	4b11      	ldr	r3, [pc, #68]	; (800bff0 <_dtoa_r+0x2f0>)
 800bfaa:	4602      	mov	r2, r0
 800bfac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bfb0:	e6c0      	b.n	800bd34 <_dtoa_r+0x34>
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	e7df      	b.n	800bf76 <_dtoa_r+0x276>
 800bfb6:	bf00      	nop
 800bfb8:	636f4361 	.word	0x636f4361
 800bfbc:	3fd287a7 	.word	0x3fd287a7
 800bfc0:	8b60c8b3 	.word	0x8b60c8b3
 800bfc4:	3fc68a28 	.word	0x3fc68a28
 800bfc8:	509f79fb 	.word	0x509f79fb
 800bfcc:	3fd34413 	.word	0x3fd34413
 800bfd0:	0800faf9 	.word	0x0800faf9
 800bfd4:	0800fb10 	.word	0x0800fb10
 800bfd8:	7ff00000 	.word	0x7ff00000
 800bfdc:	0800faf5 	.word	0x0800faf5
 800bfe0:	0800faec 	.word	0x0800faec
 800bfe4:	0800fa39 	.word	0x0800fa39
 800bfe8:	3ff80000 	.word	0x3ff80000
 800bfec:	0800fce0 	.word	0x0800fce0
 800bff0:	0800fb6b 	.word	0x0800fb6b
 800bff4:	2501      	movs	r5, #1
 800bff6:	2300      	movs	r3, #0
 800bff8:	9306      	str	r3, [sp, #24]
 800bffa:	9508      	str	r5, [sp, #32]
 800bffc:	f04f 33ff 	mov.w	r3, #4294967295
 800c000:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c004:	2200      	movs	r2, #0
 800c006:	2312      	movs	r3, #18
 800c008:	e7b0      	b.n	800bf6c <_dtoa_r+0x26c>
 800c00a:	2301      	movs	r3, #1
 800c00c:	9308      	str	r3, [sp, #32]
 800c00e:	e7f5      	b.n	800bffc <_dtoa_r+0x2fc>
 800c010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c012:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c016:	e7b8      	b.n	800bf8a <_dtoa_r+0x28a>
 800c018:	3101      	adds	r1, #1
 800c01a:	6041      	str	r1, [r0, #4]
 800c01c:	0052      	lsls	r2, r2, #1
 800c01e:	e7b8      	b.n	800bf92 <_dtoa_r+0x292>
 800c020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c022:	9a01      	ldr	r2, [sp, #4]
 800c024:	601a      	str	r2, [r3, #0]
 800c026:	9b03      	ldr	r3, [sp, #12]
 800c028:	2b0e      	cmp	r3, #14
 800c02a:	f200 809d 	bhi.w	800c168 <_dtoa_r+0x468>
 800c02e:	2d00      	cmp	r5, #0
 800c030:	f000 809a 	beq.w	800c168 <_dtoa_r+0x468>
 800c034:	9b00      	ldr	r3, [sp, #0]
 800c036:	2b00      	cmp	r3, #0
 800c038:	dd32      	ble.n	800c0a0 <_dtoa_r+0x3a0>
 800c03a:	4ab7      	ldr	r2, [pc, #732]	; (800c318 <_dtoa_r+0x618>)
 800c03c:	f003 030f 	and.w	r3, r3, #15
 800c040:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c044:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c048:	9b00      	ldr	r3, [sp, #0]
 800c04a:	05d8      	lsls	r0, r3, #23
 800c04c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c050:	d516      	bpl.n	800c080 <_dtoa_r+0x380>
 800c052:	4bb2      	ldr	r3, [pc, #712]	; (800c31c <_dtoa_r+0x61c>)
 800c054:	ec51 0b19 	vmov	r0, r1, d9
 800c058:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c05c:	f7f4 fbfe 	bl	800085c <__aeabi_ddiv>
 800c060:	f007 070f 	and.w	r7, r7, #15
 800c064:	4682      	mov	sl, r0
 800c066:	468b      	mov	fp, r1
 800c068:	2503      	movs	r5, #3
 800c06a:	4eac      	ldr	r6, [pc, #688]	; (800c31c <_dtoa_r+0x61c>)
 800c06c:	b957      	cbnz	r7, 800c084 <_dtoa_r+0x384>
 800c06e:	4642      	mov	r2, r8
 800c070:	464b      	mov	r3, r9
 800c072:	4650      	mov	r0, sl
 800c074:	4659      	mov	r1, fp
 800c076:	f7f4 fbf1 	bl	800085c <__aeabi_ddiv>
 800c07a:	4682      	mov	sl, r0
 800c07c:	468b      	mov	fp, r1
 800c07e:	e028      	b.n	800c0d2 <_dtoa_r+0x3d2>
 800c080:	2502      	movs	r5, #2
 800c082:	e7f2      	b.n	800c06a <_dtoa_r+0x36a>
 800c084:	07f9      	lsls	r1, r7, #31
 800c086:	d508      	bpl.n	800c09a <_dtoa_r+0x39a>
 800c088:	4640      	mov	r0, r8
 800c08a:	4649      	mov	r1, r9
 800c08c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c090:	f7f4 faba 	bl	8000608 <__aeabi_dmul>
 800c094:	3501      	adds	r5, #1
 800c096:	4680      	mov	r8, r0
 800c098:	4689      	mov	r9, r1
 800c09a:	107f      	asrs	r7, r7, #1
 800c09c:	3608      	adds	r6, #8
 800c09e:	e7e5      	b.n	800c06c <_dtoa_r+0x36c>
 800c0a0:	f000 809b 	beq.w	800c1da <_dtoa_r+0x4da>
 800c0a4:	9b00      	ldr	r3, [sp, #0]
 800c0a6:	4f9d      	ldr	r7, [pc, #628]	; (800c31c <_dtoa_r+0x61c>)
 800c0a8:	425e      	negs	r6, r3
 800c0aa:	4b9b      	ldr	r3, [pc, #620]	; (800c318 <_dtoa_r+0x618>)
 800c0ac:	f006 020f 	and.w	r2, r6, #15
 800c0b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b8:	ec51 0b19 	vmov	r0, r1, d9
 800c0bc:	f7f4 faa4 	bl	8000608 <__aeabi_dmul>
 800c0c0:	1136      	asrs	r6, r6, #4
 800c0c2:	4682      	mov	sl, r0
 800c0c4:	468b      	mov	fp, r1
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	2502      	movs	r5, #2
 800c0ca:	2e00      	cmp	r6, #0
 800c0cc:	d17a      	bne.n	800c1c4 <_dtoa_r+0x4c4>
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d1d3      	bne.n	800c07a <_dtoa_r+0x37a>
 800c0d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	f000 8082 	beq.w	800c1de <_dtoa_r+0x4de>
 800c0da:	4b91      	ldr	r3, [pc, #580]	; (800c320 <_dtoa_r+0x620>)
 800c0dc:	2200      	movs	r2, #0
 800c0de:	4650      	mov	r0, sl
 800c0e0:	4659      	mov	r1, fp
 800c0e2:	f7f4 fd03 	bl	8000aec <__aeabi_dcmplt>
 800c0e6:	2800      	cmp	r0, #0
 800c0e8:	d079      	beq.n	800c1de <_dtoa_r+0x4de>
 800c0ea:	9b03      	ldr	r3, [sp, #12]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d076      	beq.n	800c1de <_dtoa_r+0x4de>
 800c0f0:	9b02      	ldr	r3, [sp, #8]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	dd36      	ble.n	800c164 <_dtoa_r+0x464>
 800c0f6:	9b00      	ldr	r3, [sp, #0]
 800c0f8:	4650      	mov	r0, sl
 800c0fa:	4659      	mov	r1, fp
 800c0fc:	1e5f      	subs	r7, r3, #1
 800c0fe:	2200      	movs	r2, #0
 800c100:	4b88      	ldr	r3, [pc, #544]	; (800c324 <_dtoa_r+0x624>)
 800c102:	f7f4 fa81 	bl	8000608 <__aeabi_dmul>
 800c106:	9e02      	ldr	r6, [sp, #8]
 800c108:	4682      	mov	sl, r0
 800c10a:	468b      	mov	fp, r1
 800c10c:	3501      	adds	r5, #1
 800c10e:	4628      	mov	r0, r5
 800c110:	f7f4 fa10 	bl	8000534 <__aeabi_i2d>
 800c114:	4652      	mov	r2, sl
 800c116:	465b      	mov	r3, fp
 800c118:	f7f4 fa76 	bl	8000608 <__aeabi_dmul>
 800c11c:	4b82      	ldr	r3, [pc, #520]	; (800c328 <_dtoa_r+0x628>)
 800c11e:	2200      	movs	r2, #0
 800c120:	f7f4 f8bc 	bl	800029c <__adddf3>
 800c124:	46d0      	mov	r8, sl
 800c126:	46d9      	mov	r9, fp
 800c128:	4682      	mov	sl, r0
 800c12a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c12e:	2e00      	cmp	r6, #0
 800c130:	d158      	bne.n	800c1e4 <_dtoa_r+0x4e4>
 800c132:	4b7e      	ldr	r3, [pc, #504]	; (800c32c <_dtoa_r+0x62c>)
 800c134:	2200      	movs	r2, #0
 800c136:	4640      	mov	r0, r8
 800c138:	4649      	mov	r1, r9
 800c13a:	f7f4 f8ad 	bl	8000298 <__aeabi_dsub>
 800c13e:	4652      	mov	r2, sl
 800c140:	465b      	mov	r3, fp
 800c142:	4680      	mov	r8, r0
 800c144:	4689      	mov	r9, r1
 800c146:	f7f4 fcef 	bl	8000b28 <__aeabi_dcmpgt>
 800c14a:	2800      	cmp	r0, #0
 800c14c:	f040 8295 	bne.w	800c67a <_dtoa_r+0x97a>
 800c150:	4652      	mov	r2, sl
 800c152:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c156:	4640      	mov	r0, r8
 800c158:	4649      	mov	r1, r9
 800c15a:	f7f4 fcc7 	bl	8000aec <__aeabi_dcmplt>
 800c15e:	2800      	cmp	r0, #0
 800c160:	f040 8289 	bne.w	800c676 <_dtoa_r+0x976>
 800c164:	ec5b ab19 	vmov	sl, fp, d9
 800c168:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	f2c0 8148 	blt.w	800c400 <_dtoa_r+0x700>
 800c170:	9a00      	ldr	r2, [sp, #0]
 800c172:	2a0e      	cmp	r2, #14
 800c174:	f300 8144 	bgt.w	800c400 <_dtoa_r+0x700>
 800c178:	4b67      	ldr	r3, [pc, #412]	; (800c318 <_dtoa_r+0x618>)
 800c17a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c17e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c184:	2b00      	cmp	r3, #0
 800c186:	f280 80d5 	bge.w	800c334 <_dtoa_r+0x634>
 800c18a:	9b03      	ldr	r3, [sp, #12]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	f300 80d1 	bgt.w	800c334 <_dtoa_r+0x634>
 800c192:	f040 826f 	bne.w	800c674 <_dtoa_r+0x974>
 800c196:	4b65      	ldr	r3, [pc, #404]	; (800c32c <_dtoa_r+0x62c>)
 800c198:	2200      	movs	r2, #0
 800c19a:	4640      	mov	r0, r8
 800c19c:	4649      	mov	r1, r9
 800c19e:	f7f4 fa33 	bl	8000608 <__aeabi_dmul>
 800c1a2:	4652      	mov	r2, sl
 800c1a4:	465b      	mov	r3, fp
 800c1a6:	f7f4 fcb5 	bl	8000b14 <__aeabi_dcmpge>
 800c1aa:	9e03      	ldr	r6, [sp, #12]
 800c1ac:	4637      	mov	r7, r6
 800c1ae:	2800      	cmp	r0, #0
 800c1b0:	f040 8245 	bne.w	800c63e <_dtoa_r+0x93e>
 800c1b4:	9d01      	ldr	r5, [sp, #4]
 800c1b6:	2331      	movs	r3, #49	; 0x31
 800c1b8:	f805 3b01 	strb.w	r3, [r5], #1
 800c1bc:	9b00      	ldr	r3, [sp, #0]
 800c1be:	3301      	adds	r3, #1
 800c1c0:	9300      	str	r3, [sp, #0]
 800c1c2:	e240      	b.n	800c646 <_dtoa_r+0x946>
 800c1c4:	07f2      	lsls	r2, r6, #31
 800c1c6:	d505      	bpl.n	800c1d4 <_dtoa_r+0x4d4>
 800c1c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1cc:	f7f4 fa1c 	bl	8000608 <__aeabi_dmul>
 800c1d0:	3501      	adds	r5, #1
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	1076      	asrs	r6, r6, #1
 800c1d6:	3708      	adds	r7, #8
 800c1d8:	e777      	b.n	800c0ca <_dtoa_r+0x3ca>
 800c1da:	2502      	movs	r5, #2
 800c1dc:	e779      	b.n	800c0d2 <_dtoa_r+0x3d2>
 800c1de:	9f00      	ldr	r7, [sp, #0]
 800c1e0:	9e03      	ldr	r6, [sp, #12]
 800c1e2:	e794      	b.n	800c10e <_dtoa_r+0x40e>
 800c1e4:	9901      	ldr	r1, [sp, #4]
 800c1e6:	4b4c      	ldr	r3, [pc, #304]	; (800c318 <_dtoa_r+0x618>)
 800c1e8:	4431      	add	r1, r6
 800c1ea:	910d      	str	r1, [sp, #52]	; 0x34
 800c1ec:	9908      	ldr	r1, [sp, #32]
 800c1ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c1f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c1f6:	2900      	cmp	r1, #0
 800c1f8:	d043      	beq.n	800c282 <_dtoa_r+0x582>
 800c1fa:	494d      	ldr	r1, [pc, #308]	; (800c330 <_dtoa_r+0x630>)
 800c1fc:	2000      	movs	r0, #0
 800c1fe:	f7f4 fb2d 	bl	800085c <__aeabi_ddiv>
 800c202:	4652      	mov	r2, sl
 800c204:	465b      	mov	r3, fp
 800c206:	f7f4 f847 	bl	8000298 <__aeabi_dsub>
 800c20a:	9d01      	ldr	r5, [sp, #4]
 800c20c:	4682      	mov	sl, r0
 800c20e:	468b      	mov	fp, r1
 800c210:	4649      	mov	r1, r9
 800c212:	4640      	mov	r0, r8
 800c214:	f7f4 fca8 	bl	8000b68 <__aeabi_d2iz>
 800c218:	4606      	mov	r6, r0
 800c21a:	f7f4 f98b 	bl	8000534 <__aeabi_i2d>
 800c21e:	4602      	mov	r2, r0
 800c220:	460b      	mov	r3, r1
 800c222:	4640      	mov	r0, r8
 800c224:	4649      	mov	r1, r9
 800c226:	f7f4 f837 	bl	8000298 <__aeabi_dsub>
 800c22a:	3630      	adds	r6, #48	; 0x30
 800c22c:	f805 6b01 	strb.w	r6, [r5], #1
 800c230:	4652      	mov	r2, sl
 800c232:	465b      	mov	r3, fp
 800c234:	4680      	mov	r8, r0
 800c236:	4689      	mov	r9, r1
 800c238:	f7f4 fc58 	bl	8000aec <__aeabi_dcmplt>
 800c23c:	2800      	cmp	r0, #0
 800c23e:	d163      	bne.n	800c308 <_dtoa_r+0x608>
 800c240:	4642      	mov	r2, r8
 800c242:	464b      	mov	r3, r9
 800c244:	4936      	ldr	r1, [pc, #216]	; (800c320 <_dtoa_r+0x620>)
 800c246:	2000      	movs	r0, #0
 800c248:	f7f4 f826 	bl	8000298 <__aeabi_dsub>
 800c24c:	4652      	mov	r2, sl
 800c24e:	465b      	mov	r3, fp
 800c250:	f7f4 fc4c 	bl	8000aec <__aeabi_dcmplt>
 800c254:	2800      	cmp	r0, #0
 800c256:	f040 80b5 	bne.w	800c3c4 <_dtoa_r+0x6c4>
 800c25a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c25c:	429d      	cmp	r5, r3
 800c25e:	d081      	beq.n	800c164 <_dtoa_r+0x464>
 800c260:	4b30      	ldr	r3, [pc, #192]	; (800c324 <_dtoa_r+0x624>)
 800c262:	2200      	movs	r2, #0
 800c264:	4650      	mov	r0, sl
 800c266:	4659      	mov	r1, fp
 800c268:	f7f4 f9ce 	bl	8000608 <__aeabi_dmul>
 800c26c:	4b2d      	ldr	r3, [pc, #180]	; (800c324 <_dtoa_r+0x624>)
 800c26e:	4682      	mov	sl, r0
 800c270:	468b      	mov	fp, r1
 800c272:	4640      	mov	r0, r8
 800c274:	4649      	mov	r1, r9
 800c276:	2200      	movs	r2, #0
 800c278:	f7f4 f9c6 	bl	8000608 <__aeabi_dmul>
 800c27c:	4680      	mov	r8, r0
 800c27e:	4689      	mov	r9, r1
 800c280:	e7c6      	b.n	800c210 <_dtoa_r+0x510>
 800c282:	4650      	mov	r0, sl
 800c284:	4659      	mov	r1, fp
 800c286:	f7f4 f9bf 	bl	8000608 <__aeabi_dmul>
 800c28a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c28c:	9d01      	ldr	r5, [sp, #4]
 800c28e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c290:	4682      	mov	sl, r0
 800c292:	468b      	mov	fp, r1
 800c294:	4649      	mov	r1, r9
 800c296:	4640      	mov	r0, r8
 800c298:	f7f4 fc66 	bl	8000b68 <__aeabi_d2iz>
 800c29c:	4606      	mov	r6, r0
 800c29e:	f7f4 f949 	bl	8000534 <__aeabi_i2d>
 800c2a2:	3630      	adds	r6, #48	; 0x30
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	4640      	mov	r0, r8
 800c2aa:	4649      	mov	r1, r9
 800c2ac:	f7f3 fff4 	bl	8000298 <__aeabi_dsub>
 800c2b0:	f805 6b01 	strb.w	r6, [r5], #1
 800c2b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2b6:	429d      	cmp	r5, r3
 800c2b8:	4680      	mov	r8, r0
 800c2ba:	4689      	mov	r9, r1
 800c2bc:	f04f 0200 	mov.w	r2, #0
 800c2c0:	d124      	bne.n	800c30c <_dtoa_r+0x60c>
 800c2c2:	4b1b      	ldr	r3, [pc, #108]	; (800c330 <_dtoa_r+0x630>)
 800c2c4:	4650      	mov	r0, sl
 800c2c6:	4659      	mov	r1, fp
 800c2c8:	f7f3 ffe8 	bl	800029c <__adddf3>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	460b      	mov	r3, r1
 800c2d0:	4640      	mov	r0, r8
 800c2d2:	4649      	mov	r1, r9
 800c2d4:	f7f4 fc28 	bl	8000b28 <__aeabi_dcmpgt>
 800c2d8:	2800      	cmp	r0, #0
 800c2da:	d173      	bne.n	800c3c4 <_dtoa_r+0x6c4>
 800c2dc:	4652      	mov	r2, sl
 800c2de:	465b      	mov	r3, fp
 800c2e0:	4913      	ldr	r1, [pc, #76]	; (800c330 <_dtoa_r+0x630>)
 800c2e2:	2000      	movs	r0, #0
 800c2e4:	f7f3 ffd8 	bl	8000298 <__aeabi_dsub>
 800c2e8:	4602      	mov	r2, r0
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	4640      	mov	r0, r8
 800c2ee:	4649      	mov	r1, r9
 800c2f0:	f7f4 fbfc 	bl	8000aec <__aeabi_dcmplt>
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	f43f af35 	beq.w	800c164 <_dtoa_r+0x464>
 800c2fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c2fc:	1e6b      	subs	r3, r5, #1
 800c2fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800c300:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c304:	2b30      	cmp	r3, #48	; 0x30
 800c306:	d0f8      	beq.n	800c2fa <_dtoa_r+0x5fa>
 800c308:	9700      	str	r7, [sp, #0]
 800c30a:	e049      	b.n	800c3a0 <_dtoa_r+0x6a0>
 800c30c:	4b05      	ldr	r3, [pc, #20]	; (800c324 <_dtoa_r+0x624>)
 800c30e:	f7f4 f97b 	bl	8000608 <__aeabi_dmul>
 800c312:	4680      	mov	r8, r0
 800c314:	4689      	mov	r9, r1
 800c316:	e7bd      	b.n	800c294 <_dtoa_r+0x594>
 800c318:	0800fce0 	.word	0x0800fce0
 800c31c:	0800fcb8 	.word	0x0800fcb8
 800c320:	3ff00000 	.word	0x3ff00000
 800c324:	40240000 	.word	0x40240000
 800c328:	401c0000 	.word	0x401c0000
 800c32c:	40140000 	.word	0x40140000
 800c330:	3fe00000 	.word	0x3fe00000
 800c334:	9d01      	ldr	r5, [sp, #4]
 800c336:	4656      	mov	r6, sl
 800c338:	465f      	mov	r7, fp
 800c33a:	4642      	mov	r2, r8
 800c33c:	464b      	mov	r3, r9
 800c33e:	4630      	mov	r0, r6
 800c340:	4639      	mov	r1, r7
 800c342:	f7f4 fa8b 	bl	800085c <__aeabi_ddiv>
 800c346:	f7f4 fc0f 	bl	8000b68 <__aeabi_d2iz>
 800c34a:	4682      	mov	sl, r0
 800c34c:	f7f4 f8f2 	bl	8000534 <__aeabi_i2d>
 800c350:	4642      	mov	r2, r8
 800c352:	464b      	mov	r3, r9
 800c354:	f7f4 f958 	bl	8000608 <__aeabi_dmul>
 800c358:	4602      	mov	r2, r0
 800c35a:	460b      	mov	r3, r1
 800c35c:	4630      	mov	r0, r6
 800c35e:	4639      	mov	r1, r7
 800c360:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c364:	f7f3 ff98 	bl	8000298 <__aeabi_dsub>
 800c368:	f805 6b01 	strb.w	r6, [r5], #1
 800c36c:	9e01      	ldr	r6, [sp, #4]
 800c36e:	9f03      	ldr	r7, [sp, #12]
 800c370:	1bae      	subs	r6, r5, r6
 800c372:	42b7      	cmp	r7, r6
 800c374:	4602      	mov	r2, r0
 800c376:	460b      	mov	r3, r1
 800c378:	d135      	bne.n	800c3e6 <_dtoa_r+0x6e6>
 800c37a:	f7f3 ff8f 	bl	800029c <__adddf3>
 800c37e:	4642      	mov	r2, r8
 800c380:	464b      	mov	r3, r9
 800c382:	4606      	mov	r6, r0
 800c384:	460f      	mov	r7, r1
 800c386:	f7f4 fbcf 	bl	8000b28 <__aeabi_dcmpgt>
 800c38a:	b9d0      	cbnz	r0, 800c3c2 <_dtoa_r+0x6c2>
 800c38c:	4642      	mov	r2, r8
 800c38e:	464b      	mov	r3, r9
 800c390:	4630      	mov	r0, r6
 800c392:	4639      	mov	r1, r7
 800c394:	f7f4 fba0 	bl	8000ad8 <__aeabi_dcmpeq>
 800c398:	b110      	cbz	r0, 800c3a0 <_dtoa_r+0x6a0>
 800c39a:	f01a 0f01 	tst.w	sl, #1
 800c39e:	d110      	bne.n	800c3c2 <_dtoa_r+0x6c2>
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	ee18 1a10 	vmov	r1, s16
 800c3a6:	f001 f8af 	bl	800d508 <_Bfree>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	9800      	ldr	r0, [sp, #0]
 800c3ae:	702b      	strb	r3, [r5, #0]
 800c3b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c3b2:	3001      	adds	r0, #1
 800c3b4:	6018      	str	r0, [r3, #0]
 800c3b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	f43f acf1 	beq.w	800bda0 <_dtoa_r+0xa0>
 800c3be:	601d      	str	r5, [r3, #0]
 800c3c0:	e4ee      	b.n	800bda0 <_dtoa_r+0xa0>
 800c3c2:	9f00      	ldr	r7, [sp, #0]
 800c3c4:	462b      	mov	r3, r5
 800c3c6:	461d      	mov	r5, r3
 800c3c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3cc:	2a39      	cmp	r2, #57	; 0x39
 800c3ce:	d106      	bne.n	800c3de <_dtoa_r+0x6de>
 800c3d0:	9a01      	ldr	r2, [sp, #4]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d1f7      	bne.n	800c3c6 <_dtoa_r+0x6c6>
 800c3d6:	9901      	ldr	r1, [sp, #4]
 800c3d8:	2230      	movs	r2, #48	; 0x30
 800c3da:	3701      	adds	r7, #1
 800c3dc:	700a      	strb	r2, [r1, #0]
 800c3de:	781a      	ldrb	r2, [r3, #0]
 800c3e0:	3201      	adds	r2, #1
 800c3e2:	701a      	strb	r2, [r3, #0]
 800c3e4:	e790      	b.n	800c308 <_dtoa_r+0x608>
 800c3e6:	4ba6      	ldr	r3, [pc, #664]	; (800c680 <_dtoa_r+0x980>)
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	f7f4 f90d 	bl	8000608 <__aeabi_dmul>
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	4606      	mov	r6, r0
 800c3f4:	460f      	mov	r7, r1
 800c3f6:	f7f4 fb6f 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	d09d      	beq.n	800c33a <_dtoa_r+0x63a>
 800c3fe:	e7cf      	b.n	800c3a0 <_dtoa_r+0x6a0>
 800c400:	9a08      	ldr	r2, [sp, #32]
 800c402:	2a00      	cmp	r2, #0
 800c404:	f000 80d7 	beq.w	800c5b6 <_dtoa_r+0x8b6>
 800c408:	9a06      	ldr	r2, [sp, #24]
 800c40a:	2a01      	cmp	r2, #1
 800c40c:	f300 80ba 	bgt.w	800c584 <_dtoa_r+0x884>
 800c410:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c412:	2a00      	cmp	r2, #0
 800c414:	f000 80b2 	beq.w	800c57c <_dtoa_r+0x87c>
 800c418:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c41c:	9e07      	ldr	r6, [sp, #28]
 800c41e:	9d04      	ldr	r5, [sp, #16]
 800c420:	9a04      	ldr	r2, [sp, #16]
 800c422:	441a      	add	r2, r3
 800c424:	9204      	str	r2, [sp, #16]
 800c426:	9a05      	ldr	r2, [sp, #20]
 800c428:	2101      	movs	r1, #1
 800c42a:	441a      	add	r2, r3
 800c42c:	4620      	mov	r0, r4
 800c42e:	9205      	str	r2, [sp, #20]
 800c430:	f001 f96c 	bl	800d70c <__i2b>
 800c434:	4607      	mov	r7, r0
 800c436:	2d00      	cmp	r5, #0
 800c438:	dd0c      	ble.n	800c454 <_dtoa_r+0x754>
 800c43a:	9b05      	ldr	r3, [sp, #20]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	dd09      	ble.n	800c454 <_dtoa_r+0x754>
 800c440:	42ab      	cmp	r3, r5
 800c442:	9a04      	ldr	r2, [sp, #16]
 800c444:	bfa8      	it	ge
 800c446:	462b      	movge	r3, r5
 800c448:	1ad2      	subs	r2, r2, r3
 800c44a:	9204      	str	r2, [sp, #16]
 800c44c:	9a05      	ldr	r2, [sp, #20]
 800c44e:	1aed      	subs	r5, r5, r3
 800c450:	1ad3      	subs	r3, r2, r3
 800c452:	9305      	str	r3, [sp, #20]
 800c454:	9b07      	ldr	r3, [sp, #28]
 800c456:	b31b      	cbz	r3, 800c4a0 <_dtoa_r+0x7a0>
 800c458:	9b08      	ldr	r3, [sp, #32]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	f000 80af 	beq.w	800c5be <_dtoa_r+0x8be>
 800c460:	2e00      	cmp	r6, #0
 800c462:	dd13      	ble.n	800c48c <_dtoa_r+0x78c>
 800c464:	4639      	mov	r1, r7
 800c466:	4632      	mov	r2, r6
 800c468:	4620      	mov	r0, r4
 800c46a:	f001 fa0f 	bl	800d88c <__pow5mult>
 800c46e:	ee18 2a10 	vmov	r2, s16
 800c472:	4601      	mov	r1, r0
 800c474:	4607      	mov	r7, r0
 800c476:	4620      	mov	r0, r4
 800c478:	f001 f95e 	bl	800d738 <__multiply>
 800c47c:	ee18 1a10 	vmov	r1, s16
 800c480:	4680      	mov	r8, r0
 800c482:	4620      	mov	r0, r4
 800c484:	f001 f840 	bl	800d508 <_Bfree>
 800c488:	ee08 8a10 	vmov	s16, r8
 800c48c:	9b07      	ldr	r3, [sp, #28]
 800c48e:	1b9a      	subs	r2, r3, r6
 800c490:	d006      	beq.n	800c4a0 <_dtoa_r+0x7a0>
 800c492:	ee18 1a10 	vmov	r1, s16
 800c496:	4620      	mov	r0, r4
 800c498:	f001 f9f8 	bl	800d88c <__pow5mult>
 800c49c:	ee08 0a10 	vmov	s16, r0
 800c4a0:	2101      	movs	r1, #1
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	f001 f932 	bl	800d70c <__i2b>
 800c4a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	4606      	mov	r6, r0
 800c4ae:	f340 8088 	ble.w	800c5c2 <_dtoa_r+0x8c2>
 800c4b2:	461a      	mov	r2, r3
 800c4b4:	4601      	mov	r1, r0
 800c4b6:	4620      	mov	r0, r4
 800c4b8:	f001 f9e8 	bl	800d88c <__pow5mult>
 800c4bc:	9b06      	ldr	r3, [sp, #24]
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	4606      	mov	r6, r0
 800c4c2:	f340 8081 	ble.w	800c5c8 <_dtoa_r+0x8c8>
 800c4c6:	f04f 0800 	mov.w	r8, #0
 800c4ca:	6933      	ldr	r3, [r6, #16]
 800c4cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c4d0:	6918      	ldr	r0, [r3, #16]
 800c4d2:	f001 f8cb 	bl	800d66c <__hi0bits>
 800c4d6:	f1c0 0020 	rsb	r0, r0, #32
 800c4da:	9b05      	ldr	r3, [sp, #20]
 800c4dc:	4418      	add	r0, r3
 800c4de:	f010 001f 	ands.w	r0, r0, #31
 800c4e2:	f000 8092 	beq.w	800c60a <_dtoa_r+0x90a>
 800c4e6:	f1c0 0320 	rsb	r3, r0, #32
 800c4ea:	2b04      	cmp	r3, #4
 800c4ec:	f340 808a 	ble.w	800c604 <_dtoa_r+0x904>
 800c4f0:	f1c0 001c 	rsb	r0, r0, #28
 800c4f4:	9b04      	ldr	r3, [sp, #16]
 800c4f6:	4403      	add	r3, r0
 800c4f8:	9304      	str	r3, [sp, #16]
 800c4fa:	9b05      	ldr	r3, [sp, #20]
 800c4fc:	4403      	add	r3, r0
 800c4fe:	4405      	add	r5, r0
 800c500:	9305      	str	r3, [sp, #20]
 800c502:	9b04      	ldr	r3, [sp, #16]
 800c504:	2b00      	cmp	r3, #0
 800c506:	dd07      	ble.n	800c518 <_dtoa_r+0x818>
 800c508:	ee18 1a10 	vmov	r1, s16
 800c50c:	461a      	mov	r2, r3
 800c50e:	4620      	mov	r0, r4
 800c510:	f001 fa16 	bl	800d940 <__lshift>
 800c514:	ee08 0a10 	vmov	s16, r0
 800c518:	9b05      	ldr	r3, [sp, #20]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	dd05      	ble.n	800c52a <_dtoa_r+0x82a>
 800c51e:	4631      	mov	r1, r6
 800c520:	461a      	mov	r2, r3
 800c522:	4620      	mov	r0, r4
 800c524:	f001 fa0c 	bl	800d940 <__lshift>
 800c528:	4606      	mov	r6, r0
 800c52a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d06e      	beq.n	800c60e <_dtoa_r+0x90e>
 800c530:	ee18 0a10 	vmov	r0, s16
 800c534:	4631      	mov	r1, r6
 800c536:	f001 fa73 	bl	800da20 <__mcmp>
 800c53a:	2800      	cmp	r0, #0
 800c53c:	da67      	bge.n	800c60e <_dtoa_r+0x90e>
 800c53e:	9b00      	ldr	r3, [sp, #0]
 800c540:	3b01      	subs	r3, #1
 800c542:	ee18 1a10 	vmov	r1, s16
 800c546:	9300      	str	r3, [sp, #0]
 800c548:	220a      	movs	r2, #10
 800c54a:	2300      	movs	r3, #0
 800c54c:	4620      	mov	r0, r4
 800c54e:	f000 fffd 	bl	800d54c <__multadd>
 800c552:	9b08      	ldr	r3, [sp, #32]
 800c554:	ee08 0a10 	vmov	s16, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	f000 81b1 	beq.w	800c8c0 <_dtoa_r+0xbc0>
 800c55e:	2300      	movs	r3, #0
 800c560:	4639      	mov	r1, r7
 800c562:	220a      	movs	r2, #10
 800c564:	4620      	mov	r0, r4
 800c566:	f000 fff1 	bl	800d54c <__multadd>
 800c56a:	9b02      	ldr	r3, [sp, #8]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	4607      	mov	r7, r0
 800c570:	f300 808e 	bgt.w	800c690 <_dtoa_r+0x990>
 800c574:	9b06      	ldr	r3, [sp, #24]
 800c576:	2b02      	cmp	r3, #2
 800c578:	dc51      	bgt.n	800c61e <_dtoa_r+0x91e>
 800c57a:	e089      	b.n	800c690 <_dtoa_r+0x990>
 800c57c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c57e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c582:	e74b      	b.n	800c41c <_dtoa_r+0x71c>
 800c584:	9b03      	ldr	r3, [sp, #12]
 800c586:	1e5e      	subs	r6, r3, #1
 800c588:	9b07      	ldr	r3, [sp, #28]
 800c58a:	42b3      	cmp	r3, r6
 800c58c:	bfbf      	itttt	lt
 800c58e:	9b07      	ldrlt	r3, [sp, #28]
 800c590:	9607      	strlt	r6, [sp, #28]
 800c592:	1af2      	sublt	r2, r6, r3
 800c594:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c596:	bfb6      	itet	lt
 800c598:	189b      	addlt	r3, r3, r2
 800c59a:	1b9e      	subge	r6, r3, r6
 800c59c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c59e:	9b03      	ldr	r3, [sp, #12]
 800c5a0:	bfb8      	it	lt
 800c5a2:	2600      	movlt	r6, #0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	bfb7      	itett	lt
 800c5a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c5ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c5b0:	1a9d      	sublt	r5, r3, r2
 800c5b2:	2300      	movlt	r3, #0
 800c5b4:	e734      	b.n	800c420 <_dtoa_r+0x720>
 800c5b6:	9e07      	ldr	r6, [sp, #28]
 800c5b8:	9d04      	ldr	r5, [sp, #16]
 800c5ba:	9f08      	ldr	r7, [sp, #32]
 800c5bc:	e73b      	b.n	800c436 <_dtoa_r+0x736>
 800c5be:	9a07      	ldr	r2, [sp, #28]
 800c5c0:	e767      	b.n	800c492 <_dtoa_r+0x792>
 800c5c2:	9b06      	ldr	r3, [sp, #24]
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	dc18      	bgt.n	800c5fa <_dtoa_r+0x8fa>
 800c5c8:	f1ba 0f00 	cmp.w	sl, #0
 800c5cc:	d115      	bne.n	800c5fa <_dtoa_r+0x8fa>
 800c5ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5d2:	b993      	cbnz	r3, 800c5fa <_dtoa_r+0x8fa>
 800c5d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c5d8:	0d1b      	lsrs	r3, r3, #20
 800c5da:	051b      	lsls	r3, r3, #20
 800c5dc:	b183      	cbz	r3, 800c600 <_dtoa_r+0x900>
 800c5de:	9b04      	ldr	r3, [sp, #16]
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	9304      	str	r3, [sp, #16]
 800c5e4:	9b05      	ldr	r3, [sp, #20]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	9305      	str	r3, [sp, #20]
 800c5ea:	f04f 0801 	mov.w	r8, #1
 800c5ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	f47f af6a 	bne.w	800c4ca <_dtoa_r+0x7ca>
 800c5f6:	2001      	movs	r0, #1
 800c5f8:	e76f      	b.n	800c4da <_dtoa_r+0x7da>
 800c5fa:	f04f 0800 	mov.w	r8, #0
 800c5fe:	e7f6      	b.n	800c5ee <_dtoa_r+0x8ee>
 800c600:	4698      	mov	r8, r3
 800c602:	e7f4      	b.n	800c5ee <_dtoa_r+0x8ee>
 800c604:	f43f af7d 	beq.w	800c502 <_dtoa_r+0x802>
 800c608:	4618      	mov	r0, r3
 800c60a:	301c      	adds	r0, #28
 800c60c:	e772      	b.n	800c4f4 <_dtoa_r+0x7f4>
 800c60e:	9b03      	ldr	r3, [sp, #12]
 800c610:	2b00      	cmp	r3, #0
 800c612:	dc37      	bgt.n	800c684 <_dtoa_r+0x984>
 800c614:	9b06      	ldr	r3, [sp, #24]
 800c616:	2b02      	cmp	r3, #2
 800c618:	dd34      	ble.n	800c684 <_dtoa_r+0x984>
 800c61a:	9b03      	ldr	r3, [sp, #12]
 800c61c:	9302      	str	r3, [sp, #8]
 800c61e:	9b02      	ldr	r3, [sp, #8]
 800c620:	b96b      	cbnz	r3, 800c63e <_dtoa_r+0x93e>
 800c622:	4631      	mov	r1, r6
 800c624:	2205      	movs	r2, #5
 800c626:	4620      	mov	r0, r4
 800c628:	f000 ff90 	bl	800d54c <__multadd>
 800c62c:	4601      	mov	r1, r0
 800c62e:	4606      	mov	r6, r0
 800c630:	ee18 0a10 	vmov	r0, s16
 800c634:	f001 f9f4 	bl	800da20 <__mcmp>
 800c638:	2800      	cmp	r0, #0
 800c63a:	f73f adbb 	bgt.w	800c1b4 <_dtoa_r+0x4b4>
 800c63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c640:	9d01      	ldr	r5, [sp, #4]
 800c642:	43db      	mvns	r3, r3
 800c644:	9300      	str	r3, [sp, #0]
 800c646:	f04f 0800 	mov.w	r8, #0
 800c64a:	4631      	mov	r1, r6
 800c64c:	4620      	mov	r0, r4
 800c64e:	f000 ff5b 	bl	800d508 <_Bfree>
 800c652:	2f00      	cmp	r7, #0
 800c654:	f43f aea4 	beq.w	800c3a0 <_dtoa_r+0x6a0>
 800c658:	f1b8 0f00 	cmp.w	r8, #0
 800c65c:	d005      	beq.n	800c66a <_dtoa_r+0x96a>
 800c65e:	45b8      	cmp	r8, r7
 800c660:	d003      	beq.n	800c66a <_dtoa_r+0x96a>
 800c662:	4641      	mov	r1, r8
 800c664:	4620      	mov	r0, r4
 800c666:	f000 ff4f 	bl	800d508 <_Bfree>
 800c66a:	4639      	mov	r1, r7
 800c66c:	4620      	mov	r0, r4
 800c66e:	f000 ff4b 	bl	800d508 <_Bfree>
 800c672:	e695      	b.n	800c3a0 <_dtoa_r+0x6a0>
 800c674:	2600      	movs	r6, #0
 800c676:	4637      	mov	r7, r6
 800c678:	e7e1      	b.n	800c63e <_dtoa_r+0x93e>
 800c67a:	9700      	str	r7, [sp, #0]
 800c67c:	4637      	mov	r7, r6
 800c67e:	e599      	b.n	800c1b4 <_dtoa_r+0x4b4>
 800c680:	40240000 	.word	0x40240000
 800c684:	9b08      	ldr	r3, [sp, #32]
 800c686:	2b00      	cmp	r3, #0
 800c688:	f000 80ca 	beq.w	800c820 <_dtoa_r+0xb20>
 800c68c:	9b03      	ldr	r3, [sp, #12]
 800c68e:	9302      	str	r3, [sp, #8]
 800c690:	2d00      	cmp	r5, #0
 800c692:	dd05      	ble.n	800c6a0 <_dtoa_r+0x9a0>
 800c694:	4639      	mov	r1, r7
 800c696:	462a      	mov	r2, r5
 800c698:	4620      	mov	r0, r4
 800c69a:	f001 f951 	bl	800d940 <__lshift>
 800c69e:	4607      	mov	r7, r0
 800c6a0:	f1b8 0f00 	cmp.w	r8, #0
 800c6a4:	d05b      	beq.n	800c75e <_dtoa_r+0xa5e>
 800c6a6:	6879      	ldr	r1, [r7, #4]
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	f000 feed 	bl	800d488 <_Balloc>
 800c6ae:	4605      	mov	r5, r0
 800c6b0:	b928      	cbnz	r0, 800c6be <_dtoa_r+0x9be>
 800c6b2:	4b87      	ldr	r3, [pc, #540]	; (800c8d0 <_dtoa_r+0xbd0>)
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c6ba:	f7ff bb3b 	b.w	800bd34 <_dtoa_r+0x34>
 800c6be:	693a      	ldr	r2, [r7, #16]
 800c6c0:	3202      	adds	r2, #2
 800c6c2:	0092      	lsls	r2, r2, #2
 800c6c4:	f107 010c 	add.w	r1, r7, #12
 800c6c8:	300c      	adds	r0, #12
 800c6ca:	f7fd fbf7 	bl	8009ebc <memcpy>
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	4629      	mov	r1, r5
 800c6d2:	4620      	mov	r0, r4
 800c6d4:	f001 f934 	bl	800d940 <__lshift>
 800c6d8:	9b01      	ldr	r3, [sp, #4]
 800c6da:	f103 0901 	add.w	r9, r3, #1
 800c6de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c6e2:	4413      	add	r3, r2
 800c6e4:	9305      	str	r3, [sp, #20]
 800c6e6:	f00a 0301 	and.w	r3, sl, #1
 800c6ea:	46b8      	mov	r8, r7
 800c6ec:	9304      	str	r3, [sp, #16]
 800c6ee:	4607      	mov	r7, r0
 800c6f0:	4631      	mov	r1, r6
 800c6f2:	ee18 0a10 	vmov	r0, s16
 800c6f6:	f7ff fa75 	bl	800bbe4 <quorem>
 800c6fa:	4641      	mov	r1, r8
 800c6fc:	9002      	str	r0, [sp, #8]
 800c6fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c702:	ee18 0a10 	vmov	r0, s16
 800c706:	f001 f98b 	bl	800da20 <__mcmp>
 800c70a:	463a      	mov	r2, r7
 800c70c:	9003      	str	r0, [sp, #12]
 800c70e:	4631      	mov	r1, r6
 800c710:	4620      	mov	r0, r4
 800c712:	f001 f9a1 	bl	800da58 <__mdiff>
 800c716:	68c2      	ldr	r2, [r0, #12]
 800c718:	f109 3bff 	add.w	fp, r9, #4294967295
 800c71c:	4605      	mov	r5, r0
 800c71e:	bb02      	cbnz	r2, 800c762 <_dtoa_r+0xa62>
 800c720:	4601      	mov	r1, r0
 800c722:	ee18 0a10 	vmov	r0, s16
 800c726:	f001 f97b 	bl	800da20 <__mcmp>
 800c72a:	4602      	mov	r2, r0
 800c72c:	4629      	mov	r1, r5
 800c72e:	4620      	mov	r0, r4
 800c730:	9207      	str	r2, [sp, #28]
 800c732:	f000 fee9 	bl	800d508 <_Bfree>
 800c736:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c73a:	ea43 0102 	orr.w	r1, r3, r2
 800c73e:	9b04      	ldr	r3, [sp, #16]
 800c740:	430b      	orrs	r3, r1
 800c742:	464d      	mov	r5, r9
 800c744:	d10f      	bne.n	800c766 <_dtoa_r+0xa66>
 800c746:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c74a:	d02a      	beq.n	800c7a2 <_dtoa_r+0xaa2>
 800c74c:	9b03      	ldr	r3, [sp, #12]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	dd02      	ble.n	800c758 <_dtoa_r+0xa58>
 800c752:	9b02      	ldr	r3, [sp, #8]
 800c754:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c758:	f88b a000 	strb.w	sl, [fp]
 800c75c:	e775      	b.n	800c64a <_dtoa_r+0x94a>
 800c75e:	4638      	mov	r0, r7
 800c760:	e7ba      	b.n	800c6d8 <_dtoa_r+0x9d8>
 800c762:	2201      	movs	r2, #1
 800c764:	e7e2      	b.n	800c72c <_dtoa_r+0xa2c>
 800c766:	9b03      	ldr	r3, [sp, #12]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	db04      	blt.n	800c776 <_dtoa_r+0xa76>
 800c76c:	9906      	ldr	r1, [sp, #24]
 800c76e:	430b      	orrs	r3, r1
 800c770:	9904      	ldr	r1, [sp, #16]
 800c772:	430b      	orrs	r3, r1
 800c774:	d122      	bne.n	800c7bc <_dtoa_r+0xabc>
 800c776:	2a00      	cmp	r2, #0
 800c778:	ddee      	ble.n	800c758 <_dtoa_r+0xa58>
 800c77a:	ee18 1a10 	vmov	r1, s16
 800c77e:	2201      	movs	r2, #1
 800c780:	4620      	mov	r0, r4
 800c782:	f001 f8dd 	bl	800d940 <__lshift>
 800c786:	4631      	mov	r1, r6
 800c788:	ee08 0a10 	vmov	s16, r0
 800c78c:	f001 f948 	bl	800da20 <__mcmp>
 800c790:	2800      	cmp	r0, #0
 800c792:	dc03      	bgt.n	800c79c <_dtoa_r+0xa9c>
 800c794:	d1e0      	bne.n	800c758 <_dtoa_r+0xa58>
 800c796:	f01a 0f01 	tst.w	sl, #1
 800c79a:	d0dd      	beq.n	800c758 <_dtoa_r+0xa58>
 800c79c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c7a0:	d1d7      	bne.n	800c752 <_dtoa_r+0xa52>
 800c7a2:	2339      	movs	r3, #57	; 0x39
 800c7a4:	f88b 3000 	strb.w	r3, [fp]
 800c7a8:	462b      	mov	r3, r5
 800c7aa:	461d      	mov	r5, r3
 800c7ac:	3b01      	subs	r3, #1
 800c7ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c7b2:	2a39      	cmp	r2, #57	; 0x39
 800c7b4:	d071      	beq.n	800c89a <_dtoa_r+0xb9a>
 800c7b6:	3201      	adds	r2, #1
 800c7b8:	701a      	strb	r2, [r3, #0]
 800c7ba:	e746      	b.n	800c64a <_dtoa_r+0x94a>
 800c7bc:	2a00      	cmp	r2, #0
 800c7be:	dd07      	ble.n	800c7d0 <_dtoa_r+0xad0>
 800c7c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c7c4:	d0ed      	beq.n	800c7a2 <_dtoa_r+0xaa2>
 800c7c6:	f10a 0301 	add.w	r3, sl, #1
 800c7ca:	f88b 3000 	strb.w	r3, [fp]
 800c7ce:	e73c      	b.n	800c64a <_dtoa_r+0x94a>
 800c7d0:	9b05      	ldr	r3, [sp, #20]
 800c7d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c7d6:	4599      	cmp	r9, r3
 800c7d8:	d047      	beq.n	800c86a <_dtoa_r+0xb6a>
 800c7da:	ee18 1a10 	vmov	r1, s16
 800c7de:	2300      	movs	r3, #0
 800c7e0:	220a      	movs	r2, #10
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f000 feb2 	bl	800d54c <__multadd>
 800c7e8:	45b8      	cmp	r8, r7
 800c7ea:	ee08 0a10 	vmov	s16, r0
 800c7ee:	f04f 0300 	mov.w	r3, #0
 800c7f2:	f04f 020a 	mov.w	r2, #10
 800c7f6:	4641      	mov	r1, r8
 800c7f8:	4620      	mov	r0, r4
 800c7fa:	d106      	bne.n	800c80a <_dtoa_r+0xb0a>
 800c7fc:	f000 fea6 	bl	800d54c <__multadd>
 800c800:	4680      	mov	r8, r0
 800c802:	4607      	mov	r7, r0
 800c804:	f109 0901 	add.w	r9, r9, #1
 800c808:	e772      	b.n	800c6f0 <_dtoa_r+0x9f0>
 800c80a:	f000 fe9f 	bl	800d54c <__multadd>
 800c80e:	4639      	mov	r1, r7
 800c810:	4680      	mov	r8, r0
 800c812:	2300      	movs	r3, #0
 800c814:	220a      	movs	r2, #10
 800c816:	4620      	mov	r0, r4
 800c818:	f000 fe98 	bl	800d54c <__multadd>
 800c81c:	4607      	mov	r7, r0
 800c81e:	e7f1      	b.n	800c804 <_dtoa_r+0xb04>
 800c820:	9b03      	ldr	r3, [sp, #12]
 800c822:	9302      	str	r3, [sp, #8]
 800c824:	9d01      	ldr	r5, [sp, #4]
 800c826:	ee18 0a10 	vmov	r0, s16
 800c82a:	4631      	mov	r1, r6
 800c82c:	f7ff f9da 	bl	800bbe4 <quorem>
 800c830:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c834:	9b01      	ldr	r3, [sp, #4]
 800c836:	f805 ab01 	strb.w	sl, [r5], #1
 800c83a:	1aea      	subs	r2, r5, r3
 800c83c:	9b02      	ldr	r3, [sp, #8]
 800c83e:	4293      	cmp	r3, r2
 800c840:	dd09      	ble.n	800c856 <_dtoa_r+0xb56>
 800c842:	ee18 1a10 	vmov	r1, s16
 800c846:	2300      	movs	r3, #0
 800c848:	220a      	movs	r2, #10
 800c84a:	4620      	mov	r0, r4
 800c84c:	f000 fe7e 	bl	800d54c <__multadd>
 800c850:	ee08 0a10 	vmov	s16, r0
 800c854:	e7e7      	b.n	800c826 <_dtoa_r+0xb26>
 800c856:	9b02      	ldr	r3, [sp, #8]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	bfc8      	it	gt
 800c85c:	461d      	movgt	r5, r3
 800c85e:	9b01      	ldr	r3, [sp, #4]
 800c860:	bfd8      	it	le
 800c862:	2501      	movle	r5, #1
 800c864:	441d      	add	r5, r3
 800c866:	f04f 0800 	mov.w	r8, #0
 800c86a:	ee18 1a10 	vmov	r1, s16
 800c86e:	2201      	movs	r2, #1
 800c870:	4620      	mov	r0, r4
 800c872:	f001 f865 	bl	800d940 <__lshift>
 800c876:	4631      	mov	r1, r6
 800c878:	ee08 0a10 	vmov	s16, r0
 800c87c:	f001 f8d0 	bl	800da20 <__mcmp>
 800c880:	2800      	cmp	r0, #0
 800c882:	dc91      	bgt.n	800c7a8 <_dtoa_r+0xaa8>
 800c884:	d102      	bne.n	800c88c <_dtoa_r+0xb8c>
 800c886:	f01a 0f01 	tst.w	sl, #1
 800c88a:	d18d      	bne.n	800c7a8 <_dtoa_r+0xaa8>
 800c88c:	462b      	mov	r3, r5
 800c88e:	461d      	mov	r5, r3
 800c890:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c894:	2a30      	cmp	r2, #48	; 0x30
 800c896:	d0fa      	beq.n	800c88e <_dtoa_r+0xb8e>
 800c898:	e6d7      	b.n	800c64a <_dtoa_r+0x94a>
 800c89a:	9a01      	ldr	r2, [sp, #4]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d184      	bne.n	800c7aa <_dtoa_r+0xaaa>
 800c8a0:	9b00      	ldr	r3, [sp, #0]
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	9300      	str	r3, [sp, #0]
 800c8a6:	2331      	movs	r3, #49	; 0x31
 800c8a8:	7013      	strb	r3, [r2, #0]
 800c8aa:	e6ce      	b.n	800c64a <_dtoa_r+0x94a>
 800c8ac:	4b09      	ldr	r3, [pc, #36]	; (800c8d4 <_dtoa_r+0xbd4>)
 800c8ae:	f7ff ba95 	b.w	800bddc <_dtoa_r+0xdc>
 800c8b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	f47f aa6e 	bne.w	800bd96 <_dtoa_r+0x96>
 800c8ba:	4b07      	ldr	r3, [pc, #28]	; (800c8d8 <_dtoa_r+0xbd8>)
 800c8bc:	f7ff ba8e 	b.w	800bddc <_dtoa_r+0xdc>
 800c8c0:	9b02      	ldr	r3, [sp, #8]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	dcae      	bgt.n	800c824 <_dtoa_r+0xb24>
 800c8c6:	9b06      	ldr	r3, [sp, #24]
 800c8c8:	2b02      	cmp	r3, #2
 800c8ca:	f73f aea8 	bgt.w	800c61e <_dtoa_r+0x91e>
 800c8ce:	e7a9      	b.n	800c824 <_dtoa_r+0xb24>
 800c8d0:	0800fb6b 	.word	0x0800fb6b
 800c8d4:	0800fa38 	.word	0x0800fa38
 800c8d8:	0800faec 	.word	0x0800faec

0800c8dc <__sflush_r>:
 800c8dc:	898a      	ldrh	r2, [r1, #12]
 800c8de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8e2:	4605      	mov	r5, r0
 800c8e4:	0710      	lsls	r0, r2, #28
 800c8e6:	460c      	mov	r4, r1
 800c8e8:	d458      	bmi.n	800c99c <__sflush_r+0xc0>
 800c8ea:	684b      	ldr	r3, [r1, #4]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	dc05      	bgt.n	800c8fc <__sflush_r+0x20>
 800c8f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	dc02      	bgt.n	800c8fc <__sflush_r+0x20>
 800c8f6:	2000      	movs	r0, #0
 800c8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8fe:	2e00      	cmp	r6, #0
 800c900:	d0f9      	beq.n	800c8f6 <__sflush_r+0x1a>
 800c902:	2300      	movs	r3, #0
 800c904:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c908:	682f      	ldr	r7, [r5, #0]
 800c90a:	602b      	str	r3, [r5, #0]
 800c90c:	d032      	beq.n	800c974 <__sflush_r+0x98>
 800c90e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c910:	89a3      	ldrh	r3, [r4, #12]
 800c912:	075a      	lsls	r2, r3, #29
 800c914:	d505      	bpl.n	800c922 <__sflush_r+0x46>
 800c916:	6863      	ldr	r3, [r4, #4]
 800c918:	1ac0      	subs	r0, r0, r3
 800c91a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c91c:	b10b      	cbz	r3, 800c922 <__sflush_r+0x46>
 800c91e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c920:	1ac0      	subs	r0, r0, r3
 800c922:	2300      	movs	r3, #0
 800c924:	4602      	mov	r2, r0
 800c926:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c928:	6a21      	ldr	r1, [r4, #32]
 800c92a:	4628      	mov	r0, r5
 800c92c:	47b0      	blx	r6
 800c92e:	1c43      	adds	r3, r0, #1
 800c930:	89a3      	ldrh	r3, [r4, #12]
 800c932:	d106      	bne.n	800c942 <__sflush_r+0x66>
 800c934:	6829      	ldr	r1, [r5, #0]
 800c936:	291d      	cmp	r1, #29
 800c938:	d82c      	bhi.n	800c994 <__sflush_r+0xb8>
 800c93a:	4a2a      	ldr	r2, [pc, #168]	; (800c9e4 <__sflush_r+0x108>)
 800c93c:	40ca      	lsrs	r2, r1
 800c93e:	07d6      	lsls	r6, r2, #31
 800c940:	d528      	bpl.n	800c994 <__sflush_r+0xb8>
 800c942:	2200      	movs	r2, #0
 800c944:	6062      	str	r2, [r4, #4]
 800c946:	04d9      	lsls	r1, r3, #19
 800c948:	6922      	ldr	r2, [r4, #16]
 800c94a:	6022      	str	r2, [r4, #0]
 800c94c:	d504      	bpl.n	800c958 <__sflush_r+0x7c>
 800c94e:	1c42      	adds	r2, r0, #1
 800c950:	d101      	bne.n	800c956 <__sflush_r+0x7a>
 800c952:	682b      	ldr	r3, [r5, #0]
 800c954:	b903      	cbnz	r3, 800c958 <__sflush_r+0x7c>
 800c956:	6560      	str	r0, [r4, #84]	; 0x54
 800c958:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c95a:	602f      	str	r7, [r5, #0]
 800c95c:	2900      	cmp	r1, #0
 800c95e:	d0ca      	beq.n	800c8f6 <__sflush_r+0x1a>
 800c960:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c964:	4299      	cmp	r1, r3
 800c966:	d002      	beq.n	800c96e <__sflush_r+0x92>
 800c968:	4628      	mov	r0, r5
 800c96a:	f7fd fabd 	bl	8009ee8 <_free_r>
 800c96e:	2000      	movs	r0, #0
 800c970:	6360      	str	r0, [r4, #52]	; 0x34
 800c972:	e7c1      	b.n	800c8f8 <__sflush_r+0x1c>
 800c974:	6a21      	ldr	r1, [r4, #32]
 800c976:	2301      	movs	r3, #1
 800c978:	4628      	mov	r0, r5
 800c97a:	47b0      	blx	r6
 800c97c:	1c41      	adds	r1, r0, #1
 800c97e:	d1c7      	bne.n	800c910 <__sflush_r+0x34>
 800c980:	682b      	ldr	r3, [r5, #0]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d0c4      	beq.n	800c910 <__sflush_r+0x34>
 800c986:	2b1d      	cmp	r3, #29
 800c988:	d001      	beq.n	800c98e <__sflush_r+0xb2>
 800c98a:	2b16      	cmp	r3, #22
 800c98c:	d101      	bne.n	800c992 <__sflush_r+0xb6>
 800c98e:	602f      	str	r7, [r5, #0]
 800c990:	e7b1      	b.n	800c8f6 <__sflush_r+0x1a>
 800c992:	89a3      	ldrh	r3, [r4, #12]
 800c994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c998:	81a3      	strh	r3, [r4, #12]
 800c99a:	e7ad      	b.n	800c8f8 <__sflush_r+0x1c>
 800c99c:	690f      	ldr	r7, [r1, #16]
 800c99e:	2f00      	cmp	r7, #0
 800c9a0:	d0a9      	beq.n	800c8f6 <__sflush_r+0x1a>
 800c9a2:	0793      	lsls	r3, r2, #30
 800c9a4:	680e      	ldr	r6, [r1, #0]
 800c9a6:	bf08      	it	eq
 800c9a8:	694b      	ldreq	r3, [r1, #20]
 800c9aa:	600f      	str	r7, [r1, #0]
 800c9ac:	bf18      	it	ne
 800c9ae:	2300      	movne	r3, #0
 800c9b0:	eba6 0807 	sub.w	r8, r6, r7
 800c9b4:	608b      	str	r3, [r1, #8]
 800c9b6:	f1b8 0f00 	cmp.w	r8, #0
 800c9ba:	dd9c      	ble.n	800c8f6 <__sflush_r+0x1a>
 800c9bc:	6a21      	ldr	r1, [r4, #32]
 800c9be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c9c0:	4643      	mov	r3, r8
 800c9c2:	463a      	mov	r2, r7
 800c9c4:	4628      	mov	r0, r5
 800c9c6:	47b0      	blx	r6
 800c9c8:	2800      	cmp	r0, #0
 800c9ca:	dc06      	bgt.n	800c9da <__sflush_r+0xfe>
 800c9cc:	89a3      	ldrh	r3, [r4, #12]
 800c9ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9d2:	81a3      	strh	r3, [r4, #12]
 800c9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d8:	e78e      	b.n	800c8f8 <__sflush_r+0x1c>
 800c9da:	4407      	add	r7, r0
 800c9dc:	eba8 0800 	sub.w	r8, r8, r0
 800c9e0:	e7e9      	b.n	800c9b6 <__sflush_r+0xda>
 800c9e2:	bf00      	nop
 800c9e4:	20400001 	.word	0x20400001

0800c9e8 <_fflush_r>:
 800c9e8:	b538      	push	{r3, r4, r5, lr}
 800c9ea:	690b      	ldr	r3, [r1, #16]
 800c9ec:	4605      	mov	r5, r0
 800c9ee:	460c      	mov	r4, r1
 800c9f0:	b913      	cbnz	r3, 800c9f8 <_fflush_r+0x10>
 800c9f2:	2500      	movs	r5, #0
 800c9f4:	4628      	mov	r0, r5
 800c9f6:	bd38      	pop	{r3, r4, r5, pc}
 800c9f8:	b118      	cbz	r0, 800ca02 <_fflush_r+0x1a>
 800c9fa:	6983      	ldr	r3, [r0, #24]
 800c9fc:	b90b      	cbnz	r3, 800ca02 <_fflush_r+0x1a>
 800c9fe:	f000 f887 	bl	800cb10 <__sinit>
 800ca02:	4b14      	ldr	r3, [pc, #80]	; (800ca54 <_fflush_r+0x6c>)
 800ca04:	429c      	cmp	r4, r3
 800ca06:	d11b      	bne.n	800ca40 <_fflush_r+0x58>
 800ca08:	686c      	ldr	r4, [r5, #4]
 800ca0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d0ef      	beq.n	800c9f2 <_fflush_r+0xa>
 800ca12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca14:	07d0      	lsls	r0, r2, #31
 800ca16:	d404      	bmi.n	800ca22 <_fflush_r+0x3a>
 800ca18:	0599      	lsls	r1, r3, #22
 800ca1a:	d402      	bmi.n	800ca22 <_fflush_r+0x3a>
 800ca1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca1e:	f000 fc9a 	bl	800d356 <__retarget_lock_acquire_recursive>
 800ca22:	4628      	mov	r0, r5
 800ca24:	4621      	mov	r1, r4
 800ca26:	f7ff ff59 	bl	800c8dc <__sflush_r>
 800ca2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca2c:	07da      	lsls	r2, r3, #31
 800ca2e:	4605      	mov	r5, r0
 800ca30:	d4e0      	bmi.n	800c9f4 <_fflush_r+0xc>
 800ca32:	89a3      	ldrh	r3, [r4, #12]
 800ca34:	059b      	lsls	r3, r3, #22
 800ca36:	d4dd      	bmi.n	800c9f4 <_fflush_r+0xc>
 800ca38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca3a:	f000 fc8d 	bl	800d358 <__retarget_lock_release_recursive>
 800ca3e:	e7d9      	b.n	800c9f4 <_fflush_r+0xc>
 800ca40:	4b05      	ldr	r3, [pc, #20]	; (800ca58 <_fflush_r+0x70>)
 800ca42:	429c      	cmp	r4, r3
 800ca44:	d101      	bne.n	800ca4a <_fflush_r+0x62>
 800ca46:	68ac      	ldr	r4, [r5, #8]
 800ca48:	e7df      	b.n	800ca0a <_fflush_r+0x22>
 800ca4a:	4b04      	ldr	r3, [pc, #16]	; (800ca5c <_fflush_r+0x74>)
 800ca4c:	429c      	cmp	r4, r3
 800ca4e:	bf08      	it	eq
 800ca50:	68ec      	ldreq	r4, [r5, #12]
 800ca52:	e7da      	b.n	800ca0a <_fflush_r+0x22>
 800ca54:	0800fb9c 	.word	0x0800fb9c
 800ca58:	0800fbbc 	.word	0x0800fbbc
 800ca5c:	0800fb7c 	.word	0x0800fb7c

0800ca60 <std>:
 800ca60:	2300      	movs	r3, #0
 800ca62:	b510      	push	{r4, lr}
 800ca64:	4604      	mov	r4, r0
 800ca66:	e9c0 3300 	strd	r3, r3, [r0]
 800ca6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ca6e:	6083      	str	r3, [r0, #8]
 800ca70:	8181      	strh	r1, [r0, #12]
 800ca72:	6643      	str	r3, [r0, #100]	; 0x64
 800ca74:	81c2      	strh	r2, [r0, #14]
 800ca76:	6183      	str	r3, [r0, #24]
 800ca78:	4619      	mov	r1, r3
 800ca7a:	2208      	movs	r2, #8
 800ca7c:	305c      	adds	r0, #92	; 0x5c
 800ca7e:	f7fd fa2b 	bl	8009ed8 <memset>
 800ca82:	4b05      	ldr	r3, [pc, #20]	; (800ca98 <std+0x38>)
 800ca84:	6263      	str	r3, [r4, #36]	; 0x24
 800ca86:	4b05      	ldr	r3, [pc, #20]	; (800ca9c <std+0x3c>)
 800ca88:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca8a:	4b05      	ldr	r3, [pc, #20]	; (800caa0 <std+0x40>)
 800ca8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca8e:	4b05      	ldr	r3, [pc, #20]	; (800caa4 <std+0x44>)
 800ca90:	6224      	str	r4, [r4, #32]
 800ca92:	6323      	str	r3, [r4, #48]	; 0x30
 800ca94:	bd10      	pop	{r4, pc}
 800ca96:	bf00      	nop
 800ca98:	0800a9dd 	.word	0x0800a9dd
 800ca9c:	0800a9ff 	.word	0x0800a9ff
 800caa0:	0800aa37 	.word	0x0800aa37
 800caa4:	0800aa5b 	.word	0x0800aa5b

0800caa8 <_cleanup_r>:
 800caa8:	4901      	ldr	r1, [pc, #4]	; (800cab0 <_cleanup_r+0x8>)
 800caaa:	f000 b8c1 	b.w	800cc30 <_fwalk_reent>
 800caae:	bf00      	nop
 800cab0:	0800c9e9 	.word	0x0800c9e9

0800cab4 <__sfmoreglue>:
 800cab4:	b570      	push	{r4, r5, r6, lr}
 800cab6:	2268      	movs	r2, #104	; 0x68
 800cab8:	1e4d      	subs	r5, r1, #1
 800caba:	4355      	muls	r5, r2
 800cabc:	460e      	mov	r6, r1
 800cabe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cac2:	f7fd fa7d 	bl	8009fc0 <_malloc_r>
 800cac6:	4604      	mov	r4, r0
 800cac8:	b140      	cbz	r0, 800cadc <__sfmoreglue+0x28>
 800caca:	2100      	movs	r1, #0
 800cacc:	e9c0 1600 	strd	r1, r6, [r0]
 800cad0:	300c      	adds	r0, #12
 800cad2:	60a0      	str	r0, [r4, #8]
 800cad4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cad8:	f7fd f9fe 	bl	8009ed8 <memset>
 800cadc:	4620      	mov	r0, r4
 800cade:	bd70      	pop	{r4, r5, r6, pc}

0800cae0 <__sfp_lock_acquire>:
 800cae0:	4801      	ldr	r0, [pc, #4]	; (800cae8 <__sfp_lock_acquire+0x8>)
 800cae2:	f000 bc38 	b.w	800d356 <__retarget_lock_acquire_recursive>
 800cae6:	bf00      	nop
 800cae8:	20002e75 	.word	0x20002e75

0800caec <__sfp_lock_release>:
 800caec:	4801      	ldr	r0, [pc, #4]	; (800caf4 <__sfp_lock_release+0x8>)
 800caee:	f000 bc33 	b.w	800d358 <__retarget_lock_release_recursive>
 800caf2:	bf00      	nop
 800caf4:	20002e75 	.word	0x20002e75

0800caf8 <__sinit_lock_acquire>:
 800caf8:	4801      	ldr	r0, [pc, #4]	; (800cb00 <__sinit_lock_acquire+0x8>)
 800cafa:	f000 bc2c 	b.w	800d356 <__retarget_lock_acquire_recursive>
 800cafe:	bf00      	nop
 800cb00:	20002e76 	.word	0x20002e76

0800cb04 <__sinit_lock_release>:
 800cb04:	4801      	ldr	r0, [pc, #4]	; (800cb0c <__sinit_lock_release+0x8>)
 800cb06:	f000 bc27 	b.w	800d358 <__retarget_lock_release_recursive>
 800cb0a:	bf00      	nop
 800cb0c:	20002e76 	.word	0x20002e76

0800cb10 <__sinit>:
 800cb10:	b510      	push	{r4, lr}
 800cb12:	4604      	mov	r4, r0
 800cb14:	f7ff fff0 	bl	800caf8 <__sinit_lock_acquire>
 800cb18:	69a3      	ldr	r3, [r4, #24]
 800cb1a:	b11b      	cbz	r3, 800cb24 <__sinit+0x14>
 800cb1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb20:	f7ff bff0 	b.w	800cb04 <__sinit_lock_release>
 800cb24:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cb28:	6523      	str	r3, [r4, #80]	; 0x50
 800cb2a:	4b13      	ldr	r3, [pc, #76]	; (800cb78 <__sinit+0x68>)
 800cb2c:	4a13      	ldr	r2, [pc, #76]	; (800cb7c <__sinit+0x6c>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	62a2      	str	r2, [r4, #40]	; 0x28
 800cb32:	42a3      	cmp	r3, r4
 800cb34:	bf04      	itt	eq
 800cb36:	2301      	moveq	r3, #1
 800cb38:	61a3      	streq	r3, [r4, #24]
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	f000 f820 	bl	800cb80 <__sfp>
 800cb40:	6060      	str	r0, [r4, #4]
 800cb42:	4620      	mov	r0, r4
 800cb44:	f000 f81c 	bl	800cb80 <__sfp>
 800cb48:	60a0      	str	r0, [r4, #8]
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f000 f818 	bl	800cb80 <__sfp>
 800cb50:	2200      	movs	r2, #0
 800cb52:	60e0      	str	r0, [r4, #12]
 800cb54:	2104      	movs	r1, #4
 800cb56:	6860      	ldr	r0, [r4, #4]
 800cb58:	f7ff ff82 	bl	800ca60 <std>
 800cb5c:	68a0      	ldr	r0, [r4, #8]
 800cb5e:	2201      	movs	r2, #1
 800cb60:	2109      	movs	r1, #9
 800cb62:	f7ff ff7d 	bl	800ca60 <std>
 800cb66:	68e0      	ldr	r0, [r4, #12]
 800cb68:	2202      	movs	r2, #2
 800cb6a:	2112      	movs	r1, #18
 800cb6c:	f7ff ff78 	bl	800ca60 <std>
 800cb70:	2301      	movs	r3, #1
 800cb72:	61a3      	str	r3, [r4, #24]
 800cb74:	e7d2      	b.n	800cb1c <__sinit+0xc>
 800cb76:	bf00      	nop
 800cb78:	0800fa24 	.word	0x0800fa24
 800cb7c:	0800caa9 	.word	0x0800caa9

0800cb80 <__sfp>:
 800cb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb82:	4607      	mov	r7, r0
 800cb84:	f7ff ffac 	bl	800cae0 <__sfp_lock_acquire>
 800cb88:	4b1e      	ldr	r3, [pc, #120]	; (800cc04 <__sfp+0x84>)
 800cb8a:	681e      	ldr	r6, [r3, #0]
 800cb8c:	69b3      	ldr	r3, [r6, #24]
 800cb8e:	b913      	cbnz	r3, 800cb96 <__sfp+0x16>
 800cb90:	4630      	mov	r0, r6
 800cb92:	f7ff ffbd 	bl	800cb10 <__sinit>
 800cb96:	3648      	adds	r6, #72	; 0x48
 800cb98:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cb9c:	3b01      	subs	r3, #1
 800cb9e:	d503      	bpl.n	800cba8 <__sfp+0x28>
 800cba0:	6833      	ldr	r3, [r6, #0]
 800cba2:	b30b      	cbz	r3, 800cbe8 <__sfp+0x68>
 800cba4:	6836      	ldr	r6, [r6, #0]
 800cba6:	e7f7      	b.n	800cb98 <__sfp+0x18>
 800cba8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cbac:	b9d5      	cbnz	r5, 800cbe4 <__sfp+0x64>
 800cbae:	4b16      	ldr	r3, [pc, #88]	; (800cc08 <__sfp+0x88>)
 800cbb0:	60e3      	str	r3, [r4, #12]
 800cbb2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cbb6:	6665      	str	r5, [r4, #100]	; 0x64
 800cbb8:	f000 fbcc 	bl	800d354 <__retarget_lock_init_recursive>
 800cbbc:	f7ff ff96 	bl	800caec <__sfp_lock_release>
 800cbc0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cbc4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cbc8:	6025      	str	r5, [r4, #0]
 800cbca:	61a5      	str	r5, [r4, #24]
 800cbcc:	2208      	movs	r2, #8
 800cbce:	4629      	mov	r1, r5
 800cbd0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cbd4:	f7fd f980 	bl	8009ed8 <memset>
 800cbd8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cbdc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cbe0:	4620      	mov	r0, r4
 800cbe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbe4:	3468      	adds	r4, #104	; 0x68
 800cbe6:	e7d9      	b.n	800cb9c <__sfp+0x1c>
 800cbe8:	2104      	movs	r1, #4
 800cbea:	4638      	mov	r0, r7
 800cbec:	f7ff ff62 	bl	800cab4 <__sfmoreglue>
 800cbf0:	4604      	mov	r4, r0
 800cbf2:	6030      	str	r0, [r6, #0]
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	d1d5      	bne.n	800cba4 <__sfp+0x24>
 800cbf8:	f7ff ff78 	bl	800caec <__sfp_lock_release>
 800cbfc:	230c      	movs	r3, #12
 800cbfe:	603b      	str	r3, [r7, #0]
 800cc00:	e7ee      	b.n	800cbe0 <__sfp+0x60>
 800cc02:	bf00      	nop
 800cc04:	0800fa24 	.word	0x0800fa24
 800cc08:	ffff0001 	.word	0xffff0001

0800cc0c <fiprintf>:
 800cc0c:	b40e      	push	{r1, r2, r3}
 800cc0e:	b503      	push	{r0, r1, lr}
 800cc10:	4601      	mov	r1, r0
 800cc12:	ab03      	add	r3, sp, #12
 800cc14:	4805      	ldr	r0, [pc, #20]	; (800cc2c <fiprintf+0x20>)
 800cc16:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc1a:	6800      	ldr	r0, [r0, #0]
 800cc1c:	9301      	str	r3, [sp, #4]
 800cc1e:	f001 fa8f 	bl	800e140 <_vfiprintf_r>
 800cc22:	b002      	add	sp, #8
 800cc24:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc28:	b003      	add	sp, #12
 800cc2a:	4770      	bx	lr
 800cc2c:	200000c4 	.word	0x200000c4

0800cc30 <_fwalk_reent>:
 800cc30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc34:	4606      	mov	r6, r0
 800cc36:	4688      	mov	r8, r1
 800cc38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cc3c:	2700      	movs	r7, #0
 800cc3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc42:	f1b9 0901 	subs.w	r9, r9, #1
 800cc46:	d505      	bpl.n	800cc54 <_fwalk_reent+0x24>
 800cc48:	6824      	ldr	r4, [r4, #0]
 800cc4a:	2c00      	cmp	r4, #0
 800cc4c:	d1f7      	bne.n	800cc3e <_fwalk_reent+0xe>
 800cc4e:	4638      	mov	r0, r7
 800cc50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc54:	89ab      	ldrh	r3, [r5, #12]
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	d907      	bls.n	800cc6a <_fwalk_reent+0x3a>
 800cc5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc5e:	3301      	adds	r3, #1
 800cc60:	d003      	beq.n	800cc6a <_fwalk_reent+0x3a>
 800cc62:	4629      	mov	r1, r5
 800cc64:	4630      	mov	r0, r6
 800cc66:	47c0      	blx	r8
 800cc68:	4307      	orrs	r7, r0
 800cc6a:	3568      	adds	r5, #104	; 0x68
 800cc6c:	e7e9      	b.n	800cc42 <_fwalk_reent+0x12>

0800cc6e <rshift>:
 800cc6e:	6903      	ldr	r3, [r0, #16]
 800cc70:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cc74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc78:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cc7c:	f100 0414 	add.w	r4, r0, #20
 800cc80:	dd45      	ble.n	800cd0e <rshift+0xa0>
 800cc82:	f011 011f 	ands.w	r1, r1, #31
 800cc86:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cc8a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cc8e:	d10c      	bne.n	800ccaa <rshift+0x3c>
 800cc90:	f100 0710 	add.w	r7, r0, #16
 800cc94:	4629      	mov	r1, r5
 800cc96:	42b1      	cmp	r1, r6
 800cc98:	d334      	bcc.n	800cd04 <rshift+0x96>
 800cc9a:	1a9b      	subs	r3, r3, r2
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	1eea      	subs	r2, r5, #3
 800cca0:	4296      	cmp	r6, r2
 800cca2:	bf38      	it	cc
 800cca4:	2300      	movcc	r3, #0
 800cca6:	4423      	add	r3, r4
 800cca8:	e015      	b.n	800ccd6 <rshift+0x68>
 800ccaa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ccae:	f1c1 0820 	rsb	r8, r1, #32
 800ccb2:	40cf      	lsrs	r7, r1
 800ccb4:	f105 0e04 	add.w	lr, r5, #4
 800ccb8:	46a1      	mov	r9, r4
 800ccba:	4576      	cmp	r6, lr
 800ccbc:	46f4      	mov	ip, lr
 800ccbe:	d815      	bhi.n	800ccec <rshift+0x7e>
 800ccc0:	1a9a      	subs	r2, r3, r2
 800ccc2:	0092      	lsls	r2, r2, #2
 800ccc4:	3a04      	subs	r2, #4
 800ccc6:	3501      	adds	r5, #1
 800ccc8:	42ae      	cmp	r6, r5
 800ccca:	bf38      	it	cc
 800cccc:	2200      	movcc	r2, #0
 800ccce:	18a3      	adds	r3, r4, r2
 800ccd0:	50a7      	str	r7, [r4, r2]
 800ccd2:	b107      	cbz	r7, 800ccd6 <rshift+0x68>
 800ccd4:	3304      	adds	r3, #4
 800ccd6:	1b1a      	subs	r2, r3, r4
 800ccd8:	42a3      	cmp	r3, r4
 800ccda:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ccde:	bf08      	it	eq
 800cce0:	2300      	moveq	r3, #0
 800cce2:	6102      	str	r2, [r0, #16]
 800cce4:	bf08      	it	eq
 800cce6:	6143      	streq	r3, [r0, #20]
 800cce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ccec:	f8dc c000 	ldr.w	ip, [ip]
 800ccf0:	fa0c fc08 	lsl.w	ip, ip, r8
 800ccf4:	ea4c 0707 	orr.w	r7, ip, r7
 800ccf8:	f849 7b04 	str.w	r7, [r9], #4
 800ccfc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cd00:	40cf      	lsrs	r7, r1
 800cd02:	e7da      	b.n	800ccba <rshift+0x4c>
 800cd04:	f851 cb04 	ldr.w	ip, [r1], #4
 800cd08:	f847 cf04 	str.w	ip, [r7, #4]!
 800cd0c:	e7c3      	b.n	800cc96 <rshift+0x28>
 800cd0e:	4623      	mov	r3, r4
 800cd10:	e7e1      	b.n	800ccd6 <rshift+0x68>

0800cd12 <__hexdig_fun>:
 800cd12:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cd16:	2b09      	cmp	r3, #9
 800cd18:	d802      	bhi.n	800cd20 <__hexdig_fun+0xe>
 800cd1a:	3820      	subs	r0, #32
 800cd1c:	b2c0      	uxtb	r0, r0
 800cd1e:	4770      	bx	lr
 800cd20:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cd24:	2b05      	cmp	r3, #5
 800cd26:	d801      	bhi.n	800cd2c <__hexdig_fun+0x1a>
 800cd28:	3847      	subs	r0, #71	; 0x47
 800cd2a:	e7f7      	b.n	800cd1c <__hexdig_fun+0xa>
 800cd2c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cd30:	2b05      	cmp	r3, #5
 800cd32:	d801      	bhi.n	800cd38 <__hexdig_fun+0x26>
 800cd34:	3827      	subs	r0, #39	; 0x27
 800cd36:	e7f1      	b.n	800cd1c <__hexdig_fun+0xa>
 800cd38:	2000      	movs	r0, #0
 800cd3a:	4770      	bx	lr

0800cd3c <__gethex>:
 800cd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd40:	ed2d 8b02 	vpush	{d8}
 800cd44:	b089      	sub	sp, #36	; 0x24
 800cd46:	ee08 0a10 	vmov	s16, r0
 800cd4a:	9304      	str	r3, [sp, #16]
 800cd4c:	4bb4      	ldr	r3, [pc, #720]	; (800d020 <__gethex+0x2e4>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	9301      	str	r3, [sp, #4]
 800cd52:	4618      	mov	r0, r3
 800cd54:	468b      	mov	fp, r1
 800cd56:	4690      	mov	r8, r2
 800cd58:	f7f3 fa42 	bl	80001e0 <strlen>
 800cd5c:	9b01      	ldr	r3, [sp, #4]
 800cd5e:	f8db 2000 	ldr.w	r2, [fp]
 800cd62:	4403      	add	r3, r0
 800cd64:	4682      	mov	sl, r0
 800cd66:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800cd6a:	9305      	str	r3, [sp, #20]
 800cd6c:	1c93      	adds	r3, r2, #2
 800cd6e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cd72:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cd76:	32fe      	adds	r2, #254	; 0xfe
 800cd78:	18d1      	adds	r1, r2, r3
 800cd7a:	461f      	mov	r7, r3
 800cd7c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cd80:	9100      	str	r1, [sp, #0]
 800cd82:	2830      	cmp	r0, #48	; 0x30
 800cd84:	d0f8      	beq.n	800cd78 <__gethex+0x3c>
 800cd86:	f7ff ffc4 	bl	800cd12 <__hexdig_fun>
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	d13a      	bne.n	800ce06 <__gethex+0xca>
 800cd90:	9901      	ldr	r1, [sp, #4]
 800cd92:	4652      	mov	r2, sl
 800cd94:	4638      	mov	r0, r7
 800cd96:	f7fd fe64 	bl	800aa62 <strncmp>
 800cd9a:	4605      	mov	r5, r0
 800cd9c:	2800      	cmp	r0, #0
 800cd9e:	d168      	bne.n	800ce72 <__gethex+0x136>
 800cda0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800cda4:	eb07 060a 	add.w	r6, r7, sl
 800cda8:	f7ff ffb3 	bl	800cd12 <__hexdig_fun>
 800cdac:	2800      	cmp	r0, #0
 800cdae:	d062      	beq.n	800ce76 <__gethex+0x13a>
 800cdb0:	4633      	mov	r3, r6
 800cdb2:	7818      	ldrb	r0, [r3, #0]
 800cdb4:	2830      	cmp	r0, #48	; 0x30
 800cdb6:	461f      	mov	r7, r3
 800cdb8:	f103 0301 	add.w	r3, r3, #1
 800cdbc:	d0f9      	beq.n	800cdb2 <__gethex+0x76>
 800cdbe:	f7ff ffa8 	bl	800cd12 <__hexdig_fun>
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	fab0 f480 	clz	r4, r0
 800cdc8:	0964      	lsrs	r4, r4, #5
 800cdca:	4635      	mov	r5, r6
 800cdcc:	9300      	str	r3, [sp, #0]
 800cdce:	463a      	mov	r2, r7
 800cdd0:	4616      	mov	r6, r2
 800cdd2:	3201      	adds	r2, #1
 800cdd4:	7830      	ldrb	r0, [r6, #0]
 800cdd6:	f7ff ff9c 	bl	800cd12 <__hexdig_fun>
 800cdda:	2800      	cmp	r0, #0
 800cddc:	d1f8      	bne.n	800cdd0 <__gethex+0x94>
 800cdde:	9901      	ldr	r1, [sp, #4]
 800cde0:	4652      	mov	r2, sl
 800cde2:	4630      	mov	r0, r6
 800cde4:	f7fd fe3d 	bl	800aa62 <strncmp>
 800cde8:	b980      	cbnz	r0, 800ce0c <__gethex+0xd0>
 800cdea:	b94d      	cbnz	r5, 800ce00 <__gethex+0xc4>
 800cdec:	eb06 050a 	add.w	r5, r6, sl
 800cdf0:	462a      	mov	r2, r5
 800cdf2:	4616      	mov	r6, r2
 800cdf4:	3201      	adds	r2, #1
 800cdf6:	7830      	ldrb	r0, [r6, #0]
 800cdf8:	f7ff ff8b 	bl	800cd12 <__hexdig_fun>
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	d1f8      	bne.n	800cdf2 <__gethex+0xb6>
 800ce00:	1bad      	subs	r5, r5, r6
 800ce02:	00ad      	lsls	r5, r5, #2
 800ce04:	e004      	b.n	800ce10 <__gethex+0xd4>
 800ce06:	2400      	movs	r4, #0
 800ce08:	4625      	mov	r5, r4
 800ce0a:	e7e0      	b.n	800cdce <__gethex+0x92>
 800ce0c:	2d00      	cmp	r5, #0
 800ce0e:	d1f7      	bne.n	800ce00 <__gethex+0xc4>
 800ce10:	7833      	ldrb	r3, [r6, #0]
 800ce12:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ce16:	2b50      	cmp	r3, #80	; 0x50
 800ce18:	d13b      	bne.n	800ce92 <__gethex+0x156>
 800ce1a:	7873      	ldrb	r3, [r6, #1]
 800ce1c:	2b2b      	cmp	r3, #43	; 0x2b
 800ce1e:	d02c      	beq.n	800ce7a <__gethex+0x13e>
 800ce20:	2b2d      	cmp	r3, #45	; 0x2d
 800ce22:	d02e      	beq.n	800ce82 <__gethex+0x146>
 800ce24:	1c71      	adds	r1, r6, #1
 800ce26:	f04f 0900 	mov.w	r9, #0
 800ce2a:	7808      	ldrb	r0, [r1, #0]
 800ce2c:	f7ff ff71 	bl	800cd12 <__hexdig_fun>
 800ce30:	1e43      	subs	r3, r0, #1
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	2b18      	cmp	r3, #24
 800ce36:	d82c      	bhi.n	800ce92 <__gethex+0x156>
 800ce38:	f1a0 0210 	sub.w	r2, r0, #16
 800ce3c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ce40:	f7ff ff67 	bl	800cd12 <__hexdig_fun>
 800ce44:	1e43      	subs	r3, r0, #1
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	2b18      	cmp	r3, #24
 800ce4a:	d91d      	bls.n	800ce88 <__gethex+0x14c>
 800ce4c:	f1b9 0f00 	cmp.w	r9, #0
 800ce50:	d000      	beq.n	800ce54 <__gethex+0x118>
 800ce52:	4252      	negs	r2, r2
 800ce54:	4415      	add	r5, r2
 800ce56:	f8cb 1000 	str.w	r1, [fp]
 800ce5a:	b1e4      	cbz	r4, 800ce96 <__gethex+0x15a>
 800ce5c:	9b00      	ldr	r3, [sp, #0]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	bf14      	ite	ne
 800ce62:	2700      	movne	r7, #0
 800ce64:	2706      	moveq	r7, #6
 800ce66:	4638      	mov	r0, r7
 800ce68:	b009      	add	sp, #36	; 0x24
 800ce6a:	ecbd 8b02 	vpop	{d8}
 800ce6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce72:	463e      	mov	r6, r7
 800ce74:	4625      	mov	r5, r4
 800ce76:	2401      	movs	r4, #1
 800ce78:	e7ca      	b.n	800ce10 <__gethex+0xd4>
 800ce7a:	f04f 0900 	mov.w	r9, #0
 800ce7e:	1cb1      	adds	r1, r6, #2
 800ce80:	e7d3      	b.n	800ce2a <__gethex+0xee>
 800ce82:	f04f 0901 	mov.w	r9, #1
 800ce86:	e7fa      	b.n	800ce7e <__gethex+0x142>
 800ce88:	230a      	movs	r3, #10
 800ce8a:	fb03 0202 	mla	r2, r3, r2, r0
 800ce8e:	3a10      	subs	r2, #16
 800ce90:	e7d4      	b.n	800ce3c <__gethex+0x100>
 800ce92:	4631      	mov	r1, r6
 800ce94:	e7df      	b.n	800ce56 <__gethex+0x11a>
 800ce96:	1bf3      	subs	r3, r6, r7
 800ce98:	3b01      	subs	r3, #1
 800ce9a:	4621      	mov	r1, r4
 800ce9c:	2b07      	cmp	r3, #7
 800ce9e:	dc0b      	bgt.n	800ceb8 <__gethex+0x17c>
 800cea0:	ee18 0a10 	vmov	r0, s16
 800cea4:	f000 faf0 	bl	800d488 <_Balloc>
 800cea8:	4604      	mov	r4, r0
 800ceaa:	b940      	cbnz	r0, 800cebe <__gethex+0x182>
 800ceac:	4b5d      	ldr	r3, [pc, #372]	; (800d024 <__gethex+0x2e8>)
 800ceae:	4602      	mov	r2, r0
 800ceb0:	21de      	movs	r1, #222	; 0xde
 800ceb2:	485d      	ldr	r0, [pc, #372]	; (800d028 <__gethex+0x2ec>)
 800ceb4:	f7fe fe68 	bl	800bb88 <__assert_func>
 800ceb8:	3101      	adds	r1, #1
 800ceba:	105b      	asrs	r3, r3, #1
 800cebc:	e7ee      	b.n	800ce9c <__gethex+0x160>
 800cebe:	f100 0914 	add.w	r9, r0, #20
 800cec2:	f04f 0b00 	mov.w	fp, #0
 800cec6:	f1ca 0301 	rsb	r3, sl, #1
 800ceca:	f8cd 9008 	str.w	r9, [sp, #8]
 800cece:	f8cd b000 	str.w	fp, [sp]
 800ced2:	9306      	str	r3, [sp, #24]
 800ced4:	42b7      	cmp	r7, r6
 800ced6:	d340      	bcc.n	800cf5a <__gethex+0x21e>
 800ced8:	9802      	ldr	r0, [sp, #8]
 800ceda:	9b00      	ldr	r3, [sp, #0]
 800cedc:	f840 3b04 	str.w	r3, [r0], #4
 800cee0:	eba0 0009 	sub.w	r0, r0, r9
 800cee4:	1080      	asrs	r0, r0, #2
 800cee6:	0146      	lsls	r6, r0, #5
 800cee8:	6120      	str	r0, [r4, #16]
 800ceea:	4618      	mov	r0, r3
 800ceec:	f000 fbbe 	bl	800d66c <__hi0bits>
 800cef0:	1a30      	subs	r0, r6, r0
 800cef2:	f8d8 6000 	ldr.w	r6, [r8]
 800cef6:	42b0      	cmp	r0, r6
 800cef8:	dd63      	ble.n	800cfc2 <__gethex+0x286>
 800cefa:	1b87      	subs	r7, r0, r6
 800cefc:	4639      	mov	r1, r7
 800cefe:	4620      	mov	r0, r4
 800cf00:	f000 ff62 	bl	800ddc8 <__any_on>
 800cf04:	4682      	mov	sl, r0
 800cf06:	b1a8      	cbz	r0, 800cf34 <__gethex+0x1f8>
 800cf08:	1e7b      	subs	r3, r7, #1
 800cf0a:	1159      	asrs	r1, r3, #5
 800cf0c:	f003 021f 	and.w	r2, r3, #31
 800cf10:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cf14:	f04f 0a01 	mov.w	sl, #1
 800cf18:	fa0a f202 	lsl.w	r2, sl, r2
 800cf1c:	420a      	tst	r2, r1
 800cf1e:	d009      	beq.n	800cf34 <__gethex+0x1f8>
 800cf20:	4553      	cmp	r3, sl
 800cf22:	dd05      	ble.n	800cf30 <__gethex+0x1f4>
 800cf24:	1eb9      	subs	r1, r7, #2
 800cf26:	4620      	mov	r0, r4
 800cf28:	f000 ff4e 	bl	800ddc8 <__any_on>
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	d145      	bne.n	800cfbc <__gethex+0x280>
 800cf30:	f04f 0a02 	mov.w	sl, #2
 800cf34:	4639      	mov	r1, r7
 800cf36:	4620      	mov	r0, r4
 800cf38:	f7ff fe99 	bl	800cc6e <rshift>
 800cf3c:	443d      	add	r5, r7
 800cf3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cf42:	42ab      	cmp	r3, r5
 800cf44:	da4c      	bge.n	800cfe0 <__gethex+0x2a4>
 800cf46:	ee18 0a10 	vmov	r0, s16
 800cf4a:	4621      	mov	r1, r4
 800cf4c:	f000 fadc 	bl	800d508 <_Bfree>
 800cf50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cf52:	2300      	movs	r3, #0
 800cf54:	6013      	str	r3, [r2, #0]
 800cf56:	27a3      	movs	r7, #163	; 0xa3
 800cf58:	e785      	b.n	800ce66 <__gethex+0x12a>
 800cf5a:	1e73      	subs	r3, r6, #1
 800cf5c:	9a05      	ldr	r2, [sp, #20]
 800cf5e:	9303      	str	r3, [sp, #12]
 800cf60:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d019      	beq.n	800cf9c <__gethex+0x260>
 800cf68:	f1bb 0f20 	cmp.w	fp, #32
 800cf6c:	d107      	bne.n	800cf7e <__gethex+0x242>
 800cf6e:	9b02      	ldr	r3, [sp, #8]
 800cf70:	9a00      	ldr	r2, [sp, #0]
 800cf72:	f843 2b04 	str.w	r2, [r3], #4
 800cf76:	9302      	str	r3, [sp, #8]
 800cf78:	2300      	movs	r3, #0
 800cf7a:	9300      	str	r3, [sp, #0]
 800cf7c:	469b      	mov	fp, r3
 800cf7e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cf82:	f7ff fec6 	bl	800cd12 <__hexdig_fun>
 800cf86:	9b00      	ldr	r3, [sp, #0]
 800cf88:	f000 000f 	and.w	r0, r0, #15
 800cf8c:	fa00 f00b 	lsl.w	r0, r0, fp
 800cf90:	4303      	orrs	r3, r0
 800cf92:	9300      	str	r3, [sp, #0]
 800cf94:	f10b 0b04 	add.w	fp, fp, #4
 800cf98:	9b03      	ldr	r3, [sp, #12]
 800cf9a:	e00d      	b.n	800cfb8 <__gethex+0x27c>
 800cf9c:	9b03      	ldr	r3, [sp, #12]
 800cf9e:	9a06      	ldr	r2, [sp, #24]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	42bb      	cmp	r3, r7
 800cfa4:	d3e0      	bcc.n	800cf68 <__gethex+0x22c>
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	9901      	ldr	r1, [sp, #4]
 800cfaa:	9307      	str	r3, [sp, #28]
 800cfac:	4652      	mov	r2, sl
 800cfae:	f7fd fd58 	bl	800aa62 <strncmp>
 800cfb2:	9b07      	ldr	r3, [sp, #28]
 800cfb4:	2800      	cmp	r0, #0
 800cfb6:	d1d7      	bne.n	800cf68 <__gethex+0x22c>
 800cfb8:	461e      	mov	r6, r3
 800cfba:	e78b      	b.n	800ced4 <__gethex+0x198>
 800cfbc:	f04f 0a03 	mov.w	sl, #3
 800cfc0:	e7b8      	b.n	800cf34 <__gethex+0x1f8>
 800cfc2:	da0a      	bge.n	800cfda <__gethex+0x29e>
 800cfc4:	1a37      	subs	r7, r6, r0
 800cfc6:	4621      	mov	r1, r4
 800cfc8:	ee18 0a10 	vmov	r0, s16
 800cfcc:	463a      	mov	r2, r7
 800cfce:	f000 fcb7 	bl	800d940 <__lshift>
 800cfd2:	1bed      	subs	r5, r5, r7
 800cfd4:	4604      	mov	r4, r0
 800cfd6:	f100 0914 	add.w	r9, r0, #20
 800cfda:	f04f 0a00 	mov.w	sl, #0
 800cfde:	e7ae      	b.n	800cf3e <__gethex+0x202>
 800cfe0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cfe4:	42a8      	cmp	r0, r5
 800cfe6:	dd72      	ble.n	800d0ce <__gethex+0x392>
 800cfe8:	1b45      	subs	r5, r0, r5
 800cfea:	42ae      	cmp	r6, r5
 800cfec:	dc36      	bgt.n	800d05c <__gethex+0x320>
 800cfee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cff2:	2b02      	cmp	r3, #2
 800cff4:	d02a      	beq.n	800d04c <__gethex+0x310>
 800cff6:	2b03      	cmp	r3, #3
 800cff8:	d02c      	beq.n	800d054 <__gethex+0x318>
 800cffa:	2b01      	cmp	r3, #1
 800cffc:	d11c      	bne.n	800d038 <__gethex+0x2fc>
 800cffe:	42ae      	cmp	r6, r5
 800d000:	d11a      	bne.n	800d038 <__gethex+0x2fc>
 800d002:	2e01      	cmp	r6, #1
 800d004:	d112      	bne.n	800d02c <__gethex+0x2f0>
 800d006:	9a04      	ldr	r2, [sp, #16]
 800d008:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d00c:	6013      	str	r3, [r2, #0]
 800d00e:	2301      	movs	r3, #1
 800d010:	6123      	str	r3, [r4, #16]
 800d012:	f8c9 3000 	str.w	r3, [r9]
 800d016:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d018:	2762      	movs	r7, #98	; 0x62
 800d01a:	601c      	str	r4, [r3, #0]
 800d01c:	e723      	b.n	800ce66 <__gethex+0x12a>
 800d01e:	bf00      	nop
 800d020:	0800fc44 	.word	0x0800fc44
 800d024:	0800fb6b 	.word	0x0800fb6b
 800d028:	0800fbdc 	.word	0x0800fbdc
 800d02c:	1e71      	subs	r1, r6, #1
 800d02e:	4620      	mov	r0, r4
 800d030:	f000 feca 	bl	800ddc8 <__any_on>
 800d034:	2800      	cmp	r0, #0
 800d036:	d1e6      	bne.n	800d006 <__gethex+0x2ca>
 800d038:	ee18 0a10 	vmov	r0, s16
 800d03c:	4621      	mov	r1, r4
 800d03e:	f000 fa63 	bl	800d508 <_Bfree>
 800d042:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d044:	2300      	movs	r3, #0
 800d046:	6013      	str	r3, [r2, #0]
 800d048:	2750      	movs	r7, #80	; 0x50
 800d04a:	e70c      	b.n	800ce66 <__gethex+0x12a>
 800d04c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d1f2      	bne.n	800d038 <__gethex+0x2fc>
 800d052:	e7d8      	b.n	800d006 <__gethex+0x2ca>
 800d054:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d056:	2b00      	cmp	r3, #0
 800d058:	d1d5      	bne.n	800d006 <__gethex+0x2ca>
 800d05a:	e7ed      	b.n	800d038 <__gethex+0x2fc>
 800d05c:	1e6f      	subs	r7, r5, #1
 800d05e:	f1ba 0f00 	cmp.w	sl, #0
 800d062:	d131      	bne.n	800d0c8 <__gethex+0x38c>
 800d064:	b127      	cbz	r7, 800d070 <__gethex+0x334>
 800d066:	4639      	mov	r1, r7
 800d068:	4620      	mov	r0, r4
 800d06a:	f000 fead 	bl	800ddc8 <__any_on>
 800d06e:	4682      	mov	sl, r0
 800d070:	117b      	asrs	r3, r7, #5
 800d072:	2101      	movs	r1, #1
 800d074:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d078:	f007 071f 	and.w	r7, r7, #31
 800d07c:	fa01 f707 	lsl.w	r7, r1, r7
 800d080:	421f      	tst	r7, r3
 800d082:	4629      	mov	r1, r5
 800d084:	4620      	mov	r0, r4
 800d086:	bf18      	it	ne
 800d088:	f04a 0a02 	orrne.w	sl, sl, #2
 800d08c:	1b76      	subs	r6, r6, r5
 800d08e:	f7ff fdee 	bl	800cc6e <rshift>
 800d092:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d096:	2702      	movs	r7, #2
 800d098:	f1ba 0f00 	cmp.w	sl, #0
 800d09c:	d048      	beq.n	800d130 <__gethex+0x3f4>
 800d09e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d0a2:	2b02      	cmp	r3, #2
 800d0a4:	d015      	beq.n	800d0d2 <__gethex+0x396>
 800d0a6:	2b03      	cmp	r3, #3
 800d0a8:	d017      	beq.n	800d0da <__gethex+0x39e>
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d109      	bne.n	800d0c2 <__gethex+0x386>
 800d0ae:	f01a 0f02 	tst.w	sl, #2
 800d0b2:	d006      	beq.n	800d0c2 <__gethex+0x386>
 800d0b4:	f8d9 0000 	ldr.w	r0, [r9]
 800d0b8:	ea4a 0a00 	orr.w	sl, sl, r0
 800d0bc:	f01a 0f01 	tst.w	sl, #1
 800d0c0:	d10e      	bne.n	800d0e0 <__gethex+0x3a4>
 800d0c2:	f047 0710 	orr.w	r7, r7, #16
 800d0c6:	e033      	b.n	800d130 <__gethex+0x3f4>
 800d0c8:	f04f 0a01 	mov.w	sl, #1
 800d0cc:	e7d0      	b.n	800d070 <__gethex+0x334>
 800d0ce:	2701      	movs	r7, #1
 800d0d0:	e7e2      	b.n	800d098 <__gethex+0x35c>
 800d0d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d0d4:	f1c3 0301 	rsb	r3, r3, #1
 800d0d8:	9315      	str	r3, [sp, #84]	; 0x54
 800d0da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d0f0      	beq.n	800d0c2 <__gethex+0x386>
 800d0e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d0e4:	f104 0314 	add.w	r3, r4, #20
 800d0e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d0ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d0f0:	f04f 0c00 	mov.w	ip, #0
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0fa:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d0fe:	d01c      	beq.n	800d13a <__gethex+0x3fe>
 800d100:	3201      	adds	r2, #1
 800d102:	6002      	str	r2, [r0, #0]
 800d104:	2f02      	cmp	r7, #2
 800d106:	f104 0314 	add.w	r3, r4, #20
 800d10a:	d13f      	bne.n	800d18c <__gethex+0x450>
 800d10c:	f8d8 2000 	ldr.w	r2, [r8]
 800d110:	3a01      	subs	r2, #1
 800d112:	42b2      	cmp	r2, r6
 800d114:	d10a      	bne.n	800d12c <__gethex+0x3f0>
 800d116:	1171      	asrs	r1, r6, #5
 800d118:	2201      	movs	r2, #1
 800d11a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d11e:	f006 061f 	and.w	r6, r6, #31
 800d122:	fa02 f606 	lsl.w	r6, r2, r6
 800d126:	421e      	tst	r6, r3
 800d128:	bf18      	it	ne
 800d12a:	4617      	movne	r7, r2
 800d12c:	f047 0720 	orr.w	r7, r7, #32
 800d130:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d132:	601c      	str	r4, [r3, #0]
 800d134:	9b04      	ldr	r3, [sp, #16]
 800d136:	601d      	str	r5, [r3, #0]
 800d138:	e695      	b.n	800ce66 <__gethex+0x12a>
 800d13a:	4299      	cmp	r1, r3
 800d13c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d140:	d8d8      	bhi.n	800d0f4 <__gethex+0x3b8>
 800d142:	68a3      	ldr	r3, [r4, #8]
 800d144:	459b      	cmp	fp, r3
 800d146:	db19      	blt.n	800d17c <__gethex+0x440>
 800d148:	6861      	ldr	r1, [r4, #4]
 800d14a:	ee18 0a10 	vmov	r0, s16
 800d14e:	3101      	adds	r1, #1
 800d150:	f000 f99a 	bl	800d488 <_Balloc>
 800d154:	4681      	mov	r9, r0
 800d156:	b918      	cbnz	r0, 800d160 <__gethex+0x424>
 800d158:	4b1a      	ldr	r3, [pc, #104]	; (800d1c4 <__gethex+0x488>)
 800d15a:	4602      	mov	r2, r0
 800d15c:	2184      	movs	r1, #132	; 0x84
 800d15e:	e6a8      	b.n	800ceb2 <__gethex+0x176>
 800d160:	6922      	ldr	r2, [r4, #16]
 800d162:	3202      	adds	r2, #2
 800d164:	f104 010c 	add.w	r1, r4, #12
 800d168:	0092      	lsls	r2, r2, #2
 800d16a:	300c      	adds	r0, #12
 800d16c:	f7fc fea6 	bl	8009ebc <memcpy>
 800d170:	4621      	mov	r1, r4
 800d172:	ee18 0a10 	vmov	r0, s16
 800d176:	f000 f9c7 	bl	800d508 <_Bfree>
 800d17a:	464c      	mov	r4, r9
 800d17c:	6923      	ldr	r3, [r4, #16]
 800d17e:	1c5a      	adds	r2, r3, #1
 800d180:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d184:	6122      	str	r2, [r4, #16]
 800d186:	2201      	movs	r2, #1
 800d188:	615a      	str	r2, [r3, #20]
 800d18a:	e7bb      	b.n	800d104 <__gethex+0x3c8>
 800d18c:	6922      	ldr	r2, [r4, #16]
 800d18e:	455a      	cmp	r2, fp
 800d190:	dd0b      	ble.n	800d1aa <__gethex+0x46e>
 800d192:	2101      	movs	r1, #1
 800d194:	4620      	mov	r0, r4
 800d196:	f7ff fd6a 	bl	800cc6e <rshift>
 800d19a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d19e:	3501      	adds	r5, #1
 800d1a0:	42ab      	cmp	r3, r5
 800d1a2:	f6ff aed0 	blt.w	800cf46 <__gethex+0x20a>
 800d1a6:	2701      	movs	r7, #1
 800d1a8:	e7c0      	b.n	800d12c <__gethex+0x3f0>
 800d1aa:	f016 061f 	ands.w	r6, r6, #31
 800d1ae:	d0fa      	beq.n	800d1a6 <__gethex+0x46a>
 800d1b0:	4453      	add	r3, sl
 800d1b2:	f1c6 0620 	rsb	r6, r6, #32
 800d1b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d1ba:	f000 fa57 	bl	800d66c <__hi0bits>
 800d1be:	42b0      	cmp	r0, r6
 800d1c0:	dbe7      	blt.n	800d192 <__gethex+0x456>
 800d1c2:	e7f0      	b.n	800d1a6 <__gethex+0x46a>
 800d1c4:	0800fb6b 	.word	0x0800fb6b

0800d1c8 <L_shift>:
 800d1c8:	f1c2 0208 	rsb	r2, r2, #8
 800d1cc:	0092      	lsls	r2, r2, #2
 800d1ce:	b570      	push	{r4, r5, r6, lr}
 800d1d0:	f1c2 0620 	rsb	r6, r2, #32
 800d1d4:	6843      	ldr	r3, [r0, #4]
 800d1d6:	6804      	ldr	r4, [r0, #0]
 800d1d8:	fa03 f506 	lsl.w	r5, r3, r6
 800d1dc:	432c      	orrs	r4, r5
 800d1de:	40d3      	lsrs	r3, r2
 800d1e0:	6004      	str	r4, [r0, #0]
 800d1e2:	f840 3f04 	str.w	r3, [r0, #4]!
 800d1e6:	4288      	cmp	r0, r1
 800d1e8:	d3f4      	bcc.n	800d1d4 <L_shift+0xc>
 800d1ea:	bd70      	pop	{r4, r5, r6, pc}

0800d1ec <__match>:
 800d1ec:	b530      	push	{r4, r5, lr}
 800d1ee:	6803      	ldr	r3, [r0, #0]
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1f6:	b914      	cbnz	r4, 800d1fe <__match+0x12>
 800d1f8:	6003      	str	r3, [r0, #0]
 800d1fa:	2001      	movs	r0, #1
 800d1fc:	bd30      	pop	{r4, r5, pc}
 800d1fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d202:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d206:	2d19      	cmp	r5, #25
 800d208:	bf98      	it	ls
 800d20a:	3220      	addls	r2, #32
 800d20c:	42a2      	cmp	r2, r4
 800d20e:	d0f0      	beq.n	800d1f2 <__match+0x6>
 800d210:	2000      	movs	r0, #0
 800d212:	e7f3      	b.n	800d1fc <__match+0x10>

0800d214 <__hexnan>:
 800d214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d218:	680b      	ldr	r3, [r1, #0]
 800d21a:	115e      	asrs	r6, r3, #5
 800d21c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d220:	f013 031f 	ands.w	r3, r3, #31
 800d224:	b087      	sub	sp, #28
 800d226:	bf18      	it	ne
 800d228:	3604      	addne	r6, #4
 800d22a:	2500      	movs	r5, #0
 800d22c:	1f37      	subs	r7, r6, #4
 800d22e:	4690      	mov	r8, r2
 800d230:	6802      	ldr	r2, [r0, #0]
 800d232:	9301      	str	r3, [sp, #4]
 800d234:	4682      	mov	sl, r0
 800d236:	f846 5c04 	str.w	r5, [r6, #-4]
 800d23a:	46b9      	mov	r9, r7
 800d23c:	463c      	mov	r4, r7
 800d23e:	9502      	str	r5, [sp, #8]
 800d240:	46ab      	mov	fp, r5
 800d242:	7851      	ldrb	r1, [r2, #1]
 800d244:	1c53      	adds	r3, r2, #1
 800d246:	9303      	str	r3, [sp, #12]
 800d248:	b341      	cbz	r1, 800d29c <__hexnan+0x88>
 800d24a:	4608      	mov	r0, r1
 800d24c:	9205      	str	r2, [sp, #20]
 800d24e:	9104      	str	r1, [sp, #16]
 800d250:	f7ff fd5f 	bl	800cd12 <__hexdig_fun>
 800d254:	2800      	cmp	r0, #0
 800d256:	d14f      	bne.n	800d2f8 <__hexnan+0xe4>
 800d258:	9904      	ldr	r1, [sp, #16]
 800d25a:	9a05      	ldr	r2, [sp, #20]
 800d25c:	2920      	cmp	r1, #32
 800d25e:	d818      	bhi.n	800d292 <__hexnan+0x7e>
 800d260:	9b02      	ldr	r3, [sp, #8]
 800d262:	459b      	cmp	fp, r3
 800d264:	dd13      	ble.n	800d28e <__hexnan+0x7a>
 800d266:	454c      	cmp	r4, r9
 800d268:	d206      	bcs.n	800d278 <__hexnan+0x64>
 800d26a:	2d07      	cmp	r5, #7
 800d26c:	dc04      	bgt.n	800d278 <__hexnan+0x64>
 800d26e:	462a      	mov	r2, r5
 800d270:	4649      	mov	r1, r9
 800d272:	4620      	mov	r0, r4
 800d274:	f7ff ffa8 	bl	800d1c8 <L_shift>
 800d278:	4544      	cmp	r4, r8
 800d27a:	d950      	bls.n	800d31e <__hexnan+0x10a>
 800d27c:	2300      	movs	r3, #0
 800d27e:	f1a4 0904 	sub.w	r9, r4, #4
 800d282:	f844 3c04 	str.w	r3, [r4, #-4]
 800d286:	f8cd b008 	str.w	fp, [sp, #8]
 800d28a:	464c      	mov	r4, r9
 800d28c:	461d      	mov	r5, r3
 800d28e:	9a03      	ldr	r2, [sp, #12]
 800d290:	e7d7      	b.n	800d242 <__hexnan+0x2e>
 800d292:	2929      	cmp	r1, #41	; 0x29
 800d294:	d156      	bne.n	800d344 <__hexnan+0x130>
 800d296:	3202      	adds	r2, #2
 800d298:	f8ca 2000 	str.w	r2, [sl]
 800d29c:	f1bb 0f00 	cmp.w	fp, #0
 800d2a0:	d050      	beq.n	800d344 <__hexnan+0x130>
 800d2a2:	454c      	cmp	r4, r9
 800d2a4:	d206      	bcs.n	800d2b4 <__hexnan+0xa0>
 800d2a6:	2d07      	cmp	r5, #7
 800d2a8:	dc04      	bgt.n	800d2b4 <__hexnan+0xa0>
 800d2aa:	462a      	mov	r2, r5
 800d2ac:	4649      	mov	r1, r9
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	f7ff ff8a 	bl	800d1c8 <L_shift>
 800d2b4:	4544      	cmp	r4, r8
 800d2b6:	d934      	bls.n	800d322 <__hexnan+0x10e>
 800d2b8:	f1a8 0204 	sub.w	r2, r8, #4
 800d2bc:	4623      	mov	r3, r4
 800d2be:	f853 1b04 	ldr.w	r1, [r3], #4
 800d2c2:	f842 1f04 	str.w	r1, [r2, #4]!
 800d2c6:	429f      	cmp	r7, r3
 800d2c8:	d2f9      	bcs.n	800d2be <__hexnan+0xaa>
 800d2ca:	1b3b      	subs	r3, r7, r4
 800d2cc:	f023 0303 	bic.w	r3, r3, #3
 800d2d0:	3304      	adds	r3, #4
 800d2d2:	3401      	adds	r4, #1
 800d2d4:	3e03      	subs	r6, #3
 800d2d6:	42b4      	cmp	r4, r6
 800d2d8:	bf88      	it	hi
 800d2da:	2304      	movhi	r3, #4
 800d2dc:	4443      	add	r3, r8
 800d2de:	2200      	movs	r2, #0
 800d2e0:	f843 2b04 	str.w	r2, [r3], #4
 800d2e4:	429f      	cmp	r7, r3
 800d2e6:	d2fb      	bcs.n	800d2e0 <__hexnan+0xcc>
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	b91b      	cbnz	r3, 800d2f4 <__hexnan+0xe0>
 800d2ec:	4547      	cmp	r7, r8
 800d2ee:	d127      	bne.n	800d340 <__hexnan+0x12c>
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	603b      	str	r3, [r7, #0]
 800d2f4:	2005      	movs	r0, #5
 800d2f6:	e026      	b.n	800d346 <__hexnan+0x132>
 800d2f8:	3501      	adds	r5, #1
 800d2fa:	2d08      	cmp	r5, #8
 800d2fc:	f10b 0b01 	add.w	fp, fp, #1
 800d300:	dd06      	ble.n	800d310 <__hexnan+0xfc>
 800d302:	4544      	cmp	r4, r8
 800d304:	d9c3      	bls.n	800d28e <__hexnan+0x7a>
 800d306:	2300      	movs	r3, #0
 800d308:	f844 3c04 	str.w	r3, [r4, #-4]
 800d30c:	2501      	movs	r5, #1
 800d30e:	3c04      	subs	r4, #4
 800d310:	6822      	ldr	r2, [r4, #0]
 800d312:	f000 000f 	and.w	r0, r0, #15
 800d316:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d31a:	6022      	str	r2, [r4, #0]
 800d31c:	e7b7      	b.n	800d28e <__hexnan+0x7a>
 800d31e:	2508      	movs	r5, #8
 800d320:	e7b5      	b.n	800d28e <__hexnan+0x7a>
 800d322:	9b01      	ldr	r3, [sp, #4]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d0df      	beq.n	800d2e8 <__hexnan+0xd4>
 800d328:	f04f 32ff 	mov.w	r2, #4294967295
 800d32c:	f1c3 0320 	rsb	r3, r3, #32
 800d330:	fa22 f303 	lsr.w	r3, r2, r3
 800d334:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d338:	401a      	ands	r2, r3
 800d33a:	f846 2c04 	str.w	r2, [r6, #-4]
 800d33e:	e7d3      	b.n	800d2e8 <__hexnan+0xd4>
 800d340:	3f04      	subs	r7, #4
 800d342:	e7d1      	b.n	800d2e8 <__hexnan+0xd4>
 800d344:	2004      	movs	r0, #4
 800d346:	b007      	add	sp, #28
 800d348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d34c <_localeconv_r>:
 800d34c:	4800      	ldr	r0, [pc, #0]	; (800d350 <_localeconv_r+0x4>)
 800d34e:	4770      	bx	lr
 800d350:	2000021c 	.word	0x2000021c

0800d354 <__retarget_lock_init_recursive>:
 800d354:	4770      	bx	lr

0800d356 <__retarget_lock_acquire_recursive>:
 800d356:	4770      	bx	lr

0800d358 <__retarget_lock_release_recursive>:
 800d358:	4770      	bx	lr
	...

0800d35c <_lseek_r>:
 800d35c:	b538      	push	{r3, r4, r5, lr}
 800d35e:	4d07      	ldr	r5, [pc, #28]	; (800d37c <_lseek_r+0x20>)
 800d360:	4604      	mov	r4, r0
 800d362:	4608      	mov	r0, r1
 800d364:	4611      	mov	r1, r2
 800d366:	2200      	movs	r2, #0
 800d368:	602a      	str	r2, [r5, #0]
 800d36a:	461a      	mov	r2, r3
 800d36c:	f7f8 f874 	bl	8005458 <_lseek>
 800d370:	1c43      	adds	r3, r0, #1
 800d372:	d102      	bne.n	800d37a <_lseek_r+0x1e>
 800d374:	682b      	ldr	r3, [r5, #0]
 800d376:	b103      	cbz	r3, 800d37a <_lseek_r+0x1e>
 800d378:	6023      	str	r3, [r4, #0]
 800d37a:	bd38      	pop	{r3, r4, r5, pc}
 800d37c:	20002e78 	.word	0x20002e78

0800d380 <__swhatbuf_r>:
 800d380:	b570      	push	{r4, r5, r6, lr}
 800d382:	460e      	mov	r6, r1
 800d384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d388:	2900      	cmp	r1, #0
 800d38a:	b096      	sub	sp, #88	; 0x58
 800d38c:	4614      	mov	r4, r2
 800d38e:	461d      	mov	r5, r3
 800d390:	da08      	bge.n	800d3a4 <__swhatbuf_r+0x24>
 800d392:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d396:	2200      	movs	r2, #0
 800d398:	602a      	str	r2, [r5, #0]
 800d39a:	061a      	lsls	r2, r3, #24
 800d39c:	d410      	bmi.n	800d3c0 <__swhatbuf_r+0x40>
 800d39e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3a2:	e00e      	b.n	800d3c2 <__swhatbuf_r+0x42>
 800d3a4:	466a      	mov	r2, sp
 800d3a6:	f001 f831 	bl	800e40c <_fstat_r>
 800d3aa:	2800      	cmp	r0, #0
 800d3ac:	dbf1      	blt.n	800d392 <__swhatbuf_r+0x12>
 800d3ae:	9a01      	ldr	r2, [sp, #4]
 800d3b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d3b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d3b8:	425a      	negs	r2, r3
 800d3ba:	415a      	adcs	r2, r3
 800d3bc:	602a      	str	r2, [r5, #0]
 800d3be:	e7ee      	b.n	800d39e <__swhatbuf_r+0x1e>
 800d3c0:	2340      	movs	r3, #64	; 0x40
 800d3c2:	2000      	movs	r0, #0
 800d3c4:	6023      	str	r3, [r4, #0]
 800d3c6:	b016      	add	sp, #88	; 0x58
 800d3c8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d3cc <__smakebuf_r>:
 800d3cc:	898b      	ldrh	r3, [r1, #12]
 800d3ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d3d0:	079d      	lsls	r5, r3, #30
 800d3d2:	4606      	mov	r6, r0
 800d3d4:	460c      	mov	r4, r1
 800d3d6:	d507      	bpl.n	800d3e8 <__smakebuf_r+0x1c>
 800d3d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d3dc:	6023      	str	r3, [r4, #0]
 800d3de:	6123      	str	r3, [r4, #16]
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	6163      	str	r3, [r4, #20]
 800d3e4:	b002      	add	sp, #8
 800d3e6:	bd70      	pop	{r4, r5, r6, pc}
 800d3e8:	ab01      	add	r3, sp, #4
 800d3ea:	466a      	mov	r2, sp
 800d3ec:	f7ff ffc8 	bl	800d380 <__swhatbuf_r>
 800d3f0:	9900      	ldr	r1, [sp, #0]
 800d3f2:	4605      	mov	r5, r0
 800d3f4:	4630      	mov	r0, r6
 800d3f6:	f7fc fde3 	bl	8009fc0 <_malloc_r>
 800d3fa:	b948      	cbnz	r0, 800d410 <__smakebuf_r+0x44>
 800d3fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d400:	059a      	lsls	r2, r3, #22
 800d402:	d4ef      	bmi.n	800d3e4 <__smakebuf_r+0x18>
 800d404:	f023 0303 	bic.w	r3, r3, #3
 800d408:	f043 0302 	orr.w	r3, r3, #2
 800d40c:	81a3      	strh	r3, [r4, #12]
 800d40e:	e7e3      	b.n	800d3d8 <__smakebuf_r+0xc>
 800d410:	4b0d      	ldr	r3, [pc, #52]	; (800d448 <__smakebuf_r+0x7c>)
 800d412:	62b3      	str	r3, [r6, #40]	; 0x28
 800d414:	89a3      	ldrh	r3, [r4, #12]
 800d416:	6020      	str	r0, [r4, #0]
 800d418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d41c:	81a3      	strh	r3, [r4, #12]
 800d41e:	9b00      	ldr	r3, [sp, #0]
 800d420:	6163      	str	r3, [r4, #20]
 800d422:	9b01      	ldr	r3, [sp, #4]
 800d424:	6120      	str	r0, [r4, #16]
 800d426:	b15b      	cbz	r3, 800d440 <__smakebuf_r+0x74>
 800d428:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d42c:	4630      	mov	r0, r6
 800d42e:	f000 ffff 	bl	800e430 <_isatty_r>
 800d432:	b128      	cbz	r0, 800d440 <__smakebuf_r+0x74>
 800d434:	89a3      	ldrh	r3, [r4, #12]
 800d436:	f023 0303 	bic.w	r3, r3, #3
 800d43a:	f043 0301 	orr.w	r3, r3, #1
 800d43e:	81a3      	strh	r3, [r4, #12]
 800d440:	89a0      	ldrh	r0, [r4, #12]
 800d442:	4305      	orrs	r5, r0
 800d444:	81a5      	strh	r5, [r4, #12]
 800d446:	e7cd      	b.n	800d3e4 <__smakebuf_r+0x18>
 800d448:	0800caa9 	.word	0x0800caa9

0800d44c <__ascii_mbtowc>:
 800d44c:	b082      	sub	sp, #8
 800d44e:	b901      	cbnz	r1, 800d452 <__ascii_mbtowc+0x6>
 800d450:	a901      	add	r1, sp, #4
 800d452:	b142      	cbz	r2, 800d466 <__ascii_mbtowc+0x1a>
 800d454:	b14b      	cbz	r3, 800d46a <__ascii_mbtowc+0x1e>
 800d456:	7813      	ldrb	r3, [r2, #0]
 800d458:	600b      	str	r3, [r1, #0]
 800d45a:	7812      	ldrb	r2, [r2, #0]
 800d45c:	1e10      	subs	r0, r2, #0
 800d45e:	bf18      	it	ne
 800d460:	2001      	movne	r0, #1
 800d462:	b002      	add	sp, #8
 800d464:	4770      	bx	lr
 800d466:	4610      	mov	r0, r2
 800d468:	e7fb      	b.n	800d462 <__ascii_mbtowc+0x16>
 800d46a:	f06f 0001 	mvn.w	r0, #1
 800d46e:	e7f8      	b.n	800d462 <__ascii_mbtowc+0x16>

0800d470 <__malloc_lock>:
 800d470:	4801      	ldr	r0, [pc, #4]	; (800d478 <__malloc_lock+0x8>)
 800d472:	f7ff bf70 	b.w	800d356 <__retarget_lock_acquire_recursive>
 800d476:	bf00      	nop
 800d478:	20002e74 	.word	0x20002e74

0800d47c <__malloc_unlock>:
 800d47c:	4801      	ldr	r0, [pc, #4]	; (800d484 <__malloc_unlock+0x8>)
 800d47e:	f7ff bf6b 	b.w	800d358 <__retarget_lock_release_recursive>
 800d482:	bf00      	nop
 800d484:	20002e74 	.word	0x20002e74

0800d488 <_Balloc>:
 800d488:	b570      	push	{r4, r5, r6, lr}
 800d48a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d48c:	4604      	mov	r4, r0
 800d48e:	460d      	mov	r5, r1
 800d490:	b976      	cbnz	r6, 800d4b0 <_Balloc+0x28>
 800d492:	2010      	movs	r0, #16
 800d494:	f7fc fd0a 	bl	8009eac <malloc>
 800d498:	4602      	mov	r2, r0
 800d49a:	6260      	str	r0, [r4, #36]	; 0x24
 800d49c:	b920      	cbnz	r0, 800d4a8 <_Balloc+0x20>
 800d49e:	4b18      	ldr	r3, [pc, #96]	; (800d500 <_Balloc+0x78>)
 800d4a0:	4818      	ldr	r0, [pc, #96]	; (800d504 <_Balloc+0x7c>)
 800d4a2:	2166      	movs	r1, #102	; 0x66
 800d4a4:	f7fe fb70 	bl	800bb88 <__assert_func>
 800d4a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4ac:	6006      	str	r6, [r0, #0]
 800d4ae:	60c6      	str	r6, [r0, #12]
 800d4b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d4b2:	68f3      	ldr	r3, [r6, #12]
 800d4b4:	b183      	cbz	r3, 800d4d8 <_Balloc+0x50>
 800d4b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4b8:	68db      	ldr	r3, [r3, #12]
 800d4ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d4be:	b9b8      	cbnz	r0, 800d4f0 <_Balloc+0x68>
 800d4c0:	2101      	movs	r1, #1
 800d4c2:	fa01 f605 	lsl.w	r6, r1, r5
 800d4c6:	1d72      	adds	r2, r6, #5
 800d4c8:	0092      	lsls	r2, r2, #2
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	f000 fc9d 	bl	800de0a <_calloc_r>
 800d4d0:	b160      	cbz	r0, 800d4ec <_Balloc+0x64>
 800d4d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d4d6:	e00e      	b.n	800d4f6 <_Balloc+0x6e>
 800d4d8:	2221      	movs	r2, #33	; 0x21
 800d4da:	2104      	movs	r1, #4
 800d4dc:	4620      	mov	r0, r4
 800d4de:	f000 fc94 	bl	800de0a <_calloc_r>
 800d4e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4e4:	60f0      	str	r0, [r6, #12]
 800d4e6:	68db      	ldr	r3, [r3, #12]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d1e4      	bne.n	800d4b6 <_Balloc+0x2e>
 800d4ec:	2000      	movs	r0, #0
 800d4ee:	bd70      	pop	{r4, r5, r6, pc}
 800d4f0:	6802      	ldr	r2, [r0, #0]
 800d4f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d4fc:	e7f7      	b.n	800d4ee <_Balloc+0x66>
 800d4fe:	bf00      	nop
 800d500:	0800faf9 	.word	0x0800faf9
 800d504:	0800fc58 	.word	0x0800fc58

0800d508 <_Bfree>:
 800d508:	b570      	push	{r4, r5, r6, lr}
 800d50a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d50c:	4605      	mov	r5, r0
 800d50e:	460c      	mov	r4, r1
 800d510:	b976      	cbnz	r6, 800d530 <_Bfree+0x28>
 800d512:	2010      	movs	r0, #16
 800d514:	f7fc fcca 	bl	8009eac <malloc>
 800d518:	4602      	mov	r2, r0
 800d51a:	6268      	str	r0, [r5, #36]	; 0x24
 800d51c:	b920      	cbnz	r0, 800d528 <_Bfree+0x20>
 800d51e:	4b09      	ldr	r3, [pc, #36]	; (800d544 <_Bfree+0x3c>)
 800d520:	4809      	ldr	r0, [pc, #36]	; (800d548 <_Bfree+0x40>)
 800d522:	218a      	movs	r1, #138	; 0x8a
 800d524:	f7fe fb30 	bl	800bb88 <__assert_func>
 800d528:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d52c:	6006      	str	r6, [r0, #0]
 800d52e:	60c6      	str	r6, [r0, #12]
 800d530:	b13c      	cbz	r4, 800d542 <_Bfree+0x3a>
 800d532:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d534:	6862      	ldr	r2, [r4, #4]
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d53c:	6021      	str	r1, [r4, #0]
 800d53e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d542:	bd70      	pop	{r4, r5, r6, pc}
 800d544:	0800faf9 	.word	0x0800faf9
 800d548:	0800fc58 	.word	0x0800fc58

0800d54c <__multadd>:
 800d54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d550:	690d      	ldr	r5, [r1, #16]
 800d552:	4607      	mov	r7, r0
 800d554:	460c      	mov	r4, r1
 800d556:	461e      	mov	r6, r3
 800d558:	f101 0c14 	add.w	ip, r1, #20
 800d55c:	2000      	movs	r0, #0
 800d55e:	f8dc 3000 	ldr.w	r3, [ip]
 800d562:	b299      	uxth	r1, r3
 800d564:	fb02 6101 	mla	r1, r2, r1, r6
 800d568:	0c1e      	lsrs	r6, r3, #16
 800d56a:	0c0b      	lsrs	r3, r1, #16
 800d56c:	fb02 3306 	mla	r3, r2, r6, r3
 800d570:	b289      	uxth	r1, r1
 800d572:	3001      	adds	r0, #1
 800d574:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d578:	4285      	cmp	r5, r0
 800d57a:	f84c 1b04 	str.w	r1, [ip], #4
 800d57e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d582:	dcec      	bgt.n	800d55e <__multadd+0x12>
 800d584:	b30e      	cbz	r6, 800d5ca <__multadd+0x7e>
 800d586:	68a3      	ldr	r3, [r4, #8]
 800d588:	42ab      	cmp	r3, r5
 800d58a:	dc19      	bgt.n	800d5c0 <__multadd+0x74>
 800d58c:	6861      	ldr	r1, [r4, #4]
 800d58e:	4638      	mov	r0, r7
 800d590:	3101      	adds	r1, #1
 800d592:	f7ff ff79 	bl	800d488 <_Balloc>
 800d596:	4680      	mov	r8, r0
 800d598:	b928      	cbnz	r0, 800d5a6 <__multadd+0x5a>
 800d59a:	4602      	mov	r2, r0
 800d59c:	4b0c      	ldr	r3, [pc, #48]	; (800d5d0 <__multadd+0x84>)
 800d59e:	480d      	ldr	r0, [pc, #52]	; (800d5d4 <__multadd+0x88>)
 800d5a0:	21b5      	movs	r1, #181	; 0xb5
 800d5a2:	f7fe faf1 	bl	800bb88 <__assert_func>
 800d5a6:	6922      	ldr	r2, [r4, #16]
 800d5a8:	3202      	adds	r2, #2
 800d5aa:	f104 010c 	add.w	r1, r4, #12
 800d5ae:	0092      	lsls	r2, r2, #2
 800d5b0:	300c      	adds	r0, #12
 800d5b2:	f7fc fc83 	bl	8009ebc <memcpy>
 800d5b6:	4621      	mov	r1, r4
 800d5b8:	4638      	mov	r0, r7
 800d5ba:	f7ff ffa5 	bl	800d508 <_Bfree>
 800d5be:	4644      	mov	r4, r8
 800d5c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d5c4:	3501      	adds	r5, #1
 800d5c6:	615e      	str	r6, [r3, #20]
 800d5c8:	6125      	str	r5, [r4, #16]
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5d0:	0800fb6b 	.word	0x0800fb6b
 800d5d4:	0800fc58 	.word	0x0800fc58

0800d5d8 <__s2b>:
 800d5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5dc:	460c      	mov	r4, r1
 800d5de:	4615      	mov	r5, r2
 800d5e0:	461f      	mov	r7, r3
 800d5e2:	2209      	movs	r2, #9
 800d5e4:	3308      	adds	r3, #8
 800d5e6:	4606      	mov	r6, r0
 800d5e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d5ec:	2100      	movs	r1, #0
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	db09      	blt.n	800d608 <__s2b+0x30>
 800d5f4:	4630      	mov	r0, r6
 800d5f6:	f7ff ff47 	bl	800d488 <_Balloc>
 800d5fa:	b940      	cbnz	r0, 800d60e <__s2b+0x36>
 800d5fc:	4602      	mov	r2, r0
 800d5fe:	4b19      	ldr	r3, [pc, #100]	; (800d664 <__s2b+0x8c>)
 800d600:	4819      	ldr	r0, [pc, #100]	; (800d668 <__s2b+0x90>)
 800d602:	21ce      	movs	r1, #206	; 0xce
 800d604:	f7fe fac0 	bl	800bb88 <__assert_func>
 800d608:	0052      	lsls	r2, r2, #1
 800d60a:	3101      	adds	r1, #1
 800d60c:	e7f0      	b.n	800d5f0 <__s2b+0x18>
 800d60e:	9b08      	ldr	r3, [sp, #32]
 800d610:	6143      	str	r3, [r0, #20]
 800d612:	2d09      	cmp	r5, #9
 800d614:	f04f 0301 	mov.w	r3, #1
 800d618:	6103      	str	r3, [r0, #16]
 800d61a:	dd16      	ble.n	800d64a <__s2b+0x72>
 800d61c:	f104 0909 	add.w	r9, r4, #9
 800d620:	46c8      	mov	r8, r9
 800d622:	442c      	add	r4, r5
 800d624:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d628:	4601      	mov	r1, r0
 800d62a:	3b30      	subs	r3, #48	; 0x30
 800d62c:	220a      	movs	r2, #10
 800d62e:	4630      	mov	r0, r6
 800d630:	f7ff ff8c 	bl	800d54c <__multadd>
 800d634:	45a0      	cmp	r8, r4
 800d636:	d1f5      	bne.n	800d624 <__s2b+0x4c>
 800d638:	f1a5 0408 	sub.w	r4, r5, #8
 800d63c:	444c      	add	r4, r9
 800d63e:	1b2d      	subs	r5, r5, r4
 800d640:	1963      	adds	r3, r4, r5
 800d642:	42bb      	cmp	r3, r7
 800d644:	db04      	blt.n	800d650 <__s2b+0x78>
 800d646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d64a:	340a      	adds	r4, #10
 800d64c:	2509      	movs	r5, #9
 800d64e:	e7f6      	b.n	800d63e <__s2b+0x66>
 800d650:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d654:	4601      	mov	r1, r0
 800d656:	3b30      	subs	r3, #48	; 0x30
 800d658:	220a      	movs	r2, #10
 800d65a:	4630      	mov	r0, r6
 800d65c:	f7ff ff76 	bl	800d54c <__multadd>
 800d660:	e7ee      	b.n	800d640 <__s2b+0x68>
 800d662:	bf00      	nop
 800d664:	0800fb6b 	.word	0x0800fb6b
 800d668:	0800fc58 	.word	0x0800fc58

0800d66c <__hi0bits>:
 800d66c:	0c03      	lsrs	r3, r0, #16
 800d66e:	041b      	lsls	r3, r3, #16
 800d670:	b9d3      	cbnz	r3, 800d6a8 <__hi0bits+0x3c>
 800d672:	0400      	lsls	r0, r0, #16
 800d674:	2310      	movs	r3, #16
 800d676:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d67a:	bf04      	itt	eq
 800d67c:	0200      	lsleq	r0, r0, #8
 800d67e:	3308      	addeq	r3, #8
 800d680:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d684:	bf04      	itt	eq
 800d686:	0100      	lsleq	r0, r0, #4
 800d688:	3304      	addeq	r3, #4
 800d68a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d68e:	bf04      	itt	eq
 800d690:	0080      	lsleq	r0, r0, #2
 800d692:	3302      	addeq	r3, #2
 800d694:	2800      	cmp	r0, #0
 800d696:	db05      	blt.n	800d6a4 <__hi0bits+0x38>
 800d698:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d69c:	f103 0301 	add.w	r3, r3, #1
 800d6a0:	bf08      	it	eq
 800d6a2:	2320      	moveq	r3, #32
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	4770      	bx	lr
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	e7e4      	b.n	800d676 <__hi0bits+0xa>

0800d6ac <__lo0bits>:
 800d6ac:	6803      	ldr	r3, [r0, #0]
 800d6ae:	f013 0207 	ands.w	r2, r3, #7
 800d6b2:	4601      	mov	r1, r0
 800d6b4:	d00b      	beq.n	800d6ce <__lo0bits+0x22>
 800d6b6:	07da      	lsls	r2, r3, #31
 800d6b8:	d423      	bmi.n	800d702 <__lo0bits+0x56>
 800d6ba:	0798      	lsls	r0, r3, #30
 800d6bc:	bf49      	itett	mi
 800d6be:	085b      	lsrmi	r3, r3, #1
 800d6c0:	089b      	lsrpl	r3, r3, #2
 800d6c2:	2001      	movmi	r0, #1
 800d6c4:	600b      	strmi	r3, [r1, #0]
 800d6c6:	bf5c      	itt	pl
 800d6c8:	600b      	strpl	r3, [r1, #0]
 800d6ca:	2002      	movpl	r0, #2
 800d6cc:	4770      	bx	lr
 800d6ce:	b298      	uxth	r0, r3
 800d6d0:	b9a8      	cbnz	r0, 800d6fe <__lo0bits+0x52>
 800d6d2:	0c1b      	lsrs	r3, r3, #16
 800d6d4:	2010      	movs	r0, #16
 800d6d6:	b2da      	uxtb	r2, r3
 800d6d8:	b90a      	cbnz	r2, 800d6de <__lo0bits+0x32>
 800d6da:	3008      	adds	r0, #8
 800d6dc:	0a1b      	lsrs	r3, r3, #8
 800d6de:	071a      	lsls	r2, r3, #28
 800d6e0:	bf04      	itt	eq
 800d6e2:	091b      	lsreq	r3, r3, #4
 800d6e4:	3004      	addeq	r0, #4
 800d6e6:	079a      	lsls	r2, r3, #30
 800d6e8:	bf04      	itt	eq
 800d6ea:	089b      	lsreq	r3, r3, #2
 800d6ec:	3002      	addeq	r0, #2
 800d6ee:	07da      	lsls	r2, r3, #31
 800d6f0:	d403      	bmi.n	800d6fa <__lo0bits+0x4e>
 800d6f2:	085b      	lsrs	r3, r3, #1
 800d6f4:	f100 0001 	add.w	r0, r0, #1
 800d6f8:	d005      	beq.n	800d706 <__lo0bits+0x5a>
 800d6fa:	600b      	str	r3, [r1, #0]
 800d6fc:	4770      	bx	lr
 800d6fe:	4610      	mov	r0, r2
 800d700:	e7e9      	b.n	800d6d6 <__lo0bits+0x2a>
 800d702:	2000      	movs	r0, #0
 800d704:	4770      	bx	lr
 800d706:	2020      	movs	r0, #32
 800d708:	4770      	bx	lr
	...

0800d70c <__i2b>:
 800d70c:	b510      	push	{r4, lr}
 800d70e:	460c      	mov	r4, r1
 800d710:	2101      	movs	r1, #1
 800d712:	f7ff feb9 	bl	800d488 <_Balloc>
 800d716:	4602      	mov	r2, r0
 800d718:	b928      	cbnz	r0, 800d726 <__i2b+0x1a>
 800d71a:	4b05      	ldr	r3, [pc, #20]	; (800d730 <__i2b+0x24>)
 800d71c:	4805      	ldr	r0, [pc, #20]	; (800d734 <__i2b+0x28>)
 800d71e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d722:	f7fe fa31 	bl	800bb88 <__assert_func>
 800d726:	2301      	movs	r3, #1
 800d728:	6144      	str	r4, [r0, #20]
 800d72a:	6103      	str	r3, [r0, #16]
 800d72c:	bd10      	pop	{r4, pc}
 800d72e:	bf00      	nop
 800d730:	0800fb6b 	.word	0x0800fb6b
 800d734:	0800fc58 	.word	0x0800fc58

0800d738 <__multiply>:
 800d738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d73c:	4691      	mov	r9, r2
 800d73e:	690a      	ldr	r2, [r1, #16]
 800d740:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d744:	429a      	cmp	r2, r3
 800d746:	bfb8      	it	lt
 800d748:	460b      	movlt	r3, r1
 800d74a:	460c      	mov	r4, r1
 800d74c:	bfbc      	itt	lt
 800d74e:	464c      	movlt	r4, r9
 800d750:	4699      	movlt	r9, r3
 800d752:	6927      	ldr	r7, [r4, #16]
 800d754:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d758:	68a3      	ldr	r3, [r4, #8]
 800d75a:	6861      	ldr	r1, [r4, #4]
 800d75c:	eb07 060a 	add.w	r6, r7, sl
 800d760:	42b3      	cmp	r3, r6
 800d762:	b085      	sub	sp, #20
 800d764:	bfb8      	it	lt
 800d766:	3101      	addlt	r1, #1
 800d768:	f7ff fe8e 	bl	800d488 <_Balloc>
 800d76c:	b930      	cbnz	r0, 800d77c <__multiply+0x44>
 800d76e:	4602      	mov	r2, r0
 800d770:	4b44      	ldr	r3, [pc, #272]	; (800d884 <__multiply+0x14c>)
 800d772:	4845      	ldr	r0, [pc, #276]	; (800d888 <__multiply+0x150>)
 800d774:	f240 115d 	movw	r1, #349	; 0x15d
 800d778:	f7fe fa06 	bl	800bb88 <__assert_func>
 800d77c:	f100 0514 	add.w	r5, r0, #20
 800d780:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d784:	462b      	mov	r3, r5
 800d786:	2200      	movs	r2, #0
 800d788:	4543      	cmp	r3, r8
 800d78a:	d321      	bcc.n	800d7d0 <__multiply+0x98>
 800d78c:	f104 0314 	add.w	r3, r4, #20
 800d790:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d794:	f109 0314 	add.w	r3, r9, #20
 800d798:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d79c:	9202      	str	r2, [sp, #8]
 800d79e:	1b3a      	subs	r2, r7, r4
 800d7a0:	3a15      	subs	r2, #21
 800d7a2:	f022 0203 	bic.w	r2, r2, #3
 800d7a6:	3204      	adds	r2, #4
 800d7a8:	f104 0115 	add.w	r1, r4, #21
 800d7ac:	428f      	cmp	r7, r1
 800d7ae:	bf38      	it	cc
 800d7b0:	2204      	movcc	r2, #4
 800d7b2:	9201      	str	r2, [sp, #4]
 800d7b4:	9a02      	ldr	r2, [sp, #8]
 800d7b6:	9303      	str	r3, [sp, #12]
 800d7b8:	429a      	cmp	r2, r3
 800d7ba:	d80c      	bhi.n	800d7d6 <__multiply+0x9e>
 800d7bc:	2e00      	cmp	r6, #0
 800d7be:	dd03      	ble.n	800d7c8 <__multiply+0x90>
 800d7c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d05a      	beq.n	800d87e <__multiply+0x146>
 800d7c8:	6106      	str	r6, [r0, #16]
 800d7ca:	b005      	add	sp, #20
 800d7cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7d0:	f843 2b04 	str.w	r2, [r3], #4
 800d7d4:	e7d8      	b.n	800d788 <__multiply+0x50>
 800d7d6:	f8b3 a000 	ldrh.w	sl, [r3]
 800d7da:	f1ba 0f00 	cmp.w	sl, #0
 800d7de:	d024      	beq.n	800d82a <__multiply+0xf2>
 800d7e0:	f104 0e14 	add.w	lr, r4, #20
 800d7e4:	46a9      	mov	r9, r5
 800d7e6:	f04f 0c00 	mov.w	ip, #0
 800d7ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d7ee:	f8d9 1000 	ldr.w	r1, [r9]
 800d7f2:	fa1f fb82 	uxth.w	fp, r2
 800d7f6:	b289      	uxth	r1, r1
 800d7f8:	fb0a 110b 	mla	r1, sl, fp, r1
 800d7fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d800:	f8d9 2000 	ldr.w	r2, [r9]
 800d804:	4461      	add	r1, ip
 800d806:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d80a:	fb0a c20b 	mla	r2, sl, fp, ip
 800d80e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d812:	b289      	uxth	r1, r1
 800d814:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d818:	4577      	cmp	r7, lr
 800d81a:	f849 1b04 	str.w	r1, [r9], #4
 800d81e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d822:	d8e2      	bhi.n	800d7ea <__multiply+0xb2>
 800d824:	9a01      	ldr	r2, [sp, #4]
 800d826:	f845 c002 	str.w	ip, [r5, r2]
 800d82a:	9a03      	ldr	r2, [sp, #12]
 800d82c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d830:	3304      	adds	r3, #4
 800d832:	f1b9 0f00 	cmp.w	r9, #0
 800d836:	d020      	beq.n	800d87a <__multiply+0x142>
 800d838:	6829      	ldr	r1, [r5, #0]
 800d83a:	f104 0c14 	add.w	ip, r4, #20
 800d83e:	46ae      	mov	lr, r5
 800d840:	f04f 0a00 	mov.w	sl, #0
 800d844:	f8bc b000 	ldrh.w	fp, [ip]
 800d848:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d84c:	fb09 220b 	mla	r2, r9, fp, r2
 800d850:	4492      	add	sl, r2
 800d852:	b289      	uxth	r1, r1
 800d854:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d858:	f84e 1b04 	str.w	r1, [lr], #4
 800d85c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d860:	f8be 1000 	ldrh.w	r1, [lr]
 800d864:	0c12      	lsrs	r2, r2, #16
 800d866:	fb09 1102 	mla	r1, r9, r2, r1
 800d86a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d86e:	4567      	cmp	r7, ip
 800d870:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d874:	d8e6      	bhi.n	800d844 <__multiply+0x10c>
 800d876:	9a01      	ldr	r2, [sp, #4]
 800d878:	50a9      	str	r1, [r5, r2]
 800d87a:	3504      	adds	r5, #4
 800d87c:	e79a      	b.n	800d7b4 <__multiply+0x7c>
 800d87e:	3e01      	subs	r6, #1
 800d880:	e79c      	b.n	800d7bc <__multiply+0x84>
 800d882:	bf00      	nop
 800d884:	0800fb6b 	.word	0x0800fb6b
 800d888:	0800fc58 	.word	0x0800fc58

0800d88c <__pow5mult>:
 800d88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d890:	4615      	mov	r5, r2
 800d892:	f012 0203 	ands.w	r2, r2, #3
 800d896:	4606      	mov	r6, r0
 800d898:	460f      	mov	r7, r1
 800d89a:	d007      	beq.n	800d8ac <__pow5mult+0x20>
 800d89c:	4c25      	ldr	r4, [pc, #148]	; (800d934 <__pow5mult+0xa8>)
 800d89e:	3a01      	subs	r2, #1
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d8a6:	f7ff fe51 	bl	800d54c <__multadd>
 800d8aa:	4607      	mov	r7, r0
 800d8ac:	10ad      	asrs	r5, r5, #2
 800d8ae:	d03d      	beq.n	800d92c <__pow5mult+0xa0>
 800d8b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d8b2:	b97c      	cbnz	r4, 800d8d4 <__pow5mult+0x48>
 800d8b4:	2010      	movs	r0, #16
 800d8b6:	f7fc faf9 	bl	8009eac <malloc>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	6270      	str	r0, [r6, #36]	; 0x24
 800d8be:	b928      	cbnz	r0, 800d8cc <__pow5mult+0x40>
 800d8c0:	4b1d      	ldr	r3, [pc, #116]	; (800d938 <__pow5mult+0xac>)
 800d8c2:	481e      	ldr	r0, [pc, #120]	; (800d93c <__pow5mult+0xb0>)
 800d8c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d8c8:	f7fe f95e 	bl	800bb88 <__assert_func>
 800d8cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d8d0:	6004      	str	r4, [r0, #0]
 800d8d2:	60c4      	str	r4, [r0, #12]
 800d8d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d8d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d8dc:	b94c      	cbnz	r4, 800d8f2 <__pow5mult+0x66>
 800d8de:	f240 2171 	movw	r1, #625	; 0x271
 800d8e2:	4630      	mov	r0, r6
 800d8e4:	f7ff ff12 	bl	800d70c <__i2b>
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800d8ee:	4604      	mov	r4, r0
 800d8f0:	6003      	str	r3, [r0, #0]
 800d8f2:	f04f 0900 	mov.w	r9, #0
 800d8f6:	07eb      	lsls	r3, r5, #31
 800d8f8:	d50a      	bpl.n	800d910 <__pow5mult+0x84>
 800d8fa:	4639      	mov	r1, r7
 800d8fc:	4622      	mov	r2, r4
 800d8fe:	4630      	mov	r0, r6
 800d900:	f7ff ff1a 	bl	800d738 <__multiply>
 800d904:	4639      	mov	r1, r7
 800d906:	4680      	mov	r8, r0
 800d908:	4630      	mov	r0, r6
 800d90a:	f7ff fdfd 	bl	800d508 <_Bfree>
 800d90e:	4647      	mov	r7, r8
 800d910:	106d      	asrs	r5, r5, #1
 800d912:	d00b      	beq.n	800d92c <__pow5mult+0xa0>
 800d914:	6820      	ldr	r0, [r4, #0]
 800d916:	b938      	cbnz	r0, 800d928 <__pow5mult+0x9c>
 800d918:	4622      	mov	r2, r4
 800d91a:	4621      	mov	r1, r4
 800d91c:	4630      	mov	r0, r6
 800d91e:	f7ff ff0b 	bl	800d738 <__multiply>
 800d922:	6020      	str	r0, [r4, #0]
 800d924:	f8c0 9000 	str.w	r9, [r0]
 800d928:	4604      	mov	r4, r0
 800d92a:	e7e4      	b.n	800d8f6 <__pow5mult+0x6a>
 800d92c:	4638      	mov	r0, r7
 800d92e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d932:	bf00      	nop
 800d934:	0800fda8 	.word	0x0800fda8
 800d938:	0800faf9 	.word	0x0800faf9
 800d93c:	0800fc58 	.word	0x0800fc58

0800d940 <__lshift>:
 800d940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d944:	460c      	mov	r4, r1
 800d946:	6849      	ldr	r1, [r1, #4]
 800d948:	6923      	ldr	r3, [r4, #16]
 800d94a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d94e:	68a3      	ldr	r3, [r4, #8]
 800d950:	4607      	mov	r7, r0
 800d952:	4691      	mov	r9, r2
 800d954:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d958:	f108 0601 	add.w	r6, r8, #1
 800d95c:	42b3      	cmp	r3, r6
 800d95e:	db0b      	blt.n	800d978 <__lshift+0x38>
 800d960:	4638      	mov	r0, r7
 800d962:	f7ff fd91 	bl	800d488 <_Balloc>
 800d966:	4605      	mov	r5, r0
 800d968:	b948      	cbnz	r0, 800d97e <__lshift+0x3e>
 800d96a:	4602      	mov	r2, r0
 800d96c:	4b2a      	ldr	r3, [pc, #168]	; (800da18 <__lshift+0xd8>)
 800d96e:	482b      	ldr	r0, [pc, #172]	; (800da1c <__lshift+0xdc>)
 800d970:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d974:	f7fe f908 	bl	800bb88 <__assert_func>
 800d978:	3101      	adds	r1, #1
 800d97a:	005b      	lsls	r3, r3, #1
 800d97c:	e7ee      	b.n	800d95c <__lshift+0x1c>
 800d97e:	2300      	movs	r3, #0
 800d980:	f100 0114 	add.w	r1, r0, #20
 800d984:	f100 0210 	add.w	r2, r0, #16
 800d988:	4618      	mov	r0, r3
 800d98a:	4553      	cmp	r3, sl
 800d98c:	db37      	blt.n	800d9fe <__lshift+0xbe>
 800d98e:	6920      	ldr	r0, [r4, #16]
 800d990:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d994:	f104 0314 	add.w	r3, r4, #20
 800d998:	f019 091f 	ands.w	r9, r9, #31
 800d99c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d9a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d9a4:	d02f      	beq.n	800da06 <__lshift+0xc6>
 800d9a6:	f1c9 0e20 	rsb	lr, r9, #32
 800d9aa:	468a      	mov	sl, r1
 800d9ac:	f04f 0c00 	mov.w	ip, #0
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	fa02 f209 	lsl.w	r2, r2, r9
 800d9b6:	ea42 020c 	orr.w	r2, r2, ip
 800d9ba:	f84a 2b04 	str.w	r2, [sl], #4
 800d9be:	f853 2b04 	ldr.w	r2, [r3], #4
 800d9c2:	4298      	cmp	r0, r3
 800d9c4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d9c8:	d8f2      	bhi.n	800d9b0 <__lshift+0x70>
 800d9ca:	1b03      	subs	r3, r0, r4
 800d9cc:	3b15      	subs	r3, #21
 800d9ce:	f023 0303 	bic.w	r3, r3, #3
 800d9d2:	3304      	adds	r3, #4
 800d9d4:	f104 0215 	add.w	r2, r4, #21
 800d9d8:	4290      	cmp	r0, r2
 800d9da:	bf38      	it	cc
 800d9dc:	2304      	movcc	r3, #4
 800d9de:	f841 c003 	str.w	ip, [r1, r3]
 800d9e2:	f1bc 0f00 	cmp.w	ip, #0
 800d9e6:	d001      	beq.n	800d9ec <__lshift+0xac>
 800d9e8:	f108 0602 	add.w	r6, r8, #2
 800d9ec:	3e01      	subs	r6, #1
 800d9ee:	4638      	mov	r0, r7
 800d9f0:	612e      	str	r6, [r5, #16]
 800d9f2:	4621      	mov	r1, r4
 800d9f4:	f7ff fd88 	bl	800d508 <_Bfree>
 800d9f8:	4628      	mov	r0, r5
 800d9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800da02:	3301      	adds	r3, #1
 800da04:	e7c1      	b.n	800d98a <__lshift+0x4a>
 800da06:	3904      	subs	r1, #4
 800da08:	f853 2b04 	ldr.w	r2, [r3], #4
 800da0c:	f841 2f04 	str.w	r2, [r1, #4]!
 800da10:	4298      	cmp	r0, r3
 800da12:	d8f9      	bhi.n	800da08 <__lshift+0xc8>
 800da14:	e7ea      	b.n	800d9ec <__lshift+0xac>
 800da16:	bf00      	nop
 800da18:	0800fb6b 	.word	0x0800fb6b
 800da1c:	0800fc58 	.word	0x0800fc58

0800da20 <__mcmp>:
 800da20:	b530      	push	{r4, r5, lr}
 800da22:	6902      	ldr	r2, [r0, #16]
 800da24:	690c      	ldr	r4, [r1, #16]
 800da26:	1b12      	subs	r2, r2, r4
 800da28:	d10e      	bne.n	800da48 <__mcmp+0x28>
 800da2a:	f100 0314 	add.w	r3, r0, #20
 800da2e:	3114      	adds	r1, #20
 800da30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800da34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800da38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800da3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800da40:	42a5      	cmp	r5, r4
 800da42:	d003      	beq.n	800da4c <__mcmp+0x2c>
 800da44:	d305      	bcc.n	800da52 <__mcmp+0x32>
 800da46:	2201      	movs	r2, #1
 800da48:	4610      	mov	r0, r2
 800da4a:	bd30      	pop	{r4, r5, pc}
 800da4c:	4283      	cmp	r3, r0
 800da4e:	d3f3      	bcc.n	800da38 <__mcmp+0x18>
 800da50:	e7fa      	b.n	800da48 <__mcmp+0x28>
 800da52:	f04f 32ff 	mov.w	r2, #4294967295
 800da56:	e7f7      	b.n	800da48 <__mcmp+0x28>

0800da58 <__mdiff>:
 800da58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da5c:	460c      	mov	r4, r1
 800da5e:	4606      	mov	r6, r0
 800da60:	4611      	mov	r1, r2
 800da62:	4620      	mov	r0, r4
 800da64:	4690      	mov	r8, r2
 800da66:	f7ff ffdb 	bl	800da20 <__mcmp>
 800da6a:	1e05      	subs	r5, r0, #0
 800da6c:	d110      	bne.n	800da90 <__mdiff+0x38>
 800da6e:	4629      	mov	r1, r5
 800da70:	4630      	mov	r0, r6
 800da72:	f7ff fd09 	bl	800d488 <_Balloc>
 800da76:	b930      	cbnz	r0, 800da86 <__mdiff+0x2e>
 800da78:	4b3a      	ldr	r3, [pc, #232]	; (800db64 <__mdiff+0x10c>)
 800da7a:	4602      	mov	r2, r0
 800da7c:	f240 2132 	movw	r1, #562	; 0x232
 800da80:	4839      	ldr	r0, [pc, #228]	; (800db68 <__mdiff+0x110>)
 800da82:	f7fe f881 	bl	800bb88 <__assert_func>
 800da86:	2301      	movs	r3, #1
 800da88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800da8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da90:	bfa4      	itt	ge
 800da92:	4643      	movge	r3, r8
 800da94:	46a0      	movge	r8, r4
 800da96:	4630      	mov	r0, r6
 800da98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800da9c:	bfa6      	itte	ge
 800da9e:	461c      	movge	r4, r3
 800daa0:	2500      	movge	r5, #0
 800daa2:	2501      	movlt	r5, #1
 800daa4:	f7ff fcf0 	bl	800d488 <_Balloc>
 800daa8:	b920      	cbnz	r0, 800dab4 <__mdiff+0x5c>
 800daaa:	4b2e      	ldr	r3, [pc, #184]	; (800db64 <__mdiff+0x10c>)
 800daac:	4602      	mov	r2, r0
 800daae:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dab2:	e7e5      	b.n	800da80 <__mdiff+0x28>
 800dab4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dab8:	6926      	ldr	r6, [r4, #16]
 800daba:	60c5      	str	r5, [r0, #12]
 800dabc:	f104 0914 	add.w	r9, r4, #20
 800dac0:	f108 0514 	add.w	r5, r8, #20
 800dac4:	f100 0e14 	add.w	lr, r0, #20
 800dac8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dacc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dad0:	f108 0210 	add.w	r2, r8, #16
 800dad4:	46f2      	mov	sl, lr
 800dad6:	2100      	movs	r1, #0
 800dad8:	f859 3b04 	ldr.w	r3, [r9], #4
 800dadc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dae0:	fa1f f883 	uxth.w	r8, r3
 800dae4:	fa11 f18b 	uxtah	r1, r1, fp
 800dae8:	0c1b      	lsrs	r3, r3, #16
 800daea:	eba1 0808 	sub.w	r8, r1, r8
 800daee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800daf2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800daf6:	fa1f f888 	uxth.w	r8, r8
 800dafa:	1419      	asrs	r1, r3, #16
 800dafc:	454e      	cmp	r6, r9
 800dafe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800db02:	f84a 3b04 	str.w	r3, [sl], #4
 800db06:	d8e7      	bhi.n	800dad8 <__mdiff+0x80>
 800db08:	1b33      	subs	r3, r6, r4
 800db0a:	3b15      	subs	r3, #21
 800db0c:	f023 0303 	bic.w	r3, r3, #3
 800db10:	3304      	adds	r3, #4
 800db12:	3415      	adds	r4, #21
 800db14:	42a6      	cmp	r6, r4
 800db16:	bf38      	it	cc
 800db18:	2304      	movcc	r3, #4
 800db1a:	441d      	add	r5, r3
 800db1c:	4473      	add	r3, lr
 800db1e:	469e      	mov	lr, r3
 800db20:	462e      	mov	r6, r5
 800db22:	4566      	cmp	r6, ip
 800db24:	d30e      	bcc.n	800db44 <__mdiff+0xec>
 800db26:	f10c 0203 	add.w	r2, ip, #3
 800db2a:	1b52      	subs	r2, r2, r5
 800db2c:	f022 0203 	bic.w	r2, r2, #3
 800db30:	3d03      	subs	r5, #3
 800db32:	45ac      	cmp	ip, r5
 800db34:	bf38      	it	cc
 800db36:	2200      	movcc	r2, #0
 800db38:	441a      	add	r2, r3
 800db3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800db3e:	b17b      	cbz	r3, 800db60 <__mdiff+0x108>
 800db40:	6107      	str	r7, [r0, #16]
 800db42:	e7a3      	b.n	800da8c <__mdiff+0x34>
 800db44:	f856 8b04 	ldr.w	r8, [r6], #4
 800db48:	fa11 f288 	uxtah	r2, r1, r8
 800db4c:	1414      	asrs	r4, r2, #16
 800db4e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800db52:	b292      	uxth	r2, r2
 800db54:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800db58:	f84e 2b04 	str.w	r2, [lr], #4
 800db5c:	1421      	asrs	r1, r4, #16
 800db5e:	e7e0      	b.n	800db22 <__mdiff+0xca>
 800db60:	3f01      	subs	r7, #1
 800db62:	e7ea      	b.n	800db3a <__mdiff+0xe2>
 800db64:	0800fb6b 	.word	0x0800fb6b
 800db68:	0800fc58 	.word	0x0800fc58

0800db6c <__ulp>:
 800db6c:	b082      	sub	sp, #8
 800db6e:	ed8d 0b00 	vstr	d0, [sp]
 800db72:	9b01      	ldr	r3, [sp, #4]
 800db74:	4912      	ldr	r1, [pc, #72]	; (800dbc0 <__ulp+0x54>)
 800db76:	4019      	ands	r1, r3
 800db78:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800db7c:	2900      	cmp	r1, #0
 800db7e:	dd05      	ble.n	800db8c <__ulp+0x20>
 800db80:	2200      	movs	r2, #0
 800db82:	460b      	mov	r3, r1
 800db84:	ec43 2b10 	vmov	d0, r2, r3
 800db88:	b002      	add	sp, #8
 800db8a:	4770      	bx	lr
 800db8c:	4249      	negs	r1, r1
 800db8e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800db92:	ea4f 5021 	mov.w	r0, r1, asr #20
 800db96:	f04f 0200 	mov.w	r2, #0
 800db9a:	f04f 0300 	mov.w	r3, #0
 800db9e:	da04      	bge.n	800dbaa <__ulp+0x3e>
 800dba0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800dba4:	fa41 f300 	asr.w	r3, r1, r0
 800dba8:	e7ec      	b.n	800db84 <__ulp+0x18>
 800dbaa:	f1a0 0114 	sub.w	r1, r0, #20
 800dbae:	291e      	cmp	r1, #30
 800dbb0:	bfda      	itte	le
 800dbb2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800dbb6:	fa20 f101 	lsrle.w	r1, r0, r1
 800dbba:	2101      	movgt	r1, #1
 800dbbc:	460a      	mov	r2, r1
 800dbbe:	e7e1      	b.n	800db84 <__ulp+0x18>
 800dbc0:	7ff00000 	.word	0x7ff00000

0800dbc4 <__b2d>:
 800dbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbc6:	6905      	ldr	r5, [r0, #16]
 800dbc8:	f100 0714 	add.w	r7, r0, #20
 800dbcc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800dbd0:	1f2e      	subs	r6, r5, #4
 800dbd2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800dbd6:	4620      	mov	r0, r4
 800dbd8:	f7ff fd48 	bl	800d66c <__hi0bits>
 800dbdc:	f1c0 0320 	rsb	r3, r0, #32
 800dbe0:	280a      	cmp	r0, #10
 800dbe2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800dc60 <__b2d+0x9c>
 800dbe6:	600b      	str	r3, [r1, #0]
 800dbe8:	dc14      	bgt.n	800dc14 <__b2d+0x50>
 800dbea:	f1c0 0e0b 	rsb	lr, r0, #11
 800dbee:	fa24 f10e 	lsr.w	r1, r4, lr
 800dbf2:	42b7      	cmp	r7, r6
 800dbf4:	ea41 030c 	orr.w	r3, r1, ip
 800dbf8:	bf34      	ite	cc
 800dbfa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dbfe:	2100      	movcs	r1, #0
 800dc00:	3015      	adds	r0, #21
 800dc02:	fa04 f000 	lsl.w	r0, r4, r0
 800dc06:	fa21 f10e 	lsr.w	r1, r1, lr
 800dc0a:	ea40 0201 	orr.w	r2, r0, r1
 800dc0e:	ec43 2b10 	vmov	d0, r2, r3
 800dc12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc14:	42b7      	cmp	r7, r6
 800dc16:	bf3a      	itte	cc
 800dc18:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dc1c:	f1a5 0608 	subcc.w	r6, r5, #8
 800dc20:	2100      	movcs	r1, #0
 800dc22:	380b      	subs	r0, #11
 800dc24:	d017      	beq.n	800dc56 <__b2d+0x92>
 800dc26:	f1c0 0c20 	rsb	ip, r0, #32
 800dc2a:	fa04 f500 	lsl.w	r5, r4, r0
 800dc2e:	42be      	cmp	r6, r7
 800dc30:	fa21 f40c 	lsr.w	r4, r1, ip
 800dc34:	ea45 0504 	orr.w	r5, r5, r4
 800dc38:	bf8c      	ite	hi
 800dc3a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800dc3e:	2400      	movls	r4, #0
 800dc40:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800dc44:	fa01 f000 	lsl.w	r0, r1, r0
 800dc48:	fa24 f40c 	lsr.w	r4, r4, ip
 800dc4c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dc50:	ea40 0204 	orr.w	r2, r0, r4
 800dc54:	e7db      	b.n	800dc0e <__b2d+0x4a>
 800dc56:	ea44 030c 	orr.w	r3, r4, ip
 800dc5a:	460a      	mov	r2, r1
 800dc5c:	e7d7      	b.n	800dc0e <__b2d+0x4a>
 800dc5e:	bf00      	nop
 800dc60:	3ff00000 	.word	0x3ff00000

0800dc64 <__d2b>:
 800dc64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dc68:	4689      	mov	r9, r1
 800dc6a:	2101      	movs	r1, #1
 800dc6c:	ec57 6b10 	vmov	r6, r7, d0
 800dc70:	4690      	mov	r8, r2
 800dc72:	f7ff fc09 	bl	800d488 <_Balloc>
 800dc76:	4604      	mov	r4, r0
 800dc78:	b930      	cbnz	r0, 800dc88 <__d2b+0x24>
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	4b25      	ldr	r3, [pc, #148]	; (800dd14 <__d2b+0xb0>)
 800dc7e:	4826      	ldr	r0, [pc, #152]	; (800dd18 <__d2b+0xb4>)
 800dc80:	f240 310a 	movw	r1, #778	; 0x30a
 800dc84:	f7fd ff80 	bl	800bb88 <__assert_func>
 800dc88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dc8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dc90:	bb35      	cbnz	r5, 800dce0 <__d2b+0x7c>
 800dc92:	2e00      	cmp	r6, #0
 800dc94:	9301      	str	r3, [sp, #4]
 800dc96:	d028      	beq.n	800dcea <__d2b+0x86>
 800dc98:	4668      	mov	r0, sp
 800dc9a:	9600      	str	r6, [sp, #0]
 800dc9c:	f7ff fd06 	bl	800d6ac <__lo0bits>
 800dca0:	9900      	ldr	r1, [sp, #0]
 800dca2:	b300      	cbz	r0, 800dce6 <__d2b+0x82>
 800dca4:	9a01      	ldr	r2, [sp, #4]
 800dca6:	f1c0 0320 	rsb	r3, r0, #32
 800dcaa:	fa02 f303 	lsl.w	r3, r2, r3
 800dcae:	430b      	orrs	r3, r1
 800dcb0:	40c2      	lsrs	r2, r0
 800dcb2:	6163      	str	r3, [r4, #20]
 800dcb4:	9201      	str	r2, [sp, #4]
 800dcb6:	9b01      	ldr	r3, [sp, #4]
 800dcb8:	61a3      	str	r3, [r4, #24]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	bf14      	ite	ne
 800dcbe:	2202      	movne	r2, #2
 800dcc0:	2201      	moveq	r2, #1
 800dcc2:	6122      	str	r2, [r4, #16]
 800dcc4:	b1d5      	cbz	r5, 800dcfc <__d2b+0x98>
 800dcc6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dcca:	4405      	add	r5, r0
 800dccc:	f8c9 5000 	str.w	r5, [r9]
 800dcd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dcd4:	f8c8 0000 	str.w	r0, [r8]
 800dcd8:	4620      	mov	r0, r4
 800dcda:	b003      	add	sp, #12
 800dcdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dce4:	e7d5      	b.n	800dc92 <__d2b+0x2e>
 800dce6:	6161      	str	r1, [r4, #20]
 800dce8:	e7e5      	b.n	800dcb6 <__d2b+0x52>
 800dcea:	a801      	add	r0, sp, #4
 800dcec:	f7ff fcde 	bl	800d6ac <__lo0bits>
 800dcf0:	9b01      	ldr	r3, [sp, #4]
 800dcf2:	6163      	str	r3, [r4, #20]
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	6122      	str	r2, [r4, #16]
 800dcf8:	3020      	adds	r0, #32
 800dcfa:	e7e3      	b.n	800dcc4 <__d2b+0x60>
 800dcfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dd00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dd04:	f8c9 0000 	str.w	r0, [r9]
 800dd08:	6918      	ldr	r0, [r3, #16]
 800dd0a:	f7ff fcaf 	bl	800d66c <__hi0bits>
 800dd0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dd12:	e7df      	b.n	800dcd4 <__d2b+0x70>
 800dd14:	0800fb6b 	.word	0x0800fb6b
 800dd18:	0800fc58 	.word	0x0800fc58

0800dd1c <__ratio>:
 800dd1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd20:	4688      	mov	r8, r1
 800dd22:	4669      	mov	r1, sp
 800dd24:	4681      	mov	r9, r0
 800dd26:	f7ff ff4d 	bl	800dbc4 <__b2d>
 800dd2a:	a901      	add	r1, sp, #4
 800dd2c:	4640      	mov	r0, r8
 800dd2e:	ec55 4b10 	vmov	r4, r5, d0
 800dd32:	f7ff ff47 	bl	800dbc4 <__b2d>
 800dd36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd3a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dd3e:	eba3 0c02 	sub.w	ip, r3, r2
 800dd42:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dd46:	1a9b      	subs	r3, r3, r2
 800dd48:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dd4c:	ec51 0b10 	vmov	r0, r1, d0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	bfd6      	itet	le
 800dd54:	460a      	movle	r2, r1
 800dd56:	462a      	movgt	r2, r5
 800dd58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dd5c:	468b      	mov	fp, r1
 800dd5e:	462f      	mov	r7, r5
 800dd60:	bfd4      	ite	le
 800dd62:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800dd66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	ee10 2a10 	vmov	r2, s0
 800dd70:	465b      	mov	r3, fp
 800dd72:	4639      	mov	r1, r7
 800dd74:	f7f2 fd72 	bl	800085c <__aeabi_ddiv>
 800dd78:	ec41 0b10 	vmov	d0, r0, r1
 800dd7c:	b003      	add	sp, #12
 800dd7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dd82 <__copybits>:
 800dd82:	3901      	subs	r1, #1
 800dd84:	b570      	push	{r4, r5, r6, lr}
 800dd86:	1149      	asrs	r1, r1, #5
 800dd88:	6914      	ldr	r4, [r2, #16]
 800dd8a:	3101      	adds	r1, #1
 800dd8c:	f102 0314 	add.w	r3, r2, #20
 800dd90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dd94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dd98:	1f05      	subs	r5, r0, #4
 800dd9a:	42a3      	cmp	r3, r4
 800dd9c:	d30c      	bcc.n	800ddb8 <__copybits+0x36>
 800dd9e:	1aa3      	subs	r3, r4, r2
 800dda0:	3b11      	subs	r3, #17
 800dda2:	f023 0303 	bic.w	r3, r3, #3
 800dda6:	3211      	adds	r2, #17
 800dda8:	42a2      	cmp	r2, r4
 800ddaa:	bf88      	it	hi
 800ddac:	2300      	movhi	r3, #0
 800ddae:	4418      	add	r0, r3
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	4288      	cmp	r0, r1
 800ddb4:	d305      	bcc.n	800ddc2 <__copybits+0x40>
 800ddb6:	bd70      	pop	{r4, r5, r6, pc}
 800ddb8:	f853 6b04 	ldr.w	r6, [r3], #4
 800ddbc:	f845 6f04 	str.w	r6, [r5, #4]!
 800ddc0:	e7eb      	b.n	800dd9a <__copybits+0x18>
 800ddc2:	f840 3b04 	str.w	r3, [r0], #4
 800ddc6:	e7f4      	b.n	800ddb2 <__copybits+0x30>

0800ddc8 <__any_on>:
 800ddc8:	f100 0214 	add.w	r2, r0, #20
 800ddcc:	6900      	ldr	r0, [r0, #16]
 800ddce:	114b      	asrs	r3, r1, #5
 800ddd0:	4298      	cmp	r0, r3
 800ddd2:	b510      	push	{r4, lr}
 800ddd4:	db11      	blt.n	800ddfa <__any_on+0x32>
 800ddd6:	dd0a      	ble.n	800ddee <__any_on+0x26>
 800ddd8:	f011 011f 	ands.w	r1, r1, #31
 800dddc:	d007      	beq.n	800ddee <__any_on+0x26>
 800ddde:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dde2:	fa24 f001 	lsr.w	r0, r4, r1
 800dde6:	fa00 f101 	lsl.w	r1, r0, r1
 800ddea:	428c      	cmp	r4, r1
 800ddec:	d10b      	bne.n	800de06 <__any_on+0x3e>
 800ddee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ddf2:	4293      	cmp	r3, r2
 800ddf4:	d803      	bhi.n	800ddfe <__any_on+0x36>
 800ddf6:	2000      	movs	r0, #0
 800ddf8:	bd10      	pop	{r4, pc}
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	e7f7      	b.n	800ddee <__any_on+0x26>
 800ddfe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800de02:	2900      	cmp	r1, #0
 800de04:	d0f5      	beq.n	800ddf2 <__any_on+0x2a>
 800de06:	2001      	movs	r0, #1
 800de08:	e7f6      	b.n	800ddf8 <__any_on+0x30>

0800de0a <_calloc_r>:
 800de0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de0c:	fba1 2402 	umull	r2, r4, r1, r2
 800de10:	b94c      	cbnz	r4, 800de26 <_calloc_r+0x1c>
 800de12:	4611      	mov	r1, r2
 800de14:	9201      	str	r2, [sp, #4]
 800de16:	f7fc f8d3 	bl	8009fc0 <_malloc_r>
 800de1a:	9a01      	ldr	r2, [sp, #4]
 800de1c:	4605      	mov	r5, r0
 800de1e:	b930      	cbnz	r0, 800de2e <_calloc_r+0x24>
 800de20:	4628      	mov	r0, r5
 800de22:	b003      	add	sp, #12
 800de24:	bd30      	pop	{r4, r5, pc}
 800de26:	220c      	movs	r2, #12
 800de28:	6002      	str	r2, [r0, #0]
 800de2a:	2500      	movs	r5, #0
 800de2c:	e7f8      	b.n	800de20 <_calloc_r+0x16>
 800de2e:	4621      	mov	r1, r4
 800de30:	f7fc f852 	bl	8009ed8 <memset>
 800de34:	e7f4      	b.n	800de20 <_calloc_r+0x16>

0800de36 <__ssputs_r>:
 800de36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de3a:	688e      	ldr	r6, [r1, #8]
 800de3c:	429e      	cmp	r6, r3
 800de3e:	4682      	mov	sl, r0
 800de40:	460c      	mov	r4, r1
 800de42:	4690      	mov	r8, r2
 800de44:	461f      	mov	r7, r3
 800de46:	d838      	bhi.n	800deba <__ssputs_r+0x84>
 800de48:	898a      	ldrh	r2, [r1, #12]
 800de4a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800de4e:	d032      	beq.n	800deb6 <__ssputs_r+0x80>
 800de50:	6825      	ldr	r5, [r4, #0]
 800de52:	6909      	ldr	r1, [r1, #16]
 800de54:	eba5 0901 	sub.w	r9, r5, r1
 800de58:	6965      	ldr	r5, [r4, #20]
 800de5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800de5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800de62:	3301      	adds	r3, #1
 800de64:	444b      	add	r3, r9
 800de66:	106d      	asrs	r5, r5, #1
 800de68:	429d      	cmp	r5, r3
 800de6a:	bf38      	it	cc
 800de6c:	461d      	movcc	r5, r3
 800de6e:	0553      	lsls	r3, r2, #21
 800de70:	d531      	bpl.n	800ded6 <__ssputs_r+0xa0>
 800de72:	4629      	mov	r1, r5
 800de74:	f7fc f8a4 	bl	8009fc0 <_malloc_r>
 800de78:	4606      	mov	r6, r0
 800de7a:	b950      	cbnz	r0, 800de92 <__ssputs_r+0x5c>
 800de7c:	230c      	movs	r3, #12
 800de7e:	f8ca 3000 	str.w	r3, [sl]
 800de82:	89a3      	ldrh	r3, [r4, #12]
 800de84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de88:	81a3      	strh	r3, [r4, #12]
 800de8a:	f04f 30ff 	mov.w	r0, #4294967295
 800de8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de92:	6921      	ldr	r1, [r4, #16]
 800de94:	464a      	mov	r2, r9
 800de96:	f7fc f811 	bl	8009ebc <memcpy>
 800de9a:	89a3      	ldrh	r3, [r4, #12]
 800de9c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dea4:	81a3      	strh	r3, [r4, #12]
 800dea6:	6126      	str	r6, [r4, #16]
 800dea8:	6165      	str	r5, [r4, #20]
 800deaa:	444e      	add	r6, r9
 800deac:	eba5 0509 	sub.w	r5, r5, r9
 800deb0:	6026      	str	r6, [r4, #0]
 800deb2:	60a5      	str	r5, [r4, #8]
 800deb4:	463e      	mov	r6, r7
 800deb6:	42be      	cmp	r6, r7
 800deb8:	d900      	bls.n	800debc <__ssputs_r+0x86>
 800deba:	463e      	mov	r6, r7
 800debc:	6820      	ldr	r0, [r4, #0]
 800debe:	4632      	mov	r2, r6
 800dec0:	4641      	mov	r1, r8
 800dec2:	f000 fac5 	bl	800e450 <memmove>
 800dec6:	68a3      	ldr	r3, [r4, #8]
 800dec8:	1b9b      	subs	r3, r3, r6
 800deca:	60a3      	str	r3, [r4, #8]
 800decc:	6823      	ldr	r3, [r4, #0]
 800dece:	4433      	add	r3, r6
 800ded0:	6023      	str	r3, [r4, #0]
 800ded2:	2000      	movs	r0, #0
 800ded4:	e7db      	b.n	800de8e <__ssputs_r+0x58>
 800ded6:	462a      	mov	r2, r5
 800ded8:	f000 fad4 	bl	800e484 <_realloc_r>
 800dedc:	4606      	mov	r6, r0
 800dede:	2800      	cmp	r0, #0
 800dee0:	d1e1      	bne.n	800dea6 <__ssputs_r+0x70>
 800dee2:	6921      	ldr	r1, [r4, #16]
 800dee4:	4650      	mov	r0, sl
 800dee6:	f7fb ffff 	bl	8009ee8 <_free_r>
 800deea:	e7c7      	b.n	800de7c <__ssputs_r+0x46>

0800deec <_svfiprintf_r>:
 800deec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800def0:	4698      	mov	r8, r3
 800def2:	898b      	ldrh	r3, [r1, #12]
 800def4:	061b      	lsls	r3, r3, #24
 800def6:	b09d      	sub	sp, #116	; 0x74
 800def8:	4607      	mov	r7, r0
 800defa:	460d      	mov	r5, r1
 800defc:	4614      	mov	r4, r2
 800defe:	d50e      	bpl.n	800df1e <_svfiprintf_r+0x32>
 800df00:	690b      	ldr	r3, [r1, #16]
 800df02:	b963      	cbnz	r3, 800df1e <_svfiprintf_r+0x32>
 800df04:	2140      	movs	r1, #64	; 0x40
 800df06:	f7fc f85b 	bl	8009fc0 <_malloc_r>
 800df0a:	6028      	str	r0, [r5, #0]
 800df0c:	6128      	str	r0, [r5, #16]
 800df0e:	b920      	cbnz	r0, 800df1a <_svfiprintf_r+0x2e>
 800df10:	230c      	movs	r3, #12
 800df12:	603b      	str	r3, [r7, #0]
 800df14:	f04f 30ff 	mov.w	r0, #4294967295
 800df18:	e0d1      	b.n	800e0be <_svfiprintf_r+0x1d2>
 800df1a:	2340      	movs	r3, #64	; 0x40
 800df1c:	616b      	str	r3, [r5, #20]
 800df1e:	2300      	movs	r3, #0
 800df20:	9309      	str	r3, [sp, #36]	; 0x24
 800df22:	2320      	movs	r3, #32
 800df24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800df28:	f8cd 800c 	str.w	r8, [sp, #12]
 800df2c:	2330      	movs	r3, #48	; 0x30
 800df2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e0d8 <_svfiprintf_r+0x1ec>
 800df32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800df36:	f04f 0901 	mov.w	r9, #1
 800df3a:	4623      	mov	r3, r4
 800df3c:	469a      	mov	sl, r3
 800df3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df42:	b10a      	cbz	r2, 800df48 <_svfiprintf_r+0x5c>
 800df44:	2a25      	cmp	r2, #37	; 0x25
 800df46:	d1f9      	bne.n	800df3c <_svfiprintf_r+0x50>
 800df48:	ebba 0b04 	subs.w	fp, sl, r4
 800df4c:	d00b      	beq.n	800df66 <_svfiprintf_r+0x7a>
 800df4e:	465b      	mov	r3, fp
 800df50:	4622      	mov	r2, r4
 800df52:	4629      	mov	r1, r5
 800df54:	4638      	mov	r0, r7
 800df56:	f7ff ff6e 	bl	800de36 <__ssputs_r>
 800df5a:	3001      	adds	r0, #1
 800df5c:	f000 80aa 	beq.w	800e0b4 <_svfiprintf_r+0x1c8>
 800df60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df62:	445a      	add	r2, fp
 800df64:	9209      	str	r2, [sp, #36]	; 0x24
 800df66:	f89a 3000 	ldrb.w	r3, [sl]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	f000 80a2 	beq.w	800e0b4 <_svfiprintf_r+0x1c8>
 800df70:	2300      	movs	r3, #0
 800df72:	f04f 32ff 	mov.w	r2, #4294967295
 800df76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df7a:	f10a 0a01 	add.w	sl, sl, #1
 800df7e:	9304      	str	r3, [sp, #16]
 800df80:	9307      	str	r3, [sp, #28]
 800df82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800df86:	931a      	str	r3, [sp, #104]	; 0x68
 800df88:	4654      	mov	r4, sl
 800df8a:	2205      	movs	r2, #5
 800df8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df90:	4851      	ldr	r0, [pc, #324]	; (800e0d8 <_svfiprintf_r+0x1ec>)
 800df92:	f7f2 f92d 	bl	80001f0 <memchr>
 800df96:	9a04      	ldr	r2, [sp, #16]
 800df98:	b9d8      	cbnz	r0, 800dfd2 <_svfiprintf_r+0xe6>
 800df9a:	06d0      	lsls	r0, r2, #27
 800df9c:	bf44      	itt	mi
 800df9e:	2320      	movmi	r3, #32
 800dfa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dfa4:	0711      	lsls	r1, r2, #28
 800dfa6:	bf44      	itt	mi
 800dfa8:	232b      	movmi	r3, #43	; 0x2b
 800dfaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dfae:	f89a 3000 	ldrb.w	r3, [sl]
 800dfb2:	2b2a      	cmp	r3, #42	; 0x2a
 800dfb4:	d015      	beq.n	800dfe2 <_svfiprintf_r+0xf6>
 800dfb6:	9a07      	ldr	r2, [sp, #28]
 800dfb8:	4654      	mov	r4, sl
 800dfba:	2000      	movs	r0, #0
 800dfbc:	f04f 0c0a 	mov.w	ip, #10
 800dfc0:	4621      	mov	r1, r4
 800dfc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dfc6:	3b30      	subs	r3, #48	; 0x30
 800dfc8:	2b09      	cmp	r3, #9
 800dfca:	d94e      	bls.n	800e06a <_svfiprintf_r+0x17e>
 800dfcc:	b1b0      	cbz	r0, 800dffc <_svfiprintf_r+0x110>
 800dfce:	9207      	str	r2, [sp, #28]
 800dfd0:	e014      	b.n	800dffc <_svfiprintf_r+0x110>
 800dfd2:	eba0 0308 	sub.w	r3, r0, r8
 800dfd6:	fa09 f303 	lsl.w	r3, r9, r3
 800dfda:	4313      	orrs	r3, r2
 800dfdc:	9304      	str	r3, [sp, #16]
 800dfde:	46a2      	mov	sl, r4
 800dfe0:	e7d2      	b.n	800df88 <_svfiprintf_r+0x9c>
 800dfe2:	9b03      	ldr	r3, [sp, #12]
 800dfe4:	1d19      	adds	r1, r3, #4
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	9103      	str	r1, [sp, #12]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	bfbb      	ittet	lt
 800dfee:	425b      	neglt	r3, r3
 800dff0:	f042 0202 	orrlt.w	r2, r2, #2
 800dff4:	9307      	strge	r3, [sp, #28]
 800dff6:	9307      	strlt	r3, [sp, #28]
 800dff8:	bfb8      	it	lt
 800dffa:	9204      	strlt	r2, [sp, #16]
 800dffc:	7823      	ldrb	r3, [r4, #0]
 800dffe:	2b2e      	cmp	r3, #46	; 0x2e
 800e000:	d10c      	bne.n	800e01c <_svfiprintf_r+0x130>
 800e002:	7863      	ldrb	r3, [r4, #1]
 800e004:	2b2a      	cmp	r3, #42	; 0x2a
 800e006:	d135      	bne.n	800e074 <_svfiprintf_r+0x188>
 800e008:	9b03      	ldr	r3, [sp, #12]
 800e00a:	1d1a      	adds	r2, r3, #4
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	9203      	str	r2, [sp, #12]
 800e010:	2b00      	cmp	r3, #0
 800e012:	bfb8      	it	lt
 800e014:	f04f 33ff 	movlt.w	r3, #4294967295
 800e018:	3402      	adds	r4, #2
 800e01a:	9305      	str	r3, [sp, #20]
 800e01c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e0e8 <_svfiprintf_r+0x1fc>
 800e020:	7821      	ldrb	r1, [r4, #0]
 800e022:	2203      	movs	r2, #3
 800e024:	4650      	mov	r0, sl
 800e026:	f7f2 f8e3 	bl	80001f0 <memchr>
 800e02a:	b140      	cbz	r0, 800e03e <_svfiprintf_r+0x152>
 800e02c:	2340      	movs	r3, #64	; 0x40
 800e02e:	eba0 000a 	sub.w	r0, r0, sl
 800e032:	fa03 f000 	lsl.w	r0, r3, r0
 800e036:	9b04      	ldr	r3, [sp, #16]
 800e038:	4303      	orrs	r3, r0
 800e03a:	3401      	adds	r4, #1
 800e03c:	9304      	str	r3, [sp, #16]
 800e03e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e042:	4826      	ldr	r0, [pc, #152]	; (800e0dc <_svfiprintf_r+0x1f0>)
 800e044:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e048:	2206      	movs	r2, #6
 800e04a:	f7f2 f8d1 	bl	80001f0 <memchr>
 800e04e:	2800      	cmp	r0, #0
 800e050:	d038      	beq.n	800e0c4 <_svfiprintf_r+0x1d8>
 800e052:	4b23      	ldr	r3, [pc, #140]	; (800e0e0 <_svfiprintf_r+0x1f4>)
 800e054:	bb1b      	cbnz	r3, 800e09e <_svfiprintf_r+0x1b2>
 800e056:	9b03      	ldr	r3, [sp, #12]
 800e058:	3307      	adds	r3, #7
 800e05a:	f023 0307 	bic.w	r3, r3, #7
 800e05e:	3308      	adds	r3, #8
 800e060:	9303      	str	r3, [sp, #12]
 800e062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e064:	4433      	add	r3, r6
 800e066:	9309      	str	r3, [sp, #36]	; 0x24
 800e068:	e767      	b.n	800df3a <_svfiprintf_r+0x4e>
 800e06a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e06e:	460c      	mov	r4, r1
 800e070:	2001      	movs	r0, #1
 800e072:	e7a5      	b.n	800dfc0 <_svfiprintf_r+0xd4>
 800e074:	2300      	movs	r3, #0
 800e076:	3401      	adds	r4, #1
 800e078:	9305      	str	r3, [sp, #20]
 800e07a:	4619      	mov	r1, r3
 800e07c:	f04f 0c0a 	mov.w	ip, #10
 800e080:	4620      	mov	r0, r4
 800e082:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e086:	3a30      	subs	r2, #48	; 0x30
 800e088:	2a09      	cmp	r2, #9
 800e08a:	d903      	bls.n	800e094 <_svfiprintf_r+0x1a8>
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d0c5      	beq.n	800e01c <_svfiprintf_r+0x130>
 800e090:	9105      	str	r1, [sp, #20]
 800e092:	e7c3      	b.n	800e01c <_svfiprintf_r+0x130>
 800e094:	fb0c 2101 	mla	r1, ip, r1, r2
 800e098:	4604      	mov	r4, r0
 800e09a:	2301      	movs	r3, #1
 800e09c:	e7f0      	b.n	800e080 <_svfiprintf_r+0x194>
 800e09e:	ab03      	add	r3, sp, #12
 800e0a0:	9300      	str	r3, [sp, #0]
 800e0a2:	462a      	mov	r2, r5
 800e0a4:	4b0f      	ldr	r3, [pc, #60]	; (800e0e4 <_svfiprintf_r+0x1f8>)
 800e0a6:	a904      	add	r1, sp, #16
 800e0a8:	4638      	mov	r0, r7
 800e0aa:	f7fc f89d 	bl	800a1e8 <_printf_float>
 800e0ae:	1c42      	adds	r2, r0, #1
 800e0b0:	4606      	mov	r6, r0
 800e0b2:	d1d6      	bne.n	800e062 <_svfiprintf_r+0x176>
 800e0b4:	89ab      	ldrh	r3, [r5, #12]
 800e0b6:	065b      	lsls	r3, r3, #25
 800e0b8:	f53f af2c 	bmi.w	800df14 <_svfiprintf_r+0x28>
 800e0bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e0be:	b01d      	add	sp, #116	; 0x74
 800e0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0c4:	ab03      	add	r3, sp, #12
 800e0c6:	9300      	str	r3, [sp, #0]
 800e0c8:	462a      	mov	r2, r5
 800e0ca:	4b06      	ldr	r3, [pc, #24]	; (800e0e4 <_svfiprintf_r+0x1f8>)
 800e0cc:	a904      	add	r1, sp, #16
 800e0ce:	4638      	mov	r0, r7
 800e0d0:	f7fc fb2e 	bl	800a730 <_printf_i>
 800e0d4:	e7eb      	b.n	800e0ae <_svfiprintf_r+0x1c2>
 800e0d6:	bf00      	nop
 800e0d8:	0800fdb4 	.word	0x0800fdb4
 800e0dc:	0800fdbe 	.word	0x0800fdbe
 800e0e0:	0800a1e9 	.word	0x0800a1e9
 800e0e4:	0800de37 	.word	0x0800de37
 800e0e8:	0800fdba 	.word	0x0800fdba

0800e0ec <__sfputc_r>:
 800e0ec:	6893      	ldr	r3, [r2, #8]
 800e0ee:	3b01      	subs	r3, #1
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	b410      	push	{r4}
 800e0f4:	6093      	str	r3, [r2, #8]
 800e0f6:	da08      	bge.n	800e10a <__sfputc_r+0x1e>
 800e0f8:	6994      	ldr	r4, [r2, #24]
 800e0fa:	42a3      	cmp	r3, r4
 800e0fc:	db01      	blt.n	800e102 <__sfputc_r+0x16>
 800e0fe:	290a      	cmp	r1, #10
 800e100:	d103      	bne.n	800e10a <__sfputc_r+0x1e>
 800e102:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e106:	f7fd bc6d 	b.w	800b9e4 <__swbuf_r>
 800e10a:	6813      	ldr	r3, [r2, #0]
 800e10c:	1c58      	adds	r0, r3, #1
 800e10e:	6010      	str	r0, [r2, #0]
 800e110:	7019      	strb	r1, [r3, #0]
 800e112:	4608      	mov	r0, r1
 800e114:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e118:	4770      	bx	lr

0800e11a <__sfputs_r>:
 800e11a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e11c:	4606      	mov	r6, r0
 800e11e:	460f      	mov	r7, r1
 800e120:	4614      	mov	r4, r2
 800e122:	18d5      	adds	r5, r2, r3
 800e124:	42ac      	cmp	r4, r5
 800e126:	d101      	bne.n	800e12c <__sfputs_r+0x12>
 800e128:	2000      	movs	r0, #0
 800e12a:	e007      	b.n	800e13c <__sfputs_r+0x22>
 800e12c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e130:	463a      	mov	r2, r7
 800e132:	4630      	mov	r0, r6
 800e134:	f7ff ffda 	bl	800e0ec <__sfputc_r>
 800e138:	1c43      	adds	r3, r0, #1
 800e13a:	d1f3      	bne.n	800e124 <__sfputs_r+0xa>
 800e13c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e140 <_vfiprintf_r>:
 800e140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e144:	460d      	mov	r5, r1
 800e146:	b09d      	sub	sp, #116	; 0x74
 800e148:	4614      	mov	r4, r2
 800e14a:	4698      	mov	r8, r3
 800e14c:	4606      	mov	r6, r0
 800e14e:	b118      	cbz	r0, 800e158 <_vfiprintf_r+0x18>
 800e150:	6983      	ldr	r3, [r0, #24]
 800e152:	b90b      	cbnz	r3, 800e158 <_vfiprintf_r+0x18>
 800e154:	f7fe fcdc 	bl	800cb10 <__sinit>
 800e158:	4b89      	ldr	r3, [pc, #548]	; (800e380 <_vfiprintf_r+0x240>)
 800e15a:	429d      	cmp	r5, r3
 800e15c:	d11b      	bne.n	800e196 <_vfiprintf_r+0x56>
 800e15e:	6875      	ldr	r5, [r6, #4]
 800e160:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e162:	07d9      	lsls	r1, r3, #31
 800e164:	d405      	bmi.n	800e172 <_vfiprintf_r+0x32>
 800e166:	89ab      	ldrh	r3, [r5, #12]
 800e168:	059a      	lsls	r2, r3, #22
 800e16a:	d402      	bmi.n	800e172 <_vfiprintf_r+0x32>
 800e16c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e16e:	f7ff f8f2 	bl	800d356 <__retarget_lock_acquire_recursive>
 800e172:	89ab      	ldrh	r3, [r5, #12]
 800e174:	071b      	lsls	r3, r3, #28
 800e176:	d501      	bpl.n	800e17c <_vfiprintf_r+0x3c>
 800e178:	692b      	ldr	r3, [r5, #16]
 800e17a:	b9eb      	cbnz	r3, 800e1b8 <_vfiprintf_r+0x78>
 800e17c:	4629      	mov	r1, r5
 800e17e:	4630      	mov	r0, r6
 800e180:	f7fd fc94 	bl	800baac <__swsetup_r>
 800e184:	b1c0      	cbz	r0, 800e1b8 <_vfiprintf_r+0x78>
 800e186:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e188:	07dc      	lsls	r4, r3, #31
 800e18a:	d50e      	bpl.n	800e1aa <_vfiprintf_r+0x6a>
 800e18c:	f04f 30ff 	mov.w	r0, #4294967295
 800e190:	b01d      	add	sp, #116	; 0x74
 800e192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e196:	4b7b      	ldr	r3, [pc, #492]	; (800e384 <_vfiprintf_r+0x244>)
 800e198:	429d      	cmp	r5, r3
 800e19a:	d101      	bne.n	800e1a0 <_vfiprintf_r+0x60>
 800e19c:	68b5      	ldr	r5, [r6, #8]
 800e19e:	e7df      	b.n	800e160 <_vfiprintf_r+0x20>
 800e1a0:	4b79      	ldr	r3, [pc, #484]	; (800e388 <_vfiprintf_r+0x248>)
 800e1a2:	429d      	cmp	r5, r3
 800e1a4:	bf08      	it	eq
 800e1a6:	68f5      	ldreq	r5, [r6, #12]
 800e1a8:	e7da      	b.n	800e160 <_vfiprintf_r+0x20>
 800e1aa:	89ab      	ldrh	r3, [r5, #12]
 800e1ac:	0598      	lsls	r0, r3, #22
 800e1ae:	d4ed      	bmi.n	800e18c <_vfiprintf_r+0x4c>
 800e1b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e1b2:	f7ff f8d1 	bl	800d358 <__retarget_lock_release_recursive>
 800e1b6:	e7e9      	b.n	800e18c <_vfiprintf_r+0x4c>
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	9309      	str	r3, [sp, #36]	; 0x24
 800e1bc:	2320      	movs	r3, #32
 800e1be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e1c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1c6:	2330      	movs	r3, #48	; 0x30
 800e1c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e38c <_vfiprintf_r+0x24c>
 800e1cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1d0:	f04f 0901 	mov.w	r9, #1
 800e1d4:	4623      	mov	r3, r4
 800e1d6:	469a      	mov	sl, r3
 800e1d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1dc:	b10a      	cbz	r2, 800e1e2 <_vfiprintf_r+0xa2>
 800e1de:	2a25      	cmp	r2, #37	; 0x25
 800e1e0:	d1f9      	bne.n	800e1d6 <_vfiprintf_r+0x96>
 800e1e2:	ebba 0b04 	subs.w	fp, sl, r4
 800e1e6:	d00b      	beq.n	800e200 <_vfiprintf_r+0xc0>
 800e1e8:	465b      	mov	r3, fp
 800e1ea:	4622      	mov	r2, r4
 800e1ec:	4629      	mov	r1, r5
 800e1ee:	4630      	mov	r0, r6
 800e1f0:	f7ff ff93 	bl	800e11a <__sfputs_r>
 800e1f4:	3001      	adds	r0, #1
 800e1f6:	f000 80aa 	beq.w	800e34e <_vfiprintf_r+0x20e>
 800e1fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1fc:	445a      	add	r2, fp
 800e1fe:	9209      	str	r2, [sp, #36]	; 0x24
 800e200:	f89a 3000 	ldrb.w	r3, [sl]
 800e204:	2b00      	cmp	r3, #0
 800e206:	f000 80a2 	beq.w	800e34e <_vfiprintf_r+0x20e>
 800e20a:	2300      	movs	r3, #0
 800e20c:	f04f 32ff 	mov.w	r2, #4294967295
 800e210:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e214:	f10a 0a01 	add.w	sl, sl, #1
 800e218:	9304      	str	r3, [sp, #16]
 800e21a:	9307      	str	r3, [sp, #28]
 800e21c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e220:	931a      	str	r3, [sp, #104]	; 0x68
 800e222:	4654      	mov	r4, sl
 800e224:	2205      	movs	r2, #5
 800e226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e22a:	4858      	ldr	r0, [pc, #352]	; (800e38c <_vfiprintf_r+0x24c>)
 800e22c:	f7f1 ffe0 	bl	80001f0 <memchr>
 800e230:	9a04      	ldr	r2, [sp, #16]
 800e232:	b9d8      	cbnz	r0, 800e26c <_vfiprintf_r+0x12c>
 800e234:	06d1      	lsls	r1, r2, #27
 800e236:	bf44      	itt	mi
 800e238:	2320      	movmi	r3, #32
 800e23a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e23e:	0713      	lsls	r3, r2, #28
 800e240:	bf44      	itt	mi
 800e242:	232b      	movmi	r3, #43	; 0x2b
 800e244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e248:	f89a 3000 	ldrb.w	r3, [sl]
 800e24c:	2b2a      	cmp	r3, #42	; 0x2a
 800e24e:	d015      	beq.n	800e27c <_vfiprintf_r+0x13c>
 800e250:	9a07      	ldr	r2, [sp, #28]
 800e252:	4654      	mov	r4, sl
 800e254:	2000      	movs	r0, #0
 800e256:	f04f 0c0a 	mov.w	ip, #10
 800e25a:	4621      	mov	r1, r4
 800e25c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e260:	3b30      	subs	r3, #48	; 0x30
 800e262:	2b09      	cmp	r3, #9
 800e264:	d94e      	bls.n	800e304 <_vfiprintf_r+0x1c4>
 800e266:	b1b0      	cbz	r0, 800e296 <_vfiprintf_r+0x156>
 800e268:	9207      	str	r2, [sp, #28]
 800e26a:	e014      	b.n	800e296 <_vfiprintf_r+0x156>
 800e26c:	eba0 0308 	sub.w	r3, r0, r8
 800e270:	fa09 f303 	lsl.w	r3, r9, r3
 800e274:	4313      	orrs	r3, r2
 800e276:	9304      	str	r3, [sp, #16]
 800e278:	46a2      	mov	sl, r4
 800e27a:	e7d2      	b.n	800e222 <_vfiprintf_r+0xe2>
 800e27c:	9b03      	ldr	r3, [sp, #12]
 800e27e:	1d19      	adds	r1, r3, #4
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	9103      	str	r1, [sp, #12]
 800e284:	2b00      	cmp	r3, #0
 800e286:	bfbb      	ittet	lt
 800e288:	425b      	neglt	r3, r3
 800e28a:	f042 0202 	orrlt.w	r2, r2, #2
 800e28e:	9307      	strge	r3, [sp, #28]
 800e290:	9307      	strlt	r3, [sp, #28]
 800e292:	bfb8      	it	lt
 800e294:	9204      	strlt	r2, [sp, #16]
 800e296:	7823      	ldrb	r3, [r4, #0]
 800e298:	2b2e      	cmp	r3, #46	; 0x2e
 800e29a:	d10c      	bne.n	800e2b6 <_vfiprintf_r+0x176>
 800e29c:	7863      	ldrb	r3, [r4, #1]
 800e29e:	2b2a      	cmp	r3, #42	; 0x2a
 800e2a0:	d135      	bne.n	800e30e <_vfiprintf_r+0x1ce>
 800e2a2:	9b03      	ldr	r3, [sp, #12]
 800e2a4:	1d1a      	adds	r2, r3, #4
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	9203      	str	r2, [sp, #12]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	bfb8      	it	lt
 800e2ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800e2b2:	3402      	adds	r4, #2
 800e2b4:	9305      	str	r3, [sp, #20]
 800e2b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e39c <_vfiprintf_r+0x25c>
 800e2ba:	7821      	ldrb	r1, [r4, #0]
 800e2bc:	2203      	movs	r2, #3
 800e2be:	4650      	mov	r0, sl
 800e2c0:	f7f1 ff96 	bl	80001f0 <memchr>
 800e2c4:	b140      	cbz	r0, 800e2d8 <_vfiprintf_r+0x198>
 800e2c6:	2340      	movs	r3, #64	; 0x40
 800e2c8:	eba0 000a 	sub.w	r0, r0, sl
 800e2cc:	fa03 f000 	lsl.w	r0, r3, r0
 800e2d0:	9b04      	ldr	r3, [sp, #16]
 800e2d2:	4303      	orrs	r3, r0
 800e2d4:	3401      	adds	r4, #1
 800e2d6:	9304      	str	r3, [sp, #16]
 800e2d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2dc:	482c      	ldr	r0, [pc, #176]	; (800e390 <_vfiprintf_r+0x250>)
 800e2de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e2e2:	2206      	movs	r2, #6
 800e2e4:	f7f1 ff84 	bl	80001f0 <memchr>
 800e2e8:	2800      	cmp	r0, #0
 800e2ea:	d03f      	beq.n	800e36c <_vfiprintf_r+0x22c>
 800e2ec:	4b29      	ldr	r3, [pc, #164]	; (800e394 <_vfiprintf_r+0x254>)
 800e2ee:	bb1b      	cbnz	r3, 800e338 <_vfiprintf_r+0x1f8>
 800e2f0:	9b03      	ldr	r3, [sp, #12]
 800e2f2:	3307      	adds	r3, #7
 800e2f4:	f023 0307 	bic.w	r3, r3, #7
 800e2f8:	3308      	adds	r3, #8
 800e2fa:	9303      	str	r3, [sp, #12]
 800e2fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2fe:	443b      	add	r3, r7
 800e300:	9309      	str	r3, [sp, #36]	; 0x24
 800e302:	e767      	b.n	800e1d4 <_vfiprintf_r+0x94>
 800e304:	fb0c 3202 	mla	r2, ip, r2, r3
 800e308:	460c      	mov	r4, r1
 800e30a:	2001      	movs	r0, #1
 800e30c:	e7a5      	b.n	800e25a <_vfiprintf_r+0x11a>
 800e30e:	2300      	movs	r3, #0
 800e310:	3401      	adds	r4, #1
 800e312:	9305      	str	r3, [sp, #20]
 800e314:	4619      	mov	r1, r3
 800e316:	f04f 0c0a 	mov.w	ip, #10
 800e31a:	4620      	mov	r0, r4
 800e31c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e320:	3a30      	subs	r2, #48	; 0x30
 800e322:	2a09      	cmp	r2, #9
 800e324:	d903      	bls.n	800e32e <_vfiprintf_r+0x1ee>
 800e326:	2b00      	cmp	r3, #0
 800e328:	d0c5      	beq.n	800e2b6 <_vfiprintf_r+0x176>
 800e32a:	9105      	str	r1, [sp, #20]
 800e32c:	e7c3      	b.n	800e2b6 <_vfiprintf_r+0x176>
 800e32e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e332:	4604      	mov	r4, r0
 800e334:	2301      	movs	r3, #1
 800e336:	e7f0      	b.n	800e31a <_vfiprintf_r+0x1da>
 800e338:	ab03      	add	r3, sp, #12
 800e33a:	9300      	str	r3, [sp, #0]
 800e33c:	462a      	mov	r2, r5
 800e33e:	4b16      	ldr	r3, [pc, #88]	; (800e398 <_vfiprintf_r+0x258>)
 800e340:	a904      	add	r1, sp, #16
 800e342:	4630      	mov	r0, r6
 800e344:	f7fb ff50 	bl	800a1e8 <_printf_float>
 800e348:	4607      	mov	r7, r0
 800e34a:	1c78      	adds	r0, r7, #1
 800e34c:	d1d6      	bne.n	800e2fc <_vfiprintf_r+0x1bc>
 800e34e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e350:	07d9      	lsls	r1, r3, #31
 800e352:	d405      	bmi.n	800e360 <_vfiprintf_r+0x220>
 800e354:	89ab      	ldrh	r3, [r5, #12]
 800e356:	059a      	lsls	r2, r3, #22
 800e358:	d402      	bmi.n	800e360 <_vfiprintf_r+0x220>
 800e35a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e35c:	f7fe fffc 	bl	800d358 <__retarget_lock_release_recursive>
 800e360:	89ab      	ldrh	r3, [r5, #12]
 800e362:	065b      	lsls	r3, r3, #25
 800e364:	f53f af12 	bmi.w	800e18c <_vfiprintf_r+0x4c>
 800e368:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e36a:	e711      	b.n	800e190 <_vfiprintf_r+0x50>
 800e36c:	ab03      	add	r3, sp, #12
 800e36e:	9300      	str	r3, [sp, #0]
 800e370:	462a      	mov	r2, r5
 800e372:	4b09      	ldr	r3, [pc, #36]	; (800e398 <_vfiprintf_r+0x258>)
 800e374:	a904      	add	r1, sp, #16
 800e376:	4630      	mov	r0, r6
 800e378:	f7fc f9da 	bl	800a730 <_printf_i>
 800e37c:	e7e4      	b.n	800e348 <_vfiprintf_r+0x208>
 800e37e:	bf00      	nop
 800e380:	0800fb9c 	.word	0x0800fb9c
 800e384:	0800fbbc 	.word	0x0800fbbc
 800e388:	0800fb7c 	.word	0x0800fb7c
 800e38c:	0800fdb4 	.word	0x0800fdb4
 800e390:	0800fdbe 	.word	0x0800fdbe
 800e394:	0800a1e9 	.word	0x0800a1e9
 800e398:	0800e11b 	.word	0x0800e11b
 800e39c:	0800fdba 	.word	0x0800fdba

0800e3a0 <_read_r>:
 800e3a0:	b538      	push	{r3, r4, r5, lr}
 800e3a2:	4d07      	ldr	r5, [pc, #28]	; (800e3c0 <_read_r+0x20>)
 800e3a4:	4604      	mov	r4, r0
 800e3a6:	4608      	mov	r0, r1
 800e3a8:	4611      	mov	r1, r2
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	602a      	str	r2, [r5, #0]
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	f7f6 fff2 	bl	8005398 <_read>
 800e3b4:	1c43      	adds	r3, r0, #1
 800e3b6:	d102      	bne.n	800e3be <_read_r+0x1e>
 800e3b8:	682b      	ldr	r3, [r5, #0]
 800e3ba:	b103      	cbz	r3, 800e3be <_read_r+0x1e>
 800e3bc:	6023      	str	r3, [r4, #0]
 800e3be:	bd38      	pop	{r3, r4, r5, pc}
 800e3c0:	20002e78 	.word	0x20002e78
 800e3c4:	00000000 	.word	0x00000000

0800e3c8 <nan>:
 800e3c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e3d0 <nan+0x8>
 800e3cc:	4770      	bx	lr
 800e3ce:	bf00      	nop
 800e3d0:	00000000 	.word	0x00000000
 800e3d4:	7ff80000 	.word	0x7ff80000

0800e3d8 <nanf>:
 800e3d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e3e0 <nanf+0x8>
 800e3dc:	4770      	bx	lr
 800e3de:	bf00      	nop
 800e3e0:	7fc00000 	.word	0x7fc00000

0800e3e4 <__ascii_wctomb>:
 800e3e4:	b149      	cbz	r1, 800e3fa <__ascii_wctomb+0x16>
 800e3e6:	2aff      	cmp	r2, #255	; 0xff
 800e3e8:	bf85      	ittet	hi
 800e3ea:	238a      	movhi	r3, #138	; 0x8a
 800e3ec:	6003      	strhi	r3, [r0, #0]
 800e3ee:	700a      	strbls	r2, [r1, #0]
 800e3f0:	f04f 30ff 	movhi.w	r0, #4294967295
 800e3f4:	bf98      	it	ls
 800e3f6:	2001      	movls	r0, #1
 800e3f8:	4770      	bx	lr
 800e3fa:	4608      	mov	r0, r1
 800e3fc:	4770      	bx	lr

0800e3fe <abort>:
 800e3fe:	b508      	push	{r3, lr}
 800e400:	2006      	movs	r0, #6
 800e402:	f000 f897 	bl	800e534 <raise>
 800e406:	2001      	movs	r0, #1
 800e408:	f7f6 ffbc 	bl	8005384 <_exit>

0800e40c <_fstat_r>:
 800e40c:	b538      	push	{r3, r4, r5, lr}
 800e40e:	4d07      	ldr	r5, [pc, #28]	; (800e42c <_fstat_r+0x20>)
 800e410:	2300      	movs	r3, #0
 800e412:	4604      	mov	r4, r0
 800e414:	4608      	mov	r0, r1
 800e416:	4611      	mov	r1, r2
 800e418:	602b      	str	r3, [r5, #0]
 800e41a:	f7f7 f802 	bl	8005422 <_fstat>
 800e41e:	1c43      	adds	r3, r0, #1
 800e420:	d102      	bne.n	800e428 <_fstat_r+0x1c>
 800e422:	682b      	ldr	r3, [r5, #0]
 800e424:	b103      	cbz	r3, 800e428 <_fstat_r+0x1c>
 800e426:	6023      	str	r3, [r4, #0]
 800e428:	bd38      	pop	{r3, r4, r5, pc}
 800e42a:	bf00      	nop
 800e42c:	20002e78 	.word	0x20002e78

0800e430 <_isatty_r>:
 800e430:	b538      	push	{r3, r4, r5, lr}
 800e432:	4d06      	ldr	r5, [pc, #24]	; (800e44c <_isatty_r+0x1c>)
 800e434:	2300      	movs	r3, #0
 800e436:	4604      	mov	r4, r0
 800e438:	4608      	mov	r0, r1
 800e43a:	602b      	str	r3, [r5, #0]
 800e43c:	f7f7 f801 	bl	8005442 <_isatty>
 800e440:	1c43      	adds	r3, r0, #1
 800e442:	d102      	bne.n	800e44a <_isatty_r+0x1a>
 800e444:	682b      	ldr	r3, [r5, #0]
 800e446:	b103      	cbz	r3, 800e44a <_isatty_r+0x1a>
 800e448:	6023      	str	r3, [r4, #0]
 800e44a:	bd38      	pop	{r3, r4, r5, pc}
 800e44c:	20002e78 	.word	0x20002e78

0800e450 <memmove>:
 800e450:	4288      	cmp	r0, r1
 800e452:	b510      	push	{r4, lr}
 800e454:	eb01 0402 	add.w	r4, r1, r2
 800e458:	d902      	bls.n	800e460 <memmove+0x10>
 800e45a:	4284      	cmp	r4, r0
 800e45c:	4623      	mov	r3, r4
 800e45e:	d807      	bhi.n	800e470 <memmove+0x20>
 800e460:	1e43      	subs	r3, r0, #1
 800e462:	42a1      	cmp	r1, r4
 800e464:	d008      	beq.n	800e478 <memmove+0x28>
 800e466:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e46a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e46e:	e7f8      	b.n	800e462 <memmove+0x12>
 800e470:	4402      	add	r2, r0
 800e472:	4601      	mov	r1, r0
 800e474:	428a      	cmp	r2, r1
 800e476:	d100      	bne.n	800e47a <memmove+0x2a>
 800e478:	bd10      	pop	{r4, pc}
 800e47a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e47e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e482:	e7f7      	b.n	800e474 <memmove+0x24>

0800e484 <_realloc_r>:
 800e484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e488:	4680      	mov	r8, r0
 800e48a:	4614      	mov	r4, r2
 800e48c:	460e      	mov	r6, r1
 800e48e:	b921      	cbnz	r1, 800e49a <_realloc_r+0x16>
 800e490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e494:	4611      	mov	r1, r2
 800e496:	f7fb bd93 	b.w	8009fc0 <_malloc_r>
 800e49a:	b92a      	cbnz	r2, 800e4a8 <_realloc_r+0x24>
 800e49c:	f7fb fd24 	bl	8009ee8 <_free_r>
 800e4a0:	4625      	mov	r5, r4
 800e4a2:	4628      	mov	r0, r5
 800e4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4a8:	f000 f860 	bl	800e56c <_malloc_usable_size_r>
 800e4ac:	4284      	cmp	r4, r0
 800e4ae:	4607      	mov	r7, r0
 800e4b0:	d802      	bhi.n	800e4b8 <_realloc_r+0x34>
 800e4b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e4b6:	d812      	bhi.n	800e4de <_realloc_r+0x5a>
 800e4b8:	4621      	mov	r1, r4
 800e4ba:	4640      	mov	r0, r8
 800e4bc:	f7fb fd80 	bl	8009fc0 <_malloc_r>
 800e4c0:	4605      	mov	r5, r0
 800e4c2:	2800      	cmp	r0, #0
 800e4c4:	d0ed      	beq.n	800e4a2 <_realloc_r+0x1e>
 800e4c6:	42bc      	cmp	r4, r7
 800e4c8:	4622      	mov	r2, r4
 800e4ca:	4631      	mov	r1, r6
 800e4cc:	bf28      	it	cs
 800e4ce:	463a      	movcs	r2, r7
 800e4d0:	f7fb fcf4 	bl	8009ebc <memcpy>
 800e4d4:	4631      	mov	r1, r6
 800e4d6:	4640      	mov	r0, r8
 800e4d8:	f7fb fd06 	bl	8009ee8 <_free_r>
 800e4dc:	e7e1      	b.n	800e4a2 <_realloc_r+0x1e>
 800e4de:	4635      	mov	r5, r6
 800e4e0:	e7df      	b.n	800e4a2 <_realloc_r+0x1e>

0800e4e2 <_raise_r>:
 800e4e2:	291f      	cmp	r1, #31
 800e4e4:	b538      	push	{r3, r4, r5, lr}
 800e4e6:	4604      	mov	r4, r0
 800e4e8:	460d      	mov	r5, r1
 800e4ea:	d904      	bls.n	800e4f6 <_raise_r+0x14>
 800e4ec:	2316      	movs	r3, #22
 800e4ee:	6003      	str	r3, [r0, #0]
 800e4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4f4:	bd38      	pop	{r3, r4, r5, pc}
 800e4f6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e4f8:	b112      	cbz	r2, 800e500 <_raise_r+0x1e>
 800e4fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e4fe:	b94b      	cbnz	r3, 800e514 <_raise_r+0x32>
 800e500:	4620      	mov	r0, r4
 800e502:	f000 f831 	bl	800e568 <_getpid_r>
 800e506:	462a      	mov	r2, r5
 800e508:	4601      	mov	r1, r0
 800e50a:	4620      	mov	r0, r4
 800e50c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e510:	f000 b818 	b.w	800e544 <_kill_r>
 800e514:	2b01      	cmp	r3, #1
 800e516:	d00a      	beq.n	800e52e <_raise_r+0x4c>
 800e518:	1c59      	adds	r1, r3, #1
 800e51a:	d103      	bne.n	800e524 <_raise_r+0x42>
 800e51c:	2316      	movs	r3, #22
 800e51e:	6003      	str	r3, [r0, #0]
 800e520:	2001      	movs	r0, #1
 800e522:	e7e7      	b.n	800e4f4 <_raise_r+0x12>
 800e524:	2400      	movs	r4, #0
 800e526:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e52a:	4628      	mov	r0, r5
 800e52c:	4798      	blx	r3
 800e52e:	2000      	movs	r0, #0
 800e530:	e7e0      	b.n	800e4f4 <_raise_r+0x12>
	...

0800e534 <raise>:
 800e534:	4b02      	ldr	r3, [pc, #8]	; (800e540 <raise+0xc>)
 800e536:	4601      	mov	r1, r0
 800e538:	6818      	ldr	r0, [r3, #0]
 800e53a:	f7ff bfd2 	b.w	800e4e2 <_raise_r>
 800e53e:	bf00      	nop
 800e540:	200000c4 	.word	0x200000c4

0800e544 <_kill_r>:
 800e544:	b538      	push	{r3, r4, r5, lr}
 800e546:	4d07      	ldr	r5, [pc, #28]	; (800e564 <_kill_r+0x20>)
 800e548:	2300      	movs	r3, #0
 800e54a:	4604      	mov	r4, r0
 800e54c:	4608      	mov	r0, r1
 800e54e:	4611      	mov	r1, r2
 800e550:	602b      	str	r3, [r5, #0]
 800e552:	f7f6 ff07 	bl	8005364 <_kill>
 800e556:	1c43      	adds	r3, r0, #1
 800e558:	d102      	bne.n	800e560 <_kill_r+0x1c>
 800e55a:	682b      	ldr	r3, [r5, #0]
 800e55c:	b103      	cbz	r3, 800e560 <_kill_r+0x1c>
 800e55e:	6023      	str	r3, [r4, #0]
 800e560:	bd38      	pop	{r3, r4, r5, pc}
 800e562:	bf00      	nop
 800e564:	20002e78 	.word	0x20002e78

0800e568 <_getpid_r>:
 800e568:	f7f6 bef4 	b.w	8005354 <_getpid>

0800e56c <_malloc_usable_size_r>:
 800e56c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e570:	1f18      	subs	r0, r3, #4
 800e572:	2b00      	cmp	r3, #0
 800e574:	bfbc      	itt	lt
 800e576:	580b      	ldrlt	r3, [r1, r0]
 800e578:	18c0      	addlt	r0, r0, r3
 800e57a:	4770      	bx	lr

0800e57c <_init>:
 800e57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e57e:	bf00      	nop
 800e580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e582:	bc08      	pop	{r3}
 800e584:	469e      	mov	lr, r3
 800e586:	4770      	bx	lr

0800e588 <_fini>:
 800e588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e58a:	bf00      	nop
 800e58c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e58e:	bc08      	pop	{r3}
 800e590:	469e      	mov	lr, r3
 800e592:	4770      	bx	lr
