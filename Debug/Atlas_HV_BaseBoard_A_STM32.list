
Atlas_HV_BaseBoard_A_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001890  0800e678  0800e678  0001e678  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff08  0800ff08  00020298  2**0
                  CONTENTS
  4 .ARM          00000008  0800ff08  0800ff08  0001ff08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff10  0800ff10  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff10  0800ff10  0001ff10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ff14  0800ff14  0001ff14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  0800ff18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c5c  20000298  080101b0  00020298  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002ef4  080101b0  00022ef4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ea0a  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005345  00000000  00000000  0003ecd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab8  00000000  00000000  00044018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001888  00000000  00000000  00045ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fb27  00000000  00000000  00047358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027ce4  00000000  00000000  00066e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6259  00000000  00000000  0008eb63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134dbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082ac  00000000  00000000  00134e0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000298 	.word	0x20000298
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e65c 	.word	0x0800e65c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000029c 	.word	0x2000029c
 80001dc:	0800e65c 	.word	0x0800e65c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <application_main>:




void application_main()
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0

		app_leds_init();
 800100e:	f001 fba9 	bl	8002764 <app_leds_init>

		ParamsDefaultValues();
 8001012:	f002 fe9f 	bl	8003d54 <ParamsDefaultValues>
		ParamsLoad();
 8001016:	f002 ff5b 	bl	8003ed0 <ParamsLoad>



	  //hand address for ADC data store
	  p_ADC_data[0] = &ChannelsStatus[0].voltage_measurement;
 800101a:	4b51      	ldr	r3, [pc, #324]	; (8001160 <application_main+0x158>)
 800101c:	4a51      	ldr	r2, [pc, #324]	; (8001164 <application_main+0x15c>)
 800101e:	601a      	str	r2, [r3, #0]
	  p_ADC_data[1] = &ChannelsStatus[1].voltage_measurement;
 8001020:	4b4f      	ldr	r3, [pc, #316]	; (8001160 <application_main+0x158>)
 8001022:	4a51      	ldr	r2, [pc, #324]	; (8001168 <application_main+0x160>)
 8001024:	605a      	str	r2, [r3, #4]
	  p_ADC_data[2] = &ChannelsStatus[2].voltage_measurement;
 8001026:	4b4e      	ldr	r3, [pc, #312]	; (8001160 <application_main+0x158>)
 8001028:	4a50      	ldr	r2, [pc, #320]	; (800116c <application_main+0x164>)
 800102a:	609a      	str	r2, [r3, #8]
	  p_ADC_data[3] = &ChannelsStatus[0].current_measurement;
 800102c:	4b4c      	ldr	r3, [pc, #304]	; (8001160 <application_main+0x158>)
 800102e:	4a50      	ldr	r2, [pc, #320]	; (8001170 <application_main+0x168>)
 8001030:	60da      	str	r2, [r3, #12]
	  p_ADC_data[4] = &ChannelsStatus[1].current_measurement;
 8001032:	4b4b      	ldr	r3, [pc, #300]	; (8001160 <application_main+0x158>)
 8001034:	4a4f      	ldr	r2, [pc, #316]	; (8001174 <application_main+0x16c>)
 8001036:	611a      	str	r2, [r3, #16]
	  p_ADC_data[5] = &ChannelsStatus[2].current_measurement;
 8001038:	4b49      	ldr	r3, [pc, #292]	; (8001160 <application_main+0x158>)
 800103a:	4a4f      	ldr	r2, [pc, #316]	; (8001178 <application_main+0x170>)
 800103c:	615a      	str	r2, [r3, #20]

	  //hand address for error signals store
	  p_ERROR_data[0] = &ChannelsStatus[0].power_good;
 800103e:	4b4f      	ldr	r3, [pc, #316]	; (800117c <application_main+0x174>)
 8001040:	4a4f      	ldr	r2, [pc, #316]	; (8001180 <application_main+0x178>)
 8001042:	601a      	str	r2, [r3, #0]
	  p_ERROR_data[1] = &ChannelsStatus[1].power_good;
 8001044:	4b4d      	ldr	r3, [pc, #308]	; (800117c <application_main+0x174>)
 8001046:	4a4f      	ldr	r2, [pc, #316]	; (8001184 <application_main+0x17c>)
 8001048:	605a      	str	r2, [r3, #4]
	  p_ERROR_data[2] = &ChannelsStatus[2].power_good;
 800104a:	4b4c      	ldr	r3, [pc, #304]	; (800117c <application_main+0x174>)
 800104c:	4a4e      	ldr	r2, [pc, #312]	; (8001188 <application_main+0x180>)
 800104e:	609a      	str	r2, [r3, #8]
	  p_ERROR_data[3] = &ChannelsStatus[0].over_current;
 8001050:	4b4a      	ldr	r3, [pc, #296]	; (800117c <application_main+0x174>)
 8001052:	4a4e      	ldr	r2, [pc, #312]	; (800118c <application_main+0x184>)
 8001054:	60da      	str	r2, [r3, #12]
	  p_ERROR_data[4] = &ChannelsStatus[1].over_current;
 8001056:	4b49      	ldr	r3, [pc, #292]	; (800117c <application_main+0x174>)
 8001058:	4a4d      	ldr	r2, [pc, #308]	; (8001190 <application_main+0x188>)
 800105a:	611a      	str	r2, [r3, #16]
	  p_ERROR_data[5] = &ChannelsStatus[2].over_current;
 800105c:	4b47      	ldr	r3, [pc, #284]	; (800117c <application_main+0x174>)
 800105e:	4a4d      	ldr	r2, [pc, #308]	; (8001194 <application_main+0x18c>)
 8001060:	615a      	str	r2, [r3, #20]

	  HAL_GPIO_WritePin(PWR_EN_GPIO_Port, PWR_EN_Pin, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001068:	484b      	ldr	r0, [pc, #300]	; (8001198 <application_main+0x190>)
 800106a:	f005 fc33 	bl	80068d4 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(W55_RST_GPIO_Port, W55_RST_Pin, GPIO_PIN_SET);
 800106e:	2201      	movs	r2, #1
 8001070:	2108      	movs	r1, #8
 8001072:	4849      	ldr	r0, [pc, #292]	; (8001198 <application_main+0x190>)
 8001074:	f005 fc2e 	bl	80068d4 <HAL_GPIO_WritePin>
	  ETH_udp_Init();
 8001078:	f003 f9d0 	bl	800441c <ETH_udp_Init>

	  __HAL_UART_ENABLE_IT(&huart2, UART_IT_ERR);
 800107c:	4b47      	ldr	r3, [pc, #284]	; (800119c <application_main+0x194>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	695a      	ldr	r2, [r3, #20]
 8001082:	4b46      	ldr	r3, [pc, #280]	; (800119c <application_main+0x194>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f042 0201 	orr.w	r2, r2, #1
 800108a:	615a      	str	r2, [r3, #20]
	  __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);//enable uart3 interupt
 800108c:	4b43      	ldr	r3, [pc, #268]	; (800119c <application_main+0x194>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	4b42      	ldr	r3, [pc, #264]	; (800119c <application_main+0x194>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f042 0220 	orr.w	r2, r2, #32
 800109a:	60da      	str	r2, [r3, #12]

	  DAC_Init();
 800109c:	f003 f82e 	bl	80040fc <DAC_Init>
	  HAL_TIM_Base_Start_IT(&htim10); //start timer for ADC reading
 80010a0:	483f      	ldr	r0, [pc, #252]	; (80011a0 <application_main+0x198>)
 80010a2:	f006 ffc5 	bl	8008030 <HAL_TIM_Base_Start_IT>
	  //_ControlOutputWithChannelEnable = true;

	  uint32_t timer;


	  Set_Voltage(0, minimum_voltage);
 80010a6:	211e      	movs	r1, #30
 80010a8:	2000      	movs	r0, #0
 80010aa:	f001 fe47 	bl	8002d3c <Set_Voltage>
	  Set_Voltage(1, minimum_voltage);
 80010ae:	211e      	movs	r1, #30
 80010b0:	2001      	movs	r0, #1
 80010b2:	f001 fe43 	bl	8002d3c <Set_Voltage>
	  Set_Voltage(2, minimum_voltage);
 80010b6:	211e      	movs	r1, #30
 80010b8:	2002      	movs	r0, #2
 80010ba:	f001 fe3f 	bl	8002d3c <Set_Voltage>

	  while(1)
	  {

		  app_leds_drive();
 80010be:	f001 fba9 	bl	8002814 <app_leds_drive>

		  //ethernet
		  ETH_udp_Receive();
 80010c2:	f003 fa27 	bl	8004514 <ETH_udp_Receive>

		  ErrorSignalTime();
 80010c6:	f000 ff3f 	bl	8001f48 <ErrorSignalTime>

		  //errors
		  if(_Found_Error && MainParams.EnableErrorExecute)
 80010ca:	4b36      	ldr	r3, [pc, #216]	; (80011a4 <application_main+0x19c>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d00f      	beq.n	80010f2 <application_main+0xea>
 80010d2:	4b35      	ldr	r3, [pc, #212]	; (80011a8 <application_main+0x1a0>)
 80010d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00b      	beq.n	80010f2 <application_main+0xea>
		  //if(_Found_Error)
		  {
			  ErrorExecute(0);
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 fefe 	bl	8001edc <ErrorExecute>
			  ErrorExecute(1);
 80010e0:	2001      	movs	r0, #1
 80010e2:	f000 fefb 	bl	8001edc <ErrorExecute>
			  ErrorExecute(2);
 80010e6:	2002      	movs	r0, #2
 80010e8:	f000 fef8 	bl	8001edc <ErrorExecute>

			  _Found_Error = false;
 80010ec:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <application_main+0x19c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
		  }

		  ChannelControl(0);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f002 faa6 	bl	8003644 <ChannelControl>
		  ChannelControl(1);
 80010f8:	2001      	movs	r0, #1
 80010fa:	f002 faa3 	bl	8003644 <ChannelControl>
		  ChannelControl(2);
 80010fe:	2002      	movs	r0, #2
 8001100:	f002 faa0 	bl	8003644 <ChannelControl>



		  bool NewCommand_uart = ProcessCommunication_UART(); //load command from uart buffer
 8001104:	f000 fcc6 	bl	8001a94 <ProcessCommunication_UART>
 8001108:	4603      	mov	r3, r0
 800110a:	70fb      	strb	r3, [r7, #3]

		  //process command from uart
		  if(NewCommand_uart)
 800110c:	78fb      	ldrb	r3, [r7, #3]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d004      	beq.n	800111c <application_main+0x114>
		  {
			  //HAL_GPIO_WritePin(LED_green_GPIO_Port, LED_green_Pin, GPIO_PIN_SET);
			  ProcessCommand(_command_id);
 8001112:	4b26      	ldr	r3, [pc, #152]	; (80011ac <application_main+0x1a4>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f860 	bl	80011dc <ProcessCommand>
			  //HAL_GPIO_WritePin(LED_green_GPIO_Port, LED_green_Pin, GPIO_PIN_RESET);
		  }


		  bool NewCommand_eth = ProcessCommunication_ETH(); //load command from ethernet buffer
 800111c:	f000 fd2a 	bl	8001b74 <ProcessCommunication_ETH>
 8001120:	4603      	mov	r3, r0
 8001122:	70bb      	strb	r3, [r7, #2]

		  //process command from ethernet
		  if(NewCommand_eth)
 8001124:	78bb      	ldrb	r3, [r7, #2]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d004      	beq.n	8001134 <application_main+0x12c>
		  {
			  //HAL_GPIO_WritePin(LED_blue_GPIO_Port, LED_blue_Pin, GPIO_PIN_SET);
			  ProcessCommand(_command_id);
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <application_main+0x1a4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f000 f854 	bl	80011dc <ProcessCommand>
			  //HAL_GPIO_WritePin(LED_blue_GPIO_Port, LED_blue_Pin, GPIO_PIN_RESET);
		  }


		  //connection control
		  Communication_ConnectedTimer();
 8001134:	f000 febe 	bl	8001eb4 <Communication_ConnectedTimer>
		  AppConnectedExecute(_AppConnected);
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <application_main+0x1a8>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f001 f86d 	bl	800221c <AppConnectedExecute>


		  if((HAL_GetTick() - timer) > 50)
 8001142:	f004 fba7 	bl	8005894 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	2b32      	cmp	r3, #50	; 0x32
 800114e:	d9b6      	bls.n	80010be <application_main+0xb6>
		  {
			  timer = HAL_GetTick();
 8001150:	f004 fba0 	bl	8005894 <HAL_GetTick>
 8001154:	6078      	str	r0, [r7, #4]
			  AdaptiveVoltageTune(0);
 8001156:	2000      	movs	r0, #0
 8001158:	f002 fcf6 	bl	8003b48 <AdaptiveVoltageTune>
	  {
 800115c:	e7af      	b.n	80010be <application_main+0xb6>
 800115e:	bf00      	nop
 8001160:	20001980 	.word	0x20001980
 8001164:	200019e4 	.word	0x200019e4
 8001168:	200019f8 	.word	0x200019f8
 800116c:	20001a0c 	.word	0x20001a0c
 8001170:	200019e8 	.word	0x200019e8
 8001174:	200019fc 	.word	0x200019fc
 8001178:	20001a10 	.word	0x20001a10
 800117c:	20000300 	.word	0x20000300
 8001180:	200019ed 	.word	0x200019ed
 8001184:	20001a01 	.word	0x20001a01
 8001188:	20001a15 	.word	0x20001a15
 800118c:	200019ec 	.word	0x200019ec
 8001190:	20001a00 	.word	0x20001a00
 8001194:	20001a14 	.word	0x20001a14
 8001198:	40020400 	.word	0x40020400
 800119c:	20002e58 	.word	0x20002e58
 80011a0:	20002e10 	.word	0x20002e10
 80011a4:	20000318 	.word	0x20000318
 80011a8:	20001aa0 	.word	0x20001aa0
 80011ac:	200002bc 	.word	0x200002bc
 80011b0:	200002b8 	.word	0x200002b8

080011b4 <HAL_TIM_PeriodElapsedCallback>:
/* @brief callback of timer period elapsed -> for ADC measure and read error signals
 *
 *
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	if(htim == &htim10)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d105      	bne.n	80011d0 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		ReadADCChannels();
 80011c4:	f001 f9ac 	bl	8002520 <ReadADCChannels>
		ADCStore();
 80011c8:	f001 f9cc 	bl	8002564 <ADCStore>
		ErrorSignalsRead();
 80011cc:	f000 ff76 	bl	80020bc <ErrorSignalsRead>
	}
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20002e10 	.word	0x20002e10

080011dc <ProcessCommand>:
 * @param command_id -> number of data command
 * @param value -> value for control
 *
 */
void ProcessCommand(int command_id)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	switch(command_id)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b63      	cmp	r3, #99	; 0x63
 80011e8:	f200 82ba 	bhi.w	8001760 <ProcessCommand+0x584>
 80011ec:	a201      	add	r2, pc, #4	; (adr r2, 80011f4 <ProcessCommand+0x18>)
 80011ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f2:	bf00      	nop
 80011f4:	08001385 	.word	0x08001385
 80011f8:	0800138b 	.word	0x0800138b
 80011fc:	0800139d 	.word	0x0800139d
 8001200:	080013b5 	.word	0x080013b5
 8001204:	080013cd 	.word	0x080013cd
 8001208:	080013e5 	.word	0x080013e5
 800120c:	080013fd 	.word	0x080013fd
 8001210:	08001415 	.word	0x08001415
 8001214:	0800142d 	.word	0x0800142d
 8001218:	0800143d 	.word	0x0800143d
 800121c:	0800144d 	.word	0x0800144d
 8001220:	0800145d 	.word	0x0800145d
 8001224:	08001483 	.word	0x08001483
 8001228:	080014a9 	.word	0x080014a9
 800122c:	08001761 	.word	0x08001761
 8001230:	08001761 	.word	0x08001761
 8001234:	08001761 	.word	0x08001761
 8001238:	08001761 	.word	0x08001761
 800123c:	08001761 	.word	0x08001761
 8001240:	08001761 	.word	0x08001761
 8001244:	080014e7 	.word	0x080014e7
 8001248:	080014e1 	.word	0x080014e1
 800124c:	080014cf 	.word	0x080014cf
 8001250:	08001761 	.word	0x08001761
 8001254:	080014d5 	.word	0x080014d5
 8001258:	080014ed 	.word	0x080014ed
 800125c:	080014f9 	.word	0x080014f9
 8001260:	08001505 	.word	0x08001505
 8001264:	08001511 	.word	0x08001511
 8001268:	0800151d 	.word	0x0800151d
 800126c:	08001529 	.word	0x08001529
 8001270:	08001535 	.word	0x08001535
 8001274:	08001761 	.word	0x08001761
 8001278:	08001761 	.word	0x08001761
 800127c:	08001761 	.word	0x08001761
 8001280:	08001761 	.word	0x08001761
 8001284:	08001761 	.word	0x08001761
 8001288:	08001761 	.word	0x08001761
 800128c:	08001541 	.word	0x08001541
 8001290:	08001547 	.word	0x08001547
 8001294:	08001559 	.word	0x08001559
 8001298:	0800156b 	.word	0x0800156b
 800129c:	0800157d 	.word	0x0800157d
 80012a0:	0800158f 	.word	0x0800158f
 80012a4:	080015a1 	.word	0x080015a1
 80012a8:	080015b3 	.word	0x080015b3
 80012ac:	080015c5 	.word	0x080015c5
 80012b0:	080015d7 	.word	0x080015d7
 80012b4:	080015e9 	.word	0x080015e9
 80012b8:	080015fb 	.word	0x080015fb
 80012bc:	0800160d 	.word	0x0800160d
 80012c0:	08001761 	.word	0x08001761
 80012c4:	08001761 	.word	0x08001761
 80012c8:	08001761 	.word	0x08001761
 80012cc:	08001761 	.word	0x08001761
 80012d0:	08001761 	.word	0x08001761
 80012d4:	08001761 	.word	0x08001761
 80012d8:	08001761 	.word	0x08001761
 80012dc:	08001761 	.word	0x08001761
 80012e0:	08001761 	.word	0x08001761
 80012e4:	08001761 	.word	0x08001761
 80012e8:	08001761 	.word	0x08001761
 80012ec:	08001761 	.word	0x08001761
 80012f0:	0800161f 	.word	0x0800161f
 80012f4:	08001631 	.word	0x08001631
 80012f8:	08001643 	.word	0x08001643
 80012fc:	08001655 	.word	0x08001655
 8001300:	08001675 	.word	0x08001675
 8001304:	08001687 	.word	0x08001687
 8001308:	08001761 	.word	0x08001761
 800130c:	08001761 	.word	0x08001761
 8001310:	08001761 	.word	0x08001761
 8001314:	08001761 	.word	0x08001761
 8001318:	08001761 	.word	0x08001761
 800131c:	08001761 	.word	0x08001761
 8001320:	08001699 	.word	0x08001699
 8001324:	0800169f 	.word	0x0800169f
 8001328:	080016a5 	.word	0x080016a5
 800132c:	080016b5 	.word	0x080016b5
 8001330:	080016c5 	.word	0x080016c5
 8001334:	080016d5 	.word	0x080016d5
 8001338:	080016e5 	.word	0x080016e5
 800133c:	080016f5 	.word	0x080016f5
 8001340:	08001761 	.word	0x08001761
 8001344:	08001761 	.word	0x08001761
 8001348:	08001761 	.word	0x08001761
 800134c:	08001705 	.word	0x08001705
 8001350:	0800170b 	.word	0x0800170b
 8001354:	08001719 	.word	0x08001719
 8001358:	08001727 	.word	0x08001727
 800135c:	08001735 	.word	0x08001735
 8001360:	08001761 	.word	0x08001761
 8001364:	08001761 	.word	0x08001761
 8001368:	08001761 	.word	0x08001761
 800136c:	08001761 	.word	0x08001761
 8001370:	08001743 	.word	0x08001743
 8001374:	08001749 	.word	0x08001749
 8001378:	0800174f 	.word	0x0800174f
 800137c:	0800175b 	.word	0x0800175b
 8001380:	08001755 	.word	0x08001755
	{
		case cmd_NON:
			//GetDiff();
			ETH_load_ip();
 8001384:	f002 ffd8 	bl	8004338 <ETH_load_ip>
			break;
 8001388:	e1f1      	b.n	800176e <ProcessCommand+0x592>

		case cmd_Connected:

			//if(_command_source == csource_ETH) ETH_udp_StoreEndpoint();
			Comunication_ResetConnectedTimer();
 800138a:	f000 fd83 	bl	8001e94 <Comunication_ResetConnectedTimer>
			SendCommunication(cmd_Connected,_command_value);
 800138e:	4bb6      	ldr	r3, [pc, #728]	; (8001668 <ProcessCommand+0x48c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4619      	mov	r1, r3
 8001394:	2001      	movs	r0, #1
 8001396:	f000 fc57 	bl	8001c48 <SendCommunication>
			break;
 800139a:	e1e8      	b.n	800176e <ProcessCommand+0x592>

		case cmd_enable_CH1:
			Channel_Enable(0, _command_value);
 800139c:	4bb2      	ldr	r3, [pc, #712]	; (8001668 <ProcessCommand+0x48c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf14      	ite	ne
 80013a4:	2301      	movne	r3, #1
 80013a6:	2300      	moveq	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	4619      	mov	r1, r3
 80013ac:	2000      	movs	r0, #0
 80013ae:	f001 fedf 	bl	8003170 <Channel_Enable>
			break;
 80013b2:	e1dc      	b.n	800176e <ProcessCommand+0x592>

		case cmd_enable_CH2:
			Channel_Enable(1, _command_value);
 80013b4:	4bac      	ldr	r3, [pc, #688]	; (8001668 <ProcessCommand+0x48c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	bf14      	ite	ne
 80013bc:	2301      	movne	r3, #1
 80013be:	2300      	moveq	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	4619      	mov	r1, r3
 80013c4:	2001      	movs	r0, #1
 80013c6:	f001 fed3 	bl	8003170 <Channel_Enable>
			break;
 80013ca:	e1d0      	b.n	800176e <ProcessCommand+0x592>

		case cmd_enable_CH3:
			Channel_Enable(2, _command_value);
 80013cc:	4ba6      	ldr	r3, [pc, #664]	; (8001668 <ProcessCommand+0x48c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	bf14      	ite	ne
 80013d4:	2301      	movne	r3, #1
 80013d6:	2300      	moveq	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	4619      	mov	r1, r3
 80013dc:	2002      	movs	r0, #2
 80013de:	f001 fec7 	bl	8003170 <Channel_Enable>
			break;
 80013e2:	e1c4      	b.n	800176e <ProcessCommand+0x592>

		case cmd_output_CH1:
			Channel_Output(0, _command_value);
 80013e4:	4ba0      	ldr	r3, [pc, #640]	; (8001668 <ProcessCommand+0x48c>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	bf14      	ite	ne
 80013ec:	2301      	movne	r3, #1
 80013ee:	2300      	moveq	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	4619      	mov	r1, r3
 80013f4:	2000      	movs	r0, #0
 80013f6:	f002 f8c5 	bl	8003584 <Channel_Output>
			break;
 80013fa:	e1b8      	b.n	800176e <ProcessCommand+0x592>

		case cmd_output_CH2:
			Channel_Output(1, _command_value);
 80013fc:	4b9a      	ldr	r3, [pc, #616]	; (8001668 <ProcessCommand+0x48c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	bf14      	ite	ne
 8001404:	2301      	movne	r3, #1
 8001406:	2300      	moveq	r3, #0
 8001408:	b2db      	uxtb	r3, r3
 800140a:	4619      	mov	r1, r3
 800140c:	2001      	movs	r0, #1
 800140e:	f002 f8b9 	bl	8003584 <Channel_Output>
			break;
 8001412:	e1ac      	b.n	800176e <ProcessCommand+0x592>

		case cmd_output_CH3:
			Channel_Output(2, _command_value);
 8001414:	4b94      	ldr	r3, [pc, #592]	; (8001668 <ProcessCommand+0x48c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf14      	ite	ne
 800141c:	2301      	movne	r3, #1
 800141e:	2300      	moveq	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	4619      	mov	r1, r3
 8001424:	2002      	movs	r0, #2
 8001426:	f002 f8ad 	bl	8003584 <Channel_Output>
			break;
 800142a:	e1a0      	b.n	800176e <ProcessCommand+0x592>

		case cmd_set_voltage_CH1:
			Set_Voltage(0, _command_value);
 800142c:	4b8e      	ldr	r3, [pc, #568]	; (8001668 <ProcessCommand+0x48c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	b29b      	uxth	r3, r3
 8001432:	4619      	mov	r1, r3
 8001434:	2000      	movs	r0, #0
 8001436:	f001 fc81 	bl	8002d3c <Set_Voltage>
			break;
 800143a:	e198      	b.n	800176e <ProcessCommand+0x592>

		case cmd_set_voltage_CH2:
			Set_Voltage(1, _command_value);
 800143c:	4b8a      	ldr	r3, [pc, #552]	; (8001668 <ProcessCommand+0x48c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	b29b      	uxth	r3, r3
 8001442:	4619      	mov	r1, r3
 8001444:	2001      	movs	r0, #1
 8001446:	f001 fc79 	bl	8002d3c <Set_Voltage>
			break;
 800144a:	e190      	b.n	800176e <ProcessCommand+0x592>

		case cmd_set_voltage_CH3:
			Set_Voltage(2, _command_value);
 800144c:	4b86      	ldr	r3, [pc, #536]	; (8001668 <ProcessCommand+0x48c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	b29b      	uxth	r3, r3
 8001452:	4619      	mov	r1, r3
 8001454:	2002      	movs	r0, #2
 8001456:	f001 fc71 	bl	8002d3c <Set_Voltage>
			break;
 800145a:	e188      	b.n	800176e <ProcessCommand+0x592>

		case cmd_polarity_CH1:
			if(_command_value == 1)Channel_Polarity(0, polarity_positive);
 800145c:	4b82      	ldr	r3, [pc, #520]	; (8001668 <ProcessCommand+0x48c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d104      	bne.n	800146e <ProcessCommand+0x292>
 8001464:	2100      	movs	r1, #0
 8001466:	2000      	movs	r0, #0
 8001468:	f002 f81e 	bl	80034a8 <Channel_Polarity>
			else if (_command_value == 2)Channel_Polarity(0, polarity_negative);
			break;
 800146c:	e17a      	b.n	8001764 <ProcessCommand+0x588>
			else if (_command_value == 2)Channel_Polarity(0, polarity_negative);
 800146e:	4b7e      	ldr	r3, [pc, #504]	; (8001668 <ProcessCommand+0x48c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2b02      	cmp	r3, #2
 8001474:	f040 8176 	bne.w	8001764 <ProcessCommand+0x588>
 8001478:	2101      	movs	r1, #1
 800147a:	2000      	movs	r0, #0
 800147c:	f002 f814 	bl	80034a8 <Channel_Polarity>
			break;
 8001480:	e170      	b.n	8001764 <ProcessCommand+0x588>

		case cmd_polarity_CH2:
			if(_command_value == 1)Channel_Polarity(1, polarity_positive);
 8001482:	4b79      	ldr	r3, [pc, #484]	; (8001668 <ProcessCommand+0x48c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d104      	bne.n	8001494 <ProcessCommand+0x2b8>
 800148a:	2100      	movs	r1, #0
 800148c:	2001      	movs	r0, #1
 800148e:	f002 f80b 	bl	80034a8 <Channel_Polarity>
			else if (_command_value == 2)Channel_Polarity(1, polarity_negative);
			break;
 8001492:	e169      	b.n	8001768 <ProcessCommand+0x58c>
			else if (_command_value == 2)Channel_Polarity(1, polarity_negative);
 8001494:	4b74      	ldr	r3, [pc, #464]	; (8001668 <ProcessCommand+0x48c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b02      	cmp	r3, #2
 800149a:	f040 8165 	bne.w	8001768 <ProcessCommand+0x58c>
 800149e:	2101      	movs	r1, #1
 80014a0:	2001      	movs	r0, #1
 80014a2:	f002 f801 	bl	80034a8 <Channel_Polarity>
			break;
 80014a6:	e15f      	b.n	8001768 <ProcessCommand+0x58c>

		case cmd_polarity_CH3:
			if(_command_value == 1)Channel_Polarity(2, polarity_positive);
 80014a8:	4b6f      	ldr	r3, [pc, #444]	; (8001668 <ProcessCommand+0x48c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d104      	bne.n	80014ba <ProcessCommand+0x2de>
 80014b0:	2100      	movs	r1, #0
 80014b2:	2002      	movs	r0, #2
 80014b4:	f001 fff8 	bl	80034a8 <Channel_Polarity>
			else if (_command_value == 2)Channel_Polarity(2, polarity_negative);
			break;
 80014b8:	e158      	b.n	800176c <ProcessCommand+0x590>
			else if (_command_value == 2)Channel_Polarity(2, polarity_negative);
 80014ba:	4b6b      	ldr	r3, [pc, #428]	; (8001668 <ProcessCommand+0x48c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	f040 8154 	bne.w	800176c <ProcessCommand+0x590>
 80014c4:	2101      	movs	r1, #1
 80014c6:	2002      	movs	r0, #2
 80014c8:	f001 ffee 	bl	80034a8 <Channel_Polarity>
			break;
 80014cc:	e14e      	b.n	800176c <ProcessCommand+0x590>

		case cmd_getsetting:
			Get_Setting();
 80014ce:	f002 fa79 	bl	80039c4 <Get_Setting>
			break;
 80014d2:	e14c      	b.n	800176e <ProcessCommand+0x592>

		case cmd_LED:
			LedSwitch(_command_value);
 80014d4:	4b64      	ldr	r3, [pc, #400]	; (8001668 <ProcessCommand+0x48c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f001 f8bb 	bl	8002654 <LedSwitch>
			break;
 80014de:	e146      	b.n	800176e <ProcessCommand+0x592>

		case cmd_getallvalues:
			Get_AllMeasurement();
 80014e0:	f002 fa58 	bl	8003994 <Get_AllMeasurement>
			//ErrorWatching();
			break;
 80014e4:	e143      	b.n	800176e <ProcessCommand+0x592>

		case cmd_error_signals:
			Get_ErrorSignals();
 80014e6:	f002 fa0d 	bl	8003904 <Get_ErrorSignals>
			break;
 80014ea:	e140      	b.n	800176e <ProcessCommand+0x592>

		case cmd_ip_store_endpoint:
			ETH_udp_StoreEndpoint(_u32_command_value);
 80014ec:	4b5f      	ldr	r3, [pc, #380]	; (800166c <ProcessCommand+0x490>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f002 ffd1 	bl	8004498 <ETH_udp_StoreEndpoint>
			break;
 80014f6:	e13a      	b.n	800176e <ProcessCommand+0x592>

		case cmd_ip_store_mac_1:
			ETH_StoreMac_1(_u32_command_value);
 80014f8:	4b5c      	ldr	r3, [pc, #368]	; (800166c <ProcessCommand+0x490>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f002 fe35 	bl	800416c <ETH_StoreMac_1>
			break;
 8001502:	e134      	b.n	800176e <ProcessCommand+0x592>

		case cmd_ip_store_mac_2:
			ETH_StoreMac_2(_u32_command_value);
 8001504:	4b59      	ldr	r3, [pc, #356]	; (800166c <ProcessCommand+0x490>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f002 fe3f 	bl	800418c <ETH_StoreMac_2>
			break;
 800150e:	e12e      	b.n	800176e <ProcessCommand+0x592>

		case cmd_ip_store_myip:
			ETH_StoreIP(_u32_command_value);
 8001510:	4b56      	ldr	r3, [pc, #344]	; (800166c <ProcessCommand+0x490>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f002 fe49 	bl	80041ac <ETH_StoreIP>
			break;
 800151a:	e128      	b.n	800176e <ProcessCommand+0x592>

		case cmd_ip_store_mymask:
			ETH_StoreNETMASK(_u32_command_value);
 800151c:	4b53      	ldr	r3, [pc, #332]	; (800166c <ProcessCommand+0x490>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f002 fe53 	bl	80041cc <ETH_StoreNETMASK>
			break;
 8001526:	e122      	b.n	800176e <ProcessCommand+0x592>

		case cmd_ip_store_mygatew:
			ETH_StoreGATEWAY(_u32_command_value);
 8001528:	4b50      	ldr	r3, [pc, #320]	; (800166c <ProcessCommand+0x490>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f002 fe5d 	bl	80041ec <ETH_StoreGATEWAY>
			break;
 8001532:	e11c      	b.n	800176e <ProcessCommand+0x592>

		case cmd_ip_store_UdpRecvPort:
			ETH_Store_UdpRecPort(_u32_command_value);
 8001534:	4b4d      	ldr	r3, [pc, #308]	; (800166c <ProcessCommand+0x490>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f002 fe67 	bl	800420c <ETH_Store_UdpRecPort>
			break;
 800153e:	e116      	b.n	800176e <ProcessCommand+0x592>

		case cmd_ip_getsetting:
			ETH_SendSetting();
 8001540:	f002 fed0 	bl	80042e4 <ETH_SendSetting>
			break;
 8001544:	e113      	b.n	800176e <ProcessCommand+0x592>

		case cmd_adc_set_k0:
			StoreADCConstant(0, _float_command_value);
 8001546:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <ProcessCommand+0x494>)
 8001548:	edd3 7a00 	vldr	s15, [r3]
 800154c:	eeb0 0a67 	vmov.f32	s0, s15
 8001550:	2000      	movs	r0, #0
 8001552:	f000 ff41 	bl	80023d8 <StoreADCConstant>
			break;
 8001556:	e10a      	b.n	800176e <ProcessCommand+0x592>

		case cmd_adc_set_k1:
			StoreADCConstant(1, _float_command_value);
 8001558:	4b45      	ldr	r3, [pc, #276]	; (8001670 <ProcessCommand+0x494>)
 800155a:	edd3 7a00 	vldr	s15, [r3]
 800155e:	eeb0 0a67 	vmov.f32	s0, s15
 8001562:	2001      	movs	r0, #1
 8001564:	f000 ff38 	bl	80023d8 <StoreADCConstant>
			break;
 8001568:	e101      	b.n	800176e <ProcessCommand+0x592>

		case cmd_adc_set_k2:
			StoreADCConstant(2, _float_command_value);
 800156a:	4b41      	ldr	r3, [pc, #260]	; (8001670 <ProcessCommand+0x494>)
 800156c:	edd3 7a00 	vldr	s15, [r3]
 8001570:	eeb0 0a67 	vmov.f32	s0, s15
 8001574:	2002      	movs	r0, #2
 8001576:	f000 ff2f 	bl	80023d8 <StoreADCConstant>
			break;
 800157a:	e0f8      	b.n	800176e <ProcessCommand+0x592>

		case cmd_adc_set_k3:
			StoreADCConstant(3, _float_command_value);
 800157c:	4b3c      	ldr	r3, [pc, #240]	; (8001670 <ProcessCommand+0x494>)
 800157e:	edd3 7a00 	vldr	s15, [r3]
 8001582:	eeb0 0a67 	vmov.f32	s0, s15
 8001586:	2003      	movs	r0, #3
 8001588:	f000 ff26 	bl	80023d8 <StoreADCConstant>
			break;
 800158c:	e0ef      	b.n	800176e <ProcessCommand+0x592>

		case cmd_adc_set_k4:
			StoreADCConstant(4, _float_command_value);
 800158e:	4b38      	ldr	r3, [pc, #224]	; (8001670 <ProcessCommand+0x494>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	eeb0 0a67 	vmov.f32	s0, s15
 8001598:	2004      	movs	r0, #4
 800159a:	f000 ff1d 	bl	80023d8 <StoreADCConstant>
			break;
 800159e:	e0e6      	b.n	800176e <ProcessCommand+0x592>

		case cmd_adc_set_k5:
			StoreADCConstant(5, _float_command_value);
 80015a0:	4b33      	ldr	r3, [pc, #204]	; (8001670 <ProcessCommand+0x494>)
 80015a2:	edd3 7a00 	vldr	s15, [r3]
 80015a6:	eeb0 0a67 	vmov.f32	s0, s15
 80015aa:	2005      	movs	r0, #5
 80015ac:	f000 ff14 	bl	80023d8 <StoreADCConstant>
			break;
 80015b0:	e0dd      	b.n	800176e <ProcessCommand+0x592>

		case cmd_adc_set_q0:
			StoreADCConstant(6, _float_command_value);
 80015b2:	4b2f      	ldr	r3, [pc, #188]	; (8001670 <ProcessCommand+0x494>)
 80015b4:	edd3 7a00 	vldr	s15, [r3]
 80015b8:	eeb0 0a67 	vmov.f32	s0, s15
 80015bc:	2006      	movs	r0, #6
 80015be:	f000 ff0b 	bl	80023d8 <StoreADCConstant>
			break;
 80015c2:	e0d4      	b.n	800176e <ProcessCommand+0x592>

		case cmd_adc_set_q1:
			StoreADCConstant(7, _float_command_value);
 80015c4:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <ProcessCommand+0x494>)
 80015c6:	edd3 7a00 	vldr	s15, [r3]
 80015ca:	eeb0 0a67 	vmov.f32	s0, s15
 80015ce:	2007      	movs	r0, #7
 80015d0:	f000 ff02 	bl	80023d8 <StoreADCConstant>
			break;
 80015d4:	e0cb      	b.n	800176e <ProcessCommand+0x592>

		case cmd_adc_set_q2:
			StoreADCConstant(8, _float_command_value);
 80015d6:	4b26      	ldr	r3, [pc, #152]	; (8001670 <ProcessCommand+0x494>)
 80015d8:	edd3 7a00 	vldr	s15, [r3]
 80015dc:	eeb0 0a67 	vmov.f32	s0, s15
 80015e0:	2008      	movs	r0, #8
 80015e2:	f000 fef9 	bl	80023d8 <StoreADCConstant>
			break;
 80015e6:	e0c2      	b.n	800176e <ProcessCommand+0x592>

		case cmd_adc_set_q3:
			StoreADCConstant(9, _float_command_value);
 80015e8:	4b21      	ldr	r3, [pc, #132]	; (8001670 <ProcessCommand+0x494>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	eeb0 0a67 	vmov.f32	s0, s15
 80015f2:	2009      	movs	r0, #9
 80015f4:	f000 fef0 	bl	80023d8 <StoreADCConstant>
			break;
 80015f8:	e0b9      	b.n	800176e <ProcessCommand+0x592>

		case cmd_adc_set_q4:
			StoreADCConstant(10, _float_command_value);
 80015fa:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <ProcessCommand+0x494>)
 80015fc:	edd3 7a00 	vldr	s15, [r3]
 8001600:	eeb0 0a67 	vmov.f32	s0, s15
 8001604:	200a      	movs	r0, #10
 8001606:	f000 fee7 	bl	80023d8 <StoreADCConstant>
			break;
 800160a:	e0b0      	b.n	800176e <ProcessCommand+0x592>

		case cmd_adc_set_q5:
			StoreADCConstant(11, _float_command_value);
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <ProcessCommand+0x494>)
 800160e:	edd3 7a00 	vldr	s15, [r3]
 8001612:	eeb0 0a67 	vmov.f32	s0, s15
 8001616:	200b      	movs	r0, #11
 8001618:	f000 fede 	bl	80023d8 <StoreADCConstant>
			break;
 800161c:	e0a7      	b.n	800176e <ProcessCommand+0x592>


		case cmd_dac_set_k0:
			StoreDACConstant(0, _float_command_value);
 800161e:	4b14      	ldr	r3, [pc, #80]	; (8001670 <ProcessCommand+0x494>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	eeb0 0a67 	vmov.f32	s0, s15
 8001628:	2000      	movs	r0, #0
 800162a:	f001 f9a3 	bl	8002974 <StoreDACConstant>
			break;
 800162e:	e09e      	b.n	800176e <ProcessCommand+0x592>

		case cmd_dac_set_k1:
			StoreDACConstant(1, _float_command_value);
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <ProcessCommand+0x494>)
 8001632:	edd3 7a00 	vldr	s15, [r3]
 8001636:	eeb0 0a67 	vmov.f32	s0, s15
 800163a:	2001      	movs	r0, #1
 800163c:	f001 f99a 	bl	8002974 <StoreDACConstant>
			break;
 8001640:	e095      	b.n	800176e <ProcessCommand+0x592>

		case cmd_dac_set_k2:
			StoreDACConstant(2, _float_command_value);
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <ProcessCommand+0x494>)
 8001644:	edd3 7a00 	vldr	s15, [r3]
 8001648:	eeb0 0a67 	vmov.f32	s0, s15
 800164c:	2002      	movs	r0, #2
 800164e:	f001 f991 	bl	8002974 <StoreDACConstant>
			break;
 8001652:	e08c      	b.n	800176e <ProcessCommand+0x592>

		case cmd_dac_set_q0:
			StoreDACConstant(3, _float_command_value);
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <ProcessCommand+0x494>)
 8001656:	edd3 7a00 	vldr	s15, [r3]
 800165a:	eeb0 0a67 	vmov.f32	s0, s15
 800165e:	2003      	movs	r0, #3
 8001660:	f001 f988 	bl	8002974 <StoreDACConstant>
			break;
 8001664:	e083      	b.n	800176e <ProcessCommand+0x592>
 8001666:	bf00      	nop
 8001668:	200002c0 	.word	0x200002c0
 800166c:	200002c8 	.word	0x200002c8
 8001670:	200002c4 	.word	0x200002c4

		case cmd_dac_set_q1:
			StoreDACConstant(4, _float_command_value);
 8001674:	4b40      	ldr	r3, [pc, #256]	; (8001778 <ProcessCommand+0x59c>)
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	eeb0 0a67 	vmov.f32	s0, s15
 800167e:	2004      	movs	r0, #4
 8001680:	f001 f978 	bl	8002974 <StoreDACConstant>
			break;
 8001684:	e073      	b.n	800176e <ProcessCommand+0x592>

		case cmd_dac_set_q2:
			StoreDACConstant(5, _float_command_value);
 8001686:	4b3c      	ldr	r3, [pc, #240]	; (8001778 <ProcessCommand+0x59c>)
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	eeb0 0a67 	vmov.f32	s0, s15
 8001690:	2005      	movs	r0, #5
 8001692:	f001 f96f 	bl	8002974 <StoreDACConstant>
			break;
 8001696:	e06a      	b.n	800176e <ProcessCommand+0x592>

		case cmd_adc_getallcoef:
			SendADCCoefficients();
 8001698:	f000 feb6 	bl	8002408 <SendADCCoefficients>
			break;
 800169c:	e067      	b.n	800176e <ProcessCommand+0x592>

		case cmd_dac_getallcoef:
			SendDACCoefficients();
 800169e:	f001 f981 	bl	80029a4 <SendDACCoefficients>
			break;
 80016a2:	e064      	b.n	800176e <ProcessCommand+0x592>

		case cmd_set_pre_reg_CH1: //debug
			Set_PreReg_Voltage(0, _command_value);
 80016a4:	4b35      	ldr	r3, [pc, #212]	; (800177c <ProcessCommand+0x5a0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	4619      	mov	r1, r3
 80016ac:	2000      	movs	r0, #0
 80016ae:	f001 faa9 	bl	8002c04 <Set_PreReg_Voltage>
			break;
 80016b2:	e05c      	b.n	800176e <ProcessCommand+0x592>

		case cmd_set_pre_reg_CH2: //debug
			Set_PreReg_Voltage(1, _command_value);
 80016b4:	4b31      	ldr	r3, [pc, #196]	; (800177c <ProcessCommand+0x5a0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	4619      	mov	r1, r3
 80016bc:	2001      	movs	r0, #1
 80016be:	f001 faa1 	bl	8002c04 <Set_PreReg_Voltage>
			break;
 80016c2:	e054      	b.n	800176e <ProcessCommand+0x592>

		case cmd_set_pre_reg_CH3: //debug
			Set_PreReg_Voltage(2, _command_value);
 80016c4:	4b2d      	ldr	r3, [pc, #180]	; (800177c <ProcessCommand+0x5a0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	4619      	mov	r1, r3
 80016cc:	2002      	movs	r0, #2
 80016ce:	f001 fa99 	bl	8002c04 <Set_PreReg_Voltage>
			break;
 80016d2:	e04c      	b.n	800176e <ProcessCommand+0x592>

		case cmd_set_out_reg_CH1: //debug
			Set_OutReg_Voltage(0, _command_value);
 80016d4:	4b29      	ldr	r3, [pc, #164]	; (800177c <ProcessCommand+0x5a0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	4619      	mov	r1, r3
 80016dc:	2000      	movs	r0, #0
 80016de:	f001 fabf 	bl	8002c60 <Set_OutReg_Voltage>
			break;
 80016e2:	e044      	b.n	800176e <ProcessCommand+0x592>

		case cmd_set_out_reg_CH2: //debug
			Set_OutReg_Voltage(1, _command_value);
 80016e4:	4b25      	ldr	r3, [pc, #148]	; (800177c <ProcessCommand+0x5a0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	4619      	mov	r1, r3
 80016ec:	2001      	movs	r0, #1
 80016ee:	f001 fab7 	bl	8002c60 <Set_OutReg_Voltage>
			break;
 80016f2:	e03c      	b.n	800176e <ProcessCommand+0x592>

		case cmd_set_out_reg_CH3: //debug
			Set_OutReg_Voltage(2, _command_value);
 80016f4:	4b21      	ldr	r3, [pc, #132]	; (800177c <ProcessCommand+0x5a0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	4619      	mov	r1, r3
 80016fc:	2002      	movs	r0, #2
 80016fe:	f001 faaf 	bl	8002c60 <Set_OutReg_Voltage>
			break;
 8001702:	e034      	b.n	800176e <ProcessCommand+0x592>

		case cmd_errState_Get:
			Get_State_err();
 8001704:	f002 f9ba 	bl	8003a7c <Get_State_err>
			break;
 8001708:	e031      	b.n	800176e <ProcessCommand+0x592>

		case cmd_CfgSet_EnableErrorExecute:
			SetConfigData(0, _command_value);
 800170a:	4b1c      	ldr	r3, [pc, #112]	; (800177c <ProcessCommand+0x5a0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4619      	mov	r1, r3
 8001710:	2000      	movs	r0, #0
 8001712:	f002 fc53 	bl	8003fbc <SetConfigData>
			break;
 8001716:	e02a      	b.n	800176e <ProcessCommand+0x592>

		case cmd_CfgSet_DisableInConnLost:
			SetConfigData(1, _command_value);
 8001718:	4b18      	ldr	r3, [pc, #96]	; (800177c <ProcessCommand+0x5a0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
 800171e:	2001      	movs	r0, #1
 8001720:	f002 fc4c 	bl	8003fbc <SetConfigData>
			break;
 8001724:	e023      	b.n	800176e <ProcessCommand+0x592>

		case cmd_CfgSet_CtrlOutWithChEnable:
			SetConfigData(2, _command_value);
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <ProcessCommand+0x5a0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4619      	mov	r1, r3
 800172c:	2002      	movs	r0, #2
 800172e:	f002 fc45 	bl	8003fbc <SetConfigData>
			break;
 8001732:	e01c      	b.n	800176e <ProcessCommand+0x592>

		case cmd_CfgSet_ErrorExecuteAutoRestart:
			SetConfigData(3, _command_value);
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <ProcessCommand+0x5a0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	2003      	movs	r0, #3
 800173c:	f002 fc3e 	bl	8003fbc <SetConfigData>
			break;
 8001740:	e015      	b.n	800176e <ProcessCommand+0x592>

		case cmd_Cfg_Get:
			SendConfigData();
 8001742:	f002 fc51 	bl	8003fe8 <SendConfigData>
			break;
 8001746:	e012      	b.n	800176e <ProcessCommand+0x592>

		case cmd_params_store:
			ParamsStore();
 8001748:	f002 fc02 	bl	8003f50 <ParamsStore>
			break;
 800174c:	e00f      	b.n	800176e <ProcessCommand+0x592>

		case cmd_params_default:
			RestoreParamsDefault();
 800174e:	f002 fc1d 	bl	8003f8c <RestoreParamsDefault>
			break;
 8001752:	e00c      	b.n	800176e <ProcessCommand+0x592>

		case cmd_reset:
			System_Reset();
 8001754:	f002 f9ce 	bl	8003af4 <System_Reset>
			break;
 8001758:	e009      	b.n	800176e <ProcessCommand+0x592>

		case cmd_Eth_ReInit:
			ETH_udp_Init();
 800175a:	f002 fe5f 	bl	800441c <ETH_udp_Init>
			break;
 800175e:	e006      	b.n	800176e <ProcessCommand+0x592>


		default:
			break;
 8001760:	bf00      	nop
 8001762:	e004      	b.n	800176e <ProcessCommand+0x592>
			break;
 8001764:	bf00      	nop
 8001766:	e002      	b.n	800176e <ProcessCommand+0x592>
			break;
 8001768:	bf00      	nop
 800176a:	e000      	b.n	800176e <ProcessCommand+0x592>
			break;
 800176c:	bf00      	nop
	}
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200002c4 	.word	0x200002c4
 800177c:	200002c0 	.word	0x200002c0

08001780 <get_string_length>:
 * @param s -> pointer on string
 *
 * @return length of string
 */
int get_string_length(const char *s)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
    int len=0;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
    while (s[len] != 0)
 800178c:	e002      	b.n	8001794 <get_string_length+0x14>
    {
        len++;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	3301      	adds	r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
    while (s[len] != 0)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1f6      	bne.n	800178e <get_string_length+0xe>
    }

    return len;
 80017a0:	68fb      	ldr	r3, [r7, #12]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <StringIsEqual>:
 *
 * @return true -> string is equal
 * @retuen false -> string is not equal
 */
bool StringIsEqual(const uint8_t *one, int one_start, int one_end, const uint8_t *two,int two_start, int two_end)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b089      	sub	sp, #36	; 0x24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	603b      	str	r3, [r7, #0]
	if(!((one_start >= 0) || (two_start >= 0) || (one_end >= 0) || (two_end >= 0))) return false; //start and stop must be equal or bigger than 0
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	da0a      	bge.n	80017d8 <StringIsEqual+0x2a>
 80017c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	da07      	bge.n	80017d8 <StringIsEqual+0x2a>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	da04      	bge.n	80017d8 <StringIsEqual+0x2a>
 80017ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	da01      	bge.n	80017d8 <StringIsEqual+0x2a>
 80017d4:	2300      	movs	r3, #0
 80017d6:	e02c      	b.n	8001832 <StringIsEqual+0x84>

	int one_length = one_end - one_start;
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	61bb      	str	r3, [r7, #24]
	int two_length = two_end - two_start;
 80017e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	617b      	str	r3, [r7, #20]

	if(!((one_length > 0) || (two_length > 0))) return false; //length must be bigger than 0
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	dc04      	bgt.n	80017f8 <StringIsEqual+0x4a>
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	dc01      	bgt.n	80017f8 <StringIsEqual+0x4a>
 80017f4:	2300      	movs	r3, #0
 80017f6:	e01c      	b.n	8001832 <StringIsEqual+0x84>
	if(!(one_length == two_length)) return false; //length of one and two must be equal
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d001      	beq.n	8001804 <StringIsEqual+0x56>
 8001800:	2300      	movs	r3, #0
 8001802:	e016      	b.n	8001832 <StringIsEqual+0x84>

	for(int i = 0;i < one_length; i++)
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
 8001808:	e00e      	b.n	8001828 <StringIsEqual+0x7a>
	{
		if(!(one[i] == two[i])) return false;
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4413      	add	r3, r2
 8001810:	781a      	ldrb	r2, [r3, #0]
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	6839      	ldr	r1, [r7, #0]
 8001816:	440b      	add	r3, r1
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d001      	beq.n	8001822 <StringIsEqual+0x74>
 800181e:	2300      	movs	r3, #0
 8001820:	e007      	b.n	8001832 <StringIsEqual+0x84>
	for(int i = 0;i < one_length; i++)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3301      	adds	r3, #1
 8001826:	61fb      	str	r3, [r7, #28]
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	429a      	cmp	r2, r3
 800182e:	dbec      	blt.n	800180a <StringIsEqual+0x5c>
	}

	return true;
 8001830:	2301      	movs	r3, #1
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <GetDelimiterPosition>:
 * @param character -> searched character
 *
 * @return position of searched character or -1 if character is not found
 */
int GetDelimiterPosition(const uint8_t *string, int length, uint8_t character)
{
 800183e:	b480      	push	{r7}
 8001840:	b087      	sub	sp, #28
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	4613      	mov	r3, r2
 800184a:	71fb      	strb	r3, [r7, #7]
	for(int i = 0;i<length; i++)
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	e00b      	b.n	800186a <GetDelimiterPosition+0x2c>
	{
		if(string[i] == character)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	79fa      	ldrb	r2, [r7, #7]
 800185c:	429a      	cmp	r2, r3
 800185e:	d101      	bne.n	8001864 <GetDelimiterPosition+0x26>
		{
			return i;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	e008      	b.n	8001876 <GetDelimiterPosition+0x38>
	for(int i = 0;i<length; i++)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3301      	adds	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	429a      	cmp	r2, r3
 8001870:	dbef      	blt.n	8001852 <GetDelimiterPosition+0x14>
		}
	}

	return -1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001876:	4618      	mov	r0, r3
 8001878:	371c      	adds	r7, #28
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <ProcessLine>:
 *
 * @return true -> correct processing
 * @return false -> wrong command
 */
bool ProcessLine(const uint8_t *Buffer, int legth)
{
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b08f      	sub	sp, #60	; 0x3c
 8001888:	af02      	add	r7, sp, #8
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
	int delim_position = GetDelimiterPosition(Buffer,legth,(uint8_t)'='); //position of delimiter =
 800188e:	223d      	movs	r2, #61	; 0x3d
 8001890:	6839      	ldr	r1, [r7, #0]
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ffd3 	bl	800183e <GetDelimiterPosition>
 8001898:	6238      	str	r0, [r7, #32]
	if(delim_position == -1) return false; //delimiter not found
 800189a:	6a3b      	ldr	r3, [r7, #32]
 800189c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a0:	d101      	bne.n	80018a6 <ProcessLine+0x22>
 80018a2:	2300      	movs	r3, #0
 80018a4:	e0e2      	b.n	8001a6c <ProcessLine+0x1e8>

	_command_id  = -1;
 80018a6:	4b73      	ldr	r3, [pc, #460]	; (8001a74 <ProcessLine+0x1f0>)
 80018a8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ac:	601a      	str	r2, [r3, #0]

	_command_value = 0;
 80018ae:	4b72      	ldr	r3, [pc, #456]	; (8001a78 <ProcessLine+0x1f4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
	_float_command_value = 0;
 80018b4:	4b71      	ldr	r3, [pc, #452]	; (8001a7c <ProcessLine+0x1f8>)
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
	_u32_command_value = 0;
 80018bc:	4b70      	ldr	r3, [pc, #448]	; (8001a80 <ProcessLine+0x1fc>)
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]

	if(Buffer[0] == '/') //string start with "/"...command is convert from number
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b2f      	cmp	r3, #47	; 0x2f
 80018c8:	d133      	bne.n	8001932 <ProcessLine+0xae>
	{
		uint8_t buffer_for_id[3] = {0}; //buffer for convert
 80018ca:	4b6e      	ldr	r3, [pc, #440]	; (8001a84 <ProcessLine+0x200>)
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	81bb      	strh	r3, [r7, #12]
 80018d0:	2300      	movs	r3, #0
 80018d2:	73bb      	strb	r3, [r7, #14]

		for(int i = 1; i<(delim_position); i++ )
 80018d4:	2301      	movs	r3, #1
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018d8:	e019      	b.n	800190e <ProcessLine+0x8a>
		{
			if(i > 3) break;// i bigger then buffer_for_id
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	2b03      	cmp	r3, #3
 80018de:	dc1b      	bgt.n	8001918 <ProcessLine+0x94>
			char c = Buffer[i]; //take character from Buffer
 80018e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	77fb      	strb	r3, [r7, #31]
			if(!(c >= '0' && c <= '9')) return false; //character is not number
 80018ea:	7ffb      	ldrb	r3, [r7, #31]
 80018ec:	2b2f      	cmp	r3, #47	; 0x2f
 80018ee:	d902      	bls.n	80018f6 <ProcessLine+0x72>
 80018f0:	7ffb      	ldrb	r3, [r7, #31]
 80018f2:	2b39      	cmp	r3, #57	; 0x39
 80018f4:	d901      	bls.n	80018fa <ProcessLine+0x76>
 80018f6:	2300      	movs	r3, #0
 80018f8:	e0b8      	b.n	8001a6c <ProcessLine+0x1e8>
			buffer_for_id[i-1] = c;
 80018fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fc:	3b01      	subs	r3, #1
 80018fe:	3330      	adds	r3, #48	; 0x30
 8001900:	443b      	add	r3, r7
 8001902:	7ffa      	ldrb	r2, [r7, #31]
 8001904:	f803 2c24 	strb.w	r2, [r3, #-36]
		for(int i = 1; i<(delim_position); i++ )
 8001908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190a:	3301      	adds	r3, #1
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800190e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	429a      	cmp	r2, r3
 8001914:	dbe1      	blt.n	80018da <ProcessLine+0x56>
 8001916:	e000      	b.n	800191a <ProcessLine+0x96>
			if(i > 3) break;// i bigger then buffer_for_id
 8001918:	bf00      	nop

		}
			_command_form = cform_short;
 800191a:	4b5b      	ldr	r3, [pc, #364]	; (8001a88 <ProcessLine+0x204>)
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
			_command_id = atoi((char *)buffer_for_id); //convert string to int
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	4618      	mov	r0, r3
 8001926:	f008 fb00 	bl	8009f2a <atoi>
 800192a:	4603      	mov	r3, r0
 800192c:	4a51      	ldr	r2, [pc, #324]	; (8001a74 <ProcessLine+0x1f0>)
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	e02a      	b.n	8001988 <ProcessLine+0x104>
	}

	else //command not start with "/"
	{
		//search equal string in command_string table
		for(int i = 0;i<(sizeof(command_strings)/STRING_TABLE_SIZE); i++)
 8001932:	2300      	movs	r3, #0
 8001934:	62bb      	str	r3, [r7, #40]	; 0x28
 8001936:	e021      	b.n	800197c <ProcessLine+0xf8>
		{
			if(StringIsEqual(Buffer, 0, delim_position, (uint8_t *)command_strings[i], 0, get_string_length(command_strings[i])))
 8001938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193a:	2232      	movs	r2, #50	; 0x32
 800193c:	fb02 f303 	mul.w	r3, r2, r3
 8001940:	4a52      	ldr	r2, [pc, #328]	; (8001a8c <ProcessLine+0x208>)
 8001942:	189c      	adds	r4, r3, r2
 8001944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001946:	2232      	movs	r2, #50	; 0x32
 8001948:	fb02 f303 	mul.w	r3, r2, r3
 800194c:	4a4f      	ldr	r2, [pc, #316]	; (8001a8c <ProcessLine+0x208>)
 800194e:	4413      	add	r3, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff15 	bl	8001780 <get_string_length>
 8001956:	4603      	mov	r3, r0
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	2300      	movs	r3, #0
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	4623      	mov	r3, r4
 8001960:	6a3a      	ldr	r2, [r7, #32]
 8001962:	2100      	movs	r1, #0
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7ff ff22 	bl	80017ae <StringIsEqual>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d002      	beq.n	8001976 <ProcessLine+0xf2>
			{
				_command_id  = i; //get command position
 8001970:	4a40      	ldr	r2, [pc, #256]	; (8001a74 <ProcessLine+0x1f0>)
 8001972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001974:	6013      	str	r3, [r2, #0]
		for(int i = 0;i<(sizeof(command_strings)/STRING_TABLE_SIZE); i++)
 8001976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001978:	3301      	adds	r3, #1
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
 800197c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800197e:	2b63      	cmp	r3, #99	; 0x63
 8001980:	d9da      	bls.n	8001938 <ProcessLine+0xb4>
			}
		}
		_command_form = cform_full;
 8001982:	4b41      	ldr	r3, [pc, #260]	; (8001a88 <ProcessLine+0x204>)
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
	}

	if(_command_id == -1) return false; //command not found
 8001988:	4b3a      	ldr	r3, [pc, #232]	; (8001a74 <ProcessLine+0x1f0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001990:	d101      	bne.n	8001996 <ProcessLine+0x112>
 8001992:	2300      	movs	r3, #0
 8001994:	e06a      	b.n	8001a6c <ProcessLine+0x1e8>

	if(Command_parse[_command_id] == cparse_non) return true; //non parsing
 8001996:	4b37      	ldr	r3, [pc, #220]	; (8001a74 <ProcessLine+0x1f0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a3d      	ldr	r2, [pc, #244]	; (8001a90 <ProcessLine+0x20c>)
 800199c:	5cd3      	ldrb	r3, [r2, r3]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <ProcessLine+0x122>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e062      	b.n	8001a6c <ProcessLine+0x1e8>


	uint8_t buffer_for_number[12] = {0}; //buffer for convert
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	f107 0314 	add.w	r3, r7, #20
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]

	//take character to convert from Buffer
	for(int i = 0; i<(legth-delim_position-1); i++ )
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
 80019b8:	e021      	b.n	80019fe <ProcessLine+0x17a>
	{
		if(i > 11) return false;// i bigger then buffer_for_int size
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	2b0b      	cmp	r3, #11
 80019be:	dd01      	ble.n	80019c4 <ProcessLine+0x140>
 80019c0:	2300      	movs	r3, #0
 80019c2:	e053      	b.n	8001a6c <ProcessLine+0x1e8>
		char c = Buffer[delim_position+1+i]; //take character from Buffer
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	4413      	add	r3, r2
 80019cc:	461a      	mov	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	77bb      	strb	r3, [r7, #30]
		if(!((c >= '0' && c <= '9') || c == '.')) return false; //character is not number
 80019d6:	7fbb      	ldrb	r3, [r7, #30]
 80019d8:	2b2f      	cmp	r3, #47	; 0x2f
 80019da:	d902      	bls.n	80019e2 <ProcessLine+0x15e>
 80019dc:	7fbb      	ldrb	r3, [r7, #30]
 80019de:	2b39      	cmp	r3, #57	; 0x39
 80019e0:	d904      	bls.n	80019ec <ProcessLine+0x168>
 80019e2:	7fbb      	ldrb	r3, [r7, #30]
 80019e4:	2b2e      	cmp	r3, #46	; 0x2e
 80019e6:	d001      	beq.n	80019ec <ProcessLine+0x168>
 80019e8:	2300      	movs	r3, #0
 80019ea:	e03f      	b.n	8001a6c <ProcessLine+0x1e8>
		buffer_for_number[i] = c;
 80019ec:	f107 0210 	add.w	r2, r7, #16
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	4413      	add	r3, r2
 80019f4:	7fba      	ldrb	r2, [r7, #30]
 80019f6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<(legth-delim_position-1); i++ )
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	3301      	adds	r3, #1
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	3b01      	subs	r3, #1
 8001a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	dbd6      	blt.n	80019ba <ProcessLine+0x136>
	}

	//convert buffer to number according to Command_parse
	if(Command_parse[_command_id] == cparse_int)
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <ProcessLine+0x1f0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a1f      	ldr	r2, [pc, #124]	; (8001a90 <ProcessLine+0x20c>)
 8001a12:	5cd3      	ldrb	r3, [r2, r3]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d108      	bne.n	8001a2a <ProcessLine+0x1a6>
	{
		_command_value = atoi((char *)buffer_for_number); //convert string to int
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f008 fa84 	bl	8009f2a <atoi>
 8001a22:	4603      	mov	r3, r0
 8001a24:	4a14      	ldr	r2, [pc, #80]	; (8001a78 <ProcessLine+0x1f4>)
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	e01f      	b.n	8001a6a <ProcessLine+0x1e6>
	}
	else if(Command_parse[_command_id] == cparse_float)
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <ProcessLine+0x1f0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <ProcessLine+0x20c>)
 8001a30:	5cd3      	ldrb	r3, [r2, r3]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d10a      	bne.n	8001a4c <ProcessLine+0x1c8>
	{
		_float_command_value = atoff((char *)buffer_for_number); //convert string to float
 8001a36:	f107 0310 	add.w	r3, r7, #16
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f008 fa72 	bl	8009f24 <atoff>
 8001a40:	eef0 7a40 	vmov.f32	s15, s0
 8001a44:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <ProcessLine+0x1f8>)
 8001a46:	edc3 7a00 	vstr	s15, [r3]
 8001a4a:	e00e      	b.n	8001a6a <ProcessLine+0x1e6>
	}
	else if(Command_parse[_command_id] == cparse_u32t)
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <ProcessLine+0x1f0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0f      	ldr	r2, [pc, #60]	; (8001a90 <ProcessLine+0x20c>)
 8001a52:	5cd3      	ldrb	r3, [r2, r3]
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d108      	bne.n	8001a6a <ProcessLine+0x1e6>
	{
		_u32_command_value = (uint32_t)atoll((char *)buffer_for_number); //convert string to uint32_t
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f008 fa68 	bl	8009f32 <atoll>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <ProcessLine+0x1fc>)
 8001a68:	601a      	str	r2, [r3, #0]
	}


	return true;
 8001a6a:	2301      	movs	r3, #1
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3734      	adds	r7, #52	; 0x34
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd90      	pop	{r4, r7, pc}
 8001a74:	200002bc 	.word	0x200002bc
 8001a78:	200002c0 	.word	0x200002c0
 8001a7c:	200002c4 	.word	0x200002c4
 8001a80:	200002c8 	.word	0x200002c8
 8001a84:	0800e678 	.word	0x0800e678
 8001a88:	200002cc 	.word	0x200002cc
 8001a8c:	0800e6c4 	.word	0x0800e6c4
 8001a90:	20000000 	.word	0x20000000

08001a94 <ProcessCommunication_UART>:
 *
 * @return true -> correct processing
 * @return false -> wrong command or not found new line
 */
bool ProcessCommunication_UART()
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b0a4      	sub	sp, #144	; 0x90
 8001a98:	af00      	add	r7, sp, #0
	if(!Uart_BufferNotEmpty()) return false;
 8001a9a:	f002 fd9b 	bl	80045d4 <Uart_BufferNotEmpty>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f083 0301 	eor.w	r3, r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <ProcessCommunication_UART+0x1a>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e05c      	b.n	8001b68 <ProcessCommunication_UART+0xd4>

	uint8_t line_buffer[128] = {0};
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	f107 0308 	add.w	r3, r7, #8
 8001ab6:	227c      	movs	r2, #124	; 0x7c
 8001ab8:	2100      	movs	r1, #0
 8001aba:	4618      	mov	r0, r3
 8001abc:	f008 fa7e 	bl	8009fbc <memset>
	uint8_t line_counter = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	uint32_t timeout_timer = HAL_GetTick();
 8001ac6:	f003 fee5 	bl	8005894 <HAL_GetTick>
 8001aca:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

	while(true)
	{
		if((HAL_GetTick() - timeout_timer) >= 50) return false;
 8001ace:	f003 fee1 	bl	8005894 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b31      	cmp	r3, #49	; 0x31
 8001adc:	d901      	bls.n	8001ae2 <ProcessCommunication_UART+0x4e>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e042      	b.n	8001b68 <ProcessCommunication_UART+0xd4>
		if(!Uart_BufferNotEmpty()) continue;
 8001ae2:	f002 fd77 	bl	80045d4 <Uart_BufferNotEmpty>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	f083 0301 	eor.w	r3, r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d138      	bne.n	8001b64 <ProcessCommunication_UART+0xd0>

		uint8_t data = Uart_ReadBuffer();
 8001af2:	f002 fdb1 	bl	8004658 <Uart_ReadBuffer>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

		if(data == '\n' || data == '\r')
 8001afc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001b00:	2b0a      	cmp	r3, #10
 8001b02:	d003      	beq.n	8001b0c <ProcessCommunication_UART+0x78>
 8001b04:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001b08:	2b0d      	cmp	r3, #13
 8001b0a:	d118      	bne.n	8001b3e <ProcessCommunication_UART+0xaa>
		{
			if(line_counter == 0) return false;
 8001b0c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <ProcessCommunication_UART+0x84>
 8001b14:	2300      	movs	r3, #0
 8001b16:	e027      	b.n	8001b68 <ProcessCommunication_UART+0xd4>

			bool b = ProcessLine(line_buffer, line_counter);
 8001b18:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff feaf 	bl	8001884 <ProcessLine>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

			line_counter = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			_command_source = csource_UART;
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <ProcessCommunication_UART+0xdc>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
			return b;
 8001b38:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001b3c:	e014      	b.n	8001b68 <ProcessCommunication_UART+0xd4>
		}
		else
		{
			line_buffer[line_counter] = data;
 8001b3e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001b42:	3390      	adds	r3, #144	; 0x90
 8001b44:	443b      	add	r3, r7
 8001b46:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001b4a:	f803 2c8c 	strb.w	r2, [r3, #-140]
			line_counter++;
 8001b4e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001b52:	3301      	adds	r3, #1
 8001b54:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			if(line_counter > (sizeof(line_buffer)-1)) return false;
 8001b58:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dab6      	bge.n	8001ace <ProcessCommunication_UART+0x3a>
 8001b60:	2300      	movs	r3, #0
 8001b62:	e001      	b.n	8001b68 <ProcessCommunication_UART+0xd4>
		if(!Uart_BufferNotEmpty()) continue;
 8001b64:	bf00      	nop
	{
 8001b66:	e7b2      	b.n	8001ace <ProcessCommunication_UART+0x3a>
		}
	}
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3790      	adds	r7, #144	; 0x90
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	200002cd 	.word	0x200002cd

08001b74 <ProcessCommunication_ETH>:
 *
 * @return true -> correct processing
 * @return false -> wrong command or not found new line
 */
bool ProcessCommunication_ETH()
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b0a4      	sub	sp, #144	; 0x90
 8001b78:	af00      	add	r7, sp, #0
	if(!ETH_BufferNotEmpty()) return false;
 8001b7a:	f000 fb79 	bl	8002270 <ETH_BufferNotEmpty>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f083 0301 	eor.w	r3, r3, #1
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <ProcessCommunication_ETH+0x1a>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e056      	b.n	8001c3c <ProcessCommunication_ETH+0xc8>

	uint8_t line_buffer[128] = {0};
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	f107 0308 	add.w	r3, r7, #8
 8001b96:	227c      	movs	r2, #124	; 0x7c
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f008 fa0e 	bl	8009fbc <memset>
	uint8_t line_counter = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	uint32_t timeout_timer = HAL_GetTick();
 8001ba6:	f003 fe75 	bl	8005894 <HAL_GetTick>
 8001baa:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

	while(true)
	{
		if((HAL_GetTick()-timeout_timer) >= 50) return false;
 8001bae:	f003 fe71 	bl	8005894 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b31      	cmp	r3, #49	; 0x31
 8001bbc:	d901      	bls.n	8001bc2 <ProcessCommunication_ETH+0x4e>
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e03c      	b.n	8001c3c <ProcessCommunication_ETH+0xc8>
		if(!ETH_BufferNotEmpty()) continue;
 8001bc2:	f000 fb55 	bl	8002270 <ETH_BufferNotEmpty>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f083 0301 	eor.w	r3, r3, #1
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d132      	bne.n	8001c38 <ProcessCommunication_ETH+0xc4>

		uint8_t data = ETH_ReadBuffer();
 8001bd2:	f000 fb9b 	bl	800230c <ETH_ReadBuffer>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

		if(data == '\n' || data == '\r')
 8001bdc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001be0:	2b0a      	cmp	r3, #10
 8001be2:	d003      	beq.n	8001bec <ProcessCommunication_ETH+0x78>
 8001be4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001be8:	2b0d      	cmp	r3, #13
 8001bea:	d112      	bne.n	8001c12 <ProcessCommunication_ETH+0x9e>
		{
			bool b = ProcessLine(line_buffer, line_counter);
 8001bec:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fe45 	bl	8001884 <ProcessLine>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

			line_counter = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			_command_source = csource_ETH;
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <ProcessCommunication_ETH+0xd0>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]
			return b;
 8001c0c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001c10:	e014      	b.n	8001c3c <ProcessCommunication_ETH+0xc8>
		}
		else
		{
			line_buffer[line_counter] = data;
 8001c12:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001c16:	3390      	adds	r3, #144	; 0x90
 8001c18:	443b      	add	r3, r7
 8001c1a:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001c1e:	f803 2c8c 	strb.w	r2, [r3, #-140]
			line_counter++;
 8001c22:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001c26:	3301      	adds	r3, #1
 8001c28:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			if(line_counter > (sizeof(line_buffer)-1)) return false;
 8001c2c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	dabc      	bge.n	8001bae <ProcessCommunication_ETH+0x3a>
 8001c34:	2300      	movs	r3, #0
 8001c36:	e001      	b.n	8001c3c <ProcessCommunication_ETH+0xc8>
		if(!ETH_BufferNotEmpty()) continue;
 8001c38:	bf00      	nop
	{
 8001c3a:	e7b8      	b.n	8001bae <ProcessCommunication_ETH+0x3a>
		}
	}
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3790      	adds	r7, #144	; 0x90
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200002cd 	.word	0x200002cd

08001c48 <SendCommunication>:
 * @param command_id -> number of data command
 * @param data -> data to be transmitted
 *
 */
void SendCommunication(eCommand_Id command_id, int data)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b0a4      	sub	sp, #144	; 0x90
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	71fb      	strb	r3, [r7, #7]
	char sprint_buffer[128];
	uint8_t size = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	if(_command_form == cform_full)
 8001c5a:	4b20      	ldr	r3, [pc, #128]	; (8001cdc <SendCommunication+0x94>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10f      	bne.n	8001c82 <SendCommunication+0x3a>
	{
		size = sprintf(sprint_buffer,"%s=%d\r\n",command_strings[command_id],data);
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	2232      	movs	r2, #50	; 0x32
 8001c66:	fb02 f303 	mul.w	r3, r2, r3
 8001c6a:	4a1d      	ldr	r2, [pc, #116]	; (8001ce0 <SendCommunication+0x98>)
 8001c6c:	441a      	add	r2, r3
 8001c6e:	f107 000c 	add.w	r0, r7, #12
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	491b      	ldr	r1, [pc, #108]	; (8001ce4 <SendCommunication+0x9c>)
 8001c76:	f008 ff03 	bl	800aa80 <siprintf>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001c80:	e00d      	b.n	8001c9e <SendCommunication+0x56>
	}
	else if(_command_form == cform_short)
 8001c82:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <SendCommunication+0x94>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d109      	bne.n	8001c9e <SendCommunication+0x56>
	{
		size = sprintf(sprint_buffer,"/%d=%d\r\n",(int)command_id,data);
 8001c8a:	79fa      	ldrb	r2, [r7, #7]
 8001c8c:	f107 000c 	add.w	r0, r7, #12
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	4915      	ldr	r1, [pc, #84]	; (8001ce8 <SendCommunication+0xa0>)
 8001c94:	f008 fef4 	bl	800aa80 <siprintf>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	}

	if(_command_source == csource_UART)
 8001c9e:	4b13      	ldr	r3, [pc, #76]	; (8001cec <SendCommunication+0xa4>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <SendCommunication+0x72>
	{
		Uart_Send(sprint_buffer, size);
 8001ca6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f002 fcfa 	bl	80046ac <Uart_Send>
	else if(_command_source == csource_ETH)
	{
		ETH_Send(sprint_buffer, size);
	}

}
 8001cb8:	e00c      	b.n	8001cd4 <SendCommunication+0x8c>
	else if(_command_source == csource_ETH)
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <SendCommunication+0xa4>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d108      	bne.n	8001cd4 <SendCommunication+0x8c>
		ETH_Send(sprint_buffer, size);
 8001cc2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	4611      	mov	r1, r2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f000 fb46 	bl	8002360 <ETH_Send>
}
 8001cd4:	bf00      	nop
 8001cd6:	3790      	adds	r7, #144	; 0x90
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	200002cc 	.word	0x200002cc
 8001ce0:	0800e6c4 	.word	0x0800e6c4
 8001ce4:	0800e67c 	.word	0x0800e67c
 8001ce8:	0800e684 	.word	0x0800e684
 8001cec:	200002cd 	.word	0x200002cd

08001cf0 <SendCommunication_float>:
 * @param command_id -> number of data command
 * @param data -> data to be transmitted
 *
 */
void SendCommunication_float(eCommand_Id command_id, float data)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 8001cf6:	af02      	add	r7, sp, #8
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001cfe:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8001d02:	ed83 0a00 	vstr	s0, [r3]
 8001d06:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001d0a:	f2a3 4309 	subw	r3, r3, #1033	; 0x409
 8001d0e:	701a      	strb	r2, [r3, #0]
	char sprint_buffer[1024];
	uint8_t size = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f

	if(_command_form == cform_full)
 8001d16:	4b30      	ldr	r3, [pc, #192]	; (8001dd8 <SendCommunication_float+0xe8>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d11e      	bne.n	8001d5c <SendCommunication_float+0x6c>
	{
		size = sprintf(sprint_buffer,"%s=%f\r\n",command_strings[command_id],data);
 8001d1e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001d22:	f2a3 4309 	subw	r3, r3, #1033	; 0x409
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2232      	movs	r2, #50	; 0x32
 8001d2a:	fb02 f303 	mul.w	r3, r2, r3
 8001d2e:	4a2b      	ldr	r2, [pc, #172]	; (8001ddc <SendCommunication_float+0xec>)
 8001d30:	189c      	adds	r4, r3, r2
 8001d32:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001d36:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	f7fe fc0c 	bl	8000558 <__aeabi_f2d>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	f107 000c 	add.w	r0, r7, #12
 8001d48:	e9cd 2300 	strd	r2, r3, [sp]
 8001d4c:	4622      	mov	r2, r4
 8001d4e:	4924      	ldr	r1, [pc, #144]	; (8001de0 <SendCommunication_float+0xf0>)
 8001d50:	f008 fe96 	bl	800aa80 <siprintf>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
 8001d5a:	e01c      	b.n	8001d96 <SendCommunication_float+0xa6>
	}
	else if(_command_form == cform_short)
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <SendCommunication_float+0xe8>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d118      	bne.n	8001d96 <SendCommunication_float+0xa6>
	{
		size = sprintf(sprint_buffer,"/%d=%f\r\n",(int)command_id,data);
 8001d64:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001d68:	f2a3 4309 	subw	r3, r3, #1033	; 0x409
 8001d6c:	781c      	ldrb	r4, [r3, #0]
 8001d6e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001d72:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8001d76:	6818      	ldr	r0, [r3, #0]
 8001d78:	f7fe fbee 	bl	8000558 <__aeabi_f2d>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	f107 000c 	add.w	r0, r7, #12
 8001d84:	e9cd 2300 	strd	r2, r3, [sp]
 8001d88:	4622      	mov	r2, r4
 8001d8a:	4916      	ldr	r1, [pc, #88]	; (8001de4 <SendCommunication_float+0xf4>)
 8001d8c:	f008 fe78 	bl	800aa80 <siprintf>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
	}

	if(_command_source == csource_UART)
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <SendCommunication_float+0xf8>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d109      	bne.n	8001db2 <SendCommunication_float+0xc2>
	{
		Uart_Send(sprint_buffer, size);
 8001d9e:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	f107 030c 	add.w	r3, r7, #12
 8001da8:	4611      	mov	r1, r2
 8001daa:	4618      	mov	r0, r3
 8001dac:	f002 fc7e 	bl	80046ac <Uart_Send>
	else if(_command_source == csource_ETH)
	{
		ETH_Send(sprint_buffer, size);
	}

}
 8001db0:	e00c      	b.n	8001dcc <SendCommunication_float+0xdc>
	else if(_command_source == csource_ETH)
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <SendCommunication_float+0xf8>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d108      	bne.n	8001dcc <SendCommunication_float+0xdc>
		ETH_Send(sprint_buffer, size);
 8001dba:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	4611      	mov	r1, r2
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f000 faca 	bl	8002360 <ETH_Send>
}
 8001dcc:	bf00      	nop
 8001dce:	f207 4714 	addw	r7, r7, #1044	; 0x414
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd90      	pop	{r4, r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200002cc 	.word	0x200002cc
 8001ddc:	0800e6c4 	.word	0x0800e6c4
 8001de0:	0800e690 	.word	0x0800e690
 8001de4:	0800e698 	.word	0x0800e698
 8001de8:	200002cd 	.word	0x200002cd

08001dec <SendCommunication_u32>:
 * @param command_id -> number of data command
 * @param data -> data to be transmitted
 *
 */
void SendCommunication_u32(eCommand_Id command_id, uint32_t data)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b09c      	sub	sp, #112	; 0x70
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	6039      	str	r1, [r7, #0]
 8001df6:	71fb      	strb	r3, [r7, #7]
	char sprint_buffer[100];
	uint8_t size = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	if(_command_form == cform_full)
 8001dfe:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <SendCommunication_u32+0x94>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10f      	bne.n	8001e26 <SendCommunication_u32+0x3a>
	{
		size = sprintf(sprint_buffer,"%s=%lu\r\n",command_strings[command_id],data);
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	2232      	movs	r2, #50	; 0x32
 8001e0a:	fb02 f303 	mul.w	r3, r2, r3
 8001e0e:	4a1d      	ldr	r2, [pc, #116]	; (8001e84 <SendCommunication_u32+0x98>)
 8001e10:	441a      	add	r2, r3
 8001e12:	f107 0008 	add.w	r0, r7, #8
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	491b      	ldr	r1, [pc, #108]	; (8001e88 <SendCommunication_u32+0x9c>)
 8001e1a:	f008 fe31 	bl	800aa80 <siprintf>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001e24:	e00d      	b.n	8001e42 <SendCommunication_u32+0x56>
	}
	else if(_command_form == cform_short)
 8001e26:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <SendCommunication_u32+0x94>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d109      	bne.n	8001e42 <SendCommunication_u32+0x56>
	{
		size = sprintf(sprint_buffer,"/%d=%lu\r\n",(int)command_id,data);
 8001e2e:	79fa      	ldrb	r2, [r7, #7]
 8001e30:	f107 0008 	add.w	r0, r7, #8
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	4915      	ldr	r1, [pc, #84]	; (8001e8c <SendCommunication_u32+0xa0>)
 8001e38:	f008 fe22 	bl	800aa80 <siprintf>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if(_command_source == csource_UART)
 8001e42:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <SendCommunication_u32+0xa4>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d109      	bne.n	8001e5e <SendCommunication_u32+0x72>
	{
		Uart_Send(sprint_buffer, size);
 8001e4a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	f107 0308 	add.w	r3, r7, #8
 8001e54:	4611      	mov	r1, r2
 8001e56:	4618      	mov	r0, r3
 8001e58:	f002 fc28 	bl	80046ac <Uart_Send>
	else if(_command_source == csource_ETH)
	{
		ETH_Send(sprint_buffer, size);
	}

}
 8001e5c:	e00c      	b.n	8001e78 <SendCommunication_u32+0x8c>
	else if(_command_source == csource_ETH)
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <SendCommunication_u32+0xa4>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d108      	bne.n	8001e78 <SendCommunication_u32+0x8c>
		ETH_Send(sprint_buffer, size);
 8001e66:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	f107 0308 	add.w	r3, r7, #8
 8001e70:	4611      	mov	r1, r2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 fa74 	bl	8002360 <ETH_Send>
}
 8001e78:	bf00      	nop
 8001e7a:	3770      	adds	r7, #112	; 0x70
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	200002cc 	.word	0x200002cc
 8001e84:	0800e6c4 	.word	0x0800e6c4
 8001e88:	0800e6a4 	.word	0x0800e6a4
 8001e8c:	0800e6b0 	.word	0x0800e6b0
 8001e90:	200002cd 	.word	0x200002cd

08001e94 <Comunication_ResetConnectedTimer>:


void Comunication_ResetConnectedTimer()
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
	ConnectedTimer = HAL_GetTick();
 8001e98:	f003 fcfc 	bl	8005894 <HAL_GetTick>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	4a03      	ldr	r2, [pc, #12]	; (8001eac <Comunication_ResetConnectedTimer+0x18>)
 8001ea0:	6013      	str	r3, [r2, #0]
	_AppConnected = true;
 8001ea2:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <Comunication_ResetConnectedTimer+0x1c>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	701a      	strb	r2, [r3, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	200002b4 	.word	0x200002b4
 8001eb0:	200002b8 	.word	0x200002b8

08001eb4 <Communication_ConnectedTimer>:

void Communication_ConnectedTimer()
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0

	  if((HAL_GetTick() - ConnectedTimer) > ConnectedTimer_Value)
 8001eb8:	f003 fcec 	bl	8005894 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <Communication_ConnectedTimer+0x20>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ec8:	d902      	bls.n	8001ed0 <Communication_ConnectedTimer+0x1c>
	  {
		  _AppConnected = false;
 8001eca:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <Communication_ConnectedTimer+0x24>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
	  }

}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	200002b4 	.word	0x200002b4
 8001ed8:	200002b8 	.word	0x200002b8

08001edc <ErrorExecute>:

/* @brief reaction on error signal
 *
 */
void ErrorExecute(uint8_t channel)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <ErrorExecute+0x1c>
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d002      	beq.n	8001ef8 <ErrorExecute+0x1c>
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d11d      	bne.n	8001f34 <ErrorExecute+0x58>

	//_Found_Error = false;

	//power good execution -> channel disable
	if(_FoundErrorforEach[channel])
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	4a10      	ldr	r2, [pc, #64]	; (8001f3c <ErrorExecute+0x60>)
 8001efc:	5cd3      	ldrb	r3, [r2, r3]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d019      	beq.n	8001f36 <ErrorExecute+0x5a>
	{
		//Channel_Enable(channel, false);

		if(MainParams.ErrorExecuteAutoRestore)
 8001f02:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <ErrorExecute+0x64>)
 8001f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d004      	beq.n	8001f14 <ErrorExecute+0x38>
		{
			Channel_Restart(channel);
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f001 f9f1 	bl	80032f4 <Channel_Restart>
 8001f12:	e010      	b.n	8001f36 <ErrorExecute+0x5a>
		}
		else
		{
			ChannelsStatus[channel].disableInError = true;
 8001f14:	79fa      	ldrb	r2, [r7, #7]
 8001f16:	490b      	ldr	r1, [pc, #44]	; (8001f44 <ErrorExecute+0x68>)
 8001f18:	4613      	mov	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	3312      	adds	r3, #18
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
			Channel_Enable(channel, false);
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f001 f91f 	bl	8003170 <Channel_Enable>
 8001f32:	e000      	b.n	8001f36 <ErrorExecute+0x5a>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8001f34:	bf00      	nop
		else
			Channel_Enable(channel, false);
			*/
	}

}
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	2000031c 	.word	0x2000031c
 8001f40:	20001aa0 	.word	0x20001aa0
 8001f44:	200019dc 	.word	0x200019dc

08001f48 <ErrorSignalTime>:


void ErrorSignalTime()
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0

	_FoundError_OR = false;
 8001f4e:	4b28      	ldr	r3, [pc, #160]	; (8001ff0 <ErrorSignalTime+0xa8>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < 6; i++)
 8001f54:	2300      	movs	r3, #0
 8001f56:	607b      	str	r3, [r7, #4]
 8001f58:	e042      	b.n	8001fe0 <ErrorSignalTime+0x98>
	{
		if(*p_ERROR_data[i]) //error je 1
 8001f5a:	4a26      	ldr	r2, [pc, #152]	; (8001ff4 <ErrorSignalTime+0xac>)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d014      	beq.n	8001f92 <ErrorSignalTime+0x4a>
		{
			if((HAL_GetTick() - ErrorTimer[i]) > Error_Time)
 8001f68:	f003 fc94 	bl	8005894 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	4922      	ldr	r1, [pc, #136]	; (8001ff8 <ErrorSignalTime+0xb0>)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d914      	bls.n	8001faa <ErrorSignalTime+0x62>
			{
				_Found_Error = true;
 8001f80:	4b1e      	ldr	r3, [pc, #120]	; (8001ffc <ErrorSignalTime+0xb4>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]
				_FoundErrorforEach[i] = true;
 8001f86:	4a1e      	ldr	r2, [pc, #120]	; (8002000 <ErrorSignalTime+0xb8>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	e00b      	b.n	8001faa <ErrorSignalTime+0x62>
			}
		}
		else
		{
			ErrorTimer[i] = HAL_GetTick();
 8001f92:	f003 fc7f 	bl	8005894 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	4917      	ldr	r1, [pc, #92]	; (8001ff8 <ErrorSignalTime+0xb0>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			_FoundErrorforEach[i] = false;
 8001fa0:	4a17      	ldr	r2, [pc, #92]	; (8002000 <ErrorSignalTime+0xb8>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
		}


		if(_FoundErrorforEach[i])
 8001faa:	4a15      	ldr	r2, [pc, #84]	; (8002000 <ErrorSignalTime+0xb8>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4413      	add	r3, r2
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <ErrorSignalTime+0x74>
		{
			_Found_Error = true;
 8001fb6:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <ErrorSignalTime+0xb4>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
		}

		_FoundError_OR = _FoundError_OR | _FoundErrorforEach[i];
 8001fbc:	4a10      	ldr	r2, [pc, #64]	; (8002000 <ErrorSignalTime+0xb8>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	781a      	ldrb	r2, [r3, #0]
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <ErrorSignalTime+0xa8>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf14      	ite	ne
 8001fd0:	2301      	movne	r3, #1
 8001fd2:	2300      	moveq	r3, #0
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <ErrorSignalTime+0xa8>)
 8001fd8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	ddb9      	ble.n	8001f5a <ErrorSignalTime+0x12>

	}

	//_FoundError_OR = _FoundErrorforEach[0] || _FoundErrorforEach[1] || _FoundErrorforEach[2];

}
 8001fe6:	bf00      	nop
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	20000319 	.word	0x20000319
 8001ff4:	20000300 	.word	0x20000300
 8001ff8:	200002e8 	.word	0x200002e8
 8001ffc:	20000318 	.word	0x20000318
 8002000:	2000031c 	.word	0x2000031c

08002004 <ErrorTimerReset>:

void ErrorTimerReset(int channel)
{
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	ErrorTimer[channel] = HAL_GetTick();
 800200c:	f003 fc42 	bl	8005894 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	4908      	ldr	r1, [pc, #32]	; (8002034 <ErrorTimerReset+0x30>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	ErrorTimer[channel+3 ] = HAL_GetTick();
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	1cdc      	adds	r4, r3, #3
 800201e:	f003 fc39 	bl	8005894 <HAL_GetTick>
 8002022:	4603      	mov	r3, r0
 8002024:	4a03      	ldr	r2, [pc, #12]	; (8002034 <ErrorTimerReset+0x30>)
 8002026:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	bd90      	pop	{r4, r7, pc}
 8002032:	bf00      	nop
 8002034:	200002e8 	.word	0x200002e8

08002038 <ErrorProcess>:
 *  write to _Found_Error:
 *  	true -> found error
 *  	false -> non error
 */
void ErrorProcess()
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0

	for(int errbit = 0; errbit < 6; errbit++)
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	e02c      	b.n	800209e <ErrorProcess+0x66>
	{
		int ee = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < Error_Array_Size ; i++)
 8002048:	2300      	movs	r3, #0
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	e011      	b.n	8002072 <ErrorProcess+0x3a>
		{
			if(Error_Array_Reg[i] & (1 << errbit)) ee++;
 800204e:	4a19      	ldr	r2, [pc, #100]	; (80020b4 <ErrorProcess+0x7c>)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4413      	add	r3, r2
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	fa42 f303 	asr.w	r3, r2, r3
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <ErrorProcess+0x34>
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	3301      	adds	r3, #1
 800206a:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < Error_Array_Size ; i++)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3301      	adds	r3, #1
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b13      	cmp	r3, #19
 8002076:	ddea      	ble.n	800204e <ErrorProcess+0x16>
		}

		if(ee >= Error_Threshold)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	2b0f      	cmp	r3, #15
 800207c:	dd06      	ble.n	800208c <ErrorProcess+0x54>
		{
			*p_ERROR_data[errbit] = true;
 800207e:	4a0e      	ldr	r2, [pc, #56]	; (80020b8 <ErrorProcess+0x80>)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002086:	2201      	movs	r2, #1
 8002088:	701a      	strb	r2, [r3, #0]
 800208a:	e005      	b.n	8002098 <ErrorProcess+0x60>
			//_Found_Error = true;
		}
		else
		{
			*p_ERROR_data[errbit] = false;
 800208c:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <ErrorProcess+0x80>)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
	for(int errbit = 0; errbit < 6; errbit++)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	3301      	adds	r3, #1
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b05      	cmp	r3, #5
 80020a2:	ddcf      	ble.n	8002044 <ErrorProcess+0xc>
		}

	}
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	200002d0 	.word	0x200002d0
 80020b8:	20000300 	.word	0x20000300

080020bc <ErrorSignalsRead>:
 *
 * @return true -> found error, after process (after Error_Array_Size counts)
 * @return false -> non error
 */
void ErrorSignalsRead()
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0

	uint8_t temp_error_reg = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	71fb      	strb	r3, [r7, #7]
	
	if(ChannelsStatus[0].enable && !ChannelsChange[0].restart_request)
 80020c6:	4b4f      	ldr	r3, [pc, #316]	; (8002204 <ErrorSignalsRead+0x148>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d026      	beq.n	800211c <ErrorSignalsRead+0x60>
 80020ce:	4b4e      	ldr	r3, [pc, #312]	; (8002208 <ErrorSignalsRead+0x14c>)
 80020d0:	78db      	ldrb	r3, [r3, #3]
 80020d2:	f083 0301 	eor.w	r3, r3, #1
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d01f      	beq.n	800211c <ErrorSignalsRead+0x60>
	{
		temp_error_reg |= (!((bool)HAL_GPIO_ReadPin(PG_1_GPIO_Port, PG_1_Pin)))  << 0;
 80020dc:	2110      	movs	r1, #16
 80020de:	484b      	ldr	r0, [pc, #300]	; (800220c <ErrorSignalsRead+0x150>)
 80020e0:	f004 fbe0 	bl	80068a4 <HAL_GPIO_ReadPin>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	bf0c      	ite	eq
 80020ea:	2301      	moveq	r3, #1
 80020ec:	2300      	movne	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	b25a      	sxtb	r2, r3
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	b25b      	sxtb	r3, r3
 80020fa:	71fb      	strb	r3, [r7, #7]
		temp_error_reg |= ((bool)HAL_GPIO_ReadPin(OC_1_GPIO_Port, OC_1_Pin))  << 3;
 80020fc:	2140      	movs	r1, #64	; 0x40
 80020fe:	4843      	ldr	r0, [pc, #268]	; (800220c <ErrorSignalsRead+0x150>)
 8002100:	f004 fbd0 	bl	80068a4 <HAL_GPIO_ReadPin>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <ErrorSignalsRead+0x52>
 800210a:	2308      	movs	r3, #8
 800210c:	e000      	b.n	8002110 <ErrorSignalsRead+0x54>
 800210e:	2300      	movs	r3, #0
 8002110:	b25a      	sxtb	r2, r3
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	4313      	orrs	r3, r2
 8002118:	b25b      	sxtb	r3, r3
 800211a:	71fb      	strb	r3, [r7, #7]
	}

	if(ChannelsStatus[1].enable && !ChannelsChange[1].restart_request)
 800211c:	4b39      	ldr	r3, [pc, #228]	; (8002204 <ErrorSignalsRead+0x148>)
 800211e:	7d1b      	ldrb	r3, [r3, #20]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d027      	beq.n	8002174 <ErrorSignalsRead+0xb8>
 8002124:	4b38      	ldr	r3, [pc, #224]	; (8002208 <ErrorSignalsRead+0x14c>)
 8002126:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800212a:	f083 0301 	eor.w	r3, r3, #1
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d01f      	beq.n	8002174 <ErrorSignalsRead+0xb8>
	{
		temp_error_reg |= (!((bool)HAL_GPIO_ReadPin(PG_2_GPIO_Port, PG_2_Pin)))  << 1;
 8002134:	2120      	movs	r1, #32
 8002136:	4835      	ldr	r0, [pc, #212]	; (800220c <ErrorSignalsRead+0x150>)
 8002138:	f004 fbb4 	bl	80068a4 <HAL_GPIO_ReadPin>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <ErrorSignalsRead+0x8a>
 8002142:	2302      	movs	r3, #2
 8002144:	e000      	b.n	8002148 <ErrorSignalsRead+0x8c>
 8002146:	2300      	movs	r3, #0
 8002148:	b25a      	sxtb	r2, r3
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	4313      	orrs	r3, r2
 8002150:	b25b      	sxtb	r3, r3
 8002152:	71fb      	strb	r3, [r7, #7]
		temp_error_reg |= ((bool)HAL_GPIO_ReadPin(OC_3_GPIO_Port, OC_2_Pin))  << 4;
 8002154:	2180      	movs	r1, #128	; 0x80
 8002156:	482d      	ldr	r0, [pc, #180]	; (800220c <ErrorSignalsRead+0x150>)
 8002158:	f004 fba4 	bl	80068a4 <HAL_GPIO_ReadPin>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <ErrorSignalsRead+0xaa>
 8002162:	2310      	movs	r3, #16
 8002164:	e000      	b.n	8002168 <ErrorSignalsRead+0xac>
 8002166:	2300      	movs	r3, #0
 8002168:	b25a      	sxtb	r2, r3
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	4313      	orrs	r3, r2
 8002170:	b25b      	sxtb	r3, r3
 8002172:	71fb      	strb	r3, [r7, #7]
	}

	if(ChannelsStatus[2].enable && !ChannelsChange[2].restart_request)
 8002174:	4b23      	ldr	r3, [pc, #140]	; (8002204 <ErrorSignalsRead+0x148>)
 8002176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800217a:	2b00      	cmp	r3, #0
 800217c:	d028      	beq.n	80021d0 <ErrorSignalsRead+0x114>
 800217e:	4b22      	ldr	r3, [pc, #136]	; (8002208 <ErrorSignalsRead+0x14c>)
 8002180:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8002184:	f083 0301 	eor.w	r3, r3, #1
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d020      	beq.n	80021d0 <ErrorSignalsRead+0x114>
	{
		temp_error_reg |= (!((bool)HAL_GPIO_ReadPin(PG_3_GPIO_Port, PG_3_Pin)))  << 2;
 800218e:	2104      	movs	r1, #4
 8002190:	481f      	ldr	r0, [pc, #124]	; (8002210 <ErrorSignalsRead+0x154>)
 8002192:	f004 fb87 	bl	80068a4 <HAL_GPIO_ReadPin>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <ErrorSignalsRead+0xe4>
 800219c:	2304      	movs	r3, #4
 800219e:	e000      	b.n	80021a2 <ErrorSignalsRead+0xe6>
 80021a0:	2300      	movs	r3, #0
 80021a2:	b25a      	sxtb	r2, r3
 80021a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	b25b      	sxtb	r3, r3
 80021ac:	71fb      	strb	r3, [r7, #7]
		temp_error_reg |= ((bool)HAL_GPIO_ReadPin(OC_3_GPIO_Port, OC_3_Pin))  << 5;
 80021ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021b2:	4816      	ldr	r0, [pc, #88]	; (800220c <ErrorSignalsRead+0x150>)
 80021b4:	f004 fb76 	bl	80068a4 <HAL_GPIO_ReadPin>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <ErrorSignalsRead+0x106>
 80021be:	2320      	movs	r3, #32
 80021c0:	e000      	b.n	80021c4 <ErrorSignalsRead+0x108>
 80021c2:	2300      	movs	r3, #0
 80021c4:	b25a      	sxtb	r2, r3
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	b25b      	sxtb	r3, r3
 80021ce:	71fb      	strb	r3, [r7, #7]
	}



	Error_Array_Reg[Error_Array_Counter] = temp_error_reg;
 80021d0:	4b10      	ldr	r3, [pc, #64]	; (8002214 <ErrorSignalsRead+0x158>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	4619      	mov	r1, r3
 80021d6:	4a10      	ldr	r2, [pc, #64]	; (8002218 <ErrorSignalsRead+0x15c>)
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	5453      	strb	r3, [r2, r1]
	Error_Array_Counter++;
 80021dc:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <ErrorSignalsRead+0x158>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	3301      	adds	r3, #1
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <ErrorSignalsRead+0x158>)
 80021e6:	701a      	strb	r2, [r3, #0]
	if(Error_Array_Counter > (Error_Array_Size - 1))
 80021e8:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <ErrorSignalsRead+0x158>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b13      	cmp	r3, #19
 80021ee:	d904      	bls.n	80021fa <ErrorSignalsRead+0x13e>
	{
		Error_Array_Counter = 0;
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <ErrorSignalsRead+0x158>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
		ErrorProcess();
 80021f6:	f7ff ff1f 	bl	8002038 <ErrorProcess>
	}
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	200019dc 	.word	0x200019dc
 8002208:	20001a18 	.word	0x20001a18
 800220c:	40020800 	.word	0x40020800
 8002210:	40020400 	.word	0x40020400
 8002214:	200002e4 	.word	0x200002e4
 8002218:	200002d0 	.word	0x200002d0

0800221c <AppConnectedExecute>:


void AppConnectedExecute(bool AppConnected)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, AppConnected);


	if((AppConnected == false) && MainParams.DisableSupplyInLostConnection)
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	f083 0301 	eor.w	r3, r3, #1
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d018      	beq.n	8002264 <AppConnectedExecute+0x48>
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <AppConnectedExecute+0x50>)
 8002234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002236:	2b00      	cmp	r3, #0
 8002238:	d014      	beq.n	8002264 <AppConnectedExecute+0x48>
	{

		for(int i = 0; i< 3; i++)
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	e00e      	b.n	800225e <AppConnectedExecute+0x42>
		{
			Channel_Enable(i, false);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2100      	movs	r1, #0
 8002246:	4618      	mov	r0, r3
 8002248:	f000 ff92 	bl	8003170 <Channel_Enable>
			Channel_Output(i, false);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f001 f996 	bl	8003584 <Channel_Output>
		for(int i = 0; i< 3; i++)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	3301      	adds	r3, #1
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b02      	cmp	r3, #2
 8002262:	dded      	ble.n	8002240 <AppConnectedExecute+0x24>
		}

	}
}
 8002264:	bf00      	nop
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20001aa0 	.word	0x20001aa0

08002270 <ETH_BufferNotEmpty>:
 *
 * @return true -> FIFO is not empty
 * @return false -> FIFO is empty
 */
bool ETH_BufferNotEmpty()
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
	return (eth_bcounter > 0);
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <ETH_BufferNotEmpty+0x1c>)
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	bf14      	ite	ne
 800227c:	2301      	movne	r3, #1
 800227e:	2300      	moveq	r3, #0
 8002280:	b2db      	uxtb	r3, r3
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	20001328 	.word	0x20001328

08002290 <ETH_WriteBuffer>:

/* @brief function add data byte to FIFO
 *
 */
void ETH_WriteBuffer(const uint8_t *Buffer, int length)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
	for(int i = 0;i<length;i++)
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	e024      	b.n	80022ea <ETH_WriteBuffer+0x5a>
	{
		if(eth_bcounter >= (eth_buffer_size-1)) return;
 80022a0:	4b17      	ldr	r3, [pc, #92]	; (8002300 <ETH_WriteBuffer+0x70>)
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d823      	bhi.n	80022f4 <ETH_WriteBuffer+0x64>

		eth_buffer[eth_wpointer] = Buffer[i];
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	4a14      	ldr	r2, [pc, #80]	; (8002304 <ETH_WriteBuffer+0x74>)
 80022b4:	8812      	ldrh	r2, [r2, #0]
 80022b6:	7819      	ldrb	r1, [r3, #0]
 80022b8:	4b13      	ldr	r3, [pc, #76]	; (8002308 <ETH_WriteBuffer+0x78>)
 80022ba:	5499      	strb	r1, [r3, r2]
		eth_bcounter++;
 80022bc:	4b10      	ldr	r3, [pc, #64]	; (8002300 <ETH_WriteBuffer+0x70>)
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	3301      	adds	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <ETH_WriteBuffer+0x70>)
 80022c6:	801a      	strh	r2, [r3, #0]
		eth_wpointer++;
 80022c8:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <ETH_WriteBuffer+0x74>)
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	3301      	adds	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <ETH_WriteBuffer+0x74>)
 80022d2:	801a      	strh	r2, [r3, #0]
		if(eth_wpointer > eth_buffer_size - 1) eth_wpointer = 0;
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <ETH_WriteBuffer+0x74>)
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022dc:	d302      	bcc.n	80022e4 <ETH_WriteBuffer+0x54>
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <ETH_WriteBuffer+0x74>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	801a      	strh	r2, [r3, #0]
	for(int i = 0;i<length;i++)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3301      	adds	r3, #1
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	dbd6      	blt.n	80022a0 <ETH_WriteBuffer+0x10>
 80022f2:	e000      	b.n	80022f6 <ETH_WriteBuffer+0x66>
		if(eth_bcounter >= (eth_buffer_size-1)) return;
 80022f4:	bf00      	nop
	}
}
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	20001328 	.word	0x20001328
 8002304:	20001324 	.word	0x20001324
 8002308:	20000324 	.word	0x20000324

0800230c <ETH_ReadBuffer>:
/* @brief read data byty from FIFO
 *
 * @return one element uint8_t data 
 */
uint8_t ETH_ReadBuffer()
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
	uint8_t data = eth_buffer[eth_rpointer];
 8002312:	4b10      	ldr	r3, [pc, #64]	; (8002354 <ETH_ReadBuffer+0x48>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <ETH_ReadBuffer+0x4c>)
 800231a:	5c9b      	ldrb	r3, [r3, r2]
 800231c:	71fb      	strb	r3, [r7, #7]
	eth_bcounter--;
 800231e:	4b0f      	ldr	r3, [pc, #60]	; (800235c <ETH_ReadBuffer+0x50>)
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	4b0d      	ldr	r3, [pc, #52]	; (800235c <ETH_ReadBuffer+0x50>)
 8002328:	801a      	strh	r2, [r3, #0]
	eth_rpointer++;
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <ETH_ReadBuffer+0x48>)
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	3301      	adds	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	4b08      	ldr	r3, [pc, #32]	; (8002354 <ETH_ReadBuffer+0x48>)
 8002334:	801a      	strh	r2, [r3, #0]
	if(eth_rpointer > eth_buffer_size - 1) eth_rpointer = 0;
 8002336:	4b07      	ldr	r3, [pc, #28]	; (8002354 <ETH_ReadBuffer+0x48>)
 8002338:	881b      	ldrh	r3, [r3, #0]
 800233a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800233e:	d302      	bcc.n	8002346 <ETH_ReadBuffer+0x3a>
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <ETH_ReadBuffer+0x48>)
 8002342:	2200      	movs	r2, #0
 8002344:	801a      	strh	r2, [r3, #0]

	return data;
 8002346:	79fb      	ldrb	r3, [r7, #7]
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	20001326 	.word	0x20001326
 8002358:	20000324 	.word	0x20000324
 800235c:	20001328 	.word	0x20001328

08002360 <ETH_Send>:
 * @param data -> pointer on data buffer with message
 * @param size -> lenght of data buffer
 *
 */
void ETH_Send(char *data, uint16_t size)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	807b      	strh	r3, [r7, #2]
	ETH_udp_Transmit((uint8_t *)data,size);
 800236c:	887b      	ldrh	r3, [r7, #2]
 800236e:	4619      	mov	r1, r3
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f002 f8b5 	bl	80044e0 <ETH_udp_Transmit>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <GetCoef_k>:
/* @brief get K coeficient for ADC
 *
 *	@channel -> adc channel
 */
float GetCoef_k(int channel)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
	float *addr = ((float *)&MainParams.ReadCoef_k_0) + channel;//  + (4 * channel);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4a06      	ldr	r2, [pc, #24]	; (80023a8 <GetCoef_k+0x28>)
 800238e:	4413      	add	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
	return *addr;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	ee07 3a90 	vmov	s15, r3
}
 800239a:	eeb0 0a67 	vmov.f32	s0, s15
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	20001ac0 	.word	0x20001ac0

080023ac <GetCoef_q>:
/* @brief get Q coeficient for ADC
 *
 *	@channel -> adc channel
 */
float GetCoef_q(int channel)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	float *addr =((float *)&MainParams.ReadCoef_q_0) + channel;//  + (4 * channel);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4a06      	ldr	r2, [pc, #24]	; (80023d4 <GetCoef_q+0x28>)
 80023ba:	4413      	add	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
	return *addr;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	ee07 3a90 	vmov	s15, r3
}
 80023c6:	eeb0 0a67 	vmov.f32	s0, s15
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	20001ad8 	.word	0x20001ad8

080023d8 <StoreADCConstant>:
 * @param value -> value of coefficient
 *
 *
 */
void StoreADCConstant(uint8_t coef, float value)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	ed87 0a00 	vstr	s0, [r7]
 80023e4:	71fb      	strb	r3, [r7, #7]
	float *addr = ((float *)&MainParams.ReadCoef_k_0) + coef;//  + (4 * channel);
 80023e6:	79fb      	ldrb	r3, [r7, #7]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4a06      	ldr	r2, [pc, #24]	; (8002404 <StoreADCConstant+0x2c>)
 80023ec:	4413      	add	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]
	*addr = value;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	601a      	str	r2, [r3, #0]
}
 80023f6:	bf00      	nop
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20001ac0 	.word	0x20001ac0

08002408 <SendADCCoefficients>:
/* @brief send ADC coefficients to communication
 *
 *
 */
void SendADCCoefficients()
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
	for(int i = 0;i<12;i++)
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
 8002412:	e010      	b.n	8002436 <SendADCCoefficients+0x2e>
	{
		SendCommunication_float(cmd_adc_get_k0 + i,GetCoef_k(i));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	3333      	adds	r3, #51	; 0x33
 800241a:	b2dc      	uxtb	r4, r3
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ffaf 	bl	8002380 <GetCoef_k>
 8002422:	eef0 7a40 	vmov.f32	s15, s0
 8002426:	eeb0 0a67 	vmov.f32	s0, s15
 800242a:	4620      	mov	r0, r4
 800242c:	f7ff fc60 	bl	8001cf0 <SendCommunication_float>
	for(int i = 0;i<12;i++)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3301      	adds	r3, #1
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b0b      	cmp	r3, #11
 800243a:	ddeb      	ble.n	8002414 <SendADCCoefficients+0xc>
	}
}
 800243c:	bf00      	nop
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	bd90      	pop	{r4, r7, pc}

08002446 <CalcAvg>:
 *
 * @return average of array
 *
 */
uint16_t CalcAvg(uint16_t *array, uint16_t length)
{
 8002446:	b480      	push	{r7}
 8002448:	b085      	sub	sp, #20
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	460b      	mov	r3, r1
 8002450:	807b      	strh	r3, [r7, #2]
	uint32_t AVG = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i<length ; i++)
 8002456:	2300      	movs	r3, #0
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	e00b      	b.n	8002474 <CalcAvg+0x2e>
	{
		AVG += array[i];
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	4413      	add	r3, r2
 8002464:	881b      	ldrh	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4413      	add	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<length ; i++)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	3301      	adds	r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	887b      	ldrh	r3, [r7, #2]
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	429a      	cmp	r2, r3
 800247a:	dbef      	blt.n	800245c <CalcAvg+0x16>
	}

	return (AVG/length);
 800247c:	887b      	ldrh	r3, [r7, #2]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	fbb2 f3f3 	udiv	r3, r2, r3
 8002484:	b29b      	uxth	r3, r3
}
 8002486:	4618      	mov	r0, r3
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	0000      	movs	r0, r0
 8002494:	0000      	movs	r0, r0
	...

08002498 <CalcAdcValue>:
 * @param value -> ADC data
 *
 * @return voltage or current (float)
 */
float CalcAdcValue(uint8_t channel,uint16_t value)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	460a      	mov	r2, r1
 80024a2:	71fb      	strb	r3, [r7, #7]
 80024a4:	4613      	mov	r3, r2
 80024a6:	80bb      	strh	r3, [r7, #4]
	float f = (float)value/ADC_coef;
 80024a8:	88bb      	ldrh	r3, [r7, #4]
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b2:	ee17 0a90 	vmov	r0, s15
 80024b6:	f7fe f84f 	bl	8000558 <__aeabi_f2d>
 80024ba:	a317      	add	r3, pc, #92	; (adr r3, 8002518 <CalcAdcValue+0x80>)
 80024bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c0:	f7fe f9cc 	bl	800085c <__aeabi_ddiv>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4610      	mov	r0, r2
 80024ca:	4619      	mov	r1, r3
 80024cc:	f7fe fb94 	bl	8000bf8 <__aeabi_d2f>
 80024d0:	4603      	mov	r3, r0
 80024d2:	617b      	str	r3, [r7, #20]

	float Coef_k = GetCoef_k(channel);
 80024d4:	79fb      	ldrb	r3, [r7, #7]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff ff52 	bl	8002380 <GetCoef_k>
 80024dc:	ed87 0a04 	vstr	s0, [r7, #16]
	float Coef_q = GetCoef_q(channel);
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff ff62 	bl	80023ac <GetCoef_q>
 80024e8:	ed87 0a03 	vstr	s0, [r7, #12]


	f = (f - Coef_q) / Coef_k;
 80024ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80024f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80024f4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024f8:	ed97 7a04 	vldr	s14, [r7, #16]
 80024fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002500:	edc7 7a05 	vstr	s15, [r7, #20]

	return f;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	ee07 3a90 	vmov	s15, r3
}
 800250a:	eeb0 0a67 	vmov.f32	s0, s15
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	f3af 8000 	nop.w
 8002518:	7b0b3919 	.word	0x7b0b3919
 800251c:	4093665a 	.word	0x4093665a

08002520 <ReadADCChannels>:
 *
 *	data save to Read_Data
 *
 */
void ReadADCChannels()
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8002526:	2200      	movs	r2, #0
 8002528:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800252c:	4809      	ldr	r0, [pc, #36]	; (8002554 <ReadADCChannels+0x34>)
 800252e:	f004 f9d1 	bl	80068d4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, Adresses, Read_Data, 8,2);
 8002532:	2302      	movs	r3, #2
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	2308      	movs	r3, #8
 8002538:	4a07      	ldr	r2, [pc, #28]	; (8002558 <ReadADCChannels+0x38>)
 800253a:	4908      	ldr	r1, [pc, #32]	; (800255c <ReadADCChannels+0x3c>)
 800253c:	4808      	ldr	r0, [pc, #32]	; (8002560 <ReadADCChannels+0x40>)
 800253e:	f005 fa55 	bl	80079ec <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8002542:	2201      	movs	r2, #1
 8002544:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <ReadADCChannels+0x34>)
 800254a:	f004 f9c3 	bl	80068d4 <HAL_GPIO_WritePin>
}
 800254e:	bf00      	nop
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40020400 	.word	0x40020400
 8002558:	20001970 	.word	0x20001970
 800255c:	20000064 	.word	0x20000064
 8002560:	20002d04 	.word	0x20002d04

08002564 <ADCStore>:
 *
 *	processed data (measurement average) are saved on selected addresses in p_ADC_data array
 *
 */
void ADCStore()
{
 8002564:	b590      	push	{r4, r7, lr}
 8002566:	b089      	sub	sp, #36	; 0x24
 8002568:	af00      	add	r7, sp, #0
	//save data from ADC data read buffer
	for(int i = 0;i<8;i++)
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	e01d      	b.n	80025ac <ADCStore+0x48>
	{
		meas_data[i][meas_counter] = 0 | Read_Data[2*i] | (Read_Data[(2*i)+1] << 8);
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4a33      	ldr	r2, [pc, #204]	; (8002644 <ADCStore+0xe0>)
 8002576:	5cd3      	ldrb	r3, [r2, r3]
 8002578:	b21a      	sxth	r2, r3
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	3301      	adds	r3, #1
 8002580:	4930      	ldr	r1, [pc, #192]	; (8002644 <ADCStore+0xe0>)
 8002582:	5ccb      	ldrb	r3, [r1, r3]
 8002584:	021b      	lsls	r3, r3, #8
 8002586:	b21b      	sxth	r3, r3
 8002588:	4313      	orrs	r3, r2
 800258a:	b21a      	sxth	r2, r3
 800258c:	4b2e      	ldr	r3, [pc, #184]	; (8002648 <ADCStore+0xe4>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	461c      	mov	r4, r3
 8002592:	b290      	uxth	r0, r2
 8002594:	4a2d      	ldr	r2, [pc, #180]	; (800264c <ADCStore+0xe8>)
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	2164      	movs	r1, #100	; 0x64
 800259a:	fb01 f303 	mul.w	r3, r1, r3
 800259e:	4423      	add	r3, r4
 80025a0:	4601      	mov	r1, r0
 80025a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0;i<8;i++)
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3301      	adds	r3, #1
 80025aa:	61fb      	str	r3, [r7, #28]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2b07      	cmp	r3, #7
 80025b0:	ddde      	ble.n	8002570 <ADCStore+0xc>
	}

	meas_counter++;
 80025b2:	4b25      	ldr	r3, [pc, #148]	; (8002648 <ADCStore+0xe4>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	3301      	adds	r3, #1
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4b23      	ldr	r3, [pc, #140]	; (8002648 <ADCStore+0xe4>)
 80025bc:	701a      	strb	r2, [r3, #0]

	//all buffers full - calculate average and store on selected addresses
	if(meas_counter > (meas_size - 1))
 80025be:	4b22      	ldr	r3, [pc, #136]	; (8002648 <ADCStore+0xe4>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b63      	cmp	r3, #99	; 0x63
 80025c4:	d939      	bls.n	800263a <ADCStore+0xd6>
	{
		meas_counter = 0;
 80025c6:	4b20      	ldr	r3, [pc, #128]	; (8002648 <ADCStore+0xe4>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]

		uint16_t avg[8];
		for(int i = 0; i < 8 ;i++)
 80025cc:	2300      	movs	r3, #0
 80025ce:	61bb      	str	r3, [r7, #24]
 80025d0:	e014      	b.n	80025fc <ADCStore+0x98>
		{
			avg[i] = CalcAvg(meas_data[i], meas_size); //calculate average
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	22c8      	movs	r2, #200	; 0xc8
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	4a1c      	ldr	r2, [pc, #112]	; (800264c <ADCStore+0xe8>)
 80025dc:	4413      	add	r3, r2
 80025de:	2164      	movs	r1, #100	; 0x64
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff ff30 	bl	8002446 <CalcAvg>
 80025e6:	4603      	mov	r3, r0
 80025e8:	461a      	mov	r2, r3
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	3320      	adds	r3, #32
 80025f0:	443b      	add	r3, r7
 80025f2:	f823 2c1c 	strh.w	r2, [r3, #-28]
		for(int i = 0; i < 8 ;i++)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	3301      	adds	r3, #1
 80025fa:	61bb      	str	r3, [r7, #24]
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2b07      	cmp	r3, #7
 8002600:	dde7      	ble.n	80025d2 <ADCStore+0x6e>
		}

		for(int i = 0; i<6;i++)
 8002602:	2300      	movs	r3, #0
 8002604:	617b      	str	r3, [r7, #20]
 8002606:	e015      	b.n	8002634 <ADCStore+0xd0>
		{
			*p_ADC_data[i] = CalcAdcValue(i,avg[i]); //calculate value(voltage or current and saved on selected addresses)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	3320      	adds	r3, #32
 8002612:	443b      	add	r3, r7
 8002614:	f833 1c1c 	ldrh.w	r1, [r3, #-28]
 8002618:	480d      	ldr	r0, [pc, #52]	; (8002650 <ADCStore+0xec>)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8002620:	4610      	mov	r0, r2
 8002622:	f7ff ff39 	bl	8002498 <CalcAdcValue>
 8002626:	eef0 7a40 	vmov.f32	s15, s0
 800262a:	edc4 7a00 	vstr	s15, [r4]
		for(int i = 0; i<6;i++)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	3301      	adds	r3, #1
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2b05      	cmp	r3, #5
 8002638:	dde6      	ble.n	8002608 <ADCStore+0xa4>

		//voltageRegulator(0);
		//AdaptiveVoltageTune(0);

	}
}
 800263a:	bf00      	nop
 800263c:	3724      	adds	r7, #36	; 0x24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd90      	pop	{r4, r7, pc}
 8002642:	bf00      	nop
 8002644:	20001970 	.word	0x20001970
 8002648:	2000196c 	.word	0x2000196c
 800264c:	2000132c 	.word	0x2000132c
 8002650:	20001980 	.word	0x20001980

08002654 <LedSwitch>:

/* @brief switch red led on nucleo board
 *
 */
void LedSwitch(int value)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, value);
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <Enable_GPIO>:
 * @param channel -> channel of power supply
 * @param value   -> enable-true, disable-false
 *
 */
void Enable_GPIO(uint8_t channel, bool value)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	460a      	mov	r2, r1
 8002672:	71fb      	strb	r3, [r7, #7]
 8002674:	4613      	mov	r3, r2
 8002676:	71bb      	strb	r3, [r7, #6]
	switch(channel)
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d015      	beq.n	80026aa <Enable_GPIO+0x42>
 800267e:	2b02      	cmp	r3, #2
 8002680:	dc1b      	bgt.n	80026ba <Enable_GPIO+0x52>
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <Enable_GPIO+0x24>
 8002686:	2b01      	cmp	r3, #1
 8002688:	d007      	beq.n	800269a <Enable_GPIO+0x32>
		case 2:
			HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, value);
			break;

		default:
			break;
 800268a:	e016      	b.n	80026ba <Enable_GPIO+0x52>
			HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, value);
 800268c:	79bb      	ldrb	r3, [r7, #6]
 800268e:	461a      	mov	r2, r3
 8002690:	2108      	movs	r1, #8
 8002692:	480c      	ldr	r0, [pc, #48]	; (80026c4 <Enable_GPIO+0x5c>)
 8002694:	f004 f91e 	bl	80068d4 <HAL_GPIO_WritePin>
			break;
 8002698:	e010      	b.n	80026bc <Enable_GPIO+0x54>
			HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, value);
 800269a:	79bb      	ldrb	r3, [r7, #6]
 800269c:	461a      	mov	r2, r3
 800269e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026a2:	4809      	ldr	r0, [pc, #36]	; (80026c8 <Enable_GPIO+0x60>)
 80026a4:	f004 f916 	bl	80068d4 <HAL_GPIO_WritePin>
			break;
 80026a8:	e008      	b.n	80026bc <Enable_GPIO+0x54>
			HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, value);
 80026aa:	79bb      	ldrb	r3, [r7, #6]
 80026ac:	461a      	mov	r2, r3
 80026ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026b2:	4805      	ldr	r0, [pc, #20]	; (80026c8 <Enable_GPIO+0x60>)
 80026b4:	f004 f90e 	bl	80068d4 <HAL_GPIO_WritePin>
			break;
 80026b8:	e000      	b.n	80026bc <Enable_GPIO+0x54>
			break;
 80026ba:	bf00      	nop

	}
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40020800 	.word	0x40020800
 80026c8:	40020400 	.word	0x40020400

080026cc <Output_GPIO>:
 * @param relay_p   -> relay for positive polarity (direct relay)
 * @param relay_n   -> relay for negative polarity (reverse relay)
 *
 */
void Output_GPIO(uint8_t channel, bool relay_p, bool relay_n)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	71fb      	strb	r3, [r7, #7]
 80026d6:	460b      	mov	r3, r1
 80026d8:	71bb      	strb	r3, [r7, #6]
 80026da:	4613      	mov	r3, r2
 80026dc:	717b      	strb	r3, [r7, #5]
	if(relay_p && relay_n) return;
 80026de:	79bb      	ldrb	r3, [r7, #6]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <Output_GPIO+0x1e>
 80026e4:	797b      	ldrb	r3, [r7, #5]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d133      	bne.n	8002752 <Output_GPIO+0x86>

	switch(channel)
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d022      	beq.n	8002736 <Output_GPIO+0x6a>
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	dc30      	bgt.n	8002756 <Output_GPIO+0x8a>
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <Output_GPIO+0x32>
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d00e      	beq.n	800271a <Output_GPIO+0x4e>
			HAL_GPIO_WritePin(SWDIR_3_GPIO_Port, SWDIR_3_Pin, relay_p);
			HAL_GPIO_WritePin(SWREV_3_GPIO_Port, SWREV_3_Pin, relay_n);
			break;

		default:
			break;
 80026fc:	e02b      	b.n	8002756 <Output_GPIO+0x8a>
			HAL_GPIO_WritePin(SWDIR_1_GPIO_Port, SWDIR_1_Pin, relay_p);
 80026fe:	79bb      	ldrb	r3, [r7, #6]
 8002700:	461a      	mov	r2, r3
 8002702:	2104      	movs	r1, #4
 8002704:	4816      	ldr	r0, [pc, #88]	; (8002760 <Output_GPIO+0x94>)
 8002706:	f004 f8e5 	bl	80068d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SWREV_1_GPIO_Port, SWREV_1_Pin, relay_n);
 800270a:	797b      	ldrb	r3, [r7, #5]
 800270c:	461a      	mov	r2, r3
 800270e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002712:	4813      	ldr	r0, [pc, #76]	; (8002760 <Output_GPIO+0x94>)
 8002714:	f004 f8de 	bl	80068d4 <HAL_GPIO_WritePin>
			break;
 8002718:	e01e      	b.n	8002758 <Output_GPIO+0x8c>
			HAL_GPIO_WritePin(SWDIR_2_GPIO_Port, SWDIR_2_Pin, relay_p);
 800271a:	79bb      	ldrb	r3, [r7, #6]
 800271c:	461a      	mov	r2, r3
 800271e:	2102      	movs	r1, #2
 8002720:	480f      	ldr	r0, [pc, #60]	; (8002760 <Output_GPIO+0x94>)
 8002722:	f004 f8d7 	bl	80068d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SWREV_2_GPIO_Port, SWREV_2_Pin, relay_n);
 8002726:	797b      	ldrb	r3, [r7, #5]
 8002728:	461a      	mov	r2, r3
 800272a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800272e:	480c      	ldr	r0, [pc, #48]	; (8002760 <Output_GPIO+0x94>)
 8002730:	f004 f8d0 	bl	80068d4 <HAL_GPIO_WritePin>
			break;
 8002734:	e010      	b.n	8002758 <Output_GPIO+0x8c>
			HAL_GPIO_WritePin(SWDIR_3_GPIO_Port, SWDIR_3_Pin, relay_p);
 8002736:	79bb      	ldrb	r3, [r7, #6]
 8002738:	461a      	mov	r2, r3
 800273a:	2101      	movs	r1, #1
 800273c:	4808      	ldr	r0, [pc, #32]	; (8002760 <Output_GPIO+0x94>)
 800273e:	f004 f8c9 	bl	80068d4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SWREV_3_GPIO_Port, SWREV_3_Pin, relay_n);
 8002742:	797b      	ldrb	r3, [r7, #5]
 8002744:	461a      	mov	r2, r3
 8002746:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800274a:	4805      	ldr	r0, [pc, #20]	; (8002760 <Output_GPIO+0x94>)
 800274c:	f004 f8c2 	bl	80068d4 <HAL_GPIO_WritePin>
			break;
 8002750:	e002      	b.n	8002758 <Output_GPIO+0x8c>
	if(relay_p && relay_n) return;
 8002752:	bf00      	nop
 8002754:	e000      	b.n	8002758 <Output_GPIO+0x8c>
			break;
 8002756:	bf00      	nop

	}
}
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40020800 	.word	0x40020800

08002764 <app_leds_init>:

LEDs_struct LEDs_GREEN_LED1, LEDs_GREEN_LED2, LEDs_RED_LED;


void app_leds_init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
	/* init of LEDs structures */
	LEDs_GREEN_LED1.port_address = (uint32_t*) LED_0_GPIO_Port;
 8002768:	4b24      	ldr	r3, [pc, #144]	; (80027fc <app_leds_init+0x98>)
 800276a:	4a25      	ldr	r2, [pc, #148]	; (8002800 <app_leds_init+0x9c>)
 800276c:	601a      	str	r2, [r3, #0]
	LEDs_GREEN_LED1.channel_mask = LED_0_Pin;
 800276e:	4b23      	ldr	r3, [pc, #140]	; (80027fc <app_leds_init+0x98>)
 8002770:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002774:	605a      	str	r2, [r3, #4]
	LEDs_GREEN_LED1.polarity = 0;
 8002776:	4b21      	ldr	r3, [pc, #132]	; (80027fc <app_leds_init+0x98>)
 8002778:	2200      	movs	r2, #0
 800277a:	721a      	strb	r2, [r3, #8]
	LEDs_GREEN_LED1.led_time = 0;
 800277c:	4b1f      	ldr	r3, [pc, #124]	; (80027fc <app_leds_init+0x98>)
 800277e:	2200      	movs	r2, #0
 8002780:	60da      	str	r2, [r3, #12]
	LEDs_GREEN_LED1.mode = LEDS_OFF;
 8002782:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <app_leds_init+0x98>)
 8002784:	2200      	movs	r2, #0
 8002786:	725a      	strb	r2, [r3, #9]

	LEDs_GREEN_LED2.port_address = (uint32_t*) LED_1_GPIO_Port;
 8002788:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <app_leds_init+0xa0>)
 800278a:	4a1f      	ldr	r2, [pc, #124]	; (8002808 <app_leds_init+0xa4>)
 800278c:	601a      	str	r2, [r3, #0]
	LEDs_GREEN_LED2.channel_mask = LED_1_Pin;
 800278e:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <app_leds_init+0xa0>)
 8002790:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002794:	605a      	str	r2, [r3, #4]
	LEDs_GREEN_LED2.polarity = 0;
 8002796:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <app_leds_init+0xa0>)
 8002798:	2200      	movs	r2, #0
 800279a:	721a      	strb	r2, [r3, #8]
	LEDs_GREEN_LED2.led_time = 0;
 800279c:	4b19      	ldr	r3, [pc, #100]	; (8002804 <app_leds_init+0xa0>)
 800279e:	2200      	movs	r2, #0
 80027a0:	60da      	str	r2, [r3, #12]
	LEDs_GREEN_LED2.mode = LEDS_OFF;
 80027a2:	4b18      	ldr	r3, [pc, #96]	; (8002804 <app_leds_init+0xa0>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	725a      	strb	r2, [r3, #9]

	LEDs_RED_LED.port_address = (uint32_t*) LED_2_GPIO_Port;
 80027a8:	4b18      	ldr	r3, [pc, #96]	; (800280c <app_leds_init+0xa8>)
 80027aa:	4a19      	ldr	r2, [pc, #100]	; (8002810 <app_leds_init+0xac>)
 80027ac:	601a      	str	r2, [r3, #0]
	LEDs_RED_LED.channel_mask = LED_2_Pin;
 80027ae:	4b17      	ldr	r3, [pc, #92]	; (800280c <app_leds_init+0xa8>)
 80027b0:	2220      	movs	r2, #32
 80027b2:	605a      	str	r2, [r3, #4]
	LEDs_RED_LED.polarity = 0;
 80027b4:	4b15      	ldr	r3, [pc, #84]	; (800280c <app_leds_init+0xa8>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	721a      	strb	r2, [r3, #8]
	LEDs_RED_LED.led_time = 0;
 80027ba:	4b14      	ldr	r3, [pc, #80]	; (800280c <app_leds_init+0xa8>)
 80027bc:	2200      	movs	r2, #0
 80027be:	60da      	str	r2, [r3, #12]
	LEDs_RED_LED. blink_state = 0;
 80027c0:	4b12      	ldr	r3, [pc, #72]	; (800280c <app_leds_init+0xa8>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	741a      	strb	r2, [r3, #16]
	LEDs_RED_LED.mode = LEDS_OFF;
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <app_leds_init+0xa8>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	725a      	strb	r2, [r3, #9]


	  //leds
	  ledsUpadateLEDState(&LEDs_GREEN_LED1, HAL_GetTick());
 80027cc:	f003 f862 	bl	8005894 <HAL_GetTick>
 80027d0:	4603      	mov	r3, r0
 80027d2:	4619      	mov	r1, r3
 80027d4:	4809      	ldr	r0, [pc, #36]	; (80027fc <app_leds_init+0x98>)
 80027d6:	f001 ff7b 	bl	80046d0 <ledsUpadateLEDState>
	  ledsUpadateLEDState(&LEDs_GREEN_LED2, HAL_GetTick());
 80027da:	f003 f85b 	bl	8005894 <HAL_GetTick>
 80027de:	4603      	mov	r3, r0
 80027e0:	4619      	mov	r1, r3
 80027e2:	4808      	ldr	r0, [pc, #32]	; (8002804 <app_leds_init+0xa0>)
 80027e4:	f001 ff74 	bl	80046d0 <ledsUpadateLEDState>
	  ledsUpadateLEDState(&LEDs_RED_LED, HAL_GetTick());
 80027e8:	f003 f854 	bl	8005894 <HAL_GetTick>
 80027ec:	4603      	mov	r3, r0
 80027ee:	4619      	mov	r1, r3
 80027f0:	4806      	ldr	r0, [pc, #24]	; (800280c <app_leds_init+0xa8>)
 80027f2:	f001 ff6d 	bl	80046d0 <ledsUpadateLEDState>
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	200019a0 	.word	0x200019a0
 8002800:	40020800 	.word	0x40020800
 8002804:	200019b4 	.word	0x200019b4
 8002808:	40020000 	.word	0x40020000
 800280c:	200019c8 	.word	0x200019c8
 8002810:	40020400 	.word	0x40020400

08002814 <app_leds_drive>:


void app_leds_drive()
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0

	//connect led
	if(_AppConnected)
 8002818:	4b39      	ldr	r3, [pc, #228]	; (8002900 <app_leds_drive+0xec>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <app_leds_drive+0x14>
	{
		 LEDs_GREEN_LED1.mode = LEDS_FAST_FLASH;
 8002820:	4b38      	ldr	r3, [pc, #224]	; (8002904 <app_leds_drive+0xf0>)
 8002822:	2203      	movs	r2, #3
 8002824:	725a      	strb	r2, [r3, #9]
 8002826:	e002      	b.n	800282e <app_leds_drive+0x1a>
	}
	else
	{
		 LEDs_GREEN_LED1.mode = LEDS_SLOW_BLINK;
 8002828:	4b36      	ldr	r3, [pc, #216]	; (8002904 <app_leds_drive+0xf0>)
 800282a:	2206      	movs	r2, #6
 800282c:	725a      	strb	r2, [r3, #9]




	 //channels enable led
	 if(ChannelsStatus[0].enable || ChannelsStatus[1].enable || ChannelsStatus[1].enable)
 800282e:	4b36      	ldr	r3, [pc, #216]	; (8002908 <app_leds_drive+0xf4>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d107      	bne.n	8002846 <app_leds_drive+0x32>
 8002836:	4b34      	ldr	r3, [pc, #208]	; (8002908 <app_leds_drive+0xf4>)
 8002838:	7d1b      	ldrb	r3, [r3, #20]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d103      	bne.n	8002846 <app_leds_drive+0x32>
 800283e:	4b32      	ldr	r3, [pc, #200]	; (8002908 <app_leds_drive+0xf4>)
 8002840:	7d1b      	ldrb	r3, [r3, #20]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <app_leds_drive+0x3a>
	 {
		 LEDs_GREEN_LED2.mode = LEDS_ON;
 8002846:	4b31      	ldr	r3, [pc, #196]	; (800290c <app_leds_drive+0xf8>)
 8002848:	2201      	movs	r2, #1
 800284a:	725a      	strb	r2, [r3, #9]
 800284c:	e002      	b.n	8002854 <app_leds_drive+0x40>
		  //LEDs_RED_LED.mode = LEDS_FAST_BLINK;
	 }
	 else
	 {
		 LEDs_GREEN_LED2.mode = LEDS_OFF;
 800284e:	4b2f      	ldr	r3, [pc, #188]	; (800290c <app_leds_drive+0xf8>)
 8002850:	2200      	movs	r2, #0
 8002852:	725a      	strb	r2, [r3, #9]
		 //LEDs_RED_LED.mode = LEDS_OFF;
	 }


	 //red led
	if(_FoundError_OR)
 8002854:	4b2e      	ldr	r3, [pc, #184]	; (8002910 <app_leds_drive+0xfc>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <app_leds_drive+0x50>
	{
		LEDs_RED_LED.mode = LEDS_ON;
 800285c:	4b2d      	ldr	r3, [pc, #180]	; (8002914 <app_leds_drive+0x100>)
 800285e:	2201      	movs	r2, #1
 8002860:	725a      	strb	r2, [r3, #9]
 8002862:	e036      	b.n	80028d2 <app_leds_drive+0xbe>
	}
	else if(ChannelsStatus[0].disableInError || ChannelsStatus[1].disableInError || ChannelsStatus[1].disableInError)
 8002864:	4b28      	ldr	r3, [pc, #160]	; (8002908 <app_leds_drive+0xf4>)
 8002866:	7c9b      	ldrb	r3, [r3, #18]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d109      	bne.n	8002880 <app_leds_drive+0x6c>
 800286c:	4b26      	ldr	r3, [pc, #152]	; (8002908 <app_leds_drive+0xf4>)
 800286e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002872:	2b00      	cmp	r3, #0
 8002874:	d104      	bne.n	8002880 <app_leds_drive+0x6c>
 8002876:	4b24      	ldr	r3, [pc, #144]	; (8002908 <app_leds_drive+0xf4>)
 8002878:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800287c:	2b00      	cmp	r3, #0
 800287e:	d003      	beq.n	8002888 <app_leds_drive+0x74>
	{
		LEDs_RED_LED.mode = LEDS_ON;
 8002880:	4b24      	ldr	r3, [pc, #144]	; (8002914 <app_leds_drive+0x100>)
 8002882:	2201      	movs	r2, #1
 8002884:	725a      	strb	r2, [r3, #9]
 8002886:	e024      	b.n	80028d2 <app_leds_drive+0xbe>
	}
	else if(ChannelsChange[0].restart_request || ChannelsChange[1].restart_request || ChannelsChange[1].restart_request)
 8002888:	4b23      	ldr	r3, [pc, #140]	; (8002918 <app_leds_drive+0x104>)
 800288a:	78db      	ldrb	r3, [r3, #3]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d109      	bne.n	80028a4 <app_leds_drive+0x90>
 8002890:	4b21      	ldr	r3, [pc, #132]	; (8002918 <app_leds_drive+0x104>)
 8002892:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002896:	2b00      	cmp	r3, #0
 8002898:	d104      	bne.n	80028a4 <app_leds_drive+0x90>
 800289a:	4b1f      	ldr	r3, [pc, #124]	; (8002918 <app_leds_drive+0x104>)
 800289c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <app_leds_drive+0x98>
	{
		LEDs_RED_LED.mode = LEDS_ON;
 80028a4:	4b1b      	ldr	r3, [pc, #108]	; (8002914 <app_leds_drive+0x100>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	725a      	strb	r2, [r3, #9]
 80028aa:	e012      	b.n	80028d2 <app_leds_drive+0xbe>
	}
	else if(ChannelsStatus[0].enable || ChannelsStatus[1].enable || ChannelsStatus[1].enable)
 80028ac:	4b16      	ldr	r3, [pc, #88]	; (8002908 <app_leds_drive+0xf4>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d107      	bne.n	80028c4 <app_leds_drive+0xb0>
 80028b4:	4b14      	ldr	r3, [pc, #80]	; (8002908 <app_leds_drive+0xf4>)
 80028b6:	7d1b      	ldrb	r3, [r3, #20]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d103      	bne.n	80028c4 <app_leds_drive+0xb0>
 80028bc:	4b12      	ldr	r3, [pc, #72]	; (8002908 <app_leds_drive+0xf4>)
 80028be:	7d1b      	ldrb	r3, [r3, #20]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <app_leds_drive+0xb8>
	{
		LEDs_RED_LED.mode = LEDS_SLOW_BLINK;
 80028c4:	4b13      	ldr	r3, [pc, #76]	; (8002914 <app_leds_drive+0x100>)
 80028c6:	2206      	movs	r2, #6
 80028c8:	725a      	strb	r2, [r3, #9]
 80028ca:	e002      	b.n	80028d2 <app_leds_drive+0xbe>
	}
	else
	{
		LEDs_RED_LED.mode = LEDS_OFF;
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <app_leds_drive+0x100>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	725a      	strb	r2, [r3, #9]
	}



	  //leds update
	  ledsUpadateLEDState(&LEDs_GREEN_LED1, HAL_GetTick());
 80028d2:	f002 ffdf 	bl	8005894 <HAL_GetTick>
 80028d6:	4603      	mov	r3, r0
 80028d8:	4619      	mov	r1, r3
 80028da:	480a      	ldr	r0, [pc, #40]	; (8002904 <app_leds_drive+0xf0>)
 80028dc:	f001 fef8 	bl	80046d0 <ledsUpadateLEDState>
	  ledsUpadateLEDState(&LEDs_GREEN_LED2, HAL_GetTick());
 80028e0:	f002 ffd8 	bl	8005894 <HAL_GetTick>
 80028e4:	4603      	mov	r3, r0
 80028e6:	4619      	mov	r1, r3
 80028e8:	4808      	ldr	r0, [pc, #32]	; (800290c <app_leds_drive+0xf8>)
 80028ea:	f001 fef1 	bl	80046d0 <ledsUpadateLEDState>
	  ledsUpadateLEDState(&LEDs_RED_LED, HAL_GetTick());
 80028ee:	f002 ffd1 	bl	8005894 <HAL_GetTick>
 80028f2:	4603      	mov	r3, r0
 80028f4:	4619      	mov	r1, r3
 80028f6:	4807      	ldr	r0, [pc, #28]	; (8002914 <app_leds_drive+0x100>)
 80028f8:	f001 feea 	bl	80046d0 <ledsUpadateLEDState>

}
 80028fc:	bf00      	nop
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	200002b8 	.word	0x200002b8
 8002904:	200019a0 	.word	0x200019a0
 8002908:	200019dc 	.word	0x200019dc
 800290c:	200019b4 	.word	0x200019b4
 8002910:	20000319 	.word	0x20000319
 8002914:	200019c8 	.word	0x200019c8
 8002918:	20001a18 	.word	0x20001a18

0800291c <GetDacCoef_k>:
/* @brief get K coeficient for DAC
 *
 *	@channel -> adc channel
 */
float GetDacCoef_k(int channel)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
	float *addr = ((float *)&MainParams.AdjCoef_k_ch0) + channel;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4a06      	ldr	r2, [pc, #24]	; (8002944 <GetDacCoef_k+0x28>)
 800292a:	4413      	add	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
	return *addr;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	ee07 3a90 	vmov	s15, r3
}
 8002936:	eeb0 0a67 	vmov.f32	s0, s15
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	20001af0 	.word	0x20001af0

08002948 <GetDacCoef_q>:
/* @brief get Q coeficient for DAC
 *
 *	@channel -> adc channel
 */
float GetDacCoef_q(int channel)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	float *addr = ((float *)&MainParams.AdjCoef_q_ch0) + channel;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4a06      	ldr	r2, [pc, #24]	; (8002970 <GetDacCoef_q+0x28>)
 8002956:	4413      	add	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
	return *addr;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	ee07 3a90 	vmov	s15, r3
}
 8002962:	eeb0 0a67 	vmov.f32	s0, s15
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	20001afc 	.word	0x20001afc

08002974 <StoreDACConstant>:
 * @param value -> value of coefficient
 *
 *
 */
void StoreDACConstant(uint8_t coef, float value)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	ed87 0a00 	vstr	s0, [r7]
 8002980:	71fb      	strb	r3, [r7, #7]
	float *addr = ((float *)&MainParams.AdjCoef_k_ch0) + coef;//  + (4 * channel);
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4a06      	ldr	r2, [pc, #24]	; (80029a0 <StoreDACConstant+0x2c>)
 8002988:	4413      	add	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
	*addr = value;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	601a      	str	r2, [r3, #0]
}
 8002992:	bf00      	nop
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20001af0 	.word	0x20001af0

080029a4 <SendDACCoefficients>:
/* @brief send DAC coefficients to communication
 *
 *
 */
void SendDACCoefficients()
{
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
	for(int i = 0;i<6;i++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	e010      	b.n	80029d2 <SendDACCoefficients+0x2e>
	{
		SendCommunication_float(cmd_dac_get_k0 + i, GetDacCoef_k(i));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	3345      	adds	r3, #69	; 0x45
 80029b6:	b2dc      	uxtb	r4, r3
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff ffaf 	bl	800291c <GetDacCoef_k>
 80029be:	eef0 7a40 	vmov.f32	s15, s0
 80029c2:	eeb0 0a67 	vmov.f32	s0, s15
 80029c6:	4620      	mov	r0, r4
 80029c8:	f7ff f992 	bl	8001cf0 <SendCommunication_float>
	for(int i = 0;i<6;i++)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3301      	adds	r3, #1
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b05      	cmp	r3, #5
 80029d6:	ddeb      	ble.n	80029b0 <SendDACCoefficients+0xc>
	}

}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd90      	pop	{r4, r7, pc}
 80029e2:	0000      	movs	r0, r0
 80029e4:	0000      	movs	r0, r0
	...

080029e8 <Get_PreRegulatorVoltage>:
 * @param voltage -> request voltage on power supply output
 *
 * @return uint16_t value of voltage for pre regulator
 */
uint16_t Get_PreRegulatorVoltage(uint16_t voltage)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	80fb      	strh	r3, [r7, #6]
	return (0.15789 * (float)voltage) + 21.05263;
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	ee07 3a90 	vmov	s15, r3
 80029f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029fc:	ee17 0a90 	vmov	r0, s15
 8002a00:	f7fd fdaa 	bl	8000558 <__aeabi_f2d>
 8002a04:	a30c      	add	r3, pc, #48	; (adr r3, 8002a38 <Get_PreRegulatorVoltage+0x50>)
 8002a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0a:	f7fd fdfd 	bl	8000608 <__aeabi_dmul>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4610      	mov	r0, r2
 8002a14:	4619      	mov	r1, r3
 8002a16:	a30a      	add	r3, pc, #40	; (adr r3, 8002a40 <Get_PreRegulatorVoltage+0x58>)
 8002a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1c:	f7fd fc3e 	bl	800029c <__adddf3>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4610      	mov	r0, r2
 8002a26:	4619      	mov	r1, r3
 8002a28:	f7fe f8c6 	bl	8000bb8 <__aeabi_d2uiz>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	b29b      	uxth	r3, r3
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	512ec6bd 	.word	0x512ec6bd
 8002a3c:	3fc435bd 	.word	0x3fc435bd
 8002a40:	28e0c9da 	.word	0x28e0c9da
 8002a44:	40350d79 	.word	0x40350d79

08002a48 <Get_DACValue>:

//Calculate DAC register value from recomended voltage
uint16_t Get_DACValue(int dac_channel, uint16_t value)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	807b      	strh	r3, [r7, #2]
	uint16_t code;


	if(dac_channel == 0 || dac_channel == 1 || dac_channel == 2)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <Get_DACValue+0x1e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d002      	beq.n	8002a66 <Get_DACValue+0x1e>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d12a      	bne.n	8002abc <Get_DACValue+0x74>
	{
		code = (uint16_t)(((PreReg_Coef_q - (float)value) / PreReg_Coef_k) * (float)DAC_coef);
 8002a66:	887b      	ldrh	r3, [r7, #2]
 8002a68:	ee07 3a90 	vmov	s15, r3
 8002a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a70:	ee17 0a90 	vmov	r0, s15
 8002a74:	f7fd fd70 	bl	8000558 <__aeabi_f2d>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	a125      	add	r1, pc, #148	; (adr r1, 8002b14 <Get_DACValue+0xcc>)
 8002a7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a82:	f7fd fc09 	bl	8000298 <__aeabi_dsub>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4610      	mov	r0, r2
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	a323      	add	r3, pc, #140	; (adr r3, 8002b1c <Get_DACValue+0xd4>)
 8002a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a94:	f7fd fee2 	bl	800085c <__aeabi_ddiv>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	a320      	add	r3, pc, #128	; (adr r3, 8002b24 <Get_DACValue+0xdc>)
 8002aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa6:	f7fd fdaf 	bl	8000608 <__aeabi_dmul>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4610      	mov	r0, r2
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	f7fe f881 	bl	8000bb8 <__aeabi_d2uiz>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	82fb      	strh	r3, [r7, #22]
 8002aba:	e023      	b.n	8002b04 <Get_DACValue+0xbc>
	}
	else
	{
		float coef_k = GetDacCoef_k(dac_channel - 3);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3b03      	subs	r3, #3
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff ff2b 	bl	800291c <GetDacCoef_k>
 8002ac6:	ed87 0a04 	vstr	s0, [r7, #16]
		float coef_q = GetDacCoef_q(dac_channel - 3);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3b03      	subs	r3, #3
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff ff3a 	bl	8002948 <GetDacCoef_q>
 8002ad4:	ed87 0a03 	vstr	s0, [r7, #12]

		code = (uint16_t)(((coef_q - (float)value) / coef_k) * (float)DAC_coef);
 8002ad8:	887b      	ldrh	r3, [r7, #2]
 8002ada:	ee07 3a90 	vmov	s15, r3
 8002ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ae2:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ae6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002aea:	ed97 7a04 	vldr	s14, [r7, #16]
 8002aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002af2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002b10 <Get_DACValue+0xc8>
 8002af6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002afe:	ee17 3a90 	vmov	r3, s15
 8002b02:	82fb      	strh	r3, [r7, #22]
	}


	return code;
 8002b04:	8afb      	ldrh	r3, [r7, #22]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	454ccccd 	.word	0x454ccccd
 8002b14:	3dee7818 	.word	0x3dee7818
 8002b18:	405ff4dc 	.word	0x405ff4dc
 8002b1c:	c39af4e3 	.word	0xc39af4e3
 8002b20:	405537da 	.word	0x405537da
 8002b24:	a0000000 	.word	0xa0000000
 8002b28:	40a99999 	.word	0x40a99999
 8002b2c:	00000000 	.word	0x00000000

08002b30 <Get_DACValue_F>:

uint16_t Get_DACValue_F(int dac_channel, float value)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	ed87 0a00 	vstr	s0, [r7]
	uint16_t code;


	if(dac_channel == 0 || dac_channel == 1 || dac_channel == 2)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d005      	beq.n	8002b4e <Get_DACValue_F+0x1e>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d002      	beq.n	8002b4e <Get_DACValue_F+0x1e>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d124      	bne.n	8002b98 <Get_DACValue_F+0x68>
	{
		code = (uint16_t)(((PreReg_Coef_q - (float)value) / PreReg_Coef_k) * (float)DAC_coef);
 8002b4e:	6838      	ldr	r0, [r7, #0]
 8002b50:	f7fd fd02 	bl	8000558 <__aeabi_f2d>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	a124      	add	r1, pc, #144	; (adr r1, 8002bec <Get_DACValue_F+0xbc>)
 8002b5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b5e:	f7fd fb9b 	bl	8000298 <__aeabi_dsub>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4610      	mov	r0, r2
 8002b68:	4619      	mov	r1, r3
 8002b6a:	a322      	add	r3, pc, #136	; (adr r3, 8002bf4 <Get_DACValue_F+0xc4>)
 8002b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b70:	f7fd fe74 	bl	800085c <__aeabi_ddiv>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4610      	mov	r0, r2
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	a31f      	add	r3, pc, #124	; (adr r3, 8002bfc <Get_DACValue_F+0xcc>)
 8002b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b82:	f7fd fd41 	bl	8000608 <__aeabi_dmul>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	f7fe f813 	bl	8000bb8 <__aeabi_d2uiz>
 8002b92:	4603      	mov	r3, r0
 8002b94:	82fb      	strh	r3, [r7, #22]
 8002b96:	e020      	b.n	8002bda <Get_DACValue_F+0xaa>
	}
	else
	{
		float coef_k = GetDacCoef_k(dac_channel - 3);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3b03      	subs	r3, #3
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff febd 	bl	800291c <GetDacCoef_k>
 8002ba2:	ed87 0a04 	vstr	s0, [r7, #16]
		float coef_q = GetDacCoef_q(dac_channel - 3);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3b03      	subs	r3, #3
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fecc 	bl	8002948 <GetDacCoef_q>
 8002bb0:	ed87 0a03 	vstr	s0, [r7, #12]

		code = (uint16_t)((((float)coef_q - (float)value) / coef_k) * (float)DAC_coef);
 8002bb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8002bb8:	edd7 7a00 	vldr	s15, [r7]
 8002bbc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002bc0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bc8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002be8 <Get_DACValue_F+0xb8>
 8002bcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bd4:	ee17 3a90 	vmov	r3, s15
 8002bd8:	82fb      	strh	r3, [r7, #22]
	}


	return code;
 8002bda:	8afb      	ldrh	r3, [r7, #22]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	f3af 8000 	nop.w
 8002be8:	454ccccd 	.word	0x454ccccd
 8002bec:	3dee7818 	.word	0x3dee7818
 8002bf0:	405ff4dc 	.word	0x405ff4dc
 8002bf4:	c39af4e3 	.word	0xc39af4e3
 8002bf8:	405537da 	.word	0x405537da
 8002bfc:	a0000000 	.word	0xa0000000
 8002c00:	40a99999 	.word	0x40a99999

08002c04 <Set_PreReg_Voltage>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param voltage -> request voltage on regulator output
 * 
 */
void Set_PreReg_Voltage(uint8_t channel, uint16_t voltage)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	460a      	mov	r2, r1
 8002c0e:	71fb      	strb	r3, [r7, #7]
 8002c10:	4613      	mov	r3, r2
 8002c12:	80bb      	strh	r3, [r7, #4]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <Set_PreReg_Voltage+0x22>
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d002      	beq.n	8002c26 <Set_PreReg_Voltage+0x22>
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d116      	bne.n	8002c54 <Set_PreReg_Voltage+0x50>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 8002c26:	88bb      	ldrh	r3, [r7, #4]
 8002c28:	2b1d      	cmp	r3, #29
 8002c2a:	d804      	bhi.n	8002c36 <Set_PreReg_Voltage+0x32>
 8002c2c:	88bb      	ldrh	r3, [r7, #4]
 8002c2e:	f240 2226 	movw	r2, #550	; 0x226
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d810      	bhi.n	8002c58 <Set_PreReg_Voltage+0x54>

	uint16_t value = Get_DACValue(channel, voltage);
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	88ba      	ldrh	r2, [r7, #4]
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff03 	bl	8002a48 <Get_DACValue>
 8002c42:	4603      	mov	r3, r0
 8002c44:	81fb      	strh	r3, [r7, #14]
	SendValueToDAC(channel,value);
 8002c46:	89fa      	ldrh	r2, [r7, #14]
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f001 fa1f 	bl	8004090 <SendValueToDAC>
 8002c52:	e002      	b.n	8002c5a <Set_PreReg_Voltage+0x56>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002c54:	bf00      	nop
 8002c56:	e000      	b.n	8002c5a <Set_PreReg_Voltage+0x56>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 8002c58:	bf00      	nop
}
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <Set_OutReg_Voltage>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param voltage -> request voltage on regulator output
 * 
 */
void Set_OutReg_Voltage(uint8_t channel, uint16_t voltage)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	460a      	mov	r2, r1
 8002c6a:	71fb      	strb	r3, [r7, #7]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	80bb      	strh	r3, [r7, #4]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <Set_OutReg_Voltage+0x22>
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d002      	beq.n	8002c82 <Set_OutReg_Voltage+0x22>
 8002c7c:	79fb      	ldrb	r3, [r7, #7]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d119      	bne.n	8002cb6 <Set_OutReg_Voltage+0x56>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 8002c82:	88bb      	ldrh	r3, [r7, #4]
 8002c84:	2b1d      	cmp	r3, #29
 8002c86:	d804      	bhi.n	8002c92 <Set_OutReg_Voltage+0x32>
 8002c88:	88bb      	ldrh	r3, [r7, #4]
 8002c8a:	f240 2226 	movw	r2, #550	; 0x226
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d813      	bhi.n	8002cba <Set_OutReg_Voltage+0x5a>

	uint16_t value = Get_DACValue(channel + 3, voltage);
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	3303      	adds	r3, #3
 8002c96:	88ba      	ldrh	r2, [r7, #4]
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff fed4 	bl	8002a48 <Get_DACValue>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	81fb      	strh	r3, [r7, #14]
	SendValueToDAC(channel + 3, value);
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	3303      	adds	r3, #3
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	89fa      	ldrh	r2, [r7, #14]
 8002cac:	4611      	mov	r1, r2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f001 f9ee 	bl	8004090 <SendValueToDAC>
 8002cb4:	e002      	b.n	8002cbc <Set_OutReg_Voltage+0x5c>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002cb6:	bf00      	nop
 8002cb8:	e000      	b.n	8002cbc <Set_OutReg_Voltage+0x5c>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 8002cba:	bf00      	nop
}
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <Set_OutReg_Voltage_F>:

void Set_OutReg_Voltage_F(uint8_t channel, float voltage)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	ed87 0a00 	vstr	s0, [r7]
 8002cd0:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <Set_OutReg_Voltage_F+0x20>
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d002      	beq.n	8002ce4 <Set_OutReg_Voltage_F+0x20>
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d123      	bne.n	8002d2c <Set_OutReg_Voltage_F+0x68>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 8002ce4:	edd7 7a00 	vldr	s15, [r7]
 8002ce8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002cec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cf4:	d508      	bpl.n	8002d08 <Set_OutReg_Voltage_F+0x44>
 8002cf6:	edd7 7a00 	vldr	s15, [r7]
 8002cfa:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002d38 <Set_OutReg_Voltage_F+0x74>
 8002cfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d06:	dc13      	bgt.n	8002d30 <Set_OutReg_Voltage_F+0x6c>

	uint16_t value = Get_DACValue_F(channel + 3, voltage);
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	3303      	adds	r3, #3
 8002d0c:	ed97 0a00 	vldr	s0, [r7]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ff0d 	bl	8002b30 <Get_DACValue_F>
 8002d16:	4603      	mov	r3, r0
 8002d18:	81fb      	strh	r3, [r7, #14]
	SendValueToDAC(channel + 3, value);
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	3303      	adds	r3, #3
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	89fa      	ldrh	r2, [r7, #14]
 8002d22:	4611      	mov	r1, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f001 f9b3 	bl	8004090 <SendValueToDAC>
 8002d2a:	e002      	b.n	8002d32 <Set_OutReg_Voltage_F+0x6e>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002d2c:	bf00      	nop
 8002d2e:	e000      	b.n	8002d32 <Set_OutReg_Voltage_F+0x6e>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 8002d30:	bf00      	nop
}
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	44098000 	.word	0x44098000

08002d3c <Set_Voltage>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param voltage -> request voltage on output of power supply channel
 * 
 */
void Set_Voltage(uint8_t channel, uint16_t voltage)
{
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	460a      	mov	r2, r1
 8002d46:	71fb      	strb	r3, [r7, #7]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	80bb      	strh	r3, [r7, #4]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d006      	beq.n	8002d60 <Set_Voltage+0x24>
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d003      	beq.n	8002d60 <Set_Voltage+0x24>
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	f040 80d0 	bne.w	8002f00 <Set_Voltage+0x1c4>
	if((voltage < minimum_voltage) || (voltage > maximum_voltage)) return;
 8002d60:	88bb      	ldrh	r3, [r7, #4]
 8002d62:	2b1d      	cmp	r3, #29
 8002d64:	f240 80ce 	bls.w	8002f04 <Set_Voltage+0x1c8>
 8002d68:	88bb      	ldrh	r3, [r7, #4]
 8002d6a:	f240 2226 	movw	r2, #550	; 0x226
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	f200 80c8 	bhi.w	8002f04 <Set_Voltage+0x1c8>

	ChannelsChange[channel].request_voltage = voltage; //store request voltage
 8002d74:	79fa      	ldrb	r2, [r7, #7]
 8002d76:	4965      	ldr	r1, [pc, #404]	; (8002f0c <Set_Voltage+0x1d0>)
 8002d78:	4613      	mov	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	3320      	adds	r3, #32
 8002d84:	88ba      	ldrh	r2, [r7, #4]
 8002d86:	801a      	strh	r2, [r3, #0]

	adaptiveVoltRequest[channel] = false;
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	4a61      	ldr	r2, [pc, #388]	; (8002f10 <Set_Voltage+0x1d4>)
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	54d1      	strb	r1, [r2, r3]

	if(abs(voltage - ChannelsStatus[channel].set_voltage) > ramp_v_step) //voltage ramping if difference is bigger that voltage ramp step
 8002d90:	88b9      	ldrh	r1, [r7, #4]
 8002d92:	79fa      	ldrb	r2, [r7, #7]
 8002d94:	485f      	ldr	r0, [pc, #380]	; (8002f14 <Set_Voltage+0x1d8>)
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4403      	add	r3, r0
 8002da0:	3302      	adds	r3, #2
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	1acb      	subs	r3, r1, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	bfb8      	it	lt
 8002daa:	425b      	neglt	r3, r3
 8002dac:	2b05      	cmp	r3, #5
 8002dae:	dd75      	ble.n	8002e9c <Set_Voltage+0x160>
	{
		//ChannelsChange[channel].request_voltage = voltage; //store request voltage

		//calculate new voltage
		if(ChannelsStatus[channel].set_voltage < ChannelsChange[channel].request_voltage)
 8002db0:	79fa      	ldrb	r2, [r7, #7]
 8002db2:	4958      	ldr	r1, [pc, #352]	; (8002f14 <Set_Voltage+0x1d8>)
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	8819      	ldrh	r1, [r3, #0]
 8002dc2:	79fa      	ldrb	r2, [r7, #7]
 8002dc4:	4851      	ldr	r0, [pc, #324]	; (8002f0c <Set_Voltage+0x1d0>)
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4403      	add	r3, r0
 8002dd0:	3320      	adds	r3, #32
 8002dd2:	881b      	ldrh	r3, [r3, #0]
 8002dd4:	4299      	cmp	r1, r3
 8002dd6:	d215      	bcs.n	8002e04 <Set_Voltage+0xc8>
		{
			ChannelsStatus[channel].set_voltage += ramp_v_step;
 8002dd8:	79fa      	ldrb	r2, [r7, #7]
 8002dda:	494e      	ldr	r1, [pc, #312]	; (8002f14 <Set_Voltage+0x1d8>)
 8002ddc:	4613      	mov	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	3302      	adds	r3, #2
 8002de8:	881b      	ldrh	r3, [r3, #0]
 8002dea:	79fa      	ldrb	r2, [r7, #7]
 8002dec:	3305      	adds	r3, #5
 8002dee:	b298      	uxth	r0, r3
 8002df0:	4948      	ldr	r1, [pc, #288]	; (8002f14 <Set_Voltage+0x1d8>)
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	3302      	adds	r3, #2
 8002dfe:	4602      	mov	r2, r0
 8002e00:	801a      	strh	r2, [r3, #0]
 8002e02:	e014      	b.n	8002e2e <Set_Voltage+0xf2>
		}
		else
		{
			ChannelsStatus[channel].set_voltage -= ramp_v_step;
 8002e04:	79fa      	ldrb	r2, [r7, #7]
 8002e06:	4943      	ldr	r1, [pc, #268]	; (8002f14 <Set_Voltage+0x1d8>)
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	3302      	adds	r3, #2
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	79fa      	ldrb	r2, [r7, #7]
 8002e18:	3b05      	subs	r3, #5
 8002e1a:	b298      	uxth	r0, r3
 8002e1c:	493d      	ldr	r1, [pc, #244]	; (8002f14 <Set_Voltage+0x1d8>)
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	3302      	adds	r3, #2
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	801a      	strh	r2, [r3, #0]
		}

		//Set voltage
		Set_OutReg_Voltage(channel, ChannelsStatus[channel].set_voltage);
 8002e2e:	79fa      	ldrb	r2, [r7, #7]
 8002e30:	4938      	ldr	r1, [pc, #224]	; (8002f14 <Set_Voltage+0x1d8>)
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	3302      	adds	r3, #2
 8002e3e:	881a      	ldrh	r2, [r3, #0]
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ff0b 	bl	8002c60 <Set_OutReg_Voltage>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(ChannelsStatus[channel].set_voltage));
 8002e4a:	79fa      	ldrb	r2, [r7, #7]
 8002e4c:	4931      	ldr	r1, [pc, #196]	; (8002f14 <Set_Voltage+0x1d8>)
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	3302      	adds	r3, #2
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fdc3 	bl	80029e8 <Get_PreRegulatorVoltage>
 8002e62:	4603      	mov	r3, r0
 8002e64:	461a      	mov	r2, r3
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	4611      	mov	r1, r2
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff feca 	bl	8002c04 <Set_PreReg_Voltage>

		//Enable and set ramping timer
		ChannelsChange[channel].voltage_ramp = true;
 8002e70:	79fa      	ldrb	r2, [r7, #7]
 8002e72:	4926      	ldr	r1, [pc, #152]	; (8002f0c <Set_Voltage+0x1d0>)
 8002e74:	4613      	mov	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].voltage_ramp_timer = HAL_GetTick();
 8002e82:	79fc      	ldrb	r4, [r7, #7]
 8002e84:	f002 fd06 	bl	8005894 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	4920      	ldr	r1, [pc, #128]	; (8002f0c <Set_Voltage+0x1d0>)
 8002e8c:	4623      	mov	r3, r4
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	4423      	add	r3, r4
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	3308      	adds	r3, #8
 8002e98:	601a      	str	r2, [r3, #0]
 8002e9a:	e034      	b.n	8002f06 <Set_Voltage+0x1ca>
	}
	else //without voltage ramping if difference is smaller that voltage ramp step
	{
		//ChannelsChange[channel].request_voltage = voltage; //store request voltage
		ChannelsStatus[channel].set_voltage = voltage;
 8002e9c:	79fa      	ldrb	r2, [r7, #7]
 8002e9e:	491d      	ldr	r1, [pc, #116]	; (8002f14 <Set_Voltage+0x1d8>)
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	3302      	adds	r3, #2
 8002eac:	88ba      	ldrh	r2, [r7, #4]
 8002eae:	801a      	strh	r2, [r3, #0]
		Set_OutReg_Voltage(channel, voltage);
 8002eb0:	88ba      	ldrh	r2, [r7, #4]
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff fed2 	bl	8002c60 <Set_OutReg_Voltage>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(voltage));
 8002ebc:	88bb      	ldrh	r3, [r7, #4]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fd92 	bl	80029e8 <Get_PreRegulatorVoltage>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	79fb      	ldrb	r3, [r7, #7]
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7ff fe99 	bl	8002c04 <Set_PreReg_Voltage>

		ChannelsChange[channel].regStart_timer = HAL_GetTick();
 8002ed2:	79fc      	ldrb	r4, [r7, #7]
 8002ed4:	f002 fcde 	bl	8005894 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	490c      	ldr	r1, [pc, #48]	; (8002f0c <Set_Voltage+0x1d0>)
 8002edc:	4623      	mov	r3, r4
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	4423      	add	r3, r4
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	331c      	adds	r3, #28
 8002ee8:	601a      	str	r2, [r3, #0]
		ChannelsChange[channel].regStart_req = true;
 8002eea:	79fa      	ldrb	r2, [r7, #7]
 8002eec:	4907      	ldr	r1, [pc, #28]	; (8002f0c <Set_Voltage+0x1d0>)
 8002eee:	4613      	mov	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	3304      	adds	r3, #4
 8002efa:	2201      	movs	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	e002      	b.n	8002f06 <Set_Voltage+0x1ca>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002f00:	bf00      	nop
 8002f02:	e000      	b.n	8002f06 <Set_Voltage+0x1ca>
	if((voltage < minimum_voltage) || (voltage > maximum_voltage)) return;
 8002f04:	bf00      	nop
	}


}
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd90      	pop	{r4, r7, pc}
 8002f0c:	20001a18 	.word	0x20001a18
 8002f10:	20001a9c 	.word	0x20001a9c
 8002f14:	200019dc 	.word	0x200019dc

08002f18 <Set_VoltageInEnable>:


void Set_VoltageInEnable(uint8_t channel)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <Set_VoltageInEnable+0x1c>
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d002      	beq.n	8002f34 <Set_VoltageInEnable+0x1c>
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d11d      	bne.n	8002f70 <Set_VoltageInEnable+0x58>

	uint16_t voltage = minimum_voltage;
 8002f34:	231e      	movs	r3, #30
 8002f36:	81fb      	strh	r3, [r7, #14]

	Set_OutReg_Voltage(channel, voltage);
 8002f38:	89fa      	ldrh	r2, [r7, #14]
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff fe8e 	bl	8002c60 <Set_OutReg_Voltage>
	Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(voltage));
 8002f44:	89fb      	ldrh	r3, [r7, #14]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fd4e 	bl	80029e8 <Get_PreRegulatorVoltage>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	461a      	mov	r2, r3
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	4611      	mov	r1, r2
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff fe55 	bl	8002c04 <Set_PreReg_Voltage>

	ChannelsStatus[channel].set_voltage = voltage;
 8002f5a:	79fa      	ldrb	r2, [r7, #7]
 8002f5c:	4906      	ldr	r1, [pc, #24]	; (8002f78 <Set_VoltageInEnable+0x60>)
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	3302      	adds	r3, #2
 8002f6a:	89fa      	ldrh	r2, [r7, #14]
 8002f6c:	801a      	strh	r2, [r3, #0]
 8002f6e:	e000      	b.n	8002f72 <Set_VoltageInEnable+0x5a>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002f70:	bf00      	nop
}
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	200019dc 	.word	0x200019dc

08002f7c <Set_Voltage_From_Ramping>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param voltage -> request voltage on output of power supply channel
 *
 */
void Set_Voltage_From_Ramping(uint8_t channel)
{
 8002f7c:	b590      	push	{r4, r7, lr}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002f86:	79fb      	ldrb	r3, [r7, #7]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d006      	beq.n	8002f9a <Set_Voltage_From_Ramping+0x1e>
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d003      	beq.n	8002f9a <Set_Voltage_From_Ramping+0x1e>
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	f040 80e3 	bne.w	8003160 <Set_Voltage_From_Ramping+0x1e4>

	if(abs(ChannelsStatus[channel].set_voltage - ChannelsChange[channel].request_voltage) > ramp_v_step) //keep ramping
 8002f9a:	79fa      	ldrb	r2, [r7, #7]
 8002f9c:	4972      	ldr	r1, [pc, #456]	; (8003168 <Set_Voltage_From_Ramping+0x1ec>)
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	3302      	adds	r3, #2
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	79fa      	ldrb	r2, [r7, #7]
 8002fb0:	496e      	ldr	r1, [pc, #440]	; (800316c <Set_Voltage_From_Ramping+0x1f0>)
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	3320      	adds	r3, #32
 8002fbe:	881b      	ldrh	r3, [r3, #0]
 8002fc0:	1ac3      	subs	r3, r0, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	bfb8      	it	lt
 8002fc6:	425b      	neglt	r3, r3
 8002fc8:	2b05      	cmp	r3, #5
 8002fca:	dd75      	ble.n	80030b8 <Set_Voltage_From_Ramping+0x13c>
	{

		//calculate new voltage
		if(ChannelsStatus[channel].set_voltage < ChannelsChange[channel].request_voltage)
 8002fcc:	79fa      	ldrb	r2, [r7, #7]
 8002fce:	4966      	ldr	r1, [pc, #408]	; (8003168 <Set_Voltage_From_Ramping+0x1ec>)
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	3302      	adds	r3, #2
 8002fdc:	8819      	ldrh	r1, [r3, #0]
 8002fde:	79fa      	ldrb	r2, [r7, #7]
 8002fe0:	4862      	ldr	r0, [pc, #392]	; (800316c <Set_Voltage_From_Ramping+0x1f0>)
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4403      	add	r3, r0
 8002fec:	3320      	adds	r3, #32
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	4299      	cmp	r1, r3
 8002ff2:	d215      	bcs.n	8003020 <Set_Voltage_From_Ramping+0xa4>
		{
			ChannelsStatus[channel].set_voltage += ramp_v_step;
 8002ff4:	79fa      	ldrb	r2, [r7, #7]
 8002ff6:	495c      	ldr	r1, [pc, #368]	; (8003168 <Set_Voltage_From_Ramping+0x1ec>)
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	3302      	adds	r3, #2
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	79fa      	ldrb	r2, [r7, #7]
 8003008:	3305      	adds	r3, #5
 800300a:	b298      	uxth	r0, r3
 800300c:	4956      	ldr	r1, [pc, #344]	; (8003168 <Set_Voltage_From_Ramping+0x1ec>)
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	3302      	adds	r3, #2
 800301a:	4602      	mov	r2, r0
 800301c:	801a      	strh	r2, [r3, #0]
 800301e:	e014      	b.n	800304a <Set_Voltage_From_Ramping+0xce>
		}
		else
		{
			ChannelsStatus[channel].set_voltage -= ramp_v_step;
 8003020:	79fa      	ldrb	r2, [r7, #7]
 8003022:	4951      	ldr	r1, [pc, #324]	; (8003168 <Set_Voltage_From_Ramping+0x1ec>)
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	3302      	adds	r3, #2
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	79fa      	ldrb	r2, [r7, #7]
 8003034:	3b05      	subs	r3, #5
 8003036:	b298      	uxth	r0, r3
 8003038:	494b      	ldr	r1, [pc, #300]	; (8003168 <Set_Voltage_From_Ramping+0x1ec>)
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	3302      	adds	r3, #2
 8003046:	4602      	mov	r2, r0
 8003048:	801a      	strh	r2, [r3, #0]
		}

		//Set out voltage
		Set_OutReg_Voltage(channel, ChannelsStatus[channel].set_voltage);
 800304a:	79fa      	ldrb	r2, [r7, #7]
 800304c:	4946      	ldr	r1, [pc, #280]	; (8003168 <Set_Voltage_From_Ramping+0x1ec>)
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	3302      	adds	r3, #2
 800305a:	881a      	ldrh	r2, [r3, #0]
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	4611      	mov	r1, r2
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff fdfd 	bl	8002c60 <Set_OutReg_Voltage>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(ChannelsStatus[channel].set_voltage));
 8003066:	79fa      	ldrb	r2, [r7, #7]
 8003068:	493f      	ldr	r1, [pc, #252]	; (8003168 <Set_Voltage_From_Ramping+0x1ec>)
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	3302      	adds	r3, #2
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff fcb5 	bl	80029e8 <Get_PreRegulatorVoltage>
 800307e:	4603      	mov	r3, r0
 8003080:	461a      	mov	r2, r3
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff fdbc 	bl	8002c04 <Set_PreReg_Voltage>

		//Reset ramping timer
		ChannelsChange[channel].voltage_ramp = true;
 800308c:	79fa      	ldrb	r2, [r7, #7]
 800308e:	4937      	ldr	r1, [pc, #220]	; (800316c <Set_Voltage_From_Ramping+0x1f0>)
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	2201      	movs	r2, #1
 800309c:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].voltage_ramp_timer = HAL_GetTick();
 800309e:	79fc      	ldrb	r4, [r7, #7]
 80030a0:	f002 fbf8 	bl	8005894 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	4931      	ldr	r1, [pc, #196]	; (800316c <Set_Voltage_From_Ramping+0x1f0>)
 80030a8:	4623      	mov	r3, r4
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4423      	add	r3, r4
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	3308      	adds	r3, #8
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	e054      	b.n	8003162 <Set_Voltage_From_Ramping+0x1e6>
	}
	else
	{
		//Disable ramping timer
		ChannelsChange[channel].voltage_ramp = false;
 80030b8:	79fa      	ldrb	r2, [r7, #7]
 80030ba:	492c      	ldr	r1, [pc, #176]	; (800316c <Set_Voltage_From_Ramping+0x1f0>)
 80030bc:	4613      	mov	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	2200      	movs	r2, #0
 80030c8:	701a      	strb	r2, [r3, #0]

		ChannelsStatus[channel].set_voltage = ChannelsChange[channel].request_voltage;
 80030ca:	79f9      	ldrb	r1, [r7, #7]
 80030cc:	79fa      	ldrb	r2, [r7, #7]
 80030ce:	4827      	ldr	r0, [pc, #156]	; (800316c <Set_Voltage_From_Ramping+0x1f0>)
 80030d0:	460b      	mov	r3, r1
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4403      	add	r3, r0
 80030da:	3320      	adds	r3, #32
 80030dc:	8818      	ldrh	r0, [r3, #0]
 80030de:	4922      	ldr	r1, [pc, #136]	; (8003168 <Set_Voltage_From_Ramping+0x1ec>)
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	3302      	adds	r3, #2
 80030ec:	4602      	mov	r2, r0
 80030ee:	801a      	strh	r2, [r3, #0]

		Set_OutReg_Voltage(channel, ChannelsStatus[channel].set_voltage);
 80030f0:	79fa      	ldrb	r2, [r7, #7]
 80030f2:	491d      	ldr	r1, [pc, #116]	; (8003168 <Set_Voltage_From_Ramping+0x1ec>)
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	3302      	adds	r3, #2
 8003100:	881a      	ldrh	r2, [r3, #0]
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff fdaa 	bl	8002c60 <Set_OutReg_Voltage>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(ChannelsStatus[channel].set_voltage));
 800310c:	79fa      	ldrb	r2, [r7, #7]
 800310e:	4916      	ldr	r1, [pc, #88]	; (8003168 <Set_Voltage_From_Ramping+0x1ec>)
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	3302      	adds	r3, #2
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fc62 	bl	80029e8 <Get_PreRegulatorVoltage>
 8003124:	4603      	mov	r3, r0
 8003126:	461a      	mov	r2, r3
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	4611      	mov	r1, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff fd69 	bl	8002c04 <Set_PreReg_Voltage>

		ChannelsChange[channel].regStart_timer = HAL_GetTick();
 8003132:	79fc      	ldrb	r4, [r7, #7]
 8003134:	f002 fbae 	bl	8005894 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	490c      	ldr	r1, [pc, #48]	; (800316c <Set_Voltage_From_Ramping+0x1f0>)
 800313c:	4623      	mov	r3, r4
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4423      	add	r3, r4
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	331c      	adds	r3, #28
 8003148:	601a      	str	r2, [r3, #0]
		ChannelsChange[channel].regStart_req = true;
 800314a:	79fa      	ldrb	r2, [r7, #7]
 800314c:	4907      	ldr	r1, [pc, #28]	; (800316c <Set_Voltage_From_Ramping+0x1f0>)
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	3304      	adds	r3, #4
 800315a:	2201      	movs	r2, #1
 800315c:	701a      	strb	r2, [r3, #0]
 800315e:	e000      	b.n	8003162 <Set_Voltage_From_Ramping+0x1e6>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8003160:	bf00      	nop
	}

}
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	bd90      	pop	{r4, r7, pc}
 8003168:	200019dc 	.word	0x200019dc
 800316c:	20001a18 	.word	0x20001a18

08003170 <Channel_Enable>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param enable -> true - enable, false disble 
 * 
 */
void Channel_Enable(uint8_t channel, bool enable)
{
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	460a      	mov	r2, r1
 800317a:	71fb      	strb	r3, [r7, #7]
 800317c:	4613      	mov	r3, r2
 800317e:	71bb      	strb	r3, [r7, #6]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d006      	beq.n	8003194 <Channel_Enable+0x24>
 8003186:	79fb      	ldrb	r3, [r7, #7]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d003      	beq.n	8003194 <Channel_Enable+0x24>
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	2b02      	cmp	r3, #2
 8003190:	f040 80a2 	bne.w	80032d8 <Channel_Enable+0x168>
	if(enable == ChannelsStatus[channel].enable) return;
 8003194:	79fa      	ldrb	r2, [r7, #7]
 8003196:	4953      	ldr	r1, [pc, #332]	; (80032e4 <Channel_Enable+0x174>)
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	79ba      	ldrb	r2, [r7, #6]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	f000 8098 	beq.w	80032dc <Channel_Enable+0x16c>


	ChannelsChange[channel].voltageBeforeEnable = ChannelsChange[channel].request_voltage;
 80031ac:	79f9      	ldrb	r1, [r7, #7]
 80031ae:	79fa      	ldrb	r2, [r7, #7]
 80031b0:	484d      	ldr	r0, [pc, #308]	; (80032e8 <Channel_Enable+0x178>)
 80031b2:	460b      	mov	r3, r1
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	440b      	add	r3, r1
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4403      	add	r3, r0
 80031bc:	3320      	adds	r3, #32
 80031be:	8818      	ldrh	r0, [r3, #0]
 80031c0:	4949      	ldr	r1, [pc, #292]	; (80032e8 <Channel_Enable+0x178>)
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	3322      	adds	r3, #34	; 0x22
 80031ce:	4602      	mov	r2, r0
 80031d0:	801a      	strh	r2, [r3, #0]

	ChannelsChange[channel].restarts_counter = 0;
 80031d2:	79fa      	ldrb	r2, [r7, #7]
 80031d4:	4944      	ldr	r1, [pc, #272]	; (80032e8 <Channel_Enable+0x178>)
 80031d6:	4613      	mov	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	3318      	adds	r3, #24
 80031e2:	2200      	movs	r2, #0
 80031e4:	701a      	strb	r2, [r3, #0]
	ChannelsStatus[channel].disableInError = false;
 80031e6:	79fa      	ldrb	r2, [r7, #7]
 80031e8:	493e      	ldr	r1, [pc, #248]	; (80032e4 <Channel_Enable+0x174>)
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	3312      	adds	r3, #18
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]

	if(enable)
 80031fa:	79bb      	ldrb	r3, [r7, #6]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d032      	beq.n	8003266 <Channel_Enable+0xf6>
	{
		//Set_Voltage(channel, minimum_voltage);
		Set_VoltageInEnable(channel);
 8003200:	79fb      	ldrb	r3, [r7, #7]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fe88 	bl	8002f18 <Set_VoltageInEnable>
		Enable_GPIO(channel, true);
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	2101      	movs	r1, #1
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fa2b 	bl	8002668 <Enable_GPIO>
		ChannelsStatus[channel].enable = true;
 8003212:	79fa      	ldrb	r2, [r7, #7]
 8003214:	4933      	ldr	r1, [pc, #204]	; (80032e4 <Channel_Enable+0x174>)
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].restart_request = false;
 8003224:	79fa      	ldrb	r2, [r7, #7]
 8003226:	4930      	ldr	r1, [pc, #192]	; (80032e8 <Channel_Enable+0x178>)
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	3303      	adds	r3, #3
 8003234:	2200      	movs	r2, #0
 8003236:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].enable_request = true;
 8003238:	79fa      	ldrb	r2, [r7, #7]
 800323a:	492b      	ldr	r1, [pc, #172]	; (80032e8 <Channel_Enable+0x178>)
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	3301      	adds	r3, #1
 8003248:	2201      	movs	r2, #1
 800324a:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].enable_timer = HAL_GetTick();
 800324c:	79fc      	ldrb	r4, [r7, #7]
 800324e:	f002 fb21 	bl	8005894 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	4924      	ldr	r1, [pc, #144]	; (80032e8 <Channel_Enable+0x178>)
 8003256:	4623      	mov	r3, r4
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4423      	add	r3, r4
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	330c      	adds	r3, #12
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	e025      	b.n	80032b2 <Channel_Enable+0x142>
	}
	else
	{
		ChannelsChange[channel].enable_request = false;
 8003266:	79fa      	ldrb	r2, [r7, #7]
 8003268:	491f      	ldr	r1, [pc, #124]	; (80032e8 <Channel_Enable+0x178>)
 800326a:	4613      	mov	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	3301      	adds	r3, #1
 8003276:	2200      	movs	r2, #0
 8003278:	701a      	strb	r2, [r3, #0]
		ChannelsStatus[channel].enable = false;
 800327a:	79fa      	ldrb	r2, [r7, #7]
 800327c:	4919      	ldr	r1, [pc, #100]	; (80032e4 <Channel_Enable+0x174>)
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	2200      	movs	r2, #0
 800328a:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].restart_request = false;
 800328c:	79fa      	ldrb	r2, [r7, #7]
 800328e:	4916      	ldr	r1, [pc, #88]	; (80032e8 <Channel_Enable+0x178>)
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	3303      	adds	r3, #3
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
		Enable_GPIO(channel, false);
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	2100      	movs	r1, #0
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7ff f9df 	bl	8002668 <Enable_GPIO>
		adaptiveVoltRequest[channel] = false;
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	4a0f      	ldr	r2, [pc, #60]	; (80032ec <Channel_Enable+0x17c>)
 80032ae:	2100      	movs	r1, #0
 80032b0:	54d1      	strb	r1, [r2, r3]
	}


	if(MainParams.ControlOutputWithChannelEnable) //je aktivni funkce ovladani vystupu s eneble
 80032b2:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <Channel_Enable+0x180>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d011      	beq.n	80032de <Channel_Enable+0x16e>
	{
		if(enable)
 80032ba:	79bb      	ldrb	r3, [r7, #6]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <Channel_Enable+0x15c>
		{
			Channel_Output(channel, true);
 80032c0:	79fb      	ldrb	r3, [r7, #7]
 80032c2:	2101      	movs	r1, #1
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 f95d 	bl	8003584 <Channel_Output>
 80032ca:	e008      	b.n	80032de <Channel_Enable+0x16e>
		}
		else
		{
			Channel_Output(channel, false);
 80032cc:	79fb      	ldrb	r3, [r7, #7]
 80032ce:	2100      	movs	r1, #0
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 f957 	bl	8003584 <Channel_Output>
 80032d6:	e002      	b.n	80032de <Channel_Enable+0x16e>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 80032d8:	bf00      	nop
 80032da:	e000      	b.n	80032de <Channel_Enable+0x16e>
	if(enable == ChannelsStatus[channel].enable) return;
 80032dc:	bf00      	nop
		}
	}

}
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd90      	pop	{r4, r7, pc}
 80032e4:	200019dc 	.word	0x200019dc
 80032e8:	20001a18 	.word	0x20001a18
 80032ec:	20001a9c 	.word	0x20001a9c
 80032f0:	20001aa0 	.word	0x20001aa0

080032f4 <Channel_Restart>:

void Channel_Restart(uint8_t channel)
{
 80032f4:	b590      	push	{r4, r7, lr}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <Channel_Restart+0x1c>
 8003304:	79fb      	ldrb	r3, [r7, #7]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d002      	beq.n	8003310 <Channel_Restart+0x1c>
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d161      	bne.n	80033d4 <Channel_Restart+0xe0>

	if(ChannelsStatus[channel].enable == false)
 8003310:	79fa      	ldrb	r2, [r7, #7]
 8003312:	4932      	ldr	r1, [pc, #200]	; (80033dc <Channel_Restart+0xe8>)
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	f083 0301 	eor.w	r3, r3, #1
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <Channel_Restart+0x4c>
	{
		ChannelsChange[channel].restart_request = false;
 800332a:	79fa      	ldrb	r2, [r7, #7]
 800332c:	492c      	ldr	r1, [pc, #176]	; (80033e0 <Channel_Restart+0xec>)
 800332e:	4613      	mov	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	3303      	adds	r3, #3
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
		return;
 800333e:	e04a      	b.n	80033d6 <Channel_Restart+0xe2>
	}

	//ChannelsChange[channel].restarts_counter++;

	ErrorTimerReset(channel);
 8003340:	79fb      	ldrb	r3, [r7, #7]
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe fe5e 	bl	8002004 <ErrorTimerReset>

	if(ChannelsChange[channel].restarts_counter >= max_restart_count)
 8003348:	79fa      	ldrb	r2, [r7, #7]
 800334a:	4925      	ldr	r1, [pc, #148]	; (80033e0 <Channel_Restart+0xec>)
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	3318      	adds	r3, #24
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d919      	bls.n	8003392 <Channel_Restart+0x9e>
	{
		Channel_Enable(channel, false);
 800335e:	79fb      	ldrb	r3, [r7, #7]
 8003360:	2100      	movs	r1, #0
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff ff04 	bl	8003170 <Channel_Enable>
		ChannelsStatus[channel].disableInError = true;
 8003368:	79fa      	ldrb	r2, [r7, #7]
 800336a:	491c      	ldr	r1, [pc, #112]	; (80033dc <Channel_Restart+0xe8>)
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	3312      	adds	r3, #18
 8003378:	2201      	movs	r2, #1
 800337a:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].restart_request = false;
 800337c:	79fa      	ldrb	r2, [r7, #7]
 800337e:	4918      	ldr	r1, [pc, #96]	; (80033e0 <Channel_Restart+0xec>)
 8003380:	4613      	mov	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	3303      	adds	r3, #3
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
 8003390:	e021      	b.n	80033d6 <Channel_Restart+0xe2>
	}
	else
	{
		ChannelsChange[channel].restart_request = true;
 8003392:	79fa      	ldrb	r2, [r7, #7]
 8003394:	4912      	ldr	r1, [pc, #72]	; (80033e0 <Channel_Restart+0xec>)
 8003396:	4613      	mov	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4413      	add	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	3303      	adds	r3, #3
 80033a2:	2201      	movs	r2, #1
 80033a4:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].restart_timer = HAL_GetTick();
 80033a6:	79fc      	ldrb	r4, [r7, #7]
 80033a8:	f002 fa74 	bl	8005894 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	490c      	ldr	r1, [pc, #48]	; (80033e0 <Channel_Restart+0xec>)
 80033b0:	4623      	mov	r3, r4
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4423      	add	r3, r4
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	3314      	adds	r3, #20
 80033bc:	601a      	str	r2, [r3, #0]

		Enable_GPIO(channel, false);
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	2100      	movs	r1, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff f950 	bl	8002668 <Enable_GPIO>
		Channel_Output(channel, false);
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	2100      	movs	r1, #0
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 f8d9 	bl	8003584 <Channel_Output>
 80033d2:	e000      	b.n	80033d6 <Channel_Restart+0xe2>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 80033d4:	bf00      	nop

	}


}
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd90      	pop	{r4, r7, pc}
 80033dc:	200019dc 	.word	0x200019dc
 80033e0:	20001a18 	.word	0x20001a18

080033e4 <Channel_Enable_fromRestart>:

void Channel_Enable_fromRestart(uint8_t channel)
{
 80033e4:	b590      	push	{r4, r7, lr}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	71fb      	strb	r3, [r7, #7]
	ChannelsChange[channel].voltageBeforeEnable = ChannelsChange[channel].request_voltage;
 80033ee:	79f9      	ldrb	r1, [r7, #7]
 80033f0:	79fa      	ldrb	r2, [r7, #7]
 80033f2:	482a      	ldr	r0, [pc, #168]	; (800349c <Channel_Enable_fromRestart+0xb8>)
 80033f4:	460b      	mov	r3, r1
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	440b      	add	r3, r1
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4403      	add	r3, r0
 80033fe:	3320      	adds	r3, #32
 8003400:	8818      	ldrh	r0, [r3, #0]
 8003402:	4926      	ldr	r1, [pc, #152]	; (800349c <Channel_Enable_fromRestart+0xb8>)
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4413      	add	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	3322      	adds	r3, #34	; 0x22
 8003410:	4602      	mov	r2, r0
 8003412:	801a      	strh	r2, [r3, #0]

	Set_VoltageInEnable(channel);
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff fd7e 	bl	8002f18 <Set_VoltageInEnable>
	Enable_GPIO(channel, true);
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	2101      	movs	r1, #1
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff f921 	bl	8002668 <Enable_GPIO>
	ChannelsStatus[channel].enable = true;
 8003426:	79fa      	ldrb	r2, [r7, #7]
 8003428:	491d      	ldr	r1, [pc, #116]	; (80034a0 <Channel_Enable_fromRestart+0xbc>)
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	2201      	movs	r2, #1
 8003436:	701a      	strb	r2, [r3, #0]
	ChannelsChange[channel].restart_request = false;
 8003438:	79fa      	ldrb	r2, [r7, #7]
 800343a:	4918      	ldr	r1, [pc, #96]	; (800349c <Channel_Enable_fromRestart+0xb8>)
 800343c:	4613      	mov	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	3303      	adds	r3, #3
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]
	ChannelsChange[channel].enable_request = true;
 800344c:	79fa      	ldrb	r2, [r7, #7]
 800344e:	4913      	ldr	r1, [pc, #76]	; (800349c <Channel_Enable_fromRestart+0xb8>)
 8003450:	4613      	mov	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	3301      	adds	r3, #1
 800345c:	2201      	movs	r2, #1
 800345e:	701a      	strb	r2, [r3, #0]
	ChannelsChange[channel].enable_timer = HAL_GetTick();
 8003460:	79fc      	ldrb	r4, [r7, #7]
 8003462:	f002 fa17 	bl	8005894 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	490c      	ldr	r1, [pc, #48]	; (800349c <Channel_Enable_fromRestart+0xb8>)
 800346a:	4623      	mov	r3, r4
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4423      	add	r3, r4
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	330c      	adds	r3, #12
 8003476:	601a      	str	r2, [r3, #0]

	Channel_Output(channel, true);
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	2101      	movs	r1, #1
 800347c:	4618      	mov	r0, r3
 800347e:	f000 f881 	bl	8003584 <Channel_Output>

	if(MainParams.ControlOutputWithChannelEnable) //je aktivni funkce ovladani vystupu s eneble
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <Channel_Enable_fromRestart+0xc0>)
 8003484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003486:	2b00      	cmp	r3, #0
 8003488:	d004      	beq.n	8003494 <Channel_Enable_fromRestart+0xb0>
	{
		Channel_Output(channel, true);
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	2101      	movs	r1, #1
 800348e:	4618      	mov	r0, r3
 8003490:	f000 f878 	bl	8003584 <Channel_Output>
	}


}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	bd90      	pop	{r4, r7, pc}
 800349c:	20001a18 	.word	0x20001a18
 80034a0:	200019dc 	.word	0x200019dc
 80034a4:	20001aa0 	.word	0x20001aa0

080034a8 <Channel_Polarity>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param polarity -> polarity of output voltage
 * 
 */
void Channel_Polarity(uint8_t channel, eOutputPolarity polarity)
{
 80034a8:	b590      	push	{r4, r7, lr}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	460a      	mov	r2, r1
 80034b2:	71fb      	strb	r3, [r7, #7]
 80034b4:	4613      	mov	r3, r2
 80034b6:	71bb      	strb	r3, [r7, #6]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <Channel_Polarity+0x22>
 80034be:	79fb      	ldrb	r3, [r7, #7]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d002      	beq.n	80034ca <Channel_Polarity+0x22>
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d14b      	bne.n	8003562 <Channel_Polarity+0xba>
	if(polarity == ChannelsStatus[channel].polarity) return;
 80034ca:	79fa      	ldrb	r2, [r7, #7]
 80034cc:	492a      	ldr	r1, [pc, #168]	; (8003578 <Channel_Polarity+0xd0>)
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	3304      	adds	r3, #4
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	79ba      	ldrb	r2, [r7, #6]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d041      	beq.n	8003566 <Channel_Polarity+0xbe>

	if(MainParams.ControlOutputWithChannelEnable && ChannelsStatus[channel].enable) return; // polarita nejde prepnout, kdyz je kanál zapnutý
 80034e2:	4b26      	ldr	r3, [pc, #152]	; (800357c <Channel_Polarity+0xd4>)
 80034e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d009      	beq.n	80034fe <Channel_Polarity+0x56>
 80034ea:	79fa      	ldrb	r2, [r7, #7]
 80034ec:	4922      	ldr	r1, [pc, #136]	; (8003578 <Channel_Polarity+0xd0>)
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d135      	bne.n	800356a <Channel_Polarity+0xc2>


	if(ChannelsChange[channel].polarity_request) return;
 80034fe:	79fa      	ldrb	r2, [r7, #7]
 8003500:	491f      	ldr	r1, [pc, #124]	; (8003580 <Channel_Polarity+0xd8>)
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	3302      	adds	r3, #2
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d12c      	bne.n	800356e <Channel_Polarity+0xc6>

	ChannelsStatus[channel].polarity = polarity;
 8003514:	79fa      	ldrb	r2, [r7, #7]
 8003516:	4918      	ldr	r1, [pc, #96]	; (8003578 <Channel_Polarity+0xd0>)
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	3304      	adds	r3, #4
 8003524:	79ba      	ldrb	r2, [r7, #6]
 8003526:	701a      	strb	r2, [r3, #0]
	Output_GPIO(channel, false, false);
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	2200      	movs	r2, #0
 800352c:	2100      	movs	r1, #0
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff f8cc 	bl	80026cc <Output_GPIO>

	ChannelsChange[channel].polarity_request = true;
 8003534:	79fa      	ldrb	r2, [r7, #7]
 8003536:	4912      	ldr	r1, [pc, #72]	; (8003580 <Channel_Polarity+0xd8>)
 8003538:	4613      	mov	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	3302      	adds	r3, #2
 8003544:	2201      	movs	r2, #1
 8003546:	701a      	strb	r2, [r3, #0]
	ChannelsChange[channel].polarity_timer = HAL_GetTick();
 8003548:	79fc      	ldrb	r4, [r7, #7]
 800354a:	f002 f9a3 	bl	8005894 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	490b      	ldr	r1, [pc, #44]	; (8003580 <Channel_Polarity+0xd8>)
 8003552:	4623      	mov	r3, r4
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4423      	add	r3, r4
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	3310      	adds	r3, #16
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e006      	b.n	8003570 <Channel_Polarity+0xc8>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8003562:	bf00      	nop
 8003564:	e004      	b.n	8003570 <Channel_Polarity+0xc8>
	if(polarity == ChannelsStatus[channel].polarity) return;
 8003566:	bf00      	nop
 8003568:	e002      	b.n	8003570 <Channel_Polarity+0xc8>
	if(MainParams.ControlOutputWithChannelEnable && ChannelsStatus[channel].enable) return; // polarita nejde prepnout, kdyz je kanál zapnutý
 800356a:	bf00      	nop
 800356c:	e000      	b.n	8003570 <Channel_Polarity+0xc8>
	if(ChannelsChange[channel].polarity_request) return;
 800356e:	bf00      	nop

}
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	bd90      	pop	{r4, r7, pc}
 8003576:	bf00      	nop
 8003578:	200019dc 	.word	0x200019dc
 800357c:	20001aa0 	.word	0x20001aa0
 8003580:	20001a18 	.word	0x20001a18

08003584 <Channel_Output>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param output -> true - output on, false - output off
 * 
 */
void Channel_Output(uint8_t channel, bool output)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	460a      	mov	r2, r1
 800358e:	71fb      	strb	r3, [r7, #7]
 8003590:	4613      	mov	r3, r2
 8003592:	71bb      	strb	r3, [r7, #6]

	if(MainParams.ControlOutputWithChannelEnable && ChannelsStatus[channel].enable && !ChannelsChange[channel].enable_request && output) return; // vystup nejde zapnout, kdyz je kanál zapnutý
 8003594:	4b28      	ldr	r3, [pc, #160]	; (8003638 <Channel_Output+0xb4>)
 8003596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003598:	2b00      	cmp	r3, #0
 800359a:	d01a      	beq.n	80035d2 <Channel_Output+0x4e>
 800359c:	79fa      	ldrb	r2, [r7, #7]
 800359e:	4927      	ldr	r1, [pc, #156]	; (800363c <Channel_Output+0xb8>)
 80035a0:	4613      	mov	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d010      	beq.n	80035d2 <Channel_Output+0x4e>
 80035b0:	79fa      	ldrb	r2, [r7, #7]
 80035b2:	4923      	ldr	r1, [pc, #140]	; (8003640 <Channel_Output+0xbc>)
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	3301      	adds	r3, #1
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	f083 0301 	eor.w	r3, r3, #1
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <Channel_Output+0x4e>
 80035cc:	79bb      	ldrb	r3, [r7, #6]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d12d      	bne.n	800362e <Channel_Output+0xaa>

	ChannelsStatus[channel].output = output;
 80035d2:	79fa      	ldrb	r2, [r7, #7]
 80035d4:	4919      	ldr	r1, [pc, #100]	; (800363c <Channel_Output+0xb8>)
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	3305      	adds	r3, #5
 80035e2:	79ba      	ldrb	r2, [r7, #6]
 80035e4:	701a      	strb	r2, [r3, #0]

	if(ChannelsStatus[channel].polarity == polarity_positive)
 80035e6:	79fa      	ldrb	r2, [r7, #7]
 80035e8:	4914      	ldr	r1, [pc, #80]	; (800363c <Channel_Output+0xb8>)
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	3304      	adds	r3, #4
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d106      	bne.n	800360a <Channel_Output+0x86>
	{
		Output_GPIO(channel, output, false);
 80035fc:	79b9      	ldrb	r1, [r7, #6]
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	2200      	movs	r2, #0
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff f862 	bl	80026cc <Output_GPIO>
 8003608:	e012      	b.n	8003630 <Channel_Output+0xac>
	}
	else if(ChannelsStatus[channel].polarity == polarity_negative)
 800360a:	79fa      	ldrb	r2, [r7, #7]
 800360c:	490b      	ldr	r1, [pc, #44]	; (800363c <Channel_Output+0xb8>)
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	3304      	adds	r3, #4
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d107      	bne.n	8003630 <Channel_Output+0xac>
	{
		Output_GPIO(channel, false, output);
 8003620:	79ba      	ldrb	r2, [r7, #6]
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	2100      	movs	r1, #0
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff f850 	bl	80026cc <Output_GPIO>
 800362c:	e000      	b.n	8003630 <Channel_Output+0xac>
	if(MainParams.ControlOutputWithChannelEnable && ChannelsStatus[channel].enable && !ChannelsChange[channel].enable_request && output) return; // vystup nejde zapnout, kdyz je kanál zapnutý
 800362e:	bf00      	nop
	}
}
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20001aa0 	.word	0x20001aa0
 800363c:	200019dc 	.word	0x200019dc
 8003640:	20001a18 	.word	0x20001a18

08003644 <ChannelControl>:
 *
 * @param channel -> Channel of power supply (0,1,2)
 * 
 */
void ChannelControl(uint8_t channel)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	71fb      	strb	r3, [r7, #7]
	//voltage ramping
	if(ChannelsChange[channel].voltage_ramp)
 800364e:	79fa      	ldrb	r2, [r7, #7]
 8003650:	4982      	ldr	r1, [pc, #520]	; (800385c <ChannelControl+0x218>)
 8003652:	4613      	mov	r3, r2
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	4413      	add	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d012      	beq.n	8003688 <ChannelControl+0x44>
	{
		if((HAL_GetTick()-ChannelsChange[channel].voltage_ramp_timer) >= ramp_t_step)
 8003662:	f002 f917 	bl	8005894 <HAL_GetTick>
 8003666:	4601      	mov	r1, r0
 8003668:	79fa      	ldrb	r2, [r7, #7]
 800366a:	487c      	ldr	r0, [pc, #496]	; (800385c <ChannelControl+0x218>)
 800366c:	4613      	mov	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4403      	add	r3, r0
 8003676:	3308      	adds	r3, #8
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	1acb      	subs	r3, r1, r3
 800367c:	2b63      	cmp	r3, #99	; 0x63
 800367e:	d903      	bls.n	8003688 <ChannelControl+0x44>
		{
			Set_Voltage_From_Ramping(channel);
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff fc7a 	bl	8002f7c <Set_Voltage_From_Ramping>
		}
	}

	//enable control
	if(ChannelsChange[channel].enable_request)
 8003688:	79fa      	ldrb	r2, [r7, #7]
 800368a:	4974      	ldr	r1, [pc, #464]	; (800385c <ChannelControl+0x218>)
 800368c:	4613      	mov	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4413      	add	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	3301      	adds	r3, #1
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d02b      	beq.n	80036f6 <ChannelControl+0xb2>
	{
		if((HAL_GetTick()-ChannelsChange[channel].enable_timer) >= delay_enable)
 800369e:	f002 f8f9 	bl	8005894 <HAL_GetTick>
 80036a2:	4601      	mov	r1, r0
 80036a4:	79fa      	ldrb	r2, [r7, #7]
 80036a6:	486d      	ldr	r0, [pc, #436]	; (800385c <ChannelControl+0x218>)
 80036a8:	4613      	mov	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4413      	add	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4403      	add	r3, r0
 80036b2:	330c      	adds	r3, #12
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	1acb      	subs	r3, r1, r3
 80036b8:	2bc7      	cmp	r3, #199	; 0xc7
 80036ba:	d91c      	bls.n	80036f6 <ChannelControl+0xb2>
		{
			ChannelsChange[channel].enable_request = false;
 80036bc:	79fa      	ldrb	r2, [r7, #7]
 80036be:	4967      	ldr	r1, [pc, #412]	; (800385c <ChannelControl+0x218>)
 80036c0:	4613      	mov	r3, r2
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	3301      	adds	r3, #1
 80036cc:	2200      	movs	r2, #0
 80036ce:	701a      	strb	r2, [r3, #0]
			Enable_GPIO(channel, true);
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	2101      	movs	r1, #1
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fe ffc7 	bl	8002668 <Enable_GPIO>
			//nastavit napeti
			Set_Voltage(channel, ChannelsChange[channel].request_voltage );
 80036da:	79fa      	ldrb	r2, [r7, #7]
 80036dc:	495f      	ldr	r1, [pc, #380]	; (800385c <ChannelControl+0x218>)
 80036de:	4613      	mov	r3, r2
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4413      	add	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	3320      	adds	r3, #32
 80036ea:	881a      	ldrh	r2, [r3, #0]
 80036ec:	79fb      	ldrb	r3, [r7, #7]
 80036ee:	4611      	mov	r1, r2
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff fb23 	bl	8002d3c <Set_Voltage>
		}
	}

	//polarity change control
	if(ChannelsChange[channel].polarity_request)
 80036f6:	79fa      	ldrb	r2, [r7, #7]
 80036f8:	4958      	ldr	r1, [pc, #352]	; (800385c <ChannelControl+0x218>)
 80036fa:	4613      	mov	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	3302      	adds	r3, #2
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d045      	beq.n	8003798 <ChannelControl+0x154>
	{
		if((HAL_GetTick()-ChannelsChange[channel].polarity_timer) >= delay_polarity)
 800370c:	f002 f8c2 	bl	8005894 <HAL_GetTick>
 8003710:	4601      	mov	r1, r0
 8003712:	79fa      	ldrb	r2, [r7, #7]
 8003714:	4851      	ldr	r0, [pc, #324]	; (800385c <ChannelControl+0x218>)
 8003716:	4613      	mov	r3, r2
 8003718:	00db      	lsls	r3, r3, #3
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4403      	add	r3, r0
 8003720:	3310      	adds	r3, #16
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	1acb      	subs	r3, r1, r3
 8003726:	2bc7      	cmp	r3, #199	; 0xc7
 8003728:	d936      	bls.n	8003798 <ChannelControl+0x154>
		{
			ChannelsChange[channel].polarity_request = false;
 800372a:	79fa      	ldrb	r2, [r7, #7]
 800372c:	494b      	ldr	r1, [pc, #300]	; (800385c <ChannelControl+0x218>)
 800372e:	4613      	mov	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	3302      	adds	r3, #2
 800373a:	2200      	movs	r2, #0
 800373c:	701a      	strb	r2, [r3, #0]
			bool output = ChannelsStatus[channel].output;
 800373e:	79fa      	ldrb	r2, [r7, #7]
 8003740:	4947      	ldr	r1, [pc, #284]	; (8003860 <ChannelControl+0x21c>)
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	440b      	add	r3, r1
 800374c:	3305      	adds	r3, #5
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	73fb      	strb	r3, [r7, #15]

			if(ChannelsStatus[channel].polarity == polarity_positive)
 8003752:	79fa      	ldrb	r2, [r7, #7]
 8003754:	4942      	ldr	r1, [pc, #264]	; (8003860 <ChannelControl+0x21c>)
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	3304      	adds	r3, #4
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d106      	bne.n	8003776 <ChannelControl+0x132>
			{
				Output_GPIO(channel, output, false);
 8003768:	7bf9      	ldrb	r1, [r7, #15]
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	2200      	movs	r2, #0
 800376e:	4618      	mov	r0, r3
 8003770:	f7fe ffac 	bl	80026cc <Output_GPIO>
 8003774:	e010      	b.n	8003798 <ChannelControl+0x154>
			}
			else if(ChannelsStatus[channel].polarity == polarity_negative)
 8003776:	79fa      	ldrb	r2, [r7, #7]
 8003778:	4939      	ldr	r1, [pc, #228]	; (8003860 <ChannelControl+0x21c>)
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	3304      	adds	r3, #4
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d105      	bne.n	8003798 <ChannelControl+0x154>
			{
				Output_GPIO(channel, false, output);
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	2100      	movs	r1, #0
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe ff9a 	bl	80026cc <Output_GPIO>

		}
	}

	//restart channel
	if(ChannelsChange[channel].restart_request)
 8003798:	79fa      	ldrb	r2, [r7, #7]
 800379a:	4930      	ldr	r1, [pc, #192]	; (800385c <ChannelControl+0x218>)
 800379c:	4613      	mov	r3, r2
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	3303      	adds	r3, #3
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d028      	beq.n	8003800 <ChannelControl+0x1bc>
	{
		if((HAL_GetTick()-ChannelsChange[channel].restart_timer) >= delay_restart)
 80037ae:	f002 f871 	bl	8005894 <HAL_GetTick>
 80037b2:	4601      	mov	r1, r0
 80037b4:	79fa      	ldrb	r2, [r7, #7]
 80037b6:	4829      	ldr	r0, [pc, #164]	; (800385c <ChannelControl+0x218>)
 80037b8:	4613      	mov	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4403      	add	r3, r0
 80037c2:	3314      	adds	r3, #20
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	1acb      	subs	r3, r1, r3
 80037c8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d917      	bls.n	8003800 <ChannelControl+0x1bc>
		{
			//ChannelsChange[channel].restart_request = false;
			//ChannelsChange[channel].restarts_counter++;
			ChannelsChange[channel].restarts_counter++;
 80037d0:	79fa      	ldrb	r2, [r7, #7]
 80037d2:	4922      	ldr	r1, [pc, #136]	; (800385c <ChannelControl+0x218>)
 80037d4:	4613      	mov	r3, r2
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	3318      	adds	r3, #24
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	3301      	adds	r3, #1
 80037e4:	b2d8      	uxtb	r0, r3
 80037e6:	491d      	ldr	r1, [pc, #116]	; (800385c <ChannelControl+0x218>)
 80037e8:	4613      	mov	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	3318      	adds	r3, #24
 80037f4:	4602      	mov	r2, r0
 80037f6:	701a      	strb	r2, [r3, #0]
			Channel_Enable_fromRestart(channel);
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff fdf2 	bl	80033e4 <Channel_Enable_fromRestart>

		}
	}

	if(ChannelsChange[channel].regStart_req)
 8003800:	79fa      	ldrb	r2, [r7, #7]
 8003802:	4916      	ldr	r1, [pc, #88]	; (800385c <ChannelControl+0x218>)
 8003804:	4613      	mov	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	3304      	adds	r3, #4
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d01d      	beq.n	8003852 <ChannelControl+0x20e>
	{
		if((HAL_GetTick()-ChannelsChange[channel].regStart_timer) >= regStart_Time)
 8003816:	f002 f83d 	bl	8005894 <HAL_GetTick>
 800381a:	4601      	mov	r1, r0
 800381c:	79fa      	ldrb	r2, [r7, #7]
 800381e:	480f      	ldr	r0, [pc, #60]	; (800385c <ChannelControl+0x218>)
 8003820:	4613      	mov	r3, r2
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4413      	add	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4403      	add	r3, r0
 800382a:	331c      	adds	r3, #28
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	1acb      	subs	r3, r1, r3
 8003830:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003834:	d30d      	bcc.n	8003852 <ChannelControl+0x20e>
		{
			ChannelsChange[channel].regStart_req = false;
 8003836:	79fa      	ldrb	r2, [r7, #7]
 8003838:	4908      	ldr	r1, [pc, #32]	; (800385c <ChannelControl+0x218>)
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	3304      	adds	r3, #4
 8003846:	2200      	movs	r2, #0
 8003848:	701a      	strb	r2, [r3, #0]
			AdaptiveVoltageTune_Start(channel);
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	4618      	mov	r0, r3
 800384e:	f000 f961 	bl	8003b14 <AdaptiveVoltageTune_Start>
		}
	}

}
 8003852:	bf00      	nop
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20001a18 	.word	0x20001a18
 8003860:	200019dc 	.word	0x200019dc

08003864 <Get_ChannelVoltage>:
 *
 * @param channel -> Channel of power supply (0,1,2)
 * 
 */
void Get_ChannelVoltage(uint8_t channel)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	4603      	mov	r3, r0
 800386c:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <Get_ChannelVoltage+0x1c>
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d002      	beq.n	8003880 <Get_ChannelVoltage+0x1c>
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d112      	bne.n	80038a6 <Get_ChannelVoltage+0x42>

	//SendCommunication(cmd_get_voltage_CH1 + channel, ChannelsStatus[channel].voltage_measurement*100);
	SendCommunication_float(cmd_get_voltage_CH1 + channel, ChannelsStatus[channel].voltage_measurement);
 8003880:	79fb      	ldrb	r3, [r7, #7]
 8003882:	330e      	adds	r3, #14
 8003884:	b2d9      	uxtb	r1, r3
 8003886:	79fa      	ldrb	r2, [r7, #7]
 8003888:	4809      	ldr	r0, [pc, #36]	; (80038b0 <Get_ChannelVoltage+0x4c>)
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4403      	add	r3, r0
 8003894:	3308      	adds	r3, #8
 8003896:	edd3 7a00 	vldr	s15, [r3]
 800389a:	eeb0 0a67 	vmov.f32	s0, s15
 800389e:	4608      	mov	r0, r1
 80038a0:	f7fe fa26 	bl	8001cf0 <SendCommunication_float>
 80038a4:	e000      	b.n	80038a8 <Get_ChannelVoltage+0x44>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 80038a6:	bf00      	nop
}
 80038a8:	3708      	adds	r7, #8
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	200019dc 	.word	0x200019dc

080038b4 <Get_ChannelCurrent>:
 *
 * @param channel -> Channel of power supply (0,1,2)
 * 
 */
void Get_ChannelCurrent(uint8_t channel)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 80038be:	79fb      	ldrb	r3, [r7, #7]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d005      	beq.n	80038d0 <Get_ChannelCurrent+0x1c>
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d002      	beq.n	80038d0 <Get_ChannelCurrent+0x1c>
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d112      	bne.n	80038f6 <Get_ChannelCurrent+0x42>

	//SendCommunication(cmd_get_current_CH1 + channel, ChannelsStatus[channel].current_measurement*1000);
	SendCommunication_float(cmd_get_current_CH1 + channel, ChannelsStatus[channel].current_measurement);
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	3311      	adds	r3, #17
 80038d4:	b2d9      	uxtb	r1, r3
 80038d6:	79fa      	ldrb	r2, [r7, #7]
 80038d8:	4809      	ldr	r0, [pc, #36]	; (8003900 <Get_ChannelCurrent+0x4c>)
 80038da:	4613      	mov	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4403      	add	r3, r0
 80038e4:	330c      	adds	r3, #12
 80038e6:	edd3 7a00 	vldr	s15, [r3]
 80038ea:	eeb0 0a67 	vmov.f32	s0, s15
 80038ee:	4608      	mov	r0, r1
 80038f0:	f7fe f9fe 	bl	8001cf0 <SendCommunication_float>
 80038f4:	e000      	b.n	80038f8 <Get_ChannelCurrent+0x44>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 80038f6:	bf00      	nop
}
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	200019dc 	.word	0x200019dc

08003904 <Get_ErrorSignals>:

void Get_ErrorSignals()
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
	uint8_t error_reg = 0;
 800390a:	2300      	movs	r3, #0
 800390c:	71fb      	strb	r3, [r7, #7]

	error_reg |= ChannelsStatus[0].power_good << 0;
 800390e:	4b20      	ldr	r3, [pc, #128]	; (8003990 <Get_ErrorSignals+0x8c>)
 8003910:	7c5b      	ldrb	r3, [r3, #17]
 8003912:	461a      	mov	r2, r3
 8003914:	79fb      	ldrb	r3, [r7, #7]
 8003916:	4313      	orrs	r3, r2
 8003918:	71fb      	strb	r3, [r7, #7]
	error_reg |= ChannelsStatus[1].power_good << 1;
 800391a:	4b1d      	ldr	r3, [pc, #116]	; (8003990 <Get_ErrorSignals+0x8c>)
 800391c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	b25a      	sxtb	r2, r3
 8003924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003928:	4313      	orrs	r3, r2
 800392a:	b25b      	sxtb	r3, r3
 800392c:	71fb      	strb	r3, [r7, #7]
	error_reg |= ChannelsStatus[2].power_good << 2;
 800392e:	4b18      	ldr	r3, [pc, #96]	; (8003990 <Get_ErrorSignals+0x8c>)
 8003930:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	b25a      	sxtb	r2, r3
 8003938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393c:	4313      	orrs	r3, r2
 800393e:	b25b      	sxtb	r3, r3
 8003940:	71fb      	strb	r3, [r7, #7]

	error_reg |= ChannelsStatus[0].over_current << 3;
 8003942:	4b13      	ldr	r3, [pc, #76]	; (8003990 <Get_ErrorSignals+0x8c>)
 8003944:	7c1b      	ldrb	r3, [r3, #16]
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	b25a      	sxtb	r2, r3
 800394a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394e:	4313      	orrs	r3, r2
 8003950:	b25b      	sxtb	r3, r3
 8003952:	71fb      	strb	r3, [r7, #7]
	error_reg |= ChannelsStatus[1].over_current << 4;
 8003954:	4b0e      	ldr	r3, [pc, #56]	; (8003990 <Get_ErrorSignals+0x8c>)
 8003956:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	b25a      	sxtb	r2, r3
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	4313      	orrs	r3, r2
 8003964:	b25b      	sxtb	r3, r3
 8003966:	71fb      	strb	r3, [r7, #7]
	error_reg |= ChannelsStatus[2].over_current << 5;
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <Get_ErrorSignals+0x8c>)
 800396a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800396e:	015b      	lsls	r3, r3, #5
 8003970:	b25a      	sxtb	r2, r3
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	4313      	orrs	r3, r2
 8003978:	b25b      	sxtb	r3, r3
 800397a:	71fb      	strb	r3, [r7, #7]

	SendCommunication(cmd_error_signals, error_reg);
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	4619      	mov	r1, r3
 8003980:	2014      	movs	r0, #20
 8003982:	f7fe f961 	bl	8001c48 <SendCommunication>
}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	200019dc 	.word	0x200019dc

08003994 <Get_AllMeasurement>:
/* @brief Send by communication all measured value, all voltages and currents
 *
 * 
 */
void Get_AllMeasurement()
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
	Get_ChannelVoltage(0);
 8003998:	2000      	movs	r0, #0
 800399a:	f7ff ff63 	bl	8003864 <Get_ChannelVoltage>
	Get_ChannelVoltage(1);
 800399e:	2001      	movs	r0, #1
 80039a0:	f7ff ff60 	bl	8003864 <Get_ChannelVoltage>
	Get_ChannelVoltage(2);
 80039a4:	2002      	movs	r0, #2
 80039a6:	f7ff ff5d 	bl	8003864 <Get_ChannelVoltage>
	Get_ChannelCurrent(0);
 80039aa:	2000      	movs	r0, #0
 80039ac:	f7ff ff82 	bl	80038b4 <Get_ChannelCurrent>
	Get_ChannelCurrent(1);
 80039b0:	2001      	movs	r0, #1
 80039b2:	f7ff ff7f 	bl	80038b4 <Get_ChannelCurrent>
	Get_ChannelCurrent(2);
 80039b6:	2002      	movs	r0, #2
 80039b8:	f7ff ff7c 	bl	80038b4 <Get_ChannelCurrent>

	Get_ErrorSignals();
 80039bc:	f7ff ffa2 	bl	8003904 <Get_ErrorSignals>
}
 80039c0:	bf00      	nop
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <Get_Setting>:
/* @brief Send by communication setting of power supply
 *
 * 
 */
void Get_Setting()
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
	SendCommunication(cmd_set_voltage_CH1, ChannelsChange[0].request_voltage);
 80039c8:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <Get_Setting+0xb0>)
 80039ca:	8c1b      	ldrh	r3, [r3, #32]
 80039cc:	4619      	mov	r1, r3
 80039ce:	2008      	movs	r0, #8
 80039d0:	f7fe f93a 	bl	8001c48 <SendCommunication>
	SendCommunication(cmd_set_voltage_CH2, ChannelsChange[1].request_voltage);
 80039d4:	4b27      	ldr	r3, [pc, #156]	; (8003a74 <Get_Setting+0xb0>)
 80039d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039da:	4619      	mov	r1, r3
 80039dc:	2009      	movs	r0, #9
 80039de:	f7fe f933 	bl	8001c48 <SendCommunication>
	SendCommunication(cmd_set_voltage_CH3, ChannelsChange[2].request_voltage);
 80039e2:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <Get_Setting+0xb0>)
 80039e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80039e8:	4619      	mov	r1, r3
 80039ea:	200a      	movs	r0, #10
 80039ec:	f7fe f92c 	bl	8001c48 <SendCommunication>

	//SendCommunication(cmd_set_voltage_CH1,ChannelsStatus[0].set_voltage);
	//SendCommunication(cmd_set_voltage_CH2,ChannelsStatus[1].set_voltage);
	//SendCommunication(cmd_set_voltage_CH3,ChannelsStatus[2].set_voltage);

	SendCommunication(cmd_enable_CH1, ChannelsStatus[0].enable);
 80039f0:	4b21      	ldr	r3, [pc, #132]	; (8003a78 <Get_Setting+0xb4>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	4619      	mov	r1, r3
 80039f6:	2002      	movs	r0, #2
 80039f8:	f7fe f926 	bl	8001c48 <SendCommunication>
	SendCommunication(cmd_enable_CH2, ChannelsStatus[1].enable);
 80039fc:	4b1e      	ldr	r3, [pc, #120]	; (8003a78 <Get_Setting+0xb4>)
 80039fe:	7d1b      	ldrb	r3, [r3, #20]
 8003a00:	4619      	mov	r1, r3
 8003a02:	2003      	movs	r0, #3
 8003a04:	f7fe f920 	bl	8001c48 <SendCommunication>
	SendCommunication(cmd_enable_CH3, ChannelsStatus[2].enable);
 8003a08:	4b1b      	ldr	r3, [pc, #108]	; (8003a78 <Get_Setting+0xb4>)
 8003a0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a0e:	4619      	mov	r1, r3
 8003a10:	2004      	movs	r0, #4
 8003a12:	f7fe f919 	bl	8001c48 <SendCommunication>

	SendCommunication(cmd_polarity_CH1, ChannelsStatus[0].polarity + 1);
 8003a16:	4b18      	ldr	r3, [pc, #96]	; (8003a78 <Get_Setting+0xb4>)
 8003a18:	791b      	ldrb	r3, [r3, #4]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	200b      	movs	r0, #11
 8003a20:	f7fe f912 	bl	8001c48 <SendCommunication>
	SendCommunication(cmd_polarity_CH2, ChannelsStatus[1].polarity + 1);
 8003a24:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <Get_Setting+0xb4>)
 8003a26:	7e1b      	ldrb	r3, [r3, #24]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	200c      	movs	r0, #12
 8003a2e:	f7fe f90b 	bl	8001c48 <SendCommunication>
	SendCommunication(cmd_polarity_CH3, ChannelsStatus[2].polarity + 1);
 8003a32:	4b11      	ldr	r3, [pc, #68]	; (8003a78 <Get_Setting+0xb4>)
 8003a34:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003a38:	3301      	adds	r3, #1
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	200d      	movs	r0, #13
 8003a3e:	f7fe f903 	bl	8001c48 <SendCommunication>

	SendCommunication(cmd_output_CH1, ChannelsStatus[0].output);
 8003a42:	4b0d      	ldr	r3, [pc, #52]	; (8003a78 <Get_Setting+0xb4>)
 8003a44:	795b      	ldrb	r3, [r3, #5]
 8003a46:	4619      	mov	r1, r3
 8003a48:	2005      	movs	r0, #5
 8003a4a:	f7fe f8fd 	bl	8001c48 <SendCommunication>
	SendCommunication(cmd_output_CH2, ChannelsStatus[1].output);
 8003a4e:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <Get_Setting+0xb4>)
 8003a50:	7e5b      	ldrb	r3, [r3, #25]
 8003a52:	4619      	mov	r1, r3
 8003a54:	2006      	movs	r0, #6
 8003a56:	f7fe f8f7 	bl	8001c48 <SendCommunication>
	SendCommunication(cmd_output_CH3, ChannelsStatus[2].output);
 8003a5a:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <Get_Setting+0xb4>)
 8003a5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003a60:	4619      	mov	r1, r3
 8003a62:	2007      	movs	r0, #7
 8003a64:	f7fe f8f0 	bl	8001c48 <SendCommunication>

	SendCommunication(cmd_thats_all, 1);
 8003a68:	2101      	movs	r1, #1
 8003a6a:	2017      	movs	r0, #23
 8003a6c:	f7fe f8ec 	bl	8001c48 <SendCommunication>
}
 8003a70:	bf00      	nop
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	20001a18 	.word	0x20001a18
 8003a78:	200019dc 	.word	0x200019dc

08003a7c <Get_State_err>:

void Get_State_err()
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0

	for(int i = 0; i <3; i++)
 8003a82:	2300      	movs	r3, #0
 8003a84:	607b      	str	r3, [r7, #4]
 8003a86:	e028      	b.n	8003ada <Get_State_err+0x5e>
	{
		uint8_t err_state = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	70fb      	strb	r3, [r7, #3]

		if(ChannelsStatus[i].disableInError)//kanal byl vypnut z erroru
 8003a8c:	4917      	ldr	r1, [pc, #92]	; (8003aec <Get_State_err+0x70>)
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	3312      	adds	r3, #18
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <Get_State_err+0x2c>
		{
			err_state = 1;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	70fb      	strb	r3, [r7, #3]
 8003aa6:	e00c      	b.n	8003ac2 <Get_State_err+0x46>
		}
		else if(ChannelsChange[i].restart_request) //kanal se restartuje
 8003aa8:	4911      	ldr	r1, [pc, #68]	; (8003af0 <Get_State_err+0x74>)
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	4613      	mov	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	3303      	adds	r3, #3
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <Get_State_err+0x46>
		{
			err_state = 2;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	70fb      	strb	r3, [r7, #3]
		}

		SendCommunication(cmd_ch1_get_err_state + i, err_state);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	3353      	adds	r3, #83	; 0x53
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	78fa      	ldrb	r2, [r7, #3]
 8003acc:	4611      	mov	r1, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe f8ba 	bl	8001c48 <SendCommunication>
	for(int i = 0; i <3; i++)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	607b      	str	r3, [r7, #4]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	ddd3      	ble.n	8003a88 <Get_State_err+0xc>
	}

}
 8003ae0:	bf00      	nop
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	200019dc 	.word	0x200019dc
 8003af0:	20001a18 	.word	0x20001a18

08003af4 <System_Reset>:
/* @brief reset MCU
 *
 *
 */
void System_Reset()
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003af8:	f3bf 8f4f 	dsb	sy
}
 8003afc:	bf00      	nop
	__DSB();
	SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) | (SCB_AIRCR_SYSRESETREQ_Msk));
 8003afe:	4b03      	ldr	r3, [pc, #12]	; (8003b0c <System_Reset+0x18>)
 8003b00:	4a03      	ldr	r2, [pc, #12]	; (8003b10 <System_Reset+0x1c>)
 8003b02:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b04:	f3bf 8f4f 	dsb	sy
}
 8003b08:	bf00      	nop
	__DSB();
	while(1);
 8003b0a:	e7fe      	b.n	8003b0a <System_Reset+0x16>
 8003b0c:	e000ed00 	.word	0xe000ed00
 8003b10:	05fa0004 	.word	0x05fa0004

08003b14 <AdaptiveVoltageTune_Start>:
}



void AdaptiveVoltageTune_Start(int channel)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
	addSetVoltage[channel] = 0;
 8003b1c:	4a08      	ldr	r2, [pc, #32]	; (8003b40 <AdaptiveVoltageTune_Start+0x2c>)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
	adaptiveVoltRequest[channel] = true;
 8003b2a:	4a06      	ldr	r2, [pc, #24]	; (8003b44 <AdaptiveVoltageTune_Start+0x30>)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4413      	add	r3, r2
 8003b30:	2201      	movs	r2, #1
 8003b32:	701a      	strb	r2, [r3, #0]
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	20001a90 	.word	0x20001a90
 8003b44:	20001a9c 	.word	0x20001a9c

08003b48 <AdaptiveVoltageTune>:

void AdaptiveVoltageTune(int channel)
{
 8003b48:	b590      	push	{r4, r7, lr}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
	if(ChannelsChange[channel].voltage_ramp == true || ChannelsStatus[channel].enable == false)
 8003b50:	4974      	ldr	r1, [pc, #464]	; (8003d24 <AdaptiveVoltageTune+0x1dc>)
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	4613      	mov	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	4413      	add	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f040 80d9 	bne.w	8003d18 <AdaptiveVoltageTune+0x1d0>
 8003b66:	4970      	ldr	r1, [pc, #448]	; (8003d28 <AdaptiveVoltageTune+0x1e0>)
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	f083 0301 	eor.w	r3, r3, #1
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f040 80cb 	bne.w	8003d18 <AdaptiveVoltageTune+0x1d0>
	{
		return;
	}


	float measVoltage = ChannelsStatus[channel].voltage_measurement;
 8003b82:	4969      	ldr	r1, [pc, #420]	; (8003d28 <AdaptiveVoltageTune+0x1e0>)
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	3308      	adds	r3, #8
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	617b      	str	r3, [r7, #20]
	uint16_t setVoltage = ChannelsStatus[channel].set_voltage;
 8003b96:	4964      	ldr	r1, [pc, #400]	; (8003d28 <AdaptiveVoltageTune+0x1e0>)
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	881b      	ldrh	r3, [r3, #0]
 8003ba8:	827b      	strh	r3, [r7, #18]

	AdaptiveDiff[channel] = measVoltage - (float)setVoltage;
 8003baa:	8a7b      	ldrh	r3, [r7, #18]
 8003bac:	ee07 3a90 	vmov	s15, r3
 8003bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb4:	ed97 7a05 	vldr	s14, [r7, #20]
 8003bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bbc:	4a5b      	ldr	r2, [pc, #364]	; (8003d2c <AdaptiveVoltageTune+0x1e4>)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	edc3 7a00 	vstr	s15, [r3]

	if(abs(AdaptiveDiff[channel] > 2))
 8003bc8:	4a58      	ldr	r2, [pc, #352]	; (8003d2c <AdaptiveVoltageTune+0x1e4>)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	4413      	add	r3, r2
 8003bd0:	edd3 7a00 	vldr	s15, [r3]
 8003bd4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be0:	dd04      	ble.n	8003bec <AdaptiveVoltageTune+0xa4>
	{
		adaptiveVoltRequest[channel] = true;
 8003be2:	4a53      	ldr	r2, [pc, #332]	; (8003d30 <AdaptiveVoltageTune+0x1e8>)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4413      	add	r3, r2
 8003be8:	2201      	movs	r2, #1
 8003bea:	701a      	strb	r2, [r3, #0]
	}

	if(adaptiveVoltRequest[channel] == false) return;
 8003bec:	4a50      	ldr	r2, [pc, #320]	; (8003d30 <AdaptiveVoltageTune+0x1e8>)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	f083 0301 	eor.w	r3, r3, #1
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f040 808e 	bne.w	8003d1c <AdaptiveVoltageTune+0x1d4>

	if(AdaptiveDiff[channel] > 0.50)
 8003c00:	4a4a      	ldr	r2, [pc, #296]	; (8003d2c <AdaptiveVoltageTune+0x1e4>)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	edd3 7a00 	vldr	s15, [r3]
 8003c0c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c18:	dd33      	ble.n	8003c82 <AdaptiveVoltageTune+0x13a>
	{
		addSetVoltage[channel] -= 0.25;
 8003c1a:	4a46      	ldr	r2, [pc, #280]	; (8003d34 <AdaptiveVoltageTune+0x1ec>)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	edd3 7a00 	vldr	s15, [r3]
 8003c26:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8003c2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c2e:	4a41      	ldr	r2, [pc, #260]	; (8003d34 <AdaptiveVoltageTune+0x1ec>)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	edc3 7a00 	vstr	s15, [r3]

		uint16_t voltage = setVoltage + addSetVoltage[channel];
 8003c3a:	8a7b      	ldrh	r3, [r7, #18]
 8003c3c:	ee07 3a90 	vmov	s15, r3
 8003c40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c44:	4a3b      	ldr	r2, [pc, #236]	; (8003d34 <AdaptiveVoltageTune+0x1ec>)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	edd3 7a00 	vldr	s15, [r3]
 8003c50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c58:	ee17 3a90 	vmov	r3, s15
 8003c5c:	823b      	strh	r3, [r7, #16]

		Set_OutReg_Voltage(channel, voltage);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	8a3a      	ldrh	r2, [r7, #16]
 8003c64:	4611      	mov	r1, r2
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe fffa 	bl	8002c60 <Set_OutReg_Voltage>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(voltage));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	b2dc      	uxtb	r4, r3
 8003c70:	8a3b      	ldrh	r3, [r7, #16]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe feb8 	bl	80029e8 <Get_PreRegulatorVoltage>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	f7fe ffc1 	bl	8002c04 <Set_PreReg_Voltage>
	}
	if(AdaptiveDiff[channel] < -0.50)
 8003c82:	4a2a      	ldr	r2, [pc, #168]	; (8003d2c <AdaptiveVoltageTune+0x1e4>)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	edd3 7a00 	vldr	s15, [r3]
 8003c8e:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8003c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c9a:	d537      	bpl.n	8003d0c <AdaptiveVoltageTune+0x1c4>
	{
		addSetVoltage[channel] += 0.25;
 8003c9c:	4a25      	ldr	r2, [pc, #148]	; (8003d34 <AdaptiveVoltageTune+0x1ec>)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	edd3 7a00 	vldr	s15, [r3]
 8003ca8:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8003cac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003cb0:	4a20      	ldr	r2, [pc, #128]	; (8003d34 <AdaptiveVoltageTune+0x1ec>)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	edc3 7a00 	vstr	s15, [r3]

		float voltage = setVoltage + addSetVoltage[channel];
 8003cbc:	8a7b      	ldrh	r3, [r7, #18]
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cc6:	4a1b      	ldr	r2, [pc, #108]	; (8003d34 <AdaptiveVoltageTune+0x1ec>)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	edd3 7a00 	vldr	s15, [r3]
 8003cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cd6:	edc7 7a03 	vstr	s15, [r7, #12]

		Set_OutReg_Voltage_F(channel, voltage);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	ed97 0a03 	vldr	s0, [r7, #12]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fe ffee 	bl	8002cc4 <Set_OutReg_Voltage_F>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(voltage));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	b2dc      	uxtb	r4, r3
 8003cec:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cf4:	ee17 3a90 	vmov	r3, s15
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fe fe74 	bl	80029e8 <Get_PreRegulatorVoltage>
 8003d00:	4603      	mov	r3, r0
 8003d02:	4619      	mov	r1, r3
 8003d04:	4620      	mov	r0, r4
 8003d06:	f7fe ff7d 	bl	8002c04 <Set_PreReg_Voltage>
 8003d0a:	e008      	b.n	8003d1e <AdaptiveVoltageTune+0x1d6>
	}
	else
	{
		adaptiveVoltRequest[channel] = false;
 8003d0c:	4a08      	ldr	r2, [pc, #32]	; (8003d30 <AdaptiveVoltageTune+0x1e8>)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4413      	add	r3, r2
 8003d12:	2200      	movs	r2, #0
 8003d14:	701a      	strb	r2, [r3, #0]
 8003d16:	e002      	b.n	8003d1e <AdaptiveVoltageTune+0x1d6>
		return;
 8003d18:	bf00      	nop
 8003d1a:	e000      	b.n	8003d1e <AdaptiveVoltageTune+0x1d6>
	if(adaptiveVoltRequest[channel] == false) return;
 8003d1c:	bf00      	nop
	}


}
 8003d1e:	371c      	adds	r7, #28
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd90      	pop	{r4, r7, pc}
 8003d24:	20001a18 	.word	0x20001a18
 8003d28:	200019dc 	.word	0x200019dc
 8003d2c:	20001a84 	.word	0x20001a84
 8003d30:	20001a9c 	.word	0x20001a9c
 8003d34:	20001a90 	.word	0x20001a90

08003d38 <MakeUint32FromFloat>:
FlashSectorParams MainParams;
FlashSectorParams DefaultParams;


uint32_t MakeUint32FromFloat(float value)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
	uint32_t x;
	memcpy(&x,&value,sizeof(x));
 8003d44:	60fb      	str	r3, [r7, #12]

	return x;
 8003d46:	68fb      	ldr	r3, [r7, #12]
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <ParamsDefaultValues>:



void ParamsDefaultValues()
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	af00      	add	r7, sp, #0

	DefaultParams.StoreControl_0 = 0;
 8003d58:	4b52      	ldr	r3, [pc, #328]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
	DefaultParams.StoreControl_1 = 0;
 8003d5e:	4b51      	ldr	r3, [pc, #324]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	605a      	str	r2, [r3, #4]


	DefaultParams.MAC_aadress_1_3MSB = mac_MAKEU32(0xAD,0xCF,0xE8);
 8003d64:	4b4f      	ldr	r3, [pc, #316]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003d66:	4a50      	ldr	r2, [pc, #320]	; (8003ea8 <ParamsDefaultValues+0x154>)
 8003d68:	609a      	str	r2, [r3, #8]
	DefaultParams.MAC_aadress_2_3LSB = mac_MAKEU32(0xA5,0xDF,0xFF);
 8003d6a:	4b4e      	ldr	r3, [pc, #312]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003d6c:	4a4f      	ldr	r2, [pc, #316]	; (8003eac <ParamsDefaultValues+0x158>)
 8003d6e:	60da      	str	r2, [r3, #12]
	DefaultParams.IP_ADDRESS = ip_MAKEU32(192,168,0,23);
 8003d70:	4b4c      	ldr	r3, [pc, #304]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003d72:	4a4f      	ldr	r2, [pc, #316]	; (8003eb0 <ParamsDefaultValues+0x15c>)
 8003d74:	611a      	str	r2, [r3, #16]
	DefaultParams.NETMASK_ADDRESS = ip_MAKEU32(255,255,255,0);
 8003d76:	4b4b      	ldr	r3, [pc, #300]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003d78:	f06f 02ff 	mvn.w	r2, #255	; 0xff
 8003d7c:	615a      	str	r2, [r3, #20]
	DefaultParams.GATEWAY_ADDRESS = ip_MAKEU32(192,168,0,1);
 8003d7e:	4b49      	ldr	r3, [pc, #292]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003d80:	4a4c      	ldr	r2, [pc, #304]	; (8003eb4 <ParamsDefaultValues+0x160>)
 8003d82:	619a      	str	r2, [r3, #24]
	DefaultParams.UdpRecvPort = 5005;
 8003d84:	4b47      	ldr	r3, [pc, #284]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003d86:	f241 328d 	movw	r2, #5005	; 0x138d
 8003d8a:	61da      	str	r2, [r3, #28]

	DefaultParams.ReadCoef_k_0 = MakeUint32FromFloat(Default_Meas_U_Coef_k);
 8003d8c:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8003eb8 <ParamsDefaultValues+0x164>
 8003d90:	f7ff ffd2 	bl	8003d38 <MakeUint32FromFloat>
 8003d94:	4603      	mov	r3, r0
 8003d96:	4a43      	ldr	r2, [pc, #268]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003d98:	6213      	str	r3, [r2, #32]
	DefaultParams.ReadCoef_k_1 = MakeUint32FromFloat(Default_Meas_U_Coef_k);
 8003d9a:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8003eb8 <ParamsDefaultValues+0x164>
 8003d9e:	f7ff ffcb 	bl	8003d38 <MakeUint32FromFloat>
 8003da2:	4603      	mov	r3, r0
 8003da4:	4a3f      	ldr	r2, [pc, #252]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003da6:	6253      	str	r3, [r2, #36]	; 0x24
	DefaultParams.ReadCoef_k_2 = MakeUint32FromFloat(Default_Meas_U_Coef_k);
 8003da8:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8003eb8 <ParamsDefaultValues+0x164>
 8003dac:	f7ff ffc4 	bl	8003d38 <MakeUint32FromFloat>
 8003db0:	4603      	mov	r3, r0
 8003db2:	4a3c      	ldr	r2, [pc, #240]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003db4:	6293      	str	r3, [r2, #40]	; 0x28
	DefaultParams.ReadCoef_k_3 = MakeUint32FromFloat(Default_Meas_I_Coef_k);
 8003db6:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8003ebc <ParamsDefaultValues+0x168>
 8003dba:	f7ff ffbd 	bl	8003d38 <MakeUint32FromFloat>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	4a38      	ldr	r2, [pc, #224]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003dc2:	62d3      	str	r3, [r2, #44]	; 0x2c
	DefaultParams.ReadCoef_k_4 = MakeUint32FromFloat(Default_Meas_I_Coef_k);
 8003dc4:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8003ebc <ParamsDefaultValues+0x168>
 8003dc8:	f7ff ffb6 	bl	8003d38 <MakeUint32FromFloat>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	4a35      	ldr	r2, [pc, #212]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003dd0:	6313      	str	r3, [r2, #48]	; 0x30
	DefaultParams.ReadCoef_k_5 = MakeUint32FromFloat(Default_Meas_I_Coef_k);
 8003dd2:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8003ebc <ParamsDefaultValues+0x168>
 8003dd6:	f7ff ffaf 	bl	8003d38 <MakeUint32FromFloat>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	4a31      	ldr	r2, [pc, #196]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003dde:	6353      	str	r3, [r2, #52]	; 0x34

	DefaultParams.ReadCoef_q_0 = MakeUint32FromFloat(Default_Meas_U_Coef_q);
 8003de0:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8003ec0 <ParamsDefaultValues+0x16c>
 8003de4:	f7ff ffa8 	bl	8003d38 <MakeUint32FromFloat>
 8003de8:	4603      	mov	r3, r0
 8003dea:	4a2e      	ldr	r2, [pc, #184]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003dec:	6393      	str	r3, [r2, #56]	; 0x38
	DefaultParams.ReadCoef_q_1 = MakeUint32FromFloat(Default_Meas_U_Coef_q);
 8003dee:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8003ec0 <ParamsDefaultValues+0x16c>
 8003df2:	f7ff ffa1 	bl	8003d38 <MakeUint32FromFloat>
 8003df6:	4603      	mov	r3, r0
 8003df8:	4a2a      	ldr	r2, [pc, #168]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003dfa:	63d3      	str	r3, [r2, #60]	; 0x3c
	DefaultParams.ReadCoef_q_2 = MakeUint32FromFloat(Default_Meas_U_Coef_q);
 8003dfc:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8003ec0 <ParamsDefaultValues+0x16c>
 8003e00:	f7ff ff9a 	bl	8003d38 <MakeUint32FromFloat>
 8003e04:	4603      	mov	r3, r0
 8003e06:	4a27      	ldr	r2, [pc, #156]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003e08:	6413      	str	r3, [r2, #64]	; 0x40
	DefaultParams.ReadCoef_q_3 = MakeUint32FromFloat(Default_Meas_I_Coef_q);
 8003e0a:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8003ec4 <ParamsDefaultValues+0x170>
 8003e0e:	f7ff ff93 	bl	8003d38 <MakeUint32FromFloat>
 8003e12:	4603      	mov	r3, r0
 8003e14:	4a23      	ldr	r2, [pc, #140]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003e16:	6453      	str	r3, [r2, #68]	; 0x44
	DefaultParams.ReadCoef_q_4 = MakeUint32FromFloat(Default_Meas_I_Coef_q);
 8003e18:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8003ec4 <ParamsDefaultValues+0x170>
 8003e1c:	f7ff ff8c 	bl	8003d38 <MakeUint32FromFloat>
 8003e20:	4603      	mov	r3, r0
 8003e22:	4a20      	ldr	r2, [pc, #128]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003e24:	6493      	str	r3, [r2, #72]	; 0x48
	DefaultParams.ReadCoef_q_5 = MakeUint32FromFloat(Default_Meas_I_Coef_q);
 8003e26:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8003ec4 <ParamsDefaultValues+0x170>
 8003e2a:	f7ff ff85 	bl	8003d38 <MakeUint32FromFloat>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4a1c      	ldr	r2, [pc, #112]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003e32:	64d3      	str	r3, [r2, #76]	; 0x4c

	DefaultParams.AdjCoef_k_ch0 =  MakeUint32FromFloat(Default_AdjCoef_k);
 8003e34:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8003ec8 <ParamsDefaultValues+0x174>
 8003e38:	f7ff ff7e 	bl	8003d38 <MakeUint32FromFloat>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	4a19      	ldr	r2, [pc, #100]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003e40:	6513      	str	r3, [r2, #80]	; 0x50
	DefaultParams.AdjCoef_k_ch1  =  MakeUint32FromFloat(Default_AdjCoef_k);
 8003e42:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8003ec8 <ParamsDefaultValues+0x174>
 8003e46:	f7ff ff77 	bl	8003d38 <MakeUint32FromFloat>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	4a15      	ldr	r2, [pc, #84]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003e4e:	6553      	str	r3, [r2, #84]	; 0x54
	DefaultParams.AdjCoef_k_ch2  =  MakeUint32FromFloat(Default_AdjCoef_k);
 8003e50:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8003ec8 <ParamsDefaultValues+0x174>
 8003e54:	f7ff ff70 	bl	8003d38 <MakeUint32FromFloat>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	4a12      	ldr	r2, [pc, #72]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003e5c:	6593      	str	r3, [r2, #88]	; 0x58
	DefaultParams.AdjCoef_q_ch0 = MakeUint32FromFloat(Default_AdjCoef_q);
 8003e5e:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8003ecc <ParamsDefaultValues+0x178>
 8003e62:	f7ff ff69 	bl	8003d38 <MakeUint32FromFloat>
 8003e66:	4603      	mov	r3, r0
 8003e68:	4a0e      	ldr	r2, [pc, #56]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003e6a:	65d3      	str	r3, [r2, #92]	; 0x5c
	DefaultParams.AdjCoef_q_ch1 =  MakeUint32FromFloat(Default_AdjCoef_q);
 8003e6c:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8003ecc <ParamsDefaultValues+0x178>
 8003e70:	f7ff ff62 	bl	8003d38 <MakeUint32FromFloat>
 8003e74:	4603      	mov	r3, r0
 8003e76:	4a0b      	ldr	r2, [pc, #44]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003e78:	6613      	str	r3, [r2, #96]	; 0x60
	DefaultParams.AdjCoef_q_ch2  =  MakeUint32FromFloat(Default_AdjCoef_q);
 8003e7a:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8003ecc <ParamsDefaultValues+0x178>
 8003e7e:	f7ff ff5b 	bl	8003d38 <MakeUint32FromFloat>
 8003e82:	4603      	mov	r3, r0
 8003e84:	4a07      	ldr	r2, [pc, #28]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003e86:	6653      	str	r3, [r2, #100]	; 0x64

	DefaultParams.EnableErrorExecute = 1;
 8003e88:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	669a      	str	r2, [r3, #104]	; 0x68
	DefaultParams.DisableSupplyInLostConnection = 0;
 8003e8e:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	66da      	str	r2, [r3, #108]	; 0x6c
	DefaultParams.ControlOutputWithChannelEnable = 1;
 8003e94:	4b03      	ldr	r3, [pc, #12]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	671a      	str	r2, [r3, #112]	; 0x70
	DefaultParams.ErrorExecuteAutoRestore = 1;
 8003e9a:	4b02      	ldr	r3, [pc, #8]	; (8003ea4 <ParamsDefaultValues+0x150>)
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	675a      	str	r2, [r3, #116]	; 0x74


}
 8003ea0:	bf00      	nop
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	20001b44 	.word	0x20001b44
 8003ea8:	00adcfe8 	.word	0x00adcfe8
 8003eac:	00a5dfff 	.word	0x00a5dfff
 8003eb0:	c0a80017 	.word	0xc0a80017
 8003eb4:	c0a80001 	.word	0xc0a80001
 8003eb8:	3bb1a468 	.word	0x3bb1a468
 8003ebc:	3dc710cb 	.word	0x3dc710cb
 8003ec0:	3d6cb0db 	.word	0x3d6cb0db
 8003ec4:	3d7d8adb 	.word	0x3d7d8adb
 8003ec8:	4408f759 	.word	0x4408f759
 8003ecc:	4420b02d 	.word	0x4420b02d

08003ed0 <ParamsLoad>:


void ParamsLoad()
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b0ac      	sub	sp, #176	; 0xb0
 8003ed4:	af00      	add	r7, sp, #0

	FlashSectorParams LoadParams;

	Flash_ReadParamStruct(&LoadParams);
 8003ed6:	1d3b      	adds	r3, r7, #4
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 fe85 	bl	8004be8 <Flash_ReadParamStruct>

	uint32_t StoreControl_0 = LoadParams.StoreControl_0;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	//uint32_t StoreControl_1 = LoadParams.StoreControl_1;


	for(int i = 2; i < NUMBER_OF_PARAMS;i++)
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003eea:	e022      	b.n	8003f32 <ParamsLoad+0x62>
	{
		//if((StoreControl_0 == STORE_VALIDE_CODE) &&  ((StoreControl_1 >> i) & 0x000001))
		if(StoreControl_0 == STORE_VALIDE_CODE)
 8003eec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ef0:	4a14      	ldr	r2, [pc, #80]	; (8003f44 <ParamsLoad+0x74>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d10c      	bne.n	8003f10 <ParamsLoad+0x40>
		{
			*((uint32_t*)(&MainParams)+i) = *((uint32_t*)(&LoadParams)+i);
 8003ef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	1d3a      	adds	r2, r7, #4
 8003efe:	441a      	add	r2, r3
 8003f00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4910      	ldr	r1, [pc, #64]	; (8003f48 <ParamsLoad+0x78>)
 8003f08:	440b      	add	r3, r1
 8003f0a:	6812      	ldr	r2, [r2, #0]
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	e00b      	b.n	8003f28 <ParamsLoad+0x58>


		}
		else
		{
			*((uint32_t*)(&MainParams)+i) = *((uint32_t*)(&DefaultParams)+i);
 8003f10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4a0d      	ldr	r2, [pc, #52]	; (8003f4c <ParamsLoad+0x7c>)
 8003f18:	441a      	add	r2, r3
 8003f1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4909      	ldr	r1, [pc, #36]	; (8003f48 <ParamsLoad+0x78>)
 8003f22:	440b      	add	r3, r1
 8003f24:	6812      	ldr	r2, [r2, #0]
 8003f26:	601a      	str	r2, [r3, #0]
	for(int i = 2; i < NUMBER_OF_PARAMS;i++)
 8003f28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f36:	2b28      	cmp	r3, #40	; 0x28
 8003f38:	d9d8      	bls.n	8003eec <ParamsLoad+0x1c>
		}
	}

}
 8003f3a:	bf00      	nop
 8003f3c:	bf00      	nop
 8003f3e:	37b0      	adds	r7, #176	; 0xb0
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	a4b7a4b7 	.word	0xa4b7a4b7
 8003f48:	20001aa0 	.word	0x20001aa0
 8003f4c:	20001b44 	.word	0x20001b44

08003f50 <ParamsStore>:

void ParamsStore()
{
 8003f50:	b590      	push	{r4, r7, lr}
 8003f52:	b0a7      	sub	sp, #156	; 0x9c
 8003f54:	af26      	add	r7, sp, #152	; 0x98
	MainParams.StoreControl_0 = STORE_VALIDE_CODE;
 8003f56:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <ParamsStore+0x34>)
 8003f58:	4a0b      	ldr	r2, [pc, #44]	; (8003f88 <ParamsStore+0x38>)
 8003f5a:	601a      	str	r2, [r3, #0]
	MainParams.StoreControl_1 = 0x0;
 8003f5c:	4b09      	ldr	r3, [pc, #36]	; (8003f84 <ParamsStore+0x34>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	605a      	str	r2, [r3, #4]

	Flash_WriteParamStruct(MainParams);
 8003f62:	4c08      	ldr	r4, [pc, #32]	; (8003f84 <ParamsStore+0x34>)
 8003f64:	4668      	mov	r0, sp
 8003f66:	f104 0310 	add.w	r3, r4, #16
 8003f6a:	2294      	movs	r2, #148	; 0x94
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	f006 f817 	bl	8009fa0 <memcpy>
 8003f72:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003f76:	f000 fe59 	bl	8004c2c <Flash_WriteParamStruct>
}
 8003f7a:	bf00      	nop
 8003f7c:	3704      	adds	r7, #4
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd90      	pop	{r4, r7, pc}
 8003f82:	bf00      	nop
 8003f84:	20001aa0 	.word	0x20001aa0
 8003f88:	a4b7a4b7 	.word	0xa4b7a4b7

08003f8c <RestoreParamsDefault>:

void RestoreParamsDefault()
{
 8003f8c:	b590      	push	{r4, r7, lr}
 8003f8e:	b0a7      	sub	sp, #156	; 0x9c
 8003f90:	af26      	add	r7, sp, #152	; 0x98
	Flash_WriteParamStruct(DefaultParams);
 8003f92:	4c09      	ldr	r4, [pc, #36]	; (8003fb8 <RestoreParamsDefault+0x2c>)
 8003f94:	4668      	mov	r0, sp
 8003f96:	f104 0310 	add.w	r3, r4, #16
 8003f9a:	2294      	movs	r2, #148	; 0x94
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	f005 ffff 	bl	8009fa0 <memcpy>
 8003fa2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003fa6:	f000 fe41 	bl	8004c2c <Flash_WriteParamStruct>
	ParamsLoad();
 8003faa:	f7ff ff91 	bl	8003ed0 <ParamsLoad>
}
 8003fae:	bf00      	nop
 8003fb0:	3704      	adds	r7, #4
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd90      	pop	{r4, r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20001b44 	.word	0x20001b44

08003fbc <SetConfigData>:




void SetConfigData(int cfg, int value)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
	uint32_t *addr = &MainParams.EnableErrorExecute + cfg;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4a06      	ldr	r2, [pc, #24]	; (8003fe4 <SetConfigData+0x28>)
 8003fcc:	4413      	add	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]

	*addr = value;
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	601a      	str	r2, [r3, #0]

}
 8003fd6:	bf00      	nop
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	20001b08 	.word	0x20001b08

08003fe8 <SendConfigData>:


void SendConfigData()
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0

	SendCommunication(cmd_CfgGet_EnableErrorExecute, MainParams.EnableErrorExecute);
 8003fec:	4b0c      	ldr	r3, [pc, #48]	; (8004020 <SendConfigData+0x38>)
 8003fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	205b      	movs	r0, #91	; 0x5b
 8003ff4:	f7fd fe28 	bl	8001c48 <SendCommunication>
	SendCommunication(cmd_CfgGet_DisableInConnLost, MainParams.DisableSupplyInLostConnection);
 8003ff8:	4b09      	ldr	r3, [pc, #36]	; (8004020 <SendConfigData+0x38>)
 8003ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	205c      	movs	r0, #92	; 0x5c
 8004000:	f7fd fe22 	bl	8001c48 <SendCommunication>
	SendCommunication(cmd_CfgGet_CtrlOutWithChEnable, MainParams.ControlOutputWithChannelEnable);
 8004004:	4b06      	ldr	r3, [pc, #24]	; (8004020 <SendConfigData+0x38>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	4619      	mov	r1, r3
 800400a:	205d      	movs	r0, #93	; 0x5d
 800400c:	f7fd fe1c 	bl	8001c48 <SendCommunication>
	SendCommunication(cmd_CfgGet_ErrorExecuteAutoRestart, MainParams.ErrorExecuteAutoRestore);
 8004010:	4b03      	ldr	r3, [pc, #12]	; (8004020 <SendConfigData+0x38>)
 8004012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004014:	4619      	mov	r1, r3
 8004016:	205e      	movs	r0, #94	; 0x5e
 8004018:	f7fd fe16 	bl	8001c48 <SendCommunication>

}
 800401c:	bf00      	nop
 800401e:	bd80      	pop	{r7, pc}
 8004020:	20001aa0 	.word	0x20001aa0

08004024 <SendCommandToDAC>:
 * @param value -> value to write in DAC register
 * @param rw    -> read/write bit
 *
 */
void SendCommandToDAC(uint8_t adr, uint16_t value,  bool rw)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	71fb      	strb	r3, [r7, #7]
 800402e:	460b      	mov	r3, r1
 8004030:	80bb      	strh	r3, [r7, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	71bb      	strb	r3, [r7, #6]

	uint8_t data[3];

	data[2] = value & (0x00FF);
 8004036:	88bb      	ldrh	r3, [r7, #4]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	73bb      	strb	r3, [r7, #14]
	data[1] = value >> 8;
 800403c:	88bb      	ldrh	r3, [r7, #4]
 800403e:	0a1b      	lsrs	r3, r3, #8
 8004040:	b29b      	uxth	r3, r3
 8004042:	b2db      	uxtb	r3, r3
 8004044:	737b      	strb	r3, [r7, #13]
	data[0] = (adr & 0x0F) | (rw << 7);
 8004046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	b25a      	sxtb	r2, r3
 8004050:	79bb      	ldrb	r3, [r7, #6]
 8004052:	01db      	lsls	r3, r3, #7
 8004054:	b25b      	sxtb	r3, r3
 8004056:	4313      	orrs	r3, r2
 8004058:	b25b      	sxtb	r3, r3
 800405a:	b2db      	uxtb	r3, r3
 800405c:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800405e:	2200      	movs	r2, #0
 8004060:	2110      	movs	r1, #16
 8004062:	4809      	ldr	r0, [pc, #36]	; (8004088 <SendCommandToDAC+0x64>)
 8004064:	f002 fc36 	bl	80068d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, sizeof(data),10);
 8004068:	f107 010c 	add.w	r1, r7, #12
 800406c:	230a      	movs	r3, #10
 800406e:	2203      	movs	r2, #3
 8004070:	4806      	ldr	r0, [pc, #24]	; (800408c <SendCommandToDAC+0x68>)
 8004072:	f003 fa6e 	bl	8007552 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8004076:	2201      	movs	r2, #1
 8004078:	2110      	movs	r1, #16
 800407a:	4803      	ldr	r0, [pc, #12]	; (8004088 <SendCommandToDAC+0x64>)
 800407c:	f002 fc2a 	bl	80068d4 <HAL_GPIO_WritePin>
}
 8004080:	bf00      	nop
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40020000 	.word	0x40020000
 800408c:	20002cac 	.word	0x20002cac

08004090 <SendValueToDAC>:
 * @param dac_channel -> DAC output channel
 * @param value       -> value to write in DAC output register
 *
 */
void SendValueToDAC(uint8_t dac_channel, uint16_t value)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	4603      	mov	r3, r0
 8004098:	460a      	mov	r2, r1
 800409a:	71fb      	strb	r3, [r7, #7]
 800409c:	4613      	mov	r3, r2
 800409e:	80bb      	strh	r3, [r7, #4]

	uint8_t data[3];

	data[2] = value & 0x000F;
 80040a0:	88bb      	ldrh	r3, [r7, #4]
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	73bb      	strb	r3, [r7, #14]
	data[1] = value >> 4;
 80040ac:	88bb      	ldrh	r3, [r7, #4]
 80040ae:	091b      	lsrs	r3, r3, #4
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	737b      	strb	r3, [r7, #13]
	data[0] = (dac_channel & 0x07) | (1 << 3) | (0 << 7);
 80040b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ba:	f003 0307 	and.w	r3, r3, #7
 80040be:	b25b      	sxtb	r3, r3
 80040c0:	f043 0308 	orr.w	r3, r3, #8
 80040c4:	b25b      	sxtb	r3, r3
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80040ca:	2200      	movs	r2, #0
 80040cc:	2110      	movs	r1, #16
 80040ce:	4809      	ldr	r0, [pc, #36]	; (80040f4 <SendValueToDAC+0x64>)
 80040d0:	f002 fc00 	bl	80068d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, sizeof(data),10);
 80040d4:	f107 010c 	add.w	r1, r7, #12
 80040d8:	230a      	movs	r3, #10
 80040da:	2203      	movs	r2, #3
 80040dc:	4806      	ldr	r0, [pc, #24]	; (80040f8 <SendValueToDAC+0x68>)
 80040de:	f003 fa38 	bl	8007552 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80040e2:	2201      	movs	r2, #1
 80040e4:	2110      	movs	r1, #16
 80040e6:	4803      	ldr	r0, [pc, #12]	; (80040f4 <SendValueToDAC+0x64>)
 80040e8:	f002 fbf4 	bl	80068d4 <HAL_GPIO_WritePin>

}
 80040ec:	bf00      	nop
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40020000 	.word	0x40020000
 80040f8:	20002cac 	.word	0x20002cac

080040fc <DAC_Init>:

/* @brief DAC initialization
 *
 */
void DAC_Init()
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
	SendCommandToDAC(0, 0, 0); //dummy command
 8004102:	2200      	movs	r2, #0
 8004104:	2100      	movs	r1, #0
 8004106:	2000      	movs	r0, #0
 8004108:	f7ff ff8c 	bl	8004024 <SendCommandToDAC>
	SendCommandToDAC(5, 0xA, 0); //reset up
 800410c:	2200      	movs	r2, #0
 800410e:	210a      	movs	r1, #10
 8004110:	2005      	movs	r0, #5
 8004112:	f7ff ff87 	bl	8004024 <SendCommandToDAC>
	SendCommandToDAC(5, 0, 0); //reset down
 8004116:	2200      	movs	r2, #0
 8004118:	2100      	movs	r1, #0
 800411a:	2005      	movs	r0, #5
 800411c:	f7ff ff82 	bl	8004024 <SendCommandToDAC>
	SendCommandToDAC(2, 0, 0); //sync register -> all 0
 8004120:	2200      	movs	r2, #0
 8004122:	2100      	movs	r1, #0
 8004124:	2002      	movs	r0, #2
 8004126:	f7ff ff7d 	bl	8004024 <SendCommandToDAC>
	SendCommandToDAC(3, 0, 0); //config register -> all 0
 800412a:	2200      	movs	r2, #0
 800412c:	2100      	movs	r1, #0
 800412e:	2003      	movs	r0, #3
 8004130:	f7ff ff78 	bl	8004024 <SendCommandToDAC>
	SendCommandToDAC(4, 0 | (1 << 8)  , 0); //gain register -> reference diveded by 2
 8004134:	2200      	movs	r2, #0
 8004136:	f44f 7180 	mov.w	r1, #256	; 0x100
 800413a:	2004      	movs	r0, #4
 800413c:	f7ff ff72 	bl	8004024 <SendCommandToDAC>

	for(int i = 0; i < 8; i++)
 8004140:	2300      	movs	r3, #0
 8004142:	607b      	str	r3, [r7, #4]
 8004144:	e009      	b.n	800415a <DAC_Init+0x5e>
	{
		SendValueToDAC(i, 4095); // set all DAC channels on maximum value -> minimum output voltage of power supply
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	f640 71ff 	movw	r1, #4095	; 0xfff
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff ff9e 	bl	8004090 <SendValueToDAC>
	for(int i = 0; i < 8; i++)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3301      	adds	r3, #1
 8004158:	607b      	str	r3, [r7, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b07      	cmp	r3, #7
 800415e:	ddf2      	ble.n	8004146 <DAC_Init+0x4a>
	}

}
 8004160:	bf00      	nop
 8004162:	bf00      	nop
 8004164:	3708      	adds	r7, #8
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <ETH_StoreMac_1>:
//ip_addr_t endpoint_ip;
//struct udp_pcb * udp_pcb;


void ETH_StoreMac_1(uint32_t mac)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
	MainParams.MAC_aadress_1_3MSB = mac;
 8004174:	4a04      	ldr	r2, [pc, #16]	; (8004188 <ETH_StoreMac_1+0x1c>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6093      	str	r3, [r2, #8]
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	20001aa0 	.word	0x20001aa0

0800418c <ETH_StoreMac_2>:

void ETH_StoreMac_2(uint32_t mac)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
	MainParams.MAC_aadress_2_3LSB = mac;
 8004194:	4a04      	ldr	r2, [pc, #16]	; (80041a8 <ETH_StoreMac_2+0x1c>)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	60d3      	str	r3, [r2, #12]
}
 800419a:	bf00      	nop
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	20001aa0 	.word	0x20001aa0

080041ac <ETH_StoreIP>:
 *
 * @param ip -> ip address
 *
 */
void ETH_StoreIP(uint32_t ip)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
	MainParams.IP_ADDRESS = ip;
 80041b4:	4a04      	ldr	r2, [pc, #16]	; (80041c8 <ETH_StoreIP+0x1c>)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6113      	str	r3, [r2, #16]
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	20001aa0 	.word	0x20001aa0

080041cc <ETH_StoreNETMASK>:
 *
 * @param netmask -> netmask address
 *
 */
void ETH_StoreNETMASK(uint32_t netmask)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
	MainParams.NETMASK_ADDRESS = netmask;
 80041d4:	4a04      	ldr	r2, [pc, #16]	; (80041e8 <ETH_StoreNETMASK+0x1c>)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6153      	str	r3, [r2, #20]
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	20001aa0 	.word	0x20001aa0

080041ec <ETH_StoreGATEWAY>:
 *
 * @param gateway -> gateway address
 *
 */
void ETH_StoreGATEWAY(uint32_t gateway)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
	MainParams.GATEWAY_ADDRESS = gateway;
 80041f4:	4a04      	ldr	r2, [pc, #16]	; (8004208 <ETH_StoreGATEWAY+0x1c>)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6193      	str	r3, [r2, #24]
}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	20001aa0 	.word	0x20001aa0

0800420c <ETH_Store_UdpRecPort>:

void ETH_Store_UdpRecPort(uint32_t port)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	MainParams.UdpRecvPort = port;
 8004214:	4a04      	ldr	r2, [pc, #16]	; (8004228 <ETH_Store_UdpRecPort+0x1c>)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	61d3      	str	r3, [r2, #28]
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20001aa0 	.word	0x20001aa0

0800422c <W5500_Select>:




void W5500_Select(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8004230:	2200      	movs	r2, #0
 8004232:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004236:	4802      	ldr	r0, [pc, #8]	; (8004240 <W5500_Select+0x14>)
 8004238:	f002 fb4c 	bl	80068d4 <HAL_GPIO_WritePin>
}
 800423c:	bf00      	nop
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40020000 	.word	0x40020000

08004244 <W5500_Unselect>:

void W5500_Unselect(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8004248:	2201      	movs	r2, #1
 800424a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800424e:	4802      	ldr	r0, [pc, #8]	; (8004258 <W5500_Unselect+0x14>)
 8004250:	f002 fb40 	bl	80068d4 <HAL_GPIO_WritePin>
}
 8004254:	bf00      	nop
 8004256:	bd80      	pop	{r7, pc}
 8004258:	40020000 	.word	0x40020000

0800425c <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi3, buff, len, HAL_MAX_DELAY);
 8004268:	887a      	ldrh	r2, [r7, #2]
 800426a:	f04f 33ff 	mov.w	r3, #4294967295
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	4803      	ldr	r0, [pc, #12]	; (8004280 <W5500_ReadBuff+0x24>)
 8004272:	f003 faaa 	bl	80077ca <HAL_SPI_Receive>
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20002d5c 	.word	0x20002d5c

08004284 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi3, buff, len, HAL_MAX_DELAY);
 8004290:	887a      	ldrh	r2, [r7, #2]
 8004292:	f04f 33ff 	mov.w	r3, #4294967295
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	4803      	ldr	r0, [pc, #12]	; (80042a8 <W5500_WriteBuff+0x24>)
 800429a:	f003 f95a 	bl	8007552 <HAL_SPI_Transmit>
}
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	20002d5c 	.word	0x20002d5c

080042ac <W5500_ReadByte>:

uint8_t W5500_ReadByte(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 80042b2:	1dfb      	adds	r3, r7, #7
 80042b4:	2101      	movs	r1, #1
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff ffd0 	bl	800425c <W5500_ReadBuff>
    return byte;
 80042bc:	79fb      	ldrb	r3, [r7, #7]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b082      	sub	sp, #8
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	4603      	mov	r3, r0
 80042ce:	71fb      	strb	r3, [r7, #7]
    W5500_WriteBuff(&byte, sizeof(byte));
 80042d0:	1dfb      	adds	r3, r7, #7
 80042d2:	2101      	movs	r1, #1
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff ffd5 	bl	8004284 <W5500_WriteBuff>
}
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <ETH_SendSetting>:
/* @brief send setting of ethernet
 *
 *
 */
void ETH_SendSetting()
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0

	SendCommunication_u32(cmd_ip_get_mac_1, MainParams.MAC_aadress_1_3MSB);
 80042e8:	4b12      	ldr	r3, [pc, #72]	; (8004334 <ETH_SendSetting+0x50>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	4619      	mov	r1, r3
 80042ee:	2020      	movs	r0, #32
 80042f0:	f7fd fd7c 	bl	8001dec <SendCommunication_u32>
	SendCommunication_u32(cmd_ip_get_mac_2, MainParams.MAC_aadress_2_3LSB);
 80042f4:	4b0f      	ldr	r3, [pc, #60]	; (8004334 <ETH_SendSetting+0x50>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	4619      	mov	r1, r3
 80042fa:	2021      	movs	r0, #33	; 0x21
 80042fc:	f7fd fd76 	bl	8001dec <SendCommunication_u32>

	SendCommunication_u32(cmd_ip_get_myip, MainParams.IP_ADDRESS);
 8004300:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <ETH_SendSetting+0x50>)
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	4619      	mov	r1, r3
 8004306:	2022      	movs	r0, #34	; 0x22
 8004308:	f7fd fd70 	bl	8001dec <SendCommunication_u32>
	SendCommunication_u32(cmd_ip_get_mymask, MainParams.NETMASK_ADDRESS);
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <ETH_SendSetting+0x50>)
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	4619      	mov	r1, r3
 8004312:	2023      	movs	r0, #35	; 0x23
 8004314:	f7fd fd6a 	bl	8001dec <SendCommunication_u32>
	SendCommunication_u32(cmd_ip_get_mygatew, MainParams.GATEWAY_ADDRESS);
 8004318:	4b06      	ldr	r3, [pc, #24]	; (8004334 <ETH_SendSetting+0x50>)
 800431a:	699b      	ldr	r3, [r3, #24]
 800431c:	4619      	mov	r1, r3
 800431e:	2024      	movs	r0, #36	; 0x24
 8004320:	f7fd fd64 	bl	8001dec <SendCommunication_u32>

	SendCommunication(cmd_ip_get_UdpRecvPort, MainParams.UdpRecvPort);
 8004324:	4b03      	ldr	r3, [pc, #12]	; (8004334 <ETH_SendSetting+0x50>)
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	4619      	mov	r1, r3
 800432a:	2025      	movs	r0, #37	; 0x25
 800432c:	f7fd fc8c 	bl	8001c48 <SendCommunication>

	//SendCommunication_u32(cmd_ip_get_myip, ETH_GetIP());
	//SendCommunication_u32(cmd_ip_get_mymask, ETH_GetNETMASK());
	//SendCommunication_u32(cmd_ip_get_mygatew, ETH_GetGATEWAY());
}
 8004330:	bf00      	nop
 8004332:	bd80      	pop	{r7, pc}
 8004334:	20001aa0 	.word	0x20001aa0

08004338 <ETH_load_ip>:




void ETH_load_ip()
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
	uint32_t x;


	x = MainParams.MAC_aadress_1_3MSB;
 800433e:	4b35      	ldr	r3, [pc, #212]	; (8004414 <ETH_load_ip+0xdc>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	607b      	str	r3, [r7, #4]
	myNetInfo.mac[0] = mac_GET8(x,0);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	0c1b      	lsrs	r3, r3, #16
 8004348:	b2da      	uxtb	r2, r3
 800434a:	4b33      	ldr	r3, [pc, #204]	; (8004418 <ETH_load_ip+0xe0>)
 800434c:	701a      	strb	r2, [r3, #0]
	myNetInfo.mac[1] = mac_GET8(x,1);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	0a1b      	lsrs	r3, r3, #8
 8004352:	b2da      	uxtb	r2, r3
 8004354:	4b30      	ldr	r3, [pc, #192]	; (8004418 <ETH_load_ip+0xe0>)
 8004356:	705a      	strb	r2, [r3, #1]
	myNetInfo.mac[2] = mac_GET8(x,2);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	b2da      	uxtb	r2, r3
 800435c:	4b2e      	ldr	r3, [pc, #184]	; (8004418 <ETH_load_ip+0xe0>)
 800435e:	709a      	strb	r2, [r3, #2]

	x = MainParams.MAC_aadress_2_3LSB;
 8004360:	4b2c      	ldr	r3, [pc, #176]	; (8004414 <ETH_load_ip+0xdc>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	607b      	str	r3, [r7, #4]
	myNetInfo.mac[3] = mac_GET8(x,0);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	0c1b      	lsrs	r3, r3, #16
 800436a:	b2da      	uxtb	r2, r3
 800436c:	4b2a      	ldr	r3, [pc, #168]	; (8004418 <ETH_load_ip+0xe0>)
 800436e:	70da      	strb	r2, [r3, #3]
	myNetInfo.mac[4] = mac_GET8(x,1);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	0a1b      	lsrs	r3, r3, #8
 8004374:	b2da      	uxtb	r2, r3
 8004376:	4b28      	ldr	r3, [pc, #160]	; (8004418 <ETH_load_ip+0xe0>)
 8004378:	711a      	strb	r2, [r3, #4]
	myNetInfo.mac[5] = mac_GET8(x,2);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	b2da      	uxtb	r2, r3
 800437e:	4b26      	ldr	r3, [pc, #152]	; (8004418 <ETH_load_ip+0xe0>)
 8004380:	715a      	strb	r2, [r3, #5]


	x = MainParams.IP_ADDRESS;
 8004382:	4b24      	ldr	r3, [pc, #144]	; (8004414 <ETH_load_ip+0xdc>)
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	607b      	str	r3, [r7, #4]
	myNetInfo.ip[0] = ip_GET8(x,0);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	0e1b      	lsrs	r3, r3, #24
 800438c:	b2da      	uxtb	r2, r3
 800438e:	4b22      	ldr	r3, [pc, #136]	; (8004418 <ETH_load_ip+0xe0>)
 8004390:	719a      	strb	r2, [r3, #6]
	myNetInfo.ip[1] = ip_GET8(x,1);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	0c1b      	lsrs	r3, r3, #16
 8004396:	b2da      	uxtb	r2, r3
 8004398:	4b1f      	ldr	r3, [pc, #124]	; (8004418 <ETH_load_ip+0xe0>)
 800439a:	71da      	strb	r2, [r3, #7]
	myNetInfo.ip[2] = ip_GET8(x,2);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	0a1b      	lsrs	r3, r3, #8
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	4b1d      	ldr	r3, [pc, #116]	; (8004418 <ETH_load_ip+0xe0>)
 80043a4:	721a      	strb	r2, [r3, #8]
	myNetInfo.ip[3] = ip_GET8(x,3);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	4b1b      	ldr	r3, [pc, #108]	; (8004418 <ETH_load_ip+0xe0>)
 80043ac:	725a      	strb	r2, [r3, #9]

	x = MainParams.NETMASK_ADDRESS;
 80043ae:	4b19      	ldr	r3, [pc, #100]	; (8004414 <ETH_load_ip+0xdc>)
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	607b      	str	r3, [r7, #4]
	myNetInfo.sn[0] = ip_GET8(x,0);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	0e1b      	lsrs	r3, r3, #24
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	4b17      	ldr	r3, [pc, #92]	; (8004418 <ETH_load_ip+0xe0>)
 80043bc:	729a      	strb	r2, [r3, #10]
	myNetInfo.sn[1] = ip_GET8(x,1);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	0c1b      	lsrs	r3, r3, #16
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	4b14      	ldr	r3, [pc, #80]	; (8004418 <ETH_load_ip+0xe0>)
 80043c6:	72da      	strb	r2, [r3, #11]
	myNetInfo.sn[2] = ip_GET8(x,2);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	0a1b      	lsrs	r3, r3, #8
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	4b12      	ldr	r3, [pc, #72]	; (8004418 <ETH_load_ip+0xe0>)
 80043d0:	731a      	strb	r2, [r3, #12]
	myNetInfo.sn[3] = ip_GET8(x,3);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	4b10      	ldr	r3, [pc, #64]	; (8004418 <ETH_load_ip+0xe0>)
 80043d8:	735a      	strb	r2, [r3, #13]

	x = MainParams.GATEWAY_ADDRESS;
 80043da:	4b0e      	ldr	r3, [pc, #56]	; (8004414 <ETH_load_ip+0xdc>)
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	607b      	str	r3, [r7, #4]
	myNetInfo.gw[0] = ip_GET8(x,0);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	0e1b      	lsrs	r3, r3, #24
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	4b0c      	ldr	r3, [pc, #48]	; (8004418 <ETH_load_ip+0xe0>)
 80043e8:	739a      	strb	r2, [r3, #14]
	myNetInfo.gw[1] = ip_GET8(x,1);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	0c1b      	lsrs	r3, r3, #16
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	4b09      	ldr	r3, [pc, #36]	; (8004418 <ETH_load_ip+0xe0>)
 80043f2:	73da      	strb	r2, [r3, #15]
	myNetInfo.gw[2] = ip_GET8(x,2);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	0a1b      	lsrs	r3, r3, #8
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	4b07      	ldr	r3, [pc, #28]	; (8004418 <ETH_load_ip+0xe0>)
 80043fc:	741a      	strb	r2, [r3, #16]
	myNetInfo.gw[3] = ip_GET8(x,3);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	b2da      	uxtb	r2, r3
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <ETH_load_ip+0xe0>)
 8004404:	745a      	strb	r2, [r3, #17]

}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	20001aa0 	.word	0x20001aa0
 8004418:	20000074 	.word	0x20000074

0800441c <ETH_udp_Init>:
/* @brief UDP communication init
 *
 *
 */
void ETH_udp_Init()
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
	//---------udp_connect(udp_pcb, IP46_ADDR_ANY(), UDP_PORT);
	//udp_connect(udp_pcb, &endpoint_ip, UDP_PORT);

	//---------udp_recv(udp_pcb, UDP_Receiver_handler, NULL);

    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8004422:	4915      	ldr	r1, [pc, #84]	; (8004478 <ETH_udp_Init+0x5c>)
 8004424:	4815      	ldr	r0, [pc, #84]	; (800447c <ETH_udp_Init+0x60>)
 8004426:	f005 fbe7 	bl	8009bf8 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 800442a:	4915      	ldr	r1, [pc, #84]	; (8004480 <ETH_udp_Init+0x64>)
 800442c:	4815      	ldr	r0, [pc, #84]	; (8004484 <ETH_udp_Init+0x68>)
 800442e:	f005 fc09 	bl	8009c44 <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8004432:	4915      	ldr	r1, [pc, #84]	; (8004488 <ETH_udp_Init+0x6c>)
 8004434:	4815      	ldr	r0, [pc, #84]	; (800448c <ETH_udp_Init+0x70>)
 8004436:	f005 fc31 	bl	8009c9c <reg_wizchip_spiburst_cbfunc>

    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 800443a:	4a15      	ldr	r2, [pc, #84]	; (8004490 <ETH_udp_Init+0x74>)
 800443c:	1d3b      	adds	r3, r7, #4
 800443e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004442:	e883 0003 	stmia.w	r3, {r0, r1}
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8004446:	1d3a      	adds	r2, r7, #4
 8004448:	1d3b      	adds	r3, r7, #4
 800444a:	4611      	mov	r1, r2
 800444c:	4618      	mov	r0, r3
 800444e:	f005 fc9d 	bl	8009d8c <wizchip_init>


    ETH_load_ip();
 8004452:	f7ff ff71 	bl	8004338 <ETH_load_ip>

    wizchip_setnetinfo(&myNetInfo);
 8004456:	480f      	ldr	r0, [pc, #60]	; (8004494 <ETH_udp_Init+0x78>)
 8004458:	f005 fd24 	bl	8009ea4 <wizchip_setnetinfo>

    int udp_socket = socket(UDP_SOCKET, Sn_MR_UDP, UDP_PORT, SF_IO_NONBLOCK);
 800445c:	2301      	movs	r3, #1
 800445e:	f241 328d 	movw	r2, #5005	; 0x138d
 8004462:	2102      	movs	r1, #2
 8004464:	2003      	movs	r0, #3
 8004466:	f004 febb 	bl	80091e0 <socket>
 800446a:	4603      	mov	r3, r0
 800446c:	60fb      	str	r3, [r7, #12]

    if(udp_socket != UDP_SOCKET)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2b03      	cmp	r3, #3
    {
    	//error
    	return;
    }

}
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	08004245 	.word	0x08004245
 800447c:	0800422d 	.word	0x0800422d
 8004480:	080042c7 	.word	0x080042c7
 8004484:	080042ad 	.word	0x080042ad
 8004488:	08004285 	.word	0x08004285
 800448c:	0800425d 	.word	0x0800425d
 8004490:	0800e6bc 	.word	0x0800e6bc
 8004494:	20000074 	.word	0x20000074

08004498 <ETH_udp_StoreEndpoint>:
/* @brief store UDP endpoint
 *
 *
 */
void ETH_udp_StoreEndpoint(uint32_t port)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
	//---------endpoint_ip = last_message_ip;
	//---------udp_connect(udp_pcb, &endpoint_ip, UDP_PORT);

		//memcpy(endpoint_ip,last_message_ip,sizeof(last_message_ip));

	endpoint_ip[0] = last_message_ip[0];
 80044a0:	4b0c      	ldr	r3, [pc, #48]	; (80044d4 <ETH_udp_StoreEndpoint+0x3c>)
 80044a2:	781a      	ldrb	r2, [r3, #0]
 80044a4:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <ETH_udp_StoreEndpoint+0x40>)
 80044a6:	701a      	strb	r2, [r3, #0]
	endpoint_ip[1] = last_message_ip[1];
 80044a8:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <ETH_udp_StoreEndpoint+0x3c>)
 80044aa:	785a      	ldrb	r2, [r3, #1]
 80044ac:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <ETH_udp_StoreEndpoint+0x40>)
 80044ae:	705a      	strb	r2, [r3, #1]
	endpoint_ip[2] = last_message_ip[2];
 80044b0:	4b08      	ldr	r3, [pc, #32]	; (80044d4 <ETH_udp_StoreEndpoint+0x3c>)
 80044b2:	789a      	ldrb	r2, [r3, #2]
 80044b4:	4b08      	ldr	r3, [pc, #32]	; (80044d8 <ETH_udp_StoreEndpoint+0x40>)
 80044b6:	709a      	strb	r2, [r3, #2]
	endpoint_ip[3] = last_message_ip[3];
 80044b8:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <ETH_udp_StoreEndpoint+0x3c>)
 80044ba:	78da      	ldrb	r2, [r3, #3]
 80044bc:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <ETH_udp_StoreEndpoint+0x40>)
 80044be:	70da      	strb	r2, [r3, #3]

	endpoint_port = port;
 80044c0:	4a06      	ldr	r2, [pc, #24]	; (80044dc <ETH_udp_StoreEndpoint+0x44>)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6013      	str	r3, [r2, #0]

}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20001be8 	.word	0x20001be8
 80044d8:	20001bec 	.word	0x20001bec
 80044dc:	20001bf0 	.word	0x20001bf0

080044e0 <ETH_udp_Transmit>:
 * @param *pData -> pointer on data to send
 * @param Size -> Size od data
 *
 */
void ETH_udp_Transmit(uint8_t *pData, uint16_t Size)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af02      	add	r7, sp, #8
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	460b      	mov	r3, r1
 80044ea:	807b      	strh	r3, [r7, #2]
	//uint16_t sentsize;

    //while(!(sentsize >= Size))
    //{

    	ret = sendto(UDP_SOCKET, pData, Size, endpoint_ip, endpoint_port);
 80044ec:	4b07      	ldr	r3, [pc, #28]	; (800450c <ETH_udp_Transmit+0x2c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	887a      	ldrh	r2, [r7, #2]
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	4b06      	ldr	r3, [pc, #24]	; (8004510 <ETH_udp_Transmit+0x30>)
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	2003      	movs	r0, #3
 80044fc:	f004 fff4 	bl	80094e8 <sendto>
 8004500:	60f8      	str	r0, [r7, #12]

    	//sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
    //}


}
 8004502:	bf00      	nop
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	20001bf0 	.word	0x20001bf0
 8004510:	20001bec 	.word	0x20001bec

08004514 <ETH_udp_Receive>:


void ETH_udp_Receive()
{
 8004514:	b580      	push	{r7, lr}
 8004516:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 800451a:	b086      	sub	sp, #24
 800451c:	af02      	add	r7, sp, #8
	int32_t  ret;
	uint8_t buf[DATA_BUF_SIZE];
	uint16_t size;
	uint16_t destport;

	size = getSn_RX_RSR(UDP_SOCKET);
 800451e:	2003      	movs	r0, #3
 8004520:	f004 fd13 	bl	8008f4a <getSn_RX_RSR>
 8004524:	4603      	mov	r3, r0
 8004526:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 800452a:	f102 020e 	add.w	r2, r2, #14
 800452e:	8013      	strh	r3, [r2, #0]

    if(size > 0)
 8004530:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004534:	f103 030e 	add.w	r3, r3, #14
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d042      	beq.n	80045c4 <ETH_udp_Receive+0xb0>
    {

    	if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 800453e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004542:	f103 030e 	add.w	r3, r3, #14
 8004546:	881b      	ldrh	r3, [r3, #0]
 8004548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454c:	d906      	bls.n	800455c <ETH_udp_Receive+0x48>
 800454e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004552:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8004556:	f102 020e 	add.w	r2, r2, #14
 800455a:	8013      	strh	r3, [r2, #0]

    	ret = recvfrom(UDP_SOCKET, buf, size, last_message_ip, (uint16_t*)&destport);
 800455c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004560:	f103 030e 	add.w	r3, r3, #14
 8004564:	881a      	ldrh	r2, [r3, #0]
 8004566:	f107 0110 	add.w	r1, r7, #16
 800456a:	3908      	subs	r1, #8
 800456c:	f107 0310 	add.w	r3, r7, #16
 8004570:	3b0a      	subs	r3, #10
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	4b16      	ldr	r3, [pc, #88]	; (80045d0 <ETH_udp_Receive+0xbc>)
 8004576:	2003      	movs	r0, #3
 8004578:	f005 f8ec 	bl	8009754 <recvfrom>
 800457c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004580:	f103 0308 	add.w	r3, r3, #8
 8004584:	6018      	str	r0, [r3, #0]


    	if(ret <= 0)
 8004586:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800458a:	f103 0308 	add.w	r3, r3, #8
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	dd16      	ble.n	80045c2 <ETH_udp_Receive+0xae>
    	{
    		return;
    	}

    	size = (uint16_t) ret;
 8004594:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8004598:	f103 0308 	add.w	r3, r3, #8
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80045a2:	f102 020e 	add.w	r2, r2, #14
 80045a6:	8013      	strh	r3, [r2, #0]


    	ETH_WriteBuffer(buf, size);
 80045a8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80045ac:	f103 030e 	add.w	r3, r3, #14
 80045b0:	881a      	ldrh	r2, [r3, #0]
 80045b2:	f107 0310 	add.w	r3, r7, #16
 80045b6:	3b08      	subs	r3, #8
 80045b8:	4611      	mov	r1, r2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fd fe68 	bl	8002290 <ETH_WriteBuffer>
 80045c0:	e000      	b.n	80045c4 <ETH_udp_Receive+0xb0>
    		return;
 80045c2:	bf00      	nop

    }


}
 80045c4:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20001be8 	.word	0x20001be8

080045d4 <Uart_BufferNotEmpty>:
 *
 * @return true -> FIFO is not empty
 * @return false -> FIFO is empty
 */
bool Uart_BufferNotEmpty()
{
 80045d4:	b480      	push	{r7}
 80045d6:	af00      	add	r7, sp, #0
	return (uart_bcounter > 0);
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <Uart_BufferNotEmpty+0x1c>)
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	bf14      	ite	ne
 80045e0:	2301      	movne	r3, #1
 80045e2:	2300      	moveq	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	20002bf8 	.word	0x20002bf8

080045f4 <Uart_WriteBuffer>:

/* @brief function add data byte to FIFO
 *
 */
void Uart_WriteBuffer(uint8_t data)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	71fb      	strb	r3, [r7, #7]
	if(uart_bcounter >= (uart_buffer_size-1)) return;
 80045fe:	4b13      	ldr	r3, [pc, #76]	; (800464c <Uart_WriteBuffer+0x58>)
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004606:	4293      	cmp	r3, r2
 8004608:	d81a      	bhi.n	8004640 <Uart_WriteBuffer+0x4c>

	uart_buffer[uart_wpointer] = data;
 800460a:	4b11      	ldr	r3, [pc, #68]	; (8004650 <Uart_WriteBuffer+0x5c>)
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	4619      	mov	r1, r3
 8004610:	4a10      	ldr	r2, [pc, #64]	; (8004654 <Uart_WriteBuffer+0x60>)
 8004612:	79fb      	ldrb	r3, [r7, #7]
 8004614:	5453      	strb	r3, [r2, r1]
	uart_bcounter++;
 8004616:	4b0d      	ldr	r3, [pc, #52]	; (800464c <Uart_WriteBuffer+0x58>)
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	3301      	adds	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	4b0b      	ldr	r3, [pc, #44]	; (800464c <Uart_WriteBuffer+0x58>)
 8004620:	801a      	strh	r2, [r3, #0]
	uart_wpointer++;
 8004622:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <Uart_WriteBuffer+0x5c>)
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	3301      	adds	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	4b09      	ldr	r3, [pc, #36]	; (8004650 <Uart_WriteBuffer+0x5c>)
 800462c:	801a      	strh	r2, [r3, #0]
	if(uart_wpointer > uart_buffer_size - 1) uart_wpointer = 0;
 800462e:	4b08      	ldr	r3, [pc, #32]	; (8004650 <Uart_WriteBuffer+0x5c>)
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004636:	d304      	bcc.n	8004642 <Uart_WriteBuffer+0x4e>
 8004638:	4b05      	ldr	r3, [pc, #20]	; (8004650 <Uart_WriteBuffer+0x5c>)
 800463a:	2200      	movs	r2, #0
 800463c:	801a      	strh	r2, [r3, #0]
 800463e:	e000      	b.n	8004642 <Uart_WriteBuffer+0x4e>
	if(uart_bcounter >= (uart_buffer_size-1)) return;
 8004640:	bf00      	nop

}
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	20002bf8 	.word	0x20002bf8
 8004650:	20002bf4 	.word	0x20002bf4
 8004654:	20001bf4 	.word	0x20001bf4

08004658 <Uart_ReadBuffer>:
/* @brief read data byte from FIFO
 *
 * @return one element uint8_t data 
 */
uint8_t Uart_ReadBuffer()
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
	uint8_t data = uart_buffer[uart_rpointer];
 800465e:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <Uart_ReadBuffer+0x48>)
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	4b0f      	ldr	r3, [pc, #60]	; (80046a4 <Uart_ReadBuffer+0x4c>)
 8004666:	5c9b      	ldrb	r3, [r3, r2]
 8004668:	71fb      	strb	r3, [r7, #7]
	uart_bcounter--;
 800466a:	4b0f      	ldr	r3, [pc, #60]	; (80046a8 <Uart_ReadBuffer+0x50>)
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <Uart_ReadBuffer+0x50>)
 8004674:	801a      	strh	r2, [r3, #0]
	uart_rpointer++;
 8004676:	4b0a      	ldr	r3, [pc, #40]	; (80046a0 <Uart_ReadBuffer+0x48>)
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	3301      	adds	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	4b08      	ldr	r3, [pc, #32]	; (80046a0 <Uart_ReadBuffer+0x48>)
 8004680:	801a      	strh	r2, [r3, #0]
	if(uart_rpointer > uart_buffer_size - 1) uart_rpointer = 0;
 8004682:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <Uart_ReadBuffer+0x48>)
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468a:	d302      	bcc.n	8004692 <Uart_ReadBuffer+0x3a>
 800468c:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <Uart_ReadBuffer+0x48>)
 800468e:	2200      	movs	r2, #0
 8004690:	801a      	strh	r2, [r3, #0]

	return data;
 8004692:	79fb      	ldrb	r3, [r7, #7]
}
 8004694:	4618      	mov	r0, r3
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	20002bf6 	.word	0x20002bf6
 80046a4:	20001bf4 	.word	0x20001bf4
 80046a8:	20002bf8 	.word	0x20002bf8

080046ac <Uart_Send>:
 * @param data -> pointer on data buffer with message
 * @param size -> lenght of data buffer
 *
 */
void Uart_Send(char *data, uint16_t size)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	460b      	mov	r3, r1
 80046b6:	807b      	strh	r3, [r7, #2]

	HAL_UART_Transmit(&huart2, (uint8_t *)data, size,100);
 80046b8:	887a      	ldrh	r2, [r7, #2]
 80046ba:	2364      	movs	r3, #100	; 0x64
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	4803      	ldr	r0, [pc, #12]	; (80046cc <Uart_Send+0x20>)
 80046c0:	f003 ff29 	bl	8008516 <HAL_UART_Transmit>
}
 80046c4:	bf00      	nop
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	20002e58 	.word	0x20002e58

080046d0 <ledsUpadateLEDState>:

#include "stm_leds.h"


void ledsUpadateLEDState(LED_struct * actual_led, uint32_t sysTime)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]

	switch (actual_led->mode)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	7a5b      	ldrb	r3, [r3, #9]
 80046de:	2b06      	cmp	r3, #6
 80046e0:	f200 8103 	bhi.w	80048ea <ledsUpadateLEDState+0x21a>
 80046e4:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <ledsUpadateLEDState+0x1c>)
 80046e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ea:	bf00      	nop
 80046ec:	08004709 	.word	0x08004709
 80046f0:	0800472f 	.word	0x0800472f
 80046f4:	08004755 	.word	0x08004755
 80046f8:	0800478f 	.word	0x0800478f
 80046fc:	080047bb 	.word	0x080047bb
 8004700:	080047e9 	.word	0x080047e9
 8004704:	08004869 	.word	0x08004869
	{

		case LEDS_OFF:
			if(actual_led->polarity)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	7a1b      	ldrb	r3, [r3, #8]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d006      	beq.n	800471e <ledsUpadateLEDState+0x4e>
			{
				*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3318      	adds	r3, #24
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6852      	ldr	r2, [r2, #4]
 800471a:	601a      	str	r2, [r3, #0]
			}
			else
			{
				*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
			}
			break;
 800471c:	e0ee      	b.n	80048fc <ledsUpadateLEDState+0x22c>
				*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3318      	adds	r3, #24
 8004728:	0412      	lsls	r2, r2, #16
 800472a:	601a      	str	r2, [r3, #0]
			break;
 800472c:	e0e6      	b.n	80048fc <ledsUpadateLEDState+0x22c>

		case LEDS_ON:
			if(actual_led->polarity)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	7a1b      	ldrb	r3, [r3, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d007      	beq.n	8004746 <ledsUpadateLEDState+0x76>
			{
				*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	3318      	adds	r3, #24
 8004740:	0412      	lsls	r2, r2, #16
 8004742:	601a      	str	r2, [r3, #0]
			}
			else
			{
				*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
			}
			break;
 8004744:	e0da      	b.n	80048fc <ledsUpadateLEDState+0x22c>
				*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3318      	adds	r3, #24
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6852      	ldr	r2, [r2, #4]
 8004750:	601a      	str	r2, [r3, #0]
			break;
 8004752:	e0d3      	b.n	80048fc <ledsUpadateLEDState+0x22c>

		case LEDS_DELAYED_OFF:
			if(actual_led->polarity)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	7a1b      	ldrb	r3, [r3, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d007      	beq.n	800476c <ledsUpadateLEDState+0x9c>
			{
				*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3318      	adds	r3, #24
 8004766:	0412      	lsls	r2, r2, #16
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	e005      	b.n	8004778 <ledsUpadateLEDState+0xa8>
			}
			else
			{
				*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3318      	adds	r3, #24
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	6852      	ldr	r2, [r2, #4]
 8004776:	601a      	str	r2, [r3, #0]
			}

			if((sysTime - actual_led->led_time) > DELAYED_OFF_DELAY)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b14      	cmp	r3, #20
 8004782:	f240 80b4 	bls.w	80048ee <ledsUpadateLEDState+0x21e>
			{
				actual_led->mode = LEDS_OFF;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	725a      	strb	r2, [r3, #9]
			}
			break;
 800478c:	e0af      	b.n	80048ee <ledsUpadateLEDState+0x21e>

		case LEDS_FAST_FLASH:
			if((sysTime - actual_led->led_time) > FAST_FLASH_DELAY)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	; 0x64
 8004798:	f240 80ab 	bls.w	80048f2 <ledsUpadateLEDState+0x222>
			{
				*(actual_led->port_address+5) ^= actual_led->channel_mask; // GPIOx_ODR
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3314      	adds	r3, #20
 80047a2:	6819      	ldr	r1, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3314      	adds	r3, #20
 80047ae:	404a      	eors	r2, r1
 80047b0:	601a      	str	r2, [r3, #0]
				actual_led->led_time = sysTime;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	60da      	str	r2, [r3, #12]
			}
			break;
 80047b8:	e09b      	b.n	80048f2 <ledsUpadateLEDState+0x222>

		case LEDS_SLOW_FLASH:
			if((sysTime - actual_led->led_time) > SLOW_FLASH_DELAY)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80047c6:	f240 8096 	bls.w	80048f6 <ledsUpadateLEDState+0x226>
			{
				*(actual_led->port_address+5) ^= actual_led->channel_mask; // GPIOx_ODR
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3314      	adds	r3, #20
 80047d0:	6819      	ldr	r1, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3314      	adds	r3, #20
 80047dc:	404a      	eors	r2, r1
 80047de:	601a      	str	r2, [r3, #0]
				actual_led->led_time = sysTime;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	60da      	str	r2, [r3, #12]
			}
			break;
 80047e6:	e086      	b.n	80048f6 <ledsUpadateLEDState+0x226>

		case LEDS_FAST_BLINK:
			if((sysTime - actual_led->led_time) > BLINK_DELAY)//timer
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b64      	cmp	r3, #100	; 0x64
 80047f2:	d939      	bls.n	8004868 <ledsUpadateLEDState+0x198>
			{
				actual_led->led_time = sysTime;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	60da      	str	r2, [r3, #12]


				if(actual_led-> blink_state > FAST_BLINK_RATIO) actual_led-> blink_state = 0;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	7c1b      	ldrb	r3, [r3, #16]
 80047fe:	2b05      	cmp	r3, #5
 8004800:	d903      	bls.n	800480a <ledsUpadateLEDState+0x13a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	741a      	strb	r2, [r3, #16]
 8004808:	e005      	b.n	8004816 <ledsUpadateLEDState+0x146>
				else actual_led-> blink_state++;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	7c1b      	ldrb	r3, [r3, #16]
 800480e:	3301      	adds	r3, #1
 8004810:	b2da      	uxtb	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	741a      	strb	r2, [r3, #16]

				if((actual_led-> blink_state == 0)) //led on
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	7c1b      	ldrb	r3, [r3, #16]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d112      	bne.n	8004844 <ledsUpadateLEDState+0x174>
				{

					if(actual_led->polarity)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	7a1b      	ldrb	r3, [r3, #8]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d007      	beq.n	8004836 <ledsUpadateLEDState+0x166>
					{
						*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3318      	adds	r3, #24
 8004830:	0412      	lsls	r2, r2, #16
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	e018      	b.n	8004868 <ledsUpadateLEDState+0x198>
					}
					else
					{
						*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	3318      	adds	r3, #24
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6852      	ldr	r2, [r2, #4]
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	e011      	b.n	8004868 <ledsUpadateLEDState+0x198>
					}
				}
				else //led off
				{

					if(actual_led->polarity)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	7a1b      	ldrb	r3, [r3, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d006      	beq.n	800485a <ledsUpadateLEDState+0x18a>
					{
						*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3318      	adds	r3, #24
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6852      	ldr	r2, [r2, #4]
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	e006      	b.n	8004868 <ledsUpadateLEDState+0x198>
					}
					else
					{
						*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3318      	adds	r3, #24
 8004864:	0412      	lsls	r2, r2, #16
 8004866:	601a      	str	r2, [r3, #0]
					}
				}
			}

		case LEDS_SLOW_BLINK:
					if((sysTime - actual_led->led_time) > BLINK_DELAY)//timer
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b64      	cmp	r3, #100	; 0x64
 8004872:	d942      	bls.n	80048fa <ledsUpadateLEDState+0x22a>
					{
						actual_led->led_time = sysTime;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	60da      	str	r2, [r3, #12]


						if(actual_led-> blink_state > SLOW_BLINK_RATIO) actual_led-> blink_state = 0;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	7c1b      	ldrb	r3, [r3, #16]
 800487e:	2b19      	cmp	r3, #25
 8004880:	d903      	bls.n	800488a <ledsUpadateLEDState+0x1ba>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	741a      	strb	r2, [r3, #16]
 8004888:	e005      	b.n	8004896 <ledsUpadateLEDState+0x1c6>
						else actual_led-> blink_state++;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	7c1b      	ldrb	r3, [r3, #16]
 800488e:	3301      	adds	r3, #1
 8004890:	b2da      	uxtb	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	741a      	strb	r2, [r3, #16]

						if((actual_led-> blink_state == 0)) //led on
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	7c1b      	ldrb	r3, [r3, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d112      	bne.n	80048c4 <ledsUpadateLEDState+0x1f4>
						{

							if(actual_led->polarity)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	7a1b      	ldrb	r3, [r3, #8]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d007      	beq.n	80048b6 <ledsUpadateLEDState+0x1e6>
							{
								*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3318      	adds	r3, #24
 80048b0:	0412      	lsls	r2, r2, #16
 80048b2:	601a      	str	r2, [r3, #0]
							}
						}

					}

			break;
 80048b4:	e021      	b.n	80048fa <ledsUpadateLEDState+0x22a>
								*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3318      	adds	r3, #24
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6852      	ldr	r2, [r2, #4]
 80048c0:	601a      	str	r2, [r3, #0]
			break;
 80048c2:	e01a      	b.n	80048fa <ledsUpadateLEDState+0x22a>
							if(actual_led->polarity)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	7a1b      	ldrb	r3, [r3, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d006      	beq.n	80048da <ledsUpadateLEDState+0x20a>
								*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3318      	adds	r3, #24
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6852      	ldr	r2, [r2, #4]
 80048d6:	601a      	str	r2, [r3, #0]
			break;
 80048d8:	e00f      	b.n	80048fa <ledsUpadateLEDState+0x22a>
								*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685a      	ldr	r2, [r3, #4]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3318      	adds	r3, #24
 80048e4:	0412      	lsls	r2, r2, #16
 80048e6:	601a      	str	r2, [r3, #0]
			break;
 80048e8:	e007      	b.n	80048fa <ledsUpadateLEDState+0x22a>

		default:
			break;
 80048ea:	bf00      	nop
 80048ec:	e006      	b.n	80048fc <ledsUpadateLEDState+0x22c>
			break;
 80048ee:	bf00      	nop
 80048f0:	e004      	b.n	80048fc <ledsUpadateLEDState+0x22c>
			break;
 80048f2:	bf00      	nop
 80048f4:	e002      	b.n	80048fc <ledsUpadateLEDState+0x22c>
			break;
 80048f6:	bf00      	nop
 80048f8:	e000      	b.n	80048fc <ledsUpadateLEDState+0x22c>
			break;
 80048fa:	bf00      	nop
	}

	return;
 80048fc:	bf00      	nop

}
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800490e:	463b      	mov	r3, r7
 8004910:	2200      	movs	r2, #0
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	605a      	str	r2, [r3, #4]
 8004916:	609a      	str	r2, [r3, #8]
 8004918:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800491a:	4b21      	ldr	r3, [pc, #132]	; (80049a0 <MX_ADC1_Init+0x98>)
 800491c:	4a21      	ldr	r2, [pc, #132]	; (80049a4 <MX_ADC1_Init+0x9c>)
 800491e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004920:	4b1f      	ldr	r3, [pc, #124]	; (80049a0 <MX_ADC1_Init+0x98>)
 8004922:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004926:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004928:	4b1d      	ldr	r3, [pc, #116]	; (80049a0 <MX_ADC1_Init+0x98>)
 800492a:	2200      	movs	r2, #0
 800492c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800492e:	4b1c      	ldr	r3, [pc, #112]	; (80049a0 <MX_ADC1_Init+0x98>)
 8004930:	2200      	movs	r2, #0
 8004932:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004934:	4b1a      	ldr	r3, [pc, #104]	; (80049a0 <MX_ADC1_Init+0x98>)
 8004936:	2200      	movs	r2, #0
 8004938:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800493a:	4b19      	ldr	r3, [pc, #100]	; (80049a0 <MX_ADC1_Init+0x98>)
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004942:	4b17      	ldr	r3, [pc, #92]	; (80049a0 <MX_ADC1_Init+0x98>)
 8004944:	2200      	movs	r2, #0
 8004946:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004948:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <MX_ADC1_Init+0x98>)
 800494a:	4a17      	ldr	r2, [pc, #92]	; (80049a8 <MX_ADC1_Init+0xa0>)
 800494c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800494e:	4b14      	ldr	r3, [pc, #80]	; (80049a0 <MX_ADC1_Init+0x98>)
 8004950:	2200      	movs	r2, #0
 8004952:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004954:	4b12      	ldr	r3, [pc, #72]	; (80049a0 <MX_ADC1_Init+0x98>)
 8004956:	2201      	movs	r2, #1
 8004958:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800495a:	4b11      	ldr	r3, [pc, #68]	; (80049a0 <MX_ADC1_Init+0x98>)
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004962:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <MX_ADC1_Init+0x98>)
 8004964:	2201      	movs	r2, #1
 8004966:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004968:	480d      	ldr	r0, [pc, #52]	; (80049a0 <MX_ADC1_Init+0x98>)
 800496a:	f000 ff9f 	bl	80058ac <HAL_ADC_Init>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004974:	f000 fb08 	bl	8004f88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004978:	2300      	movs	r3, #0
 800497a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800497c:	2301      	movs	r3, #1
 800497e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004980:	2300      	movs	r3, #0
 8004982:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004984:	463b      	mov	r3, r7
 8004986:	4619      	mov	r1, r3
 8004988:	4805      	ldr	r0, [pc, #20]	; (80049a0 <MX_ADC1_Init+0x98>)
 800498a:	f000 ffd3 	bl	8005934 <HAL_ADC_ConfigChannel>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004994:	f000 faf8 	bl	8004f88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004998:	bf00      	nop
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	20002bfc 	.word	0x20002bfc
 80049a4:	40012000 	.word	0x40012000
 80049a8:	0f000001 	.word	0x0f000001

080049ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08a      	sub	sp, #40	; 0x28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049b4:	f107 0314 	add.w	r3, r7, #20
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	605a      	str	r2, [r3, #4]
 80049be:	609a      	str	r2, [r3, #8]
 80049c0:	60da      	str	r2, [r3, #12]
 80049c2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a17      	ldr	r2, [pc, #92]	; (8004a28 <HAL_ADC_MspInit+0x7c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d127      	bne.n	8004a1e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80049ce:	2300      	movs	r3, #0
 80049d0:	613b      	str	r3, [r7, #16]
 80049d2:	4b16      	ldr	r3, [pc, #88]	; (8004a2c <HAL_ADC_MspInit+0x80>)
 80049d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d6:	4a15      	ldr	r2, [pc, #84]	; (8004a2c <HAL_ADC_MspInit+0x80>)
 80049d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049dc:	6453      	str	r3, [r2, #68]	; 0x44
 80049de:	4b13      	ldr	r3, [pc, #76]	; (8004a2c <HAL_ADC_MspInit+0x80>)
 80049e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e6:	613b      	str	r3, [r7, #16]
 80049e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	4b0f      	ldr	r3, [pc, #60]	; (8004a2c <HAL_ADC_MspInit+0x80>)
 80049f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f2:	4a0e      	ldr	r2, [pc, #56]	; (8004a2c <HAL_ADC_MspInit+0x80>)
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	6313      	str	r3, [r2, #48]	; 0x30
 80049fa:	4b0c      	ldr	r3, [pc, #48]	; (8004a2c <HAL_ADC_MspInit+0x80>)
 80049fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004a06:	2303      	movs	r3, #3
 8004a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a12:	f107 0314 	add.w	r3, r7, #20
 8004a16:	4619      	mov	r1, r3
 8004a18:	4805      	ldr	r0, [pc, #20]	; (8004a30 <HAL_ADC_MspInit+0x84>)
 8004a1a:	f001 fdbf 	bl	800659c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004a1e:	bf00      	nop
 8004a20:	3728      	adds	r7, #40	; 0x28
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	40012000 	.word	0x40012000
 8004a2c:	40023800 	.word	0x40023800
 8004a30:	40020000 	.word	0x40020000

08004a34 <Flash_GetSector>:

/*
 * Function returns Flash Sector by given address
 */
uint32_t Flash_GetSector(uint32_t StartSectorAddress)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]

  uint32_t sector = 0;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60fb      	str	r3, [r7, #12]

  if((StartSectorAddress < 0x08003FFF) && (StartSectorAddress >= 0x08000000))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a2e      	ldr	r2, [pc, #184]	; (8004afc <Flash_GetSector+0xc8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d806      	bhi.n	8004a56 <Flash_GetSector+0x22>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a4e:	d302      	bcc.n	8004a56 <Flash_GetSector+0x22>
	{
	  sector = FLASH_SECTOR_0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	e04b      	b.n	8004aee <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x08007FFF) && (StartSectorAddress >= 0x08004000))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a29      	ldr	r2, [pc, #164]	; (8004b00 <Flash_GetSector+0xcc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d806      	bhi.n	8004a6c <Flash_GetSector+0x38>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a28      	ldr	r2, [pc, #160]	; (8004b04 <Flash_GetSector+0xd0>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d302      	bcc.n	8004a6c <Flash_GetSector+0x38>
	{
	  sector = FLASH_SECTOR_1;
 8004a66:	2301      	movs	r3, #1
 8004a68:	60fb      	str	r3, [r7, #12]
 8004a6a:	e040      	b.n	8004aee <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0800BFFF) && (StartSectorAddress >= 0x08008000))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a26      	ldr	r2, [pc, #152]	; (8004b08 <Flash_GetSector+0xd4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d806      	bhi.n	8004a82 <Flash_GetSector+0x4e>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a25      	ldr	r2, [pc, #148]	; (8004b0c <Flash_GetSector+0xd8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d302      	bcc.n	8004a82 <Flash_GetSector+0x4e>
	{
	  sector = FLASH_SECTOR_2;
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	e035      	b.n	8004aee <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0800FFFF) && (StartSectorAddress >= 0x0800C000))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a22      	ldr	r2, [pc, #136]	; (8004b10 <Flash_GetSector+0xdc>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d206      	bcs.n	8004a98 <Flash_GetSector+0x64>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a21      	ldr	r2, [pc, #132]	; (8004b14 <Flash_GetSector+0xe0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d302      	bcc.n	8004a98 <Flash_GetSector+0x64>
	{
	  sector = FLASH_SECTOR_3;
 8004a92:	2303      	movs	r3, #3
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	e02a      	b.n	8004aee <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0801FFFF) && (StartSectorAddress >= 0x08010000))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a1f      	ldr	r2, [pc, #124]	; (8004b18 <Flash_GetSector+0xe4>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d206      	bcs.n	8004aae <Flash_GetSector+0x7a>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a1b      	ldr	r2, [pc, #108]	; (8004b10 <Flash_GetSector+0xdc>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d902      	bls.n	8004aae <Flash_GetSector+0x7a>
	{
	  sector = FLASH_SECTOR_4;
 8004aa8:	2304      	movs	r3, #4
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	e01f      	b.n	8004aee <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0803FFFF) && (StartSectorAddress >= 0x08020000))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a1a      	ldr	r2, [pc, #104]	; (8004b1c <Flash_GetSector+0xe8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d206      	bcs.n	8004ac4 <Flash_GetSector+0x90>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a17      	ldr	r2, [pc, #92]	; (8004b18 <Flash_GetSector+0xe4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d902      	bls.n	8004ac4 <Flash_GetSector+0x90>
	{
	  sector = FLASH_SECTOR_5;
 8004abe:	2305      	movs	r3, #5
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	e014      	b.n	8004aee <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0805FFFF) && (StartSectorAddress >= 0x08040000))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a16      	ldr	r2, [pc, #88]	; (8004b20 <Flash_GetSector+0xec>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d206      	bcs.n	8004ada <Flash_GetSector+0xa6>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a13      	ldr	r2, [pc, #76]	; (8004b1c <Flash_GetSector+0xe8>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d902      	bls.n	8004ada <Flash_GetSector+0xa6>
	{
	  sector = FLASH_SECTOR_6;
 8004ad4:	2306      	movs	r3, #6
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	e009      	b.n	8004aee <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0807FFFF) && (StartSectorAddress >= 0x08060000))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a11      	ldr	r2, [pc, #68]	; (8004b24 <Flash_GetSector+0xf0>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d205      	bcs.n	8004aee <Flash_GetSector+0xba>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a0e      	ldr	r2, [pc, #56]	; (8004b20 <Flash_GetSector+0xec>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d901      	bls.n	8004aee <Flash_GetSector+0xba>
	{
	  sector = FLASH_SECTOR_7;
 8004aea:	2307      	movs	r3, #7
 8004aec:	60fb      	str	r3, [r7, #12]
	}

  return sector;
 8004aee:	68fb      	ldr	r3, [r7, #12]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	08003ffe 	.word	0x08003ffe
 8004b00:	08007ffe 	.word	0x08007ffe
 8004b04:	08004000 	.word	0x08004000
 8004b08:	0800bffe 	.word	0x0800bffe
 8004b0c:	08008000 	.word	0x08008000
 8004b10:	0800ffff 	.word	0x0800ffff
 8004b14:	0800c000 	.word	0x0800c000
 8004b18:	0801ffff 	.word	0x0801ffff
 8004b1c:	0803ffff 	.word	0x0803ffff
 8004b20:	0805ffff 	.word	0x0805ffff
 8004b24:	0807ffff 	.word	0x0807ffff

08004b28 <Flash_WriteData>:
 * Function writes given number of uint32_t words to given flash address
 * Function unlocks flash, erases needed sector(s), flash given memmory and locks Flash
 * Function returns 0 if there was no error
 */
uint32_t Flash_WriteData (uint32_t StartSectorAddress, uint32_t *Data, uint16_t NumOfWords)
{
 8004b28:	b5b0      	push	{r4, r5, r7, lr}
 8004b2a:	b08a      	sub	sp, #40	; 0x28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	4613      	mov	r3, r2
 8004b34:	80fb      	strh	r3, [r7, #6]
  static FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t loc_Error;

  /* Unlock the Flash to enable the flash control register access */
  HAL_FLASH_Unlock();
 8004b36:	f001 fa91 	bl	800605c <HAL_FLASH_Unlock>


  /* Get the number of sector to erase from 1st sector */

  uint32_t StartSector = Flash_GetSector(StartSectorAddress);
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f7ff ff7a 	bl	8004a34 <Flash_GetSector>
 8004b40:	6238      	str	r0, [r7, #32]
  uint32_t EndSectorAddress = StartSectorAddress + NumOfWords*4;
 8004b42:	88fb      	ldrh	r3, [r7, #6]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	461a      	mov	r2, r3
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	61fb      	str	r3, [r7, #28]
  uint32_t EndSector = Flash_GetSector(EndSectorAddress);
 8004b4e:	69f8      	ldr	r0, [r7, #28]
 8004b50:	f7ff ff70 	bl	8004a34 <Flash_GetSector>
 8004b54:	61b8      	str	r0, [r7, #24]

  /* Fill EraseInit structure*/
  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8004b56:	4b23      	ldr	r3, [pc, #140]	; (8004be4 <Flash_WriteData+0xbc>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8004b5c:	4b21      	ldr	r3, [pc, #132]	; (8004be4 <Flash_WriteData+0xbc>)
 8004b5e:	2202      	movs	r2, #2
 8004b60:	611a      	str	r2, [r3, #16]
  EraseInitStruct.Sector        = StartSector;
 8004b62:	4a20      	ldr	r2, [pc, #128]	; (8004be4 <Flash_WriteData+0xbc>)
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	6093      	str	r3, [r2, #8]
  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	3301      	adds	r3, #1
 8004b70:	4a1c      	ldr	r2, [pc, #112]	; (8004be4 <Flash_WriteData+0xbc>)
 8004b72:	60d3      	str	r3, [r2, #12]

  /* Erase the user Flash area with given setting */
  /* Note!: Erase is done on whole sector/page */
  if (HAL_FLASHEx_Erase(&EraseInitStruct, &loc_Error) != HAL_OK)
 8004b74:	f107 0314 	add.w	r3, r7, #20
 8004b78:	4619      	mov	r1, r3
 8004b7a:	481a      	ldr	r0, [pc, #104]	; (8004be4 <Flash_WriteData+0xbc>)
 8004b7c:	f001 fbec 	bl	8006358 <HAL_FLASHEx_Erase>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <Flash_WriteData+0x66>
  {
	  return HAL_FLASH_GetError ();
 8004b86:	f001 fa9b 	bl	80060c0 <HAL_FLASH_GetError>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	e025      	b.n	8004bda <Flash_WriteData+0xb2>
  }

  /* Program the user Flash area word by word*/

  for (uint16_t i = 0;  i < NumOfWords; i++) 
 8004b8e:	2300      	movs	r3, #0
 8004b90:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004b92:	e01b      	b.n	8004bcc <Flash_WriteData+0xa4>
  {


	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[i]) == HAL_OK)
 8004b94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	461c      	mov	r4, r3
 8004ba2:	4615      	mov	r5, r2
 8004ba4:	4622      	mov	r2, r4
 8004ba6:	462b      	mov	r3, r5
 8004ba8:	68f9      	ldr	r1, [r7, #12]
 8004baa:	2002      	movs	r0, #2
 8004bac:	f001 fa02 	bl	8005fb4 <HAL_FLASH_Program>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d103      	bne.n	8004bbe <Flash_WriteData+0x96>
    {
        //Shift address by 4 (Word Size)
    	StartSectorAddress += 4;  // StartPageAddress += 2 for half word and 8 for double word
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	e003      	b.n	8004bc6 <Flash_WriteData+0x9e>
    	//i++;
    }
    else
    {
      /* Error occurred while writing data in Flash memory*/
      return HAL_FLASH_GetError ();
 8004bbe:	f001 fa7f 	bl	80060c0 <HAL_FLASH_GetError>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	e009      	b.n	8004bda <Flash_WriteData+0xb2>
  for (uint16_t i = 0;  i < NumOfWords; i++) 
 8004bc6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bc8:	3301      	adds	r3, #1
 8004bca:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004bcc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004bce:	88fb      	ldrh	r3, [r7, #6]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d3df      	bcc.n	8004b94 <Flash_WriteData+0x6c>
    }
  }

  /* Lock the Flash to disable the flash control register access */
  HAL_FLASH_Lock();
 8004bd4:	f001 fa64 	bl	80060a0 <HAL_FLASH_Lock>

  return 0;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3728      	adds	r7, #40	; 0x28
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bdb0      	pop	{r4, r5, r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20002c44 	.word	0x20002c44

08004be8 <Flash_ReadParamStruct>:
/*
 * Read Data from fixed address in sector 7 given by BASE_PARAM_ADR
 * Data are read to FlashSectorParams struct
 */
void Flash_ReadParamStruct(FlashSectorParams* s_data)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUMBER_OF_PARAMS; i++)
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	e00f      	b.n	8004c16 <Flash_ReadParamStruct+0x2e>
	{
		*((uint32_t*)(s_data)+i)=*((uint32_t*)(BASE_PARAM_ADR+4*i));
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004bfc:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	4619      	mov	r1, r3
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	680a      	ldr	r2, [r1, #0]
 8004c0e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUMBER_OF_PARAMS; i++)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	3301      	adds	r3, #1
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2b28      	cmp	r3, #40	; 0x28
 8004c1a:	d9ec      	bls.n	8004bf6 <Flash_ReadParamStruct+0xe>
	}
}
 8004c1c:	bf00      	nop
 8004c1e:	bf00      	nop
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
	...

08004c2c <Flash_WriteParamStruct>:
 * Write Data to fixed address in sector 7 given by BASE_PARAM_ADR
 * Write data have FlashSectorParams struct format.. number of parametrs are given by NUMBER_OF_PARAMS define
 * Function returns 0 if there was no error
 */
uint32_t Flash_WriteParamStruct(FlashSectorParams ParamsData)
{
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b082      	sub	sp, #8
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	f107 0c10 	add.w	ip, r7, #16
 8004c38:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 uint32_t loc_Error;

	 loc_Error = Flash_WriteData(BASE_PARAM_ADR,(uint32_t*)&ParamsData,NUMBER_OF_PARAMS);
 8004c3c:	2229      	movs	r2, #41	; 0x29
 8004c3e:	f107 0110 	add.w	r1, r7, #16
 8004c42:	4806      	ldr	r0, [pc, #24]	; (8004c5c <Flash_WriteParamStruct+0x30>)
 8004c44:	f7ff ff70 	bl	8004b28 <Flash_WriteData>
 8004c48:	6078      	str	r0, [r7, #4]

	 return loc_Error;
 8004c4a:	687b      	ldr	r3, [r7, #4]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c56:	b004      	add	sp, #16
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	08060000 	.word	0x08060000

08004c60 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b088      	sub	sp, #32
 8004c64:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c66:	f107 030c 	add.w	r3, r7, #12
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	605a      	str	r2, [r3, #4]
 8004c70:	609a      	str	r2, [r3, #8]
 8004c72:	60da      	str	r2, [r3, #12]
 8004c74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c76:	2300      	movs	r3, #0
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	4b42      	ldr	r3, [pc, #264]	; (8004d84 <MX_GPIO_Init+0x124>)
 8004c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7e:	4a41      	ldr	r2, [pc, #260]	; (8004d84 <MX_GPIO_Init+0x124>)
 8004c80:	f043 0304 	orr.w	r3, r3, #4
 8004c84:	6313      	str	r3, [r2, #48]	; 0x30
 8004c86:	4b3f      	ldr	r3, [pc, #252]	; (8004d84 <MX_GPIO_Init+0x124>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	f003 0304 	and.w	r3, r3, #4
 8004c8e:	60bb      	str	r3, [r7, #8]
 8004c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c92:	2300      	movs	r3, #0
 8004c94:	607b      	str	r3, [r7, #4]
 8004c96:	4b3b      	ldr	r3, [pc, #236]	; (8004d84 <MX_GPIO_Init+0x124>)
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	4a3a      	ldr	r2, [pc, #232]	; (8004d84 <MX_GPIO_Init+0x124>)
 8004c9c:	f043 0301 	orr.w	r3, r3, #1
 8004ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ca2:	4b38      	ldr	r3, [pc, #224]	; (8004d84 <MX_GPIO_Init+0x124>)
 8004ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	607b      	str	r3, [r7, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cae:	2300      	movs	r3, #0
 8004cb0:	603b      	str	r3, [r7, #0]
 8004cb2:	4b34      	ldr	r3, [pc, #208]	; (8004d84 <MX_GPIO_Init+0x124>)
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	4a33      	ldr	r2, [pc, #204]	; (8004d84 <MX_GPIO_Init+0x124>)
 8004cb8:	f043 0302 	orr.w	r3, r3, #2
 8004cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8004cbe:	4b31      	ldr	r3, [pc, #196]	; (8004d84 <MX_GPIO_Init+0x124>)
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	603b      	str	r3, [r7, #0]
 8004cc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SWREV_3_Pin|SWREV_2_Pin|SWREV_1_Pin|SWDIR_3_Pin
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f24e 210f 	movw	r1, #57871	; 0xe20f
 8004cd0:	482d      	ldr	r0, [pc, #180]	; (8004d88 <MX_GPIO_Init+0x128>)
 8004cd2:	f001 fdff 	bl	80068d4 <HAL_GPIO_WritePin>
                          |SWDIR_2_Pin|SWDIR_1_Pin|EN_1_Pin|LED_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|LED_1_Pin|EXT_0_Pin|EXT_1_Pin
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f648 3110 	movw	r1, #35600	; 0x8b10
 8004cdc:	482b      	ldr	r0, [pc, #172]	; (8004d8c <MX_GPIO_Init+0x12c>)
 8004cde:	f001 fdf9 	bl	80068d4 <HAL_GPIO_WritePin>
                          |SPI3_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN_Pin|SPI2_CS_Pin|W55_RST_Pin|W55_INT_Pin
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f241 7138 	movw	r1, #5944	; 0x1738
 8004ce8:	4829      	ldr	r0, [pc, #164]	; (8004d90 <MX_GPIO_Init+0x130>)
 8004cea:	f001 fdf3 	bl	80068d4 <HAL_GPIO_WritePin>
                          |LED_2_Pin|EN_3_Pin|EN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SWREV_3_Pin|SWREV_2_Pin|SWREV_1_Pin|SWDIR_3_Pin
 8004cee:	f24e 230f 	movw	r3, #57871	; 0xe20f
 8004cf2:	60fb      	str	r3, [r7, #12]
                          |SWDIR_2_Pin|SWDIR_1_Pin|EN_1_Pin|LED_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d00:	f107 030c 	add.w	r3, r7, #12
 8004d04:	4619      	mov	r1, r3
 8004d06:	4820      	ldr	r0, [pc, #128]	; (8004d88 <MX_GPIO_Init+0x128>)
 8004d08:	f001 fc48 	bl	800659c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LED_1_Pin|EXT_0_Pin|EXT_1_Pin
 8004d0c:	f648 3310 	movw	r3, #35600	; 0x8b10
 8004d10:	60fb      	str	r3, [r7, #12]
                          |SPI3_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d12:	2301      	movs	r3, #1
 8004d14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d16:	2300      	movs	r3, #0
 8004d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d1e:	f107 030c 	add.w	r3, r7, #12
 8004d22:	4619      	mov	r1, r3
 8004d24:	4819      	ldr	r0, [pc, #100]	; (8004d8c <MX_GPIO_Init+0x12c>)
 8004d26:	f001 fc39 	bl	800659c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = PG_1_Pin|PG_2_Pin|OC_1_Pin|OC_2_Pin
 8004d2a:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8004d2e:	60fb      	str	r3, [r7, #12]
                          |OC_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d30:	2300      	movs	r3, #0
 8004d32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d34:	2300      	movs	r3, #0
 8004d36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d38:	f107 030c 	add.w	r3, r7, #12
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4812      	ldr	r0, [pc, #72]	; (8004d88 <MX_GPIO_Init+0x128>)
 8004d40:	f001 fc2c 	bl	800659c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PG_3_Pin;
 8004d44:	2304      	movs	r3, #4
 8004d46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PG_3_GPIO_Port, &GPIO_InitStruct);
 8004d50:	f107 030c 	add.w	r3, r7, #12
 8004d54:	4619      	mov	r1, r3
 8004d56:	480e      	ldr	r0, [pc, #56]	; (8004d90 <MX_GPIO_Init+0x130>)
 8004d58:	f001 fc20 	bl	800659c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PWR_EN_Pin|SPI2_CS_Pin|W55_RST_Pin|W55_INT_Pin
 8004d5c:	f241 7338 	movw	r3, #5944	; 0x1738
 8004d60:	60fb      	str	r3, [r7, #12]
                          |LED_2_Pin|EN_3_Pin|EN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d62:	2301      	movs	r3, #1
 8004d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d66:	2300      	movs	r3, #0
 8004d68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d6e:	f107 030c 	add.w	r3, r7, #12
 8004d72:	4619      	mov	r1, r3
 8004d74:	4806      	ldr	r0, [pc, #24]	; (8004d90 <MX_GPIO_Init+0x130>)
 8004d76:	f001 fc11 	bl	800659c <HAL_GPIO_Init>

}
 8004d7a:	bf00      	nop
 8004d7c:	3720      	adds	r7, #32
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40023800 	.word	0x40023800
 8004d88:	40020800 	.word	0x40020800
 8004d8c:	40020000 	.word	0x40020000
 8004d90:	40020400 	.word	0x40020400

08004d94 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004d98:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <MX_I2C1_Init+0x50>)
 8004d9a:	4a13      	ldr	r2, [pc, #76]	; (8004de8 <MX_I2C1_Init+0x54>)
 8004d9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004d9e:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <MX_I2C1_Init+0x50>)
 8004da0:	4a12      	ldr	r2, [pc, #72]	; (8004dec <MX_I2C1_Init+0x58>)
 8004da2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004da4:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <MX_I2C1_Init+0x50>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004daa:	4b0e      	ldr	r3, [pc, #56]	; (8004de4 <MX_I2C1_Init+0x50>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004db0:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <MX_I2C1_Init+0x50>)
 8004db2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004db6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004db8:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <MX_I2C1_Init+0x50>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004dbe:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <MX_I2C1_Init+0x50>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004dc4:	4b07      	ldr	r3, [pc, #28]	; (8004de4 <MX_I2C1_Init+0x50>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004dca:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <MX_I2C1_Init+0x50>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004dd0:	4804      	ldr	r0, [pc, #16]	; (8004de4 <MX_I2C1_Init+0x50>)
 8004dd2:	f001 fd99 	bl	8006908 <HAL_I2C_Init>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004ddc:	f000 f8d4 	bl	8004f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004de0:	bf00      	nop
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	20002c58 	.word	0x20002c58
 8004de8:	40005400 	.word	0x40005400
 8004dec:	000186a0 	.word	0x000186a0

08004df0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b08a      	sub	sp, #40	; 0x28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004df8:	f107 0314 	add.w	r3, r7, #20
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	605a      	str	r2, [r3, #4]
 8004e02:	609a      	str	r2, [r3, #8]
 8004e04:	60da      	str	r2, [r3, #12]
 8004e06:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a19      	ldr	r2, [pc, #100]	; (8004e74 <HAL_I2C_MspInit+0x84>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d12b      	bne.n	8004e6a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e12:	2300      	movs	r3, #0
 8004e14:	613b      	str	r3, [r7, #16]
 8004e16:	4b18      	ldr	r3, [pc, #96]	; (8004e78 <HAL_I2C_MspInit+0x88>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	4a17      	ldr	r2, [pc, #92]	; (8004e78 <HAL_I2C_MspInit+0x88>)
 8004e1c:	f043 0302 	orr.w	r3, r3, #2
 8004e20:	6313      	str	r3, [r2, #48]	; 0x30
 8004e22:	4b15      	ldr	r3, [pc, #84]	; (8004e78 <HAL_I2C_MspInit+0x88>)
 8004e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e2e:	23c0      	movs	r3, #192	; 0xc0
 8004e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e32:	2312      	movs	r3, #18
 8004e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e3e:	2304      	movs	r3, #4
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e42:	f107 0314 	add.w	r3, r7, #20
 8004e46:	4619      	mov	r1, r3
 8004e48:	480c      	ldr	r0, [pc, #48]	; (8004e7c <HAL_I2C_MspInit+0x8c>)
 8004e4a:	f001 fba7 	bl	800659c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	4b09      	ldr	r3, [pc, #36]	; (8004e78 <HAL_I2C_MspInit+0x88>)
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	4a08      	ldr	r2, [pc, #32]	; (8004e78 <HAL_I2C_MspInit+0x88>)
 8004e58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e5e:	4b06      	ldr	r3, [pc, #24]	; (8004e78 <HAL_I2C_MspInit+0x88>)
 8004e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8004e6a:	bf00      	nop
 8004e6c:	3728      	adds	r7, #40	; 0x28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40005400 	.word	0x40005400
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	40020400 	.word	0x40020400

08004e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004e84:	f000 fca0 	bl	80057c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004e88:	f000 f816 	bl	8004eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004e8c:	f7ff fee8 	bl	8004c60 <MX_GPIO_Init>
  MX_ADC1_Init();
 8004e90:	f7ff fd3a 	bl	8004908 <MX_ADC1_Init>
  MX_I2C1_Init();
 8004e94:	f7ff ff7e 	bl	8004d94 <MX_I2C1_Init>
  MX_SPI1_Init();
 8004e98:	f000 f87c 	bl	8004f94 <MX_SPI1_Init>
  MX_SPI2_Init();
 8004e9c:	f000 f8b2 	bl	8005004 <MX_SPI2_Init>
  MX_SPI3_Init();
 8004ea0:	f000 f8e8 	bl	8005074 <MX_SPI3_Init>
  MX_SPI5_Init();
 8004ea4:	f000 f91c 	bl	80050e0 <MX_SPI5_Init>
  MX_USART2_UART_Init();
 8004ea8:	f000 fbea 	bl	8005680 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8004eac:	f000 fb9c 	bl	80055e8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  application_main();
 8004eb0:	f7fc f8aa 	bl	8001008 <application_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004eb4:	e7fe      	b.n	8004eb4 <main+0x34>
	...

08004eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b094      	sub	sp, #80	; 0x50
 8004ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ebe:	f107 0320 	add.w	r3, r7, #32
 8004ec2:	2230      	movs	r2, #48	; 0x30
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f005 f878 	bl	8009fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ecc:	f107 030c 	add.w	r3, r7, #12
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	605a      	str	r2, [r3, #4]
 8004ed6:	609a      	str	r2, [r3, #8]
 8004ed8:	60da      	str	r2, [r3, #12]
 8004eda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004edc:	2300      	movs	r3, #0
 8004ede:	60bb      	str	r3, [r7, #8]
 8004ee0:	4b27      	ldr	r3, [pc, #156]	; (8004f80 <SystemClock_Config+0xc8>)
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee4:	4a26      	ldr	r2, [pc, #152]	; (8004f80 <SystemClock_Config+0xc8>)
 8004ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eea:	6413      	str	r3, [r2, #64]	; 0x40
 8004eec:	4b24      	ldr	r3, [pc, #144]	; (8004f80 <SystemClock_Config+0xc8>)
 8004eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef4:	60bb      	str	r3, [r7, #8]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ef8:	2300      	movs	r3, #0
 8004efa:	607b      	str	r3, [r7, #4]
 8004efc:	4b21      	ldr	r3, [pc, #132]	; (8004f84 <SystemClock_Config+0xcc>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a20      	ldr	r2, [pc, #128]	; (8004f84 <SystemClock_Config+0xcc>)
 8004f02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	4b1e      	ldr	r3, [pc, #120]	; (8004f84 <SystemClock_Config+0xcc>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f10:	607b      	str	r3, [r7, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004f14:	2302      	movs	r3, #2
 8004f16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004f1c:	2310      	movs	r3, #16
 8004f1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f20:	2302      	movs	r3, #2
 8004f22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004f24:	2300      	movs	r3, #0
 8004f26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004f28:	2308      	movs	r3, #8
 8004f2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004f2c:	2364      	movs	r3, #100	; 0x64
 8004f2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004f30:	2302      	movs	r3, #2
 8004f32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004f34:	2304      	movs	r3, #4
 8004f36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f38:	f107 0320 	add.w	r3, r7, #32
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f001 fe27 	bl	8006b90 <HAL_RCC_OscConfig>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004f48:	f000 f81e 	bl	8004f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f4c:	230f      	movs	r3, #15
 8004f4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f50:	2302      	movs	r3, #2
 8004f52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f54:	2300      	movs	r3, #0
 8004f56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004f62:	f107 030c 	add.w	r3, r7, #12
 8004f66:	2103      	movs	r1, #3
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f002 f889 	bl	8007080 <HAL_RCC_ClockConfig>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004f74:	f000 f808 	bl	8004f88 <Error_Handler>
  }
}
 8004f78:	bf00      	nop
 8004f7a:	3750      	adds	r7, #80	; 0x50
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	40023800 	.word	0x40023800
 8004f84:	40007000 	.word	0x40007000

08004f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004f8c:	b672      	cpsid	i
}
 8004f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004f90:	e7fe      	b.n	8004f90 <Error_Handler+0x8>
	...

08004f94 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi5;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8004f98:	4b18      	ldr	r3, [pc, #96]	; (8004ffc <MX_SPI1_Init+0x68>)
 8004f9a:	4a19      	ldr	r2, [pc, #100]	; (8005000 <MX_SPI1_Init+0x6c>)
 8004f9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004f9e:	4b17      	ldr	r3, [pc, #92]	; (8004ffc <MX_SPI1_Init+0x68>)
 8004fa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004fa4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8004fa6:	4b15      	ldr	r3, [pc, #84]	; (8004ffc <MX_SPI1_Init+0x68>)
 8004fa8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004fac:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004fae:	4b13      	ldr	r3, [pc, #76]	; (8004ffc <MX_SPI1_Init+0x68>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fb4:	4b11      	ldr	r3, [pc, #68]	; (8004ffc <MX_SPI1_Init+0x68>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004fba:	4b10      	ldr	r3, [pc, #64]	; (8004ffc <MX_SPI1_Init+0x68>)
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004fc0:	4b0e      	ldr	r3, [pc, #56]	; (8004ffc <MX_SPI1_Init+0x68>)
 8004fc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fc6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004fc8:	4b0c      	ldr	r3, [pc, #48]	; (8004ffc <MX_SPI1_Init+0x68>)
 8004fca:	2238      	movs	r2, #56	; 0x38
 8004fcc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004fce:	4b0b      	ldr	r3, [pc, #44]	; (8004ffc <MX_SPI1_Init+0x68>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004fd4:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <MX_SPI1_Init+0x68>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fda:	4b08      	ldr	r3, [pc, #32]	; (8004ffc <MX_SPI1_Init+0x68>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004fe0:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <MX_SPI1_Init+0x68>)
 8004fe2:	220a      	movs	r2, #10
 8004fe4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004fe6:	4805      	ldr	r0, [pc, #20]	; (8004ffc <MX_SPI1_Init+0x68>)
 8004fe8:	f002 fa2a 	bl	8007440 <HAL_SPI_Init>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8004ff2:	f7ff ffc9 	bl	8004f88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004ff6:	bf00      	nop
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20002cac 	.word	0x20002cac
 8005000:	40013000 	.word	0x40013000

08005004 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8005008:	4b18      	ldr	r3, [pc, #96]	; (800506c <MX_SPI2_Init+0x68>)
 800500a:	4a19      	ldr	r2, [pc, #100]	; (8005070 <MX_SPI2_Init+0x6c>)
 800500c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800500e:	4b17      	ldr	r3, [pc, #92]	; (800506c <MX_SPI2_Init+0x68>)
 8005010:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005014:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005016:	4b15      	ldr	r3, [pc, #84]	; (800506c <MX_SPI2_Init+0x68>)
 8005018:	2200      	movs	r2, #0
 800501a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800501c:	4b13      	ldr	r3, [pc, #76]	; (800506c <MX_SPI2_Init+0x68>)
 800501e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005022:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005024:	4b11      	ldr	r3, [pc, #68]	; (800506c <MX_SPI2_Init+0x68>)
 8005026:	2200      	movs	r2, #0
 8005028:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800502a:	4b10      	ldr	r3, [pc, #64]	; (800506c <MX_SPI2_Init+0x68>)
 800502c:	2200      	movs	r2, #0
 800502e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005030:	4b0e      	ldr	r3, [pc, #56]	; (800506c <MX_SPI2_Init+0x68>)
 8005032:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005036:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005038:	4b0c      	ldr	r3, [pc, #48]	; (800506c <MX_SPI2_Init+0x68>)
 800503a:	2210      	movs	r2, #16
 800503c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800503e:	4b0b      	ldr	r3, [pc, #44]	; (800506c <MX_SPI2_Init+0x68>)
 8005040:	2200      	movs	r2, #0
 8005042:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005044:	4b09      	ldr	r3, [pc, #36]	; (800506c <MX_SPI2_Init+0x68>)
 8005046:	2200      	movs	r2, #0
 8005048:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800504a:	4b08      	ldr	r3, [pc, #32]	; (800506c <MX_SPI2_Init+0x68>)
 800504c:	2200      	movs	r2, #0
 800504e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005050:	4b06      	ldr	r3, [pc, #24]	; (800506c <MX_SPI2_Init+0x68>)
 8005052:	220a      	movs	r2, #10
 8005054:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005056:	4805      	ldr	r0, [pc, #20]	; (800506c <MX_SPI2_Init+0x68>)
 8005058:	f002 f9f2 	bl	8007440 <HAL_SPI_Init>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8005062:	f7ff ff91 	bl	8004f88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005066:	bf00      	nop
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	20002d04 	.word	0x20002d04
 8005070:	40003800 	.word	0x40003800

08005074 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005078:	4b17      	ldr	r3, [pc, #92]	; (80050d8 <MX_SPI3_Init+0x64>)
 800507a:	4a18      	ldr	r2, [pc, #96]	; (80050dc <MX_SPI3_Init+0x68>)
 800507c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800507e:	4b16      	ldr	r3, [pc, #88]	; (80050d8 <MX_SPI3_Init+0x64>)
 8005080:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005084:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005086:	4b14      	ldr	r3, [pc, #80]	; (80050d8 <MX_SPI3_Init+0x64>)
 8005088:	2200      	movs	r2, #0
 800508a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800508c:	4b12      	ldr	r3, [pc, #72]	; (80050d8 <MX_SPI3_Init+0x64>)
 800508e:	2200      	movs	r2, #0
 8005090:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005092:	4b11      	ldr	r3, [pc, #68]	; (80050d8 <MX_SPI3_Init+0x64>)
 8005094:	2200      	movs	r2, #0
 8005096:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005098:	4b0f      	ldr	r3, [pc, #60]	; (80050d8 <MX_SPI3_Init+0x64>)
 800509a:	2200      	movs	r2, #0
 800509c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800509e:	4b0e      	ldr	r3, [pc, #56]	; (80050d8 <MX_SPI3_Init+0x64>)
 80050a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050a4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80050a6:	4b0c      	ldr	r3, [pc, #48]	; (80050d8 <MX_SPI3_Init+0x64>)
 80050a8:	2218      	movs	r2, #24
 80050aa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80050ac:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <MX_SPI3_Init+0x64>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80050b2:	4b09      	ldr	r3, [pc, #36]	; (80050d8 <MX_SPI3_Init+0x64>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050b8:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <MX_SPI3_Init+0x64>)
 80050ba:	2200      	movs	r2, #0
 80050bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80050be:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <MX_SPI3_Init+0x64>)
 80050c0:	220a      	movs	r2, #10
 80050c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80050c4:	4804      	ldr	r0, [pc, #16]	; (80050d8 <MX_SPI3_Init+0x64>)
 80050c6:	f002 f9bb 	bl	8007440 <HAL_SPI_Init>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80050d0:	f7ff ff5a 	bl	8004f88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80050d4:	bf00      	nop
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	20002d5c 	.word	0x20002d5c
 80050dc:	40003c00 	.word	0x40003c00

080050e0 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80050e4:	4b17      	ldr	r3, [pc, #92]	; (8005144 <MX_SPI5_Init+0x64>)
 80050e6:	4a18      	ldr	r2, [pc, #96]	; (8005148 <MX_SPI5_Init+0x68>)
 80050e8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80050ea:	4b16      	ldr	r3, [pc, #88]	; (8005144 <MX_SPI5_Init+0x64>)
 80050ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80050f0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80050f2:	4b14      	ldr	r3, [pc, #80]	; (8005144 <MX_SPI5_Init+0x64>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80050f8:	4b12      	ldr	r3, [pc, #72]	; (8005144 <MX_SPI5_Init+0x64>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80050fe:	4b11      	ldr	r3, [pc, #68]	; (8005144 <MX_SPI5_Init+0x64>)
 8005100:	2200      	movs	r2, #0
 8005102:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005104:	4b0f      	ldr	r3, [pc, #60]	; (8005144 <MX_SPI5_Init+0x64>)
 8005106:	2200      	movs	r2, #0
 8005108:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800510a:	4b0e      	ldr	r3, [pc, #56]	; (8005144 <MX_SPI5_Init+0x64>)
 800510c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005110:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005112:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <MX_SPI5_Init+0x64>)
 8005114:	2200      	movs	r2, #0
 8005116:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005118:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <MX_SPI5_Init+0x64>)
 800511a:	2200      	movs	r2, #0
 800511c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800511e:	4b09      	ldr	r3, [pc, #36]	; (8005144 <MX_SPI5_Init+0x64>)
 8005120:	2200      	movs	r2, #0
 8005122:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005124:	4b07      	ldr	r3, [pc, #28]	; (8005144 <MX_SPI5_Init+0x64>)
 8005126:	2200      	movs	r2, #0
 8005128:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800512a:	4b06      	ldr	r3, [pc, #24]	; (8005144 <MX_SPI5_Init+0x64>)
 800512c:	220a      	movs	r2, #10
 800512e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8005130:	4804      	ldr	r0, [pc, #16]	; (8005144 <MX_SPI5_Init+0x64>)
 8005132:	f002 f985 	bl	8007440 <HAL_SPI_Init>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800513c:	f7ff ff24 	bl	8004f88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8005140:	bf00      	nop
 8005142:	bd80      	pop	{r7, pc}
 8005144:	20002db4 	.word	0x20002db4
 8005148:	40015000 	.word	0x40015000

0800514c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b090      	sub	sp, #64	; 0x40
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005154:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	605a      	str	r2, [r3, #4]
 800515e:	609a      	str	r2, [r3, #8]
 8005160:	60da      	str	r2, [r3, #12]
 8005162:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a74      	ldr	r2, [pc, #464]	; (800533c <HAL_SPI_MspInit+0x1f0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d12c      	bne.n	80051c8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800516e:	2300      	movs	r3, #0
 8005170:	62bb      	str	r3, [r7, #40]	; 0x28
 8005172:	4b73      	ldr	r3, [pc, #460]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 8005174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005176:	4a72      	ldr	r2, [pc, #456]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 8005178:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800517c:	6453      	str	r3, [r2, #68]	; 0x44
 800517e:	4b70      	ldr	r3, [pc, #448]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 8005180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28
 8005188:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800518a:	2300      	movs	r3, #0
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
 800518e:	4b6c      	ldr	r3, [pc, #432]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 8005190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005192:	4a6b      	ldr	r2, [pc, #428]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 8005194:	f043 0301 	orr.w	r3, r3, #1
 8005198:	6313      	str	r3, [r2, #48]	; 0x30
 800519a:	4b69      	ldr	r3, [pc, #420]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 800519c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80051a6:	23a0      	movs	r3, #160	; 0xa0
 80051a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051aa:	2302      	movs	r3, #2
 80051ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051b2:	2303      	movs	r3, #3
 80051b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80051b6:	2305      	movs	r3, #5
 80051b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051be:	4619      	mov	r1, r3
 80051c0:	4860      	ldr	r0, [pc, #384]	; (8005344 <HAL_SPI_MspInit+0x1f8>)
 80051c2:	f001 f9eb 	bl	800659c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80051c6:	e0b5      	b.n	8005334 <HAL_SPI_MspInit+0x1e8>
  else if(spiHandle->Instance==SPI2)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a5e      	ldr	r2, [pc, #376]	; (8005348 <HAL_SPI_MspInit+0x1fc>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d12d      	bne.n	800522e <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80051d2:	2300      	movs	r3, #0
 80051d4:	623b      	str	r3, [r7, #32]
 80051d6:	4b5a      	ldr	r3, [pc, #360]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	4a59      	ldr	r2, [pc, #356]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 80051dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80051e0:	6413      	str	r3, [r2, #64]	; 0x40
 80051e2:	4b57      	ldr	r3, [pc, #348]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ea:	623b      	str	r3, [r7, #32]
 80051ec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
 80051f2:	4b53      	ldr	r3, [pc, #332]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 80051f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f6:	4a52      	ldr	r2, [pc, #328]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 80051f8:	f043 0302 	orr.w	r3, r3, #2
 80051fc:	6313      	str	r3, [r2, #48]	; 0x30
 80051fe:	4b50      	ldr	r3, [pc, #320]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 8005200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	61fb      	str	r3, [r7, #28]
 8005208:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800520a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005210:	2302      	movs	r3, #2
 8005212:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005214:	2300      	movs	r3, #0
 8005216:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005218:	2303      	movs	r3, #3
 800521a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800521c:	2305      	movs	r3, #5
 800521e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005224:	4619      	mov	r1, r3
 8005226:	4849      	ldr	r0, [pc, #292]	; (800534c <HAL_SPI_MspInit+0x200>)
 8005228:	f001 f9b8 	bl	800659c <HAL_GPIO_Init>
}
 800522c:	e082      	b.n	8005334 <HAL_SPI_MspInit+0x1e8>
  else if(spiHandle->Instance==SPI3)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a47      	ldr	r2, [pc, #284]	; (8005350 <HAL_SPI_MspInit+0x204>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d12d      	bne.n	8005294 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005238:	2300      	movs	r3, #0
 800523a:	61bb      	str	r3, [r7, #24]
 800523c:	4b40      	ldr	r3, [pc, #256]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	4a3f      	ldr	r2, [pc, #252]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 8005242:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005246:	6413      	str	r3, [r2, #64]	; 0x40
 8005248:	4b3d      	ldr	r3, [pc, #244]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 800524a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005250:	61bb      	str	r3, [r7, #24]
 8005252:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	4b39      	ldr	r3, [pc, #228]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 800525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525c:	4a38      	ldr	r2, [pc, #224]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 800525e:	f043 0304 	orr.w	r3, r3, #4
 8005262:	6313      	str	r3, [r2, #48]	; 0x30
 8005264:	4b36      	ldr	r3, [pc, #216]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 8005266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	617b      	str	r3, [r7, #20]
 800526e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005270:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005274:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005276:	2302      	movs	r3, #2
 8005278:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800527a:	2300      	movs	r3, #0
 800527c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800527e:	2303      	movs	r3, #3
 8005280:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005282:	2306      	movs	r3, #6
 8005284:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005286:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800528a:	4619      	mov	r1, r3
 800528c:	4831      	ldr	r0, [pc, #196]	; (8005354 <HAL_SPI_MspInit+0x208>)
 800528e:	f001 f985 	bl	800659c <HAL_GPIO_Init>
}
 8005292:	e04f      	b.n	8005334 <HAL_SPI_MspInit+0x1e8>
  else if(spiHandle->Instance==SPI5)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a2f      	ldr	r2, [pc, #188]	; (8005358 <HAL_SPI_MspInit+0x20c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d14a      	bne.n	8005334 <HAL_SPI_MspInit+0x1e8>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800529e:	2300      	movs	r3, #0
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	4b27      	ldr	r3, [pc, #156]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 80052a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a6:	4a26      	ldr	r2, [pc, #152]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 80052a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052ac:	6453      	str	r3, [r2, #68]	; 0x44
 80052ae:	4b24      	ldr	r3, [pc, #144]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 80052b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052ba:	2300      	movs	r3, #0
 80052bc:	60fb      	str	r3, [r7, #12]
 80052be:	4b20      	ldr	r3, [pc, #128]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	4a1f      	ldr	r2, [pc, #124]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 80052c4:	f043 0302 	orr.w	r3, r3, #2
 80052c8:	6313      	str	r3, [r2, #48]	; 0x30
 80052ca:	4b1d      	ldr	r3, [pc, #116]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052d6:	2300      	movs	r3, #0
 80052d8:	60bb      	str	r3, [r7, #8]
 80052da:	4b19      	ldr	r3, [pc, #100]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	4a18      	ldr	r2, [pc, #96]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 80052e0:	f043 0301 	orr.w	r3, r3, #1
 80052e4:	6313      	str	r3, [r2, #48]	; 0x30
 80052e6:	4b16      	ldr	r3, [pc, #88]	; (8005340 <HAL_SPI_MspInit+0x1f4>)
 80052e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	60bb      	str	r3, [r7, #8]
 80052f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80052f2:	2303      	movs	r3, #3
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f6:	2302      	movs	r3, #2
 80052f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052fe:	2303      	movs	r3, #3
 8005300:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8005302:	2306      	movs	r3, #6
 8005304:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800530a:	4619      	mov	r1, r3
 800530c:	480f      	ldr	r0, [pc, #60]	; (800534c <HAL_SPI_MspInit+0x200>)
 800530e:	f001 f945 	bl	800659c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8005312:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005316:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005318:	2302      	movs	r3, #2
 800531a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531c:	2300      	movs	r3, #0
 800531e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005320:	2303      	movs	r3, #3
 8005322:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8005324:	2306      	movs	r3, #6
 8005326:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005328:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800532c:	4619      	mov	r1, r3
 800532e:	4805      	ldr	r0, [pc, #20]	; (8005344 <HAL_SPI_MspInit+0x1f8>)
 8005330:	f001 f934 	bl	800659c <HAL_GPIO_Init>
}
 8005334:	bf00      	nop
 8005336:	3740      	adds	r7, #64	; 0x40
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	40013000 	.word	0x40013000
 8005340:	40023800 	.word	0x40023800
 8005344:	40020000 	.word	0x40020000
 8005348:	40003800 	.word	0x40003800
 800534c:	40020400 	.word	0x40020400
 8005350:	40003c00 	.word	0x40003c00
 8005354:	40020800 	.word	0x40020800
 8005358:	40015000 	.word	0x40015000

0800535c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005362:	2300      	movs	r3, #0
 8005364:	607b      	str	r3, [r7, #4]
 8005366:	4b10      	ldr	r3, [pc, #64]	; (80053a8 <HAL_MspInit+0x4c>)
 8005368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536a:	4a0f      	ldr	r2, [pc, #60]	; (80053a8 <HAL_MspInit+0x4c>)
 800536c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005370:	6453      	str	r3, [r2, #68]	; 0x44
 8005372:	4b0d      	ldr	r3, [pc, #52]	; (80053a8 <HAL_MspInit+0x4c>)
 8005374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800537a:	607b      	str	r3, [r7, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800537e:	2300      	movs	r3, #0
 8005380:	603b      	str	r3, [r7, #0]
 8005382:	4b09      	ldr	r3, [pc, #36]	; (80053a8 <HAL_MspInit+0x4c>)
 8005384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005386:	4a08      	ldr	r2, [pc, #32]	; (80053a8 <HAL_MspInit+0x4c>)
 8005388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800538c:	6413      	str	r3, [r2, #64]	; 0x40
 800538e:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <HAL_MspInit+0x4c>)
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005396:	603b      	str	r3, [r7, #0]
 8005398:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40023800 	.word	0x40023800

080053ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80053b0:	e7fe      	b.n	80053b0 <NMI_Handler+0x4>

080053b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053b2:	b480      	push	{r7}
 80053b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053b6:	e7fe      	b.n	80053b6 <HardFault_Handler+0x4>

080053b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053bc:	e7fe      	b.n	80053bc <MemManage_Handler+0x4>

080053be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053be:	b480      	push	{r7}
 80053c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053c2:	e7fe      	b.n	80053c2 <BusFault_Handler+0x4>

080053c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053c8:	e7fe      	b.n	80053c8 <UsageFault_Handler+0x4>

080053ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80053ca:	b480      	push	{r7}
 80053cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80053ce:	bf00      	nop
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80053dc:	bf00      	nop
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80053e6:	b480      	push	{r7}
 80053e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80053ea:	bf00      	nop
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80053f8:	f000 fa38 	bl	800586c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80053fc:	bf00      	nop
 80053fe:	bd80      	pop	{r7, pc}

08005400 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8005404:	4802      	ldr	r0, [pc, #8]	; (8005410 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005406:	f002 fe75 	bl	80080f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800540a:	bf00      	nop
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20002e10 	.word	0x20002e10

08005414 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	USART2->SR &= ~USART_SR_RXNE_Msk;
 8005418:	4b06      	ldr	r3, [pc, #24]	; (8005434 <USART2_IRQHandler+0x20>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a05      	ldr	r2, [pc, #20]	; (8005434 <USART2_IRQHandler+0x20>)
 800541e:	f023 0320 	bic.w	r3, r3, #32
 8005422:	6013      	str	r3, [r2, #0]
	Uart_WriteBuffer(USART2->DR);
 8005424:	4b03      	ldr	r3, [pc, #12]	; (8005434 <USART2_IRQHandler+0x20>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	b2db      	uxtb	r3, r3
 800542a:	4618      	mov	r0, r3
 800542c:	f7ff f8e2 	bl	80045f4 <Uart_WriteBuffer>

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005430:	bf00      	nop
 8005432:	bd80      	pop	{r7, pc}
 8005434:	40004400 	.word	0x40004400

08005438 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
  return 1;
 800543c:	2301      	movs	r3, #1
}
 800543e:	4618      	mov	r0, r3
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <_kill>:

int _kill(int pid, int sig)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005452:	f004 fd73 	bl	8009f3c <__errno>
 8005456:	4603      	mov	r3, r0
 8005458:	2216      	movs	r2, #22
 800545a:	601a      	str	r2, [r3, #0]
  return -1;
 800545c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005460:	4618      	mov	r0, r3
 8005462:	3708      	adds	r7, #8
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <_exit>:

void _exit (int status)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005470:	f04f 31ff 	mov.w	r1, #4294967295
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff ffe7 	bl	8005448 <_kill>
  while (1) {}    /* Make sure we hang here */
 800547a:	e7fe      	b.n	800547a <_exit+0x12>

0800547c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005488:	2300      	movs	r3, #0
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	e00a      	b.n	80054a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800548e:	f3af 8000 	nop.w
 8005492:	4601      	mov	r1, r0
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	60ba      	str	r2, [r7, #8]
 800549a:	b2ca      	uxtb	r2, r1
 800549c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	3301      	adds	r3, #1
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	dbf0      	blt.n	800548e <_read+0x12>
  }

  return len;
 80054ac:	687b      	ldr	r3, [r7, #4]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b086      	sub	sp, #24
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	60f8      	str	r0, [r7, #12]
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	e009      	b.n	80054dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	60ba      	str	r2, [r7, #8]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	3301      	adds	r3, #1
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	dbf1      	blt.n	80054c8 <_write+0x12>
  }
  return len;
 80054e4:	687b      	ldr	r3, [r7, #4]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <_close>:

int _close(int file)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80054f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005516:	605a      	str	r2, [r3, #4]
  return 0;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <_isatty>:

int _isatty(int file)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800552e:	2301      	movs	r3, #1
}
 8005530:	4618      	mov	r0, r3
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
	...

08005558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005560:	4a14      	ldr	r2, [pc, #80]	; (80055b4 <_sbrk+0x5c>)
 8005562:	4b15      	ldr	r3, [pc, #84]	; (80055b8 <_sbrk+0x60>)
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800556c:	4b13      	ldr	r3, [pc, #76]	; (80055bc <_sbrk+0x64>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d102      	bne.n	800557a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005574:	4b11      	ldr	r3, [pc, #68]	; (80055bc <_sbrk+0x64>)
 8005576:	4a12      	ldr	r2, [pc, #72]	; (80055c0 <_sbrk+0x68>)
 8005578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800557a:	4b10      	ldr	r3, [pc, #64]	; (80055bc <_sbrk+0x64>)
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4413      	add	r3, r2
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	429a      	cmp	r2, r3
 8005586:	d207      	bcs.n	8005598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005588:	f004 fcd8 	bl	8009f3c <__errno>
 800558c:	4603      	mov	r3, r0
 800558e:	220c      	movs	r2, #12
 8005590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005592:	f04f 33ff 	mov.w	r3, #4294967295
 8005596:	e009      	b.n	80055ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005598:	4b08      	ldr	r3, [pc, #32]	; (80055bc <_sbrk+0x64>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800559e:	4b07      	ldr	r3, [pc, #28]	; (80055bc <_sbrk+0x64>)
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4413      	add	r3, r2
 80055a6:	4a05      	ldr	r2, [pc, #20]	; (80055bc <_sbrk+0x64>)
 80055a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80055aa:	68fb      	ldr	r3, [r7, #12]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	20020000 	.word	0x20020000
 80055b8:	00000400 	.word	0x00000400
 80055bc:	20002e0c 	.word	0x20002e0c
 80055c0:	20002ef8 	.word	0x20002ef8

080055c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055c8:	4b06      	ldr	r3, [pc, #24]	; (80055e4 <SystemInit+0x20>)
 80055ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ce:	4a05      	ldr	r2, [pc, #20]	; (80055e4 <SystemInit+0x20>)
 80055d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055d8:	bf00      	nop
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	e000ed00 	.word	0xe000ed00

080055e8 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80055ec:	4b0e      	ldr	r3, [pc, #56]	; (8005628 <MX_TIM10_Init+0x40>)
 80055ee:	4a0f      	ldr	r2, [pc, #60]	; (800562c <MX_TIM10_Init+0x44>)
 80055f0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 80055f2:	4b0d      	ldr	r3, [pc, #52]	; (8005628 <MX_TIM10_Init+0x40>)
 80055f4:	2263      	movs	r2, #99	; 0x63
 80055f6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055f8:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <MX_TIM10_Init+0x40>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1999;
 80055fe:	4b0a      	ldr	r3, [pc, #40]	; (8005628 <MX_TIM10_Init+0x40>)
 8005600:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8005604:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005606:	4b08      	ldr	r3, [pc, #32]	; (8005628 <MX_TIM10_Init+0x40>)
 8005608:	2200      	movs	r2, #0
 800560a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800560c:	4b06      	ldr	r3, [pc, #24]	; (8005628 <MX_TIM10_Init+0x40>)
 800560e:	2200      	movs	r2, #0
 8005610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005612:	4805      	ldr	r0, [pc, #20]	; (8005628 <MX_TIM10_Init+0x40>)
 8005614:	f002 fcbc 	bl	8007f90 <HAL_TIM_Base_Init>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800561e:	f7ff fcb3 	bl	8004f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8005622:	bf00      	nop
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20002e10 	.word	0x20002e10
 800562c:	40014400 	.word	0x40014400

08005630 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a0e      	ldr	r2, [pc, #56]	; (8005678 <HAL_TIM_Base_MspInit+0x48>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d115      	bne.n	800566e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005642:	2300      	movs	r3, #0
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	4b0d      	ldr	r3, [pc, #52]	; (800567c <HAL_TIM_Base_MspInit+0x4c>)
 8005648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564a:	4a0c      	ldr	r2, [pc, #48]	; (800567c <HAL_TIM_Base_MspInit+0x4c>)
 800564c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005650:	6453      	str	r3, [r2, #68]	; 0x44
 8005652:	4b0a      	ldr	r3, [pc, #40]	; (800567c <HAL_TIM_Base_MspInit+0x4c>)
 8005654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800565e:	2200      	movs	r2, #0
 8005660:	2100      	movs	r1, #0
 8005662:	2019      	movs	r0, #25
 8005664:	f000 fc6f 	bl	8005f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005668:	2019      	movs	r0, #25
 800566a:	f000 fc88 	bl	8005f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800566e:	bf00      	nop
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	40014400 	.word	0x40014400
 800567c:	40023800 	.word	0x40023800

08005680 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005684:	4b11      	ldr	r3, [pc, #68]	; (80056cc <MX_USART2_UART_Init+0x4c>)
 8005686:	4a12      	ldr	r2, [pc, #72]	; (80056d0 <MX_USART2_UART_Init+0x50>)
 8005688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800568a:	4b10      	ldr	r3, [pc, #64]	; (80056cc <MX_USART2_UART_Init+0x4c>)
 800568c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8005690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005692:	4b0e      	ldr	r3, [pc, #56]	; (80056cc <MX_USART2_UART_Init+0x4c>)
 8005694:	2200      	movs	r2, #0
 8005696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005698:	4b0c      	ldr	r3, [pc, #48]	; (80056cc <MX_USART2_UART_Init+0x4c>)
 800569a:	2200      	movs	r2, #0
 800569c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800569e:	4b0b      	ldr	r3, [pc, #44]	; (80056cc <MX_USART2_UART_Init+0x4c>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80056a4:	4b09      	ldr	r3, [pc, #36]	; (80056cc <MX_USART2_UART_Init+0x4c>)
 80056a6:	220c      	movs	r2, #12
 80056a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056aa:	4b08      	ldr	r3, [pc, #32]	; (80056cc <MX_USART2_UART_Init+0x4c>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80056b0:	4b06      	ldr	r3, [pc, #24]	; (80056cc <MX_USART2_UART_Init+0x4c>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80056b6:	4805      	ldr	r0, [pc, #20]	; (80056cc <MX_USART2_UART_Init+0x4c>)
 80056b8:	f002 fee0 	bl	800847c <HAL_UART_Init>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80056c2:	f7ff fc61 	bl	8004f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80056c6:	bf00      	nop
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20002e58 	.word	0x20002e58
 80056d0:	40004400 	.word	0x40004400

080056d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08a      	sub	sp, #40	; 0x28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056dc:	f107 0314 	add.w	r3, r7, #20
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	605a      	str	r2, [r3, #4]
 80056e6:	609a      	str	r2, [r3, #8]
 80056e8:	60da      	str	r2, [r3, #12]
 80056ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a1d      	ldr	r2, [pc, #116]	; (8005768 <HAL_UART_MspInit+0x94>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d133      	bne.n	800575e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80056f6:	2300      	movs	r3, #0
 80056f8:	613b      	str	r3, [r7, #16]
 80056fa:	4b1c      	ldr	r3, [pc, #112]	; (800576c <HAL_UART_MspInit+0x98>)
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fe:	4a1b      	ldr	r2, [pc, #108]	; (800576c <HAL_UART_MspInit+0x98>)
 8005700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005704:	6413      	str	r3, [r2, #64]	; 0x40
 8005706:	4b19      	ldr	r3, [pc, #100]	; (800576c <HAL_UART_MspInit+0x98>)
 8005708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800570e:	613b      	str	r3, [r7, #16]
 8005710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005712:	2300      	movs	r3, #0
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	4b15      	ldr	r3, [pc, #84]	; (800576c <HAL_UART_MspInit+0x98>)
 8005718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571a:	4a14      	ldr	r2, [pc, #80]	; (800576c <HAL_UART_MspInit+0x98>)
 800571c:	f043 0301 	orr.w	r3, r3, #1
 8005720:	6313      	str	r3, [r2, #48]	; 0x30
 8005722:	4b12      	ldr	r3, [pc, #72]	; (800576c <HAL_UART_MspInit+0x98>)
 8005724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	60fb      	str	r3, [r7, #12]
 800572c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800572e:	230c      	movs	r3, #12
 8005730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005732:	2302      	movs	r3, #2
 8005734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005736:	2300      	movs	r3, #0
 8005738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800573a:	2303      	movs	r3, #3
 800573c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800573e:	2307      	movs	r3, #7
 8005740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005742:	f107 0314 	add.w	r3, r7, #20
 8005746:	4619      	mov	r1, r3
 8005748:	4809      	ldr	r0, [pc, #36]	; (8005770 <HAL_UART_MspInit+0x9c>)
 800574a:	f000 ff27 	bl	800659c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800574e:	2200      	movs	r2, #0
 8005750:	2100      	movs	r1, #0
 8005752:	2026      	movs	r0, #38	; 0x26
 8005754:	f000 fbf7 	bl	8005f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005758:	2026      	movs	r0, #38	; 0x26
 800575a:	f000 fc10 	bl	8005f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800575e:	bf00      	nop
 8005760:	3728      	adds	r7, #40	; 0x28
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	40004400 	.word	0x40004400
 800576c:	40023800 	.word	0x40023800
 8005770:	40020000 	.word	0x40020000

08005774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80057ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005778:	480d      	ldr	r0, [pc, #52]	; (80057b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800577a:	490e      	ldr	r1, [pc, #56]	; (80057b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800577c:	4a0e      	ldr	r2, [pc, #56]	; (80057b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800577e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005780:	e002      	b.n	8005788 <LoopCopyDataInit>

08005782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005786:	3304      	adds	r3, #4

08005788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800578a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800578c:	d3f9      	bcc.n	8005782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800578e:	4a0b      	ldr	r2, [pc, #44]	; (80057bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005790:	4c0b      	ldr	r4, [pc, #44]	; (80057c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005794:	e001      	b.n	800579a <LoopFillZerobss>

08005796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005798:	3204      	adds	r2, #4

0800579a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800579a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800579c:	d3fb      	bcc.n	8005796 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800579e:	f7ff ff11 	bl	80055c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80057a2:	f004 fbd1 	bl	8009f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80057a6:	f7ff fb6b 	bl	8004e80 <main>
  bx  lr    
 80057aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80057ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80057b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057b4:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 80057b8:	0800ff18 	.word	0x0800ff18
  ldr r2, =_sbss
 80057bc:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 80057c0:	20002ef4 	.word	0x20002ef4

080057c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057c4:	e7fe      	b.n	80057c4 <ADC_IRQHandler>
	...

080057c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80057cc:	4b0e      	ldr	r3, [pc, #56]	; (8005808 <HAL_Init+0x40>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a0d      	ldr	r2, [pc, #52]	; (8005808 <HAL_Init+0x40>)
 80057d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80057d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80057d8:	4b0b      	ldr	r3, [pc, #44]	; (8005808 <HAL_Init+0x40>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a0a      	ldr	r2, [pc, #40]	; (8005808 <HAL_Init+0x40>)
 80057de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80057e4:	4b08      	ldr	r3, [pc, #32]	; (8005808 <HAL_Init+0x40>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a07      	ldr	r2, [pc, #28]	; (8005808 <HAL_Init+0x40>)
 80057ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80057f0:	2003      	movs	r0, #3
 80057f2:	f000 fb9d 	bl	8005f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80057f6:	200f      	movs	r0, #15
 80057f8:	f000 f808 	bl	800580c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80057fc:	f7ff fdae 	bl	800535c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	40023c00 	.word	0x40023c00

0800580c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005814:	4b12      	ldr	r3, [pc, #72]	; (8005860 <HAL_InitTick+0x54>)
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	4b12      	ldr	r3, [pc, #72]	; (8005864 <HAL_InitTick+0x58>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	4619      	mov	r1, r3
 800581e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005822:	fbb3 f3f1 	udiv	r3, r3, r1
 8005826:	fbb2 f3f3 	udiv	r3, r2, r3
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fbb5 	bl	8005f9a <HAL_SYSTICK_Config>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e00e      	b.n	8005858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b0f      	cmp	r3, #15
 800583e:	d80a      	bhi.n	8005856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005840:	2200      	movs	r2, #0
 8005842:	6879      	ldr	r1, [r7, #4]
 8005844:	f04f 30ff 	mov.w	r0, #4294967295
 8005848:	f000 fb7d 	bl	8005f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800584c:	4a06      	ldr	r2, [pc, #24]	; (8005868 <HAL_InitTick+0x5c>)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005852:	2300      	movs	r3, #0
 8005854:	e000      	b.n	8005858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
}
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	2000008c 	.word	0x2000008c
 8005864:	20000094 	.word	0x20000094
 8005868:	20000090 	.word	0x20000090

0800586c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005870:	4b06      	ldr	r3, [pc, #24]	; (800588c <HAL_IncTick+0x20>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	461a      	mov	r2, r3
 8005876:	4b06      	ldr	r3, [pc, #24]	; (8005890 <HAL_IncTick+0x24>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4413      	add	r3, r2
 800587c:	4a04      	ldr	r2, [pc, #16]	; (8005890 <HAL_IncTick+0x24>)
 800587e:	6013      	str	r3, [r2, #0]
}
 8005880:	bf00      	nop
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	20000094 	.word	0x20000094
 8005890:	20002e9c 	.word	0x20002e9c

08005894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  return uwTick;
 8005898:	4b03      	ldr	r3, [pc, #12]	; (80058a8 <HAL_GetTick+0x14>)
 800589a:	681b      	ldr	r3, [r3, #0]
}
 800589c:	4618      	mov	r0, r3
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	20002e9c 	.word	0x20002e9c

080058ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058b4:	2300      	movs	r3, #0
 80058b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e033      	b.n	800592a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d109      	bne.n	80058de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7ff f86e 	bl	80049ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	f003 0310 	and.w	r3, r3, #16
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d118      	bne.n	800591c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80058f2:	f023 0302 	bic.w	r3, r3, #2
 80058f6:	f043 0202 	orr.w	r2, r3, #2
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 f94a 	bl	8005b98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	f023 0303 	bic.w	r3, r3, #3
 8005912:	f043 0201 	orr.w	r2, r3, #1
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	641a      	str	r2, [r3, #64]	; 0x40
 800591a:	e001      	b.n	8005920 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005928:	7bfb      	ldrb	r3, [r7, #15]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
	...

08005934 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005948:	2b01      	cmp	r3, #1
 800594a:	d101      	bne.n	8005950 <HAL_ADC_ConfigChannel+0x1c>
 800594c:	2302      	movs	r3, #2
 800594e:	e113      	b.n	8005b78 <HAL_ADC_ConfigChannel+0x244>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b09      	cmp	r3, #9
 800595e:	d925      	bls.n	80059ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68d9      	ldr	r1, [r3, #12]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	b29b      	uxth	r3, r3
 800596c:	461a      	mov	r2, r3
 800596e:	4613      	mov	r3, r2
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	4413      	add	r3, r2
 8005974:	3b1e      	subs	r3, #30
 8005976:	2207      	movs	r2, #7
 8005978:	fa02 f303 	lsl.w	r3, r2, r3
 800597c:	43da      	mvns	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	400a      	ands	r2, r1
 8005984:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68d9      	ldr	r1, [r3, #12]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	b29b      	uxth	r3, r3
 8005996:	4618      	mov	r0, r3
 8005998:	4603      	mov	r3, r0
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	4403      	add	r3, r0
 800599e:	3b1e      	subs	r3, #30
 80059a0:	409a      	lsls	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	60da      	str	r2, [r3, #12]
 80059aa:	e022      	b.n	80059f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6919      	ldr	r1, [r3, #16]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	461a      	mov	r2, r3
 80059ba:	4613      	mov	r3, r2
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	4413      	add	r3, r2
 80059c0:	2207      	movs	r2, #7
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	43da      	mvns	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	400a      	ands	r2, r1
 80059ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6919      	ldr	r1, [r3, #16]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	689a      	ldr	r2, [r3, #8]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	b29b      	uxth	r3, r3
 80059e0:	4618      	mov	r0, r3
 80059e2:	4603      	mov	r3, r0
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	4403      	add	r3, r0
 80059e8:	409a      	lsls	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2b06      	cmp	r3, #6
 80059f8:	d824      	bhi.n	8005a44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	3b05      	subs	r3, #5
 8005a0c:	221f      	movs	r2, #31
 8005a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a12:	43da      	mvns	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	400a      	ands	r2, r1
 8005a1a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	4618      	mov	r0, r3
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	3b05      	subs	r3, #5
 8005a36:	fa00 f203 	lsl.w	r2, r0, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	635a      	str	r2, [r3, #52]	; 0x34
 8005a42:	e04c      	b.n	8005ade <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	2b0c      	cmp	r3, #12
 8005a4a:	d824      	bhi.n	8005a96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	4613      	mov	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	3b23      	subs	r3, #35	; 0x23
 8005a5e:	221f      	movs	r2, #31
 8005a60:	fa02 f303 	lsl.w	r3, r2, r3
 8005a64:	43da      	mvns	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	400a      	ands	r2, r1
 8005a6c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	4613      	mov	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	3b23      	subs	r3, #35	; 0x23
 8005a88:	fa00 f203 	lsl.w	r2, r0, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	631a      	str	r2, [r3, #48]	; 0x30
 8005a94:	e023      	b.n	8005ade <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	3b41      	subs	r3, #65	; 0x41
 8005aa8:	221f      	movs	r2, #31
 8005aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005aae:	43da      	mvns	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	400a      	ands	r2, r1
 8005ab6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	4613      	mov	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	3b41      	subs	r3, #65	; 0x41
 8005ad2:	fa00 f203 	lsl.w	r2, r0, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ade:	4b29      	ldr	r3, [pc, #164]	; (8005b84 <HAL_ADC_ConfigChannel+0x250>)
 8005ae0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a28      	ldr	r2, [pc, #160]	; (8005b88 <HAL_ADC_ConfigChannel+0x254>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d10f      	bne.n	8005b0c <HAL_ADC_ConfigChannel+0x1d8>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b12      	cmp	r3, #18
 8005af2:	d10b      	bne.n	8005b0c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a1d      	ldr	r2, [pc, #116]	; (8005b88 <HAL_ADC_ConfigChannel+0x254>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d12b      	bne.n	8005b6e <HAL_ADC_ConfigChannel+0x23a>
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a1c      	ldr	r2, [pc, #112]	; (8005b8c <HAL_ADC_ConfigChannel+0x258>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d003      	beq.n	8005b28 <HAL_ADC_ConfigChannel+0x1f4>
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b11      	cmp	r3, #17
 8005b26:	d122      	bne.n	8005b6e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a11      	ldr	r2, [pc, #68]	; (8005b8c <HAL_ADC_ConfigChannel+0x258>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d111      	bne.n	8005b6e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005b4a:	4b11      	ldr	r3, [pc, #68]	; (8005b90 <HAL_ADC_ConfigChannel+0x25c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a11      	ldr	r2, [pc, #68]	; (8005b94 <HAL_ADC_ConfigChannel+0x260>)
 8005b50:	fba2 2303 	umull	r2, r3, r2, r3
 8005b54:	0c9a      	lsrs	r2, r3, #18
 8005b56:	4613      	mov	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005b60:	e002      	b.n	8005b68 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	3b01      	subs	r3, #1
 8005b66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1f9      	bne.n	8005b62 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	40012300 	.word	0x40012300
 8005b88:	40012000 	.word	0x40012000
 8005b8c:	10000012 	.word	0x10000012
 8005b90:	2000008c 	.word	0x2000008c
 8005b94:	431bde83 	.word	0x431bde83

08005b98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ba0:	4b79      	ldr	r3, [pc, #484]	; (8005d88 <ADC_Init+0x1f0>)
 8005ba2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6859      	ldr	r1, [r3, #4]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	021a      	lsls	r2, r3, #8
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005bf0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6859      	ldr	r1, [r3, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689a      	ldr	r2, [r3, #8]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6899      	ldr	r1, [r3, #8]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68da      	ldr	r2, [r3, #12]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2a:	4a58      	ldr	r2, [pc, #352]	; (8005d8c <ADC_Init+0x1f4>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d022      	beq.n	8005c76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	6899      	ldr	r1, [r3, #8]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005c60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6899      	ldr	r1, [r3, #8]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	609a      	str	r2, [r3, #8]
 8005c74:	e00f      	b.n	8005c96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005c94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689a      	ldr	r2, [r3, #8]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0202 	bic.w	r2, r2, #2
 8005ca4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6899      	ldr	r1, [r3, #8]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	7e1b      	ldrb	r3, [r3, #24]
 8005cb0:	005a      	lsls	r2, r3, #1
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d01b      	beq.n	8005cfc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cd2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005ce2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6859      	ldr	r1, [r3, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	035a      	lsls	r2, r3, #13
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	605a      	str	r2, [r3, #4]
 8005cfa:	e007      	b.n	8005d0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	3b01      	subs	r3, #1
 8005d28:	051a      	lsls	r2, r3, #20
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005d40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6899      	ldr	r1, [r3, #8]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d4e:	025a      	lsls	r2, r3, #9
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6899      	ldr	r1, [r3, #8]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	029a      	lsls	r2, r3, #10
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	609a      	str	r2, [r3, #8]
}
 8005d7c:	bf00      	nop
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	40012300 	.word	0x40012300
 8005d8c:	0f000001 	.word	0x0f000001

08005d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f003 0307 	and.w	r3, r3, #7
 8005d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005da0:	4b0c      	ldr	r3, [pc, #48]	; (8005dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005dac:	4013      	ands	r3, r2
 8005dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005dc2:	4a04      	ldr	r2, [pc, #16]	; (8005dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	60d3      	str	r3, [r2, #12]
}
 8005dc8:	bf00      	nop
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	e000ed00 	.word	0xe000ed00

08005dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ddc:	4b04      	ldr	r3, [pc, #16]	; (8005df0 <__NVIC_GetPriorityGrouping+0x18>)
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	0a1b      	lsrs	r3, r3, #8
 8005de2:	f003 0307 	and.w	r3, r3, #7
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr
 8005df0:	e000ed00 	.word	0xe000ed00

08005df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	db0b      	blt.n	8005e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e06:	79fb      	ldrb	r3, [r7, #7]
 8005e08:	f003 021f 	and.w	r2, r3, #31
 8005e0c:	4907      	ldr	r1, [pc, #28]	; (8005e2c <__NVIC_EnableIRQ+0x38>)
 8005e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e12:	095b      	lsrs	r3, r3, #5
 8005e14:	2001      	movs	r0, #1
 8005e16:	fa00 f202 	lsl.w	r2, r0, r2
 8005e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	e000e100 	.word	0xe000e100

08005e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	6039      	str	r1, [r7, #0]
 8005e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	db0a      	blt.n	8005e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	490c      	ldr	r1, [pc, #48]	; (8005e7c <__NVIC_SetPriority+0x4c>)
 8005e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e4e:	0112      	lsls	r2, r2, #4
 8005e50:	b2d2      	uxtb	r2, r2
 8005e52:	440b      	add	r3, r1
 8005e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e58:	e00a      	b.n	8005e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	4908      	ldr	r1, [pc, #32]	; (8005e80 <__NVIC_SetPriority+0x50>)
 8005e60:	79fb      	ldrb	r3, [r7, #7]
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	3b04      	subs	r3, #4
 8005e68:	0112      	lsls	r2, r2, #4
 8005e6a:	b2d2      	uxtb	r2, r2
 8005e6c:	440b      	add	r3, r1
 8005e6e:	761a      	strb	r2, [r3, #24]
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	e000e100 	.word	0xe000e100
 8005e80:	e000ed00 	.word	0xe000ed00

08005e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b089      	sub	sp, #36	; 0x24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	f1c3 0307 	rsb	r3, r3, #7
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	bf28      	it	cs
 8005ea2:	2304      	movcs	r3, #4
 8005ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	3304      	adds	r3, #4
 8005eaa:	2b06      	cmp	r3, #6
 8005eac:	d902      	bls.n	8005eb4 <NVIC_EncodePriority+0x30>
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	3b03      	subs	r3, #3
 8005eb2:	e000      	b.n	8005eb6 <NVIC_EncodePriority+0x32>
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec2:	43da      	mvns	r2, r3
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	401a      	ands	r2, r3
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed6:	43d9      	mvns	r1, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005edc:	4313      	orrs	r3, r2
         );
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3724      	adds	r7, #36	; 0x24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
	...

08005eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005efc:	d301      	bcc.n	8005f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005efe:	2301      	movs	r3, #1
 8005f00:	e00f      	b.n	8005f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f02:	4a0a      	ldr	r2, [pc, #40]	; (8005f2c <SysTick_Config+0x40>)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f0a:	210f      	movs	r1, #15
 8005f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f10:	f7ff ff8e 	bl	8005e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f14:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <SysTick_Config+0x40>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f1a:	4b04      	ldr	r3, [pc, #16]	; (8005f2c <SysTick_Config+0x40>)
 8005f1c:	2207      	movs	r2, #7
 8005f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	e000e010 	.word	0xe000e010

08005f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff ff29 	bl	8005d90 <__NVIC_SetPriorityGrouping>
}
 8005f3e:	bf00      	nop
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b086      	sub	sp, #24
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	60b9      	str	r1, [r7, #8]
 8005f50:	607a      	str	r2, [r7, #4]
 8005f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005f54:	2300      	movs	r3, #0
 8005f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f58:	f7ff ff3e 	bl	8005dd8 <__NVIC_GetPriorityGrouping>
 8005f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	68b9      	ldr	r1, [r7, #8]
 8005f62:	6978      	ldr	r0, [r7, #20]
 8005f64:	f7ff ff8e 	bl	8005e84 <NVIC_EncodePriority>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f6e:	4611      	mov	r1, r2
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff ff5d 	bl	8005e30 <__NVIC_SetPriority>
}
 8005f76:	bf00      	nop
 8005f78:	3718      	adds	r7, #24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b082      	sub	sp, #8
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	4603      	mov	r3, r0
 8005f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff ff31 	bl	8005df4 <__NVIC_EnableIRQ>
}
 8005f92:	bf00      	nop
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b082      	sub	sp, #8
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7ff ffa2 	bl	8005eec <SysTick_Config>
 8005fa8:	4603      	mov	r3, r0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
	...

08005fb4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005fc6:	4b23      	ldr	r3, [pc, #140]	; (8006054 <HAL_FLASH_Program+0xa0>)
 8005fc8:	7e1b      	ldrb	r3, [r3, #24]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d101      	bne.n	8005fd2 <HAL_FLASH_Program+0x1e>
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e03b      	b.n	800604a <HAL_FLASH_Program+0x96>
 8005fd2:	4b20      	ldr	r3, [pc, #128]	; (8006054 <HAL_FLASH_Program+0xa0>)
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005fd8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005fdc:	f000 f87c 	bl	80060d8 <FLASH_WaitForLastOperation>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005fe4:	7dfb      	ldrb	r3, [r7, #23]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d12b      	bne.n	8006042 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d105      	bne.n	8005ffc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005ff0:	783b      	ldrb	r3, [r7, #0]
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	68b8      	ldr	r0, [r7, #8]
 8005ff6:	f000 f927 	bl	8006248 <FLASH_Program_Byte>
 8005ffa:	e016      	b.n	800602a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d105      	bne.n	800600e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8006002:	883b      	ldrh	r3, [r7, #0]
 8006004:	4619      	mov	r1, r3
 8006006:	68b8      	ldr	r0, [r7, #8]
 8006008:	f000 f8fa 	bl	8006200 <FLASH_Program_HalfWord>
 800600c:	e00d      	b.n	800602a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2b02      	cmp	r3, #2
 8006012:	d105      	bne.n	8006020 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	4619      	mov	r1, r3
 8006018:	68b8      	ldr	r0, [r7, #8]
 800601a:	f000 f8cf 	bl	80061bc <FLASH_Program_Word>
 800601e:	e004      	b.n	800602a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006024:	68b8      	ldr	r0, [r7, #8]
 8006026:	f000 f897 	bl	8006158 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800602a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800602e:	f000 f853 	bl	80060d8 <FLASH_WaitForLastOperation>
 8006032:	4603      	mov	r3, r0
 8006034:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8006036:	4b08      	ldr	r3, [pc, #32]	; (8006058 <HAL_FLASH_Program+0xa4>)
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	4a07      	ldr	r2, [pc, #28]	; (8006058 <HAL_FLASH_Program+0xa4>)
 800603c:	f023 0301 	bic.w	r3, r3, #1
 8006040:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006042:	4b04      	ldr	r3, [pc, #16]	; (8006054 <HAL_FLASH_Program+0xa0>)
 8006044:	2200      	movs	r2, #0
 8006046:	761a      	strb	r2, [r3, #24]
  
  return status;
 8006048:	7dfb      	ldrb	r3, [r7, #23]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20002ea0 	.word	0x20002ea0
 8006058:	40023c00 	.word	0x40023c00

0800605c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006066:	4b0b      	ldr	r3, [pc, #44]	; (8006094 <HAL_FLASH_Unlock+0x38>)
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	da0b      	bge.n	8006086 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800606e:	4b09      	ldr	r3, [pc, #36]	; (8006094 <HAL_FLASH_Unlock+0x38>)
 8006070:	4a09      	ldr	r2, [pc, #36]	; (8006098 <HAL_FLASH_Unlock+0x3c>)
 8006072:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006074:	4b07      	ldr	r3, [pc, #28]	; (8006094 <HAL_FLASH_Unlock+0x38>)
 8006076:	4a09      	ldr	r2, [pc, #36]	; (800609c <HAL_FLASH_Unlock+0x40>)
 8006078:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800607a:	4b06      	ldr	r3, [pc, #24]	; (8006094 <HAL_FLASH_Unlock+0x38>)
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	da01      	bge.n	8006086 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006086:	79fb      	ldrb	r3, [r7, #7]
}
 8006088:	4618      	mov	r0, r3
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	40023c00 	.word	0x40023c00
 8006098:	45670123 	.word	0x45670123
 800609c:	cdef89ab 	.word	0xcdef89ab

080060a0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80060a0:	b480      	push	{r7}
 80060a2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80060a4:	4b05      	ldr	r3, [pc, #20]	; (80060bc <HAL_FLASH_Lock+0x1c>)
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	4a04      	ldr	r2, [pc, #16]	; (80060bc <HAL_FLASH_Lock+0x1c>)
 80060aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060ae:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr
 80060bc:	40023c00 	.word	0x40023c00

080060c0 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80060c0:	b480      	push	{r7}
 80060c2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80060c4:	4b03      	ldr	r3, [pc, #12]	; (80060d4 <HAL_FLASH_GetError+0x14>)
 80060c6:	69db      	ldr	r3, [r3, #28]
}  
 80060c8:	4618      	mov	r0, r3
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	20002ea0 	.word	0x20002ea0

080060d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80060e4:	4b1a      	ldr	r3, [pc, #104]	; (8006150 <FLASH_WaitForLastOperation+0x78>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80060ea:	f7ff fbd3 	bl	8005894 <HAL_GetTick>
 80060ee:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80060f0:	e010      	b.n	8006114 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f8:	d00c      	beq.n	8006114 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d007      	beq.n	8006110 <FLASH_WaitForLastOperation+0x38>
 8006100:	f7ff fbc8 	bl	8005894 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	429a      	cmp	r2, r3
 800610e:	d201      	bcs.n	8006114 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e019      	b.n	8006148 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006114:	4b0f      	ldr	r3, [pc, #60]	; (8006154 <FLASH_WaitForLastOperation+0x7c>)
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1e8      	bne.n	80060f2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006120:	4b0c      	ldr	r3, [pc, #48]	; (8006154 <FLASH_WaitForLastOperation+0x7c>)
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800612c:	4b09      	ldr	r3, [pc, #36]	; (8006154 <FLASH_WaitForLastOperation+0x7c>)
 800612e:	2201      	movs	r2, #1
 8006130:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006132:	4b08      	ldr	r3, [pc, #32]	; (8006154 <FLASH_WaitForLastOperation+0x7c>)
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800613e:	f000 f8a5 	bl	800628c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e000      	b.n	8006148 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006146:	2300      	movs	r3, #0
  
}  
 8006148:	4618      	mov	r0, r3
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	20002ea0 	.word	0x20002ea0
 8006154:	40023c00 	.word	0x40023c00

08006158 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006164:	4b14      	ldr	r3, [pc, #80]	; (80061b8 <FLASH_Program_DoubleWord+0x60>)
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	4a13      	ldr	r2, [pc, #76]	; (80061b8 <FLASH_Program_DoubleWord+0x60>)
 800616a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800616e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006170:	4b11      	ldr	r3, [pc, #68]	; (80061b8 <FLASH_Program_DoubleWord+0x60>)
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	4a10      	ldr	r2, [pc, #64]	; (80061b8 <FLASH_Program_DoubleWord+0x60>)
 8006176:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800617a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800617c:	4b0e      	ldr	r3, [pc, #56]	; (80061b8 <FLASH_Program_DoubleWord+0x60>)
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	4a0d      	ldr	r2, [pc, #52]	; (80061b8 <FLASH_Program_DoubleWord+0x60>)
 8006182:	f043 0301 	orr.w	r3, r3, #1
 8006186:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800618e:	f3bf 8f6f 	isb	sy
}
 8006192:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006194:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006198:	f04f 0200 	mov.w	r2, #0
 800619c:	f04f 0300 	mov.w	r3, #0
 80061a0:	000a      	movs	r2, r1
 80061a2:	2300      	movs	r3, #0
 80061a4:	68f9      	ldr	r1, [r7, #12]
 80061a6:	3104      	adds	r1, #4
 80061a8:	4613      	mov	r3, r2
 80061aa:	600b      	str	r3, [r1, #0]
}
 80061ac:	bf00      	nop
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	40023c00 	.word	0x40023c00

080061bc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80061c6:	4b0d      	ldr	r3, [pc, #52]	; (80061fc <FLASH_Program_Word+0x40>)
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	4a0c      	ldr	r2, [pc, #48]	; (80061fc <FLASH_Program_Word+0x40>)
 80061cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80061d2:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <FLASH_Program_Word+0x40>)
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	4a09      	ldr	r2, [pc, #36]	; (80061fc <FLASH_Program_Word+0x40>)
 80061d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80061de:	4b07      	ldr	r3, [pc, #28]	; (80061fc <FLASH_Program_Word+0x40>)
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	4a06      	ldr	r2, [pc, #24]	; (80061fc <FLASH_Program_Word+0x40>)
 80061e4:	f043 0301 	orr.w	r3, r3, #1
 80061e8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	601a      	str	r2, [r3, #0]
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	40023c00 	.word	0x40023c00

08006200 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	460b      	mov	r3, r1
 800620a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800620c:	4b0d      	ldr	r3, [pc, #52]	; (8006244 <FLASH_Program_HalfWord+0x44>)
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	4a0c      	ldr	r2, [pc, #48]	; (8006244 <FLASH_Program_HalfWord+0x44>)
 8006212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006216:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006218:	4b0a      	ldr	r3, [pc, #40]	; (8006244 <FLASH_Program_HalfWord+0x44>)
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	4a09      	ldr	r2, [pc, #36]	; (8006244 <FLASH_Program_HalfWord+0x44>)
 800621e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006222:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006224:	4b07      	ldr	r3, [pc, #28]	; (8006244 <FLASH_Program_HalfWord+0x44>)
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	4a06      	ldr	r2, [pc, #24]	; (8006244 <FLASH_Program_HalfWord+0x44>)
 800622a:	f043 0301 	orr.w	r3, r3, #1
 800622e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	887a      	ldrh	r2, [r7, #2]
 8006234:	801a      	strh	r2, [r3, #0]
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	40023c00 	.word	0x40023c00

08006248 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006254:	4b0c      	ldr	r3, [pc, #48]	; (8006288 <FLASH_Program_Byte+0x40>)
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	4a0b      	ldr	r2, [pc, #44]	; (8006288 <FLASH_Program_Byte+0x40>)
 800625a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800625e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8006260:	4b09      	ldr	r3, [pc, #36]	; (8006288 <FLASH_Program_Byte+0x40>)
 8006262:	4a09      	ldr	r2, [pc, #36]	; (8006288 <FLASH_Program_Byte+0x40>)
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006268:	4b07      	ldr	r3, [pc, #28]	; (8006288 <FLASH_Program_Byte+0x40>)
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	4a06      	ldr	r2, [pc, #24]	; (8006288 <FLASH_Program_Byte+0x40>)
 800626e:	f043 0301 	orr.w	r3, r3, #1
 8006272:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	78fa      	ldrb	r2, [r7, #3]
 8006278:	701a      	strb	r2, [r3, #0]
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	40023c00 	.word	0x40023c00

0800628c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8006290:	4b2f      	ldr	r3, [pc, #188]	; (8006350 <FLASH_SetErrorCode+0xc4>)
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f003 0310 	and.w	r3, r3, #16
 8006298:	2b00      	cmp	r3, #0
 800629a:	d008      	beq.n	80062ae <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800629c:	4b2d      	ldr	r3, [pc, #180]	; (8006354 <FLASH_SetErrorCode+0xc8>)
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	f043 0310 	orr.w	r3, r3, #16
 80062a4:	4a2b      	ldr	r2, [pc, #172]	; (8006354 <FLASH_SetErrorCode+0xc8>)
 80062a6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80062a8:	4b29      	ldr	r3, [pc, #164]	; (8006350 <FLASH_SetErrorCode+0xc4>)
 80062aa:	2210      	movs	r2, #16
 80062ac:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80062ae:	4b28      	ldr	r3, [pc, #160]	; (8006350 <FLASH_SetErrorCode+0xc4>)
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f003 0320 	and.w	r3, r3, #32
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d008      	beq.n	80062cc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80062ba:	4b26      	ldr	r3, [pc, #152]	; (8006354 <FLASH_SetErrorCode+0xc8>)
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	f043 0308 	orr.w	r3, r3, #8
 80062c2:	4a24      	ldr	r2, [pc, #144]	; (8006354 <FLASH_SetErrorCode+0xc8>)
 80062c4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80062c6:	4b22      	ldr	r3, [pc, #136]	; (8006350 <FLASH_SetErrorCode+0xc4>)
 80062c8:	2220      	movs	r2, #32
 80062ca:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80062cc:	4b20      	ldr	r3, [pc, #128]	; (8006350 <FLASH_SetErrorCode+0xc4>)
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d008      	beq.n	80062ea <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80062d8:	4b1e      	ldr	r3, [pc, #120]	; (8006354 <FLASH_SetErrorCode+0xc8>)
 80062da:	69db      	ldr	r3, [r3, #28]
 80062dc:	f043 0304 	orr.w	r3, r3, #4
 80062e0:	4a1c      	ldr	r2, [pc, #112]	; (8006354 <FLASH_SetErrorCode+0xc8>)
 80062e2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80062e4:	4b1a      	ldr	r3, [pc, #104]	; (8006350 <FLASH_SetErrorCode+0xc4>)
 80062e6:	2240      	movs	r2, #64	; 0x40
 80062e8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80062ea:	4b19      	ldr	r3, [pc, #100]	; (8006350 <FLASH_SetErrorCode+0xc4>)
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d008      	beq.n	8006308 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80062f6:	4b17      	ldr	r3, [pc, #92]	; (8006354 <FLASH_SetErrorCode+0xc8>)
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	f043 0302 	orr.w	r3, r3, #2
 80062fe:	4a15      	ldr	r2, [pc, #84]	; (8006354 <FLASH_SetErrorCode+0xc8>)
 8006300:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006302:	4b13      	ldr	r3, [pc, #76]	; (8006350 <FLASH_SetErrorCode+0xc4>)
 8006304:	2280      	movs	r2, #128	; 0x80
 8006306:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8006308:	4b11      	ldr	r3, [pc, #68]	; (8006350 <FLASH_SetErrorCode+0xc4>)
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006310:	2b00      	cmp	r3, #0
 8006312:	d009      	beq.n	8006328 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8006314:	4b0f      	ldr	r3, [pc, #60]	; (8006354 <FLASH_SetErrorCode+0xc8>)
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	f043 0301 	orr.w	r3, r3, #1
 800631c:	4a0d      	ldr	r2, [pc, #52]	; (8006354 <FLASH_SetErrorCode+0xc8>)
 800631e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8006320:	4b0b      	ldr	r3, [pc, #44]	; (8006350 <FLASH_SetErrorCode+0xc4>)
 8006322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006326:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006328:	4b09      	ldr	r3, [pc, #36]	; (8006350 <FLASH_SetErrorCode+0xc4>)
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d008      	beq.n	8006346 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006334:	4b07      	ldr	r3, [pc, #28]	; (8006354 <FLASH_SetErrorCode+0xc8>)
 8006336:	69db      	ldr	r3, [r3, #28]
 8006338:	f043 0320 	orr.w	r3, r3, #32
 800633c:	4a05      	ldr	r2, [pc, #20]	; (8006354 <FLASH_SetErrorCode+0xc8>)
 800633e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006340:	4b03      	ldr	r3, [pc, #12]	; (8006350 <FLASH_SetErrorCode+0xc4>)
 8006342:	2202      	movs	r2, #2
 8006344:	60da      	str	r2, [r3, #12]
  }
}
 8006346:	bf00      	nop
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	40023c00 	.word	0x40023c00
 8006354:	20002ea0 	.word	0x20002ea0

08006358 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8006366:	2300      	movs	r3, #0
 8006368:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800636a:	4b31      	ldr	r3, [pc, #196]	; (8006430 <HAL_FLASHEx_Erase+0xd8>)
 800636c:	7e1b      	ldrb	r3, [r3, #24]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d101      	bne.n	8006376 <HAL_FLASHEx_Erase+0x1e>
 8006372:	2302      	movs	r3, #2
 8006374:	e058      	b.n	8006428 <HAL_FLASHEx_Erase+0xd0>
 8006376:	4b2e      	ldr	r3, [pc, #184]	; (8006430 <HAL_FLASHEx_Erase+0xd8>)
 8006378:	2201      	movs	r2, #1
 800637a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800637c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006380:	f7ff feaa 	bl	80060d8 <FLASH_WaitForLastOperation>
 8006384:	4603      	mov	r3, r0
 8006386:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006388:	7bfb      	ldrb	r3, [r7, #15]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d148      	bne.n	8006420 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	f04f 32ff 	mov.w	r2, #4294967295
 8006394:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d115      	bne.n	80063ca <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	4619      	mov	r1, r3
 80063aa:	4610      	mov	r0, r2
 80063ac:	f000 f844 	bl	8006438 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80063b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80063b4:	f7ff fe90 	bl	80060d8 <FLASH_WaitForLastOperation>
 80063b8:	4603      	mov	r3, r0
 80063ba:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80063bc:	4b1d      	ldr	r3, [pc, #116]	; (8006434 <HAL_FLASHEx_Erase+0xdc>)
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	4a1c      	ldr	r2, [pc, #112]	; (8006434 <HAL_FLASHEx_Erase+0xdc>)
 80063c2:	f023 0304 	bic.w	r3, r3, #4
 80063c6:	6113      	str	r3, [r2, #16]
 80063c8:	e028      	b.n	800641c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	60bb      	str	r3, [r7, #8]
 80063d0:	e01c      	b.n	800640c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	4619      	mov	r1, r3
 80063da:	68b8      	ldr	r0, [r7, #8]
 80063dc:	f000 f850 	bl	8006480 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80063e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80063e4:	f7ff fe78 	bl	80060d8 <FLASH_WaitForLastOperation>
 80063e8:	4603      	mov	r3, r0
 80063ea:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80063ec:	4b11      	ldr	r3, [pc, #68]	; (8006434 <HAL_FLASHEx_Erase+0xdc>)
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	4a10      	ldr	r2, [pc, #64]	; (8006434 <HAL_FLASHEx_Erase+0xdc>)
 80063f2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80063f6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	601a      	str	r2, [r3, #0]
          break;
 8006404:	e00a      	b.n	800641c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	3301      	adds	r3, #1
 800640a:	60bb      	str	r3, [r7, #8]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	4413      	add	r3, r2
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	429a      	cmp	r2, r3
 800641a:	d3da      	bcc.n	80063d2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800641c:	f000 f878 	bl	8006510 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006420:	4b03      	ldr	r3, [pc, #12]	; (8006430 <HAL_FLASHEx_Erase+0xd8>)
 8006422:	2200      	movs	r2, #0
 8006424:	761a      	strb	r2, [r3, #24]

  return status;
 8006426:	7bfb      	ldrb	r3, [r7, #15]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	20002ea0 	.word	0x20002ea0
 8006434:	40023c00 	.word	0x40023c00

08006438 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	4603      	mov	r3, r0
 8006440:	6039      	str	r1, [r7, #0]
 8006442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006444:	4b0d      	ldr	r3, [pc, #52]	; (800647c <FLASH_MassErase+0x44>)
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	4a0c      	ldr	r2, [pc, #48]	; (800647c <FLASH_MassErase+0x44>)
 800644a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800644e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8006450:	4b0a      	ldr	r3, [pc, #40]	; (800647c <FLASH_MassErase+0x44>)
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	4a09      	ldr	r2, [pc, #36]	; (800647c <FLASH_MassErase+0x44>)
 8006456:	f043 0304 	orr.w	r3, r3, #4
 800645a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800645c:	4b07      	ldr	r3, [pc, #28]	; (800647c <FLASH_MassErase+0x44>)
 800645e:	691a      	ldr	r2, [r3, #16]
 8006460:	79fb      	ldrb	r3, [r7, #7]
 8006462:	021b      	lsls	r3, r3, #8
 8006464:	4313      	orrs	r3, r2
 8006466:	4a05      	ldr	r2, [pc, #20]	; (800647c <FLASH_MassErase+0x44>)
 8006468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800646c:	6113      	str	r3, [r2, #16]
}
 800646e:	bf00      	nop
 8006470:	370c      	adds	r7, #12
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	40023c00 	.word	0x40023c00

08006480 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800648c:	2300      	movs	r3, #0
 800648e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006490:	78fb      	ldrb	r3, [r7, #3]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d102      	bne.n	800649c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8006496:	2300      	movs	r3, #0
 8006498:	60fb      	str	r3, [r7, #12]
 800649a:	e010      	b.n	80064be <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800649c:	78fb      	ldrb	r3, [r7, #3]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d103      	bne.n	80064aa <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80064a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	e009      	b.n	80064be <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80064aa:	78fb      	ldrb	r3, [r7, #3]
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d103      	bne.n	80064b8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80064b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064b4:	60fb      	str	r3, [r7, #12]
 80064b6:	e002      	b.n	80064be <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80064b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80064bc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80064be:	4b13      	ldr	r3, [pc, #76]	; (800650c <FLASH_Erase_Sector+0x8c>)
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	4a12      	ldr	r2, [pc, #72]	; (800650c <FLASH_Erase_Sector+0x8c>)
 80064c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80064ca:	4b10      	ldr	r3, [pc, #64]	; (800650c <FLASH_Erase_Sector+0x8c>)
 80064cc:	691a      	ldr	r2, [r3, #16]
 80064ce:	490f      	ldr	r1, [pc, #60]	; (800650c <FLASH_Erase_Sector+0x8c>)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80064d6:	4b0d      	ldr	r3, [pc, #52]	; (800650c <FLASH_Erase_Sector+0x8c>)
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	4a0c      	ldr	r2, [pc, #48]	; (800650c <FLASH_Erase_Sector+0x8c>)
 80064dc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80064e0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80064e2:	4b0a      	ldr	r3, [pc, #40]	; (800650c <FLASH_Erase_Sector+0x8c>)
 80064e4:	691a      	ldr	r2, [r3, #16]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	00db      	lsls	r3, r3, #3
 80064ea:	4313      	orrs	r3, r2
 80064ec:	4a07      	ldr	r2, [pc, #28]	; (800650c <FLASH_Erase_Sector+0x8c>)
 80064ee:	f043 0302 	orr.w	r3, r3, #2
 80064f2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80064f4:	4b05      	ldr	r3, [pc, #20]	; (800650c <FLASH_Erase_Sector+0x8c>)
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	4a04      	ldr	r2, [pc, #16]	; (800650c <FLASH_Erase_Sector+0x8c>)
 80064fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064fe:	6113      	str	r3, [r2, #16]
}
 8006500:	bf00      	nop
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	40023c00 	.word	0x40023c00

08006510 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8006514:	4b20      	ldr	r3, [pc, #128]	; (8006598 <FLASH_FlushCaches+0x88>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800651c:	2b00      	cmp	r3, #0
 800651e:	d017      	beq.n	8006550 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006520:	4b1d      	ldr	r3, [pc, #116]	; (8006598 <FLASH_FlushCaches+0x88>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a1c      	ldr	r2, [pc, #112]	; (8006598 <FLASH_FlushCaches+0x88>)
 8006526:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800652a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800652c:	4b1a      	ldr	r3, [pc, #104]	; (8006598 <FLASH_FlushCaches+0x88>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a19      	ldr	r2, [pc, #100]	; (8006598 <FLASH_FlushCaches+0x88>)
 8006532:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006536:	6013      	str	r3, [r2, #0]
 8006538:	4b17      	ldr	r3, [pc, #92]	; (8006598 <FLASH_FlushCaches+0x88>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a16      	ldr	r2, [pc, #88]	; (8006598 <FLASH_FlushCaches+0x88>)
 800653e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006542:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006544:	4b14      	ldr	r3, [pc, #80]	; (8006598 <FLASH_FlushCaches+0x88>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a13      	ldr	r2, [pc, #76]	; (8006598 <FLASH_FlushCaches+0x88>)
 800654a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800654e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8006550:	4b11      	ldr	r3, [pc, #68]	; (8006598 <FLASH_FlushCaches+0x88>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006558:	2b00      	cmp	r3, #0
 800655a:	d017      	beq.n	800658c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800655c:	4b0e      	ldr	r3, [pc, #56]	; (8006598 <FLASH_FlushCaches+0x88>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a0d      	ldr	r2, [pc, #52]	; (8006598 <FLASH_FlushCaches+0x88>)
 8006562:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006566:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006568:	4b0b      	ldr	r3, [pc, #44]	; (8006598 <FLASH_FlushCaches+0x88>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a0a      	ldr	r2, [pc, #40]	; (8006598 <FLASH_FlushCaches+0x88>)
 800656e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006572:	6013      	str	r3, [r2, #0]
 8006574:	4b08      	ldr	r3, [pc, #32]	; (8006598 <FLASH_FlushCaches+0x88>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a07      	ldr	r2, [pc, #28]	; (8006598 <FLASH_FlushCaches+0x88>)
 800657a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800657e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006580:	4b05      	ldr	r3, [pc, #20]	; (8006598 <FLASH_FlushCaches+0x88>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a04      	ldr	r2, [pc, #16]	; (8006598 <FLASH_FlushCaches+0x88>)
 8006586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800658a:	6013      	str	r3, [r2, #0]
  }
}
 800658c:	bf00      	nop
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	40023c00 	.word	0x40023c00

0800659c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800659c:	b480      	push	{r7}
 800659e:	b089      	sub	sp, #36	; 0x24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80065b2:	2300      	movs	r3, #0
 80065b4:	61fb      	str	r3, [r7, #28]
 80065b6:	e159      	b.n	800686c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80065b8:	2201      	movs	r2, #1
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	fa02 f303 	lsl.w	r3, r2, r3
 80065c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	4013      	ands	r3, r2
 80065ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	f040 8148 	bne.w	8006866 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f003 0303 	and.w	r3, r3, #3
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d005      	beq.n	80065ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d130      	bne.n	8006650 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	005b      	lsls	r3, r3, #1
 80065f8:	2203      	movs	r2, #3
 80065fa:	fa02 f303 	lsl.w	r3, r2, r3
 80065fe:	43db      	mvns	r3, r3
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	4013      	ands	r3, r2
 8006604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	fa02 f303 	lsl.w	r3, r2, r3
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	4313      	orrs	r3, r2
 8006616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	69ba      	ldr	r2, [r7, #24]
 800661c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006624:	2201      	movs	r2, #1
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	fa02 f303 	lsl.w	r3, r2, r3
 800662c:	43db      	mvns	r3, r3
 800662e:	69ba      	ldr	r2, [r7, #24]
 8006630:	4013      	ands	r3, r2
 8006632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	091b      	lsrs	r3, r3, #4
 800663a:	f003 0201 	and.w	r2, r3, #1
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	fa02 f303 	lsl.w	r3, r2, r3
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	4313      	orrs	r3, r2
 8006648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69ba      	ldr	r2, [r7, #24]
 800664e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f003 0303 	and.w	r3, r3, #3
 8006658:	2b03      	cmp	r3, #3
 800665a:	d017      	beq.n	800668c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	2203      	movs	r2, #3
 8006668:	fa02 f303 	lsl.w	r3, r2, r3
 800666c:	43db      	mvns	r3, r3
 800666e:	69ba      	ldr	r2, [r7, #24]
 8006670:	4013      	ands	r3, r2
 8006672:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	005b      	lsls	r3, r3, #1
 800667c:	fa02 f303 	lsl.w	r3, r2, r3
 8006680:	69ba      	ldr	r2, [r7, #24]
 8006682:	4313      	orrs	r3, r2
 8006684:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69ba      	ldr	r2, [r7, #24]
 800668a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f003 0303 	and.w	r3, r3, #3
 8006694:	2b02      	cmp	r3, #2
 8006696:	d123      	bne.n	80066e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	08da      	lsrs	r2, r3, #3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	3208      	adds	r2, #8
 80066a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	f003 0307 	and.w	r3, r3, #7
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	220f      	movs	r2, #15
 80066b0:	fa02 f303 	lsl.w	r3, r2, r3
 80066b4:	43db      	mvns	r3, r3
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	4013      	ands	r3, r2
 80066ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	691a      	ldr	r2, [r3, #16]
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	f003 0307 	and.w	r3, r3, #7
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	fa02 f303 	lsl.w	r3, r2, r3
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	08da      	lsrs	r2, r3, #3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	3208      	adds	r2, #8
 80066da:	69b9      	ldr	r1, [r7, #24]
 80066dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	005b      	lsls	r3, r3, #1
 80066ea:	2203      	movs	r2, #3
 80066ec:	fa02 f303 	lsl.w	r3, r2, r3
 80066f0:	43db      	mvns	r3, r3
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	4013      	ands	r3, r2
 80066f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f003 0203 	and.w	r2, r3, #3
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	fa02 f303 	lsl.w	r3, r2, r3
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	4313      	orrs	r3, r2
 800670c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 80a2 	beq.w	8006866 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006722:	2300      	movs	r3, #0
 8006724:	60fb      	str	r3, [r7, #12]
 8006726:	4b57      	ldr	r3, [pc, #348]	; (8006884 <HAL_GPIO_Init+0x2e8>)
 8006728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672a:	4a56      	ldr	r2, [pc, #344]	; (8006884 <HAL_GPIO_Init+0x2e8>)
 800672c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006730:	6453      	str	r3, [r2, #68]	; 0x44
 8006732:	4b54      	ldr	r3, [pc, #336]	; (8006884 <HAL_GPIO_Init+0x2e8>)
 8006734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800673e:	4a52      	ldr	r2, [pc, #328]	; (8006888 <HAL_GPIO_Init+0x2ec>)
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	089b      	lsrs	r3, r3, #2
 8006744:	3302      	adds	r3, #2
 8006746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800674a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	220f      	movs	r2, #15
 8006756:	fa02 f303 	lsl.w	r3, r2, r3
 800675a:	43db      	mvns	r3, r3
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	4013      	ands	r3, r2
 8006760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a49      	ldr	r2, [pc, #292]	; (800688c <HAL_GPIO_Init+0x2f0>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d019      	beq.n	800679e <HAL_GPIO_Init+0x202>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a48      	ldr	r2, [pc, #288]	; (8006890 <HAL_GPIO_Init+0x2f4>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d013      	beq.n	800679a <HAL_GPIO_Init+0x1fe>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a47      	ldr	r2, [pc, #284]	; (8006894 <HAL_GPIO_Init+0x2f8>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00d      	beq.n	8006796 <HAL_GPIO_Init+0x1fa>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a46      	ldr	r2, [pc, #280]	; (8006898 <HAL_GPIO_Init+0x2fc>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d007      	beq.n	8006792 <HAL_GPIO_Init+0x1f6>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a45      	ldr	r2, [pc, #276]	; (800689c <HAL_GPIO_Init+0x300>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d101      	bne.n	800678e <HAL_GPIO_Init+0x1f2>
 800678a:	2304      	movs	r3, #4
 800678c:	e008      	b.n	80067a0 <HAL_GPIO_Init+0x204>
 800678e:	2307      	movs	r3, #7
 8006790:	e006      	b.n	80067a0 <HAL_GPIO_Init+0x204>
 8006792:	2303      	movs	r3, #3
 8006794:	e004      	b.n	80067a0 <HAL_GPIO_Init+0x204>
 8006796:	2302      	movs	r3, #2
 8006798:	e002      	b.n	80067a0 <HAL_GPIO_Init+0x204>
 800679a:	2301      	movs	r3, #1
 800679c:	e000      	b.n	80067a0 <HAL_GPIO_Init+0x204>
 800679e:	2300      	movs	r3, #0
 80067a0:	69fa      	ldr	r2, [r7, #28]
 80067a2:	f002 0203 	and.w	r2, r2, #3
 80067a6:	0092      	lsls	r2, r2, #2
 80067a8:	4093      	lsls	r3, r2
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80067b0:	4935      	ldr	r1, [pc, #212]	; (8006888 <HAL_GPIO_Init+0x2ec>)
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	089b      	lsrs	r3, r3, #2
 80067b6:	3302      	adds	r3, #2
 80067b8:	69ba      	ldr	r2, [r7, #24]
 80067ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80067be:	4b38      	ldr	r3, [pc, #224]	; (80068a0 <HAL_GPIO_Init+0x304>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	43db      	mvns	r3, r3
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	4013      	ands	r3, r2
 80067cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	4313      	orrs	r3, r2
 80067e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80067e2:	4a2f      	ldr	r2, [pc, #188]	; (80068a0 <HAL_GPIO_Init+0x304>)
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80067e8:	4b2d      	ldr	r3, [pc, #180]	; (80068a0 <HAL_GPIO_Init+0x304>)
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	43db      	mvns	r3, r3
 80067f2:	69ba      	ldr	r2, [r7, #24]
 80067f4:	4013      	ands	r3, r2
 80067f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d003      	beq.n	800680c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	4313      	orrs	r3, r2
 800680a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800680c:	4a24      	ldr	r2, [pc, #144]	; (80068a0 <HAL_GPIO_Init+0x304>)
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006812:	4b23      	ldr	r3, [pc, #140]	; (80068a0 <HAL_GPIO_Init+0x304>)
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	43db      	mvns	r3, r3
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	4013      	ands	r3, r2
 8006820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	4313      	orrs	r3, r2
 8006834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006836:	4a1a      	ldr	r2, [pc, #104]	; (80068a0 <HAL_GPIO_Init+0x304>)
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800683c:	4b18      	ldr	r3, [pc, #96]	; (80068a0 <HAL_GPIO_Init+0x304>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	43db      	mvns	r3, r3
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	4013      	ands	r3, r2
 800684a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	4313      	orrs	r3, r2
 800685e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006860:	4a0f      	ldr	r2, [pc, #60]	; (80068a0 <HAL_GPIO_Init+0x304>)
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	3301      	adds	r3, #1
 800686a:	61fb      	str	r3, [r7, #28]
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	2b0f      	cmp	r3, #15
 8006870:	f67f aea2 	bls.w	80065b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006874:	bf00      	nop
 8006876:	bf00      	nop
 8006878:	3724      	adds	r7, #36	; 0x24
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	40023800 	.word	0x40023800
 8006888:	40013800 	.word	0x40013800
 800688c:	40020000 	.word	0x40020000
 8006890:	40020400 	.word	0x40020400
 8006894:	40020800 	.word	0x40020800
 8006898:	40020c00 	.word	0x40020c00
 800689c:	40021000 	.word	0x40021000
 80068a0:	40013c00 	.word	0x40013c00

080068a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	460b      	mov	r3, r1
 80068ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	691a      	ldr	r2, [r3, #16]
 80068b4:	887b      	ldrh	r3, [r7, #2]
 80068b6:	4013      	ands	r3, r2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80068bc:	2301      	movs	r3, #1
 80068be:	73fb      	strb	r3, [r7, #15]
 80068c0:	e001      	b.n	80068c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80068c2:	2300      	movs	r3, #0
 80068c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	460b      	mov	r3, r1
 80068de:	807b      	strh	r3, [r7, #2]
 80068e0:	4613      	mov	r3, r2
 80068e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80068e4:	787b      	ldrb	r3, [r7, #1]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80068ea:	887a      	ldrh	r2, [r7, #2]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80068f0:	e003      	b.n	80068fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80068f2:	887b      	ldrh	r3, [r7, #2]
 80068f4:	041a      	lsls	r2, r3, #16
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	619a      	str	r2, [r3, #24]
}
 80068fa:	bf00      	nop
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
	...

08006908 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e12b      	b.n	8006b72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d106      	bne.n	8006934 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7fe fa5e 	bl	8004df0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2224      	movs	r2, #36	; 0x24
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0201 	bic.w	r2, r2, #1
 800694a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800695a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800696a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800696c:	f000 fd40 	bl	80073f0 <HAL_RCC_GetPCLK1Freq>
 8006970:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	4a81      	ldr	r2, [pc, #516]	; (8006b7c <HAL_I2C_Init+0x274>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d807      	bhi.n	800698c <HAL_I2C_Init+0x84>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4a80      	ldr	r2, [pc, #512]	; (8006b80 <HAL_I2C_Init+0x278>)
 8006980:	4293      	cmp	r3, r2
 8006982:	bf94      	ite	ls
 8006984:	2301      	movls	r3, #1
 8006986:	2300      	movhi	r3, #0
 8006988:	b2db      	uxtb	r3, r3
 800698a:	e006      	b.n	800699a <HAL_I2C_Init+0x92>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	4a7d      	ldr	r2, [pc, #500]	; (8006b84 <HAL_I2C_Init+0x27c>)
 8006990:	4293      	cmp	r3, r2
 8006992:	bf94      	ite	ls
 8006994:	2301      	movls	r3, #1
 8006996:	2300      	movhi	r3, #0
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e0e7      	b.n	8006b72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	4a78      	ldr	r2, [pc, #480]	; (8006b88 <HAL_I2C_Init+0x280>)
 80069a6:	fba2 2303 	umull	r2, r3, r2, r3
 80069aa:	0c9b      	lsrs	r3, r3, #18
 80069ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	430a      	orrs	r2, r1
 80069c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	4a6a      	ldr	r2, [pc, #424]	; (8006b7c <HAL_I2C_Init+0x274>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d802      	bhi.n	80069dc <HAL_I2C_Init+0xd4>
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	3301      	adds	r3, #1
 80069da:	e009      	b.n	80069f0 <HAL_I2C_Init+0xe8>
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80069e2:	fb02 f303 	mul.w	r3, r2, r3
 80069e6:	4a69      	ldr	r2, [pc, #420]	; (8006b8c <HAL_I2C_Init+0x284>)
 80069e8:	fba2 2303 	umull	r2, r3, r2, r3
 80069ec:	099b      	lsrs	r3, r3, #6
 80069ee:	3301      	adds	r3, #1
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	6812      	ldr	r2, [r2, #0]
 80069f4:	430b      	orrs	r3, r1
 80069f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	69db      	ldr	r3, [r3, #28]
 80069fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006a02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	495c      	ldr	r1, [pc, #368]	; (8006b7c <HAL_I2C_Init+0x274>)
 8006a0c:	428b      	cmp	r3, r1
 8006a0e:	d819      	bhi.n	8006a44 <HAL_I2C_Init+0x13c>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	1e59      	subs	r1, r3, #1
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a1e:	1c59      	adds	r1, r3, #1
 8006a20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006a24:	400b      	ands	r3, r1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00a      	beq.n	8006a40 <HAL_I2C_Init+0x138>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	1e59      	subs	r1, r3, #1
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a38:	3301      	adds	r3, #1
 8006a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a3e:	e051      	b.n	8006ae4 <HAL_I2C_Init+0x1dc>
 8006a40:	2304      	movs	r3, #4
 8006a42:	e04f      	b.n	8006ae4 <HAL_I2C_Init+0x1dc>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d111      	bne.n	8006a70 <HAL_I2C_Init+0x168>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	1e58      	subs	r0, r3, #1
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6859      	ldr	r1, [r3, #4]
 8006a54:	460b      	mov	r3, r1
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	440b      	add	r3, r1
 8006a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a5e:	3301      	adds	r3, #1
 8006a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	bf0c      	ite	eq
 8006a68:	2301      	moveq	r3, #1
 8006a6a:	2300      	movne	r3, #0
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	e012      	b.n	8006a96 <HAL_I2C_Init+0x18e>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	1e58      	subs	r0, r3, #1
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6859      	ldr	r1, [r3, #4]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	440b      	add	r3, r1
 8006a7e:	0099      	lsls	r1, r3, #2
 8006a80:	440b      	add	r3, r1
 8006a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a86:	3301      	adds	r3, #1
 8006a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	bf0c      	ite	eq
 8006a90:	2301      	moveq	r3, #1
 8006a92:	2300      	movne	r3, #0
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d001      	beq.n	8006a9e <HAL_I2C_Init+0x196>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e022      	b.n	8006ae4 <HAL_I2C_Init+0x1dc>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10e      	bne.n	8006ac4 <HAL_I2C_Init+0x1bc>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	1e58      	subs	r0, r3, #1
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6859      	ldr	r1, [r3, #4]
 8006aae:	460b      	mov	r3, r1
 8006ab0:	005b      	lsls	r3, r3, #1
 8006ab2:	440b      	add	r3, r1
 8006ab4:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ab8:	3301      	adds	r3, #1
 8006aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ac2:	e00f      	b.n	8006ae4 <HAL_I2C_Init+0x1dc>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	1e58      	subs	r0, r3, #1
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6859      	ldr	r1, [r3, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	440b      	add	r3, r1
 8006ad2:	0099      	lsls	r1, r3, #2
 8006ad4:	440b      	add	r3, r1
 8006ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ada:	3301      	adds	r3, #1
 8006adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ae0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ae4:	6879      	ldr	r1, [r7, #4]
 8006ae6:	6809      	ldr	r1, [r1, #0]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69da      	ldr	r2, [r3, #28]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	430a      	orrs	r2, r1
 8006b06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006b12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	6911      	ldr	r1, [r2, #16]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	68d2      	ldr	r2, [r2, #12]
 8006b1e:	4311      	orrs	r1, r2
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6812      	ldr	r2, [r2, #0]
 8006b24:	430b      	orrs	r3, r1
 8006b26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	695a      	ldr	r2, [r3, #20]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	431a      	orrs	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	430a      	orrs	r2, r1
 8006b42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f042 0201 	orr.w	r2, r2, #1
 8006b52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	000186a0 	.word	0x000186a0
 8006b80:	001e847f 	.word	0x001e847f
 8006b84:	003d08ff 	.word	0x003d08ff
 8006b88:	431bde83 	.word	0x431bde83
 8006b8c:	10624dd3 	.word	0x10624dd3

08006b90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d101      	bne.n	8006ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e267      	b.n	8007072 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d075      	beq.n	8006c9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bae:	4b88      	ldr	r3, [pc, #544]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 030c 	and.w	r3, r3, #12
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d00c      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bba:	4b85      	ldr	r3, [pc, #532]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bc2:	2b08      	cmp	r3, #8
 8006bc4:	d112      	bne.n	8006bec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bc6:	4b82      	ldr	r3, [pc, #520]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bd2:	d10b      	bne.n	8006bec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bd4:	4b7e      	ldr	r3, [pc, #504]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d05b      	beq.n	8006c98 <HAL_RCC_OscConfig+0x108>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d157      	bne.n	8006c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e242      	b.n	8007072 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bf4:	d106      	bne.n	8006c04 <HAL_RCC_OscConfig+0x74>
 8006bf6:	4b76      	ldr	r3, [pc, #472]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a75      	ldr	r2, [pc, #468]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c00:	6013      	str	r3, [r2, #0]
 8006c02:	e01d      	b.n	8006c40 <HAL_RCC_OscConfig+0xb0>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c0c:	d10c      	bne.n	8006c28 <HAL_RCC_OscConfig+0x98>
 8006c0e:	4b70      	ldr	r3, [pc, #448]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a6f      	ldr	r2, [pc, #444]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c18:	6013      	str	r3, [r2, #0]
 8006c1a:	4b6d      	ldr	r3, [pc, #436]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a6c      	ldr	r2, [pc, #432]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c24:	6013      	str	r3, [r2, #0]
 8006c26:	e00b      	b.n	8006c40 <HAL_RCC_OscConfig+0xb0>
 8006c28:	4b69      	ldr	r3, [pc, #420]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a68      	ldr	r2, [pc, #416]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c32:	6013      	str	r3, [r2, #0]
 8006c34:	4b66      	ldr	r3, [pc, #408]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a65      	ldr	r2, [pc, #404]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d013      	beq.n	8006c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c48:	f7fe fe24 	bl	8005894 <HAL_GetTick>
 8006c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c4e:	e008      	b.n	8006c62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c50:	f7fe fe20 	bl	8005894 <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	2b64      	cmp	r3, #100	; 0x64
 8006c5c:	d901      	bls.n	8006c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	e207      	b.n	8007072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c62:	4b5b      	ldr	r3, [pc, #364]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d0f0      	beq.n	8006c50 <HAL_RCC_OscConfig+0xc0>
 8006c6e:	e014      	b.n	8006c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c70:	f7fe fe10 	bl	8005894 <HAL_GetTick>
 8006c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006c78:	f7fe fe0c 	bl	8005894 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b64      	cmp	r3, #100	; 0x64
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e1f3      	b.n	8007072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c8a:	4b51      	ldr	r3, [pc, #324]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1f0      	bne.n	8006c78 <HAL_RCC_OscConfig+0xe8>
 8006c96:	e000      	b.n	8006c9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d063      	beq.n	8006d6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ca6:	4b4a      	ldr	r3, [pc, #296]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f003 030c 	and.w	r3, r3, #12
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d00b      	beq.n	8006cca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cb2:	4b47      	ldr	r3, [pc, #284]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006cb4:	689b      	ldr	r3, [r3, #8]
 8006cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006cba:	2b08      	cmp	r3, #8
 8006cbc:	d11c      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cbe:	4b44      	ldr	r3, [pc, #272]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d116      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cca:	4b41      	ldr	r3, [pc, #260]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d005      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x152>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d001      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e1c7      	b.n	8007072 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ce2:	4b3b      	ldr	r3, [pc, #236]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	4937      	ldr	r1, [pc, #220]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cf6:	e03a      	b.n	8006d6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d020      	beq.n	8006d42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d00:	4b34      	ldr	r3, [pc, #208]	; (8006dd4 <HAL_RCC_OscConfig+0x244>)
 8006d02:	2201      	movs	r2, #1
 8006d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d06:	f7fe fdc5 	bl	8005894 <HAL_GetTick>
 8006d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d0c:	e008      	b.n	8006d20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d0e:	f7fe fdc1 	bl	8005894 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d901      	bls.n	8006d20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e1a8      	b.n	8007072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d20:	4b2b      	ldr	r3, [pc, #172]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0302 	and.w	r3, r3, #2
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d0f0      	beq.n	8006d0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d2c:	4b28      	ldr	r3, [pc, #160]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	00db      	lsls	r3, r3, #3
 8006d3a:	4925      	ldr	r1, [pc, #148]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	600b      	str	r3, [r1, #0]
 8006d40:	e015      	b.n	8006d6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d42:	4b24      	ldr	r3, [pc, #144]	; (8006dd4 <HAL_RCC_OscConfig+0x244>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d48:	f7fe fda4 	bl	8005894 <HAL_GetTick>
 8006d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d4e:	e008      	b.n	8006d62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d50:	f7fe fda0 	bl	8005894 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d901      	bls.n	8006d62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e187      	b.n	8007072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d62:	4b1b      	ldr	r3, [pc, #108]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0302 	and.w	r3, r3, #2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1f0      	bne.n	8006d50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 0308 	and.w	r3, r3, #8
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d036      	beq.n	8006de8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d016      	beq.n	8006db0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d82:	4b15      	ldr	r3, [pc, #84]	; (8006dd8 <HAL_RCC_OscConfig+0x248>)
 8006d84:	2201      	movs	r2, #1
 8006d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d88:	f7fe fd84 	bl	8005894 <HAL_GetTick>
 8006d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d8e:	e008      	b.n	8006da2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d90:	f7fe fd80 	bl	8005894 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d901      	bls.n	8006da2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e167      	b.n	8007072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006da2:	4b0b      	ldr	r3, [pc, #44]	; (8006dd0 <HAL_RCC_OscConfig+0x240>)
 8006da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0f0      	beq.n	8006d90 <HAL_RCC_OscConfig+0x200>
 8006dae:	e01b      	b.n	8006de8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006db0:	4b09      	ldr	r3, [pc, #36]	; (8006dd8 <HAL_RCC_OscConfig+0x248>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006db6:	f7fe fd6d 	bl	8005894 <HAL_GetTick>
 8006dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dbc:	e00e      	b.n	8006ddc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006dbe:	f7fe fd69 	bl	8005894 <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d907      	bls.n	8006ddc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e150      	b.n	8007072 <HAL_RCC_OscConfig+0x4e2>
 8006dd0:	40023800 	.word	0x40023800
 8006dd4:	42470000 	.word	0x42470000
 8006dd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ddc:	4b88      	ldr	r3, [pc, #544]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006de0:	f003 0302 	and.w	r3, r3, #2
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1ea      	bne.n	8006dbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0304 	and.w	r3, r3, #4
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f000 8097 	beq.w	8006f24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006df6:	2300      	movs	r3, #0
 8006df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006dfa:	4b81      	ldr	r3, [pc, #516]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10f      	bne.n	8006e26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e06:	2300      	movs	r3, #0
 8006e08:	60bb      	str	r3, [r7, #8]
 8006e0a:	4b7d      	ldr	r3, [pc, #500]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0e:	4a7c      	ldr	r2, [pc, #496]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e14:	6413      	str	r3, [r2, #64]	; 0x40
 8006e16:	4b7a      	ldr	r3, [pc, #488]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e1e:	60bb      	str	r3, [r7, #8]
 8006e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e22:	2301      	movs	r3, #1
 8006e24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e26:	4b77      	ldr	r3, [pc, #476]	; (8007004 <HAL_RCC_OscConfig+0x474>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d118      	bne.n	8006e64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e32:	4b74      	ldr	r3, [pc, #464]	; (8007004 <HAL_RCC_OscConfig+0x474>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a73      	ldr	r2, [pc, #460]	; (8007004 <HAL_RCC_OscConfig+0x474>)
 8006e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e3e:	f7fe fd29 	bl	8005894 <HAL_GetTick>
 8006e42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e44:	e008      	b.n	8006e58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e46:	f7fe fd25 	bl	8005894 <HAL_GetTick>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d901      	bls.n	8006e58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e10c      	b.n	8007072 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e58:	4b6a      	ldr	r3, [pc, #424]	; (8007004 <HAL_RCC_OscConfig+0x474>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d0f0      	beq.n	8006e46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d106      	bne.n	8006e7a <HAL_RCC_OscConfig+0x2ea>
 8006e6c:	4b64      	ldr	r3, [pc, #400]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e70:	4a63      	ldr	r2, [pc, #396]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006e72:	f043 0301 	orr.w	r3, r3, #1
 8006e76:	6713      	str	r3, [r2, #112]	; 0x70
 8006e78:	e01c      	b.n	8006eb4 <HAL_RCC_OscConfig+0x324>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	2b05      	cmp	r3, #5
 8006e80:	d10c      	bne.n	8006e9c <HAL_RCC_OscConfig+0x30c>
 8006e82:	4b5f      	ldr	r3, [pc, #380]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e86:	4a5e      	ldr	r2, [pc, #376]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006e88:	f043 0304 	orr.w	r3, r3, #4
 8006e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e8e:	4b5c      	ldr	r3, [pc, #368]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e92:	4a5b      	ldr	r2, [pc, #364]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006e94:	f043 0301 	orr.w	r3, r3, #1
 8006e98:	6713      	str	r3, [r2, #112]	; 0x70
 8006e9a:	e00b      	b.n	8006eb4 <HAL_RCC_OscConfig+0x324>
 8006e9c:	4b58      	ldr	r3, [pc, #352]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea0:	4a57      	ldr	r2, [pc, #348]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006ea2:	f023 0301 	bic.w	r3, r3, #1
 8006ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ea8:	4b55      	ldr	r3, [pc, #340]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eac:	4a54      	ldr	r2, [pc, #336]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006eae:	f023 0304 	bic.w	r3, r3, #4
 8006eb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d015      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ebc:	f7fe fcea 	bl	8005894 <HAL_GetTick>
 8006ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ec2:	e00a      	b.n	8006eda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ec4:	f7fe fce6 	bl	8005894 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e0cb      	b.n	8007072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eda:	4b49      	ldr	r3, [pc, #292]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ede:	f003 0302 	and.w	r3, r3, #2
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0ee      	beq.n	8006ec4 <HAL_RCC_OscConfig+0x334>
 8006ee6:	e014      	b.n	8006f12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ee8:	f7fe fcd4 	bl	8005894 <HAL_GetTick>
 8006eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006eee:	e00a      	b.n	8006f06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ef0:	f7fe fcd0 	bl	8005894 <HAL_GetTick>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d901      	bls.n	8006f06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e0b5      	b.n	8007072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f06:	4b3e      	ldr	r3, [pc, #248]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0a:	f003 0302 	and.w	r3, r3, #2
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1ee      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f12:	7dfb      	ldrb	r3, [r7, #23]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d105      	bne.n	8006f24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f18:	4b39      	ldr	r3, [pc, #228]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1c:	4a38      	ldr	r2, [pc, #224]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	699b      	ldr	r3, [r3, #24]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 80a1 	beq.w	8007070 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f2e:	4b34      	ldr	r3, [pc, #208]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f003 030c 	and.w	r3, r3, #12
 8006f36:	2b08      	cmp	r3, #8
 8006f38:	d05c      	beq.n	8006ff4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d141      	bne.n	8006fc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f42:	4b31      	ldr	r3, [pc, #196]	; (8007008 <HAL_RCC_OscConfig+0x478>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f48:	f7fe fca4 	bl	8005894 <HAL_GetTick>
 8006f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f4e:	e008      	b.n	8006f62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f50:	f7fe fca0 	bl	8005894 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e087      	b.n	8007072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f62:	4b27      	ldr	r3, [pc, #156]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1f0      	bne.n	8006f50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	69da      	ldr	r2, [r3, #28]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	431a      	orrs	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7c:	019b      	lsls	r3, r3, #6
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f84:	085b      	lsrs	r3, r3, #1
 8006f86:	3b01      	subs	r3, #1
 8006f88:	041b      	lsls	r3, r3, #16
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f90:	061b      	lsls	r3, r3, #24
 8006f92:	491b      	ldr	r1, [pc, #108]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f98:	4b1b      	ldr	r3, [pc, #108]	; (8007008 <HAL_RCC_OscConfig+0x478>)
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f9e:	f7fe fc79 	bl	8005894 <HAL_GetTick>
 8006fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fa4:	e008      	b.n	8006fb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fa6:	f7fe fc75 	bl	8005894 <HAL_GetTick>
 8006faa:	4602      	mov	r2, r0
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d901      	bls.n	8006fb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e05c      	b.n	8007072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fb8:	4b11      	ldr	r3, [pc, #68]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d0f0      	beq.n	8006fa6 <HAL_RCC_OscConfig+0x416>
 8006fc4:	e054      	b.n	8007070 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fc6:	4b10      	ldr	r3, [pc, #64]	; (8007008 <HAL_RCC_OscConfig+0x478>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fcc:	f7fe fc62 	bl	8005894 <HAL_GetTick>
 8006fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fd2:	e008      	b.n	8006fe6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fd4:	f7fe fc5e 	bl	8005894 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d901      	bls.n	8006fe6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e045      	b.n	8007072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fe6:	4b06      	ldr	r3, [pc, #24]	; (8007000 <HAL_RCC_OscConfig+0x470>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1f0      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x444>
 8006ff2:	e03d      	b.n	8007070 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d107      	bne.n	800700c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e038      	b.n	8007072 <HAL_RCC_OscConfig+0x4e2>
 8007000:	40023800 	.word	0x40023800
 8007004:	40007000 	.word	0x40007000
 8007008:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800700c:	4b1b      	ldr	r3, [pc, #108]	; (800707c <HAL_RCC_OscConfig+0x4ec>)
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d028      	beq.n	800706c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007024:	429a      	cmp	r2, r3
 8007026:	d121      	bne.n	800706c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007032:	429a      	cmp	r2, r3
 8007034:	d11a      	bne.n	800706c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800703c:	4013      	ands	r3, r2
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007042:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007044:	4293      	cmp	r3, r2
 8007046:	d111      	bne.n	800706c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007052:	085b      	lsrs	r3, r3, #1
 8007054:	3b01      	subs	r3, #1
 8007056:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007058:	429a      	cmp	r2, r3
 800705a:	d107      	bne.n	800706c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007066:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007068:	429a      	cmp	r2, r3
 800706a:	d001      	beq.n	8007070 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e000      	b.n	8007072 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3718      	adds	r7, #24
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	40023800 	.word	0x40023800

08007080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d101      	bne.n	8007094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e0cc      	b.n	800722e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007094:	4b68      	ldr	r3, [pc, #416]	; (8007238 <HAL_RCC_ClockConfig+0x1b8>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	683a      	ldr	r2, [r7, #0]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d90c      	bls.n	80070bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070a2:	4b65      	ldr	r3, [pc, #404]	; (8007238 <HAL_RCC_ClockConfig+0x1b8>)
 80070a4:	683a      	ldr	r2, [r7, #0]
 80070a6:	b2d2      	uxtb	r2, r2
 80070a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070aa:	4b63      	ldr	r3, [pc, #396]	; (8007238 <HAL_RCC_ClockConfig+0x1b8>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0307 	and.w	r3, r3, #7
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d001      	beq.n	80070bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e0b8      	b.n	800722e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d020      	beq.n	800710a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0304 	and.w	r3, r3, #4
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d005      	beq.n	80070e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070d4:	4b59      	ldr	r3, [pc, #356]	; (800723c <HAL_RCC_ClockConfig+0x1bc>)
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	4a58      	ldr	r2, [pc, #352]	; (800723c <HAL_RCC_ClockConfig+0x1bc>)
 80070da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80070de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0308 	and.w	r3, r3, #8
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d005      	beq.n	80070f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070ec:	4b53      	ldr	r3, [pc, #332]	; (800723c <HAL_RCC_ClockConfig+0x1bc>)
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	4a52      	ldr	r2, [pc, #328]	; (800723c <HAL_RCC_ClockConfig+0x1bc>)
 80070f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80070f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070f8:	4b50      	ldr	r3, [pc, #320]	; (800723c <HAL_RCC_ClockConfig+0x1bc>)
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	494d      	ldr	r1, [pc, #308]	; (800723c <HAL_RCC_ClockConfig+0x1bc>)
 8007106:	4313      	orrs	r3, r2
 8007108:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	2b00      	cmp	r3, #0
 8007114:	d044      	beq.n	80071a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	2b01      	cmp	r3, #1
 800711c:	d107      	bne.n	800712e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800711e:	4b47      	ldr	r3, [pc, #284]	; (800723c <HAL_RCC_ClockConfig+0x1bc>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d119      	bne.n	800715e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e07f      	b.n	800722e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	2b02      	cmp	r3, #2
 8007134:	d003      	beq.n	800713e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800713a:	2b03      	cmp	r3, #3
 800713c:	d107      	bne.n	800714e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800713e:	4b3f      	ldr	r3, [pc, #252]	; (800723c <HAL_RCC_ClockConfig+0x1bc>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d109      	bne.n	800715e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e06f      	b.n	800722e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800714e:	4b3b      	ldr	r3, [pc, #236]	; (800723c <HAL_RCC_ClockConfig+0x1bc>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e067      	b.n	800722e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800715e:	4b37      	ldr	r3, [pc, #220]	; (800723c <HAL_RCC_ClockConfig+0x1bc>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f023 0203 	bic.w	r2, r3, #3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	4934      	ldr	r1, [pc, #208]	; (800723c <HAL_RCC_ClockConfig+0x1bc>)
 800716c:	4313      	orrs	r3, r2
 800716e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007170:	f7fe fb90 	bl	8005894 <HAL_GetTick>
 8007174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007176:	e00a      	b.n	800718e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007178:	f7fe fb8c 	bl	8005894 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	f241 3288 	movw	r2, #5000	; 0x1388
 8007186:	4293      	cmp	r3, r2
 8007188:	d901      	bls.n	800718e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e04f      	b.n	800722e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800718e:	4b2b      	ldr	r3, [pc, #172]	; (800723c <HAL_RCC_ClockConfig+0x1bc>)
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f003 020c 	and.w	r2, r3, #12
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	429a      	cmp	r2, r3
 800719e:	d1eb      	bne.n	8007178 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071a0:	4b25      	ldr	r3, [pc, #148]	; (8007238 <HAL_RCC_ClockConfig+0x1b8>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0307 	and.w	r3, r3, #7
 80071a8:	683a      	ldr	r2, [r7, #0]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d20c      	bcs.n	80071c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071ae:	4b22      	ldr	r3, [pc, #136]	; (8007238 <HAL_RCC_ClockConfig+0x1b8>)
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	b2d2      	uxtb	r2, r2
 80071b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071b6:	4b20      	ldr	r3, [pc, #128]	; (8007238 <HAL_RCC_ClockConfig+0x1b8>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0307 	and.w	r3, r3, #7
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d001      	beq.n	80071c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e032      	b.n	800722e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0304 	and.w	r3, r3, #4
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d008      	beq.n	80071e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071d4:	4b19      	ldr	r3, [pc, #100]	; (800723c <HAL_RCC_ClockConfig+0x1bc>)
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	4916      	ldr	r1, [pc, #88]	; (800723c <HAL_RCC_ClockConfig+0x1bc>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f003 0308 	and.w	r3, r3, #8
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d009      	beq.n	8007206 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071f2:	4b12      	ldr	r3, [pc, #72]	; (800723c <HAL_RCC_ClockConfig+0x1bc>)
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	00db      	lsls	r3, r3, #3
 8007200:	490e      	ldr	r1, [pc, #56]	; (800723c <HAL_RCC_ClockConfig+0x1bc>)
 8007202:	4313      	orrs	r3, r2
 8007204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007206:	f000 f821 	bl	800724c <HAL_RCC_GetSysClockFreq>
 800720a:	4602      	mov	r2, r0
 800720c:	4b0b      	ldr	r3, [pc, #44]	; (800723c <HAL_RCC_ClockConfig+0x1bc>)
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	091b      	lsrs	r3, r3, #4
 8007212:	f003 030f 	and.w	r3, r3, #15
 8007216:	490a      	ldr	r1, [pc, #40]	; (8007240 <HAL_RCC_ClockConfig+0x1c0>)
 8007218:	5ccb      	ldrb	r3, [r1, r3]
 800721a:	fa22 f303 	lsr.w	r3, r2, r3
 800721e:	4a09      	ldr	r2, [pc, #36]	; (8007244 <HAL_RCC_ClockConfig+0x1c4>)
 8007220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007222:	4b09      	ldr	r3, [pc, #36]	; (8007248 <HAL_RCC_ClockConfig+0x1c8>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4618      	mov	r0, r3
 8007228:	f7fe faf0 	bl	800580c <HAL_InitTick>

  return HAL_OK;
 800722c:	2300      	movs	r3, #0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3710      	adds	r7, #16
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	40023c00 	.word	0x40023c00
 800723c:	40023800 	.word	0x40023800
 8007240:	0800fa4c 	.word	0x0800fa4c
 8007244:	2000008c 	.word	0x2000008c
 8007248:	20000090 	.word	0x20000090

0800724c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800724c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007250:	b090      	sub	sp, #64	; 0x40
 8007252:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	637b      	str	r3, [r7, #52]	; 0x34
 8007258:	2300      	movs	r3, #0
 800725a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800725c:	2300      	movs	r3, #0
 800725e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007264:	4b59      	ldr	r3, [pc, #356]	; (80073cc <HAL_RCC_GetSysClockFreq+0x180>)
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f003 030c 	and.w	r3, r3, #12
 800726c:	2b08      	cmp	r3, #8
 800726e:	d00d      	beq.n	800728c <HAL_RCC_GetSysClockFreq+0x40>
 8007270:	2b08      	cmp	r3, #8
 8007272:	f200 80a1 	bhi.w	80073b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <HAL_RCC_GetSysClockFreq+0x34>
 800727a:	2b04      	cmp	r3, #4
 800727c:	d003      	beq.n	8007286 <HAL_RCC_GetSysClockFreq+0x3a>
 800727e:	e09b      	b.n	80073b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007280:	4b53      	ldr	r3, [pc, #332]	; (80073d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007282:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007284:	e09b      	b.n	80073be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007286:	4b53      	ldr	r3, [pc, #332]	; (80073d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007288:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800728a:	e098      	b.n	80073be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800728c:	4b4f      	ldr	r3, [pc, #316]	; (80073cc <HAL_RCC_GetSysClockFreq+0x180>)
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007294:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007296:	4b4d      	ldr	r3, [pc, #308]	; (80073cc <HAL_RCC_GetSysClockFreq+0x180>)
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d028      	beq.n	80072f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072a2:	4b4a      	ldr	r3, [pc, #296]	; (80073cc <HAL_RCC_GetSysClockFreq+0x180>)
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	099b      	lsrs	r3, r3, #6
 80072a8:	2200      	movs	r2, #0
 80072aa:	623b      	str	r3, [r7, #32]
 80072ac:	627a      	str	r2, [r7, #36]	; 0x24
 80072ae:	6a3b      	ldr	r3, [r7, #32]
 80072b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80072b4:	2100      	movs	r1, #0
 80072b6:	4b47      	ldr	r3, [pc, #284]	; (80073d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80072b8:	fb03 f201 	mul.w	r2, r3, r1
 80072bc:	2300      	movs	r3, #0
 80072be:	fb00 f303 	mul.w	r3, r0, r3
 80072c2:	4413      	add	r3, r2
 80072c4:	4a43      	ldr	r2, [pc, #268]	; (80073d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80072c6:	fba0 1202 	umull	r1, r2, r0, r2
 80072ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072cc:	460a      	mov	r2, r1
 80072ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80072d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072d2:	4413      	add	r3, r2
 80072d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d8:	2200      	movs	r2, #0
 80072da:	61bb      	str	r3, [r7, #24]
 80072dc:	61fa      	str	r2, [r7, #28]
 80072de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80072e6:	f7f9 fcd7 	bl	8000c98 <__aeabi_uldivmod>
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	4613      	mov	r3, r2
 80072f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072f2:	e053      	b.n	800739c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072f4:	4b35      	ldr	r3, [pc, #212]	; (80073cc <HAL_RCC_GetSysClockFreq+0x180>)
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	099b      	lsrs	r3, r3, #6
 80072fa:	2200      	movs	r2, #0
 80072fc:	613b      	str	r3, [r7, #16]
 80072fe:	617a      	str	r2, [r7, #20]
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007306:	f04f 0b00 	mov.w	fp, #0
 800730a:	4652      	mov	r2, sl
 800730c:	465b      	mov	r3, fp
 800730e:	f04f 0000 	mov.w	r0, #0
 8007312:	f04f 0100 	mov.w	r1, #0
 8007316:	0159      	lsls	r1, r3, #5
 8007318:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800731c:	0150      	lsls	r0, r2, #5
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	ebb2 080a 	subs.w	r8, r2, sl
 8007326:	eb63 090b 	sbc.w	r9, r3, fp
 800732a:	f04f 0200 	mov.w	r2, #0
 800732e:	f04f 0300 	mov.w	r3, #0
 8007332:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007336:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800733a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800733e:	ebb2 0408 	subs.w	r4, r2, r8
 8007342:	eb63 0509 	sbc.w	r5, r3, r9
 8007346:	f04f 0200 	mov.w	r2, #0
 800734a:	f04f 0300 	mov.w	r3, #0
 800734e:	00eb      	lsls	r3, r5, #3
 8007350:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007354:	00e2      	lsls	r2, r4, #3
 8007356:	4614      	mov	r4, r2
 8007358:	461d      	mov	r5, r3
 800735a:	eb14 030a 	adds.w	r3, r4, sl
 800735e:	603b      	str	r3, [r7, #0]
 8007360:	eb45 030b 	adc.w	r3, r5, fp
 8007364:	607b      	str	r3, [r7, #4]
 8007366:	f04f 0200 	mov.w	r2, #0
 800736a:	f04f 0300 	mov.w	r3, #0
 800736e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007372:	4629      	mov	r1, r5
 8007374:	028b      	lsls	r3, r1, #10
 8007376:	4621      	mov	r1, r4
 8007378:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800737c:	4621      	mov	r1, r4
 800737e:	028a      	lsls	r2, r1, #10
 8007380:	4610      	mov	r0, r2
 8007382:	4619      	mov	r1, r3
 8007384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007386:	2200      	movs	r2, #0
 8007388:	60bb      	str	r3, [r7, #8]
 800738a:	60fa      	str	r2, [r7, #12]
 800738c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007390:	f7f9 fc82 	bl	8000c98 <__aeabi_uldivmod>
 8007394:	4602      	mov	r2, r0
 8007396:	460b      	mov	r3, r1
 8007398:	4613      	mov	r3, r2
 800739a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800739c:	4b0b      	ldr	r3, [pc, #44]	; (80073cc <HAL_RCC_GetSysClockFreq+0x180>)
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	0c1b      	lsrs	r3, r3, #16
 80073a2:	f003 0303 	and.w	r3, r3, #3
 80073a6:	3301      	adds	r3, #1
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80073ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80073b6:	e002      	b.n	80073be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073b8:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80073ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80073bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3740      	adds	r7, #64	; 0x40
 80073c4:	46bd      	mov	sp, r7
 80073c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073ca:	bf00      	nop
 80073cc:	40023800 	.word	0x40023800
 80073d0:	00f42400 	.word	0x00f42400
 80073d4:	017d7840 	.word	0x017d7840

080073d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073d8:	b480      	push	{r7}
 80073da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073dc:	4b03      	ldr	r3, [pc, #12]	; (80073ec <HAL_RCC_GetHCLKFreq+0x14>)
 80073de:	681b      	ldr	r3, [r3, #0]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop
 80073ec:	2000008c 	.word	0x2000008c

080073f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80073f4:	f7ff fff0 	bl	80073d8 <HAL_RCC_GetHCLKFreq>
 80073f8:	4602      	mov	r2, r0
 80073fa:	4b05      	ldr	r3, [pc, #20]	; (8007410 <HAL_RCC_GetPCLK1Freq+0x20>)
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	0a9b      	lsrs	r3, r3, #10
 8007400:	f003 0307 	and.w	r3, r3, #7
 8007404:	4903      	ldr	r1, [pc, #12]	; (8007414 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007406:	5ccb      	ldrb	r3, [r1, r3]
 8007408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800740c:	4618      	mov	r0, r3
 800740e:	bd80      	pop	{r7, pc}
 8007410:	40023800 	.word	0x40023800
 8007414:	0800fa5c 	.word	0x0800fa5c

08007418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800741c:	f7ff ffdc 	bl	80073d8 <HAL_RCC_GetHCLKFreq>
 8007420:	4602      	mov	r2, r0
 8007422:	4b05      	ldr	r3, [pc, #20]	; (8007438 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	0b5b      	lsrs	r3, r3, #13
 8007428:	f003 0307 	and.w	r3, r3, #7
 800742c:	4903      	ldr	r1, [pc, #12]	; (800743c <HAL_RCC_GetPCLK2Freq+0x24>)
 800742e:	5ccb      	ldrb	r3, [r1, r3]
 8007430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007434:	4618      	mov	r0, r3
 8007436:	bd80      	pop	{r7, pc}
 8007438:	40023800 	.word	0x40023800
 800743c:	0800fa5c 	.word	0x0800fa5c

08007440 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e07b      	b.n	800754a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007456:	2b00      	cmp	r3, #0
 8007458:	d108      	bne.n	800746c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007462:	d009      	beq.n	8007478 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	61da      	str	r2, [r3, #28]
 800746a:	e005      	b.n	8007478 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007484:	b2db      	uxtb	r3, r3
 8007486:	2b00      	cmp	r3, #0
 8007488:	d106      	bne.n	8007498 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7fd fe5a 	bl	800514c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2202      	movs	r2, #2
 800749c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80074c0:	431a      	orrs	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074ca:	431a      	orrs	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	f003 0302 	and.w	r3, r3, #2
 80074d4:	431a      	orrs	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	431a      	orrs	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074e8:	431a      	orrs	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074f2:	431a      	orrs	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074fc:	ea42 0103 	orr.w	r1, r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007504:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	430a      	orrs	r2, r1
 800750e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	699b      	ldr	r3, [r3, #24]
 8007514:	0c1b      	lsrs	r3, r3, #16
 8007516:	f003 0104 	and.w	r1, r3, #4
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751e:	f003 0210 	and.w	r2, r3, #16
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	430a      	orrs	r2, r1
 8007528:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	69da      	ldr	r2, [r3, #28]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007538:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b088      	sub	sp, #32
 8007556:	af00      	add	r7, sp, #0
 8007558:	60f8      	str	r0, [r7, #12]
 800755a:	60b9      	str	r1, [r7, #8]
 800755c:	603b      	str	r3, [r7, #0]
 800755e:	4613      	mov	r3, r2
 8007560:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007562:	2300      	movs	r3, #0
 8007564:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800756c:	2b01      	cmp	r3, #1
 800756e:	d101      	bne.n	8007574 <HAL_SPI_Transmit+0x22>
 8007570:	2302      	movs	r3, #2
 8007572:	e126      	b.n	80077c2 <HAL_SPI_Transmit+0x270>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800757c:	f7fe f98a 	bl	8005894 <HAL_GetTick>
 8007580:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007582:	88fb      	ldrh	r3, [r7, #6]
 8007584:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b01      	cmp	r3, #1
 8007590:	d002      	beq.n	8007598 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007592:	2302      	movs	r3, #2
 8007594:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007596:	e10b      	b.n	80077b0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d002      	beq.n	80075a4 <HAL_SPI_Transmit+0x52>
 800759e:	88fb      	ldrh	r3, [r7, #6]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d102      	bne.n	80075aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80075a8:	e102      	b.n	80077b0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2203      	movs	r2, #3
 80075ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	88fa      	ldrh	r2, [r7, #6]
 80075c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	88fa      	ldrh	r2, [r7, #6]
 80075c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075f0:	d10f      	bne.n	8007612 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007600:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007610:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800761c:	2b40      	cmp	r3, #64	; 0x40
 800761e:	d007      	beq.n	8007630 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800762e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007638:	d14b      	bne.n	80076d2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d002      	beq.n	8007648 <HAL_SPI_Transmit+0xf6>
 8007642:	8afb      	ldrh	r3, [r7, #22]
 8007644:	2b01      	cmp	r3, #1
 8007646:	d13e      	bne.n	80076c6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764c:	881a      	ldrh	r2, [r3, #0]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007658:	1c9a      	adds	r2, r3, #2
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007662:	b29b      	uxth	r3, r3
 8007664:	3b01      	subs	r3, #1
 8007666:	b29a      	uxth	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800766c:	e02b      	b.n	80076c6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f003 0302 	and.w	r3, r3, #2
 8007678:	2b02      	cmp	r3, #2
 800767a:	d112      	bne.n	80076a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007680:	881a      	ldrh	r2, [r3, #0]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768c:	1c9a      	adds	r2, r3, #2
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007696:	b29b      	uxth	r3, r3
 8007698:	3b01      	subs	r3, #1
 800769a:	b29a      	uxth	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	86da      	strh	r2, [r3, #54]	; 0x36
 80076a0:	e011      	b.n	80076c6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076a2:	f7fe f8f7 	bl	8005894 <HAL_GetTick>
 80076a6:	4602      	mov	r2, r0
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	683a      	ldr	r2, [r7, #0]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d803      	bhi.n	80076ba <HAL_SPI_Transmit+0x168>
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b8:	d102      	bne.n	80076c0 <HAL_SPI_Transmit+0x16e>
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d102      	bne.n	80076c6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80076c0:	2303      	movs	r3, #3
 80076c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076c4:	e074      	b.n	80077b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1ce      	bne.n	800766e <HAL_SPI_Transmit+0x11c>
 80076d0:	e04c      	b.n	800776c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d002      	beq.n	80076e0 <HAL_SPI_Transmit+0x18e>
 80076da:	8afb      	ldrh	r3, [r7, #22]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d140      	bne.n	8007762 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	330c      	adds	r3, #12
 80076ea:	7812      	ldrb	r2, [r2, #0]
 80076ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f2:	1c5a      	adds	r2, r3, #1
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	3b01      	subs	r3, #1
 8007700:	b29a      	uxth	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007706:	e02c      	b.n	8007762 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	2b02      	cmp	r3, #2
 8007714:	d113      	bne.n	800773e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	330c      	adds	r3, #12
 8007720:	7812      	ldrb	r2, [r2, #0]
 8007722:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007728:	1c5a      	adds	r2, r3, #1
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007732:	b29b      	uxth	r3, r3
 8007734:	3b01      	subs	r3, #1
 8007736:	b29a      	uxth	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	86da      	strh	r2, [r3, #54]	; 0x36
 800773c:	e011      	b.n	8007762 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800773e:	f7fe f8a9 	bl	8005894 <HAL_GetTick>
 8007742:	4602      	mov	r2, r0
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	429a      	cmp	r2, r3
 800774c:	d803      	bhi.n	8007756 <HAL_SPI_Transmit+0x204>
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007754:	d102      	bne.n	800775c <HAL_SPI_Transmit+0x20a>
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d102      	bne.n	8007762 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007760:	e026      	b.n	80077b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007766:	b29b      	uxth	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1cd      	bne.n	8007708 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 fbcb 	bl	8007f0c <SPI_EndRxTxTransaction>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2220      	movs	r2, #32
 8007780:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10a      	bne.n	80077a0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800778a:	2300      	movs	r3, #0
 800778c:	613b      	str	r3, [r7, #16]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	613b      	str	r3, [r7, #16]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	613b      	str	r3, [r7, #16]
 800779e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	77fb      	strb	r3, [r7, #31]
 80077ac:	e000      	b.n	80077b0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80077ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80077c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3720      	adds	r7, #32
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b088      	sub	sp, #32
 80077ce:	af02      	add	r7, sp, #8
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	60b9      	str	r1, [r7, #8]
 80077d4:	603b      	str	r3, [r7, #0]
 80077d6:	4613      	mov	r3, r2
 80077d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077e6:	d112      	bne.n	800780e <HAL_SPI_Receive+0x44>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10e      	bne.n	800780e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2204      	movs	r2, #4
 80077f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80077f8:	88fa      	ldrh	r2, [r7, #6]
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	4613      	mov	r3, r2
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	68b9      	ldr	r1, [r7, #8]
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 f8f1 	bl	80079ec <HAL_SPI_TransmitReceive>
 800780a:	4603      	mov	r3, r0
 800780c:	e0ea      	b.n	80079e4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007814:	2b01      	cmp	r3, #1
 8007816:	d101      	bne.n	800781c <HAL_SPI_Receive+0x52>
 8007818:	2302      	movs	r3, #2
 800781a:	e0e3      	b.n	80079e4 <HAL_SPI_Receive+0x21a>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007824:	f7fe f836 	bl	8005894 <HAL_GetTick>
 8007828:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b01      	cmp	r3, #1
 8007834:	d002      	beq.n	800783c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007836:	2302      	movs	r3, #2
 8007838:	75fb      	strb	r3, [r7, #23]
    goto error;
 800783a:	e0ca      	b.n	80079d2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d002      	beq.n	8007848 <HAL_SPI_Receive+0x7e>
 8007842:	88fb      	ldrh	r3, [r7, #6]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d102      	bne.n	800784e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800784c:	e0c1      	b.n	80079d2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2204      	movs	r2, #4
 8007852:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	88fa      	ldrh	r2, [r7, #6]
 8007866:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	88fa      	ldrh	r2, [r7, #6]
 800786c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007894:	d10f      	bne.n	80078b6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80078b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c0:	2b40      	cmp	r3, #64	; 0x40
 80078c2:	d007      	beq.n	80078d4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d162      	bne.n	80079a2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80078dc:	e02e      	b.n	800793c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f003 0301 	and.w	r3, r3, #1
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d115      	bne.n	8007918 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f103 020c 	add.w	r2, r3, #12
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f8:	7812      	ldrb	r2, [r2, #0]
 80078fa:	b2d2      	uxtb	r2, r2
 80078fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007902:	1c5a      	adds	r2, r3, #1
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800790c:	b29b      	uxth	r3, r3
 800790e:	3b01      	subs	r3, #1
 8007910:	b29a      	uxth	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007916:	e011      	b.n	800793c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007918:	f7fd ffbc 	bl	8005894 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	683a      	ldr	r2, [r7, #0]
 8007924:	429a      	cmp	r2, r3
 8007926:	d803      	bhi.n	8007930 <HAL_SPI_Receive+0x166>
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792e:	d102      	bne.n	8007936 <HAL_SPI_Receive+0x16c>
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d102      	bne.n	800793c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007936:	2303      	movs	r3, #3
 8007938:	75fb      	strb	r3, [r7, #23]
          goto error;
 800793a:	e04a      	b.n	80079d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007940:	b29b      	uxth	r3, r3
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1cb      	bne.n	80078de <HAL_SPI_Receive+0x114>
 8007946:	e031      	b.n	80079ac <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b01      	cmp	r3, #1
 8007954:	d113      	bne.n	800797e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68da      	ldr	r2, [r3, #12]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007960:	b292      	uxth	r2, r2
 8007962:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007968:	1c9a      	adds	r2, r3, #2
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007972:	b29b      	uxth	r3, r3
 8007974:	3b01      	subs	r3, #1
 8007976:	b29a      	uxth	r2, r3
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800797c:	e011      	b.n	80079a2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800797e:	f7fd ff89 	bl	8005894 <HAL_GetTick>
 8007982:	4602      	mov	r2, r0
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	429a      	cmp	r2, r3
 800798c:	d803      	bhi.n	8007996 <HAL_SPI_Receive+0x1cc>
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007994:	d102      	bne.n	800799c <HAL_SPI_Receive+0x1d2>
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d102      	bne.n	80079a2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	75fb      	strb	r3, [r7, #23]
          goto error;
 80079a0:	e017      	b.n	80079d2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1cd      	bne.n	8007948 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	6839      	ldr	r1, [r7, #0]
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f000 fa45 	bl	8007e40 <SPI_EndRxTransaction>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d002      	beq.n	80079c2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2220      	movs	r2, #32
 80079c0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	75fb      	strb	r3, [r7, #23]
 80079ce:	e000      	b.n	80079d2 <HAL_SPI_Receive+0x208>
  }

error :
 80079d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3718      	adds	r7, #24
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08c      	sub	sp, #48	; 0x30
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80079fa:	2301      	movs	r3, #1
 80079fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d101      	bne.n	8007a12 <HAL_SPI_TransmitReceive+0x26>
 8007a0e:	2302      	movs	r3, #2
 8007a10:	e18a      	b.n	8007d28 <HAL_SPI_TransmitReceive+0x33c>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a1a:	f7fd ff3b 	bl	8005894 <HAL_GetTick>
 8007a1e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007a30:	887b      	ldrh	r3, [r7, #2]
 8007a32:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d00f      	beq.n	8007a5c <HAL_SPI_TransmitReceive+0x70>
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a42:	d107      	bne.n	8007a54 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d103      	bne.n	8007a54 <HAL_SPI_TransmitReceive+0x68>
 8007a4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a50:	2b04      	cmp	r3, #4
 8007a52:	d003      	beq.n	8007a5c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007a54:	2302      	movs	r3, #2
 8007a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a5a:	e15b      	b.n	8007d14 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d005      	beq.n	8007a6e <HAL_SPI_TransmitReceive+0x82>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <HAL_SPI_TransmitReceive+0x82>
 8007a68:	887b      	ldrh	r3, [r7, #2]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d103      	bne.n	8007a76 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007a74:	e14e      	b.n	8007d14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b04      	cmp	r3, #4
 8007a80:	d003      	beq.n	8007a8a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2205      	movs	r2, #5
 8007a86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	887a      	ldrh	r2, [r7, #2]
 8007a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	887a      	ldrh	r2, [r7, #2]
 8007aa0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	887a      	ldrh	r2, [r7, #2]
 8007aac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	887a      	ldrh	r2, [r7, #2]
 8007ab2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aca:	2b40      	cmp	r3, #64	; 0x40
 8007acc:	d007      	beq.n	8007ade <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007adc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ae6:	d178      	bne.n	8007bda <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <HAL_SPI_TransmitReceive+0x10a>
 8007af0:	8b7b      	ldrh	r3, [r7, #26]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d166      	bne.n	8007bc4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afa:	881a      	ldrh	r2, [r3, #0]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b06:	1c9a      	adds	r2, r3, #2
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	3b01      	subs	r3, #1
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b1a:	e053      	b.n	8007bc4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f003 0302 	and.w	r3, r3, #2
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d11b      	bne.n	8007b62 <HAL_SPI_TransmitReceive+0x176>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d016      	beq.n	8007b62 <HAL_SPI_TransmitReceive+0x176>
 8007b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d113      	bne.n	8007b62 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3e:	881a      	ldrh	r2, [r3, #0]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4a:	1c9a      	adds	r2, r3, #2
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	3b01      	subs	r3, #1
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d119      	bne.n	8007ba4 <HAL_SPI_TransmitReceive+0x1b8>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d014      	beq.n	8007ba4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68da      	ldr	r2, [r3, #12]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b84:	b292      	uxth	r2, r2
 8007b86:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8c:	1c9a      	adds	r2, r3, #2
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ba4:	f7fd fe76 	bl	8005894 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d807      	bhi.n	8007bc4 <HAL_SPI_TransmitReceive+0x1d8>
 8007bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bba:	d003      	beq.n	8007bc4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007bc2:	e0a7      	b.n	8007d14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1a6      	bne.n	8007b1c <HAL_SPI_TransmitReceive+0x130>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1a1      	bne.n	8007b1c <HAL_SPI_TransmitReceive+0x130>
 8007bd8:	e07c      	b.n	8007cd4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d002      	beq.n	8007be8 <HAL_SPI_TransmitReceive+0x1fc>
 8007be2:	8b7b      	ldrh	r3, [r7, #26]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d16b      	bne.n	8007cc0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	330c      	adds	r3, #12
 8007bf2:	7812      	ldrb	r2, [r2, #0]
 8007bf4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfa:	1c5a      	adds	r2, r3, #1
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	3b01      	subs	r3, #1
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c0e:	e057      	b.n	8007cc0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f003 0302 	and.w	r3, r3, #2
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d11c      	bne.n	8007c58 <HAL_SPI_TransmitReceive+0x26c>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d017      	beq.n	8007c58 <HAL_SPI_TransmitReceive+0x26c>
 8007c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d114      	bne.n	8007c58 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	330c      	adds	r3, #12
 8007c38:	7812      	ldrb	r2, [r2, #0]
 8007c3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c40:	1c5a      	adds	r2, r3, #1
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d119      	bne.n	8007c9a <HAL_SPI_TransmitReceive+0x2ae>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d014      	beq.n	8007c9a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7a:	b2d2      	uxtb	r2, r2
 8007c7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c82:	1c5a      	adds	r2, r3, #1
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c96:	2301      	movs	r3, #1
 8007c98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c9a:	f7fd fdfb 	bl	8005894 <HAL_GetTick>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d803      	bhi.n	8007cb2 <HAL_SPI_TransmitReceive+0x2c6>
 8007caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cb0:	d102      	bne.n	8007cb8 <HAL_SPI_TransmitReceive+0x2cc>
 8007cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d103      	bne.n	8007cc0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007cb8:	2303      	movs	r3, #3
 8007cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007cbe:	e029      	b.n	8007d14 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1a2      	bne.n	8007c10 <HAL_SPI_TransmitReceive+0x224>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d19d      	bne.n	8007c10 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f000 f917 	bl	8007f0c <SPI_EndRxTxTransaction>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d006      	beq.n	8007cf2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2220      	movs	r2, #32
 8007cee:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007cf0:	e010      	b.n	8007d14 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d10b      	bne.n	8007d12 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	617b      	str	r3, [r7, #20]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	617b      	str	r3, [r7, #20]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	617b      	str	r3, [r7, #20]
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	e000      	b.n	8007d14 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007d12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3730      	adds	r7, #48	; 0x30
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b088      	sub	sp, #32
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	603b      	str	r3, [r7, #0]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d40:	f7fd fda8 	bl	8005894 <HAL_GetTick>
 8007d44:	4602      	mov	r2, r0
 8007d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d48:	1a9b      	subs	r3, r3, r2
 8007d4a:	683a      	ldr	r2, [r7, #0]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d50:	f7fd fda0 	bl	8005894 <HAL_GetTick>
 8007d54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d56:	4b39      	ldr	r3, [pc, #228]	; (8007e3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	015b      	lsls	r3, r3, #5
 8007d5c:	0d1b      	lsrs	r3, r3, #20
 8007d5e:	69fa      	ldr	r2, [r7, #28]
 8007d60:	fb02 f303 	mul.w	r3, r2, r3
 8007d64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d66:	e054      	b.n	8007e12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d6e:	d050      	beq.n	8007e12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d70:	f7fd fd90 	bl	8005894 <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	69fa      	ldr	r2, [r7, #28]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d902      	bls.n	8007d86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d13d      	bne.n	8007e02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d9e:	d111      	bne.n	8007dc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007da8:	d004      	beq.n	8007db4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007db2:	d107      	bne.n	8007dc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dcc:	d10f      	bne.n	8007dee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007dec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e017      	b.n	8007e32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	689a      	ldr	r2, [r3, #8]
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	bf0c      	ite	eq
 8007e22:	2301      	moveq	r3, #1
 8007e24:	2300      	movne	r3, #0
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	461a      	mov	r2, r3
 8007e2a:	79fb      	ldrb	r3, [r7, #7]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d19b      	bne.n	8007d68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3720      	adds	r7, #32
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	2000008c 	.word	0x2000008c

08007e40 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b086      	sub	sp, #24
 8007e44:	af02      	add	r7, sp, #8
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e54:	d111      	bne.n	8007e7a <SPI_EndRxTransaction+0x3a>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e5e:	d004      	beq.n	8007e6a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e68:	d107      	bne.n	8007e7a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e78:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e82:	d12a      	bne.n	8007eda <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e8c:	d012      	beq.n	8007eb4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	9300      	str	r3, [sp, #0]
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2200      	movs	r2, #0
 8007e96:	2180      	movs	r1, #128	; 0x80
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f7ff ff49 	bl	8007d30 <SPI_WaitFlagStateUntilTimeout>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d02d      	beq.n	8007f00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea8:	f043 0220 	orr.w	r2, r3, #32
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e026      	b.n	8007f02 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	2101      	movs	r1, #1
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f7ff ff36 	bl	8007d30 <SPI_WaitFlagStateUntilTimeout>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d01a      	beq.n	8007f00 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ece:	f043 0220 	orr.w	r2, r3, #32
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e013      	b.n	8007f02 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	68f8      	ldr	r0, [r7, #12]
 8007ee6:	f7ff ff23 	bl	8007d30 <SPI_WaitFlagStateUntilTimeout>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d007      	beq.n	8007f00 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef4:	f043 0220 	orr.w	r2, r3, #32
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e000      	b.n	8007f02 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
	...

08007f0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b088      	sub	sp, #32
 8007f10:	af02      	add	r7, sp, #8
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007f18:	4b1b      	ldr	r3, [pc, #108]	; (8007f88 <SPI_EndRxTxTransaction+0x7c>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a1b      	ldr	r2, [pc, #108]	; (8007f8c <SPI_EndRxTxTransaction+0x80>)
 8007f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f22:	0d5b      	lsrs	r3, r3, #21
 8007f24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007f28:	fb02 f303 	mul.w	r3, r2, r3
 8007f2c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f36:	d112      	bne.n	8007f5e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2180      	movs	r1, #128	; 0x80
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f7ff fef4 	bl	8007d30 <SPI_WaitFlagStateUntilTimeout>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d016      	beq.n	8007f7c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f52:	f043 0220 	orr.w	r2, r3, #32
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007f5a:	2303      	movs	r3, #3
 8007f5c:	e00f      	b.n	8007f7e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00a      	beq.n	8007f7a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f74:	2b80      	cmp	r3, #128	; 0x80
 8007f76:	d0f2      	beq.n	8007f5e <SPI_EndRxTxTransaction+0x52>
 8007f78:	e000      	b.n	8007f7c <SPI_EndRxTxTransaction+0x70>
        break;
 8007f7a:	bf00      	nop
  }

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3718      	adds	r7, #24
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	2000008c 	.word	0x2000008c
 8007f8c:	165e9f81 	.word	0x165e9f81

08007f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d101      	bne.n	8007fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e041      	b.n	8008026 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d106      	bne.n	8007fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f7fd fb3a 	bl	8005630 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2202      	movs	r2, #2
 8007fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	3304      	adds	r3, #4
 8007fcc:	4619      	mov	r1, r3
 8007fce:	4610      	mov	r0, r2
 8007fd0:	f000 f9c0 	bl	8008354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2201      	movs	r2, #1
 8008020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
	...

08008030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b01      	cmp	r3, #1
 8008042:	d001      	beq.n	8008048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e044      	b.n	80080d2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2202      	movs	r2, #2
 800804c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f042 0201 	orr.w	r2, r2, #1
 800805e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a1e      	ldr	r2, [pc, #120]	; (80080e0 <HAL_TIM_Base_Start_IT+0xb0>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d018      	beq.n	800809c <HAL_TIM_Base_Start_IT+0x6c>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008072:	d013      	beq.n	800809c <HAL_TIM_Base_Start_IT+0x6c>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a1a      	ldr	r2, [pc, #104]	; (80080e4 <HAL_TIM_Base_Start_IT+0xb4>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d00e      	beq.n	800809c <HAL_TIM_Base_Start_IT+0x6c>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a19      	ldr	r2, [pc, #100]	; (80080e8 <HAL_TIM_Base_Start_IT+0xb8>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d009      	beq.n	800809c <HAL_TIM_Base_Start_IT+0x6c>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a17      	ldr	r2, [pc, #92]	; (80080ec <HAL_TIM_Base_Start_IT+0xbc>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d004      	beq.n	800809c <HAL_TIM_Base_Start_IT+0x6c>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a16      	ldr	r2, [pc, #88]	; (80080f0 <HAL_TIM_Base_Start_IT+0xc0>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d111      	bne.n	80080c0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f003 0307 	and.w	r3, r3, #7
 80080a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2b06      	cmp	r3, #6
 80080ac:	d010      	beq.n	80080d0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f042 0201 	orr.w	r2, r2, #1
 80080bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080be:	e007      	b.n	80080d0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f042 0201 	orr.w	r2, r2, #1
 80080ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3714      	adds	r7, #20
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	40010000 	.word	0x40010000
 80080e4:	40000400 	.word	0x40000400
 80080e8:	40000800 	.word	0x40000800
 80080ec:	40000c00 	.word	0x40000c00
 80080f0:	40014000 	.word	0x40014000

080080f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	f003 0302 	and.w	r3, r3, #2
 8008106:	2b02      	cmp	r3, #2
 8008108:	d122      	bne.n	8008150 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	f003 0302 	and.w	r3, r3, #2
 8008114:	2b02      	cmp	r3, #2
 8008116:	d11b      	bne.n	8008150 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f06f 0202 	mvn.w	r2, #2
 8008120:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	f003 0303 	and.w	r3, r3, #3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d003      	beq.n	800813e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 f8ee 	bl	8008318 <HAL_TIM_IC_CaptureCallback>
 800813c:	e005      	b.n	800814a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f8e0 	bl	8008304 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f8f1 	bl	800832c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	691b      	ldr	r3, [r3, #16]
 8008156:	f003 0304 	and.w	r3, r3, #4
 800815a:	2b04      	cmp	r3, #4
 800815c:	d122      	bne.n	80081a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	f003 0304 	and.w	r3, r3, #4
 8008168:	2b04      	cmp	r3, #4
 800816a:	d11b      	bne.n	80081a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f06f 0204 	mvn.w	r2, #4
 8008174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2202      	movs	r2, #2
 800817a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008186:	2b00      	cmp	r3, #0
 8008188:	d003      	beq.n	8008192 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f8c4 	bl	8008318 <HAL_TIM_IC_CaptureCallback>
 8008190:	e005      	b.n	800819e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f8b6 	bl	8008304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 f8c7 	bl	800832c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	f003 0308 	and.w	r3, r3, #8
 80081ae:	2b08      	cmp	r3, #8
 80081b0:	d122      	bne.n	80081f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	f003 0308 	and.w	r3, r3, #8
 80081bc:	2b08      	cmp	r3, #8
 80081be:	d11b      	bne.n	80081f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f06f 0208 	mvn.w	r2, #8
 80081c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2204      	movs	r2, #4
 80081ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	f003 0303 	and.w	r3, r3, #3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d003      	beq.n	80081e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f89a 	bl	8008318 <HAL_TIM_IC_CaptureCallback>
 80081e4:	e005      	b.n	80081f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f88c 	bl	8008304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 f89d 	bl	800832c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	691b      	ldr	r3, [r3, #16]
 80081fe:	f003 0310 	and.w	r3, r3, #16
 8008202:	2b10      	cmp	r3, #16
 8008204:	d122      	bne.n	800824c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	f003 0310 	and.w	r3, r3, #16
 8008210:	2b10      	cmp	r3, #16
 8008212:	d11b      	bne.n	800824c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f06f 0210 	mvn.w	r2, #16
 800821c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2208      	movs	r2, #8
 8008222:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800822e:	2b00      	cmp	r3, #0
 8008230:	d003      	beq.n	800823a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f870 	bl	8008318 <HAL_TIM_IC_CaptureCallback>
 8008238:	e005      	b.n	8008246 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f862 	bl	8008304 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f873 	bl	800832c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	2b01      	cmp	r3, #1
 8008258:	d10e      	bne.n	8008278 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	f003 0301 	and.w	r3, r3, #1
 8008264:	2b01      	cmp	r3, #1
 8008266:	d107      	bne.n	8008278 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f06f 0201 	mvn.w	r2, #1
 8008270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7f8 ff9e 	bl	80011b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008282:	2b80      	cmp	r3, #128	; 0x80
 8008284:	d10e      	bne.n	80082a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008290:	2b80      	cmp	r3, #128	; 0x80
 8008292:	d107      	bne.n	80082a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800829c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f8e2 	bl	8008468 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ae:	2b40      	cmp	r3, #64	; 0x40
 80082b0:	d10e      	bne.n	80082d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082bc:	2b40      	cmp	r3, #64	; 0x40
 80082be:	d107      	bne.n	80082d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f838 	bl	8008340 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	691b      	ldr	r3, [r3, #16]
 80082d6:	f003 0320 	and.w	r3, r3, #32
 80082da:	2b20      	cmp	r3, #32
 80082dc:	d10e      	bne.n	80082fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	f003 0320 	and.w	r3, r3, #32
 80082e8:	2b20      	cmp	r3, #32
 80082ea:	d107      	bne.n	80082fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f06f 0220 	mvn.w	r2, #32
 80082f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f000 f8ac 	bl	8008454 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082fc:	bf00      	nop
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008320:	bf00      	nop
 8008322:	370c      	adds	r7, #12
 8008324:	46bd      	mov	sp, r7
 8008326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832a:	4770      	bx	lr

0800832c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008354:	b480      	push	{r7}
 8008356:	b085      	sub	sp, #20
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a34      	ldr	r2, [pc, #208]	; (8008438 <TIM_Base_SetConfig+0xe4>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d00f      	beq.n	800838c <TIM_Base_SetConfig+0x38>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008372:	d00b      	beq.n	800838c <TIM_Base_SetConfig+0x38>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a31      	ldr	r2, [pc, #196]	; (800843c <TIM_Base_SetConfig+0xe8>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d007      	beq.n	800838c <TIM_Base_SetConfig+0x38>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a30      	ldr	r2, [pc, #192]	; (8008440 <TIM_Base_SetConfig+0xec>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d003      	beq.n	800838c <TIM_Base_SetConfig+0x38>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a2f      	ldr	r2, [pc, #188]	; (8008444 <TIM_Base_SetConfig+0xf0>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d108      	bne.n	800839e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	4313      	orrs	r3, r2
 800839c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a25      	ldr	r2, [pc, #148]	; (8008438 <TIM_Base_SetConfig+0xe4>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d01b      	beq.n	80083de <TIM_Base_SetConfig+0x8a>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ac:	d017      	beq.n	80083de <TIM_Base_SetConfig+0x8a>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a22      	ldr	r2, [pc, #136]	; (800843c <TIM_Base_SetConfig+0xe8>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d013      	beq.n	80083de <TIM_Base_SetConfig+0x8a>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4a21      	ldr	r2, [pc, #132]	; (8008440 <TIM_Base_SetConfig+0xec>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d00f      	beq.n	80083de <TIM_Base_SetConfig+0x8a>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a20      	ldr	r2, [pc, #128]	; (8008444 <TIM_Base_SetConfig+0xf0>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d00b      	beq.n	80083de <TIM_Base_SetConfig+0x8a>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a1f      	ldr	r2, [pc, #124]	; (8008448 <TIM_Base_SetConfig+0xf4>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d007      	beq.n	80083de <TIM_Base_SetConfig+0x8a>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a1e      	ldr	r2, [pc, #120]	; (800844c <TIM_Base_SetConfig+0xf8>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d003      	beq.n	80083de <TIM_Base_SetConfig+0x8a>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a1d      	ldr	r2, [pc, #116]	; (8008450 <TIM_Base_SetConfig+0xfc>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d108      	bne.n	80083f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	68fa      	ldr	r2, [r7, #12]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	4313      	orrs	r3, r2
 80083fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	689a      	ldr	r2, [r3, #8]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a08      	ldr	r2, [pc, #32]	; (8008438 <TIM_Base_SetConfig+0xe4>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d103      	bne.n	8008424 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	691a      	ldr	r2, [r3, #16]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	615a      	str	r2, [r3, #20]
}
 800842a:	bf00      	nop
 800842c:	3714      	adds	r7, #20
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	40010000 	.word	0x40010000
 800843c:	40000400 	.word	0x40000400
 8008440:	40000800 	.word	0x40000800
 8008444:	40000c00 	.word	0x40000c00
 8008448:	40014000 	.word	0x40014000
 800844c:	40014400 	.word	0x40014400
 8008450:	40014800 	.word	0x40014800

08008454 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008470:	bf00      	nop
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d101      	bne.n	800848e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e03f      	b.n	800850e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b00      	cmp	r3, #0
 8008498:	d106      	bne.n	80084a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7fd f916 	bl	80056d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2224      	movs	r2, #36	; 0x24
 80084ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68da      	ldr	r2, [r3, #12]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f929 	bl	8008718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	691a      	ldr	r2, [r3, #16]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	695a      	ldr	r2, [r3, #20]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68da      	ldr	r2, [r3, #12]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2220      	movs	r2, #32
 8008500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2220      	movs	r2, #32
 8008508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3708      	adds	r7, #8
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b08a      	sub	sp, #40	; 0x28
 800851a:	af02      	add	r7, sp, #8
 800851c:	60f8      	str	r0, [r7, #12]
 800851e:	60b9      	str	r1, [r7, #8]
 8008520:	603b      	str	r3, [r7, #0]
 8008522:	4613      	mov	r3, r2
 8008524:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008526:	2300      	movs	r3, #0
 8008528:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008530:	b2db      	uxtb	r3, r3
 8008532:	2b20      	cmp	r3, #32
 8008534:	d17c      	bne.n	8008630 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d002      	beq.n	8008542 <HAL_UART_Transmit+0x2c>
 800853c:	88fb      	ldrh	r3, [r7, #6]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d101      	bne.n	8008546 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e075      	b.n	8008632 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800854c:	2b01      	cmp	r3, #1
 800854e:	d101      	bne.n	8008554 <HAL_UART_Transmit+0x3e>
 8008550:	2302      	movs	r3, #2
 8008552:	e06e      	b.n	8008632 <HAL_UART_Transmit+0x11c>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2200      	movs	r2, #0
 8008560:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2221      	movs	r2, #33	; 0x21
 8008566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800856a:	f7fd f993 	bl	8005894 <HAL_GetTick>
 800856e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	88fa      	ldrh	r2, [r7, #6]
 8008574:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	88fa      	ldrh	r2, [r7, #6]
 800857a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008584:	d108      	bne.n	8008598 <HAL_UART_Transmit+0x82>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d104      	bne.n	8008598 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800858e:	2300      	movs	r3, #0
 8008590:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	61bb      	str	r3, [r7, #24]
 8008596:	e003      	b.n	80085a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800859c:	2300      	movs	r3, #0
 800859e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80085a8:	e02a      	b.n	8008600 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	2200      	movs	r2, #0
 80085b2:	2180      	movs	r1, #128	; 0x80
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f000 f840 	bl	800863a <UART_WaitOnFlagUntilTimeout>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d001      	beq.n	80085c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e036      	b.n	8008632 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d10b      	bne.n	80085e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	881b      	ldrh	r3, [r3, #0]
 80085ce:	461a      	mov	r2, r3
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	3302      	adds	r3, #2
 80085de:	61bb      	str	r3, [r7, #24]
 80085e0:	e007      	b.n	80085f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	781a      	ldrb	r2, [r3, #0]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	3301      	adds	r3, #1
 80085f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	3b01      	subs	r3, #1
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008604:	b29b      	uxth	r3, r3
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1cf      	bne.n	80085aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	2200      	movs	r2, #0
 8008612:	2140      	movs	r1, #64	; 0x40
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 f810 	bl	800863a <UART_WaitOnFlagUntilTimeout>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d001      	beq.n	8008624 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008620:	2303      	movs	r3, #3
 8008622:	e006      	b.n	8008632 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2220      	movs	r2, #32
 8008628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800862c:	2300      	movs	r3, #0
 800862e:	e000      	b.n	8008632 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008630:	2302      	movs	r3, #2
  }
}
 8008632:	4618      	mov	r0, r3
 8008634:	3720      	adds	r7, #32
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800863a:	b580      	push	{r7, lr}
 800863c:	b090      	sub	sp, #64	; 0x40
 800863e:	af00      	add	r7, sp, #0
 8008640:	60f8      	str	r0, [r7, #12]
 8008642:	60b9      	str	r1, [r7, #8]
 8008644:	603b      	str	r3, [r7, #0]
 8008646:	4613      	mov	r3, r2
 8008648:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800864a:	e050      	b.n	80086ee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800864c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800864e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008652:	d04c      	beq.n	80086ee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008656:	2b00      	cmp	r3, #0
 8008658:	d007      	beq.n	800866a <UART_WaitOnFlagUntilTimeout+0x30>
 800865a:	f7fd f91b 	bl	8005894 <HAL_GetTick>
 800865e:	4602      	mov	r2, r0
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008666:	429a      	cmp	r2, r3
 8008668:	d241      	bcs.n	80086ee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	330c      	adds	r3, #12
 8008670:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008674:	e853 3f00 	ldrex	r3, [r3]
 8008678:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800867a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	330c      	adds	r3, #12
 8008688:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800868a:	637a      	str	r2, [r7, #52]	; 0x34
 800868c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008690:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008692:	e841 2300 	strex	r3, r2, [r1]
 8008696:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1e5      	bne.n	800866a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3314      	adds	r3, #20
 80086a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	e853 3f00 	ldrex	r3, [r3]
 80086ac:	613b      	str	r3, [r7, #16]
   return(result);
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	f023 0301 	bic.w	r3, r3, #1
 80086b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	3314      	adds	r3, #20
 80086bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086be:	623a      	str	r2, [r7, #32]
 80086c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c2:	69f9      	ldr	r1, [r7, #28]
 80086c4:	6a3a      	ldr	r2, [r7, #32]
 80086c6:	e841 2300 	strex	r3, r2, [r1]
 80086ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1e5      	bne.n	800869e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2220      	movs	r2, #32
 80086d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2220      	movs	r2, #32
 80086de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e00f      	b.n	800870e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	4013      	ands	r3, r2
 80086f8:	68ba      	ldr	r2, [r7, #8]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	bf0c      	ite	eq
 80086fe:	2301      	moveq	r3, #1
 8008700:	2300      	movne	r3, #0
 8008702:	b2db      	uxtb	r3, r3
 8008704:	461a      	mov	r2, r3
 8008706:	79fb      	ldrb	r3, [r7, #7]
 8008708:	429a      	cmp	r2, r3
 800870a:	d09f      	beq.n	800864c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3740      	adds	r7, #64	; 0x40
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
	...

08008718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800871c:	b0c0      	sub	sp, #256	; 0x100
 800871e:	af00      	add	r7, sp, #0
 8008720:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008734:	68d9      	ldr	r1, [r3, #12]
 8008736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	ea40 0301 	orr.w	r3, r0, r1
 8008740:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008746:	689a      	ldr	r2, [r3, #8]
 8008748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	431a      	orrs	r2, r3
 8008750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	431a      	orrs	r2, r3
 8008758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	4313      	orrs	r3, r2
 8008760:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008770:	f021 010c 	bic.w	r1, r1, #12
 8008774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800877e:	430b      	orrs	r3, r1
 8008780:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	695b      	ldr	r3, [r3, #20]
 800878a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800878e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008792:	6999      	ldr	r1, [r3, #24]
 8008794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	ea40 0301 	orr.w	r3, r0, r1
 800879e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80087a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	4b8f      	ldr	r3, [pc, #572]	; (80089e4 <UART_SetConfig+0x2cc>)
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d005      	beq.n	80087b8 <UART_SetConfig+0xa0>
 80087ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	4b8d      	ldr	r3, [pc, #564]	; (80089e8 <UART_SetConfig+0x2d0>)
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d104      	bne.n	80087c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80087b8:	f7fe fe2e 	bl	8007418 <HAL_RCC_GetPCLK2Freq>
 80087bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80087c0:	e003      	b.n	80087ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80087c2:	f7fe fe15 	bl	80073f0 <HAL_RCC_GetPCLK1Freq>
 80087c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ce:	69db      	ldr	r3, [r3, #28]
 80087d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087d4:	f040 810c 	bne.w	80089f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087dc:	2200      	movs	r2, #0
 80087de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80087e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80087e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80087ea:	4622      	mov	r2, r4
 80087ec:	462b      	mov	r3, r5
 80087ee:	1891      	adds	r1, r2, r2
 80087f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80087f2:	415b      	adcs	r3, r3
 80087f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80087fa:	4621      	mov	r1, r4
 80087fc:	eb12 0801 	adds.w	r8, r2, r1
 8008800:	4629      	mov	r1, r5
 8008802:	eb43 0901 	adc.w	r9, r3, r1
 8008806:	f04f 0200 	mov.w	r2, #0
 800880a:	f04f 0300 	mov.w	r3, #0
 800880e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008812:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008816:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800881a:	4690      	mov	r8, r2
 800881c:	4699      	mov	r9, r3
 800881e:	4623      	mov	r3, r4
 8008820:	eb18 0303 	adds.w	r3, r8, r3
 8008824:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008828:	462b      	mov	r3, r5
 800882a:	eb49 0303 	adc.w	r3, r9, r3
 800882e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800883e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008842:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008846:	460b      	mov	r3, r1
 8008848:	18db      	adds	r3, r3, r3
 800884a:	653b      	str	r3, [r7, #80]	; 0x50
 800884c:	4613      	mov	r3, r2
 800884e:	eb42 0303 	adc.w	r3, r2, r3
 8008852:	657b      	str	r3, [r7, #84]	; 0x54
 8008854:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008858:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800885c:	f7f8 fa1c 	bl	8000c98 <__aeabi_uldivmod>
 8008860:	4602      	mov	r2, r0
 8008862:	460b      	mov	r3, r1
 8008864:	4b61      	ldr	r3, [pc, #388]	; (80089ec <UART_SetConfig+0x2d4>)
 8008866:	fba3 2302 	umull	r2, r3, r3, r2
 800886a:	095b      	lsrs	r3, r3, #5
 800886c:	011c      	lsls	r4, r3, #4
 800886e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008872:	2200      	movs	r2, #0
 8008874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008878:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800887c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008880:	4642      	mov	r2, r8
 8008882:	464b      	mov	r3, r9
 8008884:	1891      	adds	r1, r2, r2
 8008886:	64b9      	str	r1, [r7, #72]	; 0x48
 8008888:	415b      	adcs	r3, r3
 800888a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800888c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008890:	4641      	mov	r1, r8
 8008892:	eb12 0a01 	adds.w	sl, r2, r1
 8008896:	4649      	mov	r1, r9
 8008898:	eb43 0b01 	adc.w	fp, r3, r1
 800889c:	f04f 0200 	mov.w	r2, #0
 80088a0:	f04f 0300 	mov.w	r3, #0
 80088a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80088a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80088ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088b0:	4692      	mov	sl, r2
 80088b2:	469b      	mov	fp, r3
 80088b4:	4643      	mov	r3, r8
 80088b6:	eb1a 0303 	adds.w	r3, sl, r3
 80088ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80088be:	464b      	mov	r3, r9
 80088c0:	eb4b 0303 	adc.w	r3, fp, r3
 80088c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80088c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80088d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80088dc:	460b      	mov	r3, r1
 80088de:	18db      	adds	r3, r3, r3
 80088e0:	643b      	str	r3, [r7, #64]	; 0x40
 80088e2:	4613      	mov	r3, r2
 80088e4:	eb42 0303 	adc.w	r3, r2, r3
 80088e8:	647b      	str	r3, [r7, #68]	; 0x44
 80088ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80088ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80088f2:	f7f8 f9d1 	bl	8000c98 <__aeabi_uldivmod>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4611      	mov	r1, r2
 80088fc:	4b3b      	ldr	r3, [pc, #236]	; (80089ec <UART_SetConfig+0x2d4>)
 80088fe:	fba3 2301 	umull	r2, r3, r3, r1
 8008902:	095b      	lsrs	r3, r3, #5
 8008904:	2264      	movs	r2, #100	; 0x64
 8008906:	fb02 f303 	mul.w	r3, r2, r3
 800890a:	1acb      	subs	r3, r1, r3
 800890c:	00db      	lsls	r3, r3, #3
 800890e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008912:	4b36      	ldr	r3, [pc, #216]	; (80089ec <UART_SetConfig+0x2d4>)
 8008914:	fba3 2302 	umull	r2, r3, r3, r2
 8008918:	095b      	lsrs	r3, r3, #5
 800891a:	005b      	lsls	r3, r3, #1
 800891c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008920:	441c      	add	r4, r3
 8008922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008926:	2200      	movs	r2, #0
 8008928:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800892c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008930:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008934:	4642      	mov	r2, r8
 8008936:	464b      	mov	r3, r9
 8008938:	1891      	adds	r1, r2, r2
 800893a:	63b9      	str	r1, [r7, #56]	; 0x38
 800893c:	415b      	adcs	r3, r3
 800893e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008940:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008944:	4641      	mov	r1, r8
 8008946:	1851      	adds	r1, r2, r1
 8008948:	6339      	str	r1, [r7, #48]	; 0x30
 800894a:	4649      	mov	r1, r9
 800894c:	414b      	adcs	r3, r1
 800894e:	637b      	str	r3, [r7, #52]	; 0x34
 8008950:	f04f 0200 	mov.w	r2, #0
 8008954:	f04f 0300 	mov.w	r3, #0
 8008958:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800895c:	4659      	mov	r1, fp
 800895e:	00cb      	lsls	r3, r1, #3
 8008960:	4651      	mov	r1, sl
 8008962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008966:	4651      	mov	r1, sl
 8008968:	00ca      	lsls	r2, r1, #3
 800896a:	4610      	mov	r0, r2
 800896c:	4619      	mov	r1, r3
 800896e:	4603      	mov	r3, r0
 8008970:	4642      	mov	r2, r8
 8008972:	189b      	adds	r3, r3, r2
 8008974:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008978:	464b      	mov	r3, r9
 800897a:	460a      	mov	r2, r1
 800897c:	eb42 0303 	adc.w	r3, r2, r3
 8008980:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008990:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008994:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008998:	460b      	mov	r3, r1
 800899a:	18db      	adds	r3, r3, r3
 800899c:	62bb      	str	r3, [r7, #40]	; 0x28
 800899e:	4613      	mov	r3, r2
 80089a0:	eb42 0303 	adc.w	r3, r2, r3
 80089a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80089aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80089ae:	f7f8 f973 	bl	8000c98 <__aeabi_uldivmod>
 80089b2:	4602      	mov	r2, r0
 80089b4:	460b      	mov	r3, r1
 80089b6:	4b0d      	ldr	r3, [pc, #52]	; (80089ec <UART_SetConfig+0x2d4>)
 80089b8:	fba3 1302 	umull	r1, r3, r3, r2
 80089bc:	095b      	lsrs	r3, r3, #5
 80089be:	2164      	movs	r1, #100	; 0x64
 80089c0:	fb01 f303 	mul.w	r3, r1, r3
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	00db      	lsls	r3, r3, #3
 80089c8:	3332      	adds	r3, #50	; 0x32
 80089ca:	4a08      	ldr	r2, [pc, #32]	; (80089ec <UART_SetConfig+0x2d4>)
 80089cc:	fba2 2303 	umull	r2, r3, r2, r3
 80089d0:	095b      	lsrs	r3, r3, #5
 80089d2:	f003 0207 	and.w	r2, r3, #7
 80089d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4422      	add	r2, r4
 80089de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80089e0:	e105      	b.n	8008bee <UART_SetConfig+0x4d6>
 80089e2:	bf00      	nop
 80089e4:	40011000 	.word	0x40011000
 80089e8:	40011400 	.word	0x40011400
 80089ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80089f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089f4:	2200      	movs	r2, #0
 80089f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80089fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80089fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008a02:	4642      	mov	r2, r8
 8008a04:	464b      	mov	r3, r9
 8008a06:	1891      	adds	r1, r2, r2
 8008a08:	6239      	str	r1, [r7, #32]
 8008a0a:	415b      	adcs	r3, r3
 8008a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a12:	4641      	mov	r1, r8
 8008a14:	1854      	adds	r4, r2, r1
 8008a16:	4649      	mov	r1, r9
 8008a18:	eb43 0501 	adc.w	r5, r3, r1
 8008a1c:	f04f 0200 	mov.w	r2, #0
 8008a20:	f04f 0300 	mov.w	r3, #0
 8008a24:	00eb      	lsls	r3, r5, #3
 8008a26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a2a:	00e2      	lsls	r2, r4, #3
 8008a2c:	4614      	mov	r4, r2
 8008a2e:	461d      	mov	r5, r3
 8008a30:	4643      	mov	r3, r8
 8008a32:	18e3      	adds	r3, r4, r3
 8008a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008a38:	464b      	mov	r3, r9
 8008a3a:	eb45 0303 	adc.w	r3, r5, r3
 8008a3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008a4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a52:	f04f 0200 	mov.w	r2, #0
 8008a56:	f04f 0300 	mov.w	r3, #0
 8008a5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008a5e:	4629      	mov	r1, r5
 8008a60:	008b      	lsls	r3, r1, #2
 8008a62:	4621      	mov	r1, r4
 8008a64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a68:	4621      	mov	r1, r4
 8008a6a:	008a      	lsls	r2, r1, #2
 8008a6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008a70:	f7f8 f912 	bl	8000c98 <__aeabi_uldivmod>
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	4b60      	ldr	r3, [pc, #384]	; (8008bfc <UART_SetConfig+0x4e4>)
 8008a7a:	fba3 2302 	umull	r2, r3, r3, r2
 8008a7e:	095b      	lsrs	r3, r3, #5
 8008a80:	011c      	lsls	r4, r3, #4
 8008a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a86:	2200      	movs	r2, #0
 8008a88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008a8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008a90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008a94:	4642      	mov	r2, r8
 8008a96:	464b      	mov	r3, r9
 8008a98:	1891      	adds	r1, r2, r2
 8008a9a:	61b9      	str	r1, [r7, #24]
 8008a9c:	415b      	adcs	r3, r3
 8008a9e:	61fb      	str	r3, [r7, #28]
 8008aa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008aa4:	4641      	mov	r1, r8
 8008aa6:	1851      	adds	r1, r2, r1
 8008aa8:	6139      	str	r1, [r7, #16]
 8008aaa:	4649      	mov	r1, r9
 8008aac:	414b      	adcs	r3, r1
 8008aae:	617b      	str	r3, [r7, #20]
 8008ab0:	f04f 0200 	mov.w	r2, #0
 8008ab4:	f04f 0300 	mov.w	r3, #0
 8008ab8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008abc:	4659      	mov	r1, fp
 8008abe:	00cb      	lsls	r3, r1, #3
 8008ac0:	4651      	mov	r1, sl
 8008ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ac6:	4651      	mov	r1, sl
 8008ac8:	00ca      	lsls	r2, r1, #3
 8008aca:	4610      	mov	r0, r2
 8008acc:	4619      	mov	r1, r3
 8008ace:	4603      	mov	r3, r0
 8008ad0:	4642      	mov	r2, r8
 8008ad2:	189b      	adds	r3, r3, r2
 8008ad4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ad8:	464b      	mov	r3, r9
 8008ada:	460a      	mov	r2, r1
 8008adc:	eb42 0303 	adc.w	r3, r2, r3
 8008ae0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ae8:	685b      	ldr	r3, [r3, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	67bb      	str	r3, [r7, #120]	; 0x78
 8008aee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008af0:	f04f 0200 	mov.w	r2, #0
 8008af4:	f04f 0300 	mov.w	r3, #0
 8008af8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008afc:	4649      	mov	r1, r9
 8008afe:	008b      	lsls	r3, r1, #2
 8008b00:	4641      	mov	r1, r8
 8008b02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b06:	4641      	mov	r1, r8
 8008b08:	008a      	lsls	r2, r1, #2
 8008b0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008b0e:	f7f8 f8c3 	bl	8000c98 <__aeabi_uldivmod>
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	4b39      	ldr	r3, [pc, #228]	; (8008bfc <UART_SetConfig+0x4e4>)
 8008b18:	fba3 1302 	umull	r1, r3, r3, r2
 8008b1c:	095b      	lsrs	r3, r3, #5
 8008b1e:	2164      	movs	r1, #100	; 0x64
 8008b20:	fb01 f303 	mul.w	r3, r1, r3
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	011b      	lsls	r3, r3, #4
 8008b28:	3332      	adds	r3, #50	; 0x32
 8008b2a:	4a34      	ldr	r2, [pc, #208]	; (8008bfc <UART_SetConfig+0x4e4>)
 8008b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b30:	095b      	lsrs	r3, r3, #5
 8008b32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b36:	441c      	add	r4, r3
 8008b38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	673b      	str	r3, [r7, #112]	; 0x70
 8008b40:	677a      	str	r2, [r7, #116]	; 0x74
 8008b42:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008b46:	4642      	mov	r2, r8
 8008b48:	464b      	mov	r3, r9
 8008b4a:	1891      	adds	r1, r2, r2
 8008b4c:	60b9      	str	r1, [r7, #8]
 8008b4e:	415b      	adcs	r3, r3
 8008b50:	60fb      	str	r3, [r7, #12]
 8008b52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b56:	4641      	mov	r1, r8
 8008b58:	1851      	adds	r1, r2, r1
 8008b5a:	6039      	str	r1, [r7, #0]
 8008b5c:	4649      	mov	r1, r9
 8008b5e:	414b      	adcs	r3, r1
 8008b60:	607b      	str	r3, [r7, #4]
 8008b62:	f04f 0200 	mov.w	r2, #0
 8008b66:	f04f 0300 	mov.w	r3, #0
 8008b6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008b6e:	4659      	mov	r1, fp
 8008b70:	00cb      	lsls	r3, r1, #3
 8008b72:	4651      	mov	r1, sl
 8008b74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b78:	4651      	mov	r1, sl
 8008b7a:	00ca      	lsls	r2, r1, #3
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	4619      	mov	r1, r3
 8008b80:	4603      	mov	r3, r0
 8008b82:	4642      	mov	r2, r8
 8008b84:	189b      	adds	r3, r3, r2
 8008b86:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b88:	464b      	mov	r3, r9
 8008b8a:	460a      	mov	r2, r1
 8008b8c:	eb42 0303 	adc.w	r3, r2, r3
 8008b90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	663b      	str	r3, [r7, #96]	; 0x60
 8008b9c:	667a      	str	r2, [r7, #100]	; 0x64
 8008b9e:	f04f 0200 	mov.w	r2, #0
 8008ba2:	f04f 0300 	mov.w	r3, #0
 8008ba6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008baa:	4649      	mov	r1, r9
 8008bac:	008b      	lsls	r3, r1, #2
 8008bae:	4641      	mov	r1, r8
 8008bb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bb4:	4641      	mov	r1, r8
 8008bb6:	008a      	lsls	r2, r1, #2
 8008bb8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008bbc:	f7f8 f86c 	bl	8000c98 <__aeabi_uldivmod>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	4b0d      	ldr	r3, [pc, #52]	; (8008bfc <UART_SetConfig+0x4e4>)
 8008bc6:	fba3 1302 	umull	r1, r3, r3, r2
 8008bca:	095b      	lsrs	r3, r3, #5
 8008bcc:	2164      	movs	r1, #100	; 0x64
 8008bce:	fb01 f303 	mul.w	r3, r1, r3
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	011b      	lsls	r3, r3, #4
 8008bd6:	3332      	adds	r3, #50	; 0x32
 8008bd8:	4a08      	ldr	r2, [pc, #32]	; (8008bfc <UART_SetConfig+0x4e4>)
 8008bda:	fba2 2303 	umull	r2, r3, r2, r3
 8008bde:	095b      	lsrs	r3, r3, #5
 8008be0:	f003 020f 	and.w	r2, r3, #15
 8008be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4422      	add	r2, r4
 8008bec:	609a      	str	r2, [r3, #8]
}
 8008bee:	bf00      	nop
 8008bf0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bfa:	bf00      	nop
 8008bfc:	51eb851f 	.word	0x51eb851f

08008c00 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8008c08:	4b22      	ldr	r3, [pc, #136]	; (8008c94 <WIZCHIP_READ+0x94>)
 8008c0a:	68db      	ldr	r3, [r3, #12]
 8008c0c:	4798      	blx	r3
   WIZCHIP.CS._select();
 8008c0e:	4b21      	ldr	r3, [pc, #132]	; (8008c94 <WIZCHIP_READ+0x94>)
 8008c10:	695b      	ldr	r3, [r3, #20]
 8008c12:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8008c14:	4b1f      	ldr	r3, [pc, #124]	; (8008c94 <WIZCHIP_READ+0x94>)
 8008c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d003      	beq.n	8008c24 <WIZCHIP_READ+0x24>
 8008c1c:	4b1d      	ldr	r3, [pc, #116]	; (8008c94 <WIZCHIP_READ+0x94>)
 8008c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d114      	bne.n	8008c4e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8008c24:	4b1b      	ldr	r3, [pc, #108]	; (8008c94 <WIZCHIP_READ+0x94>)
 8008c26:	6a1b      	ldr	r3, [r3, #32]
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	0c12      	lsrs	r2, r2, #16
 8008c2c:	b2d2      	uxtb	r2, r2
 8008c2e:	4610      	mov	r0, r2
 8008c30:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8008c32:	4b18      	ldr	r3, [pc, #96]	; (8008c94 <WIZCHIP_READ+0x94>)
 8008c34:	6a1b      	ldr	r3, [r3, #32]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	0a12      	lsrs	r2, r2, #8
 8008c3a:	b2d2      	uxtb	r2, r2
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8008c40:	4b14      	ldr	r3, [pc, #80]	; (8008c94 <WIZCHIP_READ+0x94>)
 8008c42:	6a1b      	ldr	r3, [r3, #32]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	b2d2      	uxtb	r2, r2
 8008c48:	4610      	mov	r0, r2
 8008c4a:	4798      	blx	r3
 8008c4c:	e011      	b.n	8008c72 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	0c1b      	lsrs	r3, r3, #16
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	0a1b      	lsrs	r3, r3, #8
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8008c64:	4b0b      	ldr	r3, [pc, #44]	; (8008c94 <WIZCHIP_READ+0x94>)
 8008c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c68:	f107 020c 	add.w	r2, r7, #12
 8008c6c:	2103      	movs	r1, #3
 8008c6e:	4610      	mov	r0, r2
 8008c70:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8008c72:	4b08      	ldr	r3, [pc, #32]	; (8008c94 <WIZCHIP_READ+0x94>)
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	4798      	blx	r3
 8008c78:	4603      	mov	r3, r0
 8008c7a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8008c7c:	4b05      	ldr	r3, [pc, #20]	; (8008c94 <WIZCHIP_READ+0x94>)
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8008c82:	4b04      	ldr	r3, [pc, #16]	; (8008c94 <WIZCHIP_READ+0x94>)
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	4798      	blx	r3
   return ret;
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	20000098 	.word	0x20000098

08008c98 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8008ca4:	4b22      	ldr	r3, [pc, #136]	; (8008d30 <WIZCHIP_WRITE+0x98>)
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	4798      	blx	r3
   WIZCHIP.CS._select();
 8008caa:	4b21      	ldr	r3, [pc, #132]	; (8008d30 <WIZCHIP_WRITE+0x98>)
 8008cac:	695b      	ldr	r3, [r3, #20]
 8008cae:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f043 0304 	orr.w	r3, r3, #4
 8008cb6:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8008cb8:	4b1d      	ldr	r3, [pc, #116]	; (8008d30 <WIZCHIP_WRITE+0x98>)
 8008cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d119      	bne.n	8008cf4 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8008cc0:	4b1b      	ldr	r3, [pc, #108]	; (8008d30 <WIZCHIP_WRITE+0x98>)
 8008cc2:	6a1b      	ldr	r3, [r3, #32]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	0c12      	lsrs	r2, r2, #16
 8008cc8:	b2d2      	uxtb	r2, r2
 8008cca:	4610      	mov	r0, r2
 8008ccc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8008cce:	4b18      	ldr	r3, [pc, #96]	; (8008d30 <WIZCHIP_WRITE+0x98>)
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	0a12      	lsrs	r2, r2, #8
 8008cd6:	b2d2      	uxtb	r2, r2
 8008cd8:	4610      	mov	r0, r2
 8008cda:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8008cdc:	4b14      	ldr	r3, [pc, #80]	; (8008d30 <WIZCHIP_WRITE+0x98>)
 8008cde:	6a1b      	ldr	r3, [r3, #32]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	b2d2      	uxtb	r2, r2
 8008ce4:	4610      	mov	r0, r2
 8008ce6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8008ce8:	4b11      	ldr	r3, [pc, #68]	; (8008d30 <WIZCHIP_WRITE+0x98>)
 8008cea:	6a1b      	ldr	r3, [r3, #32]
 8008cec:	78fa      	ldrb	r2, [r7, #3]
 8008cee:	4610      	mov	r0, r2
 8008cf0:	4798      	blx	r3
 8008cf2:	e013      	b.n	8008d1c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	0c1b      	lsrs	r3, r3, #16
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	0a1b      	lsrs	r3, r3, #8
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8008d0a:	78fb      	ldrb	r3, [r7, #3]
 8008d0c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8008d0e:	4b08      	ldr	r3, [pc, #32]	; (8008d30 <WIZCHIP_WRITE+0x98>)
 8008d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d12:	f107 020c 	add.w	r2, r7, #12
 8008d16:	2104      	movs	r1, #4
 8008d18:	4610      	mov	r0, r2
 8008d1a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8008d1c:	4b04      	ldr	r3, [pc, #16]	; (8008d30 <WIZCHIP_WRITE+0x98>)
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8008d22:	4b03      	ldr	r3, [pc, #12]	; (8008d30 <WIZCHIP_WRITE+0x98>)
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	4798      	blx	r3
}
 8008d28:	bf00      	nop
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	20000098 	.word	0x20000098

08008d34 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8008d34:	b590      	push	{r4, r7, lr}
 8008d36:	b087      	sub	sp, #28
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	4613      	mov	r3, r2
 8008d40:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8008d42:	4b2b      	ldr	r3, [pc, #172]	; (8008df0 <WIZCHIP_READ_BUF+0xbc>)
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	4798      	blx	r3
   WIZCHIP.CS._select();
 8008d48:	4b29      	ldr	r3, [pc, #164]	; (8008df0 <WIZCHIP_READ_BUF+0xbc>)
 8008d4a:	695b      	ldr	r3, [r3, #20]
 8008d4c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8008d4e:	4b28      	ldr	r3, [pc, #160]	; (8008df0 <WIZCHIP_READ_BUF+0xbc>)
 8008d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d003      	beq.n	8008d5e <WIZCHIP_READ_BUF+0x2a>
 8008d56:	4b26      	ldr	r3, [pc, #152]	; (8008df0 <WIZCHIP_READ_BUF+0xbc>)
 8008d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d126      	bne.n	8008dac <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8008d5e:	4b24      	ldr	r3, [pc, #144]	; (8008df0 <WIZCHIP_READ_BUF+0xbc>)
 8008d60:	6a1b      	ldr	r3, [r3, #32]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	0c12      	lsrs	r2, r2, #16
 8008d66:	b2d2      	uxtb	r2, r2
 8008d68:	4610      	mov	r0, r2
 8008d6a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8008d6c:	4b20      	ldr	r3, [pc, #128]	; (8008df0 <WIZCHIP_READ_BUF+0xbc>)
 8008d6e:	6a1b      	ldr	r3, [r3, #32]
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	0a12      	lsrs	r2, r2, #8
 8008d74:	b2d2      	uxtb	r2, r2
 8008d76:	4610      	mov	r0, r2
 8008d78:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8008d7a:	4b1d      	ldr	r3, [pc, #116]	; (8008df0 <WIZCHIP_READ_BUF+0xbc>)
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	b2d2      	uxtb	r2, r2
 8008d82:	4610      	mov	r0, r2
 8008d84:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8008d86:	2300      	movs	r3, #0
 8008d88:	82fb      	strh	r3, [r7, #22]
 8008d8a:	e00a      	b.n	8008da2 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8008d8c:	4b18      	ldr	r3, [pc, #96]	; (8008df0 <WIZCHIP_READ_BUF+0xbc>)
 8008d8e:	69db      	ldr	r3, [r3, #28]
 8008d90:	8afa      	ldrh	r2, [r7, #22]
 8008d92:	68b9      	ldr	r1, [r7, #8]
 8008d94:	188c      	adds	r4, r1, r2
 8008d96:	4798      	blx	r3
 8008d98:	4603      	mov	r3, r0
 8008d9a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8008d9c:	8afb      	ldrh	r3, [r7, #22]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	82fb      	strh	r3, [r7, #22]
 8008da2:	8afa      	ldrh	r2, [r7, #22]
 8008da4:	88fb      	ldrh	r3, [r7, #6]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d3f0      	bcc.n	8008d8c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8008daa:	e017      	b.n	8008ddc <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	0c1b      	lsrs	r3, r3, #16
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	0a1b      	lsrs	r3, r3, #8
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8008dc2:	4b0b      	ldr	r3, [pc, #44]	; (8008df0 <WIZCHIP_READ_BUF+0xbc>)
 8008dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc6:	f107 0210 	add.w	r2, r7, #16
 8008dca:	2103      	movs	r1, #3
 8008dcc:	4610      	mov	r0, r2
 8008dce:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8008dd0:	4b07      	ldr	r3, [pc, #28]	; (8008df0 <WIZCHIP_READ_BUF+0xbc>)
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd4:	88fa      	ldrh	r2, [r7, #6]
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	68b8      	ldr	r0, [r7, #8]
 8008dda:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8008ddc:	4b04      	ldr	r3, [pc, #16]	; (8008df0 <WIZCHIP_READ_BUF+0xbc>)
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8008de2:	4b03      	ldr	r3, [pc, #12]	; (8008df0 <WIZCHIP_READ_BUF+0xbc>)
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	4798      	blx	r3
}
 8008de8:	bf00      	nop
 8008dea:	371c      	adds	r7, #28
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd90      	pop	{r4, r7, pc}
 8008df0:	20000098 	.word	0x20000098

08008df4 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b086      	sub	sp, #24
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8008e02:	4b2b      	ldr	r3, [pc, #172]	; (8008eb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	4798      	blx	r3
   WIZCHIP.CS._select();
 8008e08:	4b29      	ldr	r3, [pc, #164]	; (8008eb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8008e0a:	695b      	ldr	r3, [r3, #20]
 8008e0c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f043 0304 	orr.w	r3, r3, #4
 8008e14:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8008e16:	4b26      	ldr	r3, [pc, #152]	; (8008eb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8008e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d126      	bne.n	8008e6c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8008e1e:	4b24      	ldr	r3, [pc, #144]	; (8008eb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	0c12      	lsrs	r2, r2, #16
 8008e26:	b2d2      	uxtb	r2, r2
 8008e28:	4610      	mov	r0, r2
 8008e2a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8008e2c:	4b20      	ldr	r3, [pc, #128]	; (8008eb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8008e2e:	6a1b      	ldr	r3, [r3, #32]
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	0a12      	lsrs	r2, r2, #8
 8008e34:	b2d2      	uxtb	r2, r2
 8008e36:	4610      	mov	r0, r2
 8008e38:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8008e3a:	4b1d      	ldr	r3, [pc, #116]	; (8008eb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8008e3c:	6a1b      	ldr	r3, [r3, #32]
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	b2d2      	uxtb	r2, r2
 8008e42:	4610      	mov	r0, r2
 8008e44:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8008e46:	2300      	movs	r3, #0
 8008e48:	82fb      	strh	r3, [r7, #22]
 8008e4a:	e00a      	b.n	8008e62 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8008e4c:	4b18      	ldr	r3, [pc, #96]	; (8008eb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8008e4e:	6a1b      	ldr	r3, [r3, #32]
 8008e50:	8afa      	ldrh	r2, [r7, #22]
 8008e52:	68b9      	ldr	r1, [r7, #8]
 8008e54:	440a      	add	r2, r1
 8008e56:	7812      	ldrb	r2, [r2, #0]
 8008e58:	4610      	mov	r0, r2
 8008e5a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8008e5c:	8afb      	ldrh	r3, [r7, #22]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	82fb      	strh	r3, [r7, #22]
 8008e62:	8afa      	ldrh	r2, [r7, #22]
 8008e64:	88fb      	ldrh	r3, [r7, #6]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d3f0      	bcc.n	8008e4c <WIZCHIP_WRITE_BUF+0x58>
 8008e6a:	e017      	b.n	8008e9c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	0c1b      	lsrs	r3, r3, #16
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	0a1b      	lsrs	r3, r3, #8
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8008e82:	4b0b      	ldr	r3, [pc, #44]	; (8008eb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8008e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e86:	f107 0210 	add.w	r2, r7, #16
 8008e8a:	2103      	movs	r1, #3
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8008e90:	4b07      	ldr	r3, [pc, #28]	; (8008eb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8008e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e94:	88fa      	ldrh	r2, [r7, #6]
 8008e96:	4611      	mov	r1, r2
 8008e98:	68b8      	ldr	r0, [r7, #8]
 8008e9a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8008e9c:	4b04      	ldr	r3, [pc, #16]	; (8008eb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8008ea2:	4b03      	ldr	r3, [pc, #12]	; (8008eb0 <WIZCHIP_WRITE_BUF+0xbc>)
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	4798      	blx	r3
}
 8008ea8:	bf00      	nop
 8008eaa:	3718      	adds	r7, #24
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	20000098 	.word	0x20000098

08008eb4 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8008eb4:	b590      	push	{r4, r7, lr}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	4603      	mov	r3, r0
 8008ebc:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	81fb      	strh	r3, [r7, #14]
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8008ec6:	79fb      	ldrb	r3, [r7, #7]
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	3301      	adds	r3, #1
 8008ecc:	00db      	lsls	r3, r3, #3
 8008ece:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7ff fe94 	bl	8008c00 <WIZCHIP_READ>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8008edc:	89bb      	ldrh	r3, [r7, #12]
 8008ede:	021b      	lsls	r3, r3, #8
 8008ee0:	b29c      	uxth	r4, r3
 8008ee2:	79fb      	ldrb	r3, [r7, #7]
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	00db      	lsls	r3, r3, #3
 8008eea:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7ff fe86 	bl	8008c00 <WIZCHIP_READ>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	4423      	add	r3, r4
 8008efa:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8008efc:	89bb      	ldrh	r3, [r7, #12]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d01a      	beq.n	8008f38 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8008f02:	79fb      	ldrb	r3, [r7, #7]
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	3301      	adds	r3, #1
 8008f08:	00db      	lsls	r3, r3, #3
 8008f0a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7ff fe76 	bl	8008c00 <WIZCHIP_READ>
 8008f14:	4603      	mov	r3, r0
 8008f16:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8008f18:	89fb      	ldrh	r3, [r7, #14]
 8008f1a:	021b      	lsls	r3, r3, #8
 8008f1c:	b29c      	uxth	r4, r3
 8008f1e:	79fb      	ldrb	r3, [r7, #7]
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	3301      	adds	r3, #1
 8008f24:	00db      	lsls	r3, r3, #3
 8008f26:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f7ff fe68 	bl	8008c00 <WIZCHIP_READ>
 8008f30:	4603      	mov	r3, r0
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	4423      	add	r3, r4
 8008f36:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8008f38:	89fa      	ldrh	r2, [r7, #14]
 8008f3a:	89bb      	ldrh	r3, [r7, #12]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d1c2      	bne.n	8008ec6 <getSn_TX_FSR+0x12>
   return val;
 8008f40:	89fb      	ldrh	r3, [r7, #14]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3714      	adds	r7, #20
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd90      	pop	{r4, r7, pc}

08008f4a <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8008f4a:	b590      	push	{r4, r7, lr}
 8008f4c:	b085      	sub	sp, #20
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	4603      	mov	r3, r0
 8008f52:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8008f54:	2300      	movs	r3, #0
 8008f56:	81fb      	strh	r3, [r7, #14]
 8008f58:	2300      	movs	r3, #0
 8008f5a:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8008f5c:	79fb      	ldrb	r3, [r7, #7]
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	3301      	adds	r3, #1
 8008f62:	00db      	lsls	r3, r3, #3
 8008f64:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7ff fe49 	bl	8008c00 <WIZCHIP_READ>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8008f72:	89bb      	ldrh	r3, [r7, #12]
 8008f74:	021b      	lsls	r3, r3, #8
 8008f76:	b29c      	uxth	r4, r3
 8008f78:	79fb      	ldrb	r3, [r7, #7]
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	00db      	lsls	r3, r3, #3
 8008f80:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7ff fe3b 	bl	8008c00 <WIZCHIP_READ>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	4423      	add	r3, r4
 8008f90:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8008f92:	89bb      	ldrh	r3, [r7, #12]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d01a      	beq.n	8008fce <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8008f98:	79fb      	ldrb	r3, [r7, #7]
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	00db      	lsls	r3, r3, #3
 8008fa0:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7ff fe2b 	bl	8008c00 <WIZCHIP_READ>
 8008faa:	4603      	mov	r3, r0
 8008fac:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8008fae:	89fb      	ldrh	r3, [r7, #14]
 8008fb0:	021b      	lsls	r3, r3, #8
 8008fb2:	b29c      	uxth	r4, r3
 8008fb4:	79fb      	ldrb	r3, [r7, #7]
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	3301      	adds	r3, #1
 8008fba:	00db      	lsls	r3, r3, #3
 8008fbc:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7ff fe1d 	bl	8008c00 <WIZCHIP_READ>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	4423      	add	r3, r4
 8008fcc:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8008fce:	89fa      	ldrh	r2, [r7, #14]
 8008fd0:	89bb      	ldrh	r3, [r7, #12]
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d1c2      	bne.n	8008f5c <getSn_RX_RSR+0x12>
   return val;
 8008fd6:	89fb      	ldrh	r3, [r7, #14]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd90      	pop	{r4, r7, pc}

08008fe0 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8008fe0:	b590      	push	{r4, r7, lr}
 8008fe2:	b085      	sub	sp, #20
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	6039      	str	r1, [r7, #0]
 8008fea:	71fb      	strb	r3, [r7, #7]
 8008fec:	4613      	mov	r3, r2
 8008fee:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8008ff8:	88bb      	ldrh	r3, [r7, #4]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d048      	beq.n	8009090 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8008ffe:	79fb      	ldrb	r3, [r7, #7]
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	3301      	adds	r3, #1
 8009004:	00db      	lsls	r3, r3, #3
 8009006:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800900a:	4618      	mov	r0, r3
 800900c:	f7ff fdf8 	bl	8008c00 <WIZCHIP_READ>
 8009010:	4603      	mov	r3, r0
 8009012:	b29b      	uxth	r3, r3
 8009014:	021b      	lsls	r3, r3, #8
 8009016:	b29c      	uxth	r4, r3
 8009018:	79fb      	ldrb	r3, [r7, #7]
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	3301      	adds	r3, #1
 800901e:	00db      	lsls	r3, r3, #3
 8009020:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8009024:	4618      	mov	r0, r3
 8009026:	f7ff fdeb 	bl	8008c00 <WIZCHIP_READ>
 800902a:	4603      	mov	r3, r0
 800902c:	b29b      	uxth	r3, r3
 800902e:	4423      	add	r3, r4
 8009030:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8009032:	89fb      	ldrh	r3, [r7, #14]
 8009034:	021b      	lsls	r3, r3, #8
 8009036:	79fa      	ldrb	r2, [r7, #7]
 8009038:	0092      	lsls	r2, r2, #2
 800903a:	3202      	adds	r2, #2
 800903c:	00d2      	lsls	r2, r2, #3
 800903e:	4413      	add	r3, r2
 8009040:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8009042:	88bb      	ldrh	r3, [r7, #4]
 8009044:	461a      	mov	r2, r3
 8009046:	6839      	ldr	r1, [r7, #0]
 8009048:	68b8      	ldr	r0, [r7, #8]
 800904a:	f7ff fed3 	bl	8008df4 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800904e:	89fa      	ldrh	r2, [r7, #14]
 8009050:	88bb      	ldrh	r3, [r7, #4]
 8009052:	4413      	add	r3, r2
 8009054:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8009056:	79fb      	ldrb	r3, [r7, #7]
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	3301      	adds	r3, #1
 800905c:	00db      	lsls	r3, r3, #3
 800905e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8009062:	461a      	mov	r2, r3
 8009064:	89fb      	ldrh	r3, [r7, #14]
 8009066:	0a1b      	lsrs	r3, r3, #8
 8009068:	b29b      	uxth	r3, r3
 800906a:	b2db      	uxtb	r3, r3
 800906c:	4619      	mov	r1, r3
 800906e:	4610      	mov	r0, r2
 8009070:	f7ff fe12 	bl	8008c98 <WIZCHIP_WRITE>
 8009074:	79fb      	ldrb	r3, [r7, #7]
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	3301      	adds	r3, #1
 800907a:	00db      	lsls	r3, r3, #3
 800907c:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8009080:	461a      	mov	r2, r3
 8009082:	89fb      	ldrh	r3, [r7, #14]
 8009084:	b2db      	uxtb	r3, r3
 8009086:	4619      	mov	r1, r3
 8009088:	4610      	mov	r0, r2
 800908a:	f7ff fe05 	bl	8008c98 <WIZCHIP_WRITE>
 800908e:	e000      	b.n	8009092 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8009090:	bf00      	nop
}
 8009092:	3714      	adds	r7, #20
 8009094:	46bd      	mov	sp, r7
 8009096:	bd90      	pop	{r4, r7, pc}

08009098 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8009098:	b590      	push	{r4, r7, lr}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	4603      	mov	r3, r0
 80090a0:	6039      	str	r1, [r7, #0]
 80090a2:	71fb      	strb	r3, [r7, #7]
 80090a4:	4613      	mov	r3, r2
 80090a6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80090a8:	2300      	movs	r3, #0
 80090aa:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80090ac:	2300      	movs	r3, #0
 80090ae:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80090b0:	88bb      	ldrh	r3, [r7, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d048      	beq.n	8009148 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 80090b6:	79fb      	ldrb	r3, [r7, #7]
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	3301      	adds	r3, #1
 80090bc:	00db      	lsls	r3, r3, #3
 80090be:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7ff fd9c 	bl	8008c00 <WIZCHIP_READ>
 80090c8:	4603      	mov	r3, r0
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	021b      	lsls	r3, r3, #8
 80090ce:	b29c      	uxth	r4, r3
 80090d0:	79fb      	ldrb	r3, [r7, #7]
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	3301      	adds	r3, #1
 80090d6:	00db      	lsls	r3, r3, #3
 80090d8:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80090dc:	4618      	mov	r0, r3
 80090de:	f7ff fd8f 	bl	8008c00 <WIZCHIP_READ>
 80090e2:	4603      	mov	r3, r0
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	4423      	add	r3, r4
 80090e8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80090ea:	89fb      	ldrh	r3, [r7, #14]
 80090ec:	021b      	lsls	r3, r3, #8
 80090ee:	79fa      	ldrb	r2, [r7, #7]
 80090f0:	0092      	lsls	r2, r2, #2
 80090f2:	3203      	adds	r2, #3
 80090f4:	00d2      	lsls	r2, r2, #3
 80090f6:	4413      	add	r3, r2
 80090f8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80090fa:	88bb      	ldrh	r3, [r7, #4]
 80090fc:	461a      	mov	r2, r3
 80090fe:	6839      	ldr	r1, [r7, #0]
 8009100:	68b8      	ldr	r0, [r7, #8]
 8009102:	f7ff fe17 	bl	8008d34 <WIZCHIP_READ_BUF>
   ptr += len;
 8009106:	89fa      	ldrh	r2, [r7, #14]
 8009108:	88bb      	ldrh	r3, [r7, #4]
 800910a:	4413      	add	r3, r2
 800910c:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800910e:	79fb      	ldrb	r3, [r7, #7]
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	3301      	adds	r3, #1
 8009114:	00db      	lsls	r3, r3, #3
 8009116:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800911a:	461a      	mov	r2, r3
 800911c:	89fb      	ldrh	r3, [r7, #14]
 800911e:	0a1b      	lsrs	r3, r3, #8
 8009120:	b29b      	uxth	r3, r3
 8009122:	b2db      	uxtb	r3, r3
 8009124:	4619      	mov	r1, r3
 8009126:	4610      	mov	r0, r2
 8009128:	f7ff fdb6 	bl	8008c98 <WIZCHIP_WRITE>
 800912c:	79fb      	ldrb	r3, [r7, #7]
 800912e:	009b      	lsls	r3, r3, #2
 8009130:	3301      	adds	r3, #1
 8009132:	00db      	lsls	r3, r3, #3
 8009134:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8009138:	461a      	mov	r2, r3
 800913a:	89fb      	ldrh	r3, [r7, #14]
 800913c:	b2db      	uxtb	r3, r3
 800913e:	4619      	mov	r1, r3
 8009140:	4610      	mov	r0, r2
 8009142:	f7ff fda9 	bl	8008c98 <WIZCHIP_WRITE>
 8009146:	e000      	b.n	800914a <wiz_recv_data+0xb2>
   if(len == 0) return;
 8009148:	bf00      	nop
}
 800914a:	3714      	adds	r7, #20
 800914c:	46bd      	mov	sp, r7
 800914e:	bd90      	pop	{r4, r7, pc}

08009150 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8009150:	b590      	push	{r4, r7, lr}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	4603      	mov	r3, r0
 8009158:	460a      	mov	r2, r1
 800915a:	71fb      	strb	r3, [r7, #7]
 800915c:	4613      	mov	r3, r2
 800915e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8009160:	2300      	movs	r3, #0
 8009162:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8009164:	79fb      	ldrb	r3, [r7, #7]
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	3301      	adds	r3, #1
 800916a:	00db      	lsls	r3, r3, #3
 800916c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8009170:	4618      	mov	r0, r3
 8009172:	f7ff fd45 	bl	8008c00 <WIZCHIP_READ>
 8009176:	4603      	mov	r3, r0
 8009178:	b29b      	uxth	r3, r3
 800917a:	021b      	lsls	r3, r3, #8
 800917c:	b29c      	uxth	r4, r3
 800917e:	79fb      	ldrb	r3, [r7, #7]
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	3301      	adds	r3, #1
 8009184:	00db      	lsls	r3, r3, #3
 8009186:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800918a:	4618      	mov	r0, r3
 800918c:	f7ff fd38 	bl	8008c00 <WIZCHIP_READ>
 8009190:	4603      	mov	r3, r0
 8009192:	b29b      	uxth	r3, r3
 8009194:	4423      	add	r3, r4
 8009196:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8009198:	89fa      	ldrh	r2, [r7, #14]
 800919a:	88bb      	ldrh	r3, [r7, #4]
 800919c:	4413      	add	r3, r2
 800919e:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 80091a0:	79fb      	ldrb	r3, [r7, #7]
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	3301      	adds	r3, #1
 80091a6:	00db      	lsls	r3, r3, #3
 80091a8:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80091ac:	461a      	mov	r2, r3
 80091ae:	89fb      	ldrh	r3, [r7, #14]
 80091b0:	0a1b      	lsrs	r3, r3, #8
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	4619      	mov	r1, r3
 80091b8:	4610      	mov	r0, r2
 80091ba:	f7ff fd6d 	bl	8008c98 <WIZCHIP_WRITE>
 80091be:	79fb      	ldrb	r3, [r7, #7]
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	3301      	adds	r3, #1
 80091c4:	00db      	lsls	r3, r3, #3
 80091c6:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80091ca:	461a      	mov	r2, r3
 80091cc:	89fb      	ldrh	r3, [r7, #14]
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	4619      	mov	r1, r3
 80091d2:	4610      	mov	r0, r2
 80091d4:	f7ff fd60 	bl	8008c98 <WIZCHIP_WRITE>
}
 80091d8:	bf00      	nop
 80091da:	3714      	adds	r7, #20
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd90      	pop	{r4, r7, pc}

080091e0 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 80091e0:	b590      	push	{r4, r7, lr}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	4604      	mov	r4, r0
 80091e8:	4608      	mov	r0, r1
 80091ea:	4611      	mov	r1, r2
 80091ec:	461a      	mov	r2, r3
 80091ee:	4623      	mov	r3, r4
 80091f0:	71fb      	strb	r3, [r7, #7]
 80091f2:	4603      	mov	r3, r0
 80091f4:	71bb      	strb	r3, [r7, #6]
 80091f6:	460b      	mov	r3, r1
 80091f8:	80bb      	strh	r3, [r7, #4]
 80091fa:	4613      	mov	r3, r2
 80091fc:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 80091fe:	79fb      	ldrb	r3, [r7, #7]
 8009200:	2b08      	cmp	r3, #8
 8009202:	d902      	bls.n	800920a <socket+0x2a>
 8009204:	f04f 33ff 	mov.w	r3, #4294967295
 8009208:	e0f2      	b.n	80093f0 <socket+0x210>
	switch(protocol)
 800920a:	79bb      	ldrb	r3, [r7, #6]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d005      	beq.n	800921c <socket+0x3c>
 8009210:	2b00      	cmp	r3, #0
 8009212:	dd11      	ble.n	8009238 <socket+0x58>
 8009214:	3b02      	subs	r3, #2
 8009216:	2b02      	cmp	r3, #2
 8009218:	d80e      	bhi.n	8009238 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 800921a:	e011      	b.n	8009240 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 800921c:	f107 030c 	add.w	r3, r7, #12
 8009220:	2204      	movs	r2, #4
 8009222:	4619      	mov	r1, r3
 8009224:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8009228:	f7ff fd84 	bl	8008d34 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d105      	bne.n	800923e <socket+0x5e>
 8009232:	f06f 0302 	mvn.w	r3, #2
 8009236:	e0db      	b.n	80093f0 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8009238:	f06f 0304 	mvn.w	r3, #4
 800923c:	e0d8      	b.n	80093f0 <socket+0x210>
	    break;
 800923e:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8009240:	78fb      	ldrb	r3, [r7, #3]
 8009242:	f003 0304 	and.w	r3, r3, #4
 8009246:	2b00      	cmp	r3, #0
 8009248:	d002      	beq.n	8009250 <socket+0x70>
 800924a:	f06f 0305 	mvn.w	r3, #5
 800924e:	e0cf      	b.n	80093f0 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8009250:	78fb      	ldrb	r3, [r7, #3]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d025      	beq.n	80092a2 <socket+0xc2>
	{
   	switch(protocol)
 8009256:	79bb      	ldrb	r3, [r7, #6]
 8009258:	2b01      	cmp	r3, #1
 800925a:	d002      	beq.n	8009262 <socket+0x82>
 800925c:	2b02      	cmp	r3, #2
 800925e:	d008      	beq.n	8009272 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8009260:	e024      	b.n	80092ac <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8009262:	78fb      	ldrb	r3, [r7, #3]
 8009264:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8009268:	2b00      	cmp	r3, #0
 800926a:	d11c      	bne.n	80092a6 <socket+0xc6>
 800926c:	f06f 0305 	mvn.w	r3, #5
 8009270:	e0be      	b.n	80093f0 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8009272:	78fb      	ldrb	r3, [r7, #3]
 8009274:	f003 0320 	and.w	r3, r3, #32
 8009278:	2b00      	cmp	r3, #0
 800927a:	d006      	beq.n	800928a <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800927c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009280:	2b00      	cmp	r3, #0
 8009282:	db02      	blt.n	800928a <socket+0xaa>
 8009284:	f06f 0305 	mvn.w	r3, #5
 8009288:	e0b2      	b.n	80093f0 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 800928a:	78fb      	ldrb	r3, [r7, #3]
 800928c:	f003 0310 	and.w	r3, r3, #16
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00a      	beq.n	80092aa <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8009294:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009298:	2b00      	cmp	r3, #0
 800929a:	db06      	blt.n	80092aa <socket+0xca>
 800929c:	f06f 0305 	mvn.w	r3, #5
 80092a0:	e0a6      	b.n	80093f0 <socket+0x210>
   	}
   }
 80092a2:	bf00      	nop
 80092a4:	e002      	b.n	80092ac <socket+0xcc>
   	      break;
 80092a6:	bf00      	nop
 80092a8:	e000      	b.n	80092ac <socket+0xcc>
   	      break;
 80092aa:	bf00      	nop
	close(sn);
 80092ac:	79fb      	ldrb	r3, [r7, #7]
 80092ae:	4618      	mov	r0, r3
 80092b0:	f000 f8ac 	bl	800940c <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80092b4:	79fb      	ldrb	r3, [r7, #7]
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	3301      	adds	r3, #1
 80092ba:	00db      	lsls	r3, r3, #3
 80092bc:	4618      	mov	r0, r3
 80092be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092c2:	f023 030f 	bic.w	r3, r3, #15
 80092c6:	b25a      	sxtb	r2, r3
 80092c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	b25b      	sxtb	r3, r3
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	4619      	mov	r1, r3
 80092d4:	f7ff fce0 	bl	8008c98 <WIZCHIP_WRITE>
    #endif
	if(!port)
 80092d8:	88bb      	ldrh	r3, [r7, #4]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d110      	bne.n	8009300 <socket+0x120>
	{
	   port = sock_any_port++;
 80092de:	4b46      	ldr	r3, [pc, #280]	; (80093f8 <socket+0x218>)
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	1c5a      	adds	r2, r3, #1
 80092e4:	b291      	uxth	r1, r2
 80092e6:	4a44      	ldr	r2, [pc, #272]	; (80093f8 <socket+0x218>)
 80092e8:	8011      	strh	r1, [r2, #0]
 80092ea:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80092ec:	4b42      	ldr	r3, [pc, #264]	; (80093f8 <socket+0x218>)
 80092ee:	881b      	ldrh	r3, [r3, #0]
 80092f0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d103      	bne.n	8009300 <socket+0x120>
 80092f8:	4b3f      	ldr	r3, [pc, #252]	; (80093f8 <socket+0x218>)
 80092fa:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80092fe:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8009300:	79fb      	ldrb	r3, [r7, #7]
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	3301      	adds	r3, #1
 8009306:	00db      	lsls	r3, r3, #3
 8009308:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800930c:	461a      	mov	r2, r3
 800930e:	88bb      	ldrh	r3, [r7, #4]
 8009310:	0a1b      	lsrs	r3, r3, #8
 8009312:	b29b      	uxth	r3, r3
 8009314:	b2db      	uxtb	r3, r3
 8009316:	4619      	mov	r1, r3
 8009318:	4610      	mov	r0, r2
 800931a:	f7ff fcbd 	bl	8008c98 <WIZCHIP_WRITE>
 800931e:	79fb      	ldrb	r3, [r7, #7]
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	3301      	adds	r3, #1
 8009324:	00db      	lsls	r3, r3, #3
 8009326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800932a:	461a      	mov	r2, r3
 800932c:	88bb      	ldrh	r3, [r7, #4]
 800932e:	b2db      	uxtb	r3, r3
 8009330:	4619      	mov	r1, r3
 8009332:	4610      	mov	r0, r2
 8009334:	f7ff fcb0 	bl	8008c98 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8009338:	79fb      	ldrb	r3, [r7, #7]
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	3301      	adds	r3, #1
 800933e:	00db      	lsls	r3, r3, #3
 8009340:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009344:	2101      	movs	r1, #1
 8009346:	4618      	mov	r0, r3
 8009348:	f7ff fca6 	bl	8008c98 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 800934c:	bf00      	nop
 800934e:	79fb      	ldrb	r3, [r7, #7]
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	3301      	adds	r3, #1
 8009354:	00db      	lsls	r3, r3, #3
 8009356:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800935a:	4618      	mov	r0, r3
 800935c:	f7ff fc50 	bl	8008c00 <WIZCHIP_READ>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d1f3      	bne.n	800934e <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8009366:	79fb      	ldrb	r3, [r7, #7]
 8009368:	2201      	movs	r2, #1
 800936a:	fa02 f303 	lsl.w	r3, r2, r3
 800936e:	b21b      	sxth	r3, r3
 8009370:	43db      	mvns	r3, r3
 8009372:	b21a      	sxth	r2, r3
 8009374:	4b21      	ldr	r3, [pc, #132]	; (80093fc <socket+0x21c>)
 8009376:	881b      	ldrh	r3, [r3, #0]
 8009378:	b21b      	sxth	r3, r3
 800937a:	4013      	ands	r3, r2
 800937c:	b21b      	sxth	r3, r3
 800937e:	b29a      	uxth	r2, r3
 8009380:	4b1e      	ldr	r3, [pc, #120]	; (80093fc <socket+0x21c>)
 8009382:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8009384:	78fb      	ldrb	r3, [r7, #3]
 8009386:	f003 0201 	and.w	r2, r3, #1
 800938a:	79fb      	ldrb	r3, [r7, #7]
 800938c:	fa02 f303 	lsl.w	r3, r2, r3
 8009390:	b21a      	sxth	r2, r3
 8009392:	4b1a      	ldr	r3, [pc, #104]	; (80093fc <socket+0x21c>)
 8009394:	881b      	ldrh	r3, [r3, #0]
 8009396:	b21b      	sxth	r3, r3
 8009398:	4313      	orrs	r3, r2
 800939a:	b21b      	sxth	r3, r3
 800939c:	b29a      	uxth	r2, r3
 800939e:	4b17      	ldr	r3, [pc, #92]	; (80093fc <socket+0x21c>)
 80093a0:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80093a2:	79fb      	ldrb	r3, [r7, #7]
 80093a4:	2201      	movs	r2, #1
 80093a6:	fa02 f303 	lsl.w	r3, r2, r3
 80093aa:	b21b      	sxth	r3, r3
 80093ac:	43db      	mvns	r3, r3
 80093ae:	b21a      	sxth	r2, r3
 80093b0:	4b13      	ldr	r3, [pc, #76]	; (8009400 <socket+0x220>)
 80093b2:	881b      	ldrh	r3, [r3, #0]
 80093b4:	b21b      	sxth	r3, r3
 80093b6:	4013      	ands	r3, r2
 80093b8:	b21b      	sxth	r3, r3
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	4b10      	ldr	r3, [pc, #64]	; (8009400 <socket+0x220>)
 80093be:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 80093c0:	79fb      	ldrb	r3, [r7, #7]
 80093c2:	4a10      	ldr	r2, [pc, #64]	; (8009404 <socket+0x224>)
 80093c4:	2100      	movs	r1, #0
 80093c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 80093ca:	79fb      	ldrb	r3, [r7, #7]
 80093cc:	4a0e      	ldr	r2, [pc, #56]	; (8009408 <socket+0x228>)
 80093ce:	2100      	movs	r1, #0
 80093d0:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80093d2:	bf00      	nop
 80093d4:	79fb      	ldrb	r3, [r7, #7]
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	3301      	adds	r3, #1
 80093da:	00db      	lsls	r3, r3, #3
 80093dc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7ff fc0d 	bl	8008c00 <WIZCHIP_READ>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d0f3      	beq.n	80093d4 <socket+0x1f4>
   return (int8_t)sn;
 80093ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 80093f0:	4618      	mov	r0, r3
 80093f2:	3714      	adds	r7, #20
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd90      	pop	{r4, r7, pc}
 80093f8:	20000096 	.word	0x20000096
 80093fc:	20002ec0 	.word	0x20002ec0
 8009400:	20002ec2 	.word	0x20002ec2
 8009404:	20002ec4 	.word	0x20002ec4
 8009408:	20002ed4 	.word	0x20002ed4

0800940c <close>:

int8_t close(uint8_t sn)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	4603      	mov	r3, r0
 8009414:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8009416:	79fb      	ldrb	r3, [r7, #7]
 8009418:	2b08      	cmp	r3, #8
 800941a:	d902      	bls.n	8009422 <close+0x16>
 800941c:	f04f 33ff 	mov.w	r3, #4294967295
 8009420:	e055      	b.n	80094ce <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8009422:	79fb      	ldrb	r3, [r7, #7]
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	3301      	adds	r3, #1
 8009428:	00db      	lsls	r3, r3, #3
 800942a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800942e:	2110      	movs	r1, #16
 8009430:	4618      	mov	r0, r3
 8009432:	f7ff fc31 	bl	8008c98 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8009436:	bf00      	nop
 8009438:	79fb      	ldrb	r3, [r7, #7]
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	3301      	adds	r3, #1
 800943e:	00db      	lsls	r3, r3, #3
 8009440:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009444:	4618      	mov	r0, r3
 8009446:	f7ff fbdb 	bl	8008c00 <WIZCHIP_READ>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1f3      	bne.n	8009438 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8009450:	79fb      	ldrb	r3, [r7, #7]
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	3301      	adds	r3, #1
 8009456:	00db      	lsls	r3, r3, #3
 8009458:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800945c:	211f      	movs	r1, #31
 800945e:	4618      	mov	r0, r3
 8009460:	f7ff fc1a 	bl	8008c98 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8009464:	79fb      	ldrb	r3, [r7, #7]
 8009466:	2201      	movs	r2, #1
 8009468:	fa02 f303 	lsl.w	r3, r2, r3
 800946c:	b21b      	sxth	r3, r3
 800946e:	43db      	mvns	r3, r3
 8009470:	b21a      	sxth	r2, r3
 8009472:	4b19      	ldr	r3, [pc, #100]	; (80094d8 <close+0xcc>)
 8009474:	881b      	ldrh	r3, [r3, #0]
 8009476:	b21b      	sxth	r3, r3
 8009478:	4013      	ands	r3, r2
 800947a:	b21b      	sxth	r3, r3
 800947c:	b29a      	uxth	r2, r3
 800947e:	4b16      	ldr	r3, [pc, #88]	; (80094d8 <close+0xcc>)
 8009480:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8009482:	79fb      	ldrb	r3, [r7, #7]
 8009484:	2201      	movs	r2, #1
 8009486:	fa02 f303 	lsl.w	r3, r2, r3
 800948a:	b21b      	sxth	r3, r3
 800948c:	43db      	mvns	r3, r3
 800948e:	b21a      	sxth	r2, r3
 8009490:	4b12      	ldr	r3, [pc, #72]	; (80094dc <close+0xd0>)
 8009492:	881b      	ldrh	r3, [r3, #0]
 8009494:	b21b      	sxth	r3, r3
 8009496:	4013      	ands	r3, r2
 8009498:	b21b      	sxth	r3, r3
 800949a:	b29a      	uxth	r2, r3
 800949c:	4b0f      	ldr	r3, [pc, #60]	; (80094dc <close+0xd0>)
 800949e:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80094a0:	79fb      	ldrb	r3, [r7, #7]
 80094a2:	4a0f      	ldr	r2, [pc, #60]	; (80094e0 <close+0xd4>)
 80094a4:	2100      	movs	r1, #0
 80094a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80094aa:	79fb      	ldrb	r3, [r7, #7]
 80094ac:	4a0d      	ldr	r2, [pc, #52]	; (80094e4 <close+0xd8>)
 80094ae:	2100      	movs	r1, #0
 80094b0:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80094b2:	bf00      	nop
 80094b4:	79fb      	ldrb	r3, [r7, #7]
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	3301      	adds	r3, #1
 80094ba:	00db      	lsls	r3, r3, #3
 80094bc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7ff fb9d 	bl	8008c00 <WIZCHIP_READ>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1f3      	bne.n	80094b4 <close+0xa8>
	return SOCK_OK;
 80094cc:	2301      	movs	r3, #1
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20002ec0 	.word	0x20002ec0
 80094dc:	20002ec2 	.word	0x20002ec2
 80094e0:	20002ec4 	.word	0x20002ec4
 80094e4:	20002ed4 	.word	0x20002ed4

080094e8 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b086      	sub	sp, #24
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60b9      	str	r1, [r7, #8]
 80094f0:	607b      	str	r3, [r7, #4]
 80094f2:	4603      	mov	r3, r0
 80094f4:	73fb      	strb	r3, [r7, #15]
 80094f6:	4613      	mov	r3, r2
 80094f8:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 80094fa:	2300      	movs	r3, #0
 80094fc:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 80094fe:	2300      	movs	r3, #0
 8009500:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8009502:	7bfb      	ldrb	r3, [r7, #15]
 8009504:	2b08      	cmp	r3, #8
 8009506:	d902      	bls.n	800950e <sendto+0x26>
 8009508:	f04f 33ff 	mov.w	r3, #4294967295
 800950c:	e11b      	b.n	8009746 <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 800950e:	7bfb      	ldrb	r3, [r7, #15]
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	3301      	adds	r3, #1
 8009514:	00db      	lsls	r3, r3, #3
 8009516:	4618      	mov	r0, r3
 8009518:	f7ff fb72 	bl	8008c00 <WIZCHIP_READ>
 800951c:	4603      	mov	r3, r0
 800951e:	f003 030f 	and.w	r3, r3, #15
 8009522:	3b02      	subs	r3, #2
 8009524:	2b02      	cmp	r3, #2
 8009526:	d902      	bls.n	800952e <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8009528:	f06f 0304 	mvn.w	r3, #4
 800952c:	e10b      	b.n	8009746 <sendto+0x25e>
         break;
 800952e:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8009530:	89bb      	ldrh	r3, [r7, #12]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d102      	bne.n	800953c <sendto+0x54>
 8009536:	f06f 030d 	mvn.w	r3, #13
 800953a:	e104      	b.n	8009746 <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	021b      	lsls	r3, r3, #8
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	3201      	adds	r2, #1
 800954a:	7812      	ldrb	r2, [r2, #0]
 800954c:	4413      	add	r3, r2
 800954e:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	021b      	lsls	r3, r3, #8
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	3202      	adds	r2, #2
 8009558:	7812      	ldrb	r2, [r2, #0]
 800955a:	4413      	add	r3, r2
 800955c:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	021b      	lsls	r3, r3, #8
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	3203      	adds	r2, #3
 8009566:	7812      	ldrb	r2, [r2, #0]
 8009568:	4413      	add	r3, r2
 800956a:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10e      	bne.n	8009590 <sendto+0xa8>
 8009572:	7bfb      	ldrb	r3, [r7, #15]
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	3301      	adds	r3, #1
 8009578:	00db      	lsls	r3, r3, #3
 800957a:	4618      	mov	r0, r3
 800957c:	f7ff fb40 	bl	8008c00 <WIZCHIP_READ>
 8009580:	4603      	mov	r3, r0
 8009582:	f003 0304 	and.w	r3, r3, #4
 8009586:	2b04      	cmp	r3, #4
 8009588:	d002      	beq.n	8009590 <sendto+0xa8>
 800958a:	f06f 030b 	mvn.w	r3, #11
 800958e:	e0da      	b.n	8009746 <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8009590:	8c3b      	ldrh	r3, [r7, #32]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d10e      	bne.n	80095b4 <sendto+0xcc>
 8009596:	7bfb      	ldrb	r3, [r7, #15]
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	3301      	adds	r3, #1
 800959c:	00db      	lsls	r3, r3, #3
 800959e:	4618      	mov	r0, r3
 80095a0:	f7ff fb2e 	bl	8008c00 <WIZCHIP_READ>
 80095a4:	4603      	mov	r3, r0
 80095a6:	f003 0304 	and.w	r3, r3, #4
 80095aa:	2b04      	cmp	r3, #4
 80095ac:	d002      	beq.n	80095b4 <sendto+0xcc>
 80095ae:	f06f 030a 	mvn.w	r3, #10
 80095b2:	e0c8      	b.n	8009746 <sendto+0x25e>
   tmp = getSn_SR(sn);
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	3301      	adds	r3, #1
 80095ba:	00db      	lsls	r3, r3, #3
 80095bc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7ff fb1d 	bl	8008c00 <WIZCHIP_READ>
 80095c6:	4603      	mov	r3, r0
 80095c8:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80095ca:	7dfb      	ldrb	r3, [r7, #23]
 80095cc:	2b42      	cmp	r3, #66	; 0x42
 80095ce:	d008      	beq.n	80095e2 <sendto+0xfa>
 80095d0:	7dfb      	ldrb	r3, [r7, #23]
 80095d2:	2b22      	cmp	r3, #34	; 0x22
 80095d4:	d005      	beq.n	80095e2 <sendto+0xfa>
 80095d6:	7dfb      	ldrb	r3, [r7, #23]
 80095d8:	2b32      	cmp	r3, #50	; 0x32
 80095da:	d002      	beq.n	80095e2 <sendto+0xfa>
 80095dc:	f06f 0306 	mvn.w	r3, #6
 80095e0:	e0b1      	b.n	8009746 <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 80095e2:	7bfb      	ldrb	r3, [r7, #15]
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	3301      	adds	r3, #1
 80095e8:	00db      	lsls	r3, r3, #3
 80095ea:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80095ee:	2204      	movs	r2, #4
 80095f0:	6879      	ldr	r1, [r7, #4]
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7ff fbfe 	bl	8008df4 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	3301      	adds	r3, #1
 80095fe:	00db      	lsls	r3, r3, #3
 8009600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009604:	461a      	mov	r2, r3
 8009606:	8c3b      	ldrh	r3, [r7, #32]
 8009608:	0a1b      	lsrs	r3, r3, #8
 800960a:	b29b      	uxth	r3, r3
 800960c:	b2db      	uxtb	r3, r3
 800960e:	4619      	mov	r1, r3
 8009610:	4610      	mov	r0, r2
 8009612:	f7ff fb41 	bl	8008c98 <WIZCHIP_WRITE>
 8009616:	7bfb      	ldrb	r3, [r7, #15]
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	3301      	adds	r3, #1
 800961c:	00db      	lsls	r3, r3, #3
 800961e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8009622:	461a      	mov	r2, r3
 8009624:	8c3b      	ldrh	r3, [r7, #32]
 8009626:	b2db      	uxtb	r3, r3
 8009628:	4619      	mov	r1, r3
 800962a:	4610      	mov	r0, r2
 800962c:	f7ff fb34 	bl	8008c98 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8009630:	7bfb      	ldrb	r3, [r7, #15]
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	3301      	adds	r3, #1
 8009636:	00db      	lsls	r3, r3, #3
 8009638:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800963c:	4618      	mov	r0, r3
 800963e:	f7ff fadf 	bl	8008c00 <WIZCHIP_READ>
 8009642:	4603      	mov	r3, r0
 8009644:	b29b      	uxth	r3, r3
 8009646:	029b      	lsls	r3, r3, #10
 8009648:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800964a:	89ba      	ldrh	r2, [r7, #12]
 800964c:	8abb      	ldrh	r3, [r7, #20]
 800964e:	429a      	cmp	r2, r3
 8009650:	d901      	bls.n	8009656 <sendto+0x16e>
 8009652:	8abb      	ldrh	r3, [r7, #20]
 8009654:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8009656:	7bfb      	ldrb	r3, [r7, #15]
 8009658:	4618      	mov	r0, r3
 800965a:	f7ff fc2b 	bl	8008eb4 <getSn_TX_FSR>
 800965e:	4603      	mov	r3, r0
 8009660:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	3301      	adds	r3, #1
 8009668:	00db      	lsls	r3, r3, #3
 800966a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800966e:	4618      	mov	r0, r3
 8009670:	f7ff fac6 	bl	8008c00 <WIZCHIP_READ>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d102      	bne.n	8009680 <sendto+0x198>
 800967a:	f06f 0303 	mvn.w	r3, #3
 800967e:	e062      	b.n	8009746 <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8009680:	4b33      	ldr	r3, [pc, #204]	; (8009750 <sendto+0x268>)
 8009682:	881b      	ldrh	r3, [r3, #0]
 8009684:	461a      	mov	r2, r3
 8009686:	7bfb      	ldrb	r3, [r7, #15]
 8009688:	fa42 f303 	asr.w	r3, r2, r3
 800968c:	f003 0301 	and.w	r3, r3, #1
 8009690:	2b00      	cmp	r3, #0
 8009692:	d005      	beq.n	80096a0 <sendto+0x1b8>
 8009694:	89ba      	ldrh	r2, [r7, #12]
 8009696:	8abb      	ldrh	r3, [r7, #20]
 8009698:	429a      	cmp	r2, r3
 800969a:	d901      	bls.n	80096a0 <sendto+0x1b8>
 800969c:	2300      	movs	r3, #0
 800969e:	e052      	b.n	8009746 <sendto+0x25e>
      if(len <= freesize) break;
 80096a0:	89ba      	ldrh	r2, [r7, #12]
 80096a2:	8abb      	ldrh	r3, [r7, #20]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d900      	bls.n	80096aa <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 80096a8:	e7d5      	b.n	8009656 <sendto+0x16e>
      if(len <= freesize) break;
 80096aa:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80096ac:	89ba      	ldrh	r2, [r7, #12]
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
 80096b0:	68b9      	ldr	r1, [r7, #8]
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7ff fc94 	bl	8008fe0 <wiz_send_data>
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   

   setSn_CR(sn,Sn_CR_SEND);
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	3301      	adds	r3, #1
 80096be:	00db      	lsls	r3, r3, #3
 80096c0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80096c4:	2120      	movs	r1, #32
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7ff fae6 	bl	8008c98 <WIZCHIP_WRITE>


	/* wait to process the command... */
	while(getSn_CR(sn));
 80096cc:	bf00      	nop
 80096ce:	7bfb      	ldrb	r3, [r7, #15]
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	3301      	adds	r3, #1
 80096d4:	00db      	lsls	r3, r3, #3
 80096d6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80096da:	4618      	mov	r0, r3
 80096dc:	f7ff fa90 	bl	8008c00 <WIZCHIP_READ>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d1f3      	bne.n	80096ce <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 80096e6:	7bfb      	ldrb	r3, [r7, #15]
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	3301      	adds	r3, #1
 80096ec:	00db      	lsls	r3, r3, #3
 80096ee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7ff fa84 	bl	8008c00 <WIZCHIP_READ>
 80096f8:	4603      	mov	r3, r0
 80096fa:	f003 031f 	and.w	r3, r3, #31
 80096fe:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8009700:	7dfb      	ldrb	r3, [r7, #23]
 8009702:	f003 0310 	and.w	r3, r3, #16
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00c      	beq.n	8009724 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800970a:	7bfb      	ldrb	r3, [r7, #15]
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	3301      	adds	r3, #1
 8009710:	00db      	lsls	r3, r3, #3
 8009712:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009716:	2110      	movs	r1, #16
 8009718:	4618      	mov	r0, r3
 800971a:	f7ff fabd 	bl	8008c98 <WIZCHIP_WRITE>
         break;
 800971e:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8009720:	89bb      	ldrh	r3, [r7, #12]
 8009722:	e010      	b.n	8009746 <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8009724:	7dfb      	ldrb	r3, [r7, #23]
 8009726:	f003 0308 	and.w	r3, r3, #8
 800972a:	2b00      	cmp	r3, #0
 800972c:	d0db      	beq.n	80096e6 <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	3301      	adds	r3, #1
 8009734:	00db      	lsls	r3, r3, #3
 8009736:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800973a:	2108      	movs	r1, #8
 800973c:	4618      	mov	r0, r3
 800973e:	f7ff faab 	bl	8008c98 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8009742:	f06f 030c 	mvn.w	r3, #12
}
 8009746:	4618      	mov	r0, r3
 8009748:	3718      	adds	r7, #24
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	20002ec0 	.word	0x20002ec0

08009754 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b088      	sub	sp, #32
 8009758:	af00      	add	r7, sp, #0
 800975a:	60b9      	str	r1, [r7, #8]
 800975c:	607b      	str	r3, [r7, #4]
 800975e:	4603      	mov	r3, r0
 8009760:	73fb      	strb	r3, [r7, #15]
 8009762:	4613      	mov	r3, r2
 8009764:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 8009766:	2300      	movs	r3, #0
 8009768:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 800976a:	7bfb      	ldrb	r3, [r7, #15]
 800976c:	2b08      	cmp	r3, #8
 800976e:	d902      	bls.n	8009776 <recvfrom+0x22>
 8009770:	f04f 33ff 	mov.w	r3, #4294967295
 8009774:	e1d4      	b.n	8009b20 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8009776:	7bfb      	ldrb	r3, [r7, #15]
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	3301      	adds	r3, #1
 800977c:	00db      	lsls	r3, r3, #3
 800977e:	4618      	mov	r0, r3
 8009780:	f7ff fa3e 	bl	8008c00 <WIZCHIP_READ>
 8009784:	4603      	mov	r3, r0
 8009786:	777b      	strb	r3, [r7, #29]
 8009788:	7f7b      	ldrb	r3, [r7, #29]
 800978a:	f003 030f 	and.w	r3, r3, #15
 800978e:	3b02      	subs	r3, #2
 8009790:	2b02      	cmp	r3, #2
 8009792:	d902      	bls.n	800979a <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8009794:	f06f 0304 	mvn.w	r3, #4
 8009798:	e1c2      	b.n	8009b20 <recvfrom+0x3cc>
         break;
 800979a:	bf00      	nop
   }
   CHECK_SOCKDATA();
 800979c:	89bb      	ldrh	r3, [r7, #12]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d102      	bne.n	80097a8 <recvfrom+0x54>
 80097a2:	f06f 030d 	mvn.w	r3, #13
 80097a6:	e1bb      	b.n	8009b20 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
 80097aa:	4a88      	ldr	r2, [pc, #544]	; (80099cc <recvfrom+0x278>)
 80097ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d128      	bne.n	8009806 <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7ff fbc7 	bl	8008f4a <getSn_RX_RSR>
 80097bc:	4603      	mov	r3, r0
 80097be:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	3301      	adds	r3, #1
 80097c6:	00db      	lsls	r3, r3, #3
 80097c8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7ff fa17 	bl	8008c00 <WIZCHIP_READ>
 80097d2:	4603      	mov	r3, r0
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d102      	bne.n	80097de <recvfrom+0x8a>
 80097d8:	f06f 0303 	mvn.w	r3, #3
 80097dc:	e1a0      	b.n	8009b20 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 80097de:	4b7c      	ldr	r3, [pc, #496]	; (80099d0 <recvfrom+0x27c>)
 80097e0:	881b      	ldrh	r3, [r3, #0]
 80097e2:	461a      	mov	r2, r3
 80097e4:	7bfb      	ldrb	r3, [r7, #15]
 80097e6:	fa42 f303 	asr.w	r3, r2, r3
 80097ea:	f003 0301 	and.w	r3, r3, #1
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d004      	beq.n	80097fc <recvfrom+0xa8>
 80097f2:	8bfb      	ldrh	r3, [r7, #30]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <recvfrom+0xa8>
 80097f8:	2300      	movs	r3, #0
 80097fa:	e191      	b.n	8009b20 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 80097fc:	8bfb      	ldrh	r3, [r7, #30]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d100      	bne.n	8009804 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8009802:	e7d7      	b.n	80097b4 <recvfrom+0x60>
         if(pack_len != 0) break;
 8009804:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8009806:	7f7b      	ldrb	r3, [r7, #29]
 8009808:	f003 0307 	and.w	r3, r3, #7
 800980c:	2b04      	cmp	r3, #4
 800980e:	d079      	beq.n	8009904 <recvfrom+0x1b0>
 8009810:	2b04      	cmp	r3, #4
 8009812:	f300 8142 	bgt.w	8009a9a <recvfrom+0x346>
 8009816:	2b02      	cmp	r3, #2
 8009818:	d003      	beq.n	8009822 <recvfrom+0xce>
 800981a:	2b03      	cmp	r3, #3
 800981c:	f000 80dc 	beq.w	80099d8 <recvfrom+0x284>
 8009820:	e13b      	b.n	8009a9a <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8009822:	7bfb      	ldrb	r3, [r7, #15]
 8009824:	4a69      	ldr	r2, [pc, #420]	; (80099cc <recvfrom+0x278>)
 8009826:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d152      	bne.n	80098d4 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 800982e:	f107 0114 	add.w	r1, r7, #20
 8009832:	7bfb      	ldrb	r3, [r7, #15]
 8009834:	2208      	movs	r2, #8
 8009836:	4618      	mov	r0, r3
 8009838:	f7ff fc2e 	bl	8009098 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800983c:	7bfb      	ldrb	r3, [r7, #15]
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	3301      	adds	r3, #1
 8009842:	00db      	lsls	r3, r3, #3
 8009844:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009848:	2140      	movs	r1, #64	; 0x40
 800984a:	4618      	mov	r0, r3
 800984c:	f7ff fa24 	bl	8008c98 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8009850:	bf00      	nop
 8009852:	7bfb      	ldrb	r3, [r7, #15]
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	3301      	adds	r3, #1
 8009858:	00db      	lsls	r3, r3, #3
 800985a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800985e:	4618      	mov	r0, r3
 8009860:	f7ff f9ce 	bl	8008c00 <WIZCHIP_READ>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d1f3      	bne.n	8009852 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 800986a:	7d3a      	ldrb	r2, [r7, #20]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	3301      	adds	r3, #1
 8009874:	7d7a      	ldrb	r2, [r7, #21]
 8009876:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	3302      	adds	r3, #2
 800987c:	7dba      	ldrb	r2, [r7, #22]
 800987e:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	3303      	adds	r3, #3
 8009884:	7dfa      	ldrb	r2, [r7, #23]
 8009886:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8009888:	7e3b      	ldrb	r3, [r7, #24]
 800988a:	b29a      	uxth	r2, r3
 800988c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988e:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8009890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009892:	881b      	ldrh	r3, [r3, #0]
 8009894:	021b      	lsls	r3, r3, #8
 8009896:	b29a      	uxth	r2, r3
 8009898:	7e7b      	ldrb	r3, [r7, #25]
 800989a:	b29b      	uxth	r3, r3
 800989c:	4413      	add	r3, r2
 800989e:	b29a      	uxth	r2, r3
 80098a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a2:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80098a4:	7eba      	ldrb	r2, [r7, #26]
 80098a6:	7bfb      	ldrb	r3, [r7, #15]
 80098a8:	b291      	uxth	r1, r2
 80098aa:	4a48      	ldr	r2, [pc, #288]	; (80099cc <recvfrom+0x278>)
 80098ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
 80098b2:	4a46      	ldr	r2, [pc, #280]	; (80099cc <recvfrom+0x278>)
 80098b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098b8:	021b      	lsls	r3, r3, #8
 80098ba:	b299      	uxth	r1, r3
 80098bc:	7efb      	ldrb	r3, [r7, #27]
 80098be:	b29a      	uxth	r2, r3
 80098c0:	7bfb      	ldrb	r3, [r7, #15]
 80098c2:	440a      	add	r2, r1
 80098c4:	b291      	uxth	r1, r2
 80098c6:	4a41      	ldr	r2, [pc, #260]	; (80099cc <recvfrom+0x278>)
 80098c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80098cc:	7bfb      	ldrb	r3, [r7, #15]
 80098ce:	4a41      	ldr	r2, [pc, #260]	; (80099d4 <recvfrom+0x280>)
 80098d0:	2180      	movs	r1, #128	; 0x80
 80098d2:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
 80098d6:	4a3d      	ldr	r2, [pc, #244]	; (80099cc <recvfrom+0x278>)
 80098d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098dc:	89ba      	ldrh	r2, [r7, #12]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d202      	bcs.n	80098e8 <recvfrom+0x194>
 80098e2:	89bb      	ldrh	r3, [r7, #12]
 80098e4:	83fb      	strh	r3, [r7, #30]
 80098e6:	e004      	b.n	80098f2 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 80098e8:	7bfb      	ldrb	r3, [r7, #15]
 80098ea:	4a38      	ldr	r2, [pc, #224]	; (80099cc <recvfrom+0x278>)
 80098ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098f0:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 80098f2:	8bfb      	ldrh	r3, [r7, #30]
 80098f4:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80098f6:	8bfa      	ldrh	r2, [r7, #30]
 80098f8:	7bfb      	ldrb	r3, [r7, #15]
 80098fa:	68b9      	ldr	r1, [r7, #8]
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7ff fbcb 	bl	8009098 <wiz_recv_data>
			break;
 8009902:	e0d6      	b.n	8009ab2 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8009904:	7bfb      	ldrb	r3, [r7, #15]
 8009906:	4a31      	ldr	r2, [pc, #196]	; (80099cc <recvfrom+0x278>)
 8009908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d146      	bne.n	800999e <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8009910:	f107 0114 	add.w	r1, r7, #20
 8009914:	7bfb      	ldrb	r3, [r7, #15]
 8009916:	2202      	movs	r2, #2
 8009918:	4618      	mov	r0, r3
 800991a:	f7ff fbbd 	bl	8009098 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800991e:	7bfb      	ldrb	r3, [r7, #15]
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	3301      	adds	r3, #1
 8009924:	00db      	lsls	r3, r3, #3
 8009926:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800992a:	2140      	movs	r1, #64	; 0x40
 800992c:	4618      	mov	r0, r3
 800992e:	f7ff f9b3 	bl	8008c98 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8009932:	bf00      	nop
 8009934:	7bfb      	ldrb	r3, [r7, #15]
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	3301      	adds	r3, #1
 800993a:	00db      	lsls	r3, r3, #3
 800993c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009940:	4618      	mov	r0, r3
 8009942:	f7ff f95d 	bl	8008c00 <WIZCHIP_READ>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d1f3      	bne.n	8009934 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 800994c:	7d3a      	ldrb	r2, [r7, #20]
 800994e:	7bfb      	ldrb	r3, [r7, #15]
 8009950:	b291      	uxth	r1, r2
 8009952:	4a1e      	ldr	r2, [pc, #120]	; (80099cc <recvfrom+0x278>)
 8009954:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8009958:	7bfb      	ldrb	r3, [r7, #15]
 800995a:	4a1c      	ldr	r2, [pc, #112]	; (80099cc <recvfrom+0x278>)
 800995c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009960:	021b      	lsls	r3, r3, #8
 8009962:	b29a      	uxth	r2, r3
 8009964:	7d7b      	ldrb	r3, [r7, #21]
 8009966:	b29b      	uxth	r3, r3
 8009968:	4413      	add	r3, r2
 800996a:	b29a      	uxth	r2, r3
 800996c:	7bfb      	ldrb	r3, [r7, #15]
 800996e:	3a02      	subs	r2, #2
 8009970:	b291      	uxth	r1, r2
 8009972:	4a16      	ldr	r2, [pc, #88]	; (80099cc <recvfrom+0x278>)
 8009974:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8009978:	7bfb      	ldrb	r3, [r7, #15]
 800997a:	4a14      	ldr	r2, [pc, #80]	; (80099cc <recvfrom+0x278>)
 800997c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009980:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8009984:	4293      	cmp	r3, r2
 8009986:	d906      	bls.n	8009996 <recvfrom+0x242>
   			{
   			   close(sn);
 8009988:	7bfb      	ldrb	r3, [r7, #15]
 800998a:	4618      	mov	r0, r3
 800998c:	f7ff fd3e 	bl	800940c <close>
   			   return SOCKFATAL_PACKLEN;
 8009990:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8009994:	e0c4      	b.n	8009b20 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8009996:	7bfb      	ldrb	r3, [r7, #15]
 8009998:	4a0e      	ldr	r2, [pc, #56]	; (80099d4 <recvfrom+0x280>)
 800999a:	2180      	movs	r1, #128	; 0x80
 800999c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800999e:	7bfb      	ldrb	r3, [r7, #15]
 80099a0:	4a0a      	ldr	r2, [pc, #40]	; (80099cc <recvfrom+0x278>)
 80099a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099a6:	89ba      	ldrh	r2, [r7, #12]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d202      	bcs.n	80099b2 <recvfrom+0x25e>
 80099ac:	89bb      	ldrh	r3, [r7, #12]
 80099ae:	83fb      	strh	r3, [r7, #30]
 80099b0:	e004      	b.n	80099bc <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 80099b2:	7bfb      	ldrb	r3, [r7, #15]
 80099b4:	4a05      	ldr	r2, [pc, #20]	; (80099cc <recvfrom+0x278>)
 80099b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099ba:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80099bc:	8bfa      	ldrh	r2, [r7, #30]
 80099be:	7bfb      	ldrb	r3, [r7, #15]
 80099c0:	68b9      	ldr	r1, [r7, #8]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7ff fb68 	bl	8009098 <wiz_recv_data>
		   break;
 80099c8:	e073      	b.n	8009ab2 <recvfrom+0x35e>
 80099ca:	bf00      	nop
 80099cc:	20002ec4 	.word	0x20002ec4
 80099d0:	20002ec0 	.word	0x20002ec0
 80099d4:	20002ed4 	.word	0x20002ed4
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80099d8:	7bfb      	ldrb	r3, [r7, #15]
 80099da:	4a53      	ldr	r2, [pc, #332]	; (8009b28 <recvfrom+0x3d4>)
 80099dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d144      	bne.n	8009a6e <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 80099e4:	f107 0114 	add.w	r1, r7, #20
 80099e8:	7bfb      	ldrb	r3, [r7, #15]
 80099ea:	2206      	movs	r2, #6
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7ff fb53 	bl	8009098 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80099f2:	7bfb      	ldrb	r3, [r7, #15]
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	3301      	adds	r3, #1
 80099f8:	00db      	lsls	r3, r3, #3
 80099fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80099fe:	2140      	movs	r1, #64	; 0x40
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7ff f949 	bl	8008c98 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8009a06:	bf00      	nop
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	00db      	lsls	r3, r3, #3
 8009a10:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7ff f8f3 	bl	8008c00 <WIZCHIP_READ>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1f3      	bne.n	8009a08 <recvfrom+0x2b4>
   			addr[0] = head[0];
 8009a20:	7d3a      	ldrb	r2, [r7, #20]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	7d7a      	ldrb	r2, [r7, #21]
 8009a2c:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	3302      	adds	r3, #2
 8009a32:	7dba      	ldrb	r2, [r7, #22]
 8009a34:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	3303      	adds	r3, #3
 8009a3a:	7dfa      	ldrb	r2, [r7, #23]
 8009a3c:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8009a3e:	7e3a      	ldrb	r2, [r7, #24]
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
 8009a42:	b291      	uxth	r1, r2
 8009a44:	4a38      	ldr	r2, [pc, #224]	; (8009b28 <recvfrom+0x3d4>)
 8009a46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8009a4a:	7bfb      	ldrb	r3, [r7, #15]
 8009a4c:	4a36      	ldr	r2, [pc, #216]	; (8009b28 <recvfrom+0x3d4>)
 8009a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a52:	021b      	lsls	r3, r3, #8
 8009a54:	b299      	uxth	r1, r3
 8009a56:	7e7b      	ldrb	r3, [r7, #25]
 8009a58:	b29a      	uxth	r2, r3
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
 8009a5c:	440a      	add	r2, r1
 8009a5e:	b291      	uxth	r1, r2
 8009a60:	4a31      	ldr	r2, [pc, #196]	; (8009b28 <recvfrom+0x3d4>)
 8009a62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
 8009a68:	4a30      	ldr	r2, [pc, #192]	; (8009b2c <recvfrom+0x3d8>)
 8009a6a:	2180      	movs	r1, #128	; 0x80
 8009a6c:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8009a6e:	7bfb      	ldrb	r3, [r7, #15]
 8009a70:	4a2d      	ldr	r2, [pc, #180]	; (8009b28 <recvfrom+0x3d4>)
 8009a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a76:	89ba      	ldrh	r2, [r7, #12]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d202      	bcs.n	8009a82 <recvfrom+0x32e>
 8009a7c:	89bb      	ldrh	r3, [r7, #12]
 8009a7e:	83fb      	strh	r3, [r7, #30]
 8009a80:	e004      	b.n	8009a8c <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8009a82:	7bfb      	ldrb	r3, [r7, #15]
 8009a84:	4a28      	ldr	r2, [pc, #160]	; (8009b28 <recvfrom+0x3d4>)
 8009a86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a8a:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8009a8c:	8bfa      	ldrh	r2, [r7, #30]
 8009a8e:	7bfb      	ldrb	r3, [r7, #15]
 8009a90:	68b9      	ldr	r1, [r7, #8]
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7ff fb00 	bl	8009098 <wiz_recv_data>
			break;
 8009a98:	e00b      	b.n	8009ab2 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8009a9a:	8bfa      	ldrh	r2, [r7, #30]
 8009a9c:	7bfb      	ldrb	r3, [r7, #15]
 8009a9e:	4611      	mov	r1, r2
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7ff fb55 	bl	8009150 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8009aa6:	7bfb      	ldrb	r3, [r7, #15]
 8009aa8:	491f      	ldr	r1, [pc, #124]	; (8009b28 <recvfrom+0x3d4>)
 8009aaa:	8bfa      	ldrh	r2, [r7, #30]
 8009aac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8009ab0:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8009ab2:	7bfb      	ldrb	r3, [r7, #15]
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	00db      	lsls	r3, r3, #3
 8009aba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009abe:	2140      	movs	r1, #64	; 0x40
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7ff f8e9 	bl	8008c98 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8009ac6:	bf00      	nop
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	3301      	adds	r3, #1
 8009ace:	00db      	lsls	r3, r3, #3
 8009ad0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7ff f893 	bl	8008c00 <WIZCHIP_READ>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d1f3      	bne.n	8009ac8 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
 8009ae2:	4a11      	ldr	r2, [pc, #68]	; (8009b28 <recvfrom+0x3d4>)
 8009ae4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8009ae8:	7bfb      	ldrb	r3, [r7, #15]
 8009aea:	8bfa      	ldrh	r2, [r7, #30]
 8009aec:	1a8a      	subs	r2, r1, r2
 8009aee:	b291      	uxth	r1, r2
 8009af0:	4a0d      	ldr	r2, [pc, #52]	; (8009b28 <recvfrom+0x3d4>)
 8009af2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
 8009af8:	4a0b      	ldr	r2, [pc, #44]	; (8009b28 <recvfrom+0x3d4>)
 8009afa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d009      	beq.n	8009b16 <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8009b02:	7bfb      	ldrb	r3, [r7, #15]
 8009b04:	4a09      	ldr	r2, [pc, #36]	; (8009b2c <recvfrom+0x3d8>)
 8009b06:	5cd2      	ldrb	r2, [r2, r3]
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
 8009b0a:	f042 0201 	orr.w	r2, r2, #1
 8009b0e:	b2d1      	uxtb	r1, r2
 8009b10:	4a06      	ldr	r2, [pc, #24]	; (8009b2c <recvfrom+0x3d8>)
 8009b12:	54d1      	strb	r1, [r2, r3]
 8009b14:	e003      	b.n	8009b1e <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8009b16:	7bfb      	ldrb	r3, [r7, #15]
 8009b18:	4a04      	ldr	r2, [pc, #16]	; (8009b2c <recvfrom+0x3d8>)
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8009b1e:	8bfb      	ldrh	r3, [r7, #30]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3720      	adds	r7, #32
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	20002ec4 	.word	0x20002ec4
 8009b2c:	20002ed4 	.word	0x20002ed4

08009b30 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8009b30:	b480      	push	{r7}
 8009b32:	af00      	add	r7, sp, #0
 8009b34:	bf00      	nop
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8009b3e:	b480      	push	{r7}
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	bf00      	nop
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8009b4c:	b480      	push	{r7}
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	bf00      	nop
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8009b5a:	b480      	push	{r7}
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	bf00      	nop
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	4618      	mov	r0, r3
 8009b78:	370c      	adds	r7, #12
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr

08009b82 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8009b82:	b480      	push	{r7}
 8009b84:	b083      	sub	sp, #12
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	70fb      	strb	r3, [r7, #3]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	78fa      	ldrb	r2, [r7, #3]
 8009b92:	701a      	strb	r2, [r3, #0]
 8009b94:	bf00      	nop
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8009ba0:	b480      	push	{r7}
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	71fb      	strb	r3, [r7, #7]
 8009bba:	bf00      	nop
 8009bbc:	370c      	adds	r7, #12
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr

08009bc6 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8009bc6:	b480      	push	{r7}
 8009bc8:	b083      	sub	sp, #12
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	460b      	mov	r3, r1
 8009bd0:	807b      	strh	r3, [r7, #2]
 8009bd2:	bf00      	nop
 8009bd4:	370c      	adds	r7, #12
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr

08009bde <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8009bde:	b480      	push	{r7}
 8009be0:	b083      	sub	sp, #12
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	460b      	mov	r3, r1
 8009be8:	807b      	strh	r3, [r7, #2]
 8009bea:	bf00      	nop
 8009bec:	370c      	adds	r7, #12
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr
	...

08009bf8 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b083      	sub	sp, #12
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d002      	beq.n	8009c0e <reg_wizchip_cs_cbfunc+0x16>
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d106      	bne.n	8009c1c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8009c0e:	4b0a      	ldr	r3, [pc, #40]	; (8009c38 <reg_wizchip_cs_cbfunc+0x40>)
 8009c10:	4a0a      	ldr	r2, [pc, #40]	; (8009c3c <reg_wizchip_cs_cbfunc+0x44>)
 8009c12:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8009c14:	4b08      	ldr	r3, [pc, #32]	; (8009c38 <reg_wizchip_cs_cbfunc+0x40>)
 8009c16:	4a0a      	ldr	r2, [pc, #40]	; (8009c40 <reg_wizchip_cs_cbfunc+0x48>)
 8009c18:	619a      	str	r2, [r3, #24]
 8009c1a:	e006      	b.n	8009c2a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8009c1c:	4a06      	ldr	r2, [pc, #24]	; (8009c38 <reg_wizchip_cs_cbfunc+0x40>)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8009c22:	4a05      	ldr	r2, [pc, #20]	; (8009c38 <reg_wizchip_cs_cbfunc+0x40>)
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	6193      	str	r3, [r2, #24]
   }
}
 8009c28:	bf00      	nop
 8009c2a:	bf00      	nop
 8009c2c:	370c      	adds	r7, #12
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	20000098 	.word	0x20000098
 8009c3c:	08009b4d 	.word	0x08009b4d
 8009c40:	08009b5b 	.word	0x08009b5b

08009c44 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8009c4e:	bf00      	nop
 8009c50:	4b0f      	ldr	r3, [pc, #60]	; (8009c90 <reg_wizchip_spi_cbfunc+0x4c>)
 8009c52:	881b      	ldrh	r3, [r3, #0]
 8009c54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d0f9      	beq.n	8009c50 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d002      	beq.n	8009c68 <reg_wizchip_spi_cbfunc+0x24>
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d106      	bne.n	8009c76 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8009c68:	4b09      	ldr	r3, [pc, #36]	; (8009c90 <reg_wizchip_spi_cbfunc+0x4c>)
 8009c6a:	4a0a      	ldr	r2, [pc, #40]	; (8009c94 <reg_wizchip_spi_cbfunc+0x50>)
 8009c6c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8009c6e:	4b08      	ldr	r3, [pc, #32]	; (8009c90 <reg_wizchip_spi_cbfunc+0x4c>)
 8009c70:	4a09      	ldr	r2, [pc, #36]	; (8009c98 <reg_wizchip_spi_cbfunc+0x54>)
 8009c72:	621a      	str	r2, [r3, #32]
 8009c74:	e006      	b.n	8009c84 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8009c76:	4a06      	ldr	r2, [pc, #24]	; (8009c90 <reg_wizchip_spi_cbfunc+0x4c>)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8009c7c:	4a04      	ldr	r2, [pc, #16]	; (8009c90 <reg_wizchip_spi_cbfunc+0x4c>)
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	6213      	str	r3, [r2, #32]
   }
}
 8009c82:	bf00      	nop
 8009c84:	bf00      	nop
 8009c86:	370c      	adds	r7, #12
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr
 8009c90:	20000098 	.word	0x20000098
 8009c94:	08009ba1 	.word	0x08009ba1
 8009c98:	08009bb1 	.word	0x08009bb1

08009c9c <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8009ca6:	bf00      	nop
 8009ca8:	4b0f      	ldr	r3, [pc, #60]	; (8009ce8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d0f9      	beq.n	8009ca8 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d002      	beq.n	8009cc0 <reg_wizchip_spiburst_cbfunc+0x24>
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d106      	bne.n	8009cce <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8009cc0:	4b09      	ldr	r3, [pc, #36]	; (8009ce8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8009cc2:	4a0a      	ldr	r2, [pc, #40]	; (8009cec <reg_wizchip_spiburst_cbfunc+0x50>)
 8009cc4:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8009cc6:	4b08      	ldr	r3, [pc, #32]	; (8009ce8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8009cc8:	4a09      	ldr	r2, [pc, #36]	; (8009cf0 <reg_wizchip_spiburst_cbfunc+0x54>)
 8009cca:	629a      	str	r2, [r3, #40]	; 0x28
 8009ccc:	e006      	b.n	8009cdc <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8009cce:	4a06      	ldr	r2, [pc, #24]	; (8009ce8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8009cd4:	4a04      	ldr	r2, [pc, #16]	; (8009ce8 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8009cda:	bf00      	nop
 8009cdc:	bf00      	nop
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr
 8009ce8:	20000098 	.word	0x20000098
 8009cec:	08009bc7 	.word	0x08009bc7
 8009cf0:	08009bdf 	.word	0x08009bdf

08009cf4 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b086      	sub	sp, #24
 8009cf8:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8009cfa:	1d3b      	adds	r3, r7, #4
 8009cfc:	2206      	movs	r2, #6
 8009cfe:	4619      	mov	r1, r3
 8009d00:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009d04:	f7ff f816 	bl	8008d34 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8009d08:	f107 0314 	add.w	r3, r7, #20
 8009d0c:	2204      	movs	r2, #4
 8009d0e:	4619      	mov	r1, r3
 8009d10:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009d14:	f7ff f80e 	bl	8008d34 <WIZCHIP_READ_BUF>
 8009d18:	f107 0310 	add.w	r3, r7, #16
 8009d1c:	2204      	movs	r2, #4
 8009d1e:	4619      	mov	r1, r3
 8009d20:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8009d24:	f7ff f806 	bl	8008d34 <WIZCHIP_READ_BUF>
 8009d28:	f107 030c 	add.w	r3, r7, #12
 8009d2c:	2204      	movs	r2, #4
 8009d2e:	4619      	mov	r1, r3
 8009d30:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8009d34:	f7fe fffe 	bl	8008d34 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8009d38:	2180      	movs	r1, #128	; 0x80
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	f7fe ffac 	bl	8008c98 <WIZCHIP_WRITE>
   getMR(); // for delay
 8009d40:	2000      	movs	r0, #0
 8009d42:	f7fe ff5d 	bl	8008c00 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8009d46:	1d3b      	adds	r3, r7, #4
 8009d48:	2206      	movs	r2, #6
 8009d4a:	4619      	mov	r1, r3
 8009d4c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009d50:	f7ff f850 	bl	8008df4 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8009d54:	f107 0314 	add.w	r3, r7, #20
 8009d58:	2204      	movs	r2, #4
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009d60:	f7ff f848 	bl	8008df4 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8009d64:	f107 0310 	add.w	r3, r7, #16
 8009d68:	2204      	movs	r2, #4
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8009d70:	f7ff f840 	bl	8008df4 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8009d74:	f107 030c 	add.w	r3, r7, #12
 8009d78:	2204      	movs	r2, #4
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8009d80:	f7ff f838 	bl	8008df4 <WIZCHIP_WRITE_BUF>
}
 8009d84:	bf00      	nop
 8009d86:	3718      	adds	r7, #24
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8009d96:	2300      	movs	r3, #0
 8009d98:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8009d9a:	f7ff ffab 	bl	8009cf4 <wizchip_sw_reset>
   if(txsize)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d03b      	beq.n	8009e1c <wizchip_init+0x90>
   {
      tmp = 0;
 8009da4:	2300      	movs	r3, #0
 8009da6:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009da8:	2300      	movs	r3, #0
 8009daa:	73fb      	strb	r3, [r7, #15]
 8009dac:	e015      	b.n	8009dda <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8009dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009db2:	687a      	ldr	r2, [r7, #4]
 8009db4:	4413      	add	r3, r2
 8009db6:	781a      	ldrb	r2, [r3, #0]
 8009db8:	7bbb      	ldrb	r3, [r7, #14]
 8009dba:	4413      	add	r3, r2
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8009dc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009dc4:	2b10      	cmp	r3, #16
 8009dc6:	dd02      	ble.n	8009dce <wizchip_init+0x42>
 8009dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8009dcc:	e066      	b.n	8009e9c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	73fb      	strb	r3, [r7, #15]
 8009dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dde:	2b07      	cmp	r3, #7
 8009de0:	dde5      	ble.n	8009dae <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009de2:	2300      	movs	r3, #0
 8009de4:	73fb      	strb	r3, [r7, #15]
 8009de6:	e015      	b.n	8009e14 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8009de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	3301      	adds	r3, #1
 8009df0:	00db      	lsls	r3, r3, #3
 8009df2:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8009df6:	4618      	mov	r0, r3
 8009df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	4413      	add	r3, r2
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	4619      	mov	r1, r3
 8009e04:	f7fe ff48 	bl	8008c98 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	3301      	adds	r3, #1
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	73fb      	strb	r3, [r7, #15]
 8009e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e18:	2b07      	cmp	r3, #7
 8009e1a:	dde5      	ble.n	8009de8 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d03b      	beq.n	8009e9a <wizchip_init+0x10e>
   {
      tmp = 0;
 8009e22:	2300      	movs	r3, #0
 8009e24:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009e26:	2300      	movs	r3, #0
 8009e28:	73fb      	strb	r3, [r7, #15]
 8009e2a:	e015      	b.n	8009e58 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8009e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	4413      	add	r3, r2
 8009e34:	781a      	ldrb	r2, [r3, #0]
 8009e36:	7bbb      	ldrb	r3, [r7, #14]
 8009e38:	4413      	add	r3, r2
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8009e3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e42:	2b10      	cmp	r3, #16
 8009e44:	dd02      	ble.n	8009e4c <wizchip_init+0xc0>
 8009e46:	f04f 33ff 	mov.w	r3, #4294967295
 8009e4a:	e027      	b.n	8009e9c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	3301      	adds	r3, #1
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	73fb      	strb	r3, [r7, #15]
 8009e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e5c:	2b07      	cmp	r3, #7
 8009e5e:	dde5      	ble.n	8009e2c <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009e60:	2300      	movs	r3, #0
 8009e62:	73fb      	strb	r3, [r7, #15]
 8009e64:	e015      	b.n	8009e92 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8009e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	00db      	lsls	r3, r3, #3
 8009e70:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8009e74:	4618      	mov	r0, r3
 8009e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e7a:	683a      	ldr	r2, [r7, #0]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	4619      	mov	r1, r3
 8009e82:	f7fe ff09 	bl	8008c98 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	73fb      	strb	r3, [r7, #15]
 8009e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e96:	2b07      	cmp	r3, #7
 8009e98:	dde5      	ble.n	8009e66 <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2206      	movs	r2, #6
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009eb6:	f7fe ff9d 	bl	8008df4 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	330e      	adds	r3, #14
 8009ebe:	2204      	movs	r2, #4
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009ec6:	f7fe ff95 	bl	8008df4 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	330a      	adds	r3, #10
 8009ece:	2204      	movs	r2, #4
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8009ed6:	f7fe ff8d 	bl	8008df4 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	3306      	adds	r3, #6
 8009ede:	2204      	movs	r2, #4
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8009ee6:	f7fe ff85 	bl	8008df4 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	7c9a      	ldrb	r2, [r3, #18]
 8009eee:	4b0b      	ldr	r3, [pc, #44]	; (8009f1c <wizchip_setnetinfo+0x78>)
 8009ef0:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	7cda      	ldrb	r2, [r3, #19]
 8009ef6:	4b09      	ldr	r3, [pc, #36]	; (8009f1c <wizchip_setnetinfo+0x78>)
 8009ef8:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	7d1a      	ldrb	r2, [r3, #20]
 8009efe:	4b07      	ldr	r3, [pc, #28]	; (8009f1c <wizchip_setnetinfo+0x78>)
 8009f00:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	7d5a      	ldrb	r2, [r3, #21]
 8009f06:	4b05      	ldr	r3, [pc, #20]	; (8009f1c <wizchip_setnetinfo+0x78>)
 8009f08:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	7d9a      	ldrb	r2, [r3, #22]
 8009f0e:	4b04      	ldr	r3, [pc, #16]	; (8009f20 <wizchip_setnetinfo+0x7c>)
 8009f10:	701a      	strb	r2, [r3, #0]
}
 8009f12:	bf00      	nop
 8009f14:	3708      	adds	r7, #8
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	20002edc 	.word	0x20002edc
 8009f20:	20002ee0 	.word	0x20002ee0

08009f24 <atoff>:
 8009f24:	2100      	movs	r1, #0
 8009f26:	f001 bc45 	b.w	800b7b4 <strtof>

08009f2a <atoi>:
 8009f2a:	220a      	movs	r2, #10
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	f001 bd1f 	b.w	800b970 <strtol>

08009f32 <atoll>:
 8009f32:	220a      	movs	r2, #10
 8009f34:	2100      	movs	r1, #0
 8009f36:	f001 bdbb 	b.w	800bab0 <strtoll>
	...

08009f3c <__errno>:
 8009f3c:	4b01      	ldr	r3, [pc, #4]	; (8009f44 <__errno+0x8>)
 8009f3e:	6818      	ldr	r0, [r3, #0]
 8009f40:	4770      	bx	lr
 8009f42:	bf00      	nop
 8009f44:	200000c4 	.word	0x200000c4

08009f48 <__libc_init_array>:
 8009f48:	b570      	push	{r4, r5, r6, lr}
 8009f4a:	4d0d      	ldr	r5, [pc, #52]	; (8009f80 <__libc_init_array+0x38>)
 8009f4c:	4c0d      	ldr	r4, [pc, #52]	; (8009f84 <__libc_init_array+0x3c>)
 8009f4e:	1b64      	subs	r4, r4, r5
 8009f50:	10a4      	asrs	r4, r4, #2
 8009f52:	2600      	movs	r6, #0
 8009f54:	42a6      	cmp	r6, r4
 8009f56:	d109      	bne.n	8009f6c <__libc_init_array+0x24>
 8009f58:	4d0b      	ldr	r5, [pc, #44]	; (8009f88 <__libc_init_array+0x40>)
 8009f5a:	4c0c      	ldr	r4, [pc, #48]	; (8009f8c <__libc_init_array+0x44>)
 8009f5c:	f004 fb7e 	bl	800e65c <_init>
 8009f60:	1b64      	subs	r4, r4, r5
 8009f62:	10a4      	asrs	r4, r4, #2
 8009f64:	2600      	movs	r6, #0
 8009f66:	42a6      	cmp	r6, r4
 8009f68:	d105      	bne.n	8009f76 <__libc_init_array+0x2e>
 8009f6a:	bd70      	pop	{r4, r5, r6, pc}
 8009f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f70:	4798      	blx	r3
 8009f72:	3601      	adds	r6, #1
 8009f74:	e7ee      	b.n	8009f54 <__libc_init_array+0xc>
 8009f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f7a:	4798      	blx	r3
 8009f7c:	3601      	adds	r6, #1
 8009f7e:	e7f2      	b.n	8009f66 <__libc_init_array+0x1e>
 8009f80:	0800ff10 	.word	0x0800ff10
 8009f84:	0800ff10 	.word	0x0800ff10
 8009f88:	0800ff10 	.word	0x0800ff10
 8009f8c:	0800ff14 	.word	0x0800ff14

08009f90 <malloc>:
 8009f90:	4b02      	ldr	r3, [pc, #8]	; (8009f9c <malloc+0xc>)
 8009f92:	4601      	mov	r1, r0
 8009f94:	6818      	ldr	r0, [r3, #0]
 8009f96:	f000 b885 	b.w	800a0a4 <_malloc_r>
 8009f9a:	bf00      	nop
 8009f9c:	200000c4 	.word	0x200000c4

08009fa0 <memcpy>:
 8009fa0:	440a      	add	r2, r1
 8009fa2:	4291      	cmp	r1, r2
 8009fa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009fa8:	d100      	bne.n	8009fac <memcpy+0xc>
 8009faa:	4770      	bx	lr
 8009fac:	b510      	push	{r4, lr}
 8009fae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fb6:	4291      	cmp	r1, r2
 8009fb8:	d1f9      	bne.n	8009fae <memcpy+0xe>
 8009fba:	bd10      	pop	{r4, pc}

08009fbc <memset>:
 8009fbc:	4402      	add	r2, r0
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d100      	bne.n	8009fc6 <memset+0xa>
 8009fc4:	4770      	bx	lr
 8009fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8009fca:	e7f9      	b.n	8009fc0 <memset+0x4>

08009fcc <_free_r>:
 8009fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fce:	2900      	cmp	r1, #0
 8009fd0:	d044      	beq.n	800a05c <_free_r+0x90>
 8009fd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fd6:	9001      	str	r0, [sp, #4]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f1a1 0404 	sub.w	r4, r1, #4
 8009fde:	bfb8      	it	lt
 8009fe0:	18e4      	addlt	r4, r4, r3
 8009fe2:	f003 fab5 	bl	800d550 <__malloc_lock>
 8009fe6:	4a1e      	ldr	r2, [pc, #120]	; (800a060 <_free_r+0x94>)
 8009fe8:	9801      	ldr	r0, [sp, #4]
 8009fea:	6813      	ldr	r3, [r2, #0]
 8009fec:	b933      	cbnz	r3, 8009ffc <_free_r+0x30>
 8009fee:	6063      	str	r3, [r4, #4]
 8009ff0:	6014      	str	r4, [r2, #0]
 8009ff2:	b003      	add	sp, #12
 8009ff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ff8:	f003 bab0 	b.w	800d55c <__malloc_unlock>
 8009ffc:	42a3      	cmp	r3, r4
 8009ffe:	d908      	bls.n	800a012 <_free_r+0x46>
 800a000:	6825      	ldr	r5, [r4, #0]
 800a002:	1961      	adds	r1, r4, r5
 800a004:	428b      	cmp	r3, r1
 800a006:	bf01      	itttt	eq
 800a008:	6819      	ldreq	r1, [r3, #0]
 800a00a:	685b      	ldreq	r3, [r3, #4]
 800a00c:	1949      	addeq	r1, r1, r5
 800a00e:	6021      	streq	r1, [r4, #0]
 800a010:	e7ed      	b.n	8009fee <_free_r+0x22>
 800a012:	461a      	mov	r2, r3
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	b10b      	cbz	r3, 800a01c <_free_r+0x50>
 800a018:	42a3      	cmp	r3, r4
 800a01a:	d9fa      	bls.n	800a012 <_free_r+0x46>
 800a01c:	6811      	ldr	r1, [r2, #0]
 800a01e:	1855      	adds	r5, r2, r1
 800a020:	42a5      	cmp	r5, r4
 800a022:	d10b      	bne.n	800a03c <_free_r+0x70>
 800a024:	6824      	ldr	r4, [r4, #0]
 800a026:	4421      	add	r1, r4
 800a028:	1854      	adds	r4, r2, r1
 800a02a:	42a3      	cmp	r3, r4
 800a02c:	6011      	str	r1, [r2, #0]
 800a02e:	d1e0      	bne.n	8009ff2 <_free_r+0x26>
 800a030:	681c      	ldr	r4, [r3, #0]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	6053      	str	r3, [r2, #4]
 800a036:	4421      	add	r1, r4
 800a038:	6011      	str	r1, [r2, #0]
 800a03a:	e7da      	b.n	8009ff2 <_free_r+0x26>
 800a03c:	d902      	bls.n	800a044 <_free_r+0x78>
 800a03e:	230c      	movs	r3, #12
 800a040:	6003      	str	r3, [r0, #0]
 800a042:	e7d6      	b.n	8009ff2 <_free_r+0x26>
 800a044:	6825      	ldr	r5, [r4, #0]
 800a046:	1961      	adds	r1, r4, r5
 800a048:	428b      	cmp	r3, r1
 800a04a:	bf04      	itt	eq
 800a04c:	6819      	ldreq	r1, [r3, #0]
 800a04e:	685b      	ldreq	r3, [r3, #4]
 800a050:	6063      	str	r3, [r4, #4]
 800a052:	bf04      	itt	eq
 800a054:	1949      	addeq	r1, r1, r5
 800a056:	6021      	streq	r1, [r4, #0]
 800a058:	6054      	str	r4, [r2, #4]
 800a05a:	e7ca      	b.n	8009ff2 <_free_r+0x26>
 800a05c:	b003      	add	sp, #12
 800a05e:	bd30      	pop	{r4, r5, pc}
 800a060:	20002ee4 	.word	0x20002ee4

0800a064 <sbrk_aligned>:
 800a064:	b570      	push	{r4, r5, r6, lr}
 800a066:	4e0e      	ldr	r6, [pc, #56]	; (800a0a0 <sbrk_aligned+0x3c>)
 800a068:	460c      	mov	r4, r1
 800a06a:	6831      	ldr	r1, [r6, #0]
 800a06c:	4605      	mov	r5, r0
 800a06e:	b911      	cbnz	r1, 800a076 <sbrk_aligned+0x12>
 800a070:	f000 fcf6 	bl	800aa60 <_sbrk_r>
 800a074:	6030      	str	r0, [r6, #0]
 800a076:	4621      	mov	r1, r4
 800a078:	4628      	mov	r0, r5
 800a07a:	f000 fcf1 	bl	800aa60 <_sbrk_r>
 800a07e:	1c43      	adds	r3, r0, #1
 800a080:	d00a      	beq.n	800a098 <sbrk_aligned+0x34>
 800a082:	1cc4      	adds	r4, r0, #3
 800a084:	f024 0403 	bic.w	r4, r4, #3
 800a088:	42a0      	cmp	r0, r4
 800a08a:	d007      	beq.n	800a09c <sbrk_aligned+0x38>
 800a08c:	1a21      	subs	r1, r4, r0
 800a08e:	4628      	mov	r0, r5
 800a090:	f000 fce6 	bl	800aa60 <_sbrk_r>
 800a094:	3001      	adds	r0, #1
 800a096:	d101      	bne.n	800a09c <sbrk_aligned+0x38>
 800a098:	f04f 34ff 	mov.w	r4, #4294967295
 800a09c:	4620      	mov	r0, r4
 800a09e:	bd70      	pop	{r4, r5, r6, pc}
 800a0a0:	20002ee8 	.word	0x20002ee8

0800a0a4 <_malloc_r>:
 800a0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a8:	1ccd      	adds	r5, r1, #3
 800a0aa:	f025 0503 	bic.w	r5, r5, #3
 800a0ae:	3508      	adds	r5, #8
 800a0b0:	2d0c      	cmp	r5, #12
 800a0b2:	bf38      	it	cc
 800a0b4:	250c      	movcc	r5, #12
 800a0b6:	2d00      	cmp	r5, #0
 800a0b8:	4607      	mov	r7, r0
 800a0ba:	db01      	blt.n	800a0c0 <_malloc_r+0x1c>
 800a0bc:	42a9      	cmp	r1, r5
 800a0be:	d905      	bls.n	800a0cc <_malloc_r+0x28>
 800a0c0:	230c      	movs	r3, #12
 800a0c2:	603b      	str	r3, [r7, #0]
 800a0c4:	2600      	movs	r6, #0
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0cc:	4e2e      	ldr	r6, [pc, #184]	; (800a188 <_malloc_r+0xe4>)
 800a0ce:	f003 fa3f 	bl	800d550 <__malloc_lock>
 800a0d2:	6833      	ldr	r3, [r6, #0]
 800a0d4:	461c      	mov	r4, r3
 800a0d6:	bb34      	cbnz	r4, 800a126 <_malloc_r+0x82>
 800a0d8:	4629      	mov	r1, r5
 800a0da:	4638      	mov	r0, r7
 800a0dc:	f7ff ffc2 	bl	800a064 <sbrk_aligned>
 800a0e0:	1c43      	adds	r3, r0, #1
 800a0e2:	4604      	mov	r4, r0
 800a0e4:	d14d      	bne.n	800a182 <_malloc_r+0xde>
 800a0e6:	6834      	ldr	r4, [r6, #0]
 800a0e8:	4626      	mov	r6, r4
 800a0ea:	2e00      	cmp	r6, #0
 800a0ec:	d140      	bne.n	800a170 <_malloc_r+0xcc>
 800a0ee:	6823      	ldr	r3, [r4, #0]
 800a0f0:	4631      	mov	r1, r6
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	eb04 0803 	add.w	r8, r4, r3
 800a0f8:	f000 fcb2 	bl	800aa60 <_sbrk_r>
 800a0fc:	4580      	cmp	r8, r0
 800a0fe:	d13a      	bne.n	800a176 <_malloc_r+0xd2>
 800a100:	6821      	ldr	r1, [r4, #0]
 800a102:	3503      	adds	r5, #3
 800a104:	1a6d      	subs	r5, r5, r1
 800a106:	f025 0503 	bic.w	r5, r5, #3
 800a10a:	3508      	adds	r5, #8
 800a10c:	2d0c      	cmp	r5, #12
 800a10e:	bf38      	it	cc
 800a110:	250c      	movcc	r5, #12
 800a112:	4629      	mov	r1, r5
 800a114:	4638      	mov	r0, r7
 800a116:	f7ff ffa5 	bl	800a064 <sbrk_aligned>
 800a11a:	3001      	adds	r0, #1
 800a11c:	d02b      	beq.n	800a176 <_malloc_r+0xd2>
 800a11e:	6823      	ldr	r3, [r4, #0]
 800a120:	442b      	add	r3, r5
 800a122:	6023      	str	r3, [r4, #0]
 800a124:	e00e      	b.n	800a144 <_malloc_r+0xa0>
 800a126:	6822      	ldr	r2, [r4, #0]
 800a128:	1b52      	subs	r2, r2, r5
 800a12a:	d41e      	bmi.n	800a16a <_malloc_r+0xc6>
 800a12c:	2a0b      	cmp	r2, #11
 800a12e:	d916      	bls.n	800a15e <_malloc_r+0xba>
 800a130:	1961      	adds	r1, r4, r5
 800a132:	42a3      	cmp	r3, r4
 800a134:	6025      	str	r5, [r4, #0]
 800a136:	bf18      	it	ne
 800a138:	6059      	strne	r1, [r3, #4]
 800a13a:	6863      	ldr	r3, [r4, #4]
 800a13c:	bf08      	it	eq
 800a13e:	6031      	streq	r1, [r6, #0]
 800a140:	5162      	str	r2, [r4, r5]
 800a142:	604b      	str	r3, [r1, #4]
 800a144:	4638      	mov	r0, r7
 800a146:	f104 060b 	add.w	r6, r4, #11
 800a14a:	f003 fa07 	bl	800d55c <__malloc_unlock>
 800a14e:	f026 0607 	bic.w	r6, r6, #7
 800a152:	1d23      	adds	r3, r4, #4
 800a154:	1af2      	subs	r2, r6, r3
 800a156:	d0b6      	beq.n	800a0c6 <_malloc_r+0x22>
 800a158:	1b9b      	subs	r3, r3, r6
 800a15a:	50a3      	str	r3, [r4, r2]
 800a15c:	e7b3      	b.n	800a0c6 <_malloc_r+0x22>
 800a15e:	6862      	ldr	r2, [r4, #4]
 800a160:	42a3      	cmp	r3, r4
 800a162:	bf0c      	ite	eq
 800a164:	6032      	streq	r2, [r6, #0]
 800a166:	605a      	strne	r2, [r3, #4]
 800a168:	e7ec      	b.n	800a144 <_malloc_r+0xa0>
 800a16a:	4623      	mov	r3, r4
 800a16c:	6864      	ldr	r4, [r4, #4]
 800a16e:	e7b2      	b.n	800a0d6 <_malloc_r+0x32>
 800a170:	4634      	mov	r4, r6
 800a172:	6876      	ldr	r6, [r6, #4]
 800a174:	e7b9      	b.n	800a0ea <_malloc_r+0x46>
 800a176:	230c      	movs	r3, #12
 800a178:	603b      	str	r3, [r7, #0]
 800a17a:	4638      	mov	r0, r7
 800a17c:	f003 f9ee 	bl	800d55c <__malloc_unlock>
 800a180:	e7a1      	b.n	800a0c6 <_malloc_r+0x22>
 800a182:	6025      	str	r5, [r4, #0]
 800a184:	e7de      	b.n	800a144 <_malloc_r+0xa0>
 800a186:	bf00      	nop
 800a188:	20002ee4 	.word	0x20002ee4

0800a18c <__cvt>:
 800a18c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a190:	ec55 4b10 	vmov	r4, r5, d0
 800a194:	2d00      	cmp	r5, #0
 800a196:	460e      	mov	r6, r1
 800a198:	4619      	mov	r1, r3
 800a19a:	462b      	mov	r3, r5
 800a19c:	bfbb      	ittet	lt
 800a19e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a1a2:	461d      	movlt	r5, r3
 800a1a4:	2300      	movge	r3, #0
 800a1a6:	232d      	movlt	r3, #45	; 0x2d
 800a1a8:	700b      	strb	r3, [r1, #0]
 800a1aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a1b0:	4691      	mov	r9, r2
 800a1b2:	f023 0820 	bic.w	r8, r3, #32
 800a1b6:	bfbc      	itt	lt
 800a1b8:	4622      	movlt	r2, r4
 800a1ba:	4614      	movlt	r4, r2
 800a1bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a1c0:	d005      	beq.n	800a1ce <__cvt+0x42>
 800a1c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a1c6:	d100      	bne.n	800a1ca <__cvt+0x3e>
 800a1c8:	3601      	adds	r6, #1
 800a1ca:	2102      	movs	r1, #2
 800a1cc:	e000      	b.n	800a1d0 <__cvt+0x44>
 800a1ce:	2103      	movs	r1, #3
 800a1d0:	ab03      	add	r3, sp, #12
 800a1d2:	9301      	str	r3, [sp, #4]
 800a1d4:	ab02      	add	r3, sp, #8
 800a1d6:	9300      	str	r3, [sp, #0]
 800a1d8:	ec45 4b10 	vmov	d0, r4, r5
 800a1dc:	4653      	mov	r3, sl
 800a1de:	4632      	mov	r2, r6
 800a1e0:	f001 fdfe 	bl	800bde0 <_dtoa_r>
 800a1e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a1e8:	4607      	mov	r7, r0
 800a1ea:	d102      	bne.n	800a1f2 <__cvt+0x66>
 800a1ec:	f019 0f01 	tst.w	r9, #1
 800a1f0:	d022      	beq.n	800a238 <__cvt+0xac>
 800a1f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a1f6:	eb07 0906 	add.w	r9, r7, r6
 800a1fa:	d110      	bne.n	800a21e <__cvt+0x92>
 800a1fc:	783b      	ldrb	r3, [r7, #0]
 800a1fe:	2b30      	cmp	r3, #48	; 0x30
 800a200:	d10a      	bne.n	800a218 <__cvt+0x8c>
 800a202:	2200      	movs	r2, #0
 800a204:	2300      	movs	r3, #0
 800a206:	4620      	mov	r0, r4
 800a208:	4629      	mov	r1, r5
 800a20a:	f7f6 fc65 	bl	8000ad8 <__aeabi_dcmpeq>
 800a20e:	b918      	cbnz	r0, 800a218 <__cvt+0x8c>
 800a210:	f1c6 0601 	rsb	r6, r6, #1
 800a214:	f8ca 6000 	str.w	r6, [sl]
 800a218:	f8da 3000 	ldr.w	r3, [sl]
 800a21c:	4499      	add	r9, r3
 800a21e:	2200      	movs	r2, #0
 800a220:	2300      	movs	r3, #0
 800a222:	4620      	mov	r0, r4
 800a224:	4629      	mov	r1, r5
 800a226:	f7f6 fc57 	bl	8000ad8 <__aeabi_dcmpeq>
 800a22a:	b108      	cbz	r0, 800a230 <__cvt+0xa4>
 800a22c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a230:	2230      	movs	r2, #48	; 0x30
 800a232:	9b03      	ldr	r3, [sp, #12]
 800a234:	454b      	cmp	r3, r9
 800a236:	d307      	bcc.n	800a248 <__cvt+0xbc>
 800a238:	9b03      	ldr	r3, [sp, #12]
 800a23a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a23c:	1bdb      	subs	r3, r3, r7
 800a23e:	4638      	mov	r0, r7
 800a240:	6013      	str	r3, [r2, #0]
 800a242:	b004      	add	sp, #16
 800a244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a248:	1c59      	adds	r1, r3, #1
 800a24a:	9103      	str	r1, [sp, #12]
 800a24c:	701a      	strb	r2, [r3, #0]
 800a24e:	e7f0      	b.n	800a232 <__cvt+0xa6>

0800a250 <__exponent>:
 800a250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a252:	4603      	mov	r3, r0
 800a254:	2900      	cmp	r1, #0
 800a256:	bfb8      	it	lt
 800a258:	4249      	neglt	r1, r1
 800a25a:	f803 2b02 	strb.w	r2, [r3], #2
 800a25e:	bfb4      	ite	lt
 800a260:	222d      	movlt	r2, #45	; 0x2d
 800a262:	222b      	movge	r2, #43	; 0x2b
 800a264:	2909      	cmp	r1, #9
 800a266:	7042      	strb	r2, [r0, #1]
 800a268:	dd2a      	ble.n	800a2c0 <__exponent+0x70>
 800a26a:	f10d 0407 	add.w	r4, sp, #7
 800a26e:	46a4      	mov	ip, r4
 800a270:	270a      	movs	r7, #10
 800a272:	46a6      	mov	lr, r4
 800a274:	460a      	mov	r2, r1
 800a276:	fb91 f6f7 	sdiv	r6, r1, r7
 800a27a:	fb07 1516 	mls	r5, r7, r6, r1
 800a27e:	3530      	adds	r5, #48	; 0x30
 800a280:	2a63      	cmp	r2, #99	; 0x63
 800a282:	f104 34ff 	add.w	r4, r4, #4294967295
 800a286:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a28a:	4631      	mov	r1, r6
 800a28c:	dcf1      	bgt.n	800a272 <__exponent+0x22>
 800a28e:	3130      	adds	r1, #48	; 0x30
 800a290:	f1ae 0502 	sub.w	r5, lr, #2
 800a294:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a298:	1c44      	adds	r4, r0, #1
 800a29a:	4629      	mov	r1, r5
 800a29c:	4561      	cmp	r1, ip
 800a29e:	d30a      	bcc.n	800a2b6 <__exponent+0x66>
 800a2a0:	f10d 0209 	add.w	r2, sp, #9
 800a2a4:	eba2 020e 	sub.w	r2, r2, lr
 800a2a8:	4565      	cmp	r5, ip
 800a2aa:	bf88      	it	hi
 800a2ac:	2200      	movhi	r2, #0
 800a2ae:	4413      	add	r3, r2
 800a2b0:	1a18      	subs	r0, r3, r0
 800a2b2:	b003      	add	sp, #12
 800a2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a2be:	e7ed      	b.n	800a29c <__exponent+0x4c>
 800a2c0:	2330      	movs	r3, #48	; 0x30
 800a2c2:	3130      	adds	r1, #48	; 0x30
 800a2c4:	7083      	strb	r3, [r0, #2]
 800a2c6:	70c1      	strb	r1, [r0, #3]
 800a2c8:	1d03      	adds	r3, r0, #4
 800a2ca:	e7f1      	b.n	800a2b0 <__exponent+0x60>

0800a2cc <_printf_float>:
 800a2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d0:	ed2d 8b02 	vpush	{d8}
 800a2d4:	b08d      	sub	sp, #52	; 0x34
 800a2d6:	460c      	mov	r4, r1
 800a2d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a2dc:	4616      	mov	r6, r2
 800a2de:	461f      	mov	r7, r3
 800a2e0:	4605      	mov	r5, r0
 800a2e2:	f003 f8a3 	bl	800d42c <_localeconv_r>
 800a2e6:	f8d0 a000 	ldr.w	sl, [r0]
 800a2ea:	4650      	mov	r0, sl
 800a2ec:	f7f5 ff78 	bl	80001e0 <strlen>
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	930a      	str	r3, [sp, #40]	; 0x28
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	9305      	str	r3, [sp, #20]
 800a2f8:	f8d8 3000 	ldr.w	r3, [r8]
 800a2fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a300:	3307      	adds	r3, #7
 800a302:	f023 0307 	bic.w	r3, r3, #7
 800a306:	f103 0208 	add.w	r2, r3, #8
 800a30a:	f8c8 2000 	str.w	r2, [r8]
 800a30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a312:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a316:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a31a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a31e:	9307      	str	r3, [sp, #28]
 800a320:	f8cd 8018 	str.w	r8, [sp, #24]
 800a324:	ee08 0a10 	vmov	s16, r0
 800a328:	4b9f      	ldr	r3, [pc, #636]	; (800a5a8 <_printf_float+0x2dc>)
 800a32a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a32e:	f04f 32ff 	mov.w	r2, #4294967295
 800a332:	f7f6 fc03 	bl	8000b3c <__aeabi_dcmpun>
 800a336:	bb88      	cbnz	r0, 800a39c <_printf_float+0xd0>
 800a338:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a33c:	4b9a      	ldr	r3, [pc, #616]	; (800a5a8 <_printf_float+0x2dc>)
 800a33e:	f04f 32ff 	mov.w	r2, #4294967295
 800a342:	f7f6 fbdd 	bl	8000b00 <__aeabi_dcmple>
 800a346:	bb48      	cbnz	r0, 800a39c <_printf_float+0xd0>
 800a348:	2200      	movs	r2, #0
 800a34a:	2300      	movs	r3, #0
 800a34c:	4640      	mov	r0, r8
 800a34e:	4649      	mov	r1, r9
 800a350:	f7f6 fbcc 	bl	8000aec <__aeabi_dcmplt>
 800a354:	b110      	cbz	r0, 800a35c <_printf_float+0x90>
 800a356:	232d      	movs	r3, #45	; 0x2d
 800a358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a35c:	4b93      	ldr	r3, [pc, #588]	; (800a5ac <_printf_float+0x2e0>)
 800a35e:	4894      	ldr	r0, [pc, #592]	; (800a5b0 <_printf_float+0x2e4>)
 800a360:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a364:	bf94      	ite	ls
 800a366:	4698      	movls	r8, r3
 800a368:	4680      	movhi	r8, r0
 800a36a:	2303      	movs	r3, #3
 800a36c:	6123      	str	r3, [r4, #16]
 800a36e:	9b05      	ldr	r3, [sp, #20]
 800a370:	f023 0204 	bic.w	r2, r3, #4
 800a374:	6022      	str	r2, [r4, #0]
 800a376:	f04f 0900 	mov.w	r9, #0
 800a37a:	9700      	str	r7, [sp, #0]
 800a37c:	4633      	mov	r3, r6
 800a37e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a380:	4621      	mov	r1, r4
 800a382:	4628      	mov	r0, r5
 800a384:	f000 f9d8 	bl	800a738 <_printf_common>
 800a388:	3001      	adds	r0, #1
 800a38a:	f040 8090 	bne.w	800a4ae <_printf_float+0x1e2>
 800a38e:	f04f 30ff 	mov.w	r0, #4294967295
 800a392:	b00d      	add	sp, #52	; 0x34
 800a394:	ecbd 8b02 	vpop	{d8}
 800a398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a39c:	4642      	mov	r2, r8
 800a39e:	464b      	mov	r3, r9
 800a3a0:	4640      	mov	r0, r8
 800a3a2:	4649      	mov	r1, r9
 800a3a4:	f7f6 fbca 	bl	8000b3c <__aeabi_dcmpun>
 800a3a8:	b140      	cbz	r0, 800a3bc <_printf_float+0xf0>
 800a3aa:	464b      	mov	r3, r9
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	bfbc      	itt	lt
 800a3b0:	232d      	movlt	r3, #45	; 0x2d
 800a3b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a3b6:	487f      	ldr	r0, [pc, #508]	; (800a5b4 <_printf_float+0x2e8>)
 800a3b8:	4b7f      	ldr	r3, [pc, #508]	; (800a5b8 <_printf_float+0x2ec>)
 800a3ba:	e7d1      	b.n	800a360 <_printf_float+0x94>
 800a3bc:	6863      	ldr	r3, [r4, #4]
 800a3be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a3c2:	9206      	str	r2, [sp, #24]
 800a3c4:	1c5a      	adds	r2, r3, #1
 800a3c6:	d13f      	bne.n	800a448 <_printf_float+0x17c>
 800a3c8:	2306      	movs	r3, #6
 800a3ca:	6063      	str	r3, [r4, #4]
 800a3cc:	9b05      	ldr	r3, [sp, #20]
 800a3ce:	6861      	ldr	r1, [r4, #4]
 800a3d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	9303      	str	r3, [sp, #12]
 800a3d8:	ab0a      	add	r3, sp, #40	; 0x28
 800a3da:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a3de:	ab09      	add	r3, sp, #36	; 0x24
 800a3e0:	ec49 8b10 	vmov	d0, r8, r9
 800a3e4:	9300      	str	r3, [sp, #0]
 800a3e6:	6022      	str	r2, [r4, #0]
 800a3e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	f7ff fecd 	bl	800a18c <__cvt>
 800a3f2:	9b06      	ldr	r3, [sp, #24]
 800a3f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3f6:	2b47      	cmp	r3, #71	; 0x47
 800a3f8:	4680      	mov	r8, r0
 800a3fa:	d108      	bne.n	800a40e <_printf_float+0x142>
 800a3fc:	1cc8      	adds	r0, r1, #3
 800a3fe:	db02      	blt.n	800a406 <_printf_float+0x13a>
 800a400:	6863      	ldr	r3, [r4, #4]
 800a402:	4299      	cmp	r1, r3
 800a404:	dd41      	ble.n	800a48a <_printf_float+0x1be>
 800a406:	f1ab 0b02 	sub.w	fp, fp, #2
 800a40a:	fa5f fb8b 	uxtb.w	fp, fp
 800a40e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a412:	d820      	bhi.n	800a456 <_printf_float+0x18a>
 800a414:	3901      	subs	r1, #1
 800a416:	465a      	mov	r2, fp
 800a418:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a41c:	9109      	str	r1, [sp, #36]	; 0x24
 800a41e:	f7ff ff17 	bl	800a250 <__exponent>
 800a422:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a424:	1813      	adds	r3, r2, r0
 800a426:	2a01      	cmp	r2, #1
 800a428:	4681      	mov	r9, r0
 800a42a:	6123      	str	r3, [r4, #16]
 800a42c:	dc02      	bgt.n	800a434 <_printf_float+0x168>
 800a42e:	6822      	ldr	r2, [r4, #0]
 800a430:	07d2      	lsls	r2, r2, #31
 800a432:	d501      	bpl.n	800a438 <_printf_float+0x16c>
 800a434:	3301      	adds	r3, #1
 800a436:	6123      	str	r3, [r4, #16]
 800a438:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d09c      	beq.n	800a37a <_printf_float+0xae>
 800a440:	232d      	movs	r3, #45	; 0x2d
 800a442:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a446:	e798      	b.n	800a37a <_printf_float+0xae>
 800a448:	9a06      	ldr	r2, [sp, #24]
 800a44a:	2a47      	cmp	r2, #71	; 0x47
 800a44c:	d1be      	bne.n	800a3cc <_printf_float+0x100>
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1bc      	bne.n	800a3cc <_printf_float+0x100>
 800a452:	2301      	movs	r3, #1
 800a454:	e7b9      	b.n	800a3ca <_printf_float+0xfe>
 800a456:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a45a:	d118      	bne.n	800a48e <_printf_float+0x1c2>
 800a45c:	2900      	cmp	r1, #0
 800a45e:	6863      	ldr	r3, [r4, #4]
 800a460:	dd0b      	ble.n	800a47a <_printf_float+0x1ae>
 800a462:	6121      	str	r1, [r4, #16]
 800a464:	b913      	cbnz	r3, 800a46c <_printf_float+0x1a0>
 800a466:	6822      	ldr	r2, [r4, #0]
 800a468:	07d0      	lsls	r0, r2, #31
 800a46a:	d502      	bpl.n	800a472 <_printf_float+0x1a6>
 800a46c:	3301      	adds	r3, #1
 800a46e:	440b      	add	r3, r1
 800a470:	6123      	str	r3, [r4, #16]
 800a472:	65a1      	str	r1, [r4, #88]	; 0x58
 800a474:	f04f 0900 	mov.w	r9, #0
 800a478:	e7de      	b.n	800a438 <_printf_float+0x16c>
 800a47a:	b913      	cbnz	r3, 800a482 <_printf_float+0x1b6>
 800a47c:	6822      	ldr	r2, [r4, #0]
 800a47e:	07d2      	lsls	r2, r2, #31
 800a480:	d501      	bpl.n	800a486 <_printf_float+0x1ba>
 800a482:	3302      	adds	r3, #2
 800a484:	e7f4      	b.n	800a470 <_printf_float+0x1a4>
 800a486:	2301      	movs	r3, #1
 800a488:	e7f2      	b.n	800a470 <_printf_float+0x1a4>
 800a48a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a48e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a490:	4299      	cmp	r1, r3
 800a492:	db05      	blt.n	800a4a0 <_printf_float+0x1d4>
 800a494:	6823      	ldr	r3, [r4, #0]
 800a496:	6121      	str	r1, [r4, #16]
 800a498:	07d8      	lsls	r0, r3, #31
 800a49a:	d5ea      	bpl.n	800a472 <_printf_float+0x1a6>
 800a49c:	1c4b      	adds	r3, r1, #1
 800a49e:	e7e7      	b.n	800a470 <_printf_float+0x1a4>
 800a4a0:	2900      	cmp	r1, #0
 800a4a2:	bfd4      	ite	le
 800a4a4:	f1c1 0202 	rsble	r2, r1, #2
 800a4a8:	2201      	movgt	r2, #1
 800a4aa:	4413      	add	r3, r2
 800a4ac:	e7e0      	b.n	800a470 <_printf_float+0x1a4>
 800a4ae:	6823      	ldr	r3, [r4, #0]
 800a4b0:	055a      	lsls	r2, r3, #21
 800a4b2:	d407      	bmi.n	800a4c4 <_printf_float+0x1f8>
 800a4b4:	6923      	ldr	r3, [r4, #16]
 800a4b6:	4642      	mov	r2, r8
 800a4b8:	4631      	mov	r1, r6
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	47b8      	blx	r7
 800a4be:	3001      	adds	r0, #1
 800a4c0:	d12c      	bne.n	800a51c <_printf_float+0x250>
 800a4c2:	e764      	b.n	800a38e <_printf_float+0xc2>
 800a4c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a4c8:	f240 80e0 	bls.w	800a68c <_printf_float+0x3c0>
 800a4cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	f7f6 fb00 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d034      	beq.n	800a546 <_printf_float+0x27a>
 800a4dc:	4a37      	ldr	r2, [pc, #220]	; (800a5bc <_printf_float+0x2f0>)
 800a4de:	2301      	movs	r3, #1
 800a4e0:	4631      	mov	r1, r6
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	47b8      	blx	r7
 800a4e6:	3001      	adds	r0, #1
 800a4e8:	f43f af51 	beq.w	800a38e <_printf_float+0xc2>
 800a4ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	db02      	blt.n	800a4fa <_printf_float+0x22e>
 800a4f4:	6823      	ldr	r3, [r4, #0]
 800a4f6:	07d8      	lsls	r0, r3, #31
 800a4f8:	d510      	bpl.n	800a51c <_printf_float+0x250>
 800a4fa:	ee18 3a10 	vmov	r3, s16
 800a4fe:	4652      	mov	r2, sl
 800a500:	4631      	mov	r1, r6
 800a502:	4628      	mov	r0, r5
 800a504:	47b8      	blx	r7
 800a506:	3001      	adds	r0, #1
 800a508:	f43f af41 	beq.w	800a38e <_printf_float+0xc2>
 800a50c:	f04f 0800 	mov.w	r8, #0
 800a510:	f104 091a 	add.w	r9, r4, #26
 800a514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a516:	3b01      	subs	r3, #1
 800a518:	4543      	cmp	r3, r8
 800a51a:	dc09      	bgt.n	800a530 <_printf_float+0x264>
 800a51c:	6823      	ldr	r3, [r4, #0]
 800a51e:	079b      	lsls	r3, r3, #30
 800a520:	f100 8105 	bmi.w	800a72e <_printf_float+0x462>
 800a524:	68e0      	ldr	r0, [r4, #12]
 800a526:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a528:	4298      	cmp	r0, r3
 800a52a:	bfb8      	it	lt
 800a52c:	4618      	movlt	r0, r3
 800a52e:	e730      	b.n	800a392 <_printf_float+0xc6>
 800a530:	2301      	movs	r3, #1
 800a532:	464a      	mov	r2, r9
 800a534:	4631      	mov	r1, r6
 800a536:	4628      	mov	r0, r5
 800a538:	47b8      	blx	r7
 800a53a:	3001      	adds	r0, #1
 800a53c:	f43f af27 	beq.w	800a38e <_printf_float+0xc2>
 800a540:	f108 0801 	add.w	r8, r8, #1
 800a544:	e7e6      	b.n	800a514 <_printf_float+0x248>
 800a546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a548:	2b00      	cmp	r3, #0
 800a54a:	dc39      	bgt.n	800a5c0 <_printf_float+0x2f4>
 800a54c:	4a1b      	ldr	r2, [pc, #108]	; (800a5bc <_printf_float+0x2f0>)
 800a54e:	2301      	movs	r3, #1
 800a550:	4631      	mov	r1, r6
 800a552:	4628      	mov	r0, r5
 800a554:	47b8      	blx	r7
 800a556:	3001      	adds	r0, #1
 800a558:	f43f af19 	beq.w	800a38e <_printf_float+0xc2>
 800a55c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a560:	4313      	orrs	r3, r2
 800a562:	d102      	bne.n	800a56a <_printf_float+0x29e>
 800a564:	6823      	ldr	r3, [r4, #0]
 800a566:	07d9      	lsls	r1, r3, #31
 800a568:	d5d8      	bpl.n	800a51c <_printf_float+0x250>
 800a56a:	ee18 3a10 	vmov	r3, s16
 800a56e:	4652      	mov	r2, sl
 800a570:	4631      	mov	r1, r6
 800a572:	4628      	mov	r0, r5
 800a574:	47b8      	blx	r7
 800a576:	3001      	adds	r0, #1
 800a578:	f43f af09 	beq.w	800a38e <_printf_float+0xc2>
 800a57c:	f04f 0900 	mov.w	r9, #0
 800a580:	f104 0a1a 	add.w	sl, r4, #26
 800a584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a586:	425b      	negs	r3, r3
 800a588:	454b      	cmp	r3, r9
 800a58a:	dc01      	bgt.n	800a590 <_printf_float+0x2c4>
 800a58c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a58e:	e792      	b.n	800a4b6 <_printf_float+0x1ea>
 800a590:	2301      	movs	r3, #1
 800a592:	4652      	mov	r2, sl
 800a594:	4631      	mov	r1, r6
 800a596:	4628      	mov	r0, r5
 800a598:	47b8      	blx	r7
 800a59a:	3001      	adds	r0, #1
 800a59c:	f43f aef7 	beq.w	800a38e <_printf_float+0xc2>
 800a5a0:	f109 0901 	add.w	r9, r9, #1
 800a5a4:	e7ee      	b.n	800a584 <_printf_float+0x2b8>
 800a5a6:	bf00      	nop
 800a5a8:	7fefffff 	.word	0x7fefffff
 800a5ac:	0800fb6c 	.word	0x0800fb6c
 800a5b0:	0800fb70 	.word	0x0800fb70
 800a5b4:	0800fb78 	.word	0x0800fb78
 800a5b8:	0800fb74 	.word	0x0800fb74
 800a5bc:	0800fb7c 	.word	0x0800fb7c
 800a5c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	bfa8      	it	ge
 800a5c8:	461a      	movge	r2, r3
 800a5ca:	2a00      	cmp	r2, #0
 800a5cc:	4691      	mov	r9, r2
 800a5ce:	dc37      	bgt.n	800a640 <_printf_float+0x374>
 800a5d0:	f04f 0b00 	mov.w	fp, #0
 800a5d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5d8:	f104 021a 	add.w	r2, r4, #26
 800a5dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a5de:	9305      	str	r3, [sp, #20]
 800a5e0:	eba3 0309 	sub.w	r3, r3, r9
 800a5e4:	455b      	cmp	r3, fp
 800a5e6:	dc33      	bgt.n	800a650 <_printf_float+0x384>
 800a5e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	db3b      	blt.n	800a668 <_printf_float+0x39c>
 800a5f0:	6823      	ldr	r3, [r4, #0]
 800a5f2:	07da      	lsls	r2, r3, #31
 800a5f4:	d438      	bmi.n	800a668 <_printf_float+0x39c>
 800a5f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5f8:	9a05      	ldr	r2, [sp, #20]
 800a5fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5fc:	1a9a      	subs	r2, r3, r2
 800a5fe:	eba3 0901 	sub.w	r9, r3, r1
 800a602:	4591      	cmp	r9, r2
 800a604:	bfa8      	it	ge
 800a606:	4691      	movge	r9, r2
 800a608:	f1b9 0f00 	cmp.w	r9, #0
 800a60c:	dc35      	bgt.n	800a67a <_printf_float+0x3ae>
 800a60e:	f04f 0800 	mov.w	r8, #0
 800a612:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a616:	f104 0a1a 	add.w	sl, r4, #26
 800a61a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a61e:	1a9b      	subs	r3, r3, r2
 800a620:	eba3 0309 	sub.w	r3, r3, r9
 800a624:	4543      	cmp	r3, r8
 800a626:	f77f af79 	ble.w	800a51c <_printf_float+0x250>
 800a62a:	2301      	movs	r3, #1
 800a62c:	4652      	mov	r2, sl
 800a62e:	4631      	mov	r1, r6
 800a630:	4628      	mov	r0, r5
 800a632:	47b8      	blx	r7
 800a634:	3001      	adds	r0, #1
 800a636:	f43f aeaa 	beq.w	800a38e <_printf_float+0xc2>
 800a63a:	f108 0801 	add.w	r8, r8, #1
 800a63e:	e7ec      	b.n	800a61a <_printf_float+0x34e>
 800a640:	4613      	mov	r3, r2
 800a642:	4631      	mov	r1, r6
 800a644:	4642      	mov	r2, r8
 800a646:	4628      	mov	r0, r5
 800a648:	47b8      	blx	r7
 800a64a:	3001      	adds	r0, #1
 800a64c:	d1c0      	bne.n	800a5d0 <_printf_float+0x304>
 800a64e:	e69e      	b.n	800a38e <_printf_float+0xc2>
 800a650:	2301      	movs	r3, #1
 800a652:	4631      	mov	r1, r6
 800a654:	4628      	mov	r0, r5
 800a656:	9205      	str	r2, [sp, #20]
 800a658:	47b8      	blx	r7
 800a65a:	3001      	adds	r0, #1
 800a65c:	f43f ae97 	beq.w	800a38e <_printf_float+0xc2>
 800a660:	9a05      	ldr	r2, [sp, #20]
 800a662:	f10b 0b01 	add.w	fp, fp, #1
 800a666:	e7b9      	b.n	800a5dc <_printf_float+0x310>
 800a668:	ee18 3a10 	vmov	r3, s16
 800a66c:	4652      	mov	r2, sl
 800a66e:	4631      	mov	r1, r6
 800a670:	4628      	mov	r0, r5
 800a672:	47b8      	blx	r7
 800a674:	3001      	adds	r0, #1
 800a676:	d1be      	bne.n	800a5f6 <_printf_float+0x32a>
 800a678:	e689      	b.n	800a38e <_printf_float+0xc2>
 800a67a:	9a05      	ldr	r2, [sp, #20]
 800a67c:	464b      	mov	r3, r9
 800a67e:	4442      	add	r2, r8
 800a680:	4631      	mov	r1, r6
 800a682:	4628      	mov	r0, r5
 800a684:	47b8      	blx	r7
 800a686:	3001      	adds	r0, #1
 800a688:	d1c1      	bne.n	800a60e <_printf_float+0x342>
 800a68a:	e680      	b.n	800a38e <_printf_float+0xc2>
 800a68c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a68e:	2a01      	cmp	r2, #1
 800a690:	dc01      	bgt.n	800a696 <_printf_float+0x3ca>
 800a692:	07db      	lsls	r3, r3, #31
 800a694:	d538      	bpl.n	800a708 <_printf_float+0x43c>
 800a696:	2301      	movs	r3, #1
 800a698:	4642      	mov	r2, r8
 800a69a:	4631      	mov	r1, r6
 800a69c:	4628      	mov	r0, r5
 800a69e:	47b8      	blx	r7
 800a6a0:	3001      	adds	r0, #1
 800a6a2:	f43f ae74 	beq.w	800a38e <_printf_float+0xc2>
 800a6a6:	ee18 3a10 	vmov	r3, s16
 800a6aa:	4652      	mov	r2, sl
 800a6ac:	4631      	mov	r1, r6
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	47b8      	blx	r7
 800a6b2:	3001      	adds	r0, #1
 800a6b4:	f43f ae6b 	beq.w	800a38e <_printf_float+0xc2>
 800a6b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a6bc:	2200      	movs	r2, #0
 800a6be:	2300      	movs	r3, #0
 800a6c0:	f7f6 fa0a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6c4:	b9d8      	cbnz	r0, 800a6fe <_printf_float+0x432>
 800a6c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6c8:	f108 0201 	add.w	r2, r8, #1
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	4631      	mov	r1, r6
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	47b8      	blx	r7
 800a6d4:	3001      	adds	r0, #1
 800a6d6:	d10e      	bne.n	800a6f6 <_printf_float+0x42a>
 800a6d8:	e659      	b.n	800a38e <_printf_float+0xc2>
 800a6da:	2301      	movs	r3, #1
 800a6dc:	4652      	mov	r2, sl
 800a6de:	4631      	mov	r1, r6
 800a6e0:	4628      	mov	r0, r5
 800a6e2:	47b8      	blx	r7
 800a6e4:	3001      	adds	r0, #1
 800a6e6:	f43f ae52 	beq.w	800a38e <_printf_float+0xc2>
 800a6ea:	f108 0801 	add.w	r8, r8, #1
 800a6ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	4543      	cmp	r3, r8
 800a6f4:	dcf1      	bgt.n	800a6da <_printf_float+0x40e>
 800a6f6:	464b      	mov	r3, r9
 800a6f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a6fc:	e6dc      	b.n	800a4b8 <_printf_float+0x1ec>
 800a6fe:	f04f 0800 	mov.w	r8, #0
 800a702:	f104 0a1a 	add.w	sl, r4, #26
 800a706:	e7f2      	b.n	800a6ee <_printf_float+0x422>
 800a708:	2301      	movs	r3, #1
 800a70a:	4642      	mov	r2, r8
 800a70c:	e7df      	b.n	800a6ce <_printf_float+0x402>
 800a70e:	2301      	movs	r3, #1
 800a710:	464a      	mov	r2, r9
 800a712:	4631      	mov	r1, r6
 800a714:	4628      	mov	r0, r5
 800a716:	47b8      	blx	r7
 800a718:	3001      	adds	r0, #1
 800a71a:	f43f ae38 	beq.w	800a38e <_printf_float+0xc2>
 800a71e:	f108 0801 	add.w	r8, r8, #1
 800a722:	68e3      	ldr	r3, [r4, #12]
 800a724:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a726:	1a5b      	subs	r3, r3, r1
 800a728:	4543      	cmp	r3, r8
 800a72a:	dcf0      	bgt.n	800a70e <_printf_float+0x442>
 800a72c:	e6fa      	b.n	800a524 <_printf_float+0x258>
 800a72e:	f04f 0800 	mov.w	r8, #0
 800a732:	f104 0919 	add.w	r9, r4, #25
 800a736:	e7f4      	b.n	800a722 <_printf_float+0x456>

0800a738 <_printf_common>:
 800a738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a73c:	4616      	mov	r6, r2
 800a73e:	4699      	mov	r9, r3
 800a740:	688a      	ldr	r2, [r1, #8]
 800a742:	690b      	ldr	r3, [r1, #16]
 800a744:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a748:	4293      	cmp	r3, r2
 800a74a:	bfb8      	it	lt
 800a74c:	4613      	movlt	r3, r2
 800a74e:	6033      	str	r3, [r6, #0]
 800a750:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a754:	4607      	mov	r7, r0
 800a756:	460c      	mov	r4, r1
 800a758:	b10a      	cbz	r2, 800a75e <_printf_common+0x26>
 800a75a:	3301      	adds	r3, #1
 800a75c:	6033      	str	r3, [r6, #0]
 800a75e:	6823      	ldr	r3, [r4, #0]
 800a760:	0699      	lsls	r1, r3, #26
 800a762:	bf42      	ittt	mi
 800a764:	6833      	ldrmi	r3, [r6, #0]
 800a766:	3302      	addmi	r3, #2
 800a768:	6033      	strmi	r3, [r6, #0]
 800a76a:	6825      	ldr	r5, [r4, #0]
 800a76c:	f015 0506 	ands.w	r5, r5, #6
 800a770:	d106      	bne.n	800a780 <_printf_common+0x48>
 800a772:	f104 0a19 	add.w	sl, r4, #25
 800a776:	68e3      	ldr	r3, [r4, #12]
 800a778:	6832      	ldr	r2, [r6, #0]
 800a77a:	1a9b      	subs	r3, r3, r2
 800a77c:	42ab      	cmp	r3, r5
 800a77e:	dc26      	bgt.n	800a7ce <_printf_common+0x96>
 800a780:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a784:	1e13      	subs	r3, r2, #0
 800a786:	6822      	ldr	r2, [r4, #0]
 800a788:	bf18      	it	ne
 800a78a:	2301      	movne	r3, #1
 800a78c:	0692      	lsls	r2, r2, #26
 800a78e:	d42b      	bmi.n	800a7e8 <_printf_common+0xb0>
 800a790:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a794:	4649      	mov	r1, r9
 800a796:	4638      	mov	r0, r7
 800a798:	47c0      	blx	r8
 800a79a:	3001      	adds	r0, #1
 800a79c:	d01e      	beq.n	800a7dc <_printf_common+0xa4>
 800a79e:	6823      	ldr	r3, [r4, #0]
 800a7a0:	68e5      	ldr	r5, [r4, #12]
 800a7a2:	6832      	ldr	r2, [r6, #0]
 800a7a4:	f003 0306 	and.w	r3, r3, #6
 800a7a8:	2b04      	cmp	r3, #4
 800a7aa:	bf08      	it	eq
 800a7ac:	1aad      	subeq	r5, r5, r2
 800a7ae:	68a3      	ldr	r3, [r4, #8]
 800a7b0:	6922      	ldr	r2, [r4, #16]
 800a7b2:	bf0c      	ite	eq
 800a7b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7b8:	2500      	movne	r5, #0
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	bfc4      	itt	gt
 800a7be:	1a9b      	subgt	r3, r3, r2
 800a7c0:	18ed      	addgt	r5, r5, r3
 800a7c2:	2600      	movs	r6, #0
 800a7c4:	341a      	adds	r4, #26
 800a7c6:	42b5      	cmp	r5, r6
 800a7c8:	d11a      	bne.n	800a800 <_printf_common+0xc8>
 800a7ca:	2000      	movs	r0, #0
 800a7cc:	e008      	b.n	800a7e0 <_printf_common+0xa8>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	4652      	mov	r2, sl
 800a7d2:	4649      	mov	r1, r9
 800a7d4:	4638      	mov	r0, r7
 800a7d6:	47c0      	blx	r8
 800a7d8:	3001      	adds	r0, #1
 800a7da:	d103      	bne.n	800a7e4 <_printf_common+0xac>
 800a7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7e4:	3501      	adds	r5, #1
 800a7e6:	e7c6      	b.n	800a776 <_printf_common+0x3e>
 800a7e8:	18e1      	adds	r1, r4, r3
 800a7ea:	1c5a      	adds	r2, r3, #1
 800a7ec:	2030      	movs	r0, #48	; 0x30
 800a7ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a7f2:	4422      	add	r2, r4
 800a7f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a7f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a7fc:	3302      	adds	r3, #2
 800a7fe:	e7c7      	b.n	800a790 <_printf_common+0x58>
 800a800:	2301      	movs	r3, #1
 800a802:	4622      	mov	r2, r4
 800a804:	4649      	mov	r1, r9
 800a806:	4638      	mov	r0, r7
 800a808:	47c0      	blx	r8
 800a80a:	3001      	adds	r0, #1
 800a80c:	d0e6      	beq.n	800a7dc <_printf_common+0xa4>
 800a80e:	3601      	adds	r6, #1
 800a810:	e7d9      	b.n	800a7c6 <_printf_common+0x8e>
	...

0800a814 <_printf_i>:
 800a814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a818:	7e0f      	ldrb	r7, [r1, #24]
 800a81a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a81c:	2f78      	cmp	r7, #120	; 0x78
 800a81e:	4691      	mov	r9, r2
 800a820:	4680      	mov	r8, r0
 800a822:	460c      	mov	r4, r1
 800a824:	469a      	mov	sl, r3
 800a826:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a82a:	d807      	bhi.n	800a83c <_printf_i+0x28>
 800a82c:	2f62      	cmp	r7, #98	; 0x62
 800a82e:	d80a      	bhi.n	800a846 <_printf_i+0x32>
 800a830:	2f00      	cmp	r7, #0
 800a832:	f000 80d8 	beq.w	800a9e6 <_printf_i+0x1d2>
 800a836:	2f58      	cmp	r7, #88	; 0x58
 800a838:	f000 80a3 	beq.w	800a982 <_printf_i+0x16e>
 800a83c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a840:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a844:	e03a      	b.n	800a8bc <_printf_i+0xa8>
 800a846:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a84a:	2b15      	cmp	r3, #21
 800a84c:	d8f6      	bhi.n	800a83c <_printf_i+0x28>
 800a84e:	a101      	add	r1, pc, #4	; (adr r1, 800a854 <_printf_i+0x40>)
 800a850:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a854:	0800a8ad 	.word	0x0800a8ad
 800a858:	0800a8c1 	.word	0x0800a8c1
 800a85c:	0800a83d 	.word	0x0800a83d
 800a860:	0800a83d 	.word	0x0800a83d
 800a864:	0800a83d 	.word	0x0800a83d
 800a868:	0800a83d 	.word	0x0800a83d
 800a86c:	0800a8c1 	.word	0x0800a8c1
 800a870:	0800a83d 	.word	0x0800a83d
 800a874:	0800a83d 	.word	0x0800a83d
 800a878:	0800a83d 	.word	0x0800a83d
 800a87c:	0800a83d 	.word	0x0800a83d
 800a880:	0800a9cd 	.word	0x0800a9cd
 800a884:	0800a8f1 	.word	0x0800a8f1
 800a888:	0800a9af 	.word	0x0800a9af
 800a88c:	0800a83d 	.word	0x0800a83d
 800a890:	0800a83d 	.word	0x0800a83d
 800a894:	0800a9ef 	.word	0x0800a9ef
 800a898:	0800a83d 	.word	0x0800a83d
 800a89c:	0800a8f1 	.word	0x0800a8f1
 800a8a0:	0800a83d 	.word	0x0800a83d
 800a8a4:	0800a83d 	.word	0x0800a83d
 800a8a8:	0800a9b7 	.word	0x0800a9b7
 800a8ac:	682b      	ldr	r3, [r5, #0]
 800a8ae:	1d1a      	adds	r2, r3, #4
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	602a      	str	r2, [r5, #0]
 800a8b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e0a3      	b.n	800aa08 <_printf_i+0x1f4>
 800a8c0:	6820      	ldr	r0, [r4, #0]
 800a8c2:	6829      	ldr	r1, [r5, #0]
 800a8c4:	0606      	lsls	r6, r0, #24
 800a8c6:	f101 0304 	add.w	r3, r1, #4
 800a8ca:	d50a      	bpl.n	800a8e2 <_printf_i+0xce>
 800a8cc:	680e      	ldr	r6, [r1, #0]
 800a8ce:	602b      	str	r3, [r5, #0]
 800a8d0:	2e00      	cmp	r6, #0
 800a8d2:	da03      	bge.n	800a8dc <_printf_i+0xc8>
 800a8d4:	232d      	movs	r3, #45	; 0x2d
 800a8d6:	4276      	negs	r6, r6
 800a8d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8dc:	485e      	ldr	r0, [pc, #376]	; (800aa58 <_printf_i+0x244>)
 800a8de:	230a      	movs	r3, #10
 800a8e0:	e019      	b.n	800a916 <_printf_i+0x102>
 800a8e2:	680e      	ldr	r6, [r1, #0]
 800a8e4:	602b      	str	r3, [r5, #0]
 800a8e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a8ea:	bf18      	it	ne
 800a8ec:	b236      	sxthne	r6, r6
 800a8ee:	e7ef      	b.n	800a8d0 <_printf_i+0xbc>
 800a8f0:	682b      	ldr	r3, [r5, #0]
 800a8f2:	6820      	ldr	r0, [r4, #0]
 800a8f4:	1d19      	adds	r1, r3, #4
 800a8f6:	6029      	str	r1, [r5, #0]
 800a8f8:	0601      	lsls	r1, r0, #24
 800a8fa:	d501      	bpl.n	800a900 <_printf_i+0xec>
 800a8fc:	681e      	ldr	r6, [r3, #0]
 800a8fe:	e002      	b.n	800a906 <_printf_i+0xf2>
 800a900:	0646      	lsls	r6, r0, #25
 800a902:	d5fb      	bpl.n	800a8fc <_printf_i+0xe8>
 800a904:	881e      	ldrh	r6, [r3, #0]
 800a906:	4854      	ldr	r0, [pc, #336]	; (800aa58 <_printf_i+0x244>)
 800a908:	2f6f      	cmp	r7, #111	; 0x6f
 800a90a:	bf0c      	ite	eq
 800a90c:	2308      	moveq	r3, #8
 800a90e:	230a      	movne	r3, #10
 800a910:	2100      	movs	r1, #0
 800a912:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a916:	6865      	ldr	r5, [r4, #4]
 800a918:	60a5      	str	r5, [r4, #8]
 800a91a:	2d00      	cmp	r5, #0
 800a91c:	bfa2      	ittt	ge
 800a91e:	6821      	ldrge	r1, [r4, #0]
 800a920:	f021 0104 	bicge.w	r1, r1, #4
 800a924:	6021      	strge	r1, [r4, #0]
 800a926:	b90e      	cbnz	r6, 800a92c <_printf_i+0x118>
 800a928:	2d00      	cmp	r5, #0
 800a92a:	d04d      	beq.n	800a9c8 <_printf_i+0x1b4>
 800a92c:	4615      	mov	r5, r2
 800a92e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a932:	fb03 6711 	mls	r7, r3, r1, r6
 800a936:	5dc7      	ldrb	r7, [r0, r7]
 800a938:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a93c:	4637      	mov	r7, r6
 800a93e:	42bb      	cmp	r3, r7
 800a940:	460e      	mov	r6, r1
 800a942:	d9f4      	bls.n	800a92e <_printf_i+0x11a>
 800a944:	2b08      	cmp	r3, #8
 800a946:	d10b      	bne.n	800a960 <_printf_i+0x14c>
 800a948:	6823      	ldr	r3, [r4, #0]
 800a94a:	07de      	lsls	r6, r3, #31
 800a94c:	d508      	bpl.n	800a960 <_printf_i+0x14c>
 800a94e:	6923      	ldr	r3, [r4, #16]
 800a950:	6861      	ldr	r1, [r4, #4]
 800a952:	4299      	cmp	r1, r3
 800a954:	bfde      	ittt	le
 800a956:	2330      	movle	r3, #48	; 0x30
 800a958:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a95c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a960:	1b52      	subs	r2, r2, r5
 800a962:	6122      	str	r2, [r4, #16]
 800a964:	f8cd a000 	str.w	sl, [sp]
 800a968:	464b      	mov	r3, r9
 800a96a:	aa03      	add	r2, sp, #12
 800a96c:	4621      	mov	r1, r4
 800a96e:	4640      	mov	r0, r8
 800a970:	f7ff fee2 	bl	800a738 <_printf_common>
 800a974:	3001      	adds	r0, #1
 800a976:	d14c      	bne.n	800aa12 <_printf_i+0x1fe>
 800a978:	f04f 30ff 	mov.w	r0, #4294967295
 800a97c:	b004      	add	sp, #16
 800a97e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a982:	4835      	ldr	r0, [pc, #212]	; (800aa58 <_printf_i+0x244>)
 800a984:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a988:	6829      	ldr	r1, [r5, #0]
 800a98a:	6823      	ldr	r3, [r4, #0]
 800a98c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a990:	6029      	str	r1, [r5, #0]
 800a992:	061d      	lsls	r5, r3, #24
 800a994:	d514      	bpl.n	800a9c0 <_printf_i+0x1ac>
 800a996:	07df      	lsls	r7, r3, #31
 800a998:	bf44      	itt	mi
 800a99a:	f043 0320 	orrmi.w	r3, r3, #32
 800a99e:	6023      	strmi	r3, [r4, #0]
 800a9a0:	b91e      	cbnz	r6, 800a9aa <_printf_i+0x196>
 800a9a2:	6823      	ldr	r3, [r4, #0]
 800a9a4:	f023 0320 	bic.w	r3, r3, #32
 800a9a8:	6023      	str	r3, [r4, #0]
 800a9aa:	2310      	movs	r3, #16
 800a9ac:	e7b0      	b.n	800a910 <_printf_i+0xfc>
 800a9ae:	6823      	ldr	r3, [r4, #0]
 800a9b0:	f043 0320 	orr.w	r3, r3, #32
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	2378      	movs	r3, #120	; 0x78
 800a9b8:	4828      	ldr	r0, [pc, #160]	; (800aa5c <_printf_i+0x248>)
 800a9ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a9be:	e7e3      	b.n	800a988 <_printf_i+0x174>
 800a9c0:	0659      	lsls	r1, r3, #25
 800a9c2:	bf48      	it	mi
 800a9c4:	b2b6      	uxthmi	r6, r6
 800a9c6:	e7e6      	b.n	800a996 <_printf_i+0x182>
 800a9c8:	4615      	mov	r5, r2
 800a9ca:	e7bb      	b.n	800a944 <_printf_i+0x130>
 800a9cc:	682b      	ldr	r3, [r5, #0]
 800a9ce:	6826      	ldr	r6, [r4, #0]
 800a9d0:	6961      	ldr	r1, [r4, #20]
 800a9d2:	1d18      	adds	r0, r3, #4
 800a9d4:	6028      	str	r0, [r5, #0]
 800a9d6:	0635      	lsls	r5, r6, #24
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	d501      	bpl.n	800a9e0 <_printf_i+0x1cc>
 800a9dc:	6019      	str	r1, [r3, #0]
 800a9de:	e002      	b.n	800a9e6 <_printf_i+0x1d2>
 800a9e0:	0670      	lsls	r0, r6, #25
 800a9e2:	d5fb      	bpl.n	800a9dc <_printf_i+0x1c8>
 800a9e4:	8019      	strh	r1, [r3, #0]
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	6123      	str	r3, [r4, #16]
 800a9ea:	4615      	mov	r5, r2
 800a9ec:	e7ba      	b.n	800a964 <_printf_i+0x150>
 800a9ee:	682b      	ldr	r3, [r5, #0]
 800a9f0:	1d1a      	adds	r2, r3, #4
 800a9f2:	602a      	str	r2, [r5, #0]
 800a9f4:	681d      	ldr	r5, [r3, #0]
 800a9f6:	6862      	ldr	r2, [r4, #4]
 800a9f8:	2100      	movs	r1, #0
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	f7f5 fbf8 	bl	80001f0 <memchr>
 800aa00:	b108      	cbz	r0, 800aa06 <_printf_i+0x1f2>
 800aa02:	1b40      	subs	r0, r0, r5
 800aa04:	6060      	str	r0, [r4, #4]
 800aa06:	6863      	ldr	r3, [r4, #4]
 800aa08:	6123      	str	r3, [r4, #16]
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa10:	e7a8      	b.n	800a964 <_printf_i+0x150>
 800aa12:	6923      	ldr	r3, [r4, #16]
 800aa14:	462a      	mov	r2, r5
 800aa16:	4649      	mov	r1, r9
 800aa18:	4640      	mov	r0, r8
 800aa1a:	47d0      	blx	sl
 800aa1c:	3001      	adds	r0, #1
 800aa1e:	d0ab      	beq.n	800a978 <_printf_i+0x164>
 800aa20:	6823      	ldr	r3, [r4, #0]
 800aa22:	079b      	lsls	r3, r3, #30
 800aa24:	d413      	bmi.n	800aa4e <_printf_i+0x23a>
 800aa26:	68e0      	ldr	r0, [r4, #12]
 800aa28:	9b03      	ldr	r3, [sp, #12]
 800aa2a:	4298      	cmp	r0, r3
 800aa2c:	bfb8      	it	lt
 800aa2e:	4618      	movlt	r0, r3
 800aa30:	e7a4      	b.n	800a97c <_printf_i+0x168>
 800aa32:	2301      	movs	r3, #1
 800aa34:	4632      	mov	r2, r6
 800aa36:	4649      	mov	r1, r9
 800aa38:	4640      	mov	r0, r8
 800aa3a:	47d0      	blx	sl
 800aa3c:	3001      	adds	r0, #1
 800aa3e:	d09b      	beq.n	800a978 <_printf_i+0x164>
 800aa40:	3501      	adds	r5, #1
 800aa42:	68e3      	ldr	r3, [r4, #12]
 800aa44:	9903      	ldr	r1, [sp, #12]
 800aa46:	1a5b      	subs	r3, r3, r1
 800aa48:	42ab      	cmp	r3, r5
 800aa4a:	dcf2      	bgt.n	800aa32 <_printf_i+0x21e>
 800aa4c:	e7eb      	b.n	800aa26 <_printf_i+0x212>
 800aa4e:	2500      	movs	r5, #0
 800aa50:	f104 0619 	add.w	r6, r4, #25
 800aa54:	e7f5      	b.n	800aa42 <_printf_i+0x22e>
 800aa56:	bf00      	nop
 800aa58:	0800fb7e 	.word	0x0800fb7e
 800aa5c:	0800fb8f 	.word	0x0800fb8f

0800aa60 <_sbrk_r>:
 800aa60:	b538      	push	{r3, r4, r5, lr}
 800aa62:	4d06      	ldr	r5, [pc, #24]	; (800aa7c <_sbrk_r+0x1c>)
 800aa64:	2300      	movs	r3, #0
 800aa66:	4604      	mov	r4, r0
 800aa68:	4608      	mov	r0, r1
 800aa6a:	602b      	str	r3, [r5, #0]
 800aa6c:	f7fa fd74 	bl	8005558 <_sbrk>
 800aa70:	1c43      	adds	r3, r0, #1
 800aa72:	d102      	bne.n	800aa7a <_sbrk_r+0x1a>
 800aa74:	682b      	ldr	r3, [r5, #0]
 800aa76:	b103      	cbz	r3, 800aa7a <_sbrk_r+0x1a>
 800aa78:	6023      	str	r3, [r4, #0]
 800aa7a:	bd38      	pop	{r3, r4, r5, pc}
 800aa7c:	20002ef0 	.word	0x20002ef0

0800aa80 <siprintf>:
 800aa80:	b40e      	push	{r1, r2, r3}
 800aa82:	b500      	push	{lr}
 800aa84:	b09c      	sub	sp, #112	; 0x70
 800aa86:	ab1d      	add	r3, sp, #116	; 0x74
 800aa88:	9002      	str	r0, [sp, #8]
 800aa8a:	9006      	str	r0, [sp, #24]
 800aa8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aa90:	4809      	ldr	r0, [pc, #36]	; (800aab8 <siprintf+0x38>)
 800aa92:	9107      	str	r1, [sp, #28]
 800aa94:	9104      	str	r1, [sp, #16]
 800aa96:	4909      	ldr	r1, [pc, #36]	; (800aabc <siprintf+0x3c>)
 800aa98:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa9c:	9105      	str	r1, [sp, #20]
 800aa9e:	6800      	ldr	r0, [r0, #0]
 800aaa0:	9301      	str	r3, [sp, #4]
 800aaa2:	a902      	add	r1, sp, #8
 800aaa4:	f003 fa92 	bl	800dfcc <_svfiprintf_r>
 800aaa8:	9b02      	ldr	r3, [sp, #8]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	701a      	strb	r2, [r3, #0]
 800aaae:	b01c      	add	sp, #112	; 0x70
 800aab0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aab4:	b003      	add	sp, #12
 800aab6:	4770      	bx	lr
 800aab8:	200000c4 	.word	0x200000c4
 800aabc:	ffff0208 	.word	0xffff0208

0800aac0 <__sread>:
 800aac0:	b510      	push	{r4, lr}
 800aac2:	460c      	mov	r4, r1
 800aac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aac8:	f003 fcda 	bl	800e480 <_read_r>
 800aacc:	2800      	cmp	r0, #0
 800aace:	bfab      	itete	ge
 800aad0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aad2:	89a3      	ldrhlt	r3, [r4, #12]
 800aad4:	181b      	addge	r3, r3, r0
 800aad6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aada:	bfac      	ite	ge
 800aadc:	6563      	strge	r3, [r4, #84]	; 0x54
 800aade:	81a3      	strhlt	r3, [r4, #12]
 800aae0:	bd10      	pop	{r4, pc}

0800aae2 <__swrite>:
 800aae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aae6:	461f      	mov	r7, r3
 800aae8:	898b      	ldrh	r3, [r1, #12]
 800aaea:	05db      	lsls	r3, r3, #23
 800aaec:	4605      	mov	r5, r0
 800aaee:	460c      	mov	r4, r1
 800aaf0:	4616      	mov	r6, r2
 800aaf2:	d505      	bpl.n	800ab00 <__swrite+0x1e>
 800aaf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaf8:	2302      	movs	r3, #2
 800aafa:	2200      	movs	r2, #0
 800aafc:	f002 fc9e 	bl	800d43c <_lseek_r>
 800ab00:	89a3      	ldrh	r3, [r4, #12]
 800ab02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab0a:	81a3      	strh	r3, [r4, #12]
 800ab0c:	4632      	mov	r2, r6
 800ab0e:	463b      	mov	r3, r7
 800ab10:	4628      	mov	r0, r5
 800ab12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab16:	f001 b827 	b.w	800bb68 <_write_r>

0800ab1a <__sseek>:
 800ab1a:	b510      	push	{r4, lr}
 800ab1c:	460c      	mov	r4, r1
 800ab1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab22:	f002 fc8b 	bl	800d43c <_lseek_r>
 800ab26:	1c43      	adds	r3, r0, #1
 800ab28:	89a3      	ldrh	r3, [r4, #12]
 800ab2a:	bf15      	itete	ne
 800ab2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab36:	81a3      	strheq	r3, [r4, #12]
 800ab38:	bf18      	it	ne
 800ab3a:	81a3      	strhne	r3, [r4, #12]
 800ab3c:	bd10      	pop	{r4, pc}

0800ab3e <__sclose>:
 800ab3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab42:	f001 b8af 	b.w	800bca4 <_close_r>

0800ab46 <strncmp>:
 800ab46:	b510      	push	{r4, lr}
 800ab48:	b17a      	cbz	r2, 800ab6a <strncmp+0x24>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	3901      	subs	r1, #1
 800ab4e:	1884      	adds	r4, r0, r2
 800ab50:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ab54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ab58:	4290      	cmp	r0, r2
 800ab5a:	d101      	bne.n	800ab60 <strncmp+0x1a>
 800ab5c:	42a3      	cmp	r3, r4
 800ab5e:	d101      	bne.n	800ab64 <strncmp+0x1e>
 800ab60:	1a80      	subs	r0, r0, r2
 800ab62:	bd10      	pop	{r4, pc}
 800ab64:	2800      	cmp	r0, #0
 800ab66:	d1f3      	bne.n	800ab50 <strncmp+0xa>
 800ab68:	e7fa      	b.n	800ab60 <strncmp+0x1a>
 800ab6a:	4610      	mov	r0, r2
 800ab6c:	e7f9      	b.n	800ab62 <strncmp+0x1c>

0800ab6e <sulp>:
 800ab6e:	b570      	push	{r4, r5, r6, lr}
 800ab70:	4604      	mov	r4, r0
 800ab72:	460d      	mov	r5, r1
 800ab74:	ec45 4b10 	vmov	d0, r4, r5
 800ab78:	4616      	mov	r6, r2
 800ab7a:	f003 f867 	bl	800dc4c <__ulp>
 800ab7e:	ec51 0b10 	vmov	r0, r1, d0
 800ab82:	b17e      	cbz	r6, 800aba4 <sulp+0x36>
 800ab84:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ab88:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	dd09      	ble.n	800aba4 <sulp+0x36>
 800ab90:	051b      	lsls	r3, r3, #20
 800ab92:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ab96:	2400      	movs	r4, #0
 800ab98:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ab9c:	4622      	mov	r2, r4
 800ab9e:	462b      	mov	r3, r5
 800aba0:	f7f5 fd32 	bl	8000608 <__aeabi_dmul>
 800aba4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aba8 <_strtod_l>:
 800aba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abac:	ed2d 8b02 	vpush	{d8}
 800abb0:	b09d      	sub	sp, #116	; 0x74
 800abb2:	461f      	mov	r7, r3
 800abb4:	2300      	movs	r3, #0
 800abb6:	9318      	str	r3, [sp, #96]	; 0x60
 800abb8:	4ba2      	ldr	r3, [pc, #648]	; (800ae44 <_strtod_l+0x29c>)
 800abba:	9213      	str	r2, [sp, #76]	; 0x4c
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	9305      	str	r3, [sp, #20]
 800abc0:	4604      	mov	r4, r0
 800abc2:	4618      	mov	r0, r3
 800abc4:	4688      	mov	r8, r1
 800abc6:	f7f5 fb0b 	bl	80001e0 <strlen>
 800abca:	f04f 0a00 	mov.w	sl, #0
 800abce:	4605      	mov	r5, r0
 800abd0:	f04f 0b00 	mov.w	fp, #0
 800abd4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800abd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abda:	781a      	ldrb	r2, [r3, #0]
 800abdc:	2a2b      	cmp	r2, #43	; 0x2b
 800abde:	d04e      	beq.n	800ac7e <_strtod_l+0xd6>
 800abe0:	d83b      	bhi.n	800ac5a <_strtod_l+0xb2>
 800abe2:	2a0d      	cmp	r2, #13
 800abe4:	d834      	bhi.n	800ac50 <_strtod_l+0xa8>
 800abe6:	2a08      	cmp	r2, #8
 800abe8:	d834      	bhi.n	800ac54 <_strtod_l+0xac>
 800abea:	2a00      	cmp	r2, #0
 800abec:	d03e      	beq.n	800ac6c <_strtod_l+0xc4>
 800abee:	2300      	movs	r3, #0
 800abf0:	930a      	str	r3, [sp, #40]	; 0x28
 800abf2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800abf4:	7833      	ldrb	r3, [r6, #0]
 800abf6:	2b30      	cmp	r3, #48	; 0x30
 800abf8:	f040 80b0 	bne.w	800ad5c <_strtod_l+0x1b4>
 800abfc:	7873      	ldrb	r3, [r6, #1]
 800abfe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ac02:	2b58      	cmp	r3, #88	; 0x58
 800ac04:	d168      	bne.n	800acd8 <_strtod_l+0x130>
 800ac06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac08:	9301      	str	r3, [sp, #4]
 800ac0a:	ab18      	add	r3, sp, #96	; 0x60
 800ac0c:	9702      	str	r7, [sp, #8]
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	4a8d      	ldr	r2, [pc, #564]	; (800ae48 <_strtod_l+0x2a0>)
 800ac12:	ab19      	add	r3, sp, #100	; 0x64
 800ac14:	a917      	add	r1, sp, #92	; 0x5c
 800ac16:	4620      	mov	r0, r4
 800ac18:	f002 f900 	bl	800ce1c <__gethex>
 800ac1c:	f010 0707 	ands.w	r7, r0, #7
 800ac20:	4605      	mov	r5, r0
 800ac22:	d005      	beq.n	800ac30 <_strtod_l+0x88>
 800ac24:	2f06      	cmp	r7, #6
 800ac26:	d12c      	bne.n	800ac82 <_strtod_l+0xda>
 800ac28:	3601      	adds	r6, #1
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	9617      	str	r6, [sp, #92]	; 0x5c
 800ac2e:	930a      	str	r3, [sp, #40]	; 0x28
 800ac30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	f040 8590 	bne.w	800b758 <_strtod_l+0xbb0>
 800ac38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac3a:	b1eb      	cbz	r3, 800ac78 <_strtod_l+0xd0>
 800ac3c:	4652      	mov	r2, sl
 800ac3e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ac42:	ec43 2b10 	vmov	d0, r2, r3
 800ac46:	b01d      	add	sp, #116	; 0x74
 800ac48:	ecbd 8b02 	vpop	{d8}
 800ac4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac50:	2a20      	cmp	r2, #32
 800ac52:	d1cc      	bne.n	800abee <_strtod_l+0x46>
 800ac54:	3301      	adds	r3, #1
 800ac56:	9317      	str	r3, [sp, #92]	; 0x5c
 800ac58:	e7be      	b.n	800abd8 <_strtod_l+0x30>
 800ac5a:	2a2d      	cmp	r2, #45	; 0x2d
 800ac5c:	d1c7      	bne.n	800abee <_strtod_l+0x46>
 800ac5e:	2201      	movs	r2, #1
 800ac60:	920a      	str	r2, [sp, #40]	; 0x28
 800ac62:	1c5a      	adds	r2, r3, #1
 800ac64:	9217      	str	r2, [sp, #92]	; 0x5c
 800ac66:	785b      	ldrb	r3, [r3, #1]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d1c2      	bne.n	800abf2 <_strtod_l+0x4a>
 800ac6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ac6e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f040 856e 	bne.w	800b754 <_strtod_l+0xbac>
 800ac78:	4652      	mov	r2, sl
 800ac7a:	465b      	mov	r3, fp
 800ac7c:	e7e1      	b.n	800ac42 <_strtod_l+0x9a>
 800ac7e:	2200      	movs	r2, #0
 800ac80:	e7ee      	b.n	800ac60 <_strtod_l+0xb8>
 800ac82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ac84:	b13a      	cbz	r2, 800ac96 <_strtod_l+0xee>
 800ac86:	2135      	movs	r1, #53	; 0x35
 800ac88:	a81a      	add	r0, sp, #104	; 0x68
 800ac8a:	f003 f8ea 	bl	800de62 <__copybits>
 800ac8e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ac90:	4620      	mov	r0, r4
 800ac92:	f002 fca9 	bl	800d5e8 <_Bfree>
 800ac96:	3f01      	subs	r7, #1
 800ac98:	2f04      	cmp	r7, #4
 800ac9a:	d806      	bhi.n	800acaa <_strtod_l+0x102>
 800ac9c:	e8df f007 	tbb	[pc, r7]
 800aca0:	1714030a 	.word	0x1714030a
 800aca4:	0a          	.byte	0x0a
 800aca5:	00          	.byte	0x00
 800aca6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800acaa:	0728      	lsls	r0, r5, #28
 800acac:	d5c0      	bpl.n	800ac30 <_strtod_l+0x88>
 800acae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800acb2:	e7bd      	b.n	800ac30 <_strtod_l+0x88>
 800acb4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800acb8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800acba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800acbe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800acc2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800acc6:	e7f0      	b.n	800acaa <_strtod_l+0x102>
 800acc8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800ae4c <_strtod_l+0x2a4>
 800accc:	e7ed      	b.n	800acaa <_strtod_l+0x102>
 800acce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800acd2:	f04f 3aff 	mov.w	sl, #4294967295
 800acd6:	e7e8      	b.n	800acaa <_strtod_l+0x102>
 800acd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acda:	1c5a      	adds	r2, r3, #1
 800acdc:	9217      	str	r2, [sp, #92]	; 0x5c
 800acde:	785b      	ldrb	r3, [r3, #1]
 800ace0:	2b30      	cmp	r3, #48	; 0x30
 800ace2:	d0f9      	beq.n	800acd8 <_strtod_l+0x130>
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d0a3      	beq.n	800ac30 <_strtod_l+0x88>
 800ace8:	2301      	movs	r3, #1
 800acea:	f04f 0900 	mov.w	r9, #0
 800acee:	9304      	str	r3, [sp, #16]
 800acf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acf2:	9308      	str	r3, [sp, #32]
 800acf4:	f8cd 901c 	str.w	r9, [sp, #28]
 800acf8:	464f      	mov	r7, r9
 800acfa:	220a      	movs	r2, #10
 800acfc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800acfe:	7806      	ldrb	r6, [r0, #0]
 800ad00:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ad04:	b2d9      	uxtb	r1, r3
 800ad06:	2909      	cmp	r1, #9
 800ad08:	d92a      	bls.n	800ad60 <_strtod_l+0x1b8>
 800ad0a:	9905      	ldr	r1, [sp, #20]
 800ad0c:	462a      	mov	r2, r5
 800ad0e:	f7ff ff1a 	bl	800ab46 <strncmp>
 800ad12:	b398      	cbz	r0, 800ad7c <_strtod_l+0x1d4>
 800ad14:	2000      	movs	r0, #0
 800ad16:	4632      	mov	r2, r6
 800ad18:	463d      	mov	r5, r7
 800ad1a:	9005      	str	r0, [sp, #20]
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	2a65      	cmp	r2, #101	; 0x65
 800ad20:	d001      	beq.n	800ad26 <_strtod_l+0x17e>
 800ad22:	2a45      	cmp	r2, #69	; 0x45
 800ad24:	d118      	bne.n	800ad58 <_strtod_l+0x1b0>
 800ad26:	b91d      	cbnz	r5, 800ad30 <_strtod_l+0x188>
 800ad28:	9a04      	ldr	r2, [sp, #16]
 800ad2a:	4302      	orrs	r2, r0
 800ad2c:	d09e      	beq.n	800ac6c <_strtod_l+0xc4>
 800ad2e:	2500      	movs	r5, #0
 800ad30:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ad34:	f108 0201 	add.w	r2, r8, #1
 800ad38:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad3a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ad3e:	2a2b      	cmp	r2, #43	; 0x2b
 800ad40:	d075      	beq.n	800ae2e <_strtod_l+0x286>
 800ad42:	2a2d      	cmp	r2, #45	; 0x2d
 800ad44:	d07b      	beq.n	800ae3e <_strtod_l+0x296>
 800ad46:	f04f 0c00 	mov.w	ip, #0
 800ad4a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ad4e:	2909      	cmp	r1, #9
 800ad50:	f240 8082 	bls.w	800ae58 <_strtod_l+0x2b0>
 800ad54:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ad58:	2600      	movs	r6, #0
 800ad5a:	e09d      	b.n	800ae98 <_strtod_l+0x2f0>
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	e7c4      	b.n	800acea <_strtod_l+0x142>
 800ad60:	2f08      	cmp	r7, #8
 800ad62:	bfd8      	it	le
 800ad64:	9907      	ldrle	r1, [sp, #28]
 800ad66:	f100 0001 	add.w	r0, r0, #1
 800ad6a:	bfda      	itte	le
 800ad6c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ad70:	9307      	strle	r3, [sp, #28]
 800ad72:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ad76:	3701      	adds	r7, #1
 800ad78:	9017      	str	r0, [sp, #92]	; 0x5c
 800ad7a:	e7bf      	b.n	800acfc <_strtod_l+0x154>
 800ad7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad7e:	195a      	adds	r2, r3, r5
 800ad80:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad82:	5d5a      	ldrb	r2, [r3, r5]
 800ad84:	2f00      	cmp	r7, #0
 800ad86:	d037      	beq.n	800adf8 <_strtod_l+0x250>
 800ad88:	9005      	str	r0, [sp, #20]
 800ad8a:	463d      	mov	r5, r7
 800ad8c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ad90:	2b09      	cmp	r3, #9
 800ad92:	d912      	bls.n	800adba <_strtod_l+0x212>
 800ad94:	2301      	movs	r3, #1
 800ad96:	e7c2      	b.n	800ad1e <_strtod_l+0x176>
 800ad98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad9a:	1c5a      	adds	r2, r3, #1
 800ad9c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad9e:	785a      	ldrb	r2, [r3, #1]
 800ada0:	3001      	adds	r0, #1
 800ada2:	2a30      	cmp	r2, #48	; 0x30
 800ada4:	d0f8      	beq.n	800ad98 <_strtod_l+0x1f0>
 800ada6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800adaa:	2b08      	cmp	r3, #8
 800adac:	f200 84d9 	bhi.w	800b762 <_strtod_l+0xbba>
 800adb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800adb2:	9005      	str	r0, [sp, #20]
 800adb4:	2000      	movs	r0, #0
 800adb6:	9308      	str	r3, [sp, #32]
 800adb8:	4605      	mov	r5, r0
 800adba:	3a30      	subs	r2, #48	; 0x30
 800adbc:	f100 0301 	add.w	r3, r0, #1
 800adc0:	d014      	beq.n	800adec <_strtod_l+0x244>
 800adc2:	9905      	ldr	r1, [sp, #20]
 800adc4:	4419      	add	r1, r3
 800adc6:	9105      	str	r1, [sp, #20]
 800adc8:	462b      	mov	r3, r5
 800adca:	eb00 0e05 	add.w	lr, r0, r5
 800adce:	210a      	movs	r1, #10
 800add0:	4573      	cmp	r3, lr
 800add2:	d113      	bne.n	800adfc <_strtod_l+0x254>
 800add4:	182b      	adds	r3, r5, r0
 800add6:	2b08      	cmp	r3, #8
 800add8:	f105 0501 	add.w	r5, r5, #1
 800addc:	4405      	add	r5, r0
 800adde:	dc1c      	bgt.n	800ae1a <_strtod_l+0x272>
 800ade0:	9907      	ldr	r1, [sp, #28]
 800ade2:	230a      	movs	r3, #10
 800ade4:	fb03 2301 	mla	r3, r3, r1, r2
 800ade8:	9307      	str	r3, [sp, #28]
 800adea:	2300      	movs	r3, #0
 800adec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800adee:	1c51      	adds	r1, r2, #1
 800adf0:	9117      	str	r1, [sp, #92]	; 0x5c
 800adf2:	7852      	ldrb	r2, [r2, #1]
 800adf4:	4618      	mov	r0, r3
 800adf6:	e7c9      	b.n	800ad8c <_strtod_l+0x1e4>
 800adf8:	4638      	mov	r0, r7
 800adfa:	e7d2      	b.n	800ada2 <_strtod_l+0x1fa>
 800adfc:	2b08      	cmp	r3, #8
 800adfe:	dc04      	bgt.n	800ae0a <_strtod_l+0x262>
 800ae00:	9e07      	ldr	r6, [sp, #28]
 800ae02:	434e      	muls	r6, r1
 800ae04:	9607      	str	r6, [sp, #28]
 800ae06:	3301      	adds	r3, #1
 800ae08:	e7e2      	b.n	800add0 <_strtod_l+0x228>
 800ae0a:	f103 0c01 	add.w	ip, r3, #1
 800ae0e:	f1bc 0f10 	cmp.w	ip, #16
 800ae12:	bfd8      	it	le
 800ae14:	fb01 f909 	mulle.w	r9, r1, r9
 800ae18:	e7f5      	b.n	800ae06 <_strtod_l+0x25e>
 800ae1a:	2d10      	cmp	r5, #16
 800ae1c:	bfdc      	itt	le
 800ae1e:	230a      	movle	r3, #10
 800ae20:	fb03 2909 	mlale	r9, r3, r9, r2
 800ae24:	e7e1      	b.n	800adea <_strtod_l+0x242>
 800ae26:	2300      	movs	r3, #0
 800ae28:	9305      	str	r3, [sp, #20]
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e77c      	b.n	800ad28 <_strtod_l+0x180>
 800ae2e:	f04f 0c00 	mov.w	ip, #0
 800ae32:	f108 0202 	add.w	r2, r8, #2
 800ae36:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae38:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ae3c:	e785      	b.n	800ad4a <_strtod_l+0x1a2>
 800ae3e:	f04f 0c01 	mov.w	ip, #1
 800ae42:	e7f6      	b.n	800ae32 <_strtod_l+0x28a>
 800ae44:	0800fd84 	.word	0x0800fd84
 800ae48:	0800fba0 	.word	0x0800fba0
 800ae4c:	7ff00000 	.word	0x7ff00000
 800ae50:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ae52:	1c51      	adds	r1, r2, #1
 800ae54:	9117      	str	r1, [sp, #92]	; 0x5c
 800ae56:	7852      	ldrb	r2, [r2, #1]
 800ae58:	2a30      	cmp	r2, #48	; 0x30
 800ae5a:	d0f9      	beq.n	800ae50 <_strtod_l+0x2a8>
 800ae5c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ae60:	2908      	cmp	r1, #8
 800ae62:	f63f af79 	bhi.w	800ad58 <_strtod_l+0x1b0>
 800ae66:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ae6a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ae6c:	9206      	str	r2, [sp, #24]
 800ae6e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ae70:	1c51      	adds	r1, r2, #1
 800ae72:	9117      	str	r1, [sp, #92]	; 0x5c
 800ae74:	7852      	ldrb	r2, [r2, #1]
 800ae76:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800ae7a:	2e09      	cmp	r6, #9
 800ae7c:	d937      	bls.n	800aeee <_strtod_l+0x346>
 800ae7e:	9e06      	ldr	r6, [sp, #24]
 800ae80:	1b89      	subs	r1, r1, r6
 800ae82:	2908      	cmp	r1, #8
 800ae84:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ae88:	dc02      	bgt.n	800ae90 <_strtod_l+0x2e8>
 800ae8a:	4576      	cmp	r6, lr
 800ae8c:	bfa8      	it	ge
 800ae8e:	4676      	movge	r6, lr
 800ae90:	f1bc 0f00 	cmp.w	ip, #0
 800ae94:	d000      	beq.n	800ae98 <_strtod_l+0x2f0>
 800ae96:	4276      	negs	r6, r6
 800ae98:	2d00      	cmp	r5, #0
 800ae9a:	d14d      	bne.n	800af38 <_strtod_l+0x390>
 800ae9c:	9904      	ldr	r1, [sp, #16]
 800ae9e:	4301      	orrs	r1, r0
 800aea0:	f47f aec6 	bne.w	800ac30 <_strtod_l+0x88>
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f47f aee1 	bne.w	800ac6c <_strtod_l+0xc4>
 800aeaa:	2a69      	cmp	r2, #105	; 0x69
 800aeac:	d027      	beq.n	800aefe <_strtod_l+0x356>
 800aeae:	dc24      	bgt.n	800aefa <_strtod_l+0x352>
 800aeb0:	2a49      	cmp	r2, #73	; 0x49
 800aeb2:	d024      	beq.n	800aefe <_strtod_l+0x356>
 800aeb4:	2a4e      	cmp	r2, #78	; 0x4e
 800aeb6:	f47f aed9 	bne.w	800ac6c <_strtod_l+0xc4>
 800aeba:	499f      	ldr	r1, [pc, #636]	; (800b138 <_strtod_l+0x590>)
 800aebc:	a817      	add	r0, sp, #92	; 0x5c
 800aebe:	f002 fa05 	bl	800d2cc <__match>
 800aec2:	2800      	cmp	r0, #0
 800aec4:	f43f aed2 	beq.w	800ac6c <_strtod_l+0xc4>
 800aec8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	2b28      	cmp	r3, #40	; 0x28
 800aece:	d12d      	bne.n	800af2c <_strtod_l+0x384>
 800aed0:	499a      	ldr	r1, [pc, #616]	; (800b13c <_strtod_l+0x594>)
 800aed2:	aa1a      	add	r2, sp, #104	; 0x68
 800aed4:	a817      	add	r0, sp, #92	; 0x5c
 800aed6:	f002 fa0d 	bl	800d2f4 <__hexnan>
 800aeda:	2805      	cmp	r0, #5
 800aedc:	d126      	bne.n	800af2c <_strtod_l+0x384>
 800aede:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aee0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800aee4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800aee8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800aeec:	e6a0      	b.n	800ac30 <_strtod_l+0x88>
 800aeee:	210a      	movs	r1, #10
 800aef0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800aef4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800aef8:	e7b9      	b.n	800ae6e <_strtod_l+0x2c6>
 800aefa:	2a6e      	cmp	r2, #110	; 0x6e
 800aefc:	e7db      	b.n	800aeb6 <_strtod_l+0x30e>
 800aefe:	4990      	ldr	r1, [pc, #576]	; (800b140 <_strtod_l+0x598>)
 800af00:	a817      	add	r0, sp, #92	; 0x5c
 800af02:	f002 f9e3 	bl	800d2cc <__match>
 800af06:	2800      	cmp	r0, #0
 800af08:	f43f aeb0 	beq.w	800ac6c <_strtod_l+0xc4>
 800af0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af0e:	498d      	ldr	r1, [pc, #564]	; (800b144 <_strtod_l+0x59c>)
 800af10:	3b01      	subs	r3, #1
 800af12:	a817      	add	r0, sp, #92	; 0x5c
 800af14:	9317      	str	r3, [sp, #92]	; 0x5c
 800af16:	f002 f9d9 	bl	800d2cc <__match>
 800af1a:	b910      	cbnz	r0, 800af22 <_strtod_l+0x37a>
 800af1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af1e:	3301      	adds	r3, #1
 800af20:	9317      	str	r3, [sp, #92]	; 0x5c
 800af22:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b154 <_strtod_l+0x5ac>
 800af26:	f04f 0a00 	mov.w	sl, #0
 800af2a:	e681      	b.n	800ac30 <_strtod_l+0x88>
 800af2c:	4886      	ldr	r0, [pc, #536]	; (800b148 <_strtod_l+0x5a0>)
 800af2e:	f003 fabb 	bl	800e4a8 <nan>
 800af32:	ec5b ab10 	vmov	sl, fp, d0
 800af36:	e67b      	b.n	800ac30 <_strtod_l+0x88>
 800af38:	9b05      	ldr	r3, [sp, #20]
 800af3a:	9807      	ldr	r0, [sp, #28]
 800af3c:	1af3      	subs	r3, r6, r3
 800af3e:	2f00      	cmp	r7, #0
 800af40:	bf08      	it	eq
 800af42:	462f      	moveq	r7, r5
 800af44:	2d10      	cmp	r5, #16
 800af46:	9306      	str	r3, [sp, #24]
 800af48:	46a8      	mov	r8, r5
 800af4a:	bfa8      	it	ge
 800af4c:	f04f 0810 	movge.w	r8, #16
 800af50:	f7f5 fae0 	bl	8000514 <__aeabi_ui2d>
 800af54:	2d09      	cmp	r5, #9
 800af56:	4682      	mov	sl, r0
 800af58:	468b      	mov	fp, r1
 800af5a:	dd13      	ble.n	800af84 <_strtod_l+0x3dc>
 800af5c:	4b7b      	ldr	r3, [pc, #492]	; (800b14c <_strtod_l+0x5a4>)
 800af5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800af62:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800af66:	f7f5 fb4f 	bl	8000608 <__aeabi_dmul>
 800af6a:	4682      	mov	sl, r0
 800af6c:	4648      	mov	r0, r9
 800af6e:	468b      	mov	fp, r1
 800af70:	f7f5 fad0 	bl	8000514 <__aeabi_ui2d>
 800af74:	4602      	mov	r2, r0
 800af76:	460b      	mov	r3, r1
 800af78:	4650      	mov	r0, sl
 800af7a:	4659      	mov	r1, fp
 800af7c:	f7f5 f98e 	bl	800029c <__adddf3>
 800af80:	4682      	mov	sl, r0
 800af82:	468b      	mov	fp, r1
 800af84:	2d0f      	cmp	r5, #15
 800af86:	dc38      	bgt.n	800affa <_strtod_l+0x452>
 800af88:	9b06      	ldr	r3, [sp, #24]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	f43f ae50 	beq.w	800ac30 <_strtod_l+0x88>
 800af90:	dd24      	ble.n	800afdc <_strtod_l+0x434>
 800af92:	2b16      	cmp	r3, #22
 800af94:	dc0b      	bgt.n	800afae <_strtod_l+0x406>
 800af96:	496d      	ldr	r1, [pc, #436]	; (800b14c <_strtod_l+0x5a4>)
 800af98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afa0:	4652      	mov	r2, sl
 800afa2:	465b      	mov	r3, fp
 800afa4:	f7f5 fb30 	bl	8000608 <__aeabi_dmul>
 800afa8:	4682      	mov	sl, r0
 800afaa:	468b      	mov	fp, r1
 800afac:	e640      	b.n	800ac30 <_strtod_l+0x88>
 800afae:	9a06      	ldr	r2, [sp, #24]
 800afb0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800afb4:	4293      	cmp	r3, r2
 800afb6:	db20      	blt.n	800affa <_strtod_l+0x452>
 800afb8:	4c64      	ldr	r4, [pc, #400]	; (800b14c <_strtod_l+0x5a4>)
 800afba:	f1c5 050f 	rsb	r5, r5, #15
 800afbe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800afc2:	4652      	mov	r2, sl
 800afc4:	465b      	mov	r3, fp
 800afc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afca:	f7f5 fb1d 	bl	8000608 <__aeabi_dmul>
 800afce:	9b06      	ldr	r3, [sp, #24]
 800afd0:	1b5d      	subs	r5, r3, r5
 800afd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800afd6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800afda:	e7e3      	b.n	800afa4 <_strtod_l+0x3fc>
 800afdc:	9b06      	ldr	r3, [sp, #24]
 800afde:	3316      	adds	r3, #22
 800afe0:	db0b      	blt.n	800affa <_strtod_l+0x452>
 800afe2:	9b05      	ldr	r3, [sp, #20]
 800afe4:	1b9e      	subs	r6, r3, r6
 800afe6:	4b59      	ldr	r3, [pc, #356]	; (800b14c <_strtod_l+0x5a4>)
 800afe8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800afec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aff0:	4650      	mov	r0, sl
 800aff2:	4659      	mov	r1, fp
 800aff4:	f7f5 fc32 	bl	800085c <__aeabi_ddiv>
 800aff8:	e7d6      	b.n	800afa8 <_strtod_l+0x400>
 800affa:	9b06      	ldr	r3, [sp, #24]
 800affc:	eba5 0808 	sub.w	r8, r5, r8
 800b000:	4498      	add	r8, r3
 800b002:	f1b8 0f00 	cmp.w	r8, #0
 800b006:	dd74      	ble.n	800b0f2 <_strtod_l+0x54a>
 800b008:	f018 030f 	ands.w	r3, r8, #15
 800b00c:	d00a      	beq.n	800b024 <_strtod_l+0x47c>
 800b00e:	494f      	ldr	r1, [pc, #316]	; (800b14c <_strtod_l+0x5a4>)
 800b010:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b014:	4652      	mov	r2, sl
 800b016:	465b      	mov	r3, fp
 800b018:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b01c:	f7f5 faf4 	bl	8000608 <__aeabi_dmul>
 800b020:	4682      	mov	sl, r0
 800b022:	468b      	mov	fp, r1
 800b024:	f038 080f 	bics.w	r8, r8, #15
 800b028:	d04f      	beq.n	800b0ca <_strtod_l+0x522>
 800b02a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b02e:	dd22      	ble.n	800b076 <_strtod_l+0x4ce>
 800b030:	2500      	movs	r5, #0
 800b032:	462e      	mov	r6, r5
 800b034:	9507      	str	r5, [sp, #28]
 800b036:	9505      	str	r5, [sp, #20]
 800b038:	2322      	movs	r3, #34	; 0x22
 800b03a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b154 <_strtod_l+0x5ac>
 800b03e:	6023      	str	r3, [r4, #0]
 800b040:	f04f 0a00 	mov.w	sl, #0
 800b044:	9b07      	ldr	r3, [sp, #28]
 800b046:	2b00      	cmp	r3, #0
 800b048:	f43f adf2 	beq.w	800ac30 <_strtod_l+0x88>
 800b04c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b04e:	4620      	mov	r0, r4
 800b050:	f002 faca 	bl	800d5e8 <_Bfree>
 800b054:	9905      	ldr	r1, [sp, #20]
 800b056:	4620      	mov	r0, r4
 800b058:	f002 fac6 	bl	800d5e8 <_Bfree>
 800b05c:	4631      	mov	r1, r6
 800b05e:	4620      	mov	r0, r4
 800b060:	f002 fac2 	bl	800d5e8 <_Bfree>
 800b064:	9907      	ldr	r1, [sp, #28]
 800b066:	4620      	mov	r0, r4
 800b068:	f002 fabe 	bl	800d5e8 <_Bfree>
 800b06c:	4629      	mov	r1, r5
 800b06e:	4620      	mov	r0, r4
 800b070:	f002 faba 	bl	800d5e8 <_Bfree>
 800b074:	e5dc      	b.n	800ac30 <_strtod_l+0x88>
 800b076:	4b36      	ldr	r3, [pc, #216]	; (800b150 <_strtod_l+0x5a8>)
 800b078:	9304      	str	r3, [sp, #16]
 800b07a:	2300      	movs	r3, #0
 800b07c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b080:	4650      	mov	r0, sl
 800b082:	4659      	mov	r1, fp
 800b084:	4699      	mov	r9, r3
 800b086:	f1b8 0f01 	cmp.w	r8, #1
 800b08a:	dc21      	bgt.n	800b0d0 <_strtod_l+0x528>
 800b08c:	b10b      	cbz	r3, 800b092 <_strtod_l+0x4ea>
 800b08e:	4682      	mov	sl, r0
 800b090:	468b      	mov	fp, r1
 800b092:	4b2f      	ldr	r3, [pc, #188]	; (800b150 <_strtod_l+0x5a8>)
 800b094:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b098:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b09c:	4652      	mov	r2, sl
 800b09e:	465b      	mov	r3, fp
 800b0a0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b0a4:	f7f5 fab0 	bl	8000608 <__aeabi_dmul>
 800b0a8:	4b2a      	ldr	r3, [pc, #168]	; (800b154 <_strtod_l+0x5ac>)
 800b0aa:	460a      	mov	r2, r1
 800b0ac:	400b      	ands	r3, r1
 800b0ae:	492a      	ldr	r1, [pc, #168]	; (800b158 <_strtod_l+0x5b0>)
 800b0b0:	428b      	cmp	r3, r1
 800b0b2:	4682      	mov	sl, r0
 800b0b4:	d8bc      	bhi.n	800b030 <_strtod_l+0x488>
 800b0b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b0ba:	428b      	cmp	r3, r1
 800b0bc:	bf86      	itte	hi
 800b0be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b15c <_strtod_l+0x5b4>
 800b0c2:	f04f 3aff 	movhi.w	sl, #4294967295
 800b0c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	9304      	str	r3, [sp, #16]
 800b0ce:	e084      	b.n	800b1da <_strtod_l+0x632>
 800b0d0:	f018 0f01 	tst.w	r8, #1
 800b0d4:	d005      	beq.n	800b0e2 <_strtod_l+0x53a>
 800b0d6:	9b04      	ldr	r3, [sp, #16]
 800b0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0dc:	f7f5 fa94 	bl	8000608 <__aeabi_dmul>
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	9a04      	ldr	r2, [sp, #16]
 800b0e4:	3208      	adds	r2, #8
 800b0e6:	f109 0901 	add.w	r9, r9, #1
 800b0ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b0ee:	9204      	str	r2, [sp, #16]
 800b0f0:	e7c9      	b.n	800b086 <_strtod_l+0x4de>
 800b0f2:	d0ea      	beq.n	800b0ca <_strtod_l+0x522>
 800b0f4:	f1c8 0800 	rsb	r8, r8, #0
 800b0f8:	f018 020f 	ands.w	r2, r8, #15
 800b0fc:	d00a      	beq.n	800b114 <_strtod_l+0x56c>
 800b0fe:	4b13      	ldr	r3, [pc, #76]	; (800b14c <_strtod_l+0x5a4>)
 800b100:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b104:	4650      	mov	r0, sl
 800b106:	4659      	mov	r1, fp
 800b108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10c:	f7f5 fba6 	bl	800085c <__aeabi_ddiv>
 800b110:	4682      	mov	sl, r0
 800b112:	468b      	mov	fp, r1
 800b114:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b118:	d0d7      	beq.n	800b0ca <_strtod_l+0x522>
 800b11a:	f1b8 0f1f 	cmp.w	r8, #31
 800b11e:	dd1f      	ble.n	800b160 <_strtod_l+0x5b8>
 800b120:	2500      	movs	r5, #0
 800b122:	462e      	mov	r6, r5
 800b124:	9507      	str	r5, [sp, #28]
 800b126:	9505      	str	r5, [sp, #20]
 800b128:	2322      	movs	r3, #34	; 0x22
 800b12a:	f04f 0a00 	mov.w	sl, #0
 800b12e:	f04f 0b00 	mov.w	fp, #0
 800b132:	6023      	str	r3, [r4, #0]
 800b134:	e786      	b.n	800b044 <_strtod_l+0x49c>
 800b136:	bf00      	nop
 800b138:	0800fb79 	.word	0x0800fb79
 800b13c:	0800fbb4 	.word	0x0800fbb4
 800b140:	0800fb71 	.word	0x0800fb71
 800b144:	0800fc2f 	.word	0x0800fc2f
 800b148:	0800fc2b 	.word	0x0800fc2b
 800b14c:	0800fe20 	.word	0x0800fe20
 800b150:	0800fdf8 	.word	0x0800fdf8
 800b154:	7ff00000 	.word	0x7ff00000
 800b158:	7ca00000 	.word	0x7ca00000
 800b15c:	7fefffff 	.word	0x7fefffff
 800b160:	f018 0310 	ands.w	r3, r8, #16
 800b164:	bf18      	it	ne
 800b166:	236a      	movne	r3, #106	; 0x6a
 800b168:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b518 <_strtod_l+0x970>
 800b16c:	9304      	str	r3, [sp, #16]
 800b16e:	4650      	mov	r0, sl
 800b170:	4659      	mov	r1, fp
 800b172:	2300      	movs	r3, #0
 800b174:	f018 0f01 	tst.w	r8, #1
 800b178:	d004      	beq.n	800b184 <_strtod_l+0x5dc>
 800b17a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b17e:	f7f5 fa43 	bl	8000608 <__aeabi_dmul>
 800b182:	2301      	movs	r3, #1
 800b184:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b188:	f109 0908 	add.w	r9, r9, #8
 800b18c:	d1f2      	bne.n	800b174 <_strtod_l+0x5cc>
 800b18e:	b10b      	cbz	r3, 800b194 <_strtod_l+0x5ec>
 800b190:	4682      	mov	sl, r0
 800b192:	468b      	mov	fp, r1
 800b194:	9b04      	ldr	r3, [sp, #16]
 800b196:	b1c3      	cbz	r3, 800b1ca <_strtod_l+0x622>
 800b198:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b19c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	4659      	mov	r1, fp
 800b1a4:	dd11      	ble.n	800b1ca <_strtod_l+0x622>
 800b1a6:	2b1f      	cmp	r3, #31
 800b1a8:	f340 8124 	ble.w	800b3f4 <_strtod_l+0x84c>
 800b1ac:	2b34      	cmp	r3, #52	; 0x34
 800b1ae:	bfde      	ittt	le
 800b1b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b1b4:	f04f 33ff 	movle.w	r3, #4294967295
 800b1b8:	fa03 f202 	lslle.w	r2, r3, r2
 800b1bc:	f04f 0a00 	mov.w	sl, #0
 800b1c0:	bfcc      	ite	gt
 800b1c2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b1c6:	ea02 0b01 	andle.w	fp, r2, r1
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	4650      	mov	r0, sl
 800b1d0:	4659      	mov	r1, fp
 800b1d2:	f7f5 fc81 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	d1a2      	bne.n	800b120 <_strtod_l+0x578>
 800b1da:	9b07      	ldr	r3, [sp, #28]
 800b1dc:	9300      	str	r3, [sp, #0]
 800b1de:	9908      	ldr	r1, [sp, #32]
 800b1e0:	462b      	mov	r3, r5
 800b1e2:	463a      	mov	r2, r7
 800b1e4:	4620      	mov	r0, r4
 800b1e6:	f002 fa67 	bl	800d6b8 <__s2b>
 800b1ea:	9007      	str	r0, [sp, #28]
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	f43f af1f 	beq.w	800b030 <_strtod_l+0x488>
 800b1f2:	9b05      	ldr	r3, [sp, #20]
 800b1f4:	1b9e      	subs	r6, r3, r6
 800b1f6:	9b06      	ldr	r3, [sp, #24]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	bfb4      	ite	lt
 800b1fc:	4633      	movlt	r3, r6
 800b1fe:	2300      	movge	r3, #0
 800b200:	930c      	str	r3, [sp, #48]	; 0x30
 800b202:	9b06      	ldr	r3, [sp, #24]
 800b204:	2500      	movs	r5, #0
 800b206:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b20a:	9312      	str	r3, [sp, #72]	; 0x48
 800b20c:	462e      	mov	r6, r5
 800b20e:	9b07      	ldr	r3, [sp, #28]
 800b210:	4620      	mov	r0, r4
 800b212:	6859      	ldr	r1, [r3, #4]
 800b214:	f002 f9a8 	bl	800d568 <_Balloc>
 800b218:	9005      	str	r0, [sp, #20]
 800b21a:	2800      	cmp	r0, #0
 800b21c:	f43f af0c 	beq.w	800b038 <_strtod_l+0x490>
 800b220:	9b07      	ldr	r3, [sp, #28]
 800b222:	691a      	ldr	r2, [r3, #16]
 800b224:	3202      	adds	r2, #2
 800b226:	f103 010c 	add.w	r1, r3, #12
 800b22a:	0092      	lsls	r2, r2, #2
 800b22c:	300c      	adds	r0, #12
 800b22e:	f7fe feb7 	bl	8009fa0 <memcpy>
 800b232:	ec4b ab10 	vmov	d0, sl, fp
 800b236:	aa1a      	add	r2, sp, #104	; 0x68
 800b238:	a919      	add	r1, sp, #100	; 0x64
 800b23a:	4620      	mov	r0, r4
 800b23c:	f002 fd82 	bl	800dd44 <__d2b>
 800b240:	ec4b ab18 	vmov	d8, sl, fp
 800b244:	9018      	str	r0, [sp, #96]	; 0x60
 800b246:	2800      	cmp	r0, #0
 800b248:	f43f aef6 	beq.w	800b038 <_strtod_l+0x490>
 800b24c:	2101      	movs	r1, #1
 800b24e:	4620      	mov	r0, r4
 800b250:	f002 facc 	bl	800d7ec <__i2b>
 800b254:	4606      	mov	r6, r0
 800b256:	2800      	cmp	r0, #0
 800b258:	f43f aeee 	beq.w	800b038 <_strtod_l+0x490>
 800b25c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b25e:	9904      	ldr	r1, [sp, #16]
 800b260:	2b00      	cmp	r3, #0
 800b262:	bfab      	itete	ge
 800b264:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b266:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b268:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b26a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b26e:	bfac      	ite	ge
 800b270:	eb03 0902 	addge.w	r9, r3, r2
 800b274:	1ad7      	sublt	r7, r2, r3
 800b276:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b278:	eba3 0801 	sub.w	r8, r3, r1
 800b27c:	4490      	add	r8, r2
 800b27e:	4ba1      	ldr	r3, [pc, #644]	; (800b504 <_strtod_l+0x95c>)
 800b280:	f108 38ff 	add.w	r8, r8, #4294967295
 800b284:	4598      	cmp	r8, r3
 800b286:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b28a:	f280 80c7 	bge.w	800b41c <_strtod_l+0x874>
 800b28e:	eba3 0308 	sub.w	r3, r3, r8
 800b292:	2b1f      	cmp	r3, #31
 800b294:	eba2 0203 	sub.w	r2, r2, r3
 800b298:	f04f 0101 	mov.w	r1, #1
 800b29c:	f300 80b1 	bgt.w	800b402 <_strtod_l+0x85a>
 800b2a0:	fa01 f303 	lsl.w	r3, r1, r3
 800b2a4:	930d      	str	r3, [sp, #52]	; 0x34
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	9308      	str	r3, [sp, #32]
 800b2aa:	eb09 0802 	add.w	r8, r9, r2
 800b2ae:	9b04      	ldr	r3, [sp, #16]
 800b2b0:	45c1      	cmp	r9, r8
 800b2b2:	4417      	add	r7, r2
 800b2b4:	441f      	add	r7, r3
 800b2b6:	464b      	mov	r3, r9
 800b2b8:	bfa8      	it	ge
 800b2ba:	4643      	movge	r3, r8
 800b2bc:	42bb      	cmp	r3, r7
 800b2be:	bfa8      	it	ge
 800b2c0:	463b      	movge	r3, r7
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	bfc2      	ittt	gt
 800b2c6:	eba8 0803 	subgt.w	r8, r8, r3
 800b2ca:	1aff      	subgt	r7, r7, r3
 800b2cc:	eba9 0903 	subgt.w	r9, r9, r3
 800b2d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	dd17      	ble.n	800b306 <_strtod_l+0x75e>
 800b2d6:	4631      	mov	r1, r6
 800b2d8:	461a      	mov	r2, r3
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f002 fb46 	bl	800d96c <__pow5mult>
 800b2e0:	4606      	mov	r6, r0
 800b2e2:	2800      	cmp	r0, #0
 800b2e4:	f43f aea8 	beq.w	800b038 <_strtod_l+0x490>
 800b2e8:	4601      	mov	r1, r0
 800b2ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	f002 fa93 	bl	800d818 <__multiply>
 800b2f2:	900b      	str	r0, [sp, #44]	; 0x2c
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	f43f ae9f 	beq.w	800b038 <_strtod_l+0x490>
 800b2fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b2fc:	4620      	mov	r0, r4
 800b2fe:	f002 f973 	bl	800d5e8 <_Bfree>
 800b302:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b304:	9318      	str	r3, [sp, #96]	; 0x60
 800b306:	f1b8 0f00 	cmp.w	r8, #0
 800b30a:	f300 808c 	bgt.w	800b426 <_strtod_l+0x87e>
 800b30e:	9b06      	ldr	r3, [sp, #24]
 800b310:	2b00      	cmp	r3, #0
 800b312:	dd08      	ble.n	800b326 <_strtod_l+0x77e>
 800b314:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b316:	9905      	ldr	r1, [sp, #20]
 800b318:	4620      	mov	r0, r4
 800b31a:	f002 fb27 	bl	800d96c <__pow5mult>
 800b31e:	9005      	str	r0, [sp, #20]
 800b320:	2800      	cmp	r0, #0
 800b322:	f43f ae89 	beq.w	800b038 <_strtod_l+0x490>
 800b326:	2f00      	cmp	r7, #0
 800b328:	dd08      	ble.n	800b33c <_strtod_l+0x794>
 800b32a:	9905      	ldr	r1, [sp, #20]
 800b32c:	463a      	mov	r2, r7
 800b32e:	4620      	mov	r0, r4
 800b330:	f002 fb76 	bl	800da20 <__lshift>
 800b334:	9005      	str	r0, [sp, #20]
 800b336:	2800      	cmp	r0, #0
 800b338:	f43f ae7e 	beq.w	800b038 <_strtod_l+0x490>
 800b33c:	f1b9 0f00 	cmp.w	r9, #0
 800b340:	dd08      	ble.n	800b354 <_strtod_l+0x7ac>
 800b342:	4631      	mov	r1, r6
 800b344:	464a      	mov	r2, r9
 800b346:	4620      	mov	r0, r4
 800b348:	f002 fb6a 	bl	800da20 <__lshift>
 800b34c:	4606      	mov	r6, r0
 800b34e:	2800      	cmp	r0, #0
 800b350:	f43f ae72 	beq.w	800b038 <_strtod_l+0x490>
 800b354:	9a05      	ldr	r2, [sp, #20]
 800b356:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b358:	4620      	mov	r0, r4
 800b35a:	f002 fbed 	bl	800db38 <__mdiff>
 800b35e:	4605      	mov	r5, r0
 800b360:	2800      	cmp	r0, #0
 800b362:	f43f ae69 	beq.w	800b038 <_strtod_l+0x490>
 800b366:	68c3      	ldr	r3, [r0, #12]
 800b368:	930b      	str	r3, [sp, #44]	; 0x2c
 800b36a:	2300      	movs	r3, #0
 800b36c:	60c3      	str	r3, [r0, #12]
 800b36e:	4631      	mov	r1, r6
 800b370:	f002 fbc6 	bl	800db00 <__mcmp>
 800b374:	2800      	cmp	r0, #0
 800b376:	da60      	bge.n	800b43a <_strtod_l+0x892>
 800b378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b37a:	ea53 030a 	orrs.w	r3, r3, sl
 800b37e:	f040 8082 	bne.w	800b486 <_strtod_l+0x8de>
 800b382:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b386:	2b00      	cmp	r3, #0
 800b388:	d17d      	bne.n	800b486 <_strtod_l+0x8de>
 800b38a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b38e:	0d1b      	lsrs	r3, r3, #20
 800b390:	051b      	lsls	r3, r3, #20
 800b392:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b396:	d976      	bls.n	800b486 <_strtod_l+0x8de>
 800b398:	696b      	ldr	r3, [r5, #20]
 800b39a:	b913      	cbnz	r3, 800b3a2 <_strtod_l+0x7fa>
 800b39c:	692b      	ldr	r3, [r5, #16]
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	dd71      	ble.n	800b486 <_strtod_l+0x8de>
 800b3a2:	4629      	mov	r1, r5
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	f002 fb3a 	bl	800da20 <__lshift>
 800b3ac:	4631      	mov	r1, r6
 800b3ae:	4605      	mov	r5, r0
 800b3b0:	f002 fba6 	bl	800db00 <__mcmp>
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	dd66      	ble.n	800b486 <_strtod_l+0x8de>
 800b3b8:	9904      	ldr	r1, [sp, #16]
 800b3ba:	4a53      	ldr	r2, [pc, #332]	; (800b508 <_strtod_l+0x960>)
 800b3bc:	465b      	mov	r3, fp
 800b3be:	2900      	cmp	r1, #0
 800b3c0:	f000 8081 	beq.w	800b4c6 <_strtod_l+0x91e>
 800b3c4:	ea02 010b 	and.w	r1, r2, fp
 800b3c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b3cc:	dc7b      	bgt.n	800b4c6 <_strtod_l+0x91e>
 800b3ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b3d2:	f77f aea9 	ble.w	800b128 <_strtod_l+0x580>
 800b3d6:	4b4d      	ldr	r3, [pc, #308]	; (800b50c <_strtod_l+0x964>)
 800b3d8:	4650      	mov	r0, sl
 800b3da:	4659      	mov	r1, fp
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f7f5 f913 	bl	8000608 <__aeabi_dmul>
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	4303      	orrs	r3, r0
 800b3e6:	bf08      	it	eq
 800b3e8:	2322      	moveq	r3, #34	; 0x22
 800b3ea:	4682      	mov	sl, r0
 800b3ec:	468b      	mov	fp, r1
 800b3ee:	bf08      	it	eq
 800b3f0:	6023      	streq	r3, [r4, #0]
 800b3f2:	e62b      	b.n	800b04c <_strtod_l+0x4a4>
 800b3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3fc:	ea03 0a0a 	and.w	sl, r3, sl
 800b400:	e6e3      	b.n	800b1ca <_strtod_l+0x622>
 800b402:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b406:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b40a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b40e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b412:	fa01 f308 	lsl.w	r3, r1, r8
 800b416:	9308      	str	r3, [sp, #32]
 800b418:	910d      	str	r1, [sp, #52]	; 0x34
 800b41a:	e746      	b.n	800b2aa <_strtod_l+0x702>
 800b41c:	2300      	movs	r3, #0
 800b41e:	9308      	str	r3, [sp, #32]
 800b420:	2301      	movs	r3, #1
 800b422:	930d      	str	r3, [sp, #52]	; 0x34
 800b424:	e741      	b.n	800b2aa <_strtod_l+0x702>
 800b426:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b428:	4642      	mov	r2, r8
 800b42a:	4620      	mov	r0, r4
 800b42c:	f002 faf8 	bl	800da20 <__lshift>
 800b430:	9018      	str	r0, [sp, #96]	; 0x60
 800b432:	2800      	cmp	r0, #0
 800b434:	f47f af6b 	bne.w	800b30e <_strtod_l+0x766>
 800b438:	e5fe      	b.n	800b038 <_strtod_l+0x490>
 800b43a:	465f      	mov	r7, fp
 800b43c:	d16e      	bne.n	800b51c <_strtod_l+0x974>
 800b43e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b440:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b444:	b342      	cbz	r2, 800b498 <_strtod_l+0x8f0>
 800b446:	4a32      	ldr	r2, [pc, #200]	; (800b510 <_strtod_l+0x968>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d128      	bne.n	800b49e <_strtod_l+0x8f6>
 800b44c:	9b04      	ldr	r3, [sp, #16]
 800b44e:	4651      	mov	r1, sl
 800b450:	b1eb      	cbz	r3, 800b48e <_strtod_l+0x8e6>
 800b452:	4b2d      	ldr	r3, [pc, #180]	; (800b508 <_strtod_l+0x960>)
 800b454:	403b      	ands	r3, r7
 800b456:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b45a:	f04f 32ff 	mov.w	r2, #4294967295
 800b45e:	d819      	bhi.n	800b494 <_strtod_l+0x8ec>
 800b460:	0d1b      	lsrs	r3, r3, #20
 800b462:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b466:	fa02 f303 	lsl.w	r3, r2, r3
 800b46a:	4299      	cmp	r1, r3
 800b46c:	d117      	bne.n	800b49e <_strtod_l+0x8f6>
 800b46e:	4b29      	ldr	r3, [pc, #164]	; (800b514 <_strtod_l+0x96c>)
 800b470:	429f      	cmp	r7, r3
 800b472:	d102      	bne.n	800b47a <_strtod_l+0x8d2>
 800b474:	3101      	adds	r1, #1
 800b476:	f43f addf 	beq.w	800b038 <_strtod_l+0x490>
 800b47a:	4b23      	ldr	r3, [pc, #140]	; (800b508 <_strtod_l+0x960>)
 800b47c:	403b      	ands	r3, r7
 800b47e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b482:	f04f 0a00 	mov.w	sl, #0
 800b486:	9b04      	ldr	r3, [sp, #16]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d1a4      	bne.n	800b3d6 <_strtod_l+0x82e>
 800b48c:	e5de      	b.n	800b04c <_strtod_l+0x4a4>
 800b48e:	f04f 33ff 	mov.w	r3, #4294967295
 800b492:	e7ea      	b.n	800b46a <_strtod_l+0x8c2>
 800b494:	4613      	mov	r3, r2
 800b496:	e7e8      	b.n	800b46a <_strtod_l+0x8c2>
 800b498:	ea53 030a 	orrs.w	r3, r3, sl
 800b49c:	d08c      	beq.n	800b3b8 <_strtod_l+0x810>
 800b49e:	9b08      	ldr	r3, [sp, #32]
 800b4a0:	b1db      	cbz	r3, 800b4da <_strtod_l+0x932>
 800b4a2:	423b      	tst	r3, r7
 800b4a4:	d0ef      	beq.n	800b486 <_strtod_l+0x8de>
 800b4a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4a8:	9a04      	ldr	r2, [sp, #16]
 800b4aa:	4650      	mov	r0, sl
 800b4ac:	4659      	mov	r1, fp
 800b4ae:	b1c3      	cbz	r3, 800b4e2 <_strtod_l+0x93a>
 800b4b0:	f7ff fb5d 	bl	800ab6e <sulp>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	460b      	mov	r3, r1
 800b4b8:	ec51 0b18 	vmov	r0, r1, d8
 800b4bc:	f7f4 feee 	bl	800029c <__adddf3>
 800b4c0:	4682      	mov	sl, r0
 800b4c2:	468b      	mov	fp, r1
 800b4c4:	e7df      	b.n	800b486 <_strtod_l+0x8de>
 800b4c6:	4013      	ands	r3, r2
 800b4c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b4cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b4d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b4d4:	f04f 3aff 	mov.w	sl, #4294967295
 800b4d8:	e7d5      	b.n	800b486 <_strtod_l+0x8de>
 800b4da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4dc:	ea13 0f0a 	tst.w	r3, sl
 800b4e0:	e7e0      	b.n	800b4a4 <_strtod_l+0x8fc>
 800b4e2:	f7ff fb44 	bl	800ab6e <sulp>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	ec51 0b18 	vmov	r0, r1, d8
 800b4ee:	f7f4 fed3 	bl	8000298 <__aeabi_dsub>
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	4682      	mov	sl, r0
 800b4f8:	468b      	mov	fp, r1
 800b4fa:	f7f5 faed 	bl	8000ad8 <__aeabi_dcmpeq>
 800b4fe:	2800      	cmp	r0, #0
 800b500:	d0c1      	beq.n	800b486 <_strtod_l+0x8de>
 800b502:	e611      	b.n	800b128 <_strtod_l+0x580>
 800b504:	fffffc02 	.word	0xfffffc02
 800b508:	7ff00000 	.word	0x7ff00000
 800b50c:	39500000 	.word	0x39500000
 800b510:	000fffff 	.word	0x000fffff
 800b514:	7fefffff 	.word	0x7fefffff
 800b518:	0800fbc8 	.word	0x0800fbc8
 800b51c:	4631      	mov	r1, r6
 800b51e:	4628      	mov	r0, r5
 800b520:	f002 fc6c 	bl	800ddfc <__ratio>
 800b524:	ec59 8b10 	vmov	r8, r9, d0
 800b528:	ee10 0a10 	vmov	r0, s0
 800b52c:	2200      	movs	r2, #0
 800b52e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b532:	4649      	mov	r1, r9
 800b534:	f7f5 fae4 	bl	8000b00 <__aeabi_dcmple>
 800b538:	2800      	cmp	r0, #0
 800b53a:	d07a      	beq.n	800b632 <_strtod_l+0xa8a>
 800b53c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d04a      	beq.n	800b5d8 <_strtod_l+0xa30>
 800b542:	4b95      	ldr	r3, [pc, #596]	; (800b798 <_strtod_l+0xbf0>)
 800b544:	2200      	movs	r2, #0
 800b546:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b54a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b798 <_strtod_l+0xbf0>
 800b54e:	f04f 0800 	mov.w	r8, #0
 800b552:	4b92      	ldr	r3, [pc, #584]	; (800b79c <_strtod_l+0xbf4>)
 800b554:	403b      	ands	r3, r7
 800b556:	930d      	str	r3, [sp, #52]	; 0x34
 800b558:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b55a:	4b91      	ldr	r3, [pc, #580]	; (800b7a0 <_strtod_l+0xbf8>)
 800b55c:	429a      	cmp	r2, r3
 800b55e:	f040 80b0 	bne.w	800b6c2 <_strtod_l+0xb1a>
 800b562:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b566:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b56a:	ec4b ab10 	vmov	d0, sl, fp
 800b56e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b572:	f002 fb6b 	bl	800dc4c <__ulp>
 800b576:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b57a:	ec53 2b10 	vmov	r2, r3, d0
 800b57e:	f7f5 f843 	bl	8000608 <__aeabi_dmul>
 800b582:	4652      	mov	r2, sl
 800b584:	465b      	mov	r3, fp
 800b586:	f7f4 fe89 	bl	800029c <__adddf3>
 800b58a:	460b      	mov	r3, r1
 800b58c:	4983      	ldr	r1, [pc, #524]	; (800b79c <_strtod_l+0xbf4>)
 800b58e:	4a85      	ldr	r2, [pc, #532]	; (800b7a4 <_strtod_l+0xbfc>)
 800b590:	4019      	ands	r1, r3
 800b592:	4291      	cmp	r1, r2
 800b594:	4682      	mov	sl, r0
 800b596:	d960      	bls.n	800b65a <_strtod_l+0xab2>
 800b598:	ee18 3a90 	vmov	r3, s17
 800b59c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d104      	bne.n	800b5ae <_strtod_l+0xa06>
 800b5a4:	ee18 3a10 	vmov	r3, s16
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	f43f ad45 	beq.w	800b038 <_strtod_l+0x490>
 800b5ae:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b7b0 <_strtod_l+0xc08>
 800b5b2:	f04f 3aff 	mov.w	sl, #4294967295
 800b5b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f002 f815 	bl	800d5e8 <_Bfree>
 800b5be:	9905      	ldr	r1, [sp, #20]
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	f002 f811 	bl	800d5e8 <_Bfree>
 800b5c6:	4631      	mov	r1, r6
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f002 f80d 	bl	800d5e8 <_Bfree>
 800b5ce:	4629      	mov	r1, r5
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	f002 f809 	bl	800d5e8 <_Bfree>
 800b5d6:	e61a      	b.n	800b20e <_strtod_l+0x666>
 800b5d8:	f1ba 0f00 	cmp.w	sl, #0
 800b5dc:	d11b      	bne.n	800b616 <_strtod_l+0xa6e>
 800b5de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b5e2:	b9f3      	cbnz	r3, 800b622 <_strtod_l+0xa7a>
 800b5e4:	4b6c      	ldr	r3, [pc, #432]	; (800b798 <_strtod_l+0xbf0>)
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	4640      	mov	r0, r8
 800b5ea:	4649      	mov	r1, r9
 800b5ec:	f7f5 fa7e 	bl	8000aec <__aeabi_dcmplt>
 800b5f0:	b9d0      	cbnz	r0, 800b628 <_strtod_l+0xa80>
 800b5f2:	4640      	mov	r0, r8
 800b5f4:	4649      	mov	r1, r9
 800b5f6:	4b6c      	ldr	r3, [pc, #432]	; (800b7a8 <_strtod_l+0xc00>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f7f5 f805 	bl	8000608 <__aeabi_dmul>
 800b5fe:	4680      	mov	r8, r0
 800b600:	4689      	mov	r9, r1
 800b602:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b606:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b60a:	9315      	str	r3, [sp, #84]	; 0x54
 800b60c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b610:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b614:	e79d      	b.n	800b552 <_strtod_l+0x9aa>
 800b616:	f1ba 0f01 	cmp.w	sl, #1
 800b61a:	d102      	bne.n	800b622 <_strtod_l+0xa7a>
 800b61c:	2f00      	cmp	r7, #0
 800b61e:	f43f ad83 	beq.w	800b128 <_strtod_l+0x580>
 800b622:	4b62      	ldr	r3, [pc, #392]	; (800b7ac <_strtod_l+0xc04>)
 800b624:	2200      	movs	r2, #0
 800b626:	e78e      	b.n	800b546 <_strtod_l+0x99e>
 800b628:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b7a8 <_strtod_l+0xc00>
 800b62c:	f04f 0800 	mov.w	r8, #0
 800b630:	e7e7      	b.n	800b602 <_strtod_l+0xa5a>
 800b632:	4b5d      	ldr	r3, [pc, #372]	; (800b7a8 <_strtod_l+0xc00>)
 800b634:	4640      	mov	r0, r8
 800b636:	4649      	mov	r1, r9
 800b638:	2200      	movs	r2, #0
 800b63a:	f7f4 ffe5 	bl	8000608 <__aeabi_dmul>
 800b63e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b640:	4680      	mov	r8, r0
 800b642:	4689      	mov	r9, r1
 800b644:	b933      	cbnz	r3, 800b654 <_strtod_l+0xaac>
 800b646:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b64a:	900e      	str	r0, [sp, #56]	; 0x38
 800b64c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b64e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b652:	e7dd      	b.n	800b610 <_strtod_l+0xa68>
 800b654:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b658:	e7f9      	b.n	800b64e <_strtod_l+0xaa6>
 800b65a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b65e:	9b04      	ldr	r3, [sp, #16]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d1a8      	bne.n	800b5b6 <_strtod_l+0xa0e>
 800b664:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b668:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b66a:	0d1b      	lsrs	r3, r3, #20
 800b66c:	051b      	lsls	r3, r3, #20
 800b66e:	429a      	cmp	r2, r3
 800b670:	d1a1      	bne.n	800b5b6 <_strtod_l+0xa0e>
 800b672:	4640      	mov	r0, r8
 800b674:	4649      	mov	r1, r9
 800b676:	f7f5 fb27 	bl	8000cc8 <__aeabi_d2lz>
 800b67a:	f7f4 ff97 	bl	80005ac <__aeabi_l2d>
 800b67e:	4602      	mov	r2, r0
 800b680:	460b      	mov	r3, r1
 800b682:	4640      	mov	r0, r8
 800b684:	4649      	mov	r1, r9
 800b686:	f7f4 fe07 	bl	8000298 <__aeabi_dsub>
 800b68a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b68c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b690:	ea43 030a 	orr.w	r3, r3, sl
 800b694:	4313      	orrs	r3, r2
 800b696:	4680      	mov	r8, r0
 800b698:	4689      	mov	r9, r1
 800b69a:	d055      	beq.n	800b748 <_strtod_l+0xba0>
 800b69c:	a336      	add	r3, pc, #216	; (adr r3, 800b778 <_strtod_l+0xbd0>)
 800b69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a2:	f7f5 fa23 	bl	8000aec <__aeabi_dcmplt>
 800b6a6:	2800      	cmp	r0, #0
 800b6a8:	f47f acd0 	bne.w	800b04c <_strtod_l+0x4a4>
 800b6ac:	a334      	add	r3, pc, #208	; (adr r3, 800b780 <_strtod_l+0xbd8>)
 800b6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b2:	4640      	mov	r0, r8
 800b6b4:	4649      	mov	r1, r9
 800b6b6:	f7f5 fa37 	bl	8000b28 <__aeabi_dcmpgt>
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	f43f af7b 	beq.w	800b5b6 <_strtod_l+0xa0e>
 800b6c0:	e4c4      	b.n	800b04c <_strtod_l+0x4a4>
 800b6c2:	9b04      	ldr	r3, [sp, #16]
 800b6c4:	b333      	cbz	r3, 800b714 <_strtod_l+0xb6c>
 800b6c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6c8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b6cc:	d822      	bhi.n	800b714 <_strtod_l+0xb6c>
 800b6ce:	a32e      	add	r3, pc, #184	; (adr r3, 800b788 <_strtod_l+0xbe0>)
 800b6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d4:	4640      	mov	r0, r8
 800b6d6:	4649      	mov	r1, r9
 800b6d8:	f7f5 fa12 	bl	8000b00 <__aeabi_dcmple>
 800b6dc:	b1a0      	cbz	r0, 800b708 <_strtod_l+0xb60>
 800b6de:	4649      	mov	r1, r9
 800b6e0:	4640      	mov	r0, r8
 800b6e2:	f7f5 fa69 	bl	8000bb8 <__aeabi_d2uiz>
 800b6e6:	2801      	cmp	r0, #1
 800b6e8:	bf38      	it	cc
 800b6ea:	2001      	movcc	r0, #1
 800b6ec:	f7f4 ff12 	bl	8000514 <__aeabi_ui2d>
 800b6f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6f2:	4680      	mov	r8, r0
 800b6f4:	4689      	mov	r9, r1
 800b6f6:	bb23      	cbnz	r3, 800b742 <_strtod_l+0xb9a>
 800b6f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6fc:	9010      	str	r0, [sp, #64]	; 0x40
 800b6fe:	9311      	str	r3, [sp, #68]	; 0x44
 800b700:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b704:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b70a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b70c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b710:	1a9b      	subs	r3, r3, r2
 800b712:	9309      	str	r3, [sp, #36]	; 0x24
 800b714:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b718:	eeb0 0a48 	vmov.f32	s0, s16
 800b71c:	eef0 0a68 	vmov.f32	s1, s17
 800b720:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b724:	f002 fa92 	bl	800dc4c <__ulp>
 800b728:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b72c:	ec53 2b10 	vmov	r2, r3, d0
 800b730:	f7f4 ff6a 	bl	8000608 <__aeabi_dmul>
 800b734:	ec53 2b18 	vmov	r2, r3, d8
 800b738:	f7f4 fdb0 	bl	800029c <__adddf3>
 800b73c:	4682      	mov	sl, r0
 800b73e:	468b      	mov	fp, r1
 800b740:	e78d      	b.n	800b65e <_strtod_l+0xab6>
 800b742:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b746:	e7db      	b.n	800b700 <_strtod_l+0xb58>
 800b748:	a311      	add	r3, pc, #68	; (adr r3, 800b790 <_strtod_l+0xbe8>)
 800b74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74e:	f7f5 f9cd 	bl	8000aec <__aeabi_dcmplt>
 800b752:	e7b2      	b.n	800b6ba <_strtod_l+0xb12>
 800b754:	2300      	movs	r3, #0
 800b756:	930a      	str	r3, [sp, #40]	; 0x28
 800b758:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b75a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b75c:	6013      	str	r3, [r2, #0]
 800b75e:	f7ff ba6b 	b.w	800ac38 <_strtod_l+0x90>
 800b762:	2a65      	cmp	r2, #101	; 0x65
 800b764:	f43f ab5f 	beq.w	800ae26 <_strtod_l+0x27e>
 800b768:	2a45      	cmp	r2, #69	; 0x45
 800b76a:	f43f ab5c 	beq.w	800ae26 <_strtod_l+0x27e>
 800b76e:	2301      	movs	r3, #1
 800b770:	f7ff bb94 	b.w	800ae9c <_strtod_l+0x2f4>
 800b774:	f3af 8000 	nop.w
 800b778:	94a03595 	.word	0x94a03595
 800b77c:	3fdfffff 	.word	0x3fdfffff
 800b780:	35afe535 	.word	0x35afe535
 800b784:	3fe00000 	.word	0x3fe00000
 800b788:	ffc00000 	.word	0xffc00000
 800b78c:	41dfffff 	.word	0x41dfffff
 800b790:	94a03595 	.word	0x94a03595
 800b794:	3fcfffff 	.word	0x3fcfffff
 800b798:	3ff00000 	.word	0x3ff00000
 800b79c:	7ff00000 	.word	0x7ff00000
 800b7a0:	7fe00000 	.word	0x7fe00000
 800b7a4:	7c9fffff 	.word	0x7c9fffff
 800b7a8:	3fe00000 	.word	0x3fe00000
 800b7ac:	bff00000 	.word	0xbff00000
 800b7b0:	7fefffff 	.word	0x7fefffff

0800b7b4 <strtof>:
 800b7b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7b8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800b868 <strtof+0xb4>
 800b7bc:	4b26      	ldr	r3, [pc, #152]	; (800b858 <strtof+0xa4>)
 800b7be:	460a      	mov	r2, r1
 800b7c0:	ed2d 8b02 	vpush	{d8}
 800b7c4:	4601      	mov	r1, r0
 800b7c6:	f8d8 0000 	ldr.w	r0, [r8]
 800b7ca:	f7ff f9ed 	bl	800aba8 <_strtod_l>
 800b7ce:	ec55 4b10 	vmov	r4, r5, d0
 800b7d2:	ee10 2a10 	vmov	r2, s0
 800b7d6:	ee10 0a10 	vmov	r0, s0
 800b7da:	462b      	mov	r3, r5
 800b7dc:	4629      	mov	r1, r5
 800b7de:	f7f5 f9ad 	bl	8000b3c <__aeabi_dcmpun>
 800b7e2:	b190      	cbz	r0, 800b80a <strtof+0x56>
 800b7e4:	2d00      	cmp	r5, #0
 800b7e6:	481d      	ldr	r0, [pc, #116]	; (800b85c <strtof+0xa8>)
 800b7e8:	da09      	bge.n	800b7fe <strtof+0x4a>
 800b7ea:	f002 fe65 	bl	800e4b8 <nanf>
 800b7ee:	eeb1 8a40 	vneg.f32	s16, s0
 800b7f2:	eeb0 0a48 	vmov.f32	s0, s16
 800b7f6:	ecbd 8b02 	vpop	{d8}
 800b7fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7fe:	ecbd 8b02 	vpop	{d8}
 800b802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b806:	f002 be57 	b.w	800e4b8 <nanf>
 800b80a:	4620      	mov	r0, r4
 800b80c:	4629      	mov	r1, r5
 800b80e:	f7f5 f9f3 	bl	8000bf8 <__aeabi_d2f>
 800b812:	ee08 0a10 	vmov	s16, r0
 800b816:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b860 <strtof+0xac>
 800b81a:	eeb0 7ac8 	vabs.f32	s14, s16
 800b81e:	eeb4 7a67 	vcmp.f32	s14, s15
 800b822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b826:	dde4      	ble.n	800b7f2 <strtof+0x3e>
 800b828:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800b82c:	4b0d      	ldr	r3, [pc, #52]	; (800b864 <strtof+0xb0>)
 800b82e:	f04f 32ff 	mov.w	r2, #4294967295
 800b832:	4620      	mov	r0, r4
 800b834:	4639      	mov	r1, r7
 800b836:	f7f5 f981 	bl	8000b3c <__aeabi_dcmpun>
 800b83a:	b940      	cbnz	r0, 800b84e <strtof+0x9a>
 800b83c:	4b09      	ldr	r3, [pc, #36]	; (800b864 <strtof+0xb0>)
 800b83e:	f04f 32ff 	mov.w	r2, #4294967295
 800b842:	4620      	mov	r0, r4
 800b844:	4639      	mov	r1, r7
 800b846:	f7f5 f95b 	bl	8000b00 <__aeabi_dcmple>
 800b84a:	2800      	cmp	r0, #0
 800b84c:	d0d1      	beq.n	800b7f2 <strtof+0x3e>
 800b84e:	f8d8 3000 	ldr.w	r3, [r8]
 800b852:	2222      	movs	r2, #34	; 0x22
 800b854:	601a      	str	r2, [r3, #0]
 800b856:	e7cc      	b.n	800b7f2 <strtof+0x3e>
 800b858:	2000012c 	.word	0x2000012c
 800b85c:	0800fc2b 	.word	0x0800fc2b
 800b860:	7f7fffff 	.word	0x7f7fffff
 800b864:	7fefffff 	.word	0x7fefffff
 800b868:	200000c4 	.word	0x200000c4

0800b86c <_strtol_l.constprop.0>:
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b872:	d001      	beq.n	800b878 <_strtol_l.constprop.0+0xc>
 800b874:	2b24      	cmp	r3, #36	; 0x24
 800b876:	d906      	bls.n	800b886 <_strtol_l.constprop.0+0x1a>
 800b878:	f7fe fb60 	bl	8009f3c <__errno>
 800b87c:	2316      	movs	r3, #22
 800b87e:	6003      	str	r3, [r0, #0]
 800b880:	2000      	movs	r0, #0
 800b882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b886:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b96c <_strtol_l.constprop.0+0x100>
 800b88a:	460d      	mov	r5, r1
 800b88c:	462e      	mov	r6, r5
 800b88e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b892:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b896:	f017 0708 	ands.w	r7, r7, #8
 800b89a:	d1f7      	bne.n	800b88c <_strtol_l.constprop.0+0x20>
 800b89c:	2c2d      	cmp	r4, #45	; 0x2d
 800b89e:	d132      	bne.n	800b906 <_strtol_l.constprop.0+0x9a>
 800b8a0:	782c      	ldrb	r4, [r5, #0]
 800b8a2:	2701      	movs	r7, #1
 800b8a4:	1cb5      	adds	r5, r6, #2
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d05b      	beq.n	800b962 <_strtol_l.constprop.0+0xf6>
 800b8aa:	2b10      	cmp	r3, #16
 800b8ac:	d109      	bne.n	800b8c2 <_strtol_l.constprop.0+0x56>
 800b8ae:	2c30      	cmp	r4, #48	; 0x30
 800b8b0:	d107      	bne.n	800b8c2 <_strtol_l.constprop.0+0x56>
 800b8b2:	782c      	ldrb	r4, [r5, #0]
 800b8b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b8b8:	2c58      	cmp	r4, #88	; 0x58
 800b8ba:	d14d      	bne.n	800b958 <_strtol_l.constprop.0+0xec>
 800b8bc:	786c      	ldrb	r4, [r5, #1]
 800b8be:	2310      	movs	r3, #16
 800b8c0:	3502      	adds	r5, #2
 800b8c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b8c6:	f108 38ff 	add.w	r8, r8, #4294967295
 800b8ca:	f04f 0c00 	mov.w	ip, #0
 800b8ce:	fbb8 f9f3 	udiv	r9, r8, r3
 800b8d2:	4666      	mov	r6, ip
 800b8d4:	fb03 8a19 	mls	sl, r3, r9, r8
 800b8d8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b8dc:	f1be 0f09 	cmp.w	lr, #9
 800b8e0:	d816      	bhi.n	800b910 <_strtol_l.constprop.0+0xa4>
 800b8e2:	4674      	mov	r4, lr
 800b8e4:	42a3      	cmp	r3, r4
 800b8e6:	dd24      	ble.n	800b932 <_strtol_l.constprop.0+0xc6>
 800b8e8:	f1bc 0f00 	cmp.w	ip, #0
 800b8ec:	db1e      	blt.n	800b92c <_strtol_l.constprop.0+0xc0>
 800b8ee:	45b1      	cmp	r9, r6
 800b8f0:	d31c      	bcc.n	800b92c <_strtol_l.constprop.0+0xc0>
 800b8f2:	d101      	bne.n	800b8f8 <_strtol_l.constprop.0+0x8c>
 800b8f4:	45a2      	cmp	sl, r4
 800b8f6:	db19      	blt.n	800b92c <_strtol_l.constprop.0+0xc0>
 800b8f8:	fb06 4603 	mla	r6, r6, r3, r4
 800b8fc:	f04f 0c01 	mov.w	ip, #1
 800b900:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b904:	e7e8      	b.n	800b8d8 <_strtol_l.constprop.0+0x6c>
 800b906:	2c2b      	cmp	r4, #43	; 0x2b
 800b908:	bf04      	itt	eq
 800b90a:	782c      	ldrbeq	r4, [r5, #0]
 800b90c:	1cb5      	addeq	r5, r6, #2
 800b90e:	e7ca      	b.n	800b8a6 <_strtol_l.constprop.0+0x3a>
 800b910:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b914:	f1be 0f19 	cmp.w	lr, #25
 800b918:	d801      	bhi.n	800b91e <_strtol_l.constprop.0+0xb2>
 800b91a:	3c37      	subs	r4, #55	; 0x37
 800b91c:	e7e2      	b.n	800b8e4 <_strtol_l.constprop.0+0x78>
 800b91e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b922:	f1be 0f19 	cmp.w	lr, #25
 800b926:	d804      	bhi.n	800b932 <_strtol_l.constprop.0+0xc6>
 800b928:	3c57      	subs	r4, #87	; 0x57
 800b92a:	e7db      	b.n	800b8e4 <_strtol_l.constprop.0+0x78>
 800b92c:	f04f 3cff 	mov.w	ip, #4294967295
 800b930:	e7e6      	b.n	800b900 <_strtol_l.constprop.0+0x94>
 800b932:	f1bc 0f00 	cmp.w	ip, #0
 800b936:	da05      	bge.n	800b944 <_strtol_l.constprop.0+0xd8>
 800b938:	2322      	movs	r3, #34	; 0x22
 800b93a:	6003      	str	r3, [r0, #0]
 800b93c:	4646      	mov	r6, r8
 800b93e:	b942      	cbnz	r2, 800b952 <_strtol_l.constprop.0+0xe6>
 800b940:	4630      	mov	r0, r6
 800b942:	e79e      	b.n	800b882 <_strtol_l.constprop.0+0x16>
 800b944:	b107      	cbz	r7, 800b948 <_strtol_l.constprop.0+0xdc>
 800b946:	4276      	negs	r6, r6
 800b948:	2a00      	cmp	r2, #0
 800b94a:	d0f9      	beq.n	800b940 <_strtol_l.constprop.0+0xd4>
 800b94c:	f1bc 0f00 	cmp.w	ip, #0
 800b950:	d000      	beq.n	800b954 <_strtol_l.constprop.0+0xe8>
 800b952:	1e69      	subs	r1, r5, #1
 800b954:	6011      	str	r1, [r2, #0]
 800b956:	e7f3      	b.n	800b940 <_strtol_l.constprop.0+0xd4>
 800b958:	2430      	movs	r4, #48	; 0x30
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d1b1      	bne.n	800b8c2 <_strtol_l.constprop.0+0x56>
 800b95e:	2308      	movs	r3, #8
 800b960:	e7af      	b.n	800b8c2 <_strtol_l.constprop.0+0x56>
 800b962:	2c30      	cmp	r4, #48	; 0x30
 800b964:	d0a5      	beq.n	800b8b2 <_strtol_l.constprop.0+0x46>
 800b966:	230a      	movs	r3, #10
 800b968:	e7ab      	b.n	800b8c2 <_strtol_l.constprop.0+0x56>
 800b96a:	bf00      	nop
 800b96c:	0800fa65 	.word	0x0800fa65

0800b970 <strtol>:
 800b970:	4613      	mov	r3, r2
 800b972:	460a      	mov	r2, r1
 800b974:	4601      	mov	r1, r0
 800b976:	4802      	ldr	r0, [pc, #8]	; (800b980 <strtol+0x10>)
 800b978:	6800      	ldr	r0, [r0, #0]
 800b97a:	f7ff bf77 	b.w	800b86c <_strtol_l.constprop.0>
 800b97e:	bf00      	nop
 800b980:	200000c4 	.word	0x200000c4

0800b984 <_strtoll_l.constprop.0>:
 800b984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b988:	b085      	sub	sp, #20
 800b98a:	4688      	mov	r8, r1
 800b98c:	9201      	str	r2, [sp, #4]
 800b98e:	4a47      	ldr	r2, [pc, #284]	; (800baac <_strtoll_l.constprop.0+0x128>)
 800b990:	9003      	str	r0, [sp, #12]
 800b992:	461e      	mov	r6, r3
 800b994:	460d      	mov	r5, r1
 800b996:	462b      	mov	r3, r5
 800b998:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b99c:	5ca7      	ldrb	r7, [r4, r2]
 800b99e:	f017 0708 	ands.w	r7, r7, #8
 800b9a2:	d1f8      	bne.n	800b996 <_strtoll_l.constprop.0+0x12>
 800b9a4:	2c2d      	cmp	r4, #45	; 0x2d
 800b9a6:	d147      	bne.n	800ba38 <_strtoll_l.constprop.0+0xb4>
 800b9a8:	782c      	ldrb	r4, [r5, #0]
 800b9aa:	2701      	movs	r7, #1
 800b9ac:	1c9d      	adds	r5, r3, #2
 800b9ae:	2e00      	cmp	r6, #0
 800b9b0:	d077      	beq.n	800baa2 <_strtoll_l.constprop.0+0x11e>
 800b9b2:	2e10      	cmp	r6, #16
 800b9b4:	d109      	bne.n	800b9ca <_strtoll_l.constprop.0+0x46>
 800b9b6:	2c30      	cmp	r4, #48	; 0x30
 800b9b8:	d107      	bne.n	800b9ca <_strtoll_l.constprop.0+0x46>
 800b9ba:	782b      	ldrb	r3, [r5, #0]
 800b9bc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b9c0:	2b58      	cmp	r3, #88	; 0x58
 800b9c2:	d169      	bne.n	800ba98 <_strtoll_l.constprop.0+0x114>
 800b9c4:	786c      	ldrb	r4, [r5, #1]
 800b9c6:	2610      	movs	r6, #16
 800b9c8:	3502      	adds	r5, #2
 800b9ca:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 800b9ce:	f107 3bff 	add.w	fp, r7, #4294967295
 800b9d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b9d6:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800b9da:	4632      	mov	r2, r6
 800b9dc:	464b      	mov	r3, r9
 800b9de:	4658      	mov	r0, fp
 800b9e0:	4651      	mov	r1, sl
 800b9e2:	f7f5 f959 	bl	8000c98 <__aeabi_uldivmod>
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	9202      	str	r2, [sp, #8]
 800b9ea:	468c      	mov	ip, r1
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b9f6:	f1be 0f09 	cmp.w	lr, #9
 800b9fa:	d822      	bhi.n	800ba42 <_strtoll_l.constprop.0+0xbe>
 800b9fc:	4674      	mov	r4, lr
 800b9fe:	42a6      	cmp	r6, r4
 800ba00:	dd30      	ble.n	800ba64 <_strtoll_l.constprop.0+0xe0>
 800ba02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba06:	d014      	beq.n	800ba32 <_strtoll_l.constprop.0+0xae>
 800ba08:	4282      	cmp	r2, r0
 800ba0a:	eb7c 0301 	sbcs.w	r3, ip, r1
 800ba0e:	d326      	bcc.n	800ba5e <_strtoll_l.constprop.0+0xda>
 800ba10:	458c      	cmp	ip, r1
 800ba12:	bf08      	it	eq
 800ba14:	4282      	cmpeq	r2, r0
 800ba16:	d102      	bne.n	800ba1e <_strtoll_l.constprop.0+0x9a>
 800ba18:	9b02      	ldr	r3, [sp, #8]
 800ba1a:	42a3      	cmp	r3, r4
 800ba1c:	db1f      	blt.n	800ba5e <_strtoll_l.constprop.0+0xda>
 800ba1e:	4371      	muls	r1, r6
 800ba20:	fb00 1109 	mla	r1, r0, r9, r1
 800ba24:	fba6 0300 	umull	r0, r3, r6, r0
 800ba28:	4419      	add	r1, r3
 800ba2a:	1820      	adds	r0, r4, r0
 800ba2c:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800ba30:	2301      	movs	r3, #1
 800ba32:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba36:	e7dc      	b.n	800b9f2 <_strtoll_l.constprop.0+0x6e>
 800ba38:	2c2b      	cmp	r4, #43	; 0x2b
 800ba3a:	bf04      	itt	eq
 800ba3c:	782c      	ldrbeq	r4, [r5, #0]
 800ba3e:	1c9d      	addeq	r5, r3, #2
 800ba40:	e7b5      	b.n	800b9ae <_strtoll_l.constprop.0+0x2a>
 800ba42:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ba46:	f1be 0f19 	cmp.w	lr, #25
 800ba4a:	d801      	bhi.n	800ba50 <_strtoll_l.constprop.0+0xcc>
 800ba4c:	3c37      	subs	r4, #55	; 0x37
 800ba4e:	e7d6      	b.n	800b9fe <_strtoll_l.constprop.0+0x7a>
 800ba50:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ba54:	f1be 0f19 	cmp.w	lr, #25
 800ba58:	d804      	bhi.n	800ba64 <_strtoll_l.constprop.0+0xe0>
 800ba5a:	3c57      	subs	r4, #87	; 0x57
 800ba5c:	e7cf      	b.n	800b9fe <_strtoll_l.constprop.0+0x7a>
 800ba5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ba62:	e7e6      	b.n	800ba32 <_strtoll_l.constprop.0+0xae>
 800ba64:	1c5a      	adds	r2, r3, #1
 800ba66:	d109      	bne.n	800ba7c <_strtoll_l.constprop.0+0xf8>
 800ba68:	9a03      	ldr	r2, [sp, #12]
 800ba6a:	2322      	movs	r3, #34	; 0x22
 800ba6c:	6013      	str	r3, [r2, #0]
 800ba6e:	9b01      	ldr	r3, [sp, #4]
 800ba70:	4658      	mov	r0, fp
 800ba72:	4651      	mov	r1, sl
 800ba74:	b953      	cbnz	r3, 800ba8c <_strtoll_l.constprop.0+0x108>
 800ba76:	b005      	add	sp, #20
 800ba78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba7c:	b117      	cbz	r7, 800ba84 <_strtoll_l.constprop.0+0x100>
 800ba7e:	4240      	negs	r0, r0
 800ba80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800ba84:	9a01      	ldr	r2, [sp, #4]
 800ba86:	2a00      	cmp	r2, #0
 800ba88:	d0f5      	beq.n	800ba76 <_strtoll_l.constprop.0+0xf2>
 800ba8a:	b10b      	cbz	r3, 800ba90 <_strtoll_l.constprop.0+0x10c>
 800ba8c:	f105 38ff 	add.w	r8, r5, #4294967295
 800ba90:	9b01      	ldr	r3, [sp, #4]
 800ba92:	f8c3 8000 	str.w	r8, [r3]
 800ba96:	e7ee      	b.n	800ba76 <_strtoll_l.constprop.0+0xf2>
 800ba98:	2430      	movs	r4, #48	; 0x30
 800ba9a:	2e00      	cmp	r6, #0
 800ba9c:	d195      	bne.n	800b9ca <_strtoll_l.constprop.0+0x46>
 800ba9e:	2608      	movs	r6, #8
 800baa0:	e793      	b.n	800b9ca <_strtoll_l.constprop.0+0x46>
 800baa2:	2c30      	cmp	r4, #48	; 0x30
 800baa4:	d089      	beq.n	800b9ba <_strtoll_l.constprop.0+0x36>
 800baa6:	260a      	movs	r6, #10
 800baa8:	e78f      	b.n	800b9ca <_strtoll_l.constprop.0+0x46>
 800baaa:	bf00      	nop
 800baac:	0800fa65 	.word	0x0800fa65

0800bab0 <strtoll>:
 800bab0:	4613      	mov	r3, r2
 800bab2:	460a      	mov	r2, r1
 800bab4:	4601      	mov	r1, r0
 800bab6:	4802      	ldr	r0, [pc, #8]	; (800bac0 <strtoll+0x10>)
 800bab8:	6800      	ldr	r0, [r0, #0]
 800baba:	f7ff bf63 	b.w	800b984 <_strtoll_l.constprop.0>
 800babe:	bf00      	nop
 800bac0:	200000c4 	.word	0x200000c4

0800bac4 <__swbuf_r>:
 800bac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac6:	460e      	mov	r6, r1
 800bac8:	4614      	mov	r4, r2
 800baca:	4605      	mov	r5, r0
 800bacc:	b118      	cbz	r0, 800bad6 <__swbuf_r+0x12>
 800bace:	6983      	ldr	r3, [r0, #24]
 800bad0:	b90b      	cbnz	r3, 800bad6 <__swbuf_r+0x12>
 800bad2:	f001 f88d 	bl	800cbf0 <__sinit>
 800bad6:	4b21      	ldr	r3, [pc, #132]	; (800bb5c <__swbuf_r+0x98>)
 800bad8:	429c      	cmp	r4, r3
 800bada:	d12b      	bne.n	800bb34 <__swbuf_r+0x70>
 800badc:	686c      	ldr	r4, [r5, #4]
 800bade:	69a3      	ldr	r3, [r4, #24]
 800bae0:	60a3      	str	r3, [r4, #8]
 800bae2:	89a3      	ldrh	r3, [r4, #12]
 800bae4:	071a      	lsls	r2, r3, #28
 800bae6:	d52f      	bpl.n	800bb48 <__swbuf_r+0x84>
 800bae8:	6923      	ldr	r3, [r4, #16]
 800baea:	b36b      	cbz	r3, 800bb48 <__swbuf_r+0x84>
 800baec:	6923      	ldr	r3, [r4, #16]
 800baee:	6820      	ldr	r0, [r4, #0]
 800baf0:	1ac0      	subs	r0, r0, r3
 800baf2:	6963      	ldr	r3, [r4, #20]
 800baf4:	b2f6      	uxtb	r6, r6
 800baf6:	4283      	cmp	r3, r0
 800baf8:	4637      	mov	r7, r6
 800bafa:	dc04      	bgt.n	800bb06 <__swbuf_r+0x42>
 800bafc:	4621      	mov	r1, r4
 800bafe:	4628      	mov	r0, r5
 800bb00:	f000 ffe2 	bl	800cac8 <_fflush_r>
 800bb04:	bb30      	cbnz	r0, 800bb54 <__swbuf_r+0x90>
 800bb06:	68a3      	ldr	r3, [r4, #8]
 800bb08:	3b01      	subs	r3, #1
 800bb0a:	60a3      	str	r3, [r4, #8]
 800bb0c:	6823      	ldr	r3, [r4, #0]
 800bb0e:	1c5a      	adds	r2, r3, #1
 800bb10:	6022      	str	r2, [r4, #0]
 800bb12:	701e      	strb	r6, [r3, #0]
 800bb14:	6963      	ldr	r3, [r4, #20]
 800bb16:	3001      	adds	r0, #1
 800bb18:	4283      	cmp	r3, r0
 800bb1a:	d004      	beq.n	800bb26 <__swbuf_r+0x62>
 800bb1c:	89a3      	ldrh	r3, [r4, #12]
 800bb1e:	07db      	lsls	r3, r3, #31
 800bb20:	d506      	bpl.n	800bb30 <__swbuf_r+0x6c>
 800bb22:	2e0a      	cmp	r6, #10
 800bb24:	d104      	bne.n	800bb30 <__swbuf_r+0x6c>
 800bb26:	4621      	mov	r1, r4
 800bb28:	4628      	mov	r0, r5
 800bb2a:	f000 ffcd 	bl	800cac8 <_fflush_r>
 800bb2e:	b988      	cbnz	r0, 800bb54 <__swbuf_r+0x90>
 800bb30:	4638      	mov	r0, r7
 800bb32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb34:	4b0a      	ldr	r3, [pc, #40]	; (800bb60 <__swbuf_r+0x9c>)
 800bb36:	429c      	cmp	r4, r3
 800bb38:	d101      	bne.n	800bb3e <__swbuf_r+0x7a>
 800bb3a:	68ac      	ldr	r4, [r5, #8]
 800bb3c:	e7cf      	b.n	800bade <__swbuf_r+0x1a>
 800bb3e:	4b09      	ldr	r3, [pc, #36]	; (800bb64 <__swbuf_r+0xa0>)
 800bb40:	429c      	cmp	r4, r3
 800bb42:	bf08      	it	eq
 800bb44:	68ec      	ldreq	r4, [r5, #12]
 800bb46:	e7ca      	b.n	800bade <__swbuf_r+0x1a>
 800bb48:	4621      	mov	r1, r4
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	f000 f81e 	bl	800bb8c <__swsetup_r>
 800bb50:	2800      	cmp	r0, #0
 800bb52:	d0cb      	beq.n	800baec <__swbuf_r+0x28>
 800bb54:	f04f 37ff 	mov.w	r7, #4294967295
 800bb58:	e7ea      	b.n	800bb30 <__swbuf_r+0x6c>
 800bb5a:	bf00      	nop
 800bb5c:	0800fcdc 	.word	0x0800fcdc
 800bb60:	0800fcfc 	.word	0x0800fcfc
 800bb64:	0800fcbc 	.word	0x0800fcbc

0800bb68 <_write_r>:
 800bb68:	b538      	push	{r3, r4, r5, lr}
 800bb6a:	4d07      	ldr	r5, [pc, #28]	; (800bb88 <_write_r+0x20>)
 800bb6c:	4604      	mov	r4, r0
 800bb6e:	4608      	mov	r0, r1
 800bb70:	4611      	mov	r1, r2
 800bb72:	2200      	movs	r2, #0
 800bb74:	602a      	str	r2, [r5, #0]
 800bb76:	461a      	mov	r2, r3
 800bb78:	f7f9 fc9d 	bl	80054b6 <_write>
 800bb7c:	1c43      	adds	r3, r0, #1
 800bb7e:	d102      	bne.n	800bb86 <_write_r+0x1e>
 800bb80:	682b      	ldr	r3, [r5, #0]
 800bb82:	b103      	cbz	r3, 800bb86 <_write_r+0x1e>
 800bb84:	6023      	str	r3, [r4, #0]
 800bb86:	bd38      	pop	{r3, r4, r5, pc}
 800bb88:	20002ef0 	.word	0x20002ef0

0800bb8c <__swsetup_r>:
 800bb8c:	4b32      	ldr	r3, [pc, #200]	; (800bc58 <__swsetup_r+0xcc>)
 800bb8e:	b570      	push	{r4, r5, r6, lr}
 800bb90:	681d      	ldr	r5, [r3, #0]
 800bb92:	4606      	mov	r6, r0
 800bb94:	460c      	mov	r4, r1
 800bb96:	b125      	cbz	r5, 800bba2 <__swsetup_r+0x16>
 800bb98:	69ab      	ldr	r3, [r5, #24]
 800bb9a:	b913      	cbnz	r3, 800bba2 <__swsetup_r+0x16>
 800bb9c:	4628      	mov	r0, r5
 800bb9e:	f001 f827 	bl	800cbf0 <__sinit>
 800bba2:	4b2e      	ldr	r3, [pc, #184]	; (800bc5c <__swsetup_r+0xd0>)
 800bba4:	429c      	cmp	r4, r3
 800bba6:	d10f      	bne.n	800bbc8 <__swsetup_r+0x3c>
 800bba8:	686c      	ldr	r4, [r5, #4]
 800bbaa:	89a3      	ldrh	r3, [r4, #12]
 800bbac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbb0:	0719      	lsls	r1, r3, #28
 800bbb2:	d42c      	bmi.n	800bc0e <__swsetup_r+0x82>
 800bbb4:	06dd      	lsls	r5, r3, #27
 800bbb6:	d411      	bmi.n	800bbdc <__swsetup_r+0x50>
 800bbb8:	2309      	movs	r3, #9
 800bbba:	6033      	str	r3, [r6, #0]
 800bbbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bbc0:	81a3      	strh	r3, [r4, #12]
 800bbc2:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc6:	e03e      	b.n	800bc46 <__swsetup_r+0xba>
 800bbc8:	4b25      	ldr	r3, [pc, #148]	; (800bc60 <__swsetup_r+0xd4>)
 800bbca:	429c      	cmp	r4, r3
 800bbcc:	d101      	bne.n	800bbd2 <__swsetup_r+0x46>
 800bbce:	68ac      	ldr	r4, [r5, #8]
 800bbd0:	e7eb      	b.n	800bbaa <__swsetup_r+0x1e>
 800bbd2:	4b24      	ldr	r3, [pc, #144]	; (800bc64 <__swsetup_r+0xd8>)
 800bbd4:	429c      	cmp	r4, r3
 800bbd6:	bf08      	it	eq
 800bbd8:	68ec      	ldreq	r4, [r5, #12]
 800bbda:	e7e6      	b.n	800bbaa <__swsetup_r+0x1e>
 800bbdc:	0758      	lsls	r0, r3, #29
 800bbde:	d512      	bpl.n	800bc06 <__swsetup_r+0x7a>
 800bbe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbe2:	b141      	cbz	r1, 800bbf6 <__swsetup_r+0x6a>
 800bbe4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbe8:	4299      	cmp	r1, r3
 800bbea:	d002      	beq.n	800bbf2 <__swsetup_r+0x66>
 800bbec:	4630      	mov	r0, r6
 800bbee:	f7fe f9ed 	bl	8009fcc <_free_r>
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	6363      	str	r3, [r4, #52]	; 0x34
 800bbf6:	89a3      	ldrh	r3, [r4, #12]
 800bbf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bbfc:	81a3      	strh	r3, [r4, #12]
 800bbfe:	2300      	movs	r3, #0
 800bc00:	6063      	str	r3, [r4, #4]
 800bc02:	6923      	ldr	r3, [r4, #16]
 800bc04:	6023      	str	r3, [r4, #0]
 800bc06:	89a3      	ldrh	r3, [r4, #12]
 800bc08:	f043 0308 	orr.w	r3, r3, #8
 800bc0c:	81a3      	strh	r3, [r4, #12]
 800bc0e:	6923      	ldr	r3, [r4, #16]
 800bc10:	b94b      	cbnz	r3, 800bc26 <__swsetup_r+0x9a>
 800bc12:	89a3      	ldrh	r3, [r4, #12]
 800bc14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc1c:	d003      	beq.n	800bc26 <__swsetup_r+0x9a>
 800bc1e:	4621      	mov	r1, r4
 800bc20:	4630      	mov	r0, r6
 800bc22:	f001 fc43 	bl	800d4ac <__smakebuf_r>
 800bc26:	89a0      	ldrh	r0, [r4, #12]
 800bc28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc2c:	f010 0301 	ands.w	r3, r0, #1
 800bc30:	d00a      	beq.n	800bc48 <__swsetup_r+0xbc>
 800bc32:	2300      	movs	r3, #0
 800bc34:	60a3      	str	r3, [r4, #8]
 800bc36:	6963      	ldr	r3, [r4, #20]
 800bc38:	425b      	negs	r3, r3
 800bc3a:	61a3      	str	r3, [r4, #24]
 800bc3c:	6923      	ldr	r3, [r4, #16]
 800bc3e:	b943      	cbnz	r3, 800bc52 <__swsetup_r+0xc6>
 800bc40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc44:	d1ba      	bne.n	800bbbc <__swsetup_r+0x30>
 800bc46:	bd70      	pop	{r4, r5, r6, pc}
 800bc48:	0781      	lsls	r1, r0, #30
 800bc4a:	bf58      	it	pl
 800bc4c:	6963      	ldrpl	r3, [r4, #20]
 800bc4e:	60a3      	str	r3, [r4, #8]
 800bc50:	e7f4      	b.n	800bc3c <__swsetup_r+0xb0>
 800bc52:	2000      	movs	r0, #0
 800bc54:	e7f7      	b.n	800bc46 <__swsetup_r+0xba>
 800bc56:	bf00      	nop
 800bc58:	200000c4 	.word	0x200000c4
 800bc5c:	0800fcdc 	.word	0x0800fcdc
 800bc60:	0800fcfc 	.word	0x0800fcfc
 800bc64:	0800fcbc 	.word	0x0800fcbc

0800bc68 <__assert_func>:
 800bc68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc6a:	4614      	mov	r4, r2
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	4b09      	ldr	r3, [pc, #36]	; (800bc94 <__assert_func+0x2c>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4605      	mov	r5, r0
 800bc74:	68d8      	ldr	r0, [r3, #12]
 800bc76:	b14c      	cbz	r4, 800bc8c <__assert_func+0x24>
 800bc78:	4b07      	ldr	r3, [pc, #28]	; (800bc98 <__assert_func+0x30>)
 800bc7a:	9100      	str	r1, [sp, #0]
 800bc7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc80:	4906      	ldr	r1, [pc, #24]	; (800bc9c <__assert_func+0x34>)
 800bc82:	462b      	mov	r3, r5
 800bc84:	f001 f832 	bl	800ccec <fiprintf>
 800bc88:	f002 fc29 	bl	800e4de <abort>
 800bc8c:	4b04      	ldr	r3, [pc, #16]	; (800bca0 <__assert_func+0x38>)
 800bc8e:	461c      	mov	r4, r3
 800bc90:	e7f3      	b.n	800bc7a <__assert_func+0x12>
 800bc92:	bf00      	nop
 800bc94:	200000c4 	.word	0x200000c4
 800bc98:	0800fbf0 	.word	0x0800fbf0
 800bc9c:	0800fbfd 	.word	0x0800fbfd
 800bca0:	0800fc2b 	.word	0x0800fc2b

0800bca4 <_close_r>:
 800bca4:	b538      	push	{r3, r4, r5, lr}
 800bca6:	4d06      	ldr	r5, [pc, #24]	; (800bcc0 <_close_r+0x1c>)
 800bca8:	2300      	movs	r3, #0
 800bcaa:	4604      	mov	r4, r0
 800bcac:	4608      	mov	r0, r1
 800bcae:	602b      	str	r3, [r5, #0]
 800bcb0:	f7f9 fc1d 	bl	80054ee <_close>
 800bcb4:	1c43      	adds	r3, r0, #1
 800bcb6:	d102      	bne.n	800bcbe <_close_r+0x1a>
 800bcb8:	682b      	ldr	r3, [r5, #0]
 800bcba:	b103      	cbz	r3, 800bcbe <_close_r+0x1a>
 800bcbc:	6023      	str	r3, [r4, #0]
 800bcbe:	bd38      	pop	{r3, r4, r5, pc}
 800bcc0:	20002ef0 	.word	0x20002ef0

0800bcc4 <quorem>:
 800bcc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc8:	6903      	ldr	r3, [r0, #16]
 800bcca:	690c      	ldr	r4, [r1, #16]
 800bccc:	42a3      	cmp	r3, r4
 800bcce:	4607      	mov	r7, r0
 800bcd0:	f2c0 8081 	blt.w	800bdd6 <quorem+0x112>
 800bcd4:	3c01      	subs	r4, #1
 800bcd6:	f101 0814 	add.w	r8, r1, #20
 800bcda:	f100 0514 	add.w	r5, r0, #20
 800bcde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bce2:	9301      	str	r3, [sp, #4]
 800bce4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bce8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcec:	3301      	adds	r3, #1
 800bcee:	429a      	cmp	r2, r3
 800bcf0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bcf4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bcf8:	fbb2 f6f3 	udiv	r6, r2, r3
 800bcfc:	d331      	bcc.n	800bd62 <quorem+0x9e>
 800bcfe:	f04f 0e00 	mov.w	lr, #0
 800bd02:	4640      	mov	r0, r8
 800bd04:	46ac      	mov	ip, r5
 800bd06:	46f2      	mov	sl, lr
 800bd08:	f850 2b04 	ldr.w	r2, [r0], #4
 800bd0c:	b293      	uxth	r3, r2
 800bd0e:	fb06 e303 	mla	r3, r6, r3, lr
 800bd12:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	ebaa 0303 	sub.w	r3, sl, r3
 800bd1c:	f8dc a000 	ldr.w	sl, [ip]
 800bd20:	0c12      	lsrs	r2, r2, #16
 800bd22:	fa13 f38a 	uxtah	r3, r3, sl
 800bd26:	fb06 e202 	mla	r2, r6, r2, lr
 800bd2a:	9300      	str	r3, [sp, #0]
 800bd2c:	9b00      	ldr	r3, [sp, #0]
 800bd2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bd32:	b292      	uxth	r2, r2
 800bd34:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bd38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd3c:	f8bd 3000 	ldrh.w	r3, [sp]
 800bd40:	4581      	cmp	r9, r0
 800bd42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd46:	f84c 3b04 	str.w	r3, [ip], #4
 800bd4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bd4e:	d2db      	bcs.n	800bd08 <quorem+0x44>
 800bd50:	f855 300b 	ldr.w	r3, [r5, fp]
 800bd54:	b92b      	cbnz	r3, 800bd62 <quorem+0x9e>
 800bd56:	9b01      	ldr	r3, [sp, #4]
 800bd58:	3b04      	subs	r3, #4
 800bd5a:	429d      	cmp	r5, r3
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	d32e      	bcc.n	800bdbe <quorem+0xfa>
 800bd60:	613c      	str	r4, [r7, #16]
 800bd62:	4638      	mov	r0, r7
 800bd64:	f001 fecc 	bl	800db00 <__mcmp>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	db24      	blt.n	800bdb6 <quorem+0xf2>
 800bd6c:	3601      	adds	r6, #1
 800bd6e:	4628      	mov	r0, r5
 800bd70:	f04f 0c00 	mov.w	ip, #0
 800bd74:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd78:	f8d0 e000 	ldr.w	lr, [r0]
 800bd7c:	b293      	uxth	r3, r2
 800bd7e:	ebac 0303 	sub.w	r3, ip, r3
 800bd82:	0c12      	lsrs	r2, r2, #16
 800bd84:	fa13 f38e 	uxtah	r3, r3, lr
 800bd88:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bd8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd96:	45c1      	cmp	r9, r8
 800bd98:	f840 3b04 	str.w	r3, [r0], #4
 800bd9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bda0:	d2e8      	bcs.n	800bd74 <quorem+0xb0>
 800bda2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bda6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdaa:	b922      	cbnz	r2, 800bdb6 <quorem+0xf2>
 800bdac:	3b04      	subs	r3, #4
 800bdae:	429d      	cmp	r5, r3
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	d30a      	bcc.n	800bdca <quorem+0x106>
 800bdb4:	613c      	str	r4, [r7, #16]
 800bdb6:	4630      	mov	r0, r6
 800bdb8:	b003      	add	sp, #12
 800bdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdbe:	6812      	ldr	r2, [r2, #0]
 800bdc0:	3b04      	subs	r3, #4
 800bdc2:	2a00      	cmp	r2, #0
 800bdc4:	d1cc      	bne.n	800bd60 <quorem+0x9c>
 800bdc6:	3c01      	subs	r4, #1
 800bdc8:	e7c7      	b.n	800bd5a <quorem+0x96>
 800bdca:	6812      	ldr	r2, [r2, #0]
 800bdcc:	3b04      	subs	r3, #4
 800bdce:	2a00      	cmp	r2, #0
 800bdd0:	d1f0      	bne.n	800bdb4 <quorem+0xf0>
 800bdd2:	3c01      	subs	r4, #1
 800bdd4:	e7eb      	b.n	800bdae <quorem+0xea>
 800bdd6:	2000      	movs	r0, #0
 800bdd8:	e7ee      	b.n	800bdb8 <quorem+0xf4>
 800bdda:	0000      	movs	r0, r0
 800bddc:	0000      	movs	r0, r0
	...

0800bde0 <_dtoa_r>:
 800bde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde4:	ed2d 8b04 	vpush	{d8-d9}
 800bde8:	ec57 6b10 	vmov	r6, r7, d0
 800bdec:	b093      	sub	sp, #76	; 0x4c
 800bdee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bdf0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bdf4:	9106      	str	r1, [sp, #24]
 800bdf6:	ee10 aa10 	vmov	sl, s0
 800bdfa:	4604      	mov	r4, r0
 800bdfc:	9209      	str	r2, [sp, #36]	; 0x24
 800bdfe:	930c      	str	r3, [sp, #48]	; 0x30
 800be00:	46bb      	mov	fp, r7
 800be02:	b975      	cbnz	r5, 800be22 <_dtoa_r+0x42>
 800be04:	2010      	movs	r0, #16
 800be06:	f7fe f8c3 	bl	8009f90 <malloc>
 800be0a:	4602      	mov	r2, r0
 800be0c:	6260      	str	r0, [r4, #36]	; 0x24
 800be0e:	b920      	cbnz	r0, 800be1a <_dtoa_r+0x3a>
 800be10:	4ba7      	ldr	r3, [pc, #668]	; (800c0b0 <_dtoa_r+0x2d0>)
 800be12:	21ea      	movs	r1, #234	; 0xea
 800be14:	48a7      	ldr	r0, [pc, #668]	; (800c0b4 <_dtoa_r+0x2d4>)
 800be16:	f7ff ff27 	bl	800bc68 <__assert_func>
 800be1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800be1e:	6005      	str	r5, [r0, #0]
 800be20:	60c5      	str	r5, [r0, #12]
 800be22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be24:	6819      	ldr	r1, [r3, #0]
 800be26:	b151      	cbz	r1, 800be3e <_dtoa_r+0x5e>
 800be28:	685a      	ldr	r2, [r3, #4]
 800be2a:	604a      	str	r2, [r1, #4]
 800be2c:	2301      	movs	r3, #1
 800be2e:	4093      	lsls	r3, r2
 800be30:	608b      	str	r3, [r1, #8]
 800be32:	4620      	mov	r0, r4
 800be34:	f001 fbd8 	bl	800d5e8 <_Bfree>
 800be38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be3a:	2200      	movs	r2, #0
 800be3c:	601a      	str	r2, [r3, #0]
 800be3e:	1e3b      	subs	r3, r7, #0
 800be40:	bfaa      	itet	ge
 800be42:	2300      	movge	r3, #0
 800be44:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800be48:	f8c8 3000 	strge.w	r3, [r8]
 800be4c:	4b9a      	ldr	r3, [pc, #616]	; (800c0b8 <_dtoa_r+0x2d8>)
 800be4e:	bfbc      	itt	lt
 800be50:	2201      	movlt	r2, #1
 800be52:	f8c8 2000 	strlt.w	r2, [r8]
 800be56:	ea33 030b 	bics.w	r3, r3, fp
 800be5a:	d11b      	bne.n	800be94 <_dtoa_r+0xb4>
 800be5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be5e:	f242 730f 	movw	r3, #9999	; 0x270f
 800be62:	6013      	str	r3, [r2, #0]
 800be64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be68:	4333      	orrs	r3, r6
 800be6a:	f000 8592 	beq.w	800c992 <_dtoa_r+0xbb2>
 800be6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be70:	b963      	cbnz	r3, 800be8c <_dtoa_r+0xac>
 800be72:	4b92      	ldr	r3, [pc, #584]	; (800c0bc <_dtoa_r+0x2dc>)
 800be74:	e022      	b.n	800bebc <_dtoa_r+0xdc>
 800be76:	4b92      	ldr	r3, [pc, #584]	; (800c0c0 <_dtoa_r+0x2e0>)
 800be78:	9301      	str	r3, [sp, #4]
 800be7a:	3308      	adds	r3, #8
 800be7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be7e:	6013      	str	r3, [r2, #0]
 800be80:	9801      	ldr	r0, [sp, #4]
 800be82:	b013      	add	sp, #76	; 0x4c
 800be84:	ecbd 8b04 	vpop	{d8-d9}
 800be88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be8c:	4b8b      	ldr	r3, [pc, #556]	; (800c0bc <_dtoa_r+0x2dc>)
 800be8e:	9301      	str	r3, [sp, #4]
 800be90:	3303      	adds	r3, #3
 800be92:	e7f3      	b.n	800be7c <_dtoa_r+0x9c>
 800be94:	2200      	movs	r2, #0
 800be96:	2300      	movs	r3, #0
 800be98:	4650      	mov	r0, sl
 800be9a:	4659      	mov	r1, fp
 800be9c:	f7f4 fe1c 	bl	8000ad8 <__aeabi_dcmpeq>
 800bea0:	ec4b ab19 	vmov	d9, sl, fp
 800bea4:	4680      	mov	r8, r0
 800bea6:	b158      	cbz	r0, 800bec0 <_dtoa_r+0xe0>
 800bea8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800beaa:	2301      	movs	r3, #1
 800beac:	6013      	str	r3, [r2, #0]
 800beae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f000 856b 	beq.w	800c98c <_dtoa_r+0xbac>
 800beb6:	4883      	ldr	r0, [pc, #524]	; (800c0c4 <_dtoa_r+0x2e4>)
 800beb8:	6018      	str	r0, [r3, #0]
 800beba:	1e43      	subs	r3, r0, #1
 800bebc:	9301      	str	r3, [sp, #4]
 800bebe:	e7df      	b.n	800be80 <_dtoa_r+0xa0>
 800bec0:	ec4b ab10 	vmov	d0, sl, fp
 800bec4:	aa10      	add	r2, sp, #64	; 0x40
 800bec6:	a911      	add	r1, sp, #68	; 0x44
 800bec8:	4620      	mov	r0, r4
 800beca:	f001 ff3b 	bl	800dd44 <__d2b>
 800bece:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bed2:	ee08 0a10 	vmov	s16, r0
 800bed6:	2d00      	cmp	r5, #0
 800bed8:	f000 8084 	beq.w	800bfe4 <_dtoa_r+0x204>
 800bedc:	ee19 3a90 	vmov	r3, s19
 800bee0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bee4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bee8:	4656      	mov	r6, sl
 800beea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800beee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bef2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bef6:	4b74      	ldr	r3, [pc, #464]	; (800c0c8 <_dtoa_r+0x2e8>)
 800bef8:	2200      	movs	r2, #0
 800befa:	4630      	mov	r0, r6
 800befc:	4639      	mov	r1, r7
 800befe:	f7f4 f9cb 	bl	8000298 <__aeabi_dsub>
 800bf02:	a365      	add	r3, pc, #404	; (adr r3, 800c098 <_dtoa_r+0x2b8>)
 800bf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf08:	f7f4 fb7e 	bl	8000608 <__aeabi_dmul>
 800bf0c:	a364      	add	r3, pc, #400	; (adr r3, 800c0a0 <_dtoa_r+0x2c0>)
 800bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf12:	f7f4 f9c3 	bl	800029c <__adddf3>
 800bf16:	4606      	mov	r6, r0
 800bf18:	4628      	mov	r0, r5
 800bf1a:	460f      	mov	r7, r1
 800bf1c:	f7f4 fb0a 	bl	8000534 <__aeabi_i2d>
 800bf20:	a361      	add	r3, pc, #388	; (adr r3, 800c0a8 <_dtoa_r+0x2c8>)
 800bf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf26:	f7f4 fb6f 	bl	8000608 <__aeabi_dmul>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	4630      	mov	r0, r6
 800bf30:	4639      	mov	r1, r7
 800bf32:	f7f4 f9b3 	bl	800029c <__adddf3>
 800bf36:	4606      	mov	r6, r0
 800bf38:	460f      	mov	r7, r1
 800bf3a:	f7f4 fe15 	bl	8000b68 <__aeabi_d2iz>
 800bf3e:	2200      	movs	r2, #0
 800bf40:	9000      	str	r0, [sp, #0]
 800bf42:	2300      	movs	r3, #0
 800bf44:	4630      	mov	r0, r6
 800bf46:	4639      	mov	r1, r7
 800bf48:	f7f4 fdd0 	bl	8000aec <__aeabi_dcmplt>
 800bf4c:	b150      	cbz	r0, 800bf64 <_dtoa_r+0x184>
 800bf4e:	9800      	ldr	r0, [sp, #0]
 800bf50:	f7f4 faf0 	bl	8000534 <__aeabi_i2d>
 800bf54:	4632      	mov	r2, r6
 800bf56:	463b      	mov	r3, r7
 800bf58:	f7f4 fdbe 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf5c:	b910      	cbnz	r0, 800bf64 <_dtoa_r+0x184>
 800bf5e:	9b00      	ldr	r3, [sp, #0]
 800bf60:	3b01      	subs	r3, #1
 800bf62:	9300      	str	r3, [sp, #0]
 800bf64:	9b00      	ldr	r3, [sp, #0]
 800bf66:	2b16      	cmp	r3, #22
 800bf68:	d85a      	bhi.n	800c020 <_dtoa_r+0x240>
 800bf6a:	9a00      	ldr	r2, [sp, #0]
 800bf6c:	4b57      	ldr	r3, [pc, #348]	; (800c0cc <_dtoa_r+0x2ec>)
 800bf6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf76:	ec51 0b19 	vmov	r0, r1, d9
 800bf7a:	f7f4 fdb7 	bl	8000aec <__aeabi_dcmplt>
 800bf7e:	2800      	cmp	r0, #0
 800bf80:	d050      	beq.n	800c024 <_dtoa_r+0x244>
 800bf82:	9b00      	ldr	r3, [sp, #0]
 800bf84:	3b01      	subs	r3, #1
 800bf86:	9300      	str	r3, [sp, #0]
 800bf88:	2300      	movs	r3, #0
 800bf8a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf8e:	1b5d      	subs	r5, r3, r5
 800bf90:	1e6b      	subs	r3, r5, #1
 800bf92:	9305      	str	r3, [sp, #20]
 800bf94:	bf45      	ittet	mi
 800bf96:	f1c5 0301 	rsbmi	r3, r5, #1
 800bf9a:	9304      	strmi	r3, [sp, #16]
 800bf9c:	2300      	movpl	r3, #0
 800bf9e:	2300      	movmi	r3, #0
 800bfa0:	bf4c      	ite	mi
 800bfa2:	9305      	strmi	r3, [sp, #20]
 800bfa4:	9304      	strpl	r3, [sp, #16]
 800bfa6:	9b00      	ldr	r3, [sp, #0]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	db3d      	blt.n	800c028 <_dtoa_r+0x248>
 800bfac:	9b05      	ldr	r3, [sp, #20]
 800bfae:	9a00      	ldr	r2, [sp, #0]
 800bfb0:	920a      	str	r2, [sp, #40]	; 0x28
 800bfb2:	4413      	add	r3, r2
 800bfb4:	9305      	str	r3, [sp, #20]
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	9307      	str	r3, [sp, #28]
 800bfba:	9b06      	ldr	r3, [sp, #24]
 800bfbc:	2b09      	cmp	r3, #9
 800bfbe:	f200 8089 	bhi.w	800c0d4 <_dtoa_r+0x2f4>
 800bfc2:	2b05      	cmp	r3, #5
 800bfc4:	bfc4      	itt	gt
 800bfc6:	3b04      	subgt	r3, #4
 800bfc8:	9306      	strgt	r3, [sp, #24]
 800bfca:	9b06      	ldr	r3, [sp, #24]
 800bfcc:	f1a3 0302 	sub.w	r3, r3, #2
 800bfd0:	bfcc      	ite	gt
 800bfd2:	2500      	movgt	r5, #0
 800bfd4:	2501      	movle	r5, #1
 800bfd6:	2b03      	cmp	r3, #3
 800bfd8:	f200 8087 	bhi.w	800c0ea <_dtoa_r+0x30a>
 800bfdc:	e8df f003 	tbb	[pc, r3]
 800bfe0:	59383a2d 	.word	0x59383a2d
 800bfe4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bfe8:	441d      	add	r5, r3
 800bfea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bfee:	2b20      	cmp	r3, #32
 800bff0:	bfc1      	itttt	gt
 800bff2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bff6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bffa:	fa0b f303 	lslgt.w	r3, fp, r3
 800bffe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c002:	bfda      	itte	le
 800c004:	f1c3 0320 	rsble	r3, r3, #32
 800c008:	fa06 f003 	lslle.w	r0, r6, r3
 800c00c:	4318      	orrgt	r0, r3
 800c00e:	f7f4 fa81 	bl	8000514 <__aeabi_ui2d>
 800c012:	2301      	movs	r3, #1
 800c014:	4606      	mov	r6, r0
 800c016:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c01a:	3d01      	subs	r5, #1
 800c01c:	930e      	str	r3, [sp, #56]	; 0x38
 800c01e:	e76a      	b.n	800bef6 <_dtoa_r+0x116>
 800c020:	2301      	movs	r3, #1
 800c022:	e7b2      	b.n	800bf8a <_dtoa_r+0x1aa>
 800c024:	900b      	str	r0, [sp, #44]	; 0x2c
 800c026:	e7b1      	b.n	800bf8c <_dtoa_r+0x1ac>
 800c028:	9b04      	ldr	r3, [sp, #16]
 800c02a:	9a00      	ldr	r2, [sp, #0]
 800c02c:	1a9b      	subs	r3, r3, r2
 800c02e:	9304      	str	r3, [sp, #16]
 800c030:	4253      	negs	r3, r2
 800c032:	9307      	str	r3, [sp, #28]
 800c034:	2300      	movs	r3, #0
 800c036:	930a      	str	r3, [sp, #40]	; 0x28
 800c038:	e7bf      	b.n	800bfba <_dtoa_r+0x1da>
 800c03a:	2300      	movs	r3, #0
 800c03c:	9308      	str	r3, [sp, #32]
 800c03e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c040:	2b00      	cmp	r3, #0
 800c042:	dc55      	bgt.n	800c0f0 <_dtoa_r+0x310>
 800c044:	2301      	movs	r3, #1
 800c046:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c04a:	461a      	mov	r2, r3
 800c04c:	9209      	str	r2, [sp, #36]	; 0x24
 800c04e:	e00c      	b.n	800c06a <_dtoa_r+0x28a>
 800c050:	2301      	movs	r3, #1
 800c052:	e7f3      	b.n	800c03c <_dtoa_r+0x25c>
 800c054:	2300      	movs	r3, #0
 800c056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c058:	9308      	str	r3, [sp, #32]
 800c05a:	9b00      	ldr	r3, [sp, #0]
 800c05c:	4413      	add	r3, r2
 800c05e:	9302      	str	r3, [sp, #8]
 800c060:	3301      	adds	r3, #1
 800c062:	2b01      	cmp	r3, #1
 800c064:	9303      	str	r3, [sp, #12]
 800c066:	bfb8      	it	lt
 800c068:	2301      	movlt	r3, #1
 800c06a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c06c:	2200      	movs	r2, #0
 800c06e:	6042      	str	r2, [r0, #4]
 800c070:	2204      	movs	r2, #4
 800c072:	f102 0614 	add.w	r6, r2, #20
 800c076:	429e      	cmp	r6, r3
 800c078:	6841      	ldr	r1, [r0, #4]
 800c07a:	d93d      	bls.n	800c0f8 <_dtoa_r+0x318>
 800c07c:	4620      	mov	r0, r4
 800c07e:	f001 fa73 	bl	800d568 <_Balloc>
 800c082:	9001      	str	r0, [sp, #4]
 800c084:	2800      	cmp	r0, #0
 800c086:	d13b      	bne.n	800c100 <_dtoa_r+0x320>
 800c088:	4b11      	ldr	r3, [pc, #68]	; (800c0d0 <_dtoa_r+0x2f0>)
 800c08a:	4602      	mov	r2, r0
 800c08c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c090:	e6c0      	b.n	800be14 <_dtoa_r+0x34>
 800c092:	2301      	movs	r3, #1
 800c094:	e7df      	b.n	800c056 <_dtoa_r+0x276>
 800c096:	bf00      	nop
 800c098:	636f4361 	.word	0x636f4361
 800c09c:	3fd287a7 	.word	0x3fd287a7
 800c0a0:	8b60c8b3 	.word	0x8b60c8b3
 800c0a4:	3fc68a28 	.word	0x3fc68a28
 800c0a8:	509f79fb 	.word	0x509f79fb
 800c0ac:	3fd34413 	.word	0x3fd34413
 800c0b0:	0800fc39 	.word	0x0800fc39
 800c0b4:	0800fc50 	.word	0x0800fc50
 800c0b8:	7ff00000 	.word	0x7ff00000
 800c0bc:	0800fc35 	.word	0x0800fc35
 800c0c0:	0800fc2c 	.word	0x0800fc2c
 800c0c4:	0800fb7d 	.word	0x0800fb7d
 800c0c8:	3ff80000 	.word	0x3ff80000
 800c0cc:	0800fe20 	.word	0x0800fe20
 800c0d0:	0800fcab 	.word	0x0800fcab
 800c0d4:	2501      	movs	r5, #1
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	9306      	str	r3, [sp, #24]
 800c0da:	9508      	str	r5, [sp, #32]
 800c0dc:	f04f 33ff 	mov.w	r3, #4294967295
 800c0e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	2312      	movs	r3, #18
 800c0e8:	e7b0      	b.n	800c04c <_dtoa_r+0x26c>
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	9308      	str	r3, [sp, #32]
 800c0ee:	e7f5      	b.n	800c0dc <_dtoa_r+0x2fc>
 800c0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c0f6:	e7b8      	b.n	800c06a <_dtoa_r+0x28a>
 800c0f8:	3101      	adds	r1, #1
 800c0fa:	6041      	str	r1, [r0, #4]
 800c0fc:	0052      	lsls	r2, r2, #1
 800c0fe:	e7b8      	b.n	800c072 <_dtoa_r+0x292>
 800c100:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c102:	9a01      	ldr	r2, [sp, #4]
 800c104:	601a      	str	r2, [r3, #0]
 800c106:	9b03      	ldr	r3, [sp, #12]
 800c108:	2b0e      	cmp	r3, #14
 800c10a:	f200 809d 	bhi.w	800c248 <_dtoa_r+0x468>
 800c10e:	2d00      	cmp	r5, #0
 800c110:	f000 809a 	beq.w	800c248 <_dtoa_r+0x468>
 800c114:	9b00      	ldr	r3, [sp, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	dd32      	ble.n	800c180 <_dtoa_r+0x3a0>
 800c11a:	4ab7      	ldr	r2, [pc, #732]	; (800c3f8 <_dtoa_r+0x618>)
 800c11c:	f003 030f 	and.w	r3, r3, #15
 800c120:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c124:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c128:	9b00      	ldr	r3, [sp, #0]
 800c12a:	05d8      	lsls	r0, r3, #23
 800c12c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c130:	d516      	bpl.n	800c160 <_dtoa_r+0x380>
 800c132:	4bb2      	ldr	r3, [pc, #712]	; (800c3fc <_dtoa_r+0x61c>)
 800c134:	ec51 0b19 	vmov	r0, r1, d9
 800c138:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c13c:	f7f4 fb8e 	bl	800085c <__aeabi_ddiv>
 800c140:	f007 070f 	and.w	r7, r7, #15
 800c144:	4682      	mov	sl, r0
 800c146:	468b      	mov	fp, r1
 800c148:	2503      	movs	r5, #3
 800c14a:	4eac      	ldr	r6, [pc, #688]	; (800c3fc <_dtoa_r+0x61c>)
 800c14c:	b957      	cbnz	r7, 800c164 <_dtoa_r+0x384>
 800c14e:	4642      	mov	r2, r8
 800c150:	464b      	mov	r3, r9
 800c152:	4650      	mov	r0, sl
 800c154:	4659      	mov	r1, fp
 800c156:	f7f4 fb81 	bl	800085c <__aeabi_ddiv>
 800c15a:	4682      	mov	sl, r0
 800c15c:	468b      	mov	fp, r1
 800c15e:	e028      	b.n	800c1b2 <_dtoa_r+0x3d2>
 800c160:	2502      	movs	r5, #2
 800c162:	e7f2      	b.n	800c14a <_dtoa_r+0x36a>
 800c164:	07f9      	lsls	r1, r7, #31
 800c166:	d508      	bpl.n	800c17a <_dtoa_r+0x39a>
 800c168:	4640      	mov	r0, r8
 800c16a:	4649      	mov	r1, r9
 800c16c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c170:	f7f4 fa4a 	bl	8000608 <__aeabi_dmul>
 800c174:	3501      	adds	r5, #1
 800c176:	4680      	mov	r8, r0
 800c178:	4689      	mov	r9, r1
 800c17a:	107f      	asrs	r7, r7, #1
 800c17c:	3608      	adds	r6, #8
 800c17e:	e7e5      	b.n	800c14c <_dtoa_r+0x36c>
 800c180:	f000 809b 	beq.w	800c2ba <_dtoa_r+0x4da>
 800c184:	9b00      	ldr	r3, [sp, #0]
 800c186:	4f9d      	ldr	r7, [pc, #628]	; (800c3fc <_dtoa_r+0x61c>)
 800c188:	425e      	negs	r6, r3
 800c18a:	4b9b      	ldr	r3, [pc, #620]	; (800c3f8 <_dtoa_r+0x618>)
 800c18c:	f006 020f 	and.w	r2, r6, #15
 800c190:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c198:	ec51 0b19 	vmov	r0, r1, d9
 800c19c:	f7f4 fa34 	bl	8000608 <__aeabi_dmul>
 800c1a0:	1136      	asrs	r6, r6, #4
 800c1a2:	4682      	mov	sl, r0
 800c1a4:	468b      	mov	fp, r1
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	2502      	movs	r5, #2
 800c1aa:	2e00      	cmp	r6, #0
 800c1ac:	d17a      	bne.n	800c2a4 <_dtoa_r+0x4c4>
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d1d3      	bne.n	800c15a <_dtoa_r+0x37a>
 800c1b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	f000 8082 	beq.w	800c2be <_dtoa_r+0x4de>
 800c1ba:	4b91      	ldr	r3, [pc, #580]	; (800c400 <_dtoa_r+0x620>)
 800c1bc:	2200      	movs	r2, #0
 800c1be:	4650      	mov	r0, sl
 800c1c0:	4659      	mov	r1, fp
 800c1c2:	f7f4 fc93 	bl	8000aec <__aeabi_dcmplt>
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	d079      	beq.n	800c2be <_dtoa_r+0x4de>
 800c1ca:	9b03      	ldr	r3, [sp, #12]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d076      	beq.n	800c2be <_dtoa_r+0x4de>
 800c1d0:	9b02      	ldr	r3, [sp, #8]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	dd36      	ble.n	800c244 <_dtoa_r+0x464>
 800c1d6:	9b00      	ldr	r3, [sp, #0]
 800c1d8:	4650      	mov	r0, sl
 800c1da:	4659      	mov	r1, fp
 800c1dc:	1e5f      	subs	r7, r3, #1
 800c1de:	2200      	movs	r2, #0
 800c1e0:	4b88      	ldr	r3, [pc, #544]	; (800c404 <_dtoa_r+0x624>)
 800c1e2:	f7f4 fa11 	bl	8000608 <__aeabi_dmul>
 800c1e6:	9e02      	ldr	r6, [sp, #8]
 800c1e8:	4682      	mov	sl, r0
 800c1ea:	468b      	mov	fp, r1
 800c1ec:	3501      	adds	r5, #1
 800c1ee:	4628      	mov	r0, r5
 800c1f0:	f7f4 f9a0 	bl	8000534 <__aeabi_i2d>
 800c1f4:	4652      	mov	r2, sl
 800c1f6:	465b      	mov	r3, fp
 800c1f8:	f7f4 fa06 	bl	8000608 <__aeabi_dmul>
 800c1fc:	4b82      	ldr	r3, [pc, #520]	; (800c408 <_dtoa_r+0x628>)
 800c1fe:	2200      	movs	r2, #0
 800c200:	f7f4 f84c 	bl	800029c <__adddf3>
 800c204:	46d0      	mov	r8, sl
 800c206:	46d9      	mov	r9, fp
 800c208:	4682      	mov	sl, r0
 800c20a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c20e:	2e00      	cmp	r6, #0
 800c210:	d158      	bne.n	800c2c4 <_dtoa_r+0x4e4>
 800c212:	4b7e      	ldr	r3, [pc, #504]	; (800c40c <_dtoa_r+0x62c>)
 800c214:	2200      	movs	r2, #0
 800c216:	4640      	mov	r0, r8
 800c218:	4649      	mov	r1, r9
 800c21a:	f7f4 f83d 	bl	8000298 <__aeabi_dsub>
 800c21e:	4652      	mov	r2, sl
 800c220:	465b      	mov	r3, fp
 800c222:	4680      	mov	r8, r0
 800c224:	4689      	mov	r9, r1
 800c226:	f7f4 fc7f 	bl	8000b28 <__aeabi_dcmpgt>
 800c22a:	2800      	cmp	r0, #0
 800c22c:	f040 8295 	bne.w	800c75a <_dtoa_r+0x97a>
 800c230:	4652      	mov	r2, sl
 800c232:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c236:	4640      	mov	r0, r8
 800c238:	4649      	mov	r1, r9
 800c23a:	f7f4 fc57 	bl	8000aec <__aeabi_dcmplt>
 800c23e:	2800      	cmp	r0, #0
 800c240:	f040 8289 	bne.w	800c756 <_dtoa_r+0x976>
 800c244:	ec5b ab19 	vmov	sl, fp, d9
 800c248:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	f2c0 8148 	blt.w	800c4e0 <_dtoa_r+0x700>
 800c250:	9a00      	ldr	r2, [sp, #0]
 800c252:	2a0e      	cmp	r2, #14
 800c254:	f300 8144 	bgt.w	800c4e0 <_dtoa_r+0x700>
 800c258:	4b67      	ldr	r3, [pc, #412]	; (800c3f8 <_dtoa_r+0x618>)
 800c25a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c25e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c264:	2b00      	cmp	r3, #0
 800c266:	f280 80d5 	bge.w	800c414 <_dtoa_r+0x634>
 800c26a:	9b03      	ldr	r3, [sp, #12]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	f300 80d1 	bgt.w	800c414 <_dtoa_r+0x634>
 800c272:	f040 826f 	bne.w	800c754 <_dtoa_r+0x974>
 800c276:	4b65      	ldr	r3, [pc, #404]	; (800c40c <_dtoa_r+0x62c>)
 800c278:	2200      	movs	r2, #0
 800c27a:	4640      	mov	r0, r8
 800c27c:	4649      	mov	r1, r9
 800c27e:	f7f4 f9c3 	bl	8000608 <__aeabi_dmul>
 800c282:	4652      	mov	r2, sl
 800c284:	465b      	mov	r3, fp
 800c286:	f7f4 fc45 	bl	8000b14 <__aeabi_dcmpge>
 800c28a:	9e03      	ldr	r6, [sp, #12]
 800c28c:	4637      	mov	r7, r6
 800c28e:	2800      	cmp	r0, #0
 800c290:	f040 8245 	bne.w	800c71e <_dtoa_r+0x93e>
 800c294:	9d01      	ldr	r5, [sp, #4]
 800c296:	2331      	movs	r3, #49	; 0x31
 800c298:	f805 3b01 	strb.w	r3, [r5], #1
 800c29c:	9b00      	ldr	r3, [sp, #0]
 800c29e:	3301      	adds	r3, #1
 800c2a0:	9300      	str	r3, [sp, #0]
 800c2a2:	e240      	b.n	800c726 <_dtoa_r+0x946>
 800c2a4:	07f2      	lsls	r2, r6, #31
 800c2a6:	d505      	bpl.n	800c2b4 <_dtoa_r+0x4d4>
 800c2a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2ac:	f7f4 f9ac 	bl	8000608 <__aeabi_dmul>
 800c2b0:	3501      	adds	r5, #1
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	1076      	asrs	r6, r6, #1
 800c2b6:	3708      	adds	r7, #8
 800c2b8:	e777      	b.n	800c1aa <_dtoa_r+0x3ca>
 800c2ba:	2502      	movs	r5, #2
 800c2bc:	e779      	b.n	800c1b2 <_dtoa_r+0x3d2>
 800c2be:	9f00      	ldr	r7, [sp, #0]
 800c2c0:	9e03      	ldr	r6, [sp, #12]
 800c2c2:	e794      	b.n	800c1ee <_dtoa_r+0x40e>
 800c2c4:	9901      	ldr	r1, [sp, #4]
 800c2c6:	4b4c      	ldr	r3, [pc, #304]	; (800c3f8 <_dtoa_r+0x618>)
 800c2c8:	4431      	add	r1, r6
 800c2ca:	910d      	str	r1, [sp, #52]	; 0x34
 800c2cc:	9908      	ldr	r1, [sp, #32]
 800c2ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c2d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c2d6:	2900      	cmp	r1, #0
 800c2d8:	d043      	beq.n	800c362 <_dtoa_r+0x582>
 800c2da:	494d      	ldr	r1, [pc, #308]	; (800c410 <_dtoa_r+0x630>)
 800c2dc:	2000      	movs	r0, #0
 800c2de:	f7f4 fabd 	bl	800085c <__aeabi_ddiv>
 800c2e2:	4652      	mov	r2, sl
 800c2e4:	465b      	mov	r3, fp
 800c2e6:	f7f3 ffd7 	bl	8000298 <__aeabi_dsub>
 800c2ea:	9d01      	ldr	r5, [sp, #4]
 800c2ec:	4682      	mov	sl, r0
 800c2ee:	468b      	mov	fp, r1
 800c2f0:	4649      	mov	r1, r9
 800c2f2:	4640      	mov	r0, r8
 800c2f4:	f7f4 fc38 	bl	8000b68 <__aeabi_d2iz>
 800c2f8:	4606      	mov	r6, r0
 800c2fa:	f7f4 f91b 	bl	8000534 <__aeabi_i2d>
 800c2fe:	4602      	mov	r2, r0
 800c300:	460b      	mov	r3, r1
 800c302:	4640      	mov	r0, r8
 800c304:	4649      	mov	r1, r9
 800c306:	f7f3 ffc7 	bl	8000298 <__aeabi_dsub>
 800c30a:	3630      	adds	r6, #48	; 0x30
 800c30c:	f805 6b01 	strb.w	r6, [r5], #1
 800c310:	4652      	mov	r2, sl
 800c312:	465b      	mov	r3, fp
 800c314:	4680      	mov	r8, r0
 800c316:	4689      	mov	r9, r1
 800c318:	f7f4 fbe8 	bl	8000aec <__aeabi_dcmplt>
 800c31c:	2800      	cmp	r0, #0
 800c31e:	d163      	bne.n	800c3e8 <_dtoa_r+0x608>
 800c320:	4642      	mov	r2, r8
 800c322:	464b      	mov	r3, r9
 800c324:	4936      	ldr	r1, [pc, #216]	; (800c400 <_dtoa_r+0x620>)
 800c326:	2000      	movs	r0, #0
 800c328:	f7f3 ffb6 	bl	8000298 <__aeabi_dsub>
 800c32c:	4652      	mov	r2, sl
 800c32e:	465b      	mov	r3, fp
 800c330:	f7f4 fbdc 	bl	8000aec <__aeabi_dcmplt>
 800c334:	2800      	cmp	r0, #0
 800c336:	f040 80b5 	bne.w	800c4a4 <_dtoa_r+0x6c4>
 800c33a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c33c:	429d      	cmp	r5, r3
 800c33e:	d081      	beq.n	800c244 <_dtoa_r+0x464>
 800c340:	4b30      	ldr	r3, [pc, #192]	; (800c404 <_dtoa_r+0x624>)
 800c342:	2200      	movs	r2, #0
 800c344:	4650      	mov	r0, sl
 800c346:	4659      	mov	r1, fp
 800c348:	f7f4 f95e 	bl	8000608 <__aeabi_dmul>
 800c34c:	4b2d      	ldr	r3, [pc, #180]	; (800c404 <_dtoa_r+0x624>)
 800c34e:	4682      	mov	sl, r0
 800c350:	468b      	mov	fp, r1
 800c352:	4640      	mov	r0, r8
 800c354:	4649      	mov	r1, r9
 800c356:	2200      	movs	r2, #0
 800c358:	f7f4 f956 	bl	8000608 <__aeabi_dmul>
 800c35c:	4680      	mov	r8, r0
 800c35e:	4689      	mov	r9, r1
 800c360:	e7c6      	b.n	800c2f0 <_dtoa_r+0x510>
 800c362:	4650      	mov	r0, sl
 800c364:	4659      	mov	r1, fp
 800c366:	f7f4 f94f 	bl	8000608 <__aeabi_dmul>
 800c36a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c36c:	9d01      	ldr	r5, [sp, #4]
 800c36e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c370:	4682      	mov	sl, r0
 800c372:	468b      	mov	fp, r1
 800c374:	4649      	mov	r1, r9
 800c376:	4640      	mov	r0, r8
 800c378:	f7f4 fbf6 	bl	8000b68 <__aeabi_d2iz>
 800c37c:	4606      	mov	r6, r0
 800c37e:	f7f4 f8d9 	bl	8000534 <__aeabi_i2d>
 800c382:	3630      	adds	r6, #48	; 0x30
 800c384:	4602      	mov	r2, r0
 800c386:	460b      	mov	r3, r1
 800c388:	4640      	mov	r0, r8
 800c38a:	4649      	mov	r1, r9
 800c38c:	f7f3 ff84 	bl	8000298 <__aeabi_dsub>
 800c390:	f805 6b01 	strb.w	r6, [r5], #1
 800c394:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c396:	429d      	cmp	r5, r3
 800c398:	4680      	mov	r8, r0
 800c39a:	4689      	mov	r9, r1
 800c39c:	f04f 0200 	mov.w	r2, #0
 800c3a0:	d124      	bne.n	800c3ec <_dtoa_r+0x60c>
 800c3a2:	4b1b      	ldr	r3, [pc, #108]	; (800c410 <_dtoa_r+0x630>)
 800c3a4:	4650      	mov	r0, sl
 800c3a6:	4659      	mov	r1, fp
 800c3a8:	f7f3 ff78 	bl	800029c <__adddf3>
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	460b      	mov	r3, r1
 800c3b0:	4640      	mov	r0, r8
 800c3b2:	4649      	mov	r1, r9
 800c3b4:	f7f4 fbb8 	bl	8000b28 <__aeabi_dcmpgt>
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	d173      	bne.n	800c4a4 <_dtoa_r+0x6c4>
 800c3bc:	4652      	mov	r2, sl
 800c3be:	465b      	mov	r3, fp
 800c3c0:	4913      	ldr	r1, [pc, #76]	; (800c410 <_dtoa_r+0x630>)
 800c3c2:	2000      	movs	r0, #0
 800c3c4:	f7f3 ff68 	bl	8000298 <__aeabi_dsub>
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	4640      	mov	r0, r8
 800c3ce:	4649      	mov	r1, r9
 800c3d0:	f7f4 fb8c 	bl	8000aec <__aeabi_dcmplt>
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	f43f af35 	beq.w	800c244 <_dtoa_r+0x464>
 800c3da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c3dc:	1e6b      	subs	r3, r5, #1
 800c3de:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c3e4:	2b30      	cmp	r3, #48	; 0x30
 800c3e6:	d0f8      	beq.n	800c3da <_dtoa_r+0x5fa>
 800c3e8:	9700      	str	r7, [sp, #0]
 800c3ea:	e049      	b.n	800c480 <_dtoa_r+0x6a0>
 800c3ec:	4b05      	ldr	r3, [pc, #20]	; (800c404 <_dtoa_r+0x624>)
 800c3ee:	f7f4 f90b 	bl	8000608 <__aeabi_dmul>
 800c3f2:	4680      	mov	r8, r0
 800c3f4:	4689      	mov	r9, r1
 800c3f6:	e7bd      	b.n	800c374 <_dtoa_r+0x594>
 800c3f8:	0800fe20 	.word	0x0800fe20
 800c3fc:	0800fdf8 	.word	0x0800fdf8
 800c400:	3ff00000 	.word	0x3ff00000
 800c404:	40240000 	.word	0x40240000
 800c408:	401c0000 	.word	0x401c0000
 800c40c:	40140000 	.word	0x40140000
 800c410:	3fe00000 	.word	0x3fe00000
 800c414:	9d01      	ldr	r5, [sp, #4]
 800c416:	4656      	mov	r6, sl
 800c418:	465f      	mov	r7, fp
 800c41a:	4642      	mov	r2, r8
 800c41c:	464b      	mov	r3, r9
 800c41e:	4630      	mov	r0, r6
 800c420:	4639      	mov	r1, r7
 800c422:	f7f4 fa1b 	bl	800085c <__aeabi_ddiv>
 800c426:	f7f4 fb9f 	bl	8000b68 <__aeabi_d2iz>
 800c42a:	4682      	mov	sl, r0
 800c42c:	f7f4 f882 	bl	8000534 <__aeabi_i2d>
 800c430:	4642      	mov	r2, r8
 800c432:	464b      	mov	r3, r9
 800c434:	f7f4 f8e8 	bl	8000608 <__aeabi_dmul>
 800c438:	4602      	mov	r2, r0
 800c43a:	460b      	mov	r3, r1
 800c43c:	4630      	mov	r0, r6
 800c43e:	4639      	mov	r1, r7
 800c440:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c444:	f7f3 ff28 	bl	8000298 <__aeabi_dsub>
 800c448:	f805 6b01 	strb.w	r6, [r5], #1
 800c44c:	9e01      	ldr	r6, [sp, #4]
 800c44e:	9f03      	ldr	r7, [sp, #12]
 800c450:	1bae      	subs	r6, r5, r6
 800c452:	42b7      	cmp	r7, r6
 800c454:	4602      	mov	r2, r0
 800c456:	460b      	mov	r3, r1
 800c458:	d135      	bne.n	800c4c6 <_dtoa_r+0x6e6>
 800c45a:	f7f3 ff1f 	bl	800029c <__adddf3>
 800c45e:	4642      	mov	r2, r8
 800c460:	464b      	mov	r3, r9
 800c462:	4606      	mov	r6, r0
 800c464:	460f      	mov	r7, r1
 800c466:	f7f4 fb5f 	bl	8000b28 <__aeabi_dcmpgt>
 800c46a:	b9d0      	cbnz	r0, 800c4a2 <_dtoa_r+0x6c2>
 800c46c:	4642      	mov	r2, r8
 800c46e:	464b      	mov	r3, r9
 800c470:	4630      	mov	r0, r6
 800c472:	4639      	mov	r1, r7
 800c474:	f7f4 fb30 	bl	8000ad8 <__aeabi_dcmpeq>
 800c478:	b110      	cbz	r0, 800c480 <_dtoa_r+0x6a0>
 800c47a:	f01a 0f01 	tst.w	sl, #1
 800c47e:	d110      	bne.n	800c4a2 <_dtoa_r+0x6c2>
 800c480:	4620      	mov	r0, r4
 800c482:	ee18 1a10 	vmov	r1, s16
 800c486:	f001 f8af 	bl	800d5e8 <_Bfree>
 800c48a:	2300      	movs	r3, #0
 800c48c:	9800      	ldr	r0, [sp, #0]
 800c48e:	702b      	strb	r3, [r5, #0]
 800c490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c492:	3001      	adds	r0, #1
 800c494:	6018      	str	r0, [r3, #0]
 800c496:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c498:	2b00      	cmp	r3, #0
 800c49a:	f43f acf1 	beq.w	800be80 <_dtoa_r+0xa0>
 800c49e:	601d      	str	r5, [r3, #0]
 800c4a0:	e4ee      	b.n	800be80 <_dtoa_r+0xa0>
 800c4a2:	9f00      	ldr	r7, [sp, #0]
 800c4a4:	462b      	mov	r3, r5
 800c4a6:	461d      	mov	r5, r3
 800c4a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4ac:	2a39      	cmp	r2, #57	; 0x39
 800c4ae:	d106      	bne.n	800c4be <_dtoa_r+0x6de>
 800c4b0:	9a01      	ldr	r2, [sp, #4]
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d1f7      	bne.n	800c4a6 <_dtoa_r+0x6c6>
 800c4b6:	9901      	ldr	r1, [sp, #4]
 800c4b8:	2230      	movs	r2, #48	; 0x30
 800c4ba:	3701      	adds	r7, #1
 800c4bc:	700a      	strb	r2, [r1, #0]
 800c4be:	781a      	ldrb	r2, [r3, #0]
 800c4c0:	3201      	adds	r2, #1
 800c4c2:	701a      	strb	r2, [r3, #0]
 800c4c4:	e790      	b.n	800c3e8 <_dtoa_r+0x608>
 800c4c6:	4ba6      	ldr	r3, [pc, #664]	; (800c760 <_dtoa_r+0x980>)
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	f7f4 f89d 	bl	8000608 <__aeabi_dmul>
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	4606      	mov	r6, r0
 800c4d4:	460f      	mov	r7, r1
 800c4d6:	f7f4 faff 	bl	8000ad8 <__aeabi_dcmpeq>
 800c4da:	2800      	cmp	r0, #0
 800c4dc:	d09d      	beq.n	800c41a <_dtoa_r+0x63a>
 800c4de:	e7cf      	b.n	800c480 <_dtoa_r+0x6a0>
 800c4e0:	9a08      	ldr	r2, [sp, #32]
 800c4e2:	2a00      	cmp	r2, #0
 800c4e4:	f000 80d7 	beq.w	800c696 <_dtoa_r+0x8b6>
 800c4e8:	9a06      	ldr	r2, [sp, #24]
 800c4ea:	2a01      	cmp	r2, #1
 800c4ec:	f300 80ba 	bgt.w	800c664 <_dtoa_r+0x884>
 800c4f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4f2:	2a00      	cmp	r2, #0
 800c4f4:	f000 80b2 	beq.w	800c65c <_dtoa_r+0x87c>
 800c4f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c4fc:	9e07      	ldr	r6, [sp, #28]
 800c4fe:	9d04      	ldr	r5, [sp, #16]
 800c500:	9a04      	ldr	r2, [sp, #16]
 800c502:	441a      	add	r2, r3
 800c504:	9204      	str	r2, [sp, #16]
 800c506:	9a05      	ldr	r2, [sp, #20]
 800c508:	2101      	movs	r1, #1
 800c50a:	441a      	add	r2, r3
 800c50c:	4620      	mov	r0, r4
 800c50e:	9205      	str	r2, [sp, #20]
 800c510:	f001 f96c 	bl	800d7ec <__i2b>
 800c514:	4607      	mov	r7, r0
 800c516:	2d00      	cmp	r5, #0
 800c518:	dd0c      	ble.n	800c534 <_dtoa_r+0x754>
 800c51a:	9b05      	ldr	r3, [sp, #20]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	dd09      	ble.n	800c534 <_dtoa_r+0x754>
 800c520:	42ab      	cmp	r3, r5
 800c522:	9a04      	ldr	r2, [sp, #16]
 800c524:	bfa8      	it	ge
 800c526:	462b      	movge	r3, r5
 800c528:	1ad2      	subs	r2, r2, r3
 800c52a:	9204      	str	r2, [sp, #16]
 800c52c:	9a05      	ldr	r2, [sp, #20]
 800c52e:	1aed      	subs	r5, r5, r3
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	9305      	str	r3, [sp, #20]
 800c534:	9b07      	ldr	r3, [sp, #28]
 800c536:	b31b      	cbz	r3, 800c580 <_dtoa_r+0x7a0>
 800c538:	9b08      	ldr	r3, [sp, #32]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	f000 80af 	beq.w	800c69e <_dtoa_r+0x8be>
 800c540:	2e00      	cmp	r6, #0
 800c542:	dd13      	ble.n	800c56c <_dtoa_r+0x78c>
 800c544:	4639      	mov	r1, r7
 800c546:	4632      	mov	r2, r6
 800c548:	4620      	mov	r0, r4
 800c54a:	f001 fa0f 	bl	800d96c <__pow5mult>
 800c54e:	ee18 2a10 	vmov	r2, s16
 800c552:	4601      	mov	r1, r0
 800c554:	4607      	mov	r7, r0
 800c556:	4620      	mov	r0, r4
 800c558:	f001 f95e 	bl	800d818 <__multiply>
 800c55c:	ee18 1a10 	vmov	r1, s16
 800c560:	4680      	mov	r8, r0
 800c562:	4620      	mov	r0, r4
 800c564:	f001 f840 	bl	800d5e8 <_Bfree>
 800c568:	ee08 8a10 	vmov	s16, r8
 800c56c:	9b07      	ldr	r3, [sp, #28]
 800c56e:	1b9a      	subs	r2, r3, r6
 800c570:	d006      	beq.n	800c580 <_dtoa_r+0x7a0>
 800c572:	ee18 1a10 	vmov	r1, s16
 800c576:	4620      	mov	r0, r4
 800c578:	f001 f9f8 	bl	800d96c <__pow5mult>
 800c57c:	ee08 0a10 	vmov	s16, r0
 800c580:	2101      	movs	r1, #1
 800c582:	4620      	mov	r0, r4
 800c584:	f001 f932 	bl	800d7ec <__i2b>
 800c588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	4606      	mov	r6, r0
 800c58e:	f340 8088 	ble.w	800c6a2 <_dtoa_r+0x8c2>
 800c592:	461a      	mov	r2, r3
 800c594:	4601      	mov	r1, r0
 800c596:	4620      	mov	r0, r4
 800c598:	f001 f9e8 	bl	800d96c <__pow5mult>
 800c59c:	9b06      	ldr	r3, [sp, #24]
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	4606      	mov	r6, r0
 800c5a2:	f340 8081 	ble.w	800c6a8 <_dtoa_r+0x8c8>
 800c5a6:	f04f 0800 	mov.w	r8, #0
 800c5aa:	6933      	ldr	r3, [r6, #16]
 800c5ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c5b0:	6918      	ldr	r0, [r3, #16]
 800c5b2:	f001 f8cb 	bl	800d74c <__hi0bits>
 800c5b6:	f1c0 0020 	rsb	r0, r0, #32
 800c5ba:	9b05      	ldr	r3, [sp, #20]
 800c5bc:	4418      	add	r0, r3
 800c5be:	f010 001f 	ands.w	r0, r0, #31
 800c5c2:	f000 8092 	beq.w	800c6ea <_dtoa_r+0x90a>
 800c5c6:	f1c0 0320 	rsb	r3, r0, #32
 800c5ca:	2b04      	cmp	r3, #4
 800c5cc:	f340 808a 	ble.w	800c6e4 <_dtoa_r+0x904>
 800c5d0:	f1c0 001c 	rsb	r0, r0, #28
 800c5d4:	9b04      	ldr	r3, [sp, #16]
 800c5d6:	4403      	add	r3, r0
 800c5d8:	9304      	str	r3, [sp, #16]
 800c5da:	9b05      	ldr	r3, [sp, #20]
 800c5dc:	4403      	add	r3, r0
 800c5de:	4405      	add	r5, r0
 800c5e0:	9305      	str	r3, [sp, #20]
 800c5e2:	9b04      	ldr	r3, [sp, #16]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	dd07      	ble.n	800c5f8 <_dtoa_r+0x818>
 800c5e8:	ee18 1a10 	vmov	r1, s16
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	f001 fa16 	bl	800da20 <__lshift>
 800c5f4:	ee08 0a10 	vmov	s16, r0
 800c5f8:	9b05      	ldr	r3, [sp, #20]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	dd05      	ble.n	800c60a <_dtoa_r+0x82a>
 800c5fe:	4631      	mov	r1, r6
 800c600:	461a      	mov	r2, r3
 800c602:	4620      	mov	r0, r4
 800c604:	f001 fa0c 	bl	800da20 <__lshift>
 800c608:	4606      	mov	r6, r0
 800c60a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d06e      	beq.n	800c6ee <_dtoa_r+0x90e>
 800c610:	ee18 0a10 	vmov	r0, s16
 800c614:	4631      	mov	r1, r6
 800c616:	f001 fa73 	bl	800db00 <__mcmp>
 800c61a:	2800      	cmp	r0, #0
 800c61c:	da67      	bge.n	800c6ee <_dtoa_r+0x90e>
 800c61e:	9b00      	ldr	r3, [sp, #0]
 800c620:	3b01      	subs	r3, #1
 800c622:	ee18 1a10 	vmov	r1, s16
 800c626:	9300      	str	r3, [sp, #0]
 800c628:	220a      	movs	r2, #10
 800c62a:	2300      	movs	r3, #0
 800c62c:	4620      	mov	r0, r4
 800c62e:	f000 fffd 	bl	800d62c <__multadd>
 800c632:	9b08      	ldr	r3, [sp, #32]
 800c634:	ee08 0a10 	vmov	s16, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	f000 81b1 	beq.w	800c9a0 <_dtoa_r+0xbc0>
 800c63e:	2300      	movs	r3, #0
 800c640:	4639      	mov	r1, r7
 800c642:	220a      	movs	r2, #10
 800c644:	4620      	mov	r0, r4
 800c646:	f000 fff1 	bl	800d62c <__multadd>
 800c64a:	9b02      	ldr	r3, [sp, #8]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	4607      	mov	r7, r0
 800c650:	f300 808e 	bgt.w	800c770 <_dtoa_r+0x990>
 800c654:	9b06      	ldr	r3, [sp, #24]
 800c656:	2b02      	cmp	r3, #2
 800c658:	dc51      	bgt.n	800c6fe <_dtoa_r+0x91e>
 800c65a:	e089      	b.n	800c770 <_dtoa_r+0x990>
 800c65c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c65e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c662:	e74b      	b.n	800c4fc <_dtoa_r+0x71c>
 800c664:	9b03      	ldr	r3, [sp, #12]
 800c666:	1e5e      	subs	r6, r3, #1
 800c668:	9b07      	ldr	r3, [sp, #28]
 800c66a:	42b3      	cmp	r3, r6
 800c66c:	bfbf      	itttt	lt
 800c66e:	9b07      	ldrlt	r3, [sp, #28]
 800c670:	9607      	strlt	r6, [sp, #28]
 800c672:	1af2      	sublt	r2, r6, r3
 800c674:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c676:	bfb6      	itet	lt
 800c678:	189b      	addlt	r3, r3, r2
 800c67a:	1b9e      	subge	r6, r3, r6
 800c67c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c67e:	9b03      	ldr	r3, [sp, #12]
 800c680:	bfb8      	it	lt
 800c682:	2600      	movlt	r6, #0
 800c684:	2b00      	cmp	r3, #0
 800c686:	bfb7      	itett	lt
 800c688:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c68c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c690:	1a9d      	sublt	r5, r3, r2
 800c692:	2300      	movlt	r3, #0
 800c694:	e734      	b.n	800c500 <_dtoa_r+0x720>
 800c696:	9e07      	ldr	r6, [sp, #28]
 800c698:	9d04      	ldr	r5, [sp, #16]
 800c69a:	9f08      	ldr	r7, [sp, #32]
 800c69c:	e73b      	b.n	800c516 <_dtoa_r+0x736>
 800c69e:	9a07      	ldr	r2, [sp, #28]
 800c6a0:	e767      	b.n	800c572 <_dtoa_r+0x792>
 800c6a2:	9b06      	ldr	r3, [sp, #24]
 800c6a4:	2b01      	cmp	r3, #1
 800c6a6:	dc18      	bgt.n	800c6da <_dtoa_r+0x8fa>
 800c6a8:	f1ba 0f00 	cmp.w	sl, #0
 800c6ac:	d115      	bne.n	800c6da <_dtoa_r+0x8fa>
 800c6ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c6b2:	b993      	cbnz	r3, 800c6da <_dtoa_r+0x8fa>
 800c6b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c6b8:	0d1b      	lsrs	r3, r3, #20
 800c6ba:	051b      	lsls	r3, r3, #20
 800c6bc:	b183      	cbz	r3, 800c6e0 <_dtoa_r+0x900>
 800c6be:	9b04      	ldr	r3, [sp, #16]
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	9304      	str	r3, [sp, #16]
 800c6c4:	9b05      	ldr	r3, [sp, #20]
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	9305      	str	r3, [sp, #20]
 800c6ca:	f04f 0801 	mov.w	r8, #1
 800c6ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	f47f af6a 	bne.w	800c5aa <_dtoa_r+0x7ca>
 800c6d6:	2001      	movs	r0, #1
 800c6d8:	e76f      	b.n	800c5ba <_dtoa_r+0x7da>
 800c6da:	f04f 0800 	mov.w	r8, #0
 800c6de:	e7f6      	b.n	800c6ce <_dtoa_r+0x8ee>
 800c6e0:	4698      	mov	r8, r3
 800c6e2:	e7f4      	b.n	800c6ce <_dtoa_r+0x8ee>
 800c6e4:	f43f af7d 	beq.w	800c5e2 <_dtoa_r+0x802>
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	301c      	adds	r0, #28
 800c6ec:	e772      	b.n	800c5d4 <_dtoa_r+0x7f4>
 800c6ee:	9b03      	ldr	r3, [sp, #12]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	dc37      	bgt.n	800c764 <_dtoa_r+0x984>
 800c6f4:	9b06      	ldr	r3, [sp, #24]
 800c6f6:	2b02      	cmp	r3, #2
 800c6f8:	dd34      	ble.n	800c764 <_dtoa_r+0x984>
 800c6fa:	9b03      	ldr	r3, [sp, #12]
 800c6fc:	9302      	str	r3, [sp, #8]
 800c6fe:	9b02      	ldr	r3, [sp, #8]
 800c700:	b96b      	cbnz	r3, 800c71e <_dtoa_r+0x93e>
 800c702:	4631      	mov	r1, r6
 800c704:	2205      	movs	r2, #5
 800c706:	4620      	mov	r0, r4
 800c708:	f000 ff90 	bl	800d62c <__multadd>
 800c70c:	4601      	mov	r1, r0
 800c70e:	4606      	mov	r6, r0
 800c710:	ee18 0a10 	vmov	r0, s16
 800c714:	f001 f9f4 	bl	800db00 <__mcmp>
 800c718:	2800      	cmp	r0, #0
 800c71a:	f73f adbb 	bgt.w	800c294 <_dtoa_r+0x4b4>
 800c71e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c720:	9d01      	ldr	r5, [sp, #4]
 800c722:	43db      	mvns	r3, r3
 800c724:	9300      	str	r3, [sp, #0]
 800c726:	f04f 0800 	mov.w	r8, #0
 800c72a:	4631      	mov	r1, r6
 800c72c:	4620      	mov	r0, r4
 800c72e:	f000 ff5b 	bl	800d5e8 <_Bfree>
 800c732:	2f00      	cmp	r7, #0
 800c734:	f43f aea4 	beq.w	800c480 <_dtoa_r+0x6a0>
 800c738:	f1b8 0f00 	cmp.w	r8, #0
 800c73c:	d005      	beq.n	800c74a <_dtoa_r+0x96a>
 800c73e:	45b8      	cmp	r8, r7
 800c740:	d003      	beq.n	800c74a <_dtoa_r+0x96a>
 800c742:	4641      	mov	r1, r8
 800c744:	4620      	mov	r0, r4
 800c746:	f000 ff4f 	bl	800d5e8 <_Bfree>
 800c74a:	4639      	mov	r1, r7
 800c74c:	4620      	mov	r0, r4
 800c74e:	f000 ff4b 	bl	800d5e8 <_Bfree>
 800c752:	e695      	b.n	800c480 <_dtoa_r+0x6a0>
 800c754:	2600      	movs	r6, #0
 800c756:	4637      	mov	r7, r6
 800c758:	e7e1      	b.n	800c71e <_dtoa_r+0x93e>
 800c75a:	9700      	str	r7, [sp, #0]
 800c75c:	4637      	mov	r7, r6
 800c75e:	e599      	b.n	800c294 <_dtoa_r+0x4b4>
 800c760:	40240000 	.word	0x40240000
 800c764:	9b08      	ldr	r3, [sp, #32]
 800c766:	2b00      	cmp	r3, #0
 800c768:	f000 80ca 	beq.w	800c900 <_dtoa_r+0xb20>
 800c76c:	9b03      	ldr	r3, [sp, #12]
 800c76e:	9302      	str	r3, [sp, #8]
 800c770:	2d00      	cmp	r5, #0
 800c772:	dd05      	ble.n	800c780 <_dtoa_r+0x9a0>
 800c774:	4639      	mov	r1, r7
 800c776:	462a      	mov	r2, r5
 800c778:	4620      	mov	r0, r4
 800c77a:	f001 f951 	bl	800da20 <__lshift>
 800c77e:	4607      	mov	r7, r0
 800c780:	f1b8 0f00 	cmp.w	r8, #0
 800c784:	d05b      	beq.n	800c83e <_dtoa_r+0xa5e>
 800c786:	6879      	ldr	r1, [r7, #4]
 800c788:	4620      	mov	r0, r4
 800c78a:	f000 feed 	bl	800d568 <_Balloc>
 800c78e:	4605      	mov	r5, r0
 800c790:	b928      	cbnz	r0, 800c79e <_dtoa_r+0x9be>
 800c792:	4b87      	ldr	r3, [pc, #540]	; (800c9b0 <_dtoa_r+0xbd0>)
 800c794:	4602      	mov	r2, r0
 800c796:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c79a:	f7ff bb3b 	b.w	800be14 <_dtoa_r+0x34>
 800c79e:	693a      	ldr	r2, [r7, #16]
 800c7a0:	3202      	adds	r2, #2
 800c7a2:	0092      	lsls	r2, r2, #2
 800c7a4:	f107 010c 	add.w	r1, r7, #12
 800c7a8:	300c      	adds	r0, #12
 800c7aa:	f7fd fbf9 	bl	8009fa0 <memcpy>
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	4629      	mov	r1, r5
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	f001 f934 	bl	800da20 <__lshift>
 800c7b8:	9b01      	ldr	r3, [sp, #4]
 800c7ba:	f103 0901 	add.w	r9, r3, #1
 800c7be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c7c2:	4413      	add	r3, r2
 800c7c4:	9305      	str	r3, [sp, #20]
 800c7c6:	f00a 0301 	and.w	r3, sl, #1
 800c7ca:	46b8      	mov	r8, r7
 800c7cc:	9304      	str	r3, [sp, #16]
 800c7ce:	4607      	mov	r7, r0
 800c7d0:	4631      	mov	r1, r6
 800c7d2:	ee18 0a10 	vmov	r0, s16
 800c7d6:	f7ff fa75 	bl	800bcc4 <quorem>
 800c7da:	4641      	mov	r1, r8
 800c7dc:	9002      	str	r0, [sp, #8]
 800c7de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c7e2:	ee18 0a10 	vmov	r0, s16
 800c7e6:	f001 f98b 	bl	800db00 <__mcmp>
 800c7ea:	463a      	mov	r2, r7
 800c7ec:	9003      	str	r0, [sp, #12]
 800c7ee:	4631      	mov	r1, r6
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	f001 f9a1 	bl	800db38 <__mdiff>
 800c7f6:	68c2      	ldr	r2, [r0, #12]
 800c7f8:	f109 3bff 	add.w	fp, r9, #4294967295
 800c7fc:	4605      	mov	r5, r0
 800c7fe:	bb02      	cbnz	r2, 800c842 <_dtoa_r+0xa62>
 800c800:	4601      	mov	r1, r0
 800c802:	ee18 0a10 	vmov	r0, s16
 800c806:	f001 f97b 	bl	800db00 <__mcmp>
 800c80a:	4602      	mov	r2, r0
 800c80c:	4629      	mov	r1, r5
 800c80e:	4620      	mov	r0, r4
 800c810:	9207      	str	r2, [sp, #28]
 800c812:	f000 fee9 	bl	800d5e8 <_Bfree>
 800c816:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c81a:	ea43 0102 	orr.w	r1, r3, r2
 800c81e:	9b04      	ldr	r3, [sp, #16]
 800c820:	430b      	orrs	r3, r1
 800c822:	464d      	mov	r5, r9
 800c824:	d10f      	bne.n	800c846 <_dtoa_r+0xa66>
 800c826:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c82a:	d02a      	beq.n	800c882 <_dtoa_r+0xaa2>
 800c82c:	9b03      	ldr	r3, [sp, #12]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	dd02      	ble.n	800c838 <_dtoa_r+0xa58>
 800c832:	9b02      	ldr	r3, [sp, #8]
 800c834:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c838:	f88b a000 	strb.w	sl, [fp]
 800c83c:	e775      	b.n	800c72a <_dtoa_r+0x94a>
 800c83e:	4638      	mov	r0, r7
 800c840:	e7ba      	b.n	800c7b8 <_dtoa_r+0x9d8>
 800c842:	2201      	movs	r2, #1
 800c844:	e7e2      	b.n	800c80c <_dtoa_r+0xa2c>
 800c846:	9b03      	ldr	r3, [sp, #12]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	db04      	blt.n	800c856 <_dtoa_r+0xa76>
 800c84c:	9906      	ldr	r1, [sp, #24]
 800c84e:	430b      	orrs	r3, r1
 800c850:	9904      	ldr	r1, [sp, #16]
 800c852:	430b      	orrs	r3, r1
 800c854:	d122      	bne.n	800c89c <_dtoa_r+0xabc>
 800c856:	2a00      	cmp	r2, #0
 800c858:	ddee      	ble.n	800c838 <_dtoa_r+0xa58>
 800c85a:	ee18 1a10 	vmov	r1, s16
 800c85e:	2201      	movs	r2, #1
 800c860:	4620      	mov	r0, r4
 800c862:	f001 f8dd 	bl	800da20 <__lshift>
 800c866:	4631      	mov	r1, r6
 800c868:	ee08 0a10 	vmov	s16, r0
 800c86c:	f001 f948 	bl	800db00 <__mcmp>
 800c870:	2800      	cmp	r0, #0
 800c872:	dc03      	bgt.n	800c87c <_dtoa_r+0xa9c>
 800c874:	d1e0      	bne.n	800c838 <_dtoa_r+0xa58>
 800c876:	f01a 0f01 	tst.w	sl, #1
 800c87a:	d0dd      	beq.n	800c838 <_dtoa_r+0xa58>
 800c87c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c880:	d1d7      	bne.n	800c832 <_dtoa_r+0xa52>
 800c882:	2339      	movs	r3, #57	; 0x39
 800c884:	f88b 3000 	strb.w	r3, [fp]
 800c888:	462b      	mov	r3, r5
 800c88a:	461d      	mov	r5, r3
 800c88c:	3b01      	subs	r3, #1
 800c88e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c892:	2a39      	cmp	r2, #57	; 0x39
 800c894:	d071      	beq.n	800c97a <_dtoa_r+0xb9a>
 800c896:	3201      	adds	r2, #1
 800c898:	701a      	strb	r2, [r3, #0]
 800c89a:	e746      	b.n	800c72a <_dtoa_r+0x94a>
 800c89c:	2a00      	cmp	r2, #0
 800c89e:	dd07      	ble.n	800c8b0 <_dtoa_r+0xad0>
 800c8a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c8a4:	d0ed      	beq.n	800c882 <_dtoa_r+0xaa2>
 800c8a6:	f10a 0301 	add.w	r3, sl, #1
 800c8aa:	f88b 3000 	strb.w	r3, [fp]
 800c8ae:	e73c      	b.n	800c72a <_dtoa_r+0x94a>
 800c8b0:	9b05      	ldr	r3, [sp, #20]
 800c8b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c8b6:	4599      	cmp	r9, r3
 800c8b8:	d047      	beq.n	800c94a <_dtoa_r+0xb6a>
 800c8ba:	ee18 1a10 	vmov	r1, s16
 800c8be:	2300      	movs	r3, #0
 800c8c0:	220a      	movs	r2, #10
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	f000 feb2 	bl	800d62c <__multadd>
 800c8c8:	45b8      	cmp	r8, r7
 800c8ca:	ee08 0a10 	vmov	s16, r0
 800c8ce:	f04f 0300 	mov.w	r3, #0
 800c8d2:	f04f 020a 	mov.w	r2, #10
 800c8d6:	4641      	mov	r1, r8
 800c8d8:	4620      	mov	r0, r4
 800c8da:	d106      	bne.n	800c8ea <_dtoa_r+0xb0a>
 800c8dc:	f000 fea6 	bl	800d62c <__multadd>
 800c8e0:	4680      	mov	r8, r0
 800c8e2:	4607      	mov	r7, r0
 800c8e4:	f109 0901 	add.w	r9, r9, #1
 800c8e8:	e772      	b.n	800c7d0 <_dtoa_r+0x9f0>
 800c8ea:	f000 fe9f 	bl	800d62c <__multadd>
 800c8ee:	4639      	mov	r1, r7
 800c8f0:	4680      	mov	r8, r0
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	220a      	movs	r2, #10
 800c8f6:	4620      	mov	r0, r4
 800c8f8:	f000 fe98 	bl	800d62c <__multadd>
 800c8fc:	4607      	mov	r7, r0
 800c8fe:	e7f1      	b.n	800c8e4 <_dtoa_r+0xb04>
 800c900:	9b03      	ldr	r3, [sp, #12]
 800c902:	9302      	str	r3, [sp, #8]
 800c904:	9d01      	ldr	r5, [sp, #4]
 800c906:	ee18 0a10 	vmov	r0, s16
 800c90a:	4631      	mov	r1, r6
 800c90c:	f7ff f9da 	bl	800bcc4 <quorem>
 800c910:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c914:	9b01      	ldr	r3, [sp, #4]
 800c916:	f805 ab01 	strb.w	sl, [r5], #1
 800c91a:	1aea      	subs	r2, r5, r3
 800c91c:	9b02      	ldr	r3, [sp, #8]
 800c91e:	4293      	cmp	r3, r2
 800c920:	dd09      	ble.n	800c936 <_dtoa_r+0xb56>
 800c922:	ee18 1a10 	vmov	r1, s16
 800c926:	2300      	movs	r3, #0
 800c928:	220a      	movs	r2, #10
 800c92a:	4620      	mov	r0, r4
 800c92c:	f000 fe7e 	bl	800d62c <__multadd>
 800c930:	ee08 0a10 	vmov	s16, r0
 800c934:	e7e7      	b.n	800c906 <_dtoa_r+0xb26>
 800c936:	9b02      	ldr	r3, [sp, #8]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	bfc8      	it	gt
 800c93c:	461d      	movgt	r5, r3
 800c93e:	9b01      	ldr	r3, [sp, #4]
 800c940:	bfd8      	it	le
 800c942:	2501      	movle	r5, #1
 800c944:	441d      	add	r5, r3
 800c946:	f04f 0800 	mov.w	r8, #0
 800c94a:	ee18 1a10 	vmov	r1, s16
 800c94e:	2201      	movs	r2, #1
 800c950:	4620      	mov	r0, r4
 800c952:	f001 f865 	bl	800da20 <__lshift>
 800c956:	4631      	mov	r1, r6
 800c958:	ee08 0a10 	vmov	s16, r0
 800c95c:	f001 f8d0 	bl	800db00 <__mcmp>
 800c960:	2800      	cmp	r0, #0
 800c962:	dc91      	bgt.n	800c888 <_dtoa_r+0xaa8>
 800c964:	d102      	bne.n	800c96c <_dtoa_r+0xb8c>
 800c966:	f01a 0f01 	tst.w	sl, #1
 800c96a:	d18d      	bne.n	800c888 <_dtoa_r+0xaa8>
 800c96c:	462b      	mov	r3, r5
 800c96e:	461d      	mov	r5, r3
 800c970:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c974:	2a30      	cmp	r2, #48	; 0x30
 800c976:	d0fa      	beq.n	800c96e <_dtoa_r+0xb8e>
 800c978:	e6d7      	b.n	800c72a <_dtoa_r+0x94a>
 800c97a:	9a01      	ldr	r2, [sp, #4]
 800c97c:	429a      	cmp	r2, r3
 800c97e:	d184      	bne.n	800c88a <_dtoa_r+0xaaa>
 800c980:	9b00      	ldr	r3, [sp, #0]
 800c982:	3301      	adds	r3, #1
 800c984:	9300      	str	r3, [sp, #0]
 800c986:	2331      	movs	r3, #49	; 0x31
 800c988:	7013      	strb	r3, [r2, #0]
 800c98a:	e6ce      	b.n	800c72a <_dtoa_r+0x94a>
 800c98c:	4b09      	ldr	r3, [pc, #36]	; (800c9b4 <_dtoa_r+0xbd4>)
 800c98e:	f7ff ba95 	b.w	800bebc <_dtoa_r+0xdc>
 800c992:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c994:	2b00      	cmp	r3, #0
 800c996:	f47f aa6e 	bne.w	800be76 <_dtoa_r+0x96>
 800c99a:	4b07      	ldr	r3, [pc, #28]	; (800c9b8 <_dtoa_r+0xbd8>)
 800c99c:	f7ff ba8e 	b.w	800bebc <_dtoa_r+0xdc>
 800c9a0:	9b02      	ldr	r3, [sp, #8]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	dcae      	bgt.n	800c904 <_dtoa_r+0xb24>
 800c9a6:	9b06      	ldr	r3, [sp, #24]
 800c9a8:	2b02      	cmp	r3, #2
 800c9aa:	f73f aea8 	bgt.w	800c6fe <_dtoa_r+0x91e>
 800c9ae:	e7a9      	b.n	800c904 <_dtoa_r+0xb24>
 800c9b0:	0800fcab 	.word	0x0800fcab
 800c9b4:	0800fb7c 	.word	0x0800fb7c
 800c9b8:	0800fc2c 	.word	0x0800fc2c

0800c9bc <__sflush_r>:
 800c9bc:	898a      	ldrh	r2, [r1, #12]
 800c9be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9c2:	4605      	mov	r5, r0
 800c9c4:	0710      	lsls	r0, r2, #28
 800c9c6:	460c      	mov	r4, r1
 800c9c8:	d458      	bmi.n	800ca7c <__sflush_r+0xc0>
 800c9ca:	684b      	ldr	r3, [r1, #4]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	dc05      	bgt.n	800c9dc <__sflush_r+0x20>
 800c9d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	dc02      	bgt.n	800c9dc <__sflush_r+0x20>
 800c9d6:	2000      	movs	r0, #0
 800c9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c9de:	2e00      	cmp	r6, #0
 800c9e0:	d0f9      	beq.n	800c9d6 <__sflush_r+0x1a>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c9e8:	682f      	ldr	r7, [r5, #0]
 800c9ea:	602b      	str	r3, [r5, #0]
 800c9ec:	d032      	beq.n	800ca54 <__sflush_r+0x98>
 800c9ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c9f0:	89a3      	ldrh	r3, [r4, #12]
 800c9f2:	075a      	lsls	r2, r3, #29
 800c9f4:	d505      	bpl.n	800ca02 <__sflush_r+0x46>
 800c9f6:	6863      	ldr	r3, [r4, #4]
 800c9f8:	1ac0      	subs	r0, r0, r3
 800c9fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c9fc:	b10b      	cbz	r3, 800ca02 <__sflush_r+0x46>
 800c9fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ca00:	1ac0      	subs	r0, r0, r3
 800ca02:	2300      	movs	r3, #0
 800ca04:	4602      	mov	r2, r0
 800ca06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca08:	6a21      	ldr	r1, [r4, #32]
 800ca0a:	4628      	mov	r0, r5
 800ca0c:	47b0      	blx	r6
 800ca0e:	1c43      	adds	r3, r0, #1
 800ca10:	89a3      	ldrh	r3, [r4, #12]
 800ca12:	d106      	bne.n	800ca22 <__sflush_r+0x66>
 800ca14:	6829      	ldr	r1, [r5, #0]
 800ca16:	291d      	cmp	r1, #29
 800ca18:	d82c      	bhi.n	800ca74 <__sflush_r+0xb8>
 800ca1a:	4a2a      	ldr	r2, [pc, #168]	; (800cac4 <__sflush_r+0x108>)
 800ca1c:	40ca      	lsrs	r2, r1
 800ca1e:	07d6      	lsls	r6, r2, #31
 800ca20:	d528      	bpl.n	800ca74 <__sflush_r+0xb8>
 800ca22:	2200      	movs	r2, #0
 800ca24:	6062      	str	r2, [r4, #4]
 800ca26:	04d9      	lsls	r1, r3, #19
 800ca28:	6922      	ldr	r2, [r4, #16]
 800ca2a:	6022      	str	r2, [r4, #0]
 800ca2c:	d504      	bpl.n	800ca38 <__sflush_r+0x7c>
 800ca2e:	1c42      	adds	r2, r0, #1
 800ca30:	d101      	bne.n	800ca36 <__sflush_r+0x7a>
 800ca32:	682b      	ldr	r3, [r5, #0]
 800ca34:	b903      	cbnz	r3, 800ca38 <__sflush_r+0x7c>
 800ca36:	6560      	str	r0, [r4, #84]	; 0x54
 800ca38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca3a:	602f      	str	r7, [r5, #0]
 800ca3c:	2900      	cmp	r1, #0
 800ca3e:	d0ca      	beq.n	800c9d6 <__sflush_r+0x1a>
 800ca40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca44:	4299      	cmp	r1, r3
 800ca46:	d002      	beq.n	800ca4e <__sflush_r+0x92>
 800ca48:	4628      	mov	r0, r5
 800ca4a:	f7fd fabf 	bl	8009fcc <_free_r>
 800ca4e:	2000      	movs	r0, #0
 800ca50:	6360      	str	r0, [r4, #52]	; 0x34
 800ca52:	e7c1      	b.n	800c9d8 <__sflush_r+0x1c>
 800ca54:	6a21      	ldr	r1, [r4, #32]
 800ca56:	2301      	movs	r3, #1
 800ca58:	4628      	mov	r0, r5
 800ca5a:	47b0      	blx	r6
 800ca5c:	1c41      	adds	r1, r0, #1
 800ca5e:	d1c7      	bne.n	800c9f0 <__sflush_r+0x34>
 800ca60:	682b      	ldr	r3, [r5, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d0c4      	beq.n	800c9f0 <__sflush_r+0x34>
 800ca66:	2b1d      	cmp	r3, #29
 800ca68:	d001      	beq.n	800ca6e <__sflush_r+0xb2>
 800ca6a:	2b16      	cmp	r3, #22
 800ca6c:	d101      	bne.n	800ca72 <__sflush_r+0xb6>
 800ca6e:	602f      	str	r7, [r5, #0]
 800ca70:	e7b1      	b.n	800c9d6 <__sflush_r+0x1a>
 800ca72:	89a3      	ldrh	r3, [r4, #12]
 800ca74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca78:	81a3      	strh	r3, [r4, #12]
 800ca7a:	e7ad      	b.n	800c9d8 <__sflush_r+0x1c>
 800ca7c:	690f      	ldr	r7, [r1, #16]
 800ca7e:	2f00      	cmp	r7, #0
 800ca80:	d0a9      	beq.n	800c9d6 <__sflush_r+0x1a>
 800ca82:	0793      	lsls	r3, r2, #30
 800ca84:	680e      	ldr	r6, [r1, #0]
 800ca86:	bf08      	it	eq
 800ca88:	694b      	ldreq	r3, [r1, #20]
 800ca8a:	600f      	str	r7, [r1, #0]
 800ca8c:	bf18      	it	ne
 800ca8e:	2300      	movne	r3, #0
 800ca90:	eba6 0807 	sub.w	r8, r6, r7
 800ca94:	608b      	str	r3, [r1, #8]
 800ca96:	f1b8 0f00 	cmp.w	r8, #0
 800ca9a:	dd9c      	ble.n	800c9d6 <__sflush_r+0x1a>
 800ca9c:	6a21      	ldr	r1, [r4, #32]
 800ca9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800caa0:	4643      	mov	r3, r8
 800caa2:	463a      	mov	r2, r7
 800caa4:	4628      	mov	r0, r5
 800caa6:	47b0      	blx	r6
 800caa8:	2800      	cmp	r0, #0
 800caaa:	dc06      	bgt.n	800caba <__sflush_r+0xfe>
 800caac:	89a3      	ldrh	r3, [r4, #12]
 800caae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cab2:	81a3      	strh	r3, [r4, #12]
 800cab4:	f04f 30ff 	mov.w	r0, #4294967295
 800cab8:	e78e      	b.n	800c9d8 <__sflush_r+0x1c>
 800caba:	4407      	add	r7, r0
 800cabc:	eba8 0800 	sub.w	r8, r8, r0
 800cac0:	e7e9      	b.n	800ca96 <__sflush_r+0xda>
 800cac2:	bf00      	nop
 800cac4:	20400001 	.word	0x20400001

0800cac8 <_fflush_r>:
 800cac8:	b538      	push	{r3, r4, r5, lr}
 800caca:	690b      	ldr	r3, [r1, #16]
 800cacc:	4605      	mov	r5, r0
 800cace:	460c      	mov	r4, r1
 800cad0:	b913      	cbnz	r3, 800cad8 <_fflush_r+0x10>
 800cad2:	2500      	movs	r5, #0
 800cad4:	4628      	mov	r0, r5
 800cad6:	bd38      	pop	{r3, r4, r5, pc}
 800cad8:	b118      	cbz	r0, 800cae2 <_fflush_r+0x1a>
 800cada:	6983      	ldr	r3, [r0, #24]
 800cadc:	b90b      	cbnz	r3, 800cae2 <_fflush_r+0x1a>
 800cade:	f000 f887 	bl	800cbf0 <__sinit>
 800cae2:	4b14      	ldr	r3, [pc, #80]	; (800cb34 <_fflush_r+0x6c>)
 800cae4:	429c      	cmp	r4, r3
 800cae6:	d11b      	bne.n	800cb20 <_fflush_r+0x58>
 800cae8:	686c      	ldr	r4, [r5, #4]
 800caea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d0ef      	beq.n	800cad2 <_fflush_r+0xa>
 800caf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800caf4:	07d0      	lsls	r0, r2, #31
 800caf6:	d404      	bmi.n	800cb02 <_fflush_r+0x3a>
 800caf8:	0599      	lsls	r1, r3, #22
 800cafa:	d402      	bmi.n	800cb02 <_fflush_r+0x3a>
 800cafc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cafe:	f000 fc9a 	bl	800d436 <__retarget_lock_acquire_recursive>
 800cb02:	4628      	mov	r0, r5
 800cb04:	4621      	mov	r1, r4
 800cb06:	f7ff ff59 	bl	800c9bc <__sflush_r>
 800cb0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb0c:	07da      	lsls	r2, r3, #31
 800cb0e:	4605      	mov	r5, r0
 800cb10:	d4e0      	bmi.n	800cad4 <_fflush_r+0xc>
 800cb12:	89a3      	ldrh	r3, [r4, #12]
 800cb14:	059b      	lsls	r3, r3, #22
 800cb16:	d4dd      	bmi.n	800cad4 <_fflush_r+0xc>
 800cb18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb1a:	f000 fc8d 	bl	800d438 <__retarget_lock_release_recursive>
 800cb1e:	e7d9      	b.n	800cad4 <_fflush_r+0xc>
 800cb20:	4b05      	ldr	r3, [pc, #20]	; (800cb38 <_fflush_r+0x70>)
 800cb22:	429c      	cmp	r4, r3
 800cb24:	d101      	bne.n	800cb2a <_fflush_r+0x62>
 800cb26:	68ac      	ldr	r4, [r5, #8]
 800cb28:	e7df      	b.n	800caea <_fflush_r+0x22>
 800cb2a:	4b04      	ldr	r3, [pc, #16]	; (800cb3c <_fflush_r+0x74>)
 800cb2c:	429c      	cmp	r4, r3
 800cb2e:	bf08      	it	eq
 800cb30:	68ec      	ldreq	r4, [r5, #12]
 800cb32:	e7da      	b.n	800caea <_fflush_r+0x22>
 800cb34:	0800fcdc 	.word	0x0800fcdc
 800cb38:	0800fcfc 	.word	0x0800fcfc
 800cb3c:	0800fcbc 	.word	0x0800fcbc

0800cb40 <std>:
 800cb40:	2300      	movs	r3, #0
 800cb42:	b510      	push	{r4, lr}
 800cb44:	4604      	mov	r4, r0
 800cb46:	e9c0 3300 	strd	r3, r3, [r0]
 800cb4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cb4e:	6083      	str	r3, [r0, #8]
 800cb50:	8181      	strh	r1, [r0, #12]
 800cb52:	6643      	str	r3, [r0, #100]	; 0x64
 800cb54:	81c2      	strh	r2, [r0, #14]
 800cb56:	6183      	str	r3, [r0, #24]
 800cb58:	4619      	mov	r1, r3
 800cb5a:	2208      	movs	r2, #8
 800cb5c:	305c      	adds	r0, #92	; 0x5c
 800cb5e:	f7fd fa2d 	bl	8009fbc <memset>
 800cb62:	4b05      	ldr	r3, [pc, #20]	; (800cb78 <std+0x38>)
 800cb64:	6263      	str	r3, [r4, #36]	; 0x24
 800cb66:	4b05      	ldr	r3, [pc, #20]	; (800cb7c <std+0x3c>)
 800cb68:	62a3      	str	r3, [r4, #40]	; 0x28
 800cb6a:	4b05      	ldr	r3, [pc, #20]	; (800cb80 <std+0x40>)
 800cb6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cb6e:	4b05      	ldr	r3, [pc, #20]	; (800cb84 <std+0x44>)
 800cb70:	6224      	str	r4, [r4, #32]
 800cb72:	6323      	str	r3, [r4, #48]	; 0x30
 800cb74:	bd10      	pop	{r4, pc}
 800cb76:	bf00      	nop
 800cb78:	0800aac1 	.word	0x0800aac1
 800cb7c:	0800aae3 	.word	0x0800aae3
 800cb80:	0800ab1b 	.word	0x0800ab1b
 800cb84:	0800ab3f 	.word	0x0800ab3f

0800cb88 <_cleanup_r>:
 800cb88:	4901      	ldr	r1, [pc, #4]	; (800cb90 <_cleanup_r+0x8>)
 800cb8a:	f000 b8c1 	b.w	800cd10 <_fwalk_reent>
 800cb8e:	bf00      	nop
 800cb90:	0800cac9 	.word	0x0800cac9

0800cb94 <__sfmoreglue>:
 800cb94:	b570      	push	{r4, r5, r6, lr}
 800cb96:	2268      	movs	r2, #104	; 0x68
 800cb98:	1e4d      	subs	r5, r1, #1
 800cb9a:	4355      	muls	r5, r2
 800cb9c:	460e      	mov	r6, r1
 800cb9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cba2:	f7fd fa7f 	bl	800a0a4 <_malloc_r>
 800cba6:	4604      	mov	r4, r0
 800cba8:	b140      	cbz	r0, 800cbbc <__sfmoreglue+0x28>
 800cbaa:	2100      	movs	r1, #0
 800cbac:	e9c0 1600 	strd	r1, r6, [r0]
 800cbb0:	300c      	adds	r0, #12
 800cbb2:	60a0      	str	r0, [r4, #8]
 800cbb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cbb8:	f7fd fa00 	bl	8009fbc <memset>
 800cbbc:	4620      	mov	r0, r4
 800cbbe:	bd70      	pop	{r4, r5, r6, pc}

0800cbc0 <__sfp_lock_acquire>:
 800cbc0:	4801      	ldr	r0, [pc, #4]	; (800cbc8 <__sfp_lock_acquire+0x8>)
 800cbc2:	f000 bc38 	b.w	800d436 <__retarget_lock_acquire_recursive>
 800cbc6:	bf00      	nop
 800cbc8:	20002eed 	.word	0x20002eed

0800cbcc <__sfp_lock_release>:
 800cbcc:	4801      	ldr	r0, [pc, #4]	; (800cbd4 <__sfp_lock_release+0x8>)
 800cbce:	f000 bc33 	b.w	800d438 <__retarget_lock_release_recursive>
 800cbd2:	bf00      	nop
 800cbd4:	20002eed 	.word	0x20002eed

0800cbd8 <__sinit_lock_acquire>:
 800cbd8:	4801      	ldr	r0, [pc, #4]	; (800cbe0 <__sinit_lock_acquire+0x8>)
 800cbda:	f000 bc2c 	b.w	800d436 <__retarget_lock_acquire_recursive>
 800cbde:	bf00      	nop
 800cbe0:	20002eee 	.word	0x20002eee

0800cbe4 <__sinit_lock_release>:
 800cbe4:	4801      	ldr	r0, [pc, #4]	; (800cbec <__sinit_lock_release+0x8>)
 800cbe6:	f000 bc27 	b.w	800d438 <__retarget_lock_release_recursive>
 800cbea:	bf00      	nop
 800cbec:	20002eee 	.word	0x20002eee

0800cbf0 <__sinit>:
 800cbf0:	b510      	push	{r4, lr}
 800cbf2:	4604      	mov	r4, r0
 800cbf4:	f7ff fff0 	bl	800cbd8 <__sinit_lock_acquire>
 800cbf8:	69a3      	ldr	r3, [r4, #24]
 800cbfa:	b11b      	cbz	r3, 800cc04 <__sinit+0x14>
 800cbfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc00:	f7ff bff0 	b.w	800cbe4 <__sinit_lock_release>
 800cc04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cc08:	6523      	str	r3, [r4, #80]	; 0x50
 800cc0a:	4b13      	ldr	r3, [pc, #76]	; (800cc58 <__sinit+0x68>)
 800cc0c:	4a13      	ldr	r2, [pc, #76]	; (800cc5c <__sinit+0x6c>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	62a2      	str	r2, [r4, #40]	; 0x28
 800cc12:	42a3      	cmp	r3, r4
 800cc14:	bf04      	itt	eq
 800cc16:	2301      	moveq	r3, #1
 800cc18:	61a3      	streq	r3, [r4, #24]
 800cc1a:	4620      	mov	r0, r4
 800cc1c:	f000 f820 	bl	800cc60 <__sfp>
 800cc20:	6060      	str	r0, [r4, #4]
 800cc22:	4620      	mov	r0, r4
 800cc24:	f000 f81c 	bl	800cc60 <__sfp>
 800cc28:	60a0      	str	r0, [r4, #8]
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	f000 f818 	bl	800cc60 <__sfp>
 800cc30:	2200      	movs	r2, #0
 800cc32:	60e0      	str	r0, [r4, #12]
 800cc34:	2104      	movs	r1, #4
 800cc36:	6860      	ldr	r0, [r4, #4]
 800cc38:	f7ff ff82 	bl	800cb40 <std>
 800cc3c:	68a0      	ldr	r0, [r4, #8]
 800cc3e:	2201      	movs	r2, #1
 800cc40:	2109      	movs	r1, #9
 800cc42:	f7ff ff7d 	bl	800cb40 <std>
 800cc46:	68e0      	ldr	r0, [r4, #12]
 800cc48:	2202      	movs	r2, #2
 800cc4a:	2112      	movs	r1, #18
 800cc4c:	f7ff ff78 	bl	800cb40 <std>
 800cc50:	2301      	movs	r3, #1
 800cc52:	61a3      	str	r3, [r4, #24]
 800cc54:	e7d2      	b.n	800cbfc <__sinit+0xc>
 800cc56:	bf00      	nop
 800cc58:	0800fb68 	.word	0x0800fb68
 800cc5c:	0800cb89 	.word	0x0800cb89

0800cc60 <__sfp>:
 800cc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc62:	4607      	mov	r7, r0
 800cc64:	f7ff ffac 	bl	800cbc0 <__sfp_lock_acquire>
 800cc68:	4b1e      	ldr	r3, [pc, #120]	; (800cce4 <__sfp+0x84>)
 800cc6a:	681e      	ldr	r6, [r3, #0]
 800cc6c:	69b3      	ldr	r3, [r6, #24]
 800cc6e:	b913      	cbnz	r3, 800cc76 <__sfp+0x16>
 800cc70:	4630      	mov	r0, r6
 800cc72:	f7ff ffbd 	bl	800cbf0 <__sinit>
 800cc76:	3648      	adds	r6, #72	; 0x48
 800cc78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cc7c:	3b01      	subs	r3, #1
 800cc7e:	d503      	bpl.n	800cc88 <__sfp+0x28>
 800cc80:	6833      	ldr	r3, [r6, #0]
 800cc82:	b30b      	cbz	r3, 800ccc8 <__sfp+0x68>
 800cc84:	6836      	ldr	r6, [r6, #0]
 800cc86:	e7f7      	b.n	800cc78 <__sfp+0x18>
 800cc88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cc8c:	b9d5      	cbnz	r5, 800ccc4 <__sfp+0x64>
 800cc8e:	4b16      	ldr	r3, [pc, #88]	; (800cce8 <__sfp+0x88>)
 800cc90:	60e3      	str	r3, [r4, #12]
 800cc92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cc96:	6665      	str	r5, [r4, #100]	; 0x64
 800cc98:	f000 fbcc 	bl	800d434 <__retarget_lock_init_recursive>
 800cc9c:	f7ff ff96 	bl	800cbcc <__sfp_lock_release>
 800cca0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cca4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cca8:	6025      	str	r5, [r4, #0]
 800ccaa:	61a5      	str	r5, [r4, #24]
 800ccac:	2208      	movs	r2, #8
 800ccae:	4629      	mov	r1, r5
 800ccb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ccb4:	f7fd f982 	bl	8009fbc <memset>
 800ccb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ccbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccc4:	3468      	adds	r4, #104	; 0x68
 800ccc6:	e7d9      	b.n	800cc7c <__sfp+0x1c>
 800ccc8:	2104      	movs	r1, #4
 800ccca:	4638      	mov	r0, r7
 800cccc:	f7ff ff62 	bl	800cb94 <__sfmoreglue>
 800ccd0:	4604      	mov	r4, r0
 800ccd2:	6030      	str	r0, [r6, #0]
 800ccd4:	2800      	cmp	r0, #0
 800ccd6:	d1d5      	bne.n	800cc84 <__sfp+0x24>
 800ccd8:	f7ff ff78 	bl	800cbcc <__sfp_lock_release>
 800ccdc:	230c      	movs	r3, #12
 800ccde:	603b      	str	r3, [r7, #0]
 800cce0:	e7ee      	b.n	800ccc0 <__sfp+0x60>
 800cce2:	bf00      	nop
 800cce4:	0800fb68 	.word	0x0800fb68
 800cce8:	ffff0001 	.word	0xffff0001

0800ccec <fiprintf>:
 800ccec:	b40e      	push	{r1, r2, r3}
 800ccee:	b503      	push	{r0, r1, lr}
 800ccf0:	4601      	mov	r1, r0
 800ccf2:	ab03      	add	r3, sp, #12
 800ccf4:	4805      	ldr	r0, [pc, #20]	; (800cd0c <fiprintf+0x20>)
 800ccf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccfa:	6800      	ldr	r0, [r0, #0]
 800ccfc:	9301      	str	r3, [sp, #4]
 800ccfe:	f001 fa8f 	bl	800e220 <_vfiprintf_r>
 800cd02:	b002      	add	sp, #8
 800cd04:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd08:	b003      	add	sp, #12
 800cd0a:	4770      	bx	lr
 800cd0c:	200000c4 	.word	0x200000c4

0800cd10 <_fwalk_reent>:
 800cd10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd14:	4606      	mov	r6, r0
 800cd16:	4688      	mov	r8, r1
 800cd18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cd1c:	2700      	movs	r7, #0
 800cd1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd22:	f1b9 0901 	subs.w	r9, r9, #1
 800cd26:	d505      	bpl.n	800cd34 <_fwalk_reent+0x24>
 800cd28:	6824      	ldr	r4, [r4, #0]
 800cd2a:	2c00      	cmp	r4, #0
 800cd2c:	d1f7      	bne.n	800cd1e <_fwalk_reent+0xe>
 800cd2e:	4638      	mov	r0, r7
 800cd30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd34:	89ab      	ldrh	r3, [r5, #12]
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	d907      	bls.n	800cd4a <_fwalk_reent+0x3a>
 800cd3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cd3e:	3301      	adds	r3, #1
 800cd40:	d003      	beq.n	800cd4a <_fwalk_reent+0x3a>
 800cd42:	4629      	mov	r1, r5
 800cd44:	4630      	mov	r0, r6
 800cd46:	47c0      	blx	r8
 800cd48:	4307      	orrs	r7, r0
 800cd4a:	3568      	adds	r5, #104	; 0x68
 800cd4c:	e7e9      	b.n	800cd22 <_fwalk_reent+0x12>

0800cd4e <rshift>:
 800cd4e:	6903      	ldr	r3, [r0, #16]
 800cd50:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cd54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd58:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cd5c:	f100 0414 	add.w	r4, r0, #20
 800cd60:	dd45      	ble.n	800cdee <rshift+0xa0>
 800cd62:	f011 011f 	ands.w	r1, r1, #31
 800cd66:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cd6a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cd6e:	d10c      	bne.n	800cd8a <rshift+0x3c>
 800cd70:	f100 0710 	add.w	r7, r0, #16
 800cd74:	4629      	mov	r1, r5
 800cd76:	42b1      	cmp	r1, r6
 800cd78:	d334      	bcc.n	800cde4 <rshift+0x96>
 800cd7a:	1a9b      	subs	r3, r3, r2
 800cd7c:	009b      	lsls	r3, r3, #2
 800cd7e:	1eea      	subs	r2, r5, #3
 800cd80:	4296      	cmp	r6, r2
 800cd82:	bf38      	it	cc
 800cd84:	2300      	movcc	r3, #0
 800cd86:	4423      	add	r3, r4
 800cd88:	e015      	b.n	800cdb6 <rshift+0x68>
 800cd8a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cd8e:	f1c1 0820 	rsb	r8, r1, #32
 800cd92:	40cf      	lsrs	r7, r1
 800cd94:	f105 0e04 	add.w	lr, r5, #4
 800cd98:	46a1      	mov	r9, r4
 800cd9a:	4576      	cmp	r6, lr
 800cd9c:	46f4      	mov	ip, lr
 800cd9e:	d815      	bhi.n	800cdcc <rshift+0x7e>
 800cda0:	1a9a      	subs	r2, r3, r2
 800cda2:	0092      	lsls	r2, r2, #2
 800cda4:	3a04      	subs	r2, #4
 800cda6:	3501      	adds	r5, #1
 800cda8:	42ae      	cmp	r6, r5
 800cdaa:	bf38      	it	cc
 800cdac:	2200      	movcc	r2, #0
 800cdae:	18a3      	adds	r3, r4, r2
 800cdb0:	50a7      	str	r7, [r4, r2]
 800cdb2:	b107      	cbz	r7, 800cdb6 <rshift+0x68>
 800cdb4:	3304      	adds	r3, #4
 800cdb6:	1b1a      	subs	r2, r3, r4
 800cdb8:	42a3      	cmp	r3, r4
 800cdba:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cdbe:	bf08      	it	eq
 800cdc0:	2300      	moveq	r3, #0
 800cdc2:	6102      	str	r2, [r0, #16]
 800cdc4:	bf08      	it	eq
 800cdc6:	6143      	streq	r3, [r0, #20]
 800cdc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdcc:	f8dc c000 	ldr.w	ip, [ip]
 800cdd0:	fa0c fc08 	lsl.w	ip, ip, r8
 800cdd4:	ea4c 0707 	orr.w	r7, ip, r7
 800cdd8:	f849 7b04 	str.w	r7, [r9], #4
 800cddc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cde0:	40cf      	lsrs	r7, r1
 800cde2:	e7da      	b.n	800cd9a <rshift+0x4c>
 800cde4:	f851 cb04 	ldr.w	ip, [r1], #4
 800cde8:	f847 cf04 	str.w	ip, [r7, #4]!
 800cdec:	e7c3      	b.n	800cd76 <rshift+0x28>
 800cdee:	4623      	mov	r3, r4
 800cdf0:	e7e1      	b.n	800cdb6 <rshift+0x68>

0800cdf2 <__hexdig_fun>:
 800cdf2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cdf6:	2b09      	cmp	r3, #9
 800cdf8:	d802      	bhi.n	800ce00 <__hexdig_fun+0xe>
 800cdfa:	3820      	subs	r0, #32
 800cdfc:	b2c0      	uxtb	r0, r0
 800cdfe:	4770      	bx	lr
 800ce00:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ce04:	2b05      	cmp	r3, #5
 800ce06:	d801      	bhi.n	800ce0c <__hexdig_fun+0x1a>
 800ce08:	3847      	subs	r0, #71	; 0x47
 800ce0a:	e7f7      	b.n	800cdfc <__hexdig_fun+0xa>
 800ce0c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ce10:	2b05      	cmp	r3, #5
 800ce12:	d801      	bhi.n	800ce18 <__hexdig_fun+0x26>
 800ce14:	3827      	subs	r0, #39	; 0x27
 800ce16:	e7f1      	b.n	800cdfc <__hexdig_fun+0xa>
 800ce18:	2000      	movs	r0, #0
 800ce1a:	4770      	bx	lr

0800ce1c <__gethex>:
 800ce1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce20:	ed2d 8b02 	vpush	{d8}
 800ce24:	b089      	sub	sp, #36	; 0x24
 800ce26:	ee08 0a10 	vmov	s16, r0
 800ce2a:	9304      	str	r3, [sp, #16]
 800ce2c:	4bb4      	ldr	r3, [pc, #720]	; (800d100 <__gethex+0x2e4>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	9301      	str	r3, [sp, #4]
 800ce32:	4618      	mov	r0, r3
 800ce34:	468b      	mov	fp, r1
 800ce36:	4690      	mov	r8, r2
 800ce38:	f7f3 f9d2 	bl	80001e0 <strlen>
 800ce3c:	9b01      	ldr	r3, [sp, #4]
 800ce3e:	f8db 2000 	ldr.w	r2, [fp]
 800ce42:	4403      	add	r3, r0
 800ce44:	4682      	mov	sl, r0
 800ce46:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ce4a:	9305      	str	r3, [sp, #20]
 800ce4c:	1c93      	adds	r3, r2, #2
 800ce4e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ce52:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ce56:	32fe      	adds	r2, #254	; 0xfe
 800ce58:	18d1      	adds	r1, r2, r3
 800ce5a:	461f      	mov	r7, r3
 800ce5c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ce60:	9100      	str	r1, [sp, #0]
 800ce62:	2830      	cmp	r0, #48	; 0x30
 800ce64:	d0f8      	beq.n	800ce58 <__gethex+0x3c>
 800ce66:	f7ff ffc4 	bl	800cdf2 <__hexdig_fun>
 800ce6a:	4604      	mov	r4, r0
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	d13a      	bne.n	800cee6 <__gethex+0xca>
 800ce70:	9901      	ldr	r1, [sp, #4]
 800ce72:	4652      	mov	r2, sl
 800ce74:	4638      	mov	r0, r7
 800ce76:	f7fd fe66 	bl	800ab46 <strncmp>
 800ce7a:	4605      	mov	r5, r0
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	d168      	bne.n	800cf52 <__gethex+0x136>
 800ce80:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ce84:	eb07 060a 	add.w	r6, r7, sl
 800ce88:	f7ff ffb3 	bl	800cdf2 <__hexdig_fun>
 800ce8c:	2800      	cmp	r0, #0
 800ce8e:	d062      	beq.n	800cf56 <__gethex+0x13a>
 800ce90:	4633      	mov	r3, r6
 800ce92:	7818      	ldrb	r0, [r3, #0]
 800ce94:	2830      	cmp	r0, #48	; 0x30
 800ce96:	461f      	mov	r7, r3
 800ce98:	f103 0301 	add.w	r3, r3, #1
 800ce9c:	d0f9      	beq.n	800ce92 <__gethex+0x76>
 800ce9e:	f7ff ffa8 	bl	800cdf2 <__hexdig_fun>
 800cea2:	2301      	movs	r3, #1
 800cea4:	fab0 f480 	clz	r4, r0
 800cea8:	0964      	lsrs	r4, r4, #5
 800ceaa:	4635      	mov	r5, r6
 800ceac:	9300      	str	r3, [sp, #0]
 800ceae:	463a      	mov	r2, r7
 800ceb0:	4616      	mov	r6, r2
 800ceb2:	3201      	adds	r2, #1
 800ceb4:	7830      	ldrb	r0, [r6, #0]
 800ceb6:	f7ff ff9c 	bl	800cdf2 <__hexdig_fun>
 800ceba:	2800      	cmp	r0, #0
 800cebc:	d1f8      	bne.n	800ceb0 <__gethex+0x94>
 800cebe:	9901      	ldr	r1, [sp, #4]
 800cec0:	4652      	mov	r2, sl
 800cec2:	4630      	mov	r0, r6
 800cec4:	f7fd fe3f 	bl	800ab46 <strncmp>
 800cec8:	b980      	cbnz	r0, 800ceec <__gethex+0xd0>
 800ceca:	b94d      	cbnz	r5, 800cee0 <__gethex+0xc4>
 800cecc:	eb06 050a 	add.w	r5, r6, sl
 800ced0:	462a      	mov	r2, r5
 800ced2:	4616      	mov	r6, r2
 800ced4:	3201      	adds	r2, #1
 800ced6:	7830      	ldrb	r0, [r6, #0]
 800ced8:	f7ff ff8b 	bl	800cdf2 <__hexdig_fun>
 800cedc:	2800      	cmp	r0, #0
 800cede:	d1f8      	bne.n	800ced2 <__gethex+0xb6>
 800cee0:	1bad      	subs	r5, r5, r6
 800cee2:	00ad      	lsls	r5, r5, #2
 800cee4:	e004      	b.n	800cef0 <__gethex+0xd4>
 800cee6:	2400      	movs	r4, #0
 800cee8:	4625      	mov	r5, r4
 800ceea:	e7e0      	b.n	800ceae <__gethex+0x92>
 800ceec:	2d00      	cmp	r5, #0
 800ceee:	d1f7      	bne.n	800cee0 <__gethex+0xc4>
 800cef0:	7833      	ldrb	r3, [r6, #0]
 800cef2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cef6:	2b50      	cmp	r3, #80	; 0x50
 800cef8:	d13b      	bne.n	800cf72 <__gethex+0x156>
 800cefa:	7873      	ldrb	r3, [r6, #1]
 800cefc:	2b2b      	cmp	r3, #43	; 0x2b
 800cefe:	d02c      	beq.n	800cf5a <__gethex+0x13e>
 800cf00:	2b2d      	cmp	r3, #45	; 0x2d
 800cf02:	d02e      	beq.n	800cf62 <__gethex+0x146>
 800cf04:	1c71      	adds	r1, r6, #1
 800cf06:	f04f 0900 	mov.w	r9, #0
 800cf0a:	7808      	ldrb	r0, [r1, #0]
 800cf0c:	f7ff ff71 	bl	800cdf2 <__hexdig_fun>
 800cf10:	1e43      	subs	r3, r0, #1
 800cf12:	b2db      	uxtb	r3, r3
 800cf14:	2b18      	cmp	r3, #24
 800cf16:	d82c      	bhi.n	800cf72 <__gethex+0x156>
 800cf18:	f1a0 0210 	sub.w	r2, r0, #16
 800cf1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cf20:	f7ff ff67 	bl	800cdf2 <__hexdig_fun>
 800cf24:	1e43      	subs	r3, r0, #1
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	2b18      	cmp	r3, #24
 800cf2a:	d91d      	bls.n	800cf68 <__gethex+0x14c>
 800cf2c:	f1b9 0f00 	cmp.w	r9, #0
 800cf30:	d000      	beq.n	800cf34 <__gethex+0x118>
 800cf32:	4252      	negs	r2, r2
 800cf34:	4415      	add	r5, r2
 800cf36:	f8cb 1000 	str.w	r1, [fp]
 800cf3a:	b1e4      	cbz	r4, 800cf76 <__gethex+0x15a>
 800cf3c:	9b00      	ldr	r3, [sp, #0]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	bf14      	ite	ne
 800cf42:	2700      	movne	r7, #0
 800cf44:	2706      	moveq	r7, #6
 800cf46:	4638      	mov	r0, r7
 800cf48:	b009      	add	sp, #36	; 0x24
 800cf4a:	ecbd 8b02 	vpop	{d8}
 800cf4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf52:	463e      	mov	r6, r7
 800cf54:	4625      	mov	r5, r4
 800cf56:	2401      	movs	r4, #1
 800cf58:	e7ca      	b.n	800cef0 <__gethex+0xd4>
 800cf5a:	f04f 0900 	mov.w	r9, #0
 800cf5e:	1cb1      	adds	r1, r6, #2
 800cf60:	e7d3      	b.n	800cf0a <__gethex+0xee>
 800cf62:	f04f 0901 	mov.w	r9, #1
 800cf66:	e7fa      	b.n	800cf5e <__gethex+0x142>
 800cf68:	230a      	movs	r3, #10
 800cf6a:	fb03 0202 	mla	r2, r3, r2, r0
 800cf6e:	3a10      	subs	r2, #16
 800cf70:	e7d4      	b.n	800cf1c <__gethex+0x100>
 800cf72:	4631      	mov	r1, r6
 800cf74:	e7df      	b.n	800cf36 <__gethex+0x11a>
 800cf76:	1bf3      	subs	r3, r6, r7
 800cf78:	3b01      	subs	r3, #1
 800cf7a:	4621      	mov	r1, r4
 800cf7c:	2b07      	cmp	r3, #7
 800cf7e:	dc0b      	bgt.n	800cf98 <__gethex+0x17c>
 800cf80:	ee18 0a10 	vmov	r0, s16
 800cf84:	f000 faf0 	bl	800d568 <_Balloc>
 800cf88:	4604      	mov	r4, r0
 800cf8a:	b940      	cbnz	r0, 800cf9e <__gethex+0x182>
 800cf8c:	4b5d      	ldr	r3, [pc, #372]	; (800d104 <__gethex+0x2e8>)
 800cf8e:	4602      	mov	r2, r0
 800cf90:	21de      	movs	r1, #222	; 0xde
 800cf92:	485d      	ldr	r0, [pc, #372]	; (800d108 <__gethex+0x2ec>)
 800cf94:	f7fe fe68 	bl	800bc68 <__assert_func>
 800cf98:	3101      	adds	r1, #1
 800cf9a:	105b      	asrs	r3, r3, #1
 800cf9c:	e7ee      	b.n	800cf7c <__gethex+0x160>
 800cf9e:	f100 0914 	add.w	r9, r0, #20
 800cfa2:	f04f 0b00 	mov.w	fp, #0
 800cfa6:	f1ca 0301 	rsb	r3, sl, #1
 800cfaa:	f8cd 9008 	str.w	r9, [sp, #8]
 800cfae:	f8cd b000 	str.w	fp, [sp]
 800cfb2:	9306      	str	r3, [sp, #24]
 800cfb4:	42b7      	cmp	r7, r6
 800cfb6:	d340      	bcc.n	800d03a <__gethex+0x21e>
 800cfb8:	9802      	ldr	r0, [sp, #8]
 800cfba:	9b00      	ldr	r3, [sp, #0]
 800cfbc:	f840 3b04 	str.w	r3, [r0], #4
 800cfc0:	eba0 0009 	sub.w	r0, r0, r9
 800cfc4:	1080      	asrs	r0, r0, #2
 800cfc6:	0146      	lsls	r6, r0, #5
 800cfc8:	6120      	str	r0, [r4, #16]
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f000 fbbe 	bl	800d74c <__hi0bits>
 800cfd0:	1a30      	subs	r0, r6, r0
 800cfd2:	f8d8 6000 	ldr.w	r6, [r8]
 800cfd6:	42b0      	cmp	r0, r6
 800cfd8:	dd63      	ble.n	800d0a2 <__gethex+0x286>
 800cfda:	1b87      	subs	r7, r0, r6
 800cfdc:	4639      	mov	r1, r7
 800cfde:	4620      	mov	r0, r4
 800cfe0:	f000 ff62 	bl	800dea8 <__any_on>
 800cfe4:	4682      	mov	sl, r0
 800cfe6:	b1a8      	cbz	r0, 800d014 <__gethex+0x1f8>
 800cfe8:	1e7b      	subs	r3, r7, #1
 800cfea:	1159      	asrs	r1, r3, #5
 800cfec:	f003 021f 	and.w	r2, r3, #31
 800cff0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cff4:	f04f 0a01 	mov.w	sl, #1
 800cff8:	fa0a f202 	lsl.w	r2, sl, r2
 800cffc:	420a      	tst	r2, r1
 800cffe:	d009      	beq.n	800d014 <__gethex+0x1f8>
 800d000:	4553      	cmp	r3, sl
 800d002:	dd05      	ble.n	800d010 <__gethex+0x1f4>
 800d004:	1eb9      	subs	r1, r7, #2
 800d006:	4620      	mov	r0, r4
 800d008:	f000 ff4e 	bl	800dea8 <__any_on>
 800d00c:	2800      	cmp	r0, #0
 800d00e:	d145      	bne.n	800d09c <__gethex+0x280>
 800d010:	f04f 0a02 	mov.w	sl, #2
 800d014:	4639      	mov	r1, r7
 800d016:	4620      	mov	r0, r4
 800d018:	f7ff fe99 	bl	800cd4e <rshift>
 800d01c:	443d      	add	r5, r7
 800d01e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d022:	42ab      	cmp	r3, r5
 800d024:	da4c      	bge.n	800d0c0 <__gethex+0x2a4>
 800d026:	ee18 0a10 	vmov	r0, s16
 800d02a:	4621      	mov	r1, r4
 800d02c:	f000 fadc 	bl	800d5e8 <_Bfree>
 800d030:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d032:	2300      	movs	r3, #0
 800d034:	6013      	str	r3, [r2, #0]
 800d036:	27a3      	movs	r7, #163	; 0xa3
 800d038:	e785      	b.n	800cf46 <__gethex+0x12a>
 800d03a:	1e73      	subs	r3, r6, #1
 800d03c:	9a05      	ldr	r2, [sp, #20]
 800d03e:	9303      	str	r3, [sp, #12]
 800d040:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d044:	4293      	cmp	r3, r2
 800d046:	d019      	beq.n	800d07c <__gethex+0x260>
 800d048:	f1bb 0f20 	cmp.w	fp, #32
 800d04c:	d107      	bne.n	800d05e <__gethex+0x242>
 800d04e:	9b02      	ldr	r3, [sp, #8]
 800d050:	9a00      	ldr	r2, [sp, #0]
 800d052:	f843 2b04 	str.w	r2, [r3], #4
 800d056:	9302      	str	r3, [sp, #8]
 800d058:	2300      	movs	r3, #0
 800d05a:	9300      	str	r3, [sp, #0]
 800d05c:	469b      	mov	fp, r3
 800d05e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d062:	f7ff fec6 	bl	800cdf2 <__hexdig_fun>
 800d066:	9b00      	ldr	r3, [sp, #0]
 800d068:	f000 000f 	and.w	r0, r0, #15
 800d06c:	fa00 f00b 	lsl.w	r0, r0, fp
 800d070:	4303      	orrs	r3, r0
 800d072:	9300      	str	r3, [sp, #0]
 800d074:	f10b 0b04 	add.w	fp, fp, #4
 800d078:	9b03      	ldr	r3, [sp, #12]
 800d07a:	e00d      	b.n	800d098 <__gethex+0x27c>
 800d07c:	9b03      	ldr	r3, [sp, #12]
 800d07e:	9a06      	ldr	r2, [sp, #24]
 800d080:	4413      	add	r3, r2
 800d082:	42bb      	cmp	r3, r7
 800d084:	d3e0      	bcc.n	800d048 <__gethex+0x22c>
 800d086:	4618      	mov	r0, r3
 800d088:	9901      	ldr	r1, [sp, #4]
 800d08a:	9307      	str	r3, [sp, #28]
 800d08c:	4652      	mov	r2, sl
 800d08e:	f7fd fd5a 	bl	800ab46 <strncmp>
 800d092:	9b07      	ldr	r3, [sp, #28]
 800d094:	2800      	cmp	r0, #0
 800d096:	d1d7      	bne.n	800d048 <__gethex+0x22c>
 800d098:	461e      	mov	r6, r3
 800d09a:	e78b      	b.n	800cfb4 <__gethex+0x198>
 800d09c:	f04f 0a03 	mov.w	sl, #3
 800d0a0:	e7b8      	b.n	800d014 <__gethex+0x1f8>
 800d0a2:	da0a      	bge.n	800d0ba <__gethex+0x29e>
 800d0a4:	1a37      	subs	r7, r6, r0
 800d0a6:	4621      	mov	r1, r4
 800d0a8:	ee18 0a10 	vmov	r0, s16
 800d0ac:	463a      	mov	r2, r7
 800d0ae:	f000 fcb7 	bl	800da20 <__lshift>
 800d0b2:	1bed      	subs	r5, r5, r7
 800d0b4:	4604      	mov	r4, r0
 800d0b6:	f100 0914 	add.w	r9, r0, #20
 800d0ba:	f04f 0a00 	mov.w	sl, #0
 800d0be:	e7ae      	b.n	800d01e <__gethex+0x202>
 800d0c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d0c4:	42a8      	cmp	r0, r5
 800d0c6:	dd72      	ble.n	800d1ae <__gethex+0x392>
 800d0c8:	1b45      	subs	r5, r0, r5
 800d0ca:	42ae      	cmp	r6, r5
 800d0cc:	dc36      	bgt.n	800d13c <__gethex+0x320>
 800d0ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d0d2:	2b02      	cmp	r3, #2
 800d0d4:	d02a      	beq.n	800d12c <__gethex+0x310>
 800d0d6:	2b03      	cmp	r3, #3
 800d0d8:	d02c      	beq.n	800d134 <__gethex+0x318>
 800d0da:	2b01      	cmp	r3, #1
 800d0dc:	d11c      	bne.n	800d118 <__gethex+0x2fc>
 800d0de:	42ae      	cmp	r6, r5
 800d0e0:	d11a      	bne.n	800d118 <__gethex+0x2fc>
 800d0e2:	2e01      	cmp	r6, #1
 800d0e4:	d112      	bne.n	800d10c <__gethex+0x2f0>
 800d0e6:	9a04      	ldr	r2, [sp, #16]
 800d0e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d0ec:	6013      	str	r3, [r2, #0]
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	6123      	str	r3, [r4, #16]
 800d0f2:	f8c9 3000 	str.w	r3, [r9]
 800d0f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d0f8:	2762      	movs	r7, #98	; 0x62
 800d0fa:	601c      	str	r4, [r3, #0]
 800d0fc:	e723      	b.n	800cf46 <__gethex+0x12a>
 800d0fe:	bf00      	nop
 800d100:	0800fd84 	.word	0x0800fd84
 800d104:	0800fcab 	.word	0x0800fcab
 800d108:	0800fd1c 	.word	0x0800fd1c
 800d10c:	1e71      	subs	r1, r6, #1
 800d10e:	4620      	mov	r0, r4
 800d110:	f000 feca 	bl	800dea8 <__any_on>
 800d114:	2800      	cmp	r0, #0
 800d116:	d1e6      	bne.n	800d0e6 <__gethex+0x2ca>
 800d118:	ee18 0a10 	vmov	r0, s16
 800d11c:	4621      	mov	r1, r4
 800d11e:	f000 fa63 	bl	800d5e8 <_Bfree>
 800d122:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d124:	2300      	movs	r3, #0
 800d126:	6013      	str	r3, [r2, #0]
 800d128:	2750      	movs	r7, #80	; 0x50
 800d12a:	e70c      	b.n	800cf46 <__gethex+0x12a>
 800d12c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1f2      	bne.n	800d118 <__gethex+0x2fc>
 800d132:	e7d8      	b.n	800d0e6 <__gethex+0x2ca>
 800d134:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d136:	2b00      	cmp	r3, #0
 800d138:	d1d5      	bne.n	800d0e6 <__gethex+0x2ca>
 800d13a:	e7ed      	b.n	800d118 <__gethex+0x2fc>
 800d13c:	1e6f      	subs	r7, r5, #1
 800d13e:	f1ba 0f00 	cmp.w	sl, #0
 800d142:	d131      	bne.n	800d1a8 <__gethex+0x38c>
 800d144:	b127      	cbz	r7, 800d150 <__gethex+0x334>
 800d146:	4639      	mov	r1, r7
 800d148:	4620      	mov	r0, r4
 800d14a:	f000 fead 	bl	800dea8 <__any_on>
 800d14e:	4682      	mov	sl, r0
 800d150:	117b      	asrs	r3, r7, #5
 800d152:	2101      	movs	r1, #1
 800d154:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d158:	f007 071f 	and.w	r7, r7, #31
 800d15c:	fa01 f707 	lsl.w	r7, r1, r7
 800d160:	421f      	tst	r7, r3
 800d162:	4629      	mov	r1, r5
 800d164:	4620      	mov	r0, r4
 800d166:	bf18      	it	ne
 800d168:	f04a 0a02 	orrne.w	sl, sl, #2
 800d16c:	1b76      	subs	r6, r6, r5
 800d16e:	f7ff fdee 	bl	800cd4e <rshift>
 800d172:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d176:	2702      	movs	r7, #2
 800d178:	f1ba 0f00 	cmp.w	sl, #0
 800d17c:	d048      	beq.n	800d210 <__gethex+0x3f4>
 800d17e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d182:	2b02      	cmp	r3, #2
 800d184:	d015      	beq.n	800d1b2 <__gethex+0x396>
 800d186:	2b03      	cmp	r3, #3
 800d188:	d017      	beq.n	800d1ba <__gethex+0x39e>
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d109      	bne.n	800d1a2 <__gethex+0x386>
 800d18e:	f01a 0f02 	tst.w	sl, #2
 800d192:	d006      	beq.n	800d1a2 <__gethex+0x386>
 800d194:	f8d9 0000 	ldr.w	r0, [r9]
 800d198:	ea4a 0a00 	orr.w	sl, sl, r0
 800d19c:	f01a 0f01 	tst.w	sl, #1
 800d1a0:	d10e      	bne.n	800d1c0 <__gethex+0x3a4>
 800d1a2:	f047 0710 	orr.w	r7, r7, #16
 800d1a6:	e033      	b.n	800d210 <__gethex+0x3f4>
 800d1a8:	f04f 0a01 	mov.w	sl, #1
 800d1ac:	e7d0      	b.n	800d150 <__gethex+0x334>
 800d1ae:	2701      	movs	r7, #1
 800d1b0:	e7e2      	b.n	800d178 <__gethex+0x35c>
 800d1b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1b4:	f1c3 0301 	rsb	r3, r3, #1
 800d1b8:	9315      	str	r3, [sp, #84]	; 0x54
 800d1ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d0f0      	beq.n	800d1a2 <__gethex+0x386>
 800d1c0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d1c4:	f104 0314 	add.w	r3, r4, #20
 800d1c8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d1cc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d1d0:	f04f 0c00 	mov.w	ip, #0
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1da:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d1de:	d01c      	beq.n	800d21a <__gethex+0x3fe>
 800d1e0:	3201      	adds	r2, #1
 800d1e2:	6002      	str	r2, [r0, #0]
 800d1e4:	2f02      	cmp	r7, #2
 800d1e6:	f104 0314 	add.w	r3, r4, #20
 800d1ea:	d13f      	bne.n	800d26c <__gethex+0x450>
 800d1ec:	f8d8 2000 	ldr.w	r2, [r8]
 800d1f0:	3a01      	subs	r2, #1
 800d1f2:	42b2      	cmp	r2, r6
 800d1f4:	d10a      	bne.n	800d20c <__gethex+0x3f0>
 800d1f6:	1171      	asrs	r1, r6, #5
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d1fe:	f006 061f 	and.w	r6, r6, #31
 800d202:	fa02 f606 	lsl.w	r6, r2, r6
 800d206:	421e      	tst	r6, r3
 800d208:	bf18      	it	ne
 800d20a:	4617      	movne	r7, r2
 800d20c:	f047 0720 	orr.w	r7, r7, #32
 800d210:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d212:	601c      	str	r4, [r3, #0]
 800d214:	9b04      	ldr	r3, [sp, #16]
 800d216:	601d      	str	r5, [r3, #0]
 800d218:	e695      	b.n	800cf46 <__gethex+0x12a>
 800d21a:	4299      	cmp	r1, r3
 800d21c:	f843 cc04 	str.w	ip, [r3, #-4]
 800d220:	d8d8      	bhi.n	800d1d4 <__gethex+0x3b8>
 800d222:	68a3      	ldr	r3, [r4, #8]
 800d224:	459b      	cmp	fp, r3
 800d226:	db19      	blt.n	800d25c <__gethex+0x440>
 800d228:	6861      	ldr	r1, [r4, #4]
 800d22a:	ee18 0a10 	vmov	r0, s16
 800d22e:	3101      	adds	r1, #1
 800d230:	f000 f99a 	bl	800d568 <_Balloc>
 800d234:	4681      	mov	r9, r0
 800d236:	b918      	cbnz	r0, 800d240 <__gethex+0x424>
 800d238:	4b1a      	ldr	r3, [pc, #104]	; (800d2a4 <__gethex+0x488>)
 800d23a:	4602      	mov	r2, r0
 800d23c:	2184      	movs	r1, #132	; 0x84
 800d23e:	e6a8      	b.n	800cf92 <__gethex+0x176>
 800d240:	6922      	ldr	r2, [r4, #16]
 800d242:	3202      	adds	r2, #2
 800d244:	f104 010c 	add.w	r1, r4, #12
 800d248:	0092      	lsls	r2, r2, #2
 800d24a:	300c      	adds	r0, #12
 800d24c:	f7fc fea8 	bl	8009fa0 <memcpy>
 800d250:	4621      	mov	r1, r4
 800d252:	ee18 0a10 	vmov	r0, s16
 800d256:	f000 f9c7 	bl	800d5e8 <_Bfree>
 800d25a:	464c      	mov	r4, r9
 800d25c:	6923      	ldr	r3, [r4, #16]
 800d25e:	1c5a      	adds	r2, r3, #1
 800d260:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d264:	6122      	str	r2, [r4, #16]
 800d266:	2201      	movs	r2, #1
 800d268:	615a      	str	r2, [r3, #20]
 800d26a:	e7bb      	b.n	800d1e4 <__gethex+0x3c8>
 800d26c:	6922      	ldr	r2, [r4, #16]
 800d26e:	455a      	cmp	r2, fp
 800d270:	dd0b      	ble.n	800d28a <__gethex+0x46e>
 800d272:	2101      	movs	r1, #1
 800d274:	4620      	mov	r0, r4
 800d276:	f7ff fd6a 	bl	800cd4e <rshift>
 800d27a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d27e:	3501      	adds	r5, #1
 800d280:	42ab      	cmp	r3, r5
 800d282:	f6ff aed0 	blt.w	800d026 <__gethex+0x20a>
 800d286:	2701      	movs	r7, #1
 800d288:	e7c0      	b.n	800d20c <__gethex+0x3f0>
 800d28a:	f016 061f 	ands.w	r6, r6, #31
 800d28e:	d0fa      	beq.n	800d286 <__gethex+0x46a>
 800d290:	4453      	add	r3, sl
 800d292:	f1c6 0620 	rsb	r6, r6, #32
 800d296:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d29a:	f000 fa57 	bl	800d74c <__hi0bits>
 800d29e:	42b0      	cmp	r0, r6
 800d2a0:	dbe7      	blt.n	800d272 <__gethex+0x456>
 800d2a2:	e7f0      	b.n	800d286 <__gethex+0x46a>
 800d2a4:	0800fcab 	.word	0x0800fcab

0800d2a8 <L_shift>:
 800d2a8:	f1c2 0208 	rsb	r2, r2, #8
 800d2ac:	0092      	lsls	r2, r2, #2
 800d2ae:	b570      	push	{r4, r5, r6, lr}
 800d2b0:	f1c2 0620 	rsb	r6, r2, #32
 800d2b4:	6843      	ldr	r3, [r0, #4]
 800d2b6:	6804      	ldr	r4, [r0, #0]
 800d2b8:	fa03 f506 	lsl.w	r5, r3, r6
 800d2bc:	432c      	orrs	r4, r5
 800d2be:	40d3      	lsrs	r3, r2
 800d2c0:	6004      	str	r4, [r0, #0]
 800d2c2:	f840 3f04 	str.w	r3, [r0, #4]!
 800d2c6:	4288      	cmp	r0, r1
 800d2c8:	d3f4      	bcc.n	800d2b4 <L_shift+0xc>
 800d2ca:	bd70      	pop	{r4, r5, r6, pc}

0800d2cc <__match>:
 800d2cc:	b530      	push	{r4, r5, lr}
 800d2ce:	6803      	ldr	r3, [r0, #0]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2d6:	b914      	cbnz	r4, 800d2de <__match+0x12>
 800d2d8:	6003      	str	r3, [r0, #0]
 800d2da:	2001      	movs	r0, #1
 800d2dc:	bd30      	pop	{r4, r5, pc}
 800d2de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d2e6:	2d19      	cmp	r5, #25
 800d2e8:	bf98      	it	ls
 800d2ea:	3220      	addls	r2, #32
 800d2ec:	42a2      	cmp	r2, r4
 800d2ee:	d0f0      	beq.n	800d2d2 <__match+0x6>
 800d2f0:	2000      	movs	r0, #0
 800d2f2:	e7f3      	b.n	800d2dc <__match+0x10>

0800d2f4 <__hexnan>:
 800d2f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2f8:	680b      	ldr	r3, [r1, #0]
 800d2fa:	115e      	asrs	r6, r3, #5
 800d2fc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d300:	f013 031f 	ands.w	r3, r3, #31
 800d304:	b087      	sub	sp, #28
 800d306:	bf18      	it	ne
 800d308:	3604      	addne	r6, #4
 800d30a:	2500      	movs	r5, #0
 800d30c:	1f37      	subs	r7, r6, #4
 800d30e:	4690      	mov	r8, r2
 800d310:	6802      	ldr	r2, [r0, #0]
 800d312:	9301      	str	r3, [sp, #4]
 800d314:	4682      	mov	sl, r0
 800d316:	f846 5c04 	str.w	r5, [r6, #-4]
 800d31a:	46b9      	mov	r9, r7
 800d31c:	463c      	mov	r4, r7
 800d31e:	9502      	str	r5, [sp, #8]
 800d320:	46ab      	mov	fp, r5
 800d322:	7851      	ldrb	r1, [r2, #1]
 800d324:	1c53      	adds	r3, r2, #1
 800d326:	9303      	str	r3, [sp, #12]
 800d328:	b341      	cbz	r1, 800d37c <__hexnan+0x88>
 800d32a:	4608      	mov	r0, r1
 800d32c:	9205      	str	r2, [sp, #20]
 800d32e:	9104      	str	r1, [sp, #16]
 800d330:	f7ff fd5f 	bl	800cdf2 <__hexdig_fun>
 800d334:	2800      	cmp	r0, #0
 800d336:	d14f      	bne.n	800d3d8 <__hexnan+0xe4>
 800d338:	9904      	ldr	r1, [sp, #16]
 800d33a:	9a05      	ldr	r2, [sp, #20]
 800d33c:	2920      	cmp	r1, #32
 800d33e:	d818      	bhi.n	800d372 <__hexnan+0x7e>
 800d340:	9b02      	ldr	r3, [sp, #8]
 800d342:	459b      	cmp	fp, r3
 800d344:	dd13      	ble.n	800d36e <__hexnan+0x7a>
 800d346:	454c      	cmp	r4, r9
 800d348:	d206      	bcs.n	800d358 <__hexnan+0x64>
 800d34a:	2d07      	cmp	r5, #7
 800d34c:	dc04      	bgt.n	800d358 <__hexnan+0x64>
 800d34e:	462a      	mov	r2, r5
 800d350:	4649      	mov	r1, r9
 800d352:	4620      	mov	r0, r4
 800d354:	f7ff ffa8 	bl	800d2a8 <L_shift>
 800d358:	4544      	cmp	r4, r8
 800d35a:	d950      	bls.n	800d3fe <__hexnan+0x10a>
 800d35c:	2300      	movs	r3, #0
 800d35e:	f1a4 0904 	sub.w	r9, r4, #4
 800d362:	f844 3c04 	str.w	r3, [r4, #-4]
 800d366:	f8cd b008 	str.w	fp, [sp, #8]
 800d36a:	464c      	mov	r4, r9
 800d36c:	461d      	mov	r5, r3
 800d36e:	9a03      	ldr	r2, [sp, #12]
 800d370:	e7d7      	b.n	800d322 <__hexnan+0x2e>
 800d372:	2929      	cmp	r1, #41	; 0x29
 800d374:	d156      	bne.n	800d424 <__hexnan+0x130>
 800d376:	3202      	adds	r2, #2
 800d378:	f8ca 2000 	str.w	r2, [sl]
 800d37c:	f1bb 0f00 	cmp.w	fp, #0
 800d380:	d050      	beq.n	800d424 <__hexnan+0x130>
 800d382:	454c      	cmp	r4, r9
 800d384:	d206      	bcs.n	800d394 <__hexnan+0xa0>
 800d386:	2d07      	cmp	r5, #7
 800d388:	dc04      	bgt.n	800d394 <__hexnan+0xa0>
 800d38a:	462a      	mov	r2, r5
 800d38c:	4649      	mov	r1, r9
 800d38e:	4620      	mov	r0, r4
 800d390:	f7ff ff8a 	bl	800d2a8 <L_shift>
 800d394:	4544      	cmp	r4, r8
 800d396:	d934      	bls.n	800d402 <__hexnan+0x10e>
 800d398:	f1a8 0204 	sub.w	r2, r8, #4
 800d39c:	4623      	mov	r3, r4
 800d39e:	f853 1b04 	ldr.w	r1, [r3], #4
 800d3a2:	f842 1f04 	str.w	r1, [r2, #4]!
 800d3a6:	429f      	cmp	r7, r3
 800d3a8:	d2f9      	bcs.n	800d39e <__hexnan+0xaa>
 800d3aa:	1b3b      	subs	r3, r7, r4
 800d3ac:	f023 0303 	bic.w	r3, r3, #3
 800d3b0:	3304      	adds	r3, #4
 800d3b2:	3401      	adds	r4, #1
 800d3b4:	3e03      	subs	r6, #3
 800d3b6:	42b4      	cmp	r4, r6
 800d3b8:	bf88      	it	hi
 800d3ba:	2304      	movhi	r3, #4
 800d3bc:	4443      	add	r3, r8
 800d3be:	2200      	movs	r2, #0
 800d3c0:	f843 2b04 	str.w	r2, [r3], #4
 800d3c4:	429f      	cmp	r7, r3
 800d3c6:	d2fb      	bcs.n	800d3c0 <__hexnan+0xcc>
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	b91b      	cbnz	r3, 800d3d4 <__hexnan+0xe0>
 800d3cc:	4547      	cmp	r7, r8
 800d3ce:	d127      	bne.n	800d420 <__hexnan+0x12c>
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	603b      	str	r3, [r7, #0]
 800d3d4:	2005      	movs	r0, #5
 800d3d6:	e026      	b.n	800d426 <__hexnan+0x132>
 800d3d8:	3501      	adds	r5, #1
 800d3da:	2d08      	cmp	r5, #8
 800d3dc:	f10b 0b01 	add.w	fp, fp, #1
 800d3e0:	dd06      	ble.n	800d3f0 <__hexnan+0xfc>
 800d3e2:	4544      	cmp	r4, r8
 800d3e4:	d9c3      	bls.n	800d36e <__hexnan+0x7a>
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3ec:	2501      	movs	r5, #1
 800d3ee:	3c04      	subs	r4, #4
 800d3f0:	6822      	ldr	r2, [r4, #0]
 800d3f2:	f000 000f 	and.w	r0, r0, #15
 800d3f6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d3fa:	6022      	str	r2, [r4, #0]
 800d3fc:	e7b7      	b.n	800d36e <__hexnan+0x7a>
 800d3fe:	2508      	movs	r5, #8
 800d400:	e7b5      	b.n	800d36e <__hexnan+0x7a>
 800d402:	9b01      	ldr	r3, [sp, #4]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d0df      	beq.n	800d3c8 <__hexnan+0xd4>
 800d408:	f04f 32ff 	mov.w	r2, #4294967295
 800d40c:	f1c3 0320 	rsb	r3, r3, #32
 800d410:	fa22 f303 	lsr.w	r3, r2, r3
 800d414:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d418:	401a      	ands	r2, r3
 800d41a:	f846 2c04 	str.w	r2, [r6, #-4]
 800d41e:	e7d3      	b.n	800d3c8 <__hexnan+0xd4>
 800d420:	3f04      	subs	r7, #4
 800d422:	e7d1      	b.n	800d3c8 <__hexnan+0xd4>
 800d424:	2004      	movs	r0, #4
 800d426:	b007      	add	sp, #28
 800d428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d42c <_localeconv_r>:
 800d42c:	4800      	ldr	r0, [pc, #0]	; (800d430 <_localeconv_r+0x4>)
 800d42e:	4770      	bx	lr
 800d430:	2000021c 	.word	0x2000021c

0800d434 <__retarget_lock_init_recursive>:
 800d434:	4770      	bx	lr

0800d436 <__retarget_lock_acquire_recursive>:
 800d436:	4770      	bx	lr

0800d438 <__retarget_lock_release_recursive>:
 800d438:	4770      	bx	lr
	...

0800d43c <_lseek_r>:
 800d43c:	b538      	push	{r3, r4, r5, lr}
 800d43e:	4d07      	ldr	r5, [pc, #28]	; (800d45c <_lseek_r+0x20>)
 800d440:	4604      	mov	r4, r0
 800d442:	4608      	mov	r0, r1
 800d444:	4611      	mov	r1, r2
 800d446:	2200      	movs	r2, #0
 800d448:	602a      	str	r2, [r5, #0]
 800d44a:	461a      	mov	r2, r3
 800d44c:	f7f8 f876 	bl	800553c <_lseek>
 800d450:	1c43      	adds	r3, r0, #1
 800d452:	d102      	bne.n	800d45a <_lseek_r+0x1e>
 800d454:	682b      	ldr	r3, [r5, #0]
 800d456:	b103      	cbz	r3, 800d45a <_lseek_r+0x1e>
 800d458:	6023      	str	r3, [r4, #0]
 800d45a:	bd38      	pop	{r3, r4, r5, pc}
 800d45c:	20002ef0 	.word	0x20002ef0

0800d460 <__swhatbuf_r>:
 800d460:	b570      	push	{r4, r5, r6, lr}
 800d462:	460e      	mov	r6, r1
 800d464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d468:	2900      	cmp	r1, #0
 800d46a:	b096      	sub	sp, #88	; 0x58
 800d46c:	4614      	mov	r4, r2
 800d46e:	461d      	mov	r5, r3
 800d470:	da08      	bge.n	800d484 <__swhatbuf_r+0x24>
 800d472:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d476:	2200      	movs	r2, #0
 800d478:	602a      	str	r2, [r5, #0]
 800d47a:	061a      	lsls	r2, r3, #24
 800d47c:	d410      	bmi.n	800d4a0 <__swhatbuf_r+0x40>
 800d47e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d482:	e00e      	b.n	800d4a2 <__swhatbuf_r+0x42>
 800d484:	466a      	mov	r2, sp
 800d486:	f001 f831 	bl	800e4ec <_fstat_r>
 800d48a:	2800      	cmp	r0, #0
 800d48c:	dbf1      	blt.n	800d472 <__swhatbuf_r+0x12>
 800d48e:	9a01      	ldr	r2, [sp, #4]
 800d490:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d494:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d498:	425a      	negs	r2, r3
 800d49a:	415a      	adcs	r2, r3
 800d49c:	602a      	str	r2, [r5, #0]
 800d49e:	e7ee      	b.n	800d47e <__swhatbuf_r+0x1e>
 800d4a0:	2340      	movs	r3, #64	; 0x40
 800d4a2:	2000      	movs	r0, #0
 800d4a4:	6023      	str	r3, [r4, #0]
 800d4a6:	b016      	add	sp, #88	; 0x58
 800d4a8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d4ac <__smakebuf_r>:
 800d4ac:	898b      	ldrh	r3, [r1, #12]
 800d4ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d4b0:	079d      	lsls	r5, r3, #30
 800d4b2:	4606      	mov	r6, r0
 800d4b4:	460c      	mov	r4, r1
 800d4b6:	d507      	bpl.n	800d4c8 <__smakebuf_r+0x1c>
 800d4b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d4bc:	6023      	str	r3, [r4, #0]
 800d4be:	6123      	str	r3, [r4, #16]
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	6163      	str	r3, [r4, #20]
 800d4c4:	b002      	add	sp, #8
 800d4c6:	bd70      	pop	{r4, r5, r6, pc}
 800d4c8:	ab01      	add	r3, sp, #4
 800d4ca:	466a      	mov	r2, sp
 800d4cc:	f7ff ffc8 	bl	800d460 <__swhatbuf_r>
 800d4d0:	9900      	ldr	r1, [sp, #0]
 800d4d2:	4605      	mov	r5, r0
 800d4d4:	4630      	mov	r0, r6
 800d4d6:	f7fc fde5 	bl	800a0a4 <_malloc_r>
 800d4da:	b948      	cbnz	r0, 800d4f0 <__smakebuf_r+0x44>
 800d4dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4e0:	059a      	lsls	r2, r3, #22
 800d4e2:	d4ef      	bmi.n	800d4c4 <__smakebuf_r+0x18>
 800d4e4:	f023 0303 	bic.w	r3, r3, #3
 800d4e8:	f043 0302 	orr.w	r3, r3, #2
 800d4ec:	81a3      	strh	r3, [r4, #12]
 800d4ee:	e7e3      	b.n	800d4b8 <__smakebuf_r+0xc>
 800d4f0:	4b0d      	ldr	r3, [pc, #52]	; (800d528 <__smakebuf_r+0x7c>)
 800d4f2:	62b3      	str	r3, [r6, #40]	; 0x28
 800d4f4:	89a3      	ldrh	r3, [r4, #12]
 800d4f6:	6020      	str	r0, [r4, #0]
 800d4f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4fc:	81a3      	strh	r3, [r4, #12]
 800d4fe:	9b00      	ldr	r3, [sp, #0]
 800d500:	6163      	str	r3, [r4, #20]
 800d502:	9b01      	ldr	r3, [sp, #4]
 800d504:	6120      	str	r0, [r4, #16]
 800d506:	b15b      	cbz	r3, 800d520 <__smakebuf_r+0x74>
 800d508:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d50c:	4630      	mov	r0, r6
 800d50e:	f000 ffff 	bl	800e510 <_isatty_r>
 800d512:	b128      	cbz	r0, 800d520 <__smakebuf_r+0x74>
 800d514:	89a3      	ldrh	r3, [r4, #12]
 800d516:	f023 0303 	bic.w	r3, r3, #3
 800d51a:	f043 0301 	orr.w	r3, r3, #1
 800d51e:	81a3      	strh	r3, [r4, #12]
 800d520:	89a0      	ldrh	r0, [r4, #12]
 800d522:	4305      	orrs	r5, r0
 800d524:	81a5      	strh	r5, [r4, #12]
 800d526:	e7cd      	b.n	800d4c4 <__smakebuf_r+0x18>
 800d528:	0800cb89 	.word	0x0800cb89

0800d52c <__ascii_mbtowc>:
 800d52c:	b082      	sub	sp, #8
 800d52e:	b901      	cbnz	r1, 800d532 <__ascii_mbtowc+0x6>
 800d530:	a901      	add	r1, sp, #4
 800d532:	b142      	cbz	r2, 800d546 <__ascii_mbtowc+0x1a>
 800d534:	b14b      	cbz	r3, 800d54a <__ascii_mbtowc+0x1e>
 800d536:	7813      	ldrb	r3, [r2, #0]
 800d538:	600b      	str	r3, [r1, #0]
 800d53a:	7812      	ldrb	r2, [r2, #0]
 800d53c:	1e10      	subs	r0, r2, #0
 800d53e:	bf18      	it	ne
 800d540:	2001      	movne	r0, #1
 800d542:	b002      	add	sp, #8
 800d544:	4770      	bx	lr
 800d546:	4610      	mov	r0, r2
 800d548:	e7fb      	b.n	800d542 <__ascii_mbtowc+0x16>
 800d54a:	f06f 0001 	mvn.w	r0, #1
 800d54e:	e7f8      	b.n	800d542 <__ascii_mbtowc+0x16>

0800d550 <__malloc_lock>:
 800d550:	4801      	ldr	r0, [pc, #4]	; (800d558 <__malloc_lock+0x8>)
 800d552:	f7ff bf70 	b.w	800d436 <__retarget_lock_acquire_recursive>
 800d556:	bf00      	nop
 800d558:	20002eec 	.word	0x20002eec

0800d55c <__malloc_unlock>:
 800d55c:	4801      	ldr	r0, [pc, #4]	; (800d564 <__malloc_unlock+0x8>)
 800d55e:	f7ff bf6b 	b.w	800d438 <__retarget_lock_release_recursive>
 800d562:	bf00      	nop
 800d564:	20002eec 	.word	0x20002eec

0800d568 <_Balloc>:
 800d568:	b570      	push	{r4, r5, r6, lr}
 800d56a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d56c:	4604      	mov	r4, r0
 800d56e:	460d      	mov	r5, r1
 800d570:	b976      	cbnz	r6, 800d590 <_Balloc+0x28>
 800d572:	2010      	movs	r0, #16
 800d574:	f7fc fd0c 	bl	8009f90 <malloc>
 800d578:	4602      	mov	r2, r0
 800d57a:	6260      	str	r0, [r4, #36]	; 0x24
 800d57c:	b920      	cbnz	r0, 800d588 <_Balloc+0x20>
 800d57e:	4b18      	ldr	r3, [pc, #96]	; (800d5e0 <_Balloc+0x78>)
 800d580:	4818      	ldr	r0, [pc, #96]	; (800d5e4 <_Balloc+0x7c>)
 800d582:	2166      	movs	r1, #102	; 0x66
 800d584:	f7fe fb70 	bl	800bc68 <__assert_func>
 800d588:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d58c:	6006      	str	r6, [r0, #0]
 800d58e:	60c6      	str	r6, [r0, #12]
 800d590:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d592:	68f3      	ldr	r3, [r6, #12]
 800d594:	b183      	cbz	r3, 800d5b8 <_Balloc+0x50>
 800d596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d598:	68db      	ldr	r3, [r3, #12]
 800d59a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d59e:	b9b8      	cbnz	r0, 800d5d0 <_Balloc+0x68>
 800d5a0:	2101      	movs	r1, #1
 800d5a2:	fa01 f605 	lsl.w	r6, r1, r5
 800d5a6:	1d72      	adds	r2, r6, #5
 800d5a8:	0092      	lsls	r2, r2, #2
 800d5aa:	4620      	mov	r0, r4
 800d5ac:	f000 fc9d 	bl	800deea <_calloc_r>
 800d5b0:	b160      	cbz	r0, 800d5cc <_Balloc+0x64>
 800d5b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d5b6:	e00e      	b.n	800d5d6 <_Balloc+0x6e>
 800d5b8:	2221      	movs	r2, #33	; 0x21
 800d5ba:	2104      	movs	r1, #4
 800d5bc:	4620      	mov	r0, r4
 800d5be:	f000 fc94 	bl	800deea <_calloc_r>
 800d5c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5c4:	60f0      	str	r0, [r6, #12]
 800d5c6:	68db      	ldr	r3, [r3, #12]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d1e4      	bne.n	800d596 <_Balloc+0x2e>
 800d5cc:	2000      	movs	r0, #0
 800d5ce:	bd70      	pop	{r4, r5, r6, pc}
 800d5d0:	6802      	ldr	r2, [r0, #0]
 800d5d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d5dc:	e7f7      	b.n	800d5ce <_Balloc+0x66>
 800d5de:	bf00      	nop
 800d5e0:	0800fc39 	.word	0x0800fc39
 800d5e4:	0800fd98 	.word	0x0800fd98

0800d5e8 <_Bfree>:
 800d5e8:	b570      	push	{r4, r5, r6, lr}
 800d5ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d5ec:	4605      	mov	r5, r0
 800d5ee:	460c      	mov	r4, r1
 800d5f0:	b976      	cbnz	r6, 800d610 <_Bfree+0x28>
 800d5f2:	2010      	movs	r0, #16
 800d5f4:	f7fc fccc 	bl	8009f90 <malloc>
 800d5f8:	4602      	mov	r2, r0
 800d5fa:	6268      	str	r0, [r5, #36]	; 0x24
 800d5fc:	b920      	cbnz	r0, 800d608 <_Bfree+0x20>
 800d5fe:	4b09      	ldr	r3, [pc, #36]	; (800d624 <_Bfree+0x3c>)
 800d600:	4809      	ldr	r0, [pc, #36]	; (800d628 <_Bfree+0x40>)
 800d602:	218a      	movs	r1, #138	; 0x8a
 800d604:	f7fe fb30 	bl	800bc68 <__assert_func>
 800d608:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d60c:	6006      	str	r6, [r0, #0]
 800d60e:	60c6      	str	r6, [r0, #12]
 800d610:	b13c      	cbz	r4, 800d622 <_Bfree+0x3a>
 800d612:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d614:	6862      	ldr	r2, [r4, #4]
 800d616:	68db      	ldr	r3, [r3, #12]
 800d618:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d61c:	6021      	str	r1, [r4, #0]
 800d61e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d622:	bd70      	pop	{r4, r5, r6, pc}
 800d624:	0800fc39 	.word	0x0800fc39
 800d628:	0800fd98 	.word	0x0800fd98

0800d62c <__multadd>:
 800d62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d630:	690d      	ldr	r5, [r1, #16]
 800d632:	4607      	mov	r7, r0
 800d634:	460c      	mov	r4, r1
 800d636:	461e      	mov	r6, r3
 800d638:	f101 0c14 	add.w	ip, r1, #20
 800d63c:	2000      	movs	r0, #0
 800d63e:	f8dc 3000 	ldr.w	r3, [ip]
 800d642:	b299      	uxth	r1, r3
 800d644:	fb02 6101 	mla	r1, r2, r1, r6
 800d648:	0c1e      	lsrs	r6, r3, #16
 800d64a:	0c0b      	lsrs	r3, r1, #16
 800d64c:	fb02 3306 	mla	r3, r2, r6, r3
 800d650:	b289      	uxth	r1, r1
 800d652:	3001      	adds	r0, #1
 800d654:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d658:	4285      	cmp	r5, r0
 800d65a:	f84c 1b04 	str.w	r1, [ip], #4
 800d65e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d662:	dcec      	bgt.n	800d63e <__multadd+0x12>
 800d664:	b30e      	cbz	r6, 800d6aa <__multadd+0x7e>
 800d666:	68a3      	ldr	r3, [r4, #8]
 800d668:	42ab      	cmp	r3, r5
 800d66a:	dc19      	bgt.n	800d6a0 <__multadd+0x74>
 800d66c:	6861      	ldr	r1, [r4, #4]
 800d66e:	4638      	mov	r0, r7
 800d670:	3101      	adds	r1, #1
 800d672:	f7ff ff79 	bl	800d568 <_Balloc>
 800d676:	4680      	mov	r8, r0
 800d678:	b928      	cbnz	r0, 800d686 <__multadd+0x5a>
 800d67a:	4602      	mov	r2, r0
 800d67c:	4b0c      	ldr	r3, [pc, #48]	; (800d6b0 <__multadd+0x84>)
 800d67e:	480d      	ldr	r0, [pc, #52]	; (800d6b4 <__multadd+0x88>)
 800d680:	21b5      	movs	r1, #181	; 0xb5
 800d682:	f7fe faf1 	bl	800bc68 <__assert_func>
 800d686:	6922      	ldr	r2, [r4, #16]
 800d688:	3202      	adds	r2, #2
 800d68a:	f104 010c 	add.w	r1, r4, #12
 800d68e:	0092      	lsls	r2, r2, #2
 800d690:	300c      	adds	r0, #12
 800d692:	f7fc fc85 	bl	8009fa0 <memcpy>
 800d696:	4621      	mov	r1, r4
 800d698:	4638      	mov	r0, r7
 800d69a:	f7ff ffa5 	bl	800d5e8 <_Bfree>
 800d69e:	4644      	mov	r4, r8
 800d6a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d6a4:	3501      	adds	r5, #1
 800d6a6:	615e      	str	r6, [r3, #20]
 800d6a8:	6125      	str	r5, [r4, #16]
 800d6aa:	4620      	mov	r0, r4
 800d6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6b0:	0800fcab 	.word	0x0800fcab
 800d6b4:	0800fd98 	.word	0x0800fd98

0800d6b8 <__s2b>:
 800d6b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6bc:	460c      	mov	r4, r1
 800d6be:	4615      	mov	r5, r2
 800d6c0:	461f      	mov	r7, r3
 800d6c2:	2209      	movs	r2, #9
 800d6c4:	3308      	adds	r3, #8
 800d6c6:	4606      	mov	r6, r0
 800d6c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d6cc:	2100      	movs	r1, #0
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	db09      	blt.n	800d6e8 <__s2b+0x30>
 800d6d4:	4630      	mov	r0, r6
 800d6d6:	f7ff ff47 	bl	800d568 <_Balloc>
 800d6da:	b940      	cbnz	r0, 800d6ee <__s2b+0x36>
 800d6dc:	4602      	mov	r2, r0
 800d6de:	4b19      	ldr	r3, [pc, #100]	; (800d744 <__s2b+0x8c>)
 800d6e0:	4819      	ldr	r0, [pc, #100]	; (800d748 <__s2b+0x90>)
 800d6e2:	21ce      	movs	r1, #206	; 0xce
 800d6e4:	f7fe fac0 	bl	800bc68 <__assert_func>
 800d6e8:	0052      	lsls	r2, r2, #1
 800d6ea:	3101      	adds	r1, #1
 800d6ec:	e7f0      	b.n	800d6d0 <__s2b+0x18>
 800d6ee:	9b08      	ldr	r3, [sp, #32]
 800d6f0:	6143      	str	r3, [r0, #20]
 800d6f2:	2d09      	cmp	r5, #9
 800d6f4:	f04f 0301 	mov.w	r3, #1
 800d6f8:	6103      	str	r3, [r0, #16]
 800d6fa:	dd16      	ble.n	800d72a <__s2b+0x72>
 800d6fc:	f104 0909 	add.w	r9, r4, #9
 800d700:	46c8      	mov	r8, r9
 800d702:	442c      	add	r4, r5
 800d704:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d708:	4601      	mov	r1, r0
 800d70a:	3b30      	subs	r3, #48	; 0x30
 800d70c:	220a      	movs	r2, #10
 800d70e:	4630      	mov	r0, r6
 800d710:	f7ff ff8c 	bl	800d62c <__multadd>
 800d714:	45a0      	cmp	r8, r4
 800d716:	d1f5      	bne.n	800d704 <__s2b+0x4c>
 800d718:	f1a5 0408 	sub.w	r4, r5, #8
 800d71c:	444c      	add	r4, r9
 800d71e:	1b2d      	subs	r5, r5, r4
 800d720:	1963      	adds	r3, r4, r5
 800d722:	42bb      	cmp	r3, r7
 800d724:	db04      	blt.n	800d730 <__s2b+0x78>
 800d726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d72a:	340a      	adds	r4, #10
 800d72c:	2509      	movs	r5, #9
 800d72e:	e7f6      	b.n	800d71e <__s2b+0x66>
 800d730:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d734:	4601      	mov	r1, r0
 800d736:	3b30      	subs	r3, #48	; 0x30
 800d738:	220a      	movs	r2, #10
 800d73a:	4630      	mov	r0, r6
 800d73c:	f7ff ff76 	bl	800d62c <__multadd>
 800d740:	e7ee      	b.n	800d720 <__s2b+0x68>
 800d742:	bf00      	nop
 800d744:	0800fcab 	.word	0x0800fcab
 800d748:	0800fd98 	.word	0x0800fd98

0800d74c <__hi0bits>:
 800d74c:	0c03      	lsrs	r3, r0, #16
 800d74e:	041b      	lsls	r3, r3, #16
 800d750:	b9d3      	cbnz	r3, 800d788 <__hi0bits+0x3c>
 800d752:	0400      	lsls	r0, r0, #16
 800d754:	2310      	movs	r3, #16
 800d756:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d75a:	bf04      	itt	eq
 800d75c:	0200      	lsleq	r0, r0, #8
 800d75e:	3308      	addeq	r3, #8
 800d760:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d764:	bf04      	itt	eq
 800d766:	0100      	lsleq	r0, r0, #4
 800d768:	3304      	addeq	r3, #4
 800d76a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d76e:	bf04      	itt	eq
 800d770:	0080      	lsleq	r0, r0, #2
 800d772:	3302      	addeq	r3, #2
 800d774:	2800      	cmp	r0, #0
 800d776:	db05      	blt.n	800d784 <__hi0bits+0x38>
 800d778:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d77c:	f103 0301 	add.w	r3, r3, #1
 800d780:	bf08      	it	eq
 800d782:	2320      	moveq	r3, #32
 800d784:	4618      	mov	r0, r3
 800d786:	4770      	bx	lr
 800d788:	2300      	movs	r3, #0
 800d78a:	e7e4      	b.n	800d756 <__hi0bits+0xa>

0800d78c <__lo0bits>:
 800d78c:	6803      	ldr	r3, [r0, #0]
 800d78e:	f013 0207 	ands.w	r2, r3, #7
 800d792:	4601      	mov	r1, r0
 800d794:	d00b      	beq.n	800d7ae <__lo0bits+0x22>
 800d796:	07da      	lsls	r2, r3, #31
 800d798:	d423      	bmi.n	800d7e2 <__lo0bits+0x56>
 800d79a:	0798      	lsls	r0, r3, #30
 800d79c:	bf49      	itett	mi
 800d79e:	085b      	lsrmi	r3, r3, #1
 800d7a0:	089b      	lsrpl	r3, r3, #2
 800d7a2:	2001      	movmi	r0, #1
 800d7a4:	600b      	strmi	r3, [r1, #0]
 800d7a6:	bf5c      	itt	pl
 800d7a8:	600b      	strpl	r3, [r1, #0]
 800d7aa:	2002      	movpl	r0, #2
 800d7ac:	4770      	bx	lr
 800d7ae:	b298      	uxth	r0, r3
 800d7b0:	b9a8      	cbnz	r0, 800d7de <__lo0bits+0x52>
 800d7b2:	0c1b      	lsrs	r3, r3, #16
 800d7b4:	2010      	movs	r0, #16
 800d7b6:	b2da      	uxtb	r2, r3
 800d7b8:	b90a      	cbnz	r2, 800d7be <__lo0bits+0x32>
 800d7ba:	3008      	adds	r0, #8
 800d7bc:	0a1b      	lsrs	r3, r3, #8
 800d7be:	071a      	lsls	r2, r3, #28
 800d7c0:	bf04      	itt	eq
 800d7c2:	091b      	lsreq	r3, r3, #4
 800d7c4:	3004      	addeq	r0, #4
 800d7c6:	079a      	lsls	r2, r3, #30
 800d7c8:	bf04      	itt	eq
 800d7ca:	089b      	lsreq	r3, r3, #2
 800d7cc:	3002      	addeq	r0, #2
 800d7ce:	07da      	lsls	r2, r3, #31
 800d7d0:	d403      	bmi.n	800d7da <__lo0bits+0x4e>
 800d7d2:	085b      	lsrs	r3, r3, #1
 800d7d4:	f100 0001 	add.w	r0, r0, #1
 800d7d8:	d005      	beq.n	800d7e6 <__lo0bits+0x5a>
 800d7da:	600b      	str	r3, [r1, #0]
 800d7dc:	4770      	bx	lr
 800d7de:	4610      	mov	r0, r2
 800d7e0:	e7e9      	b.n	800d7b6 <__lo0bits+0x2a>
 800d7e2:	2000      	movs	r0, #0
 800d7e4:	4770      	bx	lr
 800d7e6:	2020      	movs	r0, #32
 800d7e8:	4770      	bx	lr
	...

0800d7ec <__i2b>:
 800d7ec:	b510      	push	{r4, lr}
 800d7ee:	460c      	mov	r4, r1
 800d7f0:	2101      	movs	r1, #1
 800d7f2:	f7ff feb9 	bl	800d568 <_Balloc>
 800d7f6:	4602      	mov	r2, r0
 800d7f8:	b928      	cbnz	r0, 800d806 <__i2b+0x1a>
 800d7fa:	4b05      	ldr	r3, [pc, #20]	; (800d810 <__i2b+0x24>)
 800d7fc:	4805      	ldr	r0, [pc, #20]	; (800d814 <__i2b+0x28>)
 800d7fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d802:	f7fe fa31 	bl	800bc68 <__assert_func>
 800d806:	2301      	movs	r3, #1
 800d808:	6144      	str	r4, [r0, #20]
 800d80a:	6103      	str	r3, [r0, #16]
 800d80c:	bd10      	pop	{r4, pc}
 800d80e:	bf00      	nop
 800d810:	0800fcab 	.word	0x0800fcab
 800d814:	0800fd98 	.word	0x0800fd98

0800d818 <__multiply>:
 800d818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d81c:	4691      	mov	r9, r2
 800d81e:	690a      	ldr	r2, [r1, #16]
 800d820:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d824:	429a      	cmp	r2, r3
 800d826:	bfb8      	it	lt
 800d828:	460b      	movlt	r3, r1
 800d82a:	460c      	mov	r4, r1
 800d82c:	bfbc      	itt	lt
 800d82e:	464c      	movlt	r4, r9
 800d830:	4699      	movlt	r9, r3
 800d832:	6927      	ldr	r7, [r4, #16]
 800d834:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d838:	68a3      	ldr	r3, [r4, #8]
 800d83a:	6861      	ldr	r1, [r4, #4]
 800d83c:	eb07 060a 	add.w	r6, r7, sl
 800d840:	42b3      	cmp	r3, r6
 800d842:	b085      	sub	sp, #20
 800d844:	bfb8      	it	lt
 800d846:	3101      	addlt	r1, #1
 800d848:	f7ff fe8e 	bl	800d568 <_Balloc>
 800d84c:	b930      	cbnz	r0, 800d85c <__multiply+0x44>
 800d84e:	4602      	mov	r2, r0
 800d850:	4b44      	ldr	r3, [pc, #272]	; (800d964 <__multiply+0x14c>)
 800d852:	4845      	ldr	r0, [pc, #276]	; (800d968 <__multiply+0x150>)
 800d854:	f240 115d 	movw	r1, #349	; 0x15d
 800d858:	f7fe fa06 	bl	800bc68 <__assert_func>
 800d85c:	f100 0514 	add.w	r5, r0, #20
 800d860:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d864:	462b      	mov	r3, r5
 800d866:	2200      	movs	r2, #0
 800d868:	4543      	cmp	r3, r8
 800d86a:	d321      	bcc.n	800d8b0 <__multiply+0x98>
 800d86c:	f104 0314 	add.w	r3, r4, #20
 800d870:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d874:	f109 0314 	add.w	r3, r9, #20
 800d878:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d87c:	9202      	str	r2, [sp, #8]
 800d87e:	1b3a      	subs	r2, r7, r4
 800d880:	3a15      	subs	r2, #21
 800d882:	f022 0203 	bic.w	r2, r2, #3
 800d886:	3204      	adds	r2, #4
 800d888:	f104 0115 	add.w	r1, r4, #21
 800d88c:	428f      	cmp	r7, r1
 800d88e:	bf38      	it	cc
 800d890:	2204      	movcc	r2, #4
 800d892:	9201      	str	r2, [sp, #4]
 800d894:	9a02      	ldr	r2, [sp, #8]
 800d896:	9303      	str	r3, [sp, #12]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d80c      	bhi.n	800d8b6 <__multiply+0x9e>
 800d89c:	2e00      	cmp	r6, #0
 800d89e:	dd03      	ble.n	800d8a8 <__multiply+0x90>
 800d8a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d05a      	beq.n	800d95e <__multiply+0x146>
 800d8a8:	6106      	str	r6, [r0, #16]
 800d8aa:	b005      	add	sp, #20
 800d8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8b0:	f843 2b04 	str.w	r2, [r3], #4
 800d8b4:	e7d8      	b.n	800d868 <__multiply+0x50>
 800d8b6:	f8b3 a000 	ldrh.w	sl, [r3]
 800d8ba:	f1ba 0f00 	cmp.w	sl, #0
 800d8be:	d024      	beq.n	800d90a <__multiply+0xf2>
 800d8c0:	f104 0e14 	add.w	lr, r4, #20
 800d8c4:	46a9      	mov	r9, r5
 800d8c6:	f04f 0c00 	mov.w	ip, #0
 800d8ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d8ce:	f8d9 1000 	ldr.w	r1, [r9]
 800d8d2:	fa1f fb82 	uxth.w	fp, r2
 800d8d6:	b289      	uxth	r1, r1
 800d8d8:	fb0a 110b 	mla	r1, sl, fp, r1
 800d8dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d8e0:	f8d9 2000 	ldr.w	r2, [r9]
 800d8e4:	4461      	add	r1, ip
 800d8e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d8ea:	fb0a c20b 	mla	r2, sl, fp, ip
 800d8ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d8f2:	b289      	uxth	r1, r1
 800d8f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d8f8:	4577      	cmp	r7, lr
 800d8fa:	f849 1b04 	str.w	r1, [r9], #4
 800d8fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d902:	d8e2      	bhi.n	800d8ca <__multiply+0xb2>
 800d904:	9a01      	ldr	r2, [sp, #4]
 800d906:	f845 c002 	str.w	ip, [r5, r2]
 800d90a:	9a03      	ldr	r2, [sp, #12]
 800d90c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d910:	3304      	adds	r3, #4
 800d912:	f1b9 0f00 	cmp.w	r9, #0
 800d916:	d020      	beq.n	800d95a <__multiply+0x142>
 800d918:	6829      	ldr	r1, [r5, #0]
 800d91a:	f104 0c14 	add.w	ip, r4, #20
 800d91e:	46ae      	mov	lr, r5
 800d920:	f04f 0a00 	mov.w	sl, #0
 800d924:	f8bc b000 	ldrh.w	fp, [ip]
 800d928:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d92c:	fb09 220b 	mla	r2, r9, fp, r2
 800d930:	4492      	add	sl, r2
 800d932:	b289      	uxth	r1, r1
 800d934:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d938:	f84e 1b04 	str.w	r1, [lr], #4
 800d93c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d940:	f8be 1000 	ldrh.w	r1, [lr]
 800d944:	0c12      	lsrs	r2, r2, #16
 800d946:	fb09 1102 	mla	r1, r9, r2, r1
 800d94a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d94e:	4567      	cmp	r7, ip
 800d950:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d954:	d8e6      	bhi.n	800d924 <__multiply+0x10c>
 800d956:	9a01      	ldr	r2, [sp, #4]
 800d958:	50a9      	str	r1, [r5, r2]
 800d95a:	3504      	adds	r5, #4
 800d95c:	e79a      	b.n	800d894 <__multiply+0x7c>
 800d95e:	3e01      	subs	r6, #1
 800d960:	e79c      	b.n	800d89c <__multiply+0x84>
 800d962:	bf00      	nop
 800d964:	0800fcab 	.word	0x0800fcab
 800d968:	0800fd98 	.word	0x0800fd98

0800d96c <__pow5mult>:
 800d96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d970:	4615      	mov	r5, r2
 800d972:	f012 0203 	ands.w	r2, r2, #3
 800d976:	4606      	mov	r6, r0
 800d978:	460f      	mov	r7, r1
 800d97a:	d007      	beq.n	800d98c <__pow5mult+0x20>
 800d97c:	4c25      	ldr	r4, [pc, #148]	; (800da14 <__pow5mult+0xa8>)
 800d97e:	3a01      	subs	r2, #1
 800d980:	2300      	movs	r3, #0
 800d982:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d986:	f7ff fe51 	bl	800d62c <__multadd>
 800d98a:	4607      	mov	r7, r0
 800d98c:	10ad      	asrs	r5, r5, #2
 800d98e:	d03d      	beq.n	800da0c <__pow5mult+0xa0>
 800d990:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d992:	b97c      	cbnz	r4, 800d9b4 <__pow5mult+0x48>
 800d994:	2010      	movs	r0, #16
 800d996:	f7fc fafb 	bl	8009f90 <malloc>
 800d99a:	4602      	mov	r2, r0
 800d99c:	6270      	str	r0, [r6, #36]	; 0x24
 800d99e:	b928      	cbnz	r0, 800d9ac <__pow5mult+0x40>
 800d9a0:	4b1d      	ldr	r3, [pc, #116]	; (800da18 <__pow5mult+0xac>)
 800d9a2:	481e      	ldr	r0, [pc, #120]	; (800da1c <__pow5mult+0xb0>)
 800d9a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d9a8:	f7fe f95e 	bl	800bc68 <__assert_func>
 800d9ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d9b0:	6004      	str	r4, [r0, #0]
 800d9b2:	60c4      	str	r4, [r0, #12]
 800d9b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d9b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d9bc:	b94c      	cbnz	r4, 800d9d2 <__pow5mult+0x66>
 800d9be:	f240 2171 	movw	r1, #625	; 0x271
 800d9c2:	4630      	mov	r0, r6
 800d9c4:	f7ff ff12 	bl	800d7ec <__i2b>
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800d9ce:	4604      	mov	r4, r0
 800d9d0:	6003      	str	r3, [r0, #0]
 800d9d2:	f04f 0900 	mov.w	r9, #0
 800d9d6:	07eb      	lsls	r3, r5, #31
 800d9d8:	d50a      	bpl.n	800d9f0 <__pow5mult+0x84>
 800d9da:	4639      	mov	r1, r7
 800d9dc:	4622      	mov	r2, r4
 800d9de:	4630      	mov	r0, r6
 800d9e0:	f7ff ff1a 	bl	800d818 <__multiply>
 800d9e4:	4639      	mov	r1, r7
 800d9e6:	4680      	mov	r8, r0
 800d9e8:	4630      	mov	r0, r6
 800d9ea:	f7ff fdfd 	bl	800d5e8 <_Bfree>
 800d9ee:	4647      	mov	r7, r8
 800d9f0:	106d      	asrs	r5, r5, #1
 800d9f2:	d00b      	beq.n	800da0c <__pow5mult+0xa0>
 800d9f4:	6820      	ldr	r0, [r4, #0]
 800d9f6:	b938      	cbnz	r0, 800da08 <__pow5mult+0x9c>
 800d9f8:	4622      	mov	r2, r4
 800d9fa:	4621      	mov	r1, r4
 800d9fc:	4630      	mov	r0, r6
 800d9fe:	f7ff ff0b 	bl	800d818 <__multiply>
 800da02:	6020      	str	r0, [r4, #0]
 800da04:	f8c0 9000 	str.w	r9, [r0]
 800da08:	4604      	mov	r4, r0
 800da0a:	e7e4      	b.n	800d9d6 <__pow5mult+0x6a>
 800da0c:	4638      	mov	r0, r7
 800da0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da12:	bf00      	nop
 800da14:	0800fee8 	.word	0x0800fee8
 800da18:	0800fc39 	.word	0x0800fc39
 800da1c:	0800fd98 	.word	0x0800fd98

0800da20 <__lshift>:
 800da20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da24:	460c      	mov	r4, r1
 800da26:	6849      	ldr	r1, [r1, #4]
 800da28:	6923      	ldr	r3, [r4, #16]
 800da2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da2e:	68a3      	ldr	r3, [r4, #8]
 800da30:	4607      	mov	r7, r0
 800da32:	4691      	mov	r9, r2
 800da34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da38:	f108 0601 	add.w	r6, r8, #1
 800da3c:	42b3      	cmp	r3, r6
 800da3e:	db0b      	blt.n	800da58 <__lshift+0x38>
 800da40:	4638      	mov	r0, r7
 800da42:	f7ff fd91 	bl	800d568 <_Balloc>
 800da46:	4605      	mov	r5, r0
 800da48:	b948      	cbnz	r0, 800da5e <__lshift+0x3e>
 800da4a:	4602      	mov	r2, r0
 800da4c:	4b2a      	ldr	r3, [pc, #168]	; (800daf8 <__lshift+0xd8>)
 800da4e:	482b      	ldr	r0, [pc, #172]	; (800dafc <__lshift+0xdc>)
 800da50:	f240 11d9 	movw	r1, #473	; 0x1d9
 800da54:	f7fe f908 	bl	800bc68 <__assert_func>
 800da58:	3101      	adds	r1, #1
 800da5a:	005b      	lsls	r3, r3, #1
 800da5c:	e7ee      	b.n	800da3c <__lshift+0x1c>
 800da5e:	2300      	movs	r3, #0
 800da60:	f100 0114 	add.w	r1, r0, #20
 800da64:	f100 0210 	add.w	r2, r0, #16
 800da68:	4618      	mov	r0, r3
 800da6a:	4553      	cmp	r3, sl
 800da6c:	db37      	blt.n	800dade <__lshift+0xbe>
 800da6e:	6920      	ldr	r0, [r4, #16]
 800da70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da74:	f104 0314 	add.w	r3, r4, #20
 800da78:	f019 091f 	ands.w	r9, r9, #31
 800da7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800da80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800da84:	d02f      	beq.n	800dae6 <__lshift+0xc6>
 800da86:	f1c9 0e20 	rsb	lr, r9, #32
 800da8a:	468a      	mov	sl, r1
 800da8c:	f04f 0c00 	mov.w	ip, #0
 800da90:	681a      	ldr	r2, [r3, #0]
 800da92:	fa02 f209 	lsl.w	r2, r2, r9
 800da96:	ea42 020c 	orr.w	r2, r2, ip
 800da9a:	f84a 2b04 	str.w	r2, [sl], #4
 800da9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800daa2:	4298      	cmp	r0, r3
 800daa4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800daa8:	d8f2      	bhi.n	800da90 <__lshift+0x70>
 800daaa:	1b03      	subs	r3, r0, r4
 800daac:	3b15      	subs	r3, #21
 800daae:	f023 0303 	bic.w	r3, r3, #3
 800dab2:	3304      	adds	r3, #4
 800dab4:	f104 0215 	add.w	r2, r4, #21
 800dab8:	4290      	cmp	r0, r2
 800daba:	bf38      	it	cc
 800dabc:	2304      	movcc	r3, #4
 800dabe:	f841 c003 	str.w	ip, [r1, r3]
 800dac2:	f1bc 0f00 	cmp.w	ip, #0
 800dac6:	d001      	beq.n	800dacc <__lshift+0xac>
 800dac8:	f108 0602 	add.w	r6, r8, #2
 800dacc:	3e01      	subs	r6, #1
 800dace:	4638      	mov	r0, r7
 800dad0:	612e      	str	r6, [r5, #16]
 800dad2:	4621      	mov	r1, r4
 800dad4:	f7ff fd88 	bl	800d5e8 <_Bfree>
 800dad8:	4628      	mov	r0, r5
 800dada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dade:	f842 0f04 	str.w	r0, [r2, #4]!
 800dae2:	3301      	adds	r3, #1
 800dae4:	e7c1      	b.n	800da6a <__lshift+0x4a>
 800dae6:	3904      	subs	r1, #4
 800dae8:	f853 2b04 	ldr.w	r2, [r3], #4
 800daec:	f841 2f04 	str.w	r2, [r1, #4]!
 800daf0:	4298      	cmp	r0, r3
 800daf2:	d8f9      	bhi.n	800dae8 <__lshift+0xc8>
 800daf4:	e7ea      	b.n	800dacc <__lshift+0xac>
 800daf6:	bf00      	nop
 800daf8:	0800fcab 	.word	0x0800fcab
 800dafc:	0800fd98 	.word	0x0800fd98

0800db00 <__mcmp>:
 800db00:	b530      	push	{r4, r5, lr}
 800db02:	6902      	ldr	r2, [r0, #16]
 800db04:	690c      	ldr	r4, [r1, #16]
 800db06:	1b12      	subs	r2, r2, r4
 800db08:	d10e      	bne.n	800db28 <__mcmp+0x28>
 800db0a:	f100 0314 	add.w	r3, r0, #20
 800db0e:	3114      	adds	r1, #20
 800db10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800db14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800db18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800db1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800db20:	42a5      	cmp	r5, r4
 800db22:	d003      	beq.n	800db2c <__mcmp+0x2c>
 800db24:	d305      	bcc.n	800db32 <__mcmp+0x32>
 800db26:	2201      	movs	r2, #1
 800db28:	4610      	mov	r0, r2
 800db2a:	bd30      	pop	{r4, r5, pc}
 800db2c:	4283      	cmp	r3, r0
 800db2e:	d3f3      	bcc.n	800db18 <__mcmp+0x18>
 800db30:	e7fa      	b.n	800db28 <__mcmp+0x28>
 800db32:	f04f 32ff 	mov.w	r2, #4294967295
 800db36:	e7f7      	b.n	800db28 <__mcmp+0x28>

0800db38 <__mdiff>:
 800db38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db3c:	460c      	mov	r4, r1
 800db3e:	4606      	mov	r6, r0
 800db40:	4611      	mov	r1, r2
 800db42:	4620      	mov	r0, r4
 800db44:	4690      	mov	r8, r2
 800db46:	f7ff ffdb 	bl	800db00 <__mcmp>
 800db4a:	1e05      	subs	r5, r0, #0
 800db4c:	d110      	bne.n	800db70 <__mdiff+0x38>
 800db4e:	4629      	mov	r1, r5
 800db50:	4630      	mov	r0, r6
 800db52:	f7ff fd09 	bl	800d568 <_Balloc>
 800db56:	b930      	cbnz	r0, 800db66 <__mdiff+0x2e>
 800db58:	4b3a      	ldr	r3, [pc, #232]	; (800dc44 <__mdiff+0x10c>)
 800db5a:	4602      	mov	r2, r0
 800db5c:	f240 2132 	movw	r1, #562	; 0x232
 800db60:	4839      	ldr	r0, [pc, #228]	; (800dc48 <__mdiff+0x110>)
 800db62:	f7fe f881 	bl	800bc68 <__assert_func>
 800db66:	2301      	movs	r3, #1
 800db68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800db6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db70:	bfa4      	itt	ge
 800db72:	4643      	movge	r3, r8
 800db74:	46a0      	movge	r8, r4
 800db76:	4630      	mov	r0, r6
 800db78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800db7c:	bfa6      	itte	ge
 800db7e:	461c      	movge	r4, r3
 800db80:	2500      	movge	r5, #0
 800db82:	2501      	movlt	r5, #1
 800db84:	f7ff fcf0 	bl	800d568 <_Balloc>
 800db88:	b920      	cbnz	r0, 800db94 <__mdiff+0x5c>
 800db8a:	4b2e      	ldr	r3, [pc, #184]	; (800dc44 <__mdiff+0x10c>)
 800db8c:	4602      	mov	r2, r0
 800db8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800db92:	e7e5      	b.n	800db60 <__mdiff+0x28>
 800db94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800db98:	6926      	ldr	r6, [r4, #16]
 800db9a:	60c5      	str	r5, [r0, #12]
 800db9c:	f104 0914 	add.w	r9, r4, #20
 800dba0:	f108 0514 	add.w	r5, r8, #20
 800dba4:	f100 0e14 	add.w	lr, r0, #20
 800dba8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dbac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dbb0:	f108 0210 	add.w	r2, r8, #16
 800dbb4:	46f2      	mov	sl, lr
 800dbb6:	2100      	movs	r1, #0
 800dbb8:	f859 3b04 	ldr.w	r3, [r9], #4
 800dbbc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dbc0:	fa1f f883 	uxth.w	r8, r3
 800dbc4:	fa11 f18b 	uxtah	r1, r1, fp
 800dbc8:	0c1b      	lsrs	r3, r3, #16
 800dbca:	eba1 0808 	sub.w	r8, r1, r8
 800dbce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dbd2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dbd6:	fa1f f888 	uxth.w	r8, r8
 800dbda:	1419      	asrs	r1, r3, #16
 800dbdc:	454e      	cmp	r6, r9
 800dbde:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dbe2:	f84a 3b04 	str.w	r3, [sl], #4
 800dbe6:	d8e7      	bhi.n	800dbb8 <__mdiff+0x80>
 800dbe8:	1b33      	subs	r3, r6, r4
 800dbea:	3b15      	subs	r3, #21
 800dbec:	f023 0303 	bic.w	r3, r3, #3
 800dbf0:	3304      	adds	r3, #4
 800dbf2:	3415      	adds	r4, #21
 800dbf4:	42a6      	cmp	r6, r4
 800dbf6:	bf38      	it	cc
 800dbf8:	2304      	movcc	r3, #4
 800dbfa:	441d      	add	r5, r3
 800dbfc:	4473      	add	r3, lr
 800dbfe:	469e      	mov	lr, r3
 800dc00:	462e      	mov	r6, r5
 800dc02:	4566      	cmp	r6, ip
 800dc04:	d30e      	bcc.n	800dc24 <__mdiff+0xec>
 800dc06:	f10c 0203 	add.w	r2, ip, #3
 800dc0a:	1b52      	subs	r2, r2, r5
 800dc0c:	f022 0203 	bic.w	r2, r2, #3
 800dc10:	3d03      	subs	r5, #3
 800dc12:	45ac      	cmp	ip, r5
 800dc14:	bf38      	it	cc
 800dc16:	2200      	movcc	r2, #0
 800dc18:	441a      	add	r2, r3
 800dc1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dc1e:	b17b      	cbz	r3, 800dc40 <__mdiff+0x108>
 800dc20:	6107      	str	r7, [r0, #16]
 800dc22:	e7a3      	b.n	800db6c <__mdiff+0x34>
 800dc24:	f856 8b04 	ldr.w	r8, [r6], #4
 800dc28:	fa11 f288 	uxtah	r2, r1, r8
 800dc2c:	1414      	asrs	r4, r2, #16
 800dc2e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dc32:	b292      	uxth	r2, r2
 800dc34:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dc38:	f84e 2b04 	str.w	r2, [lr], #4
 800dc3c:	1421      	asrs	r1, r4, #16
 800dc3e:	e7e0      	b.n	800dc02 <__mdiff+0xca>
 800dc40:	3f01      	subs	r7, #1
 800dc42:	e7ea      	b.n	800dc1a <__mdiff+0xe2>
 800dc44:	0800fcab 	.word	0x0800fcab
 800dc48:	0800fd98 	.word	0x0800fd98

0800dc4c <__ulp>:
 800dc4c:	b082      	sub	sp, #8
 800dc4e:	ed8d 0b00 	vstr	d0, [sp]
 800dc52:	9b01      	ldr	r3, [sp, #4]
 800dc54:	4912      	ldr	r1, [pc, #72]	; (800dca0 <__ulp+0x54>)
 800dc56:	4019      	ands	r1, r3
 800dc58:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800dc5c:	2900      	cmp	r1, #0
 800dc5e:	dd05      	ble.n	800dc6c <__ulp+0x20>
 800dc60:	2200      	movs	r2, #0
 800dc62:	460b      	mov	r3, r1
 800dc64:	ec43 2b10 	vmov	d0, r2, r3
 800dc68:	b002      	add	sp, #8
 800dc6a:	4770      	bx	lr
 800dc6c:	4249      	negs	r1, r1
 800dc6e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800dc72:	ea4f 5021 	mov.w	r0, r1, asr #20
 800dc76:	f04f 0200 	mov.w	r2, #0
 800dc7a:	f04f 0300 	mov.w	r3, #0
 800dc7e:	da04      	bge.n	800dc8a <__ulp+0x3e>
 800dc80:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800dc84:	fa41 f300 	asr.w	r3, r1, r0
 800dc88:	e7ec      	b.n	800dc64 <__ulp+0x18>
 800dc8a:	f1a0 0114 	sub.w	r1, r0, #20
 800dc8e:	291e      	cmp	r1, #30
 800dc90:	bfda      	itte	le
 800dc92:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800dc96:	fa20 f101 	lsrle.w	r1, r0, r1
 800dc9a:	2101      	movgt	r1, #1
 800dc9c:	460a      	mov	r2, r1
 800dc9e:	e7e1      	b.n	800dc64 <__ulp+0x18>
 800dca0:	7ff00000 	.word	0x7ff00000

0800dca4 <__b2d>:
 800dca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dca6:	6905      	ldr	r5, [r0, #16]
 800dca8:	f100 0714 	add.w	r7, r0, #20
 800dcac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800dcb0:	1f2e      	subs	r6, r5, #4
 800dcb2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	f7ff fd48 	bl	800d74c <__hi0bits>
 800dcbc:	f1c0 0320 	rsb	r3, r0, #32
 800dcc0:	280a      	cmp	r0, #10
 800dcc2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800dd40 <__b2d+0x9c>
 800dcc6:	600b      	str	r3, [r1, #0]
 800dcc8:	dc14      	bgt.n	800dcf4 <__b2d+0x50>
 800dcca:	f1c0 0e0b 	rsb	lr, r0, #11
 800dcce:	fa24 f10e 	lsr.w	r1, r4, lr
 800dcd2:	42b7      	cmp	r7, r6
 800dcd4:	ea41 030c 	orr.w	r3, r1, ip
 800dcd8:	bf34      	ite	cc
 800dcda:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dcde:	2100      	movcs	r1, #0
 800dce0:	3015      	adds	r0, #21
 800dce2:	fa04 f000 	lsl.w	r0, r4, r0
 800dce6:	fa21 f10e 	lsr.w	r1, r1, lr
 800dcea:	ea40 0201 	orr.w	r2, r0, r1
 800dcee:	ec43 2b10 	vmov	d0, r2, r3
 800dcf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcf4:	42b7      	cmp	r7, r6
 800dcf6:	bf3a      	itte	cc
 800dcf8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800dcfc:	f1a5 0608 	subcc.w	r6, r5, #8
 800dd00:	2100      	movcs	r1, #0
 800dd02:	380b      	subs	r0, #11
 800dd04:	d017      	beq.n	800dd36 <__b2d+0x92>
 800dd06:	f1c0 0c20 	rsb	ip, r0, #32
 800dd0a:	fa04 f500 	lsl.w	r5, r4, r0
 800dd0e:	42be      	cmp	r6, r7
 800dd10:	fa21 f40c 	lsr.w	r4, r1, ip
 800dd14:	ea45 0504 	orr.w	r5, r5, r4
 800dd18:	bf8c      	ite	hi
 800dd1a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800dd1e:	2400      	movls	r4, #0
 800dd20:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800dd24:	fa01 f000 	lsl.w	r0, r1, r0
 800dd28:	fa24 f40c 	lsr.w	r4, r4, ip
 800dd2c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dd30:	ea40 0204 	orr.w	r2, r0, r4
 800dd34:	e7db      	b.n	800dcee <__b2d+0x4a>
 800dd36:	ea44 030c 	orr.w	r3, r4, ip
 800dd3a:	460a      	mov	r2, r1
 800dd3c:	e7d7      	b.n	800dcee <__b2d+0x4a>
 800dd3e:	bf00      	nop
 800dd40:	3ff00000 	.word	0x3ff00000

0800dd44 <__d2b>:
 800dd44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd48:	4689      	mov	r9, r1
 800dd4a:	2101      	movs	r1, #1
 800dd4c:	ec57 6b10 	vmov	r6, r7, d0
 800dd50:	4690      	mov	r8, r2
 800dd52:	f7ff fc09 	bl	800d568 <_Balloc>
 800dd56:	4604      	mov	r4, r0
 800dd58:	b930      	cbnz	r0, 800dd68 <__d2b+0x24>
 800dd5a:	4602      	mov	r2, r0
 800dd5c:	4b25      	ldr	r3, [pc, #148]	; (800ddf4 <__d2b+0xb0>)
 800dd5e:	4826      	ldr	r0, [pc, #152]	; (800ddf8 <__d2b+0xb4>)
 800dd60:	f240 310a 	movw	r1, #778	; 0x30a
 800dd64:	f7fd ff80 	bl	800bc68 <__assert_func>
 800dd68:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dd6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dd70:	bb35      	cbnz	r5, 800ddc0 <__d2b+0x7c>
 800dd72:	2e00      	cmp	r6, #0
 800dd74:	9301      	str	r3, [sp, #4]
 800dd76:	d028      	beq.n	800ddca <__d2b+0x86>
 800dd78:	4668      	mov	r0, sp
 800dd7a:	9600      	str	r6, [sp, #0]
 800dd7c:	f7ff fd06 	bl	800d78c <__lo0bits>
 800dd80:	9900      	ldr	r1, [sp, #0]
 800dd82:	b300      	cbz	r0, 800ddc6 <__d2b+0x82>
 800dd84:	9a01      	ldr	r2, [sp, #4]
 800dd86:	f1c0 0320 	rsb	r3, r0, #32
 800dd8a:	fa02 f303 	lsl.w	r3, r2, r3
 800dd8e:	430b      	orrs	r3, r1
 800dd90:	40c2      	lsrs	r2, r0
 800dd92:	6163      	str	r3, [r4, #20]
 800dd94:	9201      	str	r2, [sp, #4]
 800dd96:	9b01      	ldr	r3, [sp, #4]
 800dd98:	61a3      	str	r3, [r4, #24]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	bf14      	ite	ne
 800dd9e:	2202      	movne	r2, #2
 800dda0:	2201      	moveq	r2, #1
 800dda2:	6122      	str	r2, [r4, #16]
 800dda4:	b1d5      	cbz	r5, 800dddc <__d2b+0x98>
 800dda6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ddaa:	4405      	add	r5, r0
 800ddac:	f8c9 5000 	str.w	r5, [r9]
 800ddb0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ddb4:	f8c8 0000 	str.w	r0, [r8]
 800ddb8:	4620      	mov	r0, r4
 800ddba:	b003      	add	sp, #12
 800ddbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ddc4:	e7d5      	b.n	800dd72 <__d2b+0x2e>
 800ddc6:	6161      	str	r1, [r4, #20]
 800ddc8:	e7e5      	b.n	800dd96 <__d2b+0x52>
 800ddca:	a801      	add	r0, sp, #4
 800ddcc:	f7ff fcde 	bl	800d78c <__lo0bits>
 800ddd0:	9b01      	ldr	r3, [sp, #4]
 800ddd2:	6163      	str	r3, [r4, #20]
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	6122      	str	r2, [r4, #16]
 800ddd8:	3020      	adds	r0, #32
 800ddda:	e7e3      	b.n	800dda4 <__d2b+0x60>
 800dddc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dde0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dde4:	f8c9 0000 	str.w	r0, [r9]
 800dde8:	6918      	ldr	r0, [r3, #16]
 800ddea:	f7ff fcaf 	bl	800d74c <__hi0bits>
 800ddee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ddf2:	e7df      	b.n	800ddb4 <__d2b+0x70>
 800ddf4:	0800fcab 	.word	0x0800fcab
 800ddf8:	0800fd98 	.word	0x0800fd98

0800ddfc <__ratio>:
 800ddfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de00:	4688      	mov	r8, r1
 800de02:	4669      	mov	r1, sp
 800de04:	4681      	mov	r9, r0
 800de06:	f7ff ff4d 	bl	800dca4 <__b2d>
 800de0a:	a901      	add	r1, sp, #4
 800de0c:	4640      	mov	r0, r8
 800de0e:	ec55 4b10 	vmov	r4, r5, d0
 800de12:	f7ff ff47 	bl	800dca4 <__b2d>
 800de16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de1a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800de1e:	eba3 0c02 	sub.w	ip, r3, r2
 800de22:	e9dd 3200 	ldrd	r3, r2, [sp]
 800de26:	1a9b      	subs	r3, r3, r2
 800de28:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800de2c:	ec51 0b10 	vmov	r0, r1, d0
 800de30:	2b00      	cmp	r3, #0
 800de32:	bfd6      	itet	le
 800de34:	460a      	movle	r2, r1
 800de36:	462a      	movgt	r2, r5
 800de38:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800de3c:	468b      	mov	fp, r1
 800de3e:	462f      	mov	r7, r5
 800de40:	bfd4      	ite	le
 800de42:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800de46:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800de4a:	4620      	mov	r0, r4
 800de4c:	ee10 2a10 	vmov	r2, s0
 800de50:	465b      	mov	r3, fp
 800de52:	4639      	mov	r1, r7
 800de54:	f7f2 fd02 	bl	800085c <__aeabi_ddiv>
 800de58:	ec41 0b10 	vmov	d0, r0, r1
 800de5c:	b003      	add	sp, #12
 800de5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800de62 <__copybits>:
 800de62:	3901      	subs	r1, #1
 800de64:	b570      	push	{r4, r5, r6, lr}
 800de66:	1149      	asrs	r1, r1, #5
 800de68:	6914      	ldr	r4, [r2, #16]
 800de6a:	3101      	adds	r1, #1
 800de6c:	f102 0314 	add.w	r3, r2, #20
 800de70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800de74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800de78:	1f05      	subs	r5, r0, #4
 800de7a:	42a3      	cmp	r3, r4
 800de7c:	d30c      	bcc.n	800de98 <__copybits+0x36>
 800de7e:	1aa3      	subs	r3, r4, r2
 800de80:	3b11      	subs	r3, #17
 800de82:	f023 0303 	bic.w	r3, r3, #3
 800de86:	3211      	adds	r2, #17
 800de88:	42a2      	cmp	r2, r4
 800de8a:	bf88      	it	hi
 800de8c:	2300      	movhi	r3, #0
 800de8e:	4418      	add	r0, r3
 800de90:	2300      	movs	r3, #0
 800de92:	4288      	cmp	r0, r1
 800de94:	d305      	bcc.n	800dea2 <__copybits+0x40>
 800de96:	bd70      	pop	{r4, r5, r6, pc}
 800de98:	f853 6b04 	ldr.w	r6, [r3], #4
 800de9c:	f845 6f04 	str.w	r6, [r5, #4]!
 800dea0:	e7eb      	b.n	800de7a <__copybits+0x18>
 800dea2:	f840 3b04 	str.w	r3, [r0], #4
 800dea6:	e7f4      	b.n	800de92 <__copybits+0x30>

0800dea8 <__any_on>:
 800dea8:	f100 0214 	add.w	r2, r0, #20
 800deac:	6900      	ldr	r0, [r0, #16]
 800deae:	114b      	asrs	r3, r1, #5
 800deb0:	4298      	cmp	r0, r3
 800deb2:	b510      	push	{r4, lr}
 800deb4:	db11      	blt.n	800deda <__any_on+0x32>
 800deb6:	dd0a      	ble.n	800dece <__any_on+0x26>
 800deb8:	f011 011f 	ands.w	r1, r1, #31
 800debc:	d007      	beq.n	800dece <__any_on+0x26>
 800debe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dec2:	fa24 f001 	lsr.w	r0, r4, r1
 800dec6:	fa00 f101 	lsl.w	r1, r0, r1
 800deca:	428c      	cmp	r4, r1
 800decc:	d10b      	bne.n	800dee6 <__any_on+0x3e>
 800dece:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d803      	bhi.n	800dede <__any_on+0x36>
 800ded6:	2000      	movs	r0, #0
 800ded8:	bd10      	pop	{r4, pc}
 800deda:	4603      	mov	r3, r0
 800dedc:	e7f7      	b.n	800dece <__any_on+0x26>
 800dede:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dee2:	2900      	cmp	r1, #0
 800dee4:	d0f5      	beq.n	800ded2 <__any_on+0x2a>
 800dee6:	2001      	movs	r0, #1
 800dee8:	e7f6      	b.n	800ded8 <__any_on+0x30>

0800deea <_calloc_r>:
 800deea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800deec:	fba1 2402 	umull	r2, r4, r1, r2
 800def0:	b94c      	cbnz	r4, 800df06 <_calloc_r+0x1c>
 800def2:	4611      	mov	r1, r2
 800def4:	9201      	str	r2, [sp, #4]
 800def6:	f7fc f8d5 	bl	800a0a4 <_malloc_r>
 800defa:	9a01      	ldr	r2, [sp, #4]
 800defc:	4605      	mov	r5, r0
 800defe:	b930      	cbnz	r0, 800df0e <_calloc_r+0x24>
 800df00:	4628      	mov	r0, r5
 800df02:	b003      	add	sp, #12
 800df04:	bd30      	pop	{r4, r5, pc}
 800df06:	220c      	movs	r2, #12
 800df08:	6002      	str	r2, [r0, #0]
 800df0a:	2500      	movs	r5, #0
 800df0c:	e7f8      	b.n	800df00 <_calloc_r+0x16>
 800df0e:	4621      	mov	r1, r4
 800df10:	f7fc f854 	bl	8009fbc <memset>
 800df14:	e7f4      	b.n	800df00 <_calloc_r+0x16>

0800df16 <__ssputs_r>:
 800df16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df1a:	688e      	ldr	r6, [r1, #8]
 800df1c:	429e      	cmp	r6, r3
 800df1e:	4682      	mov	sl, r0
 800df20:	460c      	mov	r4, r1
 800df22:	4690      	mov	r8, r2
 800df24:	461f      	mov	r7, r3
 800df26:	d838      	bhi.n	800df9a <__ssputs_r+0x84>
 800df28:	898a      	ldrh	r2, [r1, #12]
 800df2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800df2e:	d032      	beq.n	800df96 <__ssputs_r+0x80>
 800df30:	6825      	ldr	r5, [r4, #0]
 800df32:	6909      	ldr	r1, [r1, #16]
 800df34:	eba5 0901 	sub.w	r9, r5, r1
 800df38:	6965      	ldr	r5, [r4, #20]
 800df3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df42:	3301      	adds	r3, #1
 800df44:	444b      	add	r3, r9
 800df46:	106d      	asrs	r5, r5, #1
 800df48:	429d      	cmp	r5, r3
 800df4a:	bf38      	it	cc
 800df4c:	461d      	movcc	r5, r3
 800df4e:	0553      	lsls	r3, r2, #21
 800df50:	d531      	bpl.n	800dfb6 <__ssputs_r+0xa0>
 800df52:	4629      	mov	r1, r5
 800df54:	f7fc f8a6 	bl	800a0a4 <_malloc_r>
 800df58:	4606      	mov	r6, r0
 800df5a:	b950      	cbnz	r0, 800df72 <__ssputs_r+0x5c>
 800df5c:	230c      	movs	r3, #12
 800df5e:	f8ca 3000 	str.w	r3, [sl]
 800df62:	89a3      	ldrh	r3, [r4, #12]
 800df64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df68:	81a3      	strh	r3, [r4, #12]
 800df6a:	f04f 30ff 	mov.w	r0, #4294967295
 800df6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df72:	6921      	ldr	r1, [r4, #16]
 800df74:	464a      	mov	r2, r9
 800df76:	f7fc f813 	bl	8009fa0 <memcpy>
 800df7a:	89a3      	ldrh	r3, [r4, #12]
 800df7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800df80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df84:	81a3      	strh	r3, [r4, #12]
 800df86:	6126      	str	r6, [r4, #16]
 800df88:	6165      	str	r5, [r4, #20]
 800df8a:	444e      	add	r6, r9
 800df8c:	eba5 0509 	sub.w	r5, r5, r9
 800df90:	6026      	str	r6, [r4, #0]
 800df92:	60a5      	str	r5, [r4, #8]
 800df94:	463e      	mov	r6, r7
 800df96:	42be      	cmp	r6, r7
 800df98:	d900      	bls.n	800df9c <__ssputs_r+0x86>
 800df9a:	463e      	mov	r6, r7
 800df9c:	6820      	ldr	r0, [r4, #0]
 800df9e:	4632      	mov	r2, r6
 800dfa0:	4641      	mov	r1, r8
 800dfa2:	f000 fac5 	bl	800e530 <memmove>
 800dfa6:	68a3      	ldr	r3, [r4, #8]
 800dfa8:	1b9b      	subs	r3, r3, r6
 800dfaa:	60a3      	str	r3, [r4, #8]
 800dfac:	6823      	ldr	r3, [r4, #0]
 800dfae:	4433      	add	r3, r6
 800dfb0:	6023      	str	r3, [r4, #0]
 800dfb2:	2000      	movs	r0, #0
 800dfb4:	e7db      	b.n	800df6e <__ssputs_r+0x58>
 800dfb6:	462a      	mov	r2, r5
 800dfb8:	f000 fad4 	bl	800e564 <_realloc_r>
 800dfbc:	4606      	mov	r6, r0
 800dfbe:	2800      	cmp	r0, #0
 800dfc0:	d1e1      	bne.n	800df86 <__ssputs_r+0x70>
 800dfc2:	6921      	ldr	r1, [r4, #16]
 800dfc4:	4650      	mov	r0, sl
 800dfc6:	f7fc f801 	bl	8009fcc <_free_r>
 800dfca:	e7c7      	b.n	800df5c <__ssputs_r+0x46>

0800dfcc <_svfiprintf_r>:
 800dfcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfd0:	4698      	mov	r8, r3
 800dfd2:	898b      	ldrh	r3, [r1, #12]
 800dfd4:	061b      	lsls	r3, r3, #24
 800dfd6:	b09d      	sub	sp, #116	; 0x74
 800dfd8:	4607      	mov	r7, r0
 800dfda:	460d      	mov	r5, r1
 800dfdc:	4614      	mov	r4, r2
 800dfde:	d50e      	bpl.n	800dffe <_svfiprintf_r+0x32>
 800dfe0:	690b      	ldr	r3, [r1, #16]
 800dfe2:	b963      	cbnz	r3, 800dffe <_svfiprintf_r+0x32>
 800dfe4:	2140      	movs	r1, #64	; 0x40
 800dfe6:	f7fc f85d 	bl	800a0a4 <_malloc_r>
 800dfea:	6028      	str	r0, [r5, #0]
 800dfec:	6128      	str	r0, [r5, #16]
 800dfee:	b920      	cbnz	r0, 800dffa <_svfiprintf_r+0x2e>
 800dff0:	230c      	movs	r3, #12
 800dff2:	603b      	str	r3, [r7, #0]
 800dff4:	f04f 30ff 	mov.w	r0, #4294967295
 800dff8:	e0d1      	b.n	800e19e <_svfiprintf_r+0x1d2>
 800dffa:	2340      	movs	r3, #64	; 0x40
 800dffc:	616b      	str	r3, [r5, #20]
 800dffe:	2300      	movs	r3, #0
 800e000:	9309      	str	r3, [sp, #36]	; 0x24
 800e002:	2320      	movs	r3, #32
 800e004:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e008:	f8cd 800c 	str.w	r8, [sp, #12]
 800e00c:	2330      	movs	r3, #48	; 0x30
 800e00e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e1b8 <_svfiprintf_r+0x1ec>
 800e012:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e016:	f04f 0901 	mov.w	r9, #1
 800e01a:	4623      	mov	r3, r4
 800e01c:	469a      	mov	sl, r3
 800e01e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e022:	b10a      	cbz	r2, 800e028 <_svfiprintf_r+0x5c>
 800e024:	2a25      	cmp	r2, #37	; 0x25
 800e026:	d1f9      	bne.n	800e01c <_svfiprintf_r+0x50>
 800e028:	ebba 0b04 	subs.w	fp, sl, r4
 800e02c:	d00b      	beq.n	800e046 <_svfiprintf_r+0x7a>
 800e02e:	465b      	mov	r3, fp
 800e030:	4622      	mov	r2, r4
 800e032:	4629      	mov	r1, r5
 800e034:	4638      	mov	r0, r7
 800e036:	f7ff ff6e 	bl	800df16 <__ssputs_r>
 800e03a:	3001      	adds	r0, #1
 800e03c:	f000 80aa 	beq.w	800e194 <_svfiprintf_r+0x1c8>
 800e040:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e042:	445a      	add	r2, fp
 800e044:	9209      	str	r2, [sp, #36]	; 0x24
 800e046:	f89a 3000 	ldrb.w	r3, [sl]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	f000 80a2 	beq.w	800e194 <_svfiprintf_r+0x1c8>
 800e050:	2300      	movs	r3, #0
 800e052:	f04f 32ff 	mov.w	r2, #4294967295
 800e056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e05a:	f10a 0a01 	add.w	sl, sl, #1
 800e05e:	9304      	str	r3, [sp, #16]
 800e060:	9307      	str	r3, [sp, #28]
 800e062:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e066:	931a      	str	r3, [sp, #104]	; 0x68
 800e068:	4654      	mov	r4, sl
 800e06a:	2205      	movs	r2, #5
 800e06c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e070:	4851      	ldr	r0, [pc, #324]	; (800e1b8 <_svfiprintf_r+0x1ec>)
 800e072:	f7f2 f8bd 	bl	80001f0 <memchr>
 800e076:	9a04      	ldr	r2, [sp, #16]
 800e078:	b9d8      	cbnz	r0, 800e0b2 <_svfiprintf_r+0xe6>
 800e07a:	06d0      	lsls	r0, r2, #27
 800e07c:	bf44      	itt	mi
 800e07e:	2320      	movmi	r3, #32
 800e080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e084:	0711      	lsls	r1, r2, #28
 800e086:	bf44      	itt	mi
 800e088:	232b      	movmi	r3, #43	; 0x2b
 800e08a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e08e:	f89a 3000 	ldrb.w	r3, [sl]
 800e092:	2b2a      	cmp	r3, #42	; 0x2a
 800e094:	d015      	beq.n	800e0c2 <_svfiprintf_r+0xf6>
 800e096:	9a07      	ldr	r2, [sp, #28]
 800e098:	4654      	mov	r4, sl
 800e09a:	2000      	movs	r0, #0
 800e09c:	f04f 0c0a 	mov.w	ip, #10
 800e0a0:	4621      	mov	r1, r4
 800e0a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0a6:	3b30      	subs	r3, #48	; 0x30
 800e0a8:	2b09      	cmp	r3, #9
 800e0aa:	d94e      	bls.n	800e14a <_svfiprintf_r+0x17e>
 800e0ac:	b1b0      	cbz	r0, 800e0dc <_svfiprintf_r+0x110>
 800e0ae:	9207      	str	r2, [sp, #28]
 800e0b0:	e014      	b.n	800e0dc <_svfiprintf_r+0x110>
 800e0b2:	eba0 0308 	sub.w	r3, r0, r8
 800e0b6:	fa09 f303 	lsl.w	r3, r9, r3
 800e0ba:	4313      	orrs	r3, r2
 800e0bc:	9304      	str	r3, [sp, #16]
 800e0be:	46a2      	mov	sl, r4
 800e0c0:	e7d2      	b.n	800e068 <_svfiprintf_r+0x9c>
 800e0c2:	9b03      	ldr	r3, [sp, #12]
 800e0c4:	1d19      	adds	r1, r3, #4
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	9103      	str	r1, [sp, #12]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	bfbb      	ittet	lt
 800e0ce:	425b      	neglt	r3, r3
 800e0d0:	f042 0202 	orrlt.w	r2, r2, #2
 800e0d4:	9307      	strge	r3, [sp, #28]
 800e0d6:	9307      	strlt	r3, [sp, #28]
 800e0d8:	bfb8      	it	lt
 800e0da:	9204      	strlt	r2, [sp, #16]
 800e0dc:	7823      	ldrb	r3, [r4, #0]
 800e0de:	2b2e      	cmp	r3, #46	; 0x2e
 800e0e0:	d10c      	bne.n	800e0fc <_svfiprintf_r+0x130>
 800e0e2:	7863      	ldrb	r3, [r4, #1]
 800e0e4:	2b2a      	cmp	r3, #42	; 0x2a
 800e0e6:	d135      	bne.n	800e154 <_svfiprintf_r+0x188>
 800e0e8:	9b03      	ldr	r3, [sp, #12]
 800e0ea:	1d1a      	adds	r2, r3, #4
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	9203      	str	r2, [sp, #12]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	bfb8      	it	lt
 800e0f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800e0f8:	3402      	adds	r4, #2
 800e0fa:	9305      	str	r3, [sp, #20]
 800e0fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e1c8 <_svfiprintf_r+0x1fc>
 800e100:	7821      	ldrb	r1, [r4, #0]
 800e102:	2203      	movs	r2, #3
 800e104:	4650      	mov	r0, sl
 800e106:	f7f2 f873 	bl	80001f0 <memchr>
 800e10a:	b140      	cbz	r0, 800e11e <_svfiprintf_r+0x152>
 800e10c:	2340      	movs	r3, #64	; 0x40
 800e10e:	eba0 000a 	sub.w	r0, r0, sl
 800e112:	fa03 f000 	lsl.w	r0, r3, r0
 800e116:	9b04      	ldr	r3, [sp, #16]
 800e118:	4303      	orrs	r3, r0
 800e11a:	3401      	adds	r4, #1
 800e11c:	9304      	str	r3, [sp, #16]
 800e11e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e122:	4826      	ldr	r0, [pc, #152]	; (800e1bc <_svfiprintf_r+0x1f0>)
 800e124:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e128:	2206      	movs	r2, #6
 800e12a:	f7f2 f861 	bl	80001f0 <memchr>
 800e12e:	2800      	cmp	r0, #0
 800e130:	d038      	beq.n	800e1a4 <_svfiprintf_r+0x1d8>
 800e132:	4b23      	ldr	r3, [pc, #140]	; (800e1c0 <_svfiprintf_r+0x1f4>)
 800e134:	bb1b      	cbnz	r3, 800e17e <_svfiprintf_r+0x1b2>
 800e136:	9b03      	ldr	r3, [sp, #12]
 800e138:	3307      	adds	r3, #7
 800e13a:	f023 0307 	bic.w	r3, r3, #7
 800e13e:	3308      	adds	r3, #8
 800e140:	9303      	str	r3, [sp, #12]
 800e142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e144:	4433      	add	r3, r6
 800e146:	9309      	str	r3, [sp, #36]	; 0x24
 800e148:	e767      	b.n	800e01a <_svfiprintf_r+0x4e>
 800e14a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e14e:	460c      	mov	r4, r1
 800e150:	2001      	movs	r0, #1
 800e152:	e7a5      	b.n	800e0a0 <_svfiprintf_r+0xd4>
 800e154:	2300      	movs	r3, #0
 800e156:	3401      	adds	r4, #1
 800e158:	9305      	str	r3, [sp, #20]
 800e15a:	4619      	mov	r1, r3
 800e15c:	f04f 0c0a 	mov.w	ip, #10
 800e160:	4620      	mov	r0, r4
 800e162:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e166:	3a30      	subs	r2, #48	; 0x30
 800e168:	2a09      	cmp	r2, #9
 800e16a:	d903      	bls.n	800e174 <_svfiprintf_r+0x1a8>
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d0c5      	beq.n	800e0fc <_svfiprintf_r+0x130>
 800e170:	9105      	str	r1, [sp, #20]
 800e172:	e7c3      	b.n	800e0fc <_svfiprintf_r+0x130>
 800e174:	fb0c 2101 	mla	r1, ip, r1, r2
 800e178:	4604      	mov	r4, r0
 800e17a:	2301      	movs	r3, #1
 800e17c:	e7f0      	b.n	800e160 <_svfiprintf_r+0x194>
 800e17e:	ab03      	add	r3, sp, #12
 800e180:	9300      	str	r3, [sp, #0]
 800e182:	462a      	mov	r2, r5
 800e184:	4b0f      	ldr	r3, [pc, #60]	; (800e1c4 <_svfiprintf_r+0x1f8>)
 800e186:	a904      	add	r1, sp, #16
 800e188:	4638      	mov	r0, r7
 800e18a:	f7fc f89f 	bl	800a2cc <_printf_float>
 800e18e:	1c42      	adds	r2, r0, #1
 800e190:	4606      	mov	r6, r0
 800e192:	d1d6      	bne.n	800e142 <_svfiprintf_r+0x176>
 800e194:	89ab      	ldrh	r3, [r5, #12]
 800e196:	065b      	lsls	r3, r3, #25
 800e198:	f53f af2c 	bmi.w	800dff4 <_svfiprintf_r+0x28>
 800e19c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e19e:	b01d      	add	sp, #116	; 0x74
 800e1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1a4:	ab03      	add	r3, sp, #12
 800e1a6:	9300      	str	r3, [sp, #0]
 800e1a8:	462a      	mov	r2, r5
 800e1aa:	4b06      	ldr	r3, [pc, #24]	; (800e1c4 <_svfiprintf_r+0x1f8>)
 800e1ac:	a904      	add	r1, sp, #16
 800e1ae:	4638      	mov	r0, r7
 800e1b0:	f7fc fb30 	bl	800a814 <_printf_i>
 800e1b4:	e7eb      	b.n	800e18e <_svfiprintf_r+0x1c2>
 800e1b6:	bf00      	nop
 800e1b8:	0800fef4 	.word	0x0800fef4
 800e1bc:	0800fefe 	.word	0x0800fefe
 800e1c0:	0800a2cd 	.word	0x0800a2cd
 800e1c4:	0800df17 	.word	0x0800df17
 800e1c8:	0800fefa 	.word	0x0800fefa

0800e1cc <__sfputc_r>:
 800e1cc:	6893      	ldr	r3, [r2, #8]
 800e1ce:	3b01      	subs	r3, #1
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	b410      	push	{r4}
 800e1d4:	6093      	str	r3, [r2, #8]
 800e1d6:	da08      	bge.n	800e1ea <__sfputc_r+0x1e>
 800e1d8:	6994      	ldr	r4, [r2, #24]
 800e1da:	42a3      	cmp	r3, r4
 800e1dc:	db01      	blt.n	800e1e2 <__sfputc_r+0x16>
 800e1de:	290a      	cmp	r1, #10
 800e1e0:	d103      	bne.n	800e1ea <__sfputc_r+0x1e>
 800e1e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1e6:	f7fd bc6d 	b.w	800bac4 <__swbuf_r>
 800e1ea:	6813      	ldr	r3, [r2, #0]
 800e1ec:	1c58      	adds	r0, r3, #1
 800e1ee:	6010      	str	r0, [r2, #0]
 800e1f0:	7019      	strb	r1, [r3, #0]
 800e1f2:	4608      	mov	r0, r1
 800e1f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1f8:	4770      	bx	lr

0800e1fa <__sfputs_r>:
 800e1fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1fc:	4606      	mov	r6, r0
 800e1fe:	460f      	mov	r7, r1
 800e200:	4614      	mov	r4, r2
 800e202:	18d5      	adds	r5, r2, r3
 800e204:	42ac      	cmp	r4, r5
 800e206:	d101      	bne.n	800e20c <__sfputs_r+0x12>
 800e208:	2000      	movs	r0, #0
 800e20a:	e007      	b.n	800e21c <__sfputs_r+0x22>
 800e20c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e210:	463a      	mov	r2, r7
 800e212:	4630      	mov	r0, r6
 800e214:	f7ff ffda 	bl	800e1cc <__sfputc_r>
 800e218:	1c43      	adds	r3, r0, #1
 800e21a:	d1f3      	bne.n	800e204 <__sfputs_r+0xa>
 800e21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e220 <_vfiprintf_r>:
 800e220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e224:	460d      	mov	r5, r1
 800e226:	b09d      	sub	sp, #116	; 0x74
 800e228:	4614      	mov	r4, r2
 800e22a:	4698      	mov	r8, r3
 800e22c:	4606      	mov	r6, r0
 800e22e:	b118      	cbz	r0, 800e238 <_vfiprintf_r+0x18>
 800e230:	6983      	ldr	r3, [r0, #24]
 800e232:	b90b      	cbnz	r3, 800e238 <_vfiprintf_r+0x18>
 800e234:	f7fe fcdc 	bl	800cbf0 <__sinit>
 800e238:	4b89      	ldr	r3, [pc, #548]	; (800e460 <_vfiprintf_r+0x240>)
 800e23a:	429d      	cmp	r5, r3
 800e23c:	d11b      	bne.n	800e276 <_vfiprintf_r+0x56>
 800e23e:	6875      	ldr	r5, [r6, #4]
 800e240:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e242:	07d9      	lsls	r1, r3, #31
 800e244:	d405      	bmi.n	800e252 <_vfiprintf_r+0x32>
 800e246:	89ab      	ldrh	r3, [r5, #12]
 800e248:	059a      	lsls	r2, r3, #22
 800e24a:	d402      	bmi.n	800e252 <_vfiprintf_r+0x32>
 800e24c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e24e:	f7ff f8f2 	bl	800d436 <__retarget_lock_acquire_recursive>
 800e252:	89ab      	ldrh	r3, [r5, #12]
 800e254:	071b      	lsls	r3, r3, #28
 800e256:	d501      	bpl.n	800e25c <_vfiprintf_r+0x3c>
 800e258:	692b      	ldr	r3, [r5, #16]
 800e25a:	b9eb      	cbnz	r3, 800e298 <_vfiprintf_r+0x78>
 800e25c:	4629      	mov	r1, r5
 800e25e:	4630      	mov	r0, r6
 800e260:	f7fd fc94 	bl	800bb8c <__swsetup_r>
 800e264:	b1c0      	cbz	r0, 800e298 <_vfiprintf_r+0x78>
 800e266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e268:	07dc      	lsls	r4, r3, #31
 800e26a:	d50e      	bpl.n	800e28a <_vfiprintf_r+0x6a>
 800e26c:	f04f 30ff 	mov.w	r0, #4294967295
 800e270:	b01d      	add	sp, #116	; 0x74
 800e272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e276:	4b7b      	ldr	r3, [pc, #492]	; (800e464 <_vfiprintf_r+0x244>)
 800e278:	429d      	cmp	r5, r3
 800e27a:	d101      	bne.n	800e280 <_vfiprintf_r+0x60>
 800e27c:	68b5      	ldr	r5, [r6, #8]
 800e27e:	e7df      	b.n	800e240 <_vfiprintf_r+0x20>
 800e280:	4b79      	ldr	r3, [pc, #484]	; (800e468 <_vfiprintf_r+0x248>)
 800e282:	429d      	cmp	r5, r3
 800e284:	bf08      	it	eq
 800e286:	68f5      	ldreq	r5, [r6, #12]
 800e288:	e7da      	b.n	800e240 <_vfiprintf_r+0x20>
 800e28a:	89ab      	ldrh	r3, [r5, #12]
 800e28c:	0598      	lsls	r0, r3, #22
 800e28e:	d4ed      	bmi.n	800e26c <_vfiprintf_r+0x4c>
 800e290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e292:	f7ff f8d1 	bl	800d438 <__retarget_lock_release_recursive>
 800e296:	e7e9      	b.n	800e26c <_vfiprintf_r+0x4c>
 800e298:	2300      	movs	r3, #0
 800e29a:	9309      	str	r3, [sp, #36]	; 0x24
 800e29c:	2320      	movs	r3, #32
 800e29e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2a6:	2330      	movs	r3, #48	; 0x30
 800e2a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e46c <_vfiprintf_r+0x24c>
 800e2ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2b0:	f04f 0901 	mov.w	r9, #1
 800e2b4:	4623      	mov	r3, r4
 800e2b6:	469a      	mov	sl, r3
 800e2b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2bc:	b10a      	cbz	r2, 800e2c2 <_vfiprintf_r+0xa2>
 800e2be:	2a25      	cmp	r2, #37	; 0x25
 800e2c0:	d1f9      	bne.n	800e2b6 <_vfiprintf_r+0x96>
 800e2c2:	ebba 0b04 	subs.w	fp, sl, r4
 800e2c6:	d00b      	beq.n	800e2e0 <_vfiprintf_r+0xc0>
 800e2c8:	465b      	mov	r3, fp
 800e2ca:	4622      	mov	r2, r4
 800e2cc:	4629      	mov	r1, r5
 800e2ce:	4630      	mov	r0, r6
 800e2d0:	f7ff ff93 	bl	800e1fa <__sfputs_r>
 800e2d4:	3001      	adds	r0, #1
 800e2d6:	f000 80aa 	beq.w	800e42e <_vfiprintf_r+0x20e>
 800e2da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2dc:	445a      	add	r2, fp
 800e2de:	9209      	str	r2, [sp, #36]	; 0x24
 800e2e0:	f89a 3000 	ldrb.w	r3, [sl]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	f000 80a2 	beq.w	800e42e <_vfiprintf_r+0x20e>
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e2f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2f4:	f10a 0a01 	add.w	sl, sl, #1
 800e2f8:	9304      	str	r3, [sp, #16]
 800e2fa:	9307      	str	r3, [sp, #28]
 800e2fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e300:	931a      	str	r3, [sp, #104]	; 0x68
 800e302:	4654      	mov	r4, sl
 800e304:	2205      	movs	r2, #5
 800e306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e30a:	4858      	ldr	r0, [pc, #352]	; (800e46c <_vfiprintf_r+0x24c>)
 800e30c:	f7f1 ff70 	bl	80001f0 <memchr>
 800e310:	9a04      	ldr	r2, [sp, #16]
 800e312:	b9d8      	cbnz	r0, 800e34c <_vfiprintf_r+0x12c>
 800e314:	06d1      	lsls	r1, r2, #27
 800e316:	bf44      	itt	mi
 800e318:	2320      	movmi	r3, #32
 800e31a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e31e:	0713      	lsls	r3, r2, #28
 800e320:	bf44      	itt	mi
 800e322:	232b      	movmi	r3, #43	; 0x2b
 800e324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e328:	f89a 3000 	ldrb.w	r3, [sl]
 800e32c:	2b2a      	cmp	r3, #42	; 0x2a
 800e32e:	d015      	beq.n	800e35c <_vfiprintf_r+0x13c>
 800e330:	9a07      	ldr	r2, [sp, #28]
 800e332:	4654      	mov	r4, sl
 800e334:	2000      	movs	r0, #0
 800e336:	f04f 0c0a 	mov.w	ip, #10
 800e33a:	4621      	mov	r1, r4
 800e33c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e340:	3b30      	subs	r3, #48	; 0x30
 800e342:	2b09      	cmp	r3, #9
 800e344:	d94e      	bls.n	800e3e4 <_vfiprintf_r+0x1c4>
 800e346:	b1b0      	cbz	r0, 800e376 <_vfiprintf_r+0x156>
 800e348:	9207      	str	r2, [sp, #28]
 800e34a:	e014      	b.n	800e376 <_vfiprintf_r+0x156>
 800e34c:	eba0 0308 	sub.w	r3, r0, r8
 800e350:	fa09 f303 	lsl.w	r3, r9, r3
 800e354:	4313      	orrs	r3, r2
 800e356:	9304      	str	r3, [sp, #16]
 800e358:	46a2      	mov	sl, r4
 800e35a:	e7d2      	b.n	800e302 <_vfiprintf_r+0xe2>
 800e35c:	9b03      	ldr	r3, [sp, #12]
 800e35e:	1d19      	adds	r1, r3, #4
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	9103      	str	r1, [sp, #12]
 800e364:	2b00      	cmp	r3, #0
 800e366:	bfbb      	ittet	lt
 800e368:	425b      	neglt	r3, r3
 800e36a:	f042 0202 	orrlt.w	r2, r2, #2
 800e36e:	9307      	strge	r3, [sp, #28]
 800e370:	9307      	strlt	r3, [sp, #28]
 800e372:	bfb8      	it	lt
 800e374:	9204      	strlt	r2, [sp, #16]
 800e376:	7823      	ldrb	r3, [r4, #0]
 800e378:	2b2e      	cmp	r3, #46	; 0x2e
 800e37a:	d10c      	bne.n	800e396 <_vfiprintf_r+0x176>
 800e37c:	7863      	ldrb	r3, [r4, #1]
 800e37e:	2b2a      	cmp	r3, #42	; 0x2a
 800e380:	d135      	bne.n	800e3ee <_vfiprintf_r+0x1ce>
 800e382:	9b03      	ldr	r3, [sp, #12]
 800e384:	1d1a      	adds	r2, r3, #4
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	9203      	str	r2, [sp, #12]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	bfb8      	it	lt
 800e38e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e392:	3402      	adds	r4, #2
 800e394:	9305      	str	r3, [sp, #20]
 800e396:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e47c <_vfiprintf_r+0x25c>
 800e39a:	7821      	ldrb	r1, [r4, #0]
 800e39c:	2203      	movs	r2, #3
 800e39e:	4650      	mov	r0, sl
 800e3a0:	f7f1 ff26 	bl	80001f0 <memchr>
 800e3a4:	b140      	cbz	r0, 800e3b8 <_vfiprintf_r+0x198>
 800e3a6:	2340      	movs	r3, #64	; 0x40
 800e3a8:	eba0 000a 	sub.w	r0, r0, sl
 800e3ac:	fa03 f000 	lsl.w	r0, r3, r0
 800e3b0:	9b04      	ldr	r3, [sp, #16]
 800e3b2:	4303      	orrs	r3, r0
 800e3b4:	3401      	adds	r4, #1
 800e3b6:	9304      	str	r3, [sp, #16]
 800e3b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3bc:	482c      	ldr	r0, [pc, #176]	; (800e470 <_vfiprintf_r+0x250>)
 800e3be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3c2:	2206      	movs	r2, #6
 800e3c4:	f7f1 ff14 	bl	80001f0 <memchr>
 800e3c8:	2800      	cmp	r0, #0
 800e3ca:	d03f      	beq.n	800e44c <_vfiprintf_r+0x22c>
 800e3cc:	4b29      	ldr	r3, [pc, #164]	; (800e474 <_vfiprintf_r+0x254>)
 800e3ce:	bb1b      	cbnz	r3, 800e418 <_vfiprintf_r+0x1f8>
 800e3d0:	9b03      	ldr	r3, [sp, #12]
 800e3d2:	3307      	adds	r3, #7
 800e3d4:	f023 0307 	bic.w	r3, r3, #7
 800e3d8:	3308      	adds	r3, #8
 800e3da:	9303      	str	r3, [sp, #12]
 800e3dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3de:	443b      	add	r3, r7
 800e3e0:	9309      	str	r3, [sp, #36]	; 0x24
 800e3e2:	e767      	b.n	800e2b4 <_vfiprintf_r+0x94>
 800e3e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3e8:	460c      	mov	r4, r1
 800e3ea:	2001      	movs	r0, #1
 800e3ec:	e7a5      	b.n	800e33a <_vfiprintf_r+0x11a>
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	3401      	adds	r4, #1
 800e3f2:	9305      	str	r3, [sp, #20]
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	f04f 0c0a 	mov.w	ip, #10
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e400:	3a30      	subs	r2, #48	; 0x30
 800e402:	2a09      	cmp	r2, #9
 800e404:	d903      	bls.n	800e40e <_vfiprintf_r+0x1ee>
 800e406:	2b00      	cmp	r3, #0
 800e408:	d0c5      	beq.n	800e396 <_vfiprintf_r+0x176>
 800e40a:	9105      	str	r1, [sp, #20]
 800e40c:	e7c3      	b.n	800e396 <_vfiprintf_r+0x176>
 800e40e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e412:	4604      	mov	r4, r0
 800e414:	2301      	movs	r3, #1
 800e416:	e7f0      	b.n	800e3fa <_vfiprintf_r+0x1da>
 800e418:	ab03      	add	r3, sp, #12
 800e41a:	9300      	str	r3, [sp, #0]
 800e41c:	462a      	mov	r2, r5
 800e41e:	4b16      	ldr	r3, [pc, #88]	; (800e478 <_vfiprintf_r+0x258>)
 800e420:	a904      	add	r1, sp, #16
 800e422:	4630      	mov	r0, r6
 800e424:	f7fb ff52 	bl	800a2cc <_printf_float>
 800e428:	4607      	mov	r7, r0
 800e42a:	1c78      	adds	r0, r7, #1
 800e42c:	d1d6      	bne.n	800e3dc <_vfiprintf_r+0x1bc>
 800e42e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e430:	07d9      	lsls	r1, r3, #31
 800e432:	d405      	bmi.n	800e440 <_vfiprintf_r+0x220>
 800e434:	89ab      	ldrh	r3, [r5, #12]
 800e436:	059a      	lsls	r2, r3, #22
 800e438:	d402      	bmi.n	800e440 <_vfiprintf_r+0x220>
 800e43a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e43c:	f7fe fffc 	bl	800d438 <__retarget_lock_release_recursive>
 800e440:	89ab      	ldrh	r3, [r5, #12]
 800e442:	065b      	lsls	r3, r3, #25
 800e444:	f53f af12 	bmi.w	800e26c <_vfiprintf_r+0x4c>
 800e448:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e44a:	e711      	b.n	800e270 <_vfiprintf_r+0x50>
 800e44c:	ab03      	add	r3, sp, #12
 800e44e:	9300      	str	r3, [sp, #0]
 800e450:	462a      	mov	r2, r5
 800e452:	4b09      	ldr	r3, [pc, #36]	; (800e478 <_vfiprintf_r+0x258>)
 800e454:	a904      	add	r1, sp, #16
 800e456:	4630      	mov	r0, r6
 800e458:	f7fc f9dc 	bl	800a814 <_printf_i>
 800e45c:	e7e4      	b.n	800e428 <_vfiprintf_r+0x208>
 800e45e:	bf00      	nop
 800e460:	0800fcdc 	.word	0x0800fcdc
 800e464:	0800fcfc 	.word	0x0800fcfc
 800e468:	0800fcbc 	.word	0x0800fcbc
 800e46c:	0800fef4 	.word	0x0800fef4
 800e470:	0800fefe 	.word	0x0800fefe
 800e474:	0800a2cd 	.word	0x0800a2cd
 800e478:	0800e1fb 	.word	0x0800e1fb
 800e47c:	0800fefa 	.word	0x0800fefa

0800e480 <_read_r>:
 800e480:	b538      	push	{r3, r4, r5, lr}
 800e482:	4d07      	ldr	r5, [pc, #28]	; (800e4a0 <_read_r+0x20>)
 800e484:	4604      	mov	r4, r0
 800e486:	4608      	mov	r0, r1
 800e488:	4611      	mov	r1, r2
 800e48a:	2200      	movs	r2, #0
 800e48c:	602a      	str	r2, [r5, #0]
 800e48e:	461a      	mov	r2, r3
 800e490:	f7f6 fff4 	bl	800547c <_read>
 800e494:	1c43      	adds	r3, r0, #1
 800e496:	d102      	bne.n	800e49e <_read_r+0x1e>
 800e498:	682b      	ldr	r3, [r5, #0]
 800e49a:	b103      	cbz	r3, 800e49e <_read_r+0x1e>
 800e49c:	6023      	str	r3, [r4, #0]
 800e49e:	bd38      	pop	{r3, r4, r5, pc}
 800e4a0:	20002ef0 	.word	0x20002ef0
 800e4a4:	00000000 	.word	0x00000000

0800e4a8 <nan>:
 800e4a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e4b0 <nan+0x8>
 800e4ac:	4770      	bx	lr
 800e4ae:	bf00      	nop
 800e4b0:	00000000 	.word	0x00000000
 800e4b4:	7ff80000 	.word	0x7ff80000

0800e4b8 <nanf>:
 800e4b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e4c0 <nanf+0x8>
 800e4bc:	4770      	bx	lr
 800e4be:	bf00      	nop
 800e4c0:	7fc00000 	.word	0x7fc00000

0800e4c4 <__ascii_wctomb>:
 800e4c4:	b149      	cbz	r1, 800e4da <__ascii_wctomb+0x16>
 800e4c6:	2aff      	cmp	r2, #255	; 0xff
 800e4c8:	bf85      	ittet	hi
 800e4ca:	238a      	movhi	r3, #138	; 0x8a
 800e4cc:	6003      	strhi	r3, [r0, #0]
 800e4ce:	700a      	strbls	r2, [r1, #0]
 800e4d0:	f04f 30ff 	movhi.w	r0, #4294967295
 800e4d4:	bf98      	it	ls
 800e4d6:	2001      	movls	r0, #1
 800e4d8:	4770      	bx	lr
 800e4da:	4608      	mov	r0, r1
 800e4dc:	4770      	bx	lr

0800e4de <abort>:
 800e4de:	b508      	push	{r3, lr}
 800e4e0:	2006      	movs	r0, #6
 800e4e2:	f000 f897 	bl	800e614 <raise>
 800e4e6:	2001      	movs	r0, #1
 800e4e8:	f7f6 ffbe 	bl	8005468 <_exit>

0800e4ec <_fstat_r>:
 800e4ec:	b538      	push	{r3, r4, r5, lr}
 800e4ee:	4d07      	ldr	r5, [pc, #28]	; (800e50c <_fstat_r+0x20>)
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	4604      	mov	r4, r0
 800e4f4:	4608      	mov	r0, r1
 800e4f6:	4611      	mov	r1, r2
 800e4f8:	602b      	str	r3, [r5, #0]
 800e4fa:	f7f7 f804 	bl	8005506 <_fstat>
 800e4fe:	1c43      	adds	r3, r0, #1
 800e500:	d102      	bne.n	800e508 <_fstat_r+0x1c>
 800e502:	682b      	ldr	r3, [r5, #0]
 800e504:	b103      	cbz	r3, 800e508 <_fstat_r+0x1c>
 800e506:	6023      	str	r3, [r4, #0]
 800e508:	bd38      	pop	{r3, r4, r5, pc}
 800e50a:	bf00      	nop
 800e50c:	20002ef0 	.word	0x20002ef0

0800e510 <_isatty_r>:
 800e510:	b538      	push	{r3, r4, r5, lr}
 800e512:	4d06      	ldr	r5, [pc, #24]	; (800e52c <_isatty_r+0x1c>)
 800e514:	2300      	movs	r3, #0
 800e516:	4604      	mov	r4, r0
 800e518:	4608      	mov	r0, r1
 800e51a:	602b      	str	r3, [r5, #0]
 800e51c:	f7f7 f803 	bl	8005526 <_isatty>
 800e520:	1c43      	adds	r3, r0, #1
 800e522:	d102      	bne.n	800e52a <_isatty_r+0x1a>
 800e524:	682b      	ldr	r3, [r5, #0]
 800e526:	b103      	cbz	r3, 800e52a <_isatty_r+0x1a>
 800e528:	6023      	str	r3, [r4, #0]
 800e52a:	bd38      	pop	{r3, r4, r5, pc}
 800e52c:	20002ef0 	.word	0x20002ef0

0800e530 <memmove>:
 800e530:	4288      	cmp	r0, r1
 800e532:	b510      	push	{r4, lr}
 800e534:	eb01 0402 	add.w	r4, r1, r2
 800e538:	d902      	bls.n	800e540 <memmove+0x10>
 800e53a:	4284      	cmp	r4, r0
 800e53c:	4623      	mov	r3, r4
 800e53e:	d807      	bhi.n	800e550 <memmove+0x20>
 800e540:	1e43      	subs	r3, r0, #1
 800e542:	42a1      	cmp	r1, r4
 800e544:	d008      	beq.n	800e558 <memmove+0x28>
 800e546:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e54a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e54e:	e7f8      	b.n	800e542 <memmove+0x12>
 800e550:	4402      	add	r2, r0
 800e552:	4601      	mov	r1, r0
 800e554:	428a      	cmp	r2, r1
 800e556:	d100      	bne.n	800e55a <memmove+0x2a>
 800e558:	bd10      	pop	{r4, pc}
 800e55a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e55e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e562:	e7f7      	b.n	800e554 <memmove+0x24>

0800e564 <_realloc_r>:
 800e564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e568:	4680      	mov	r8, r0
 800e56a:	4614      	mov	r4, r2
 800e56c:	460e      	mov	r6, r1
 800e56e:	b921      	cbnz	r1, 800e57a <_realloc_r+0x16>
 800e570:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e574:	4611      	mov	r1, r2
 800e576:	f7fb bd95 	b.w	800a0a4 <_malloc_r>
 800e57a:	b92a      	cbnz	r2, 800e588 <_realloc_r+0x24>
 800e57c:	f7fb fd26 	bl	8009fcc <_free_r>
 800e580:	4625      	mov	r5, r4
 800e582:	4628      	mov	r0, r5
 800e584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e588:	f000 f860 	bl	800e64c <_malloc_usable_size_r>
 800e58c:	4284      	cmp	r4, r0
 800e58e:	4607      	mov	r7, r0
 800e590:	d802      	bhi.n	800e598 <_realloc_r+0x34>
 800e592:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e596:	d812      	bhi.n	800e5be <_realloc_r+0x5a>
 800e598:	4621      	mov	r1, r4
 800e59a:	4640      	mov	r0, r8
 800e59c:	f7fb fd82 	bl	800a0a4 <_malloc_r>
 800e5a0:	4605      	mov	r5, r0
 800e5a2:	2800      	cmp	r0, #0
 800e5a4:	d0ed      	beq.n	800e582 <_realloc_r+0x1e>
 800e5a6:	42bc      	cmp	r4, r7
 800e5a8:	4622      	mov	r2, r4
 800e5aa:	4631      	mov	r1, r6
 800e5ac:	bf28      	it	cs
 800e5ae:	463a      	movcs	r2, r7
 800e5b0:	f7fb fcf6 	bl	8009fa0 <memcpy>
 800e5b4:	4631      	mov	r1, r6
 800e5b6:	4640      	mov	r0, r8
 800e5b8:	f7fb fd08 	bl	8009fcc <_free_r>
 800e5bc:	e7e1      	b.n	800e582 <_realloc_r+0x1e>
 800e5be:	4635      	mov	r5, r6
 800e5c0:	e7df      	b.n	800e582 <_realloc_r+0x1e>

0800e5c2 <_raise_r>:
 800e5c2:	291f      	cmp	r1, #31
 800e5c4:	b538      	push	{r3, r4, r5, lr}
 800e5c6:	4604      	mov	r4, r0
 800e5c8:	460d      	mov	r5, r1
 800e5ca:	d904      	bls.n	800e5d6 <_raise_r+0x14>
 800e5cc:	2316      	movs	r3, #22
 800e5ce:	6003      	str	r3, [r0, #0]
 800e5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5d4:	bd38      	pop	{r3, r4, r5, pc}
 800e5d6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e5d8:	b112      	cbz	r2, 800e5e0 <_raise_r+0x1e>
 800e5da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e5de:	b94b      	cbnz	r3, 800e5f4 <_raise_r+0x32>
 800e5e0:	4620      	mov	r0, r4
 800e5e2:	f000 f831 	bl	800e648 <_getpid_r>
 800e5e6:	462a      	mov	r2, r5
 800e5e8:	4601      	mov	r1, r0
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5f0:	f000 b818 	b.w	800e624 <_kill_r>
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	d00a      	beq.n	800e60e <_raise_r+0x4c>
 800e5f8:	1c59      	adds	r1, r3, #1
 800e5fa:	d103      	bne.n	800e604 <_raise_r+0x42>
 800e5fc:	2316      	movs	r3, #22
 800e5fe:	6003      	str	r3, [r0, #0]
 800e600:	2001      	movs	r0, #1
 800e602:	e7e7      	b.n	800e5d4 <_raise_r+0x12>
 800e604:	2400      	movs	r4, #0
 800e606:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e60a:	4628      	mov	r0, r5
 800e60c:	4798      	blx	r3
 800e60e:	2000      	movs	r0, #0
 800e610:	e7e0      	b.n	800e5d4 <_raise_r+0x12>
	...

0800e614 <raise>:
 800e614:	4b02      	ldr	r3, [pc, #8]	; (800e620 <raise+0xc>)
 800e616:	4601      	mov	r1, r0
 800e618:	6818      	ldr	r0, [r3, #0]
 800e61a:	f7ff bfd2 	b.w	800e5c2 <_raise_r>
 800e61e:	bf00      	nop
 800e620:	200000c4 	.word	0x200000c4

0800e624 <_kill_r>:
 800e624:	b538      	push	{r3, r4, r5, lr}
 800e626:	4d07      	ldr	r5, [pc, #28]	; (800e644 <_kill_r+0x20>)
 800e628:	2300      	movs	r3, #0
 800e62a:	4604      	mov	r4, r0
 800e62c:	4608      	mov	r0, r1
 800e62e:	4611      	mov	r1, r2
 800e630:	602b      	str	r3, [r5, #0]
 800e632:	f7f6 ff09 	bl	8005448 <_kill>
 800e636:	1c43      	adds	r3, r0, #1
 800e638:	d102      	bne.n	800e640 <_kill_r+0x1c>
 800e63a:	682b      	ldr	r3, [r5, #0]
 800e63c:	b103      	cbz	r3, 800e640 <_kill_r+0x1c>
 800e63e:	6023      	str	r3, [r4, #0]
 800e640:	bd38      	pop	{r3, r4, r5, pc}
 800e642:	bf00      	nop
 800e644:	20002ef0 	.word	0x20002ef0

0800e648 <_getpid_r>:
 800e648:	f7f6 bef6 	b.w	8005438 <_getpid>

0800e64c <_malloc_usable_size_r>:
 800e64c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e650:	1f18      	subs	r0, r3, #4
 800e652:	2b00      	cmp	r3, #0
 800e654:	bfbc      	itt	lt
 800e656:	580b      	ldrlt	r3, [r1, r0]
 800e658:	18c0      	addlt	r0, r0, r3
 800e65a:	4770      	bx	lr

0800e65c <_init>:
 800e65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e65e:	bf00      	nop
 800e660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e662:	bc08      	pop	{r3}
 800e664:	469e      	mov	lr, r3
 800e666:	4770      	bx	lr

0800e668 <_fini>:
 800e668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e66a:	bf00      	nop
 800e66c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e66e:	bc08      	pop	{r3}
 800e670:	469e      	mov	lr, r3
 800e672:	4770      	bx	lr
