
Atlas_HV_BaseBoard_A_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d71c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b88  0800d8c0  0800d8c0  0001d8c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e448  0800e448  00020288  2**0
                  CONTENTS
  4 .ARM          00000008  0800e448  0800e448  0001e448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e450  0800e450  00020288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e450  0800e450  0001e450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e454  0800e454  0001e454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  0800e458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d34  20000288  0800e6e0  00020288  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fbc  0800e6e0  00020fbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020288  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d249  00000000  00000000  000202b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000506e  00000000  00000000  0003d501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a00  00000000  00000000  00042570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001808  00000000  00000000  00043f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f55c  00000000  00000000  00045778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027dab  00000000  00000000  00064cd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5c38  00000000  00000000  0008ca7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001326b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008004  00000000  00000000  00132708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000288 	.word	0x20000288
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d8a4 	.word	0x0800d8a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000028c 	.word	0x2000028c
 80001dc:	0800d8a4 	.word	0x0800d8a4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <application_main>:




void application_main()
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0

	  //BACKUP_SRAM_enable();
		ParamsDefaultValues();
 800100e:	f002 f939 	bl	8003284 <ParamsDefaultValues>
		ParamsLoad();
 8001012:	f002 f9db 	bl	80033cc <ParamsLoad>



	  //hand address for ADC data store
	  p_ADC_data[0] = &ChannelsStatus[0].voltage_measurement;
 8001016:	4b4c      	ldr	r3, [pc, #304]	; (8001148 <application_main+0x140>)
 8001018:	4a4c      	ldr	r2, [pc, #304]	; (800114c <application_main+0x144>)
 800101a:	601a      	str	r2, [r3, #0]
	  p_ADC_data[1] = &ChannelsStatus[1].voltage_measurement;
 800101c:	4b4a      	ldr	r3, [pc, #296]	; (8001148 <application_main+0x140>)
 800101e:	4a4c      	ldr	r2, [pc, #304]	; (8001150 <application_main+0x148>)
 8001020:	605a      	str	r2, [r3, #4]
	  p_ADC_data[2] = &ChannelsStatus[2].voltage_measurement;
 8001022:	4b49      	ldr	r3, [pc, #292]	; (8001148 <application_main+0x140>)
 8001024:	4a4b      	ldr	r2, [pc, #300]	; (8001154 <application_main+0x14c>)
 8001026:	609a      	str	r2, [r3, #8]
	  p_ADC_data[3] = &ChannelsStatus[0].current_measurement;
 8001028:	4b47      	ldr	r3, [pc, #284]	; (8001148 <application_main+0x140>)
 800102a:	4a4b      	ldr	r2, [pc, #300]	; (8001158 <application_main+0x150>)
 800102c:	60da      	str	r2, [r3, #12]
	  p_ADC_data[4] = &ChannelsStatus[1].current_measurement;
 800102e:	4b46      	ldr	r3, [pc, #280]	; (8001148 <application_main+0x140>)
 8001030:	4a4a      	ldr	r2, [pc, #296]	; (800115c <application_main+0x154>)
 8001032:	611a      	str	r2, [r3, #16]
	  p_ADC_data[5] = &ChannelsStatus[2].current_measurement;
 8001034:	4b44      	ldr	r3, [pc, #272]	; (8001148 <application_main+0x140>)
 8001036:	4a4a      	ldr	r2, [pc, #296]	; (8001160 <application_main+0x158>)
 8001038:	615a      	str	r2, [r3, #20]

	  //hand address for error signals store
	  p_ERROR_data[0] = &ChannelsStatus[0].power_good;
 800103a:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <application_main+0x15c>)
 800103c:	4a4a      	ldr	r2, [pc, #296]	; (8001168 <application_main+0x160>)
 800103e:	601a      	str	r2, [r3, #0]
	  p_ERROR_data[1] = &ChannelsStatus[1].power_good;
 8001040:	4b48      	ldr	r3, [pc, #288]	; (8001164 <application_main+0x15c>)
 8001042:	4a4a      	ldr	r2, [pc, #296]	; (800116c <application_main+0x164>)
 8001044:	605a      	str	r2, [r3, #4]
	  p_ERROR_data[2] = &ChannelsStatus[2].power_good;
 8001046:	4b47      	ldr	r3, [pc, #284]	; (8001164 <application_main+0x15c>)
 8001048:	4a49      	ldr	r2, [pc, #292]	; (8001170 <application_main+0x168>)
 800104a:	609a      	str	r2, [r3, #8]
	  p_ERROR_data[3] = &ChannelsStatus[0].over_current;
 800104c:	4b45      	ldr	r3, [pc, #276]	; (8001164 <application_main+0x15c>)
 800104e:	4a49      	ldr	r2, [pc, #292]	; (8001174 <application_main+0x16c>)
 8001050:	60da      	str	r2, [r3, #12]
	  p_ERROR_data[4] = &ChannelsStatus[1].over_current;
 8001052:	4b44      	ldr	r3, [pc, #272]	; (8001164 <application_main+0x15c>)
 8001054:	4a48      	ldr	r2, [pc, #288]	; (8001178 <application_main+0x170>)
 8001056:	611a      	str	r2, [r3, #16]
	  p_ERROR_data[5] = &ChannelsStatus[2].over_current;
 8001058:	4b42      	ldr	r3, [pc, #264]	; (8001164 <application_main+0x15c>)
 800105a:	4a48      	ldr	r2, [pc, #288]	; (800117c <application_main+0x174>)
 800105c:	615a      	str	r2, [r3, #20]

	  HAL_GPIO_WritePin(W55_RST_GPIO_Port, W55_RST_Pin, GPIO_PIN_SET);
 800105e:	2201      	movs	r2, #1
 8001060:	2108      	movs	r1, #8
 8001062:	4847      	ldr	r0, [pc, #284]	; (8001180 <application_main+0x178>)
 8001064:	f004 fd40 	bl	8005ae8 <HAL_GPIO_WritePin>
	  ETH_udp_Init();
 8001068:	f002 fc0a 	bl	8003880 <ETH_udp_Init>


	  __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);//enable uart3 interupt
 800106c:	4b45      	ldr	r3, [pc, #276]	; (8001184 <application_main+0x17c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	4b44      	ldr	r3, [pc, #272]	; (8001184 <application_main+0x17c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0220 	orr.w	r2, r2, #32
 800107a:	60da      	str	r2, [r3, #12]

	  DAC_Init();
 800107c:	f002 fa80 	bl	8003580 <DAC_Init>
	  HAL_TIM_Base_Start_IT(&htim10); //start timer for ADC reading
 8001080:	4841      	ldr	r0, [pc, #260]	; (8001188 <application_main+0x180>)
 8001082:	f006 f8f9 	bl	8007278 <HAL_TIM_Base_Start_IT>

	  _EnableErrorExecute = false;
 8001086:	4b41      	ldr	r3, [pc, #260]	; (800118c <application_main+0x184>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]
	  _DisableSupplyInLostConnection = true;
 800108c:	4b40      	ldr	r3, [pc, #256]	; (8001190 <application_main+0x188>)
 800108e:	2201      	movs	r2, #1
 8001090:	701a      	strb	r2, [r3, #0]

	  _ControlOutputWithChannelEnable = true;
 8001092:	4b40      	ldr	r3, [pc, #256]	; (8001194 <application_main+0x18c>)
 8001094:	2201      	movs	r2, #1
 8001096:	701a      	strb	r2, [r3, #0]


	  uint32_t u32LedTimer;


	  Set_Voltage(0, minimum_voltage);
 8001098:	2119      	movs	r1, #25
 800109a:	2000      	movs	r0, #0
 800109c:	f001 fbce 	bl	800283c <Set_Voltage>
	  Set_Voltage(1, minimum_voltage);
 80010a0:	2119      	movs	r1, #25
 80010a2:	2001      	movs	r0, #1
 80010a4:	f001 fbca 	bl	800283c <Set_Voltage>
	  Set_Voltage(2, minimum_voltage);
 80010a8:	2119      	movs	r1, #25
 80010aa:	2002      	movs	r0, #2
 80010ac:	f001 fbc6 	bl	800283c <Set_Voltage>

	  while(1)
	  {

		  ETH_udp_Receive();
 80010b0:	f002 fc56 	bl	8003960 <ETH_udp_Receive>

		  if((HAL_GetTick() - u32LedTimer) > 500)
 80010b4:	f003 fcf8 	bl	8004aa8 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010c2:	d907      	bls.n	80010d4 <application_main+0xcc>
		  {
			  u32LedTimer = HAL_GetTick();
 80010c4:	f003 fcf0 	bl	8004aa8 <HAL_GetTick>
 80010c8:	6078      	str	r0, [r7, #4]
			  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80010ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ce:	4832      	ldr	r0, [pc, #200]	; (8001198 <application_main+0x190>)
 80010d0:	f004 fd23 	bl	8005b1a <HAL_GPIO_TogglePin>
		  }

		  if(_Found_Error && _EnableErrorExecute)
 80010d4:	4b31      	ldr	r3, [pc, #196]	; (800119c <application_main+0x194>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d00c      	beq.n	80010f6 <application_main+0xee>
 80010dc:	4b2b      	ldr	r3, [pc, #172]	; (800118c <application_main+0x184>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d008      	beq.n	80010f6 <application_main+0xee>
		  {
			  ErrorExecute(0);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f000 fe85 	bl	8001df4 <ErrorExecute>
			  ErrorExecute(1);
 80010ea:	2001      	movs	r0, #1
 80010ec:	f000 fe82 	bl	8001df4 <ErrorExecute>
			  ErrorExecute(2);
 80010f0:	2002      	movs	r0, #2
 80010f2:	f000 fe7f 	bl	8001df4 <ErrorExecute>
		  }

		  ChannelControl(0);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f001 fee8 	bl	8002ecc <ChannelControl>
		  ChannelControl(1);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f001 fee5 	bl	8002ecc <ChannelControl>
		  ChannelControl(2);
 8001102:	2002      	movs	r0, #2
 8001104:	f001 fee2 	bl	8002ecc <ChannelControl>



		  bool NewCommand_uart = ProcessCommunication_UART(); //load command from uart buffer
 8001108:	f000 fc6a 	bl	80019e0 <ProcessCommunication_UART>
 800110c:	4603      	mov	r3, r0
 800110e:	70fb      	strb	r3, [r7, #3]

		  //process command from uart
		  if(NewCommand_uart)
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d004      	beq.n	8001120 <application_main+0x118>
		  {
			  //HAL_GPIO_WritePin(LED_green_GPIO_Port, LED_green_Pin, GPIO_PIN_SET);
			  ProcessCommand(_command_id);
 8001116:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <application_main+0x198>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f858 	bl	80011d0 <ProcessCommand>
			  //HAL_GPIO_WritePin(LED_green_GPIO_Port, LED_green_Pin, GPIO_PIN_RESET);

		  }


		  bool NewCommand_eth = ProcessCommunication_ETH(); //load command from ethernet buffer
 8001120:	f000 fccc 	bl	8001abc <ProcessCommunication_ETH>
 8001124:	4603      	mov	r3, r0
 8001126:	70bb      	strb	r3, [r7, #2]

		  //process command from ethernet
		  if(NewCommand_eth)
 8001128:	78bb      	ldrb	r3, [r7, #2]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d004      	beq.n	8001138 <application_main+0x130>
		  {
			  //HAL_GPIO_WritePin(LED_blue_GPIO_Port, LED_blue_Pin, GPIO_PIN_SET);
			  ProcessCommand(_command_id);
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <application_main+0x198>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f84c 	bl	80011d0 <ProcessCommand>
			  //HAL_GPIO_WritePin(LED_blue_GPIO_Port, LED_blue_Pin, GPIO_PIN_RESET);
		  }

		  Communication_ConnectedTimer();
 8001138:	f000 fe48 	bl	8001dcc <Communication_ConnectedTimer>
		  AppConnectedExecute(_AppConnected);
 800113c:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <application_main+0x19c>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f000 ff67 	bl	8002014 <AppConnectedExecute>
	  {
 8001146:	e7b3      	b.n	80010b0 <application_main+0xa8>
 8001148:	20000760 	.word	0x20000760
 800114c:	20000788 	.word	0x20000788
 8001150:	2000079c 	.word	0x2000079c
 8001154:	200007b0 	.word	0x200007b0
 8001158:	2000078c 	.word	0x2000078c
 800115c:	200007a0 	.word	0x200007a0
 8001160:	200007b4 	.word	0x200007b4
 8001164:	200002d8 	.word	0x200002d8
 8001168:	20000791 	.word	0x20000791
 800116c:	200007a5 	.word	0x200007a5
 8001170:	200007b9 	.word	0x200007b9
 8001174:	20000790 	.word	0x20000790
 8001178:	200007a4 	.word	0x200007a4
 800117c:	200007b8 	.word	0x200007b8
 8001180:	40020400 	.word	0x40020400
 8001184:	20000f20 	.word	0x20000f20
 8001188:	20000ed8 	.word	0x20000ed8
 800118c:	200002f1 	.word	0x200002f1
 8001190:	200002f2 	.word	0x200002f2
 8001194:	200007f8 	.word	0x200007f8
 8001198:	40020000 	.word	0x40020000
 800119c:	200002f0 	.word	0x200002f0
 80011a0:	200002ac 	.word	0x200002ac
 80011a4:	200002a8 	.word	0x200002a8

080011a8 <HAL_TIM_PeriodElapsedCallback>:
/* @brief callback of timer period elapsed -> for ADC measure and read error signals
 *
 *
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	if(htim == &htim10)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a06      	ldr	r2, [pc, #24]	; (80011cc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d105      	bne.n	80011c4 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		ReadADCChannels();
 80011b8:	f001 f8b6 	bl	8002328 <ReadADCChannels>
		ADCStore();
 80011bc:	f001 f8d6 	bl	800236c <ADCStore>
		ErrorSignalsRead();
 80011c0:	f000 fe92 	bl	8001ee8 <ErrorSignalsRead>
	}
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000ed8 	.word	0x20000ed8

080011d0 <ProcessCommand>:
 * @param command_id -> number of data command
 * @param value -> value for control
 *
 */
void ProcessCommand(int command_id)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	switch(command_id)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b53      	cmp	r3, #83	; 0x53
 80011dc:	f200 8264 	bhi.w	80016a8 <ProcessCommand+0x4d8>
 80011e0:	a201      	add	r2, pc, #4	; (adr r2, 80011e8 <ProcessCommand+0x18>)
 80011e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e6:	bf00      	nop
 80011e8:	080016a9 	.word	0x080016a9
 80011ec:	08001339 	.word	0x08001339
 80011f0:	08001357 	.word	0x08001357
 80011f4:	0800136f 	.word	0x0800136f
 80011f8:	08001387 	.word	0x08001387
 80011fc:	0800139f 	.word	0x0800139f
 8001200:	080013b7 	.word	0x080013b7
 8001204:	080013cf 	.word	0x080013cf
 8001208:	080013e7 	.word	0x080013e7
 800120c:	080013f7 	.word	0x080013f7
 8001210:	08001407 	.word	0x08001407
 8001214:	08001417 	.word	0x08001417
 8001218:	0800143d 	.word	0x0800143d
 800121c:	08001463 	.word	0x08001463
 8001220:	080016a9 	.word	0x080016a9
 8001224:	080016a9 	.word	0x080016a9
 8001228:	080016a9 	.word	0x080016a9
 800122c:	080016a9 	.word	0x080016a9
 8001230:	080016a9 	.word	0x080016a9
 8001234:	080016a9 	.word	0x080016a9
 8001238:	080014a1 	.word	0x080014a1
 800123c:	0800149b 	.word	0x0800149b
 8001240:	08001489 	.word	0x08001489
 8001244:	080016a9 	.word	0x080016a9
 8001248:	0800148f 	.word	0x0800148f
 800124c:	080014a7 	.word	0x080014a7
 8001250:	080014ad 	.word	0x080014ad
 8001254:	080014b9 	.word	0x080014b9
 8001258:	080014c5 	.word	0x080014c5
 800125c:	080016a9 	.word	0x080016a9
 8001260:	080016a9 	.word	0x080016a9
 8001264:	080016a9 	.word	0x080016a9
 8001268:	080014d1 	.word	0x080014d1
 800126c:	080014d7 	.word	0x080014d7
 8001270:	080014e9 	.word	0x080014e9
 8001274:	080014fb 	.word	0x080014fb
 8001278:	0800150d 	.word	0x0800150d
 800127c:	0800151f 	.word	0x0800151f
 8001280:	08001531 	.word	0x08001531
 8001284:	08001543 	.word	0x08001543
 8001288:	08001555 	.word	0x08001555
 800128c:	08001567 	.word	0x08001567
 8001290:	08001579 	.word	0x08001579
 8001294:	0800158b 	.word	0x0800158b
 8001298:	0800159d 	.word	0x0800159d
 800129c:	080016a9 	.word	0x080016a9
 80012a0:	080016a9 	.word	0x080016a9
 80012a4:	080016a9 	.word	0x080016a9
 80012a8:	080016a9 	.word	0x080016a9
 80012ac:	080016a9 	.word	0x080016a9
 80012b0:	080016a9 	.word	0x080016a9
 80012b4:	080016a9 	.word	0x080016a9
 80012b8:	080016a9 	.word	0x080016a9
 80012bc:	080016a9 	.word	0x080016a9
 80012c0:	080016a9 	.word	0x080016a9
 80012c4:	080016a9 	.word	0x080016a9
 80012c8:	080016a9 	.word	0x080016a9
 80012cc:	080015af 	.word	0x080015af
 80012d0:	080015c1 	.word	0x080015c1
 80012d4:	080015d3 	.word	0x080015d3
 80012d8:	080015e5 	.word	0x080015e5
 80012dc:	080015f7 	.word	0x080015f7
 80012e0:	08001619 	.word	0x08001619
 80012e4:	080016a9 	.word	0x080016a9
 80012e8:	080016a9 	.word	0x080016a9
 80012ec:	080016a9 	.word	0x080016a9
 80012f0:	080016a9 	.word	0x080016a9
 80012f4:	080016a9 	.word	0x080016a9
 80012f8:	080016a9 	.word	0x080016a9
 80012fc:	0800162b 	.word	0x0800162b
 8001300:	08001631 	.word	0x08001631
 8001304:	08001637 	.word	0x08001637
 8001308:	08001647 	.word	0x08001647
 800130c:	08001657 	.word	0x08001657
 8001310:	08001667 	.word	0x08001667
 8001314:	08001677 	.word	0x08001677
 8001318:	08001687 	.word	0x08001687
 800131c:	080016a9 	.word	0x080016a9
 8001320:	080016a9 	.word	0x080016a9
 8001324:	080016a9 	.word	0x080016a9
 8001328:	080016a9 	.word	0x080016a9
 800132c:	0800169d 	.word	0x0800169d
 8001330:	080016a3 	.word	0x080016a3
 8001334:	08001697 	.word	0x08001697
		case cmd_NON:

			break;
		case cmd_Connected:

			if(_command_source == csource_ETH) ETH_udp_StoreEndpoint();
 8001338:	4bb3      	ldr	r3, [pc, #716]	; (8001608 <ProcessCommand+0x438>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d101      	bne.n	8001344 <ProcessCommand+0x174>
 8001340:	f002 fadc 	bl	80038fc <ETH_udp_StoreEndpoint>
			Comunication_ResetConnectedTimer();
 8001344:	f000 fd32 	bl	8001dac <Comunication_ResetConnectedTimer>
			SendCommunication(cmd_Connected,_command_value);
 8001348:	4bb0      	ldr	r3, [pc, #704]	; (800160c <ProcessCommand+0x43c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4619      	mov	r1, r3
 800134e:	2001      	movs	r0, #1
 8001350:	f000 fc1c 	bl	8001b8c <SendCommunication>
			break;
 8001354:	e1af      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_enable_CH1:
			Channel_Enable(0, _command_value);
 8001356:	4bad      	ldr	r3, [pc, #692]	; (800160c <ProcessCommand+0x43c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	bf14      	ite	ne
 800135e:	2301      	movne	r3, #1
 8001360:	2300      	moveq	r3, #0
 8001362:	b2db      	uxtb	r3, r3
 8001364:	4619      	mov	r1, r3
 8001366:	2000      	movs	r0, #0
 8001368:	f001 fc50 	bl	8002c0c <Channel_Enable>
			break;
 800136c:	e1a3      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_enable_CH2:
			Channel_Enable(1, _command_value);
 800136e:	4ba7      	ldr	r3, [pc, #668]	; (800160c <ProcessCommand+0x43c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	bf14      	ite	ne
 8001376:	2301      	movne	r3, #1
 8001378:	2300      	moveq	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	4619      	mov	r1, r3
 800137e:	2001      	movs	r0, #1
 8001380:	f001 fc44 	bl	8002c0c <Channel_Enable>
			break;
 8001384:	e197      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_enable_CH3:
			Channel_Enable(2, _command_value);
 8001386:	4ba1      	ldr	r3, [pc, #644]	; (800160c <ProcessCommand+0x43c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	bf14      	ite	ne
 800138e:	2301      	movne	r3, #1
 8001390:	2300      	moveq	r3, #0
 8001392:	b2db      	uxtb	r3, r3
 8001394:	4619      	mov	r1, r3
 8001396:	2002      	movs	r0, #2
 8001398:	f001 fc38 	bl	8002c0c <Channel_Enable>
			break;
 800139c:	e18b      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_output_CH1:
			Channel_Output(0, _command_value);
 800139e:	4b9b      	ldr	r3, [pc, #620]	; (800160c <ProcessCommand+0x43c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	bf14      	ite	ne
 80013a6:	2301      	movne	r3, #1
 80013a8:	2300      	moveq	r3, #0
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	4619      	mov	r1, r3
 80013ae:	2000      	movs	r0, #0
 80013b0:	f001 fd2c 	bl	8002e0c <Channel_Output>
			break;
 80013b4:	e17f      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_output_CH2:
			Channel_Output(1, _command_value);
 80013b6:	4b95      	ldr	r3, [pc, #596]	; (800160c <ProcessCommand+0x43c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	bf14      	ite	ne
 80013be:	2301      	movne	r3, #1
 80013c0:	2300      	moveq	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4619      	mov	r1, r3
 80013c6:	2001      	movs	r0, #1
 80013c8:	f001 fd20 	bl	8002e0c <Channel_Output>
			break;
 80013cc:	e173      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_output_CH3:
			Channel_Output(2, _command_value);
 80013ce:	4b8f      	ldr	r3, [pc, #572]	; (800160c <ProcessCommand+0x43c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	bf14      	ite	ne
 80013d6:	2301      	movne	r3, #1
 80013d8:	2300      	moveq	r3, #0
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	4619      	mov	r1, r3
 80013de:	2002      	movs	r0, #2
 80013e0:	f001 fd14 	bl	8002e0c <Channel_Output>
			break;
 80013e4:	e167      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_set_voltage_CH1:
			Set_Voltage(0, _command_value);
 80013e6:	4b89      	ldr	r3, [pc, #548]	; (800160c <ProcessCommand+0x43c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	4619      	mov	r1, r3
 80013ee:	2000      	movs	r0, #0
 80013f0:	f001 fa24 	bl	800283c <Set_Voltage>
			break;
 80013f4:	e15f      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_set_voltage_CH2:
			Set_Voltage(1, _command_value);
 80013f6:	4b85      	ldr	r3, [pc, #532]	; (800160c <ProcessCommand+0x43c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	4619      	mov	r1, r3
 80013fe:	2001      	movs	r0, #1
 8001400:	f001 fa1c 	bl	800283c <Set_Voltage>
			break;
 8001404:	e157      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_set_voltage_CH3:
			Set_Voltage(2, _command_value);
 8001406:	4b81      	ldr	r3, [pc, #516]	; (800160c <ProcessCommand+0x43c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	b29b      	uxth	r3, r3
 800140c:	4619      	mov	r1, r3
 800140e:	2002      	movs	r0, #2
 8001410:	f001 fa14 	bl	800283c <Set_Voltage>
			break;
 8001414:	e14f      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_polarity_CH1:
			if(_command_value == 1)Channel_Polarity(0, polarity_positive);
 8001416:	4b7d      	ldr	r3, [pc, #500]	; (800160c <ProcessCommand+0x43c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d104      	bne.n	8001428 <ProcessCommand+0x258>
 800141e:	2100      	movs	r1, #0
 8001420:	2000      	movs	r0, #0
 8001422:	f001 fc85 	bl	8002d30 <Channel_Polarity>
			else if (_command_value == 2)Channel_Polarity(0, polarity_negative);
			break;
 8001426:	e141      	b.n	80016ac <ProcessCommand+0x4dc>
			else if (_command_value == 2)Channel_Polarity(0, polarity_negative);
 8001428:	4b78      	ldr	r3, [pc, #480]	; (800160c <ProcessCommand+0x43c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b02      	cmp	r3, #2
 800142e:	f040 813d 	bne.w	80016ac <ProcessCommand+0x4dc>
 8001432:	2101      	movs	r1, #1
 8001434:	2000      	movs	r0, #0
 8001436:	f001 fc7b 	bl	8002d30 <Channel_Polarity>
			break;
 800143a:	e137      	b.n	80016ac <ProcessCommand+0x4dc>

		case cmd_polarity_CH2:
			if(_command_value == 1)Channel_Polarity(1, polarity_positive);
 800143c:	4b73      	ldr	r3, [pc, #460]	; (800160c <ProcessCommand+0x43c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d104      	bne.n	800144e <ProcessCommand+0x27e>
 8001444:	2100      	movs	r1, #0
 8001446:	2001      	movs	r0, #1
 8001448:	f001 fc72 	bl	8002d30 <Channel_Polarity>
			else if (_command_value == 2)Channel_Polarity(1, polarity_negative);
			break;
 800144c:	e130      	b.n	80016b0 <ProcessCommand+0x4e0>
			else if (_command_value == 2)Channel_Polarity(1, polarity_negative);
 800144e:	4b6f      	ldr	r3, [pc, #444]	; (800160c <ProcessCommand+0x43c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b02      	cmp	r3, #2
 8001454:	f040 812c 	bne.w	80016b0 <ProcessCommand+0x4e0>
 8001458:	2101      	movs	r1, #1
 800145a:	2001      	movs	r0, #1
 800145c:	f001 fc68 	bl	8002d30 <Channel_Polarity>
			break;
 8001460:	e126      	b.n	80016b0 <ProcessCommand+0x4e0>

		case cmd_polarity_CH3:
			if(_command_value == 1)Channel_Polarity(2, polarity_positive);
 8001462:	4b6a      	ldr	r3, [pc, #424]	; (800160c <ProcessCommand+0x43c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d104      	bne.n	8001474 <ProcessCommand+0x2a4>
 800146a:	2100      	movs	r1, #0
 800146c:	2002      	movs	r0, #2
 800146e:	f001 fc5f 	bl	8002d30 <Channel_Polarity>
			else if (_command_value == 2)Channel_Polarity(2, polarity_negative);
			break;
 8001472:	e11f      	b.n	80016b4 <ProcessCommand+0x4e4>
			else if (_command_value == 2)Channel_Polarity(2, polarity_negative);
 8001474:	4b65      	ldr	r3, [pc, #404]	; (800160c <ProcessCommand+0x43c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b02      	cmp	r3, #2
 800147a:	f040 811b 	bne.w	80016b4 <ProcessCommand+0x4e4>
 800147e:	2101      	movs	r1, #1
 8001480:	2002      	movs	r0, #2
 8001482:	f001 fc55 	bl	8002d30 <Channel_Polarity>
			break;
 8001486:	e115      	b.n	80016b4 <ProcessCommand+0x4e4>

		case cmd_getsetting:
			Get_Setting();
 8001488:	f001 fe84 	bl	8003194 <Get_Setting>
			break;
 800148c:	e113      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_LED:
			LedSwitch(_command_value);
 800148e:	4b5f      	ldr	r3, [pc, #380]	; (800160c <ProcessCommand+0x43c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f000 ffe2 	bl	800245c <LedSwitch>
			break;
 8001498:	e10d      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_getallvalues:
			Get_AllMeasurement();
 800149a:	f001 fe63 	bl	8003164 <Get_AllMeasurement>
			//ErrorWatching();
			break;
 800149e:	e10a      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_error_signals:
			Get_ErrorSignals();
 80014a0:	f001 fe18 	bl	80030d4 <Get_ErrorSignals>
			break;
 80014a4:	e107      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_ip_store_endpoint:
			ETH_udp_StoreEndpoint();
 80014a6:	f002 fa29 	bl	80038fc <ETH_udp_StoreEndpoint>
			break;
 80014aa:	e104      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_ip_store_myip:
			ETH_StoreIP(_u32_command_value);
 80014ac:	4b58      	ldr	r3, [pc, #352]	; (8001610 <ProcessCommand+0x440>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f002 f89d 	bl	80035f0 <ETH_StoreIP>
			break;
 80014b6:	e0fe      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_ip_store_mymask:
			ETH_StoreNETMASK(_u32_command_value);
 80014b8:	4b55      	ldr	r3, [pc, #340]	; (8001610 <ProcessCommand+0x440>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f002 f8a7 	bl	8003610 <ETH_StoreNETMASK>
			break;
 80014c2:	e0f8      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_ip_store_mygatew:
			ETH_StoreGATEWAY(_u32_command_value);
 80014c4:	4b52      	ldr	r3, [pc, #328]	; (8001610 <ProcessCommand+0x440>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 f8b1 	bl	8003630 <ETH_StoreGATEWAY>
			break;
 80014ce:	e0f2      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_ip_getsetting:
			ETH_SendSetting();
 80014d0:	f002 f96d 	bl	80037ae <ETH_SendSetting>
			break;
 80014d4:	e0ef      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_adc_set_k0:
			StoreADCConstant(0, _float_command_value);
 80014d6:	4b4f      	ldr	r3, [pc, #316]	; (8001614 <ProcessCommand+0x444>)
 80014d8:	edd3 7a00 	vldr	s15, [r3]
 80014dc:	eeb0 0a67 	vmov.f32	s0, s15
 80014e0:	2000      	movs	r0, #0
 80014e2:	f000 fe7f 	bl	80021e4 <StoreADCConstant>
			break;
 80014e6:	e0e6      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_adc_set_k1:
			StoreADCConstant(1, _float_command_value);
 80014e8:	4b4a      	ldr	r3, [pc, #296]	; (8001614 <ProcessCommand+0x444>)
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	eeb0 0a67 	vmov.f32	s0, s15
 80014f2:	2001      	movs	r0, #1
 80014f4:	f000 fe76 	bl	80021e4 <StoreADCConstant>
			break;
 80014f8:	e0dd      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_adc_set_k2:
			StoreADCConstant(2, _float_command_value);
 80014fa:	4b46      	ldr	r3, [pc, #280]	; (8001614 <ProcessCommand+0x444>)
 80014fc:	edd3 7a00 	vldr	s15, [r3]
 8001500:	eeb0 0a67 	vmov.f32	s0, s15
 8001504:	2002      	movs	r0, #2
 8001506:	f000 fe6d 	bl	80021e4 <StoreADCConstant>
			break;
 800150a:	e0d4      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_adc_set_k3:
			StoreADCConstant(3, _float_command_value);
 800150c:	4b41      	ldr	r3, [pc, #260]	; (8001614 <ProcessCommand+0x444>)
 800150e:	edd3 7a00 	vldr	s15, [r3]
 8001512:	eeb0 0a67 	vmov.f32	s0, s15
 8001516:	2003      	movs	r0, #3
 8001518:	f000 fe64 	bl	80021e4 <StoreADCConstant>
			break;
 800151c:	e0cb      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_adc_set_k4:
			StoreADCConstant(4, _float_command_value);
 800151e:	4b3d      	ldr	r3, [pc, #244]	; (8001614 <ProcessCommand+0x444>)
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	eeb0 0a67 	vmov.f32	s0, s15
 8001528:	2004      	movs	r0, #4
 800152a:	f000 fe5b 	bl	80021e4 <StoreADCConstant>
			break;
 800152e:	e0c2      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_adc_set_k5:
			StoreADCConstant(5, _float_command_value);
 8001530:	4b38      	ldr	r3, [pc, #224]	; (8001614 <ProcessCommand+0x444>)
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	eeb0 0a67 	vmov.f32	s0, s15
 800153a:	2005      	movs	r0, #5
 800153c:	f000 fe52 	bl	80021e4 <StoreADCConstant>
			break;
 8001540:	e0b9      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_adc_set_q0:
			StoreADCConstant(6, _float_command_value);
 8001542:	4b34      	ldr	r3, [pc, #208]	; (8001614 <ProcessCommand+0x444>)
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	eeb0 0a67 	vmov.f32	s0, s15
 800154c:	2006      	movs	r0, #6
 800154e:	f000 fe49 	bl	80021e4 <StoreADCConstant>
			break;
 8001552:	e0b0      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_adc_set_q1:
			StoreADCConstant(7, _float_command_value);
 8001554:	4b2f      	ldr	r3, [pc, #188]	; (8001614 <ProcessCommand+0x444>)
 8001556:	edd3 7a00 	vldr	s15, [r3]
 800155a:	eeb0 0a67 	vmov.f32	s0, s15
 800155e:	2007      	movs	r0, #7
 8001560:	f000 fe40 	bl	80021e4 <StoreADCConstant>
			break;
 8001564:	e0a7      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_adc_set_q2:
			StoreADCConstant(8, _float_command_value);
 8001566:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <ProcessCommand+0x444>)
 8001568:	edd3 7a00 	vldr	s15, [r3]
 800156c:	eeb0 0a67 	vmov.f32	s0, s15
 8001570:	2008      	movs	r0, #8
 8001572:	f000 fe37 	bl	80021e4 <StoreADCConstant>
			break;
 8001576:	e09e      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_adc_set_q3:
			StoreADCConstant(9, _float_command_value);
 8001578:	4b26      	ldr	r3, [pc, #152]	; (8001614 <ProcessCommand+0x444>)
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	eeb0 0a67 	vmov.f32	s0, s15
 8001582:	2009      	movs	r0, #9
 8001584:	f000 fe2e 	bl	80021e4 <StoreADCConstant>
			break;
 8001588:	e095      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_adc_set_q4:
			StoreADCConstant(10, _float_command_value);
 800158a:	4b22      	ldr	r3, [pc, #136]	; (8001614 <ProcessCommand+0x444>)
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	eeb0 0a67 	vmov.f32	s0, s15
 8001594:	200a      	movs	r0, #10
 8001596:	f000 fe25 	bl	80021e4 <StoreADCConstant>
			break;
 800159a:	e08c      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_adc_set_q5:
			StoreADCConstant(11, _float_command_value);
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <ProcessCommand+0x444>)
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	eeb0 0a67 	vmov.f32	s0, s15
 80015a6:	200b      	movs	r0, #11
 80015a8:	f000 fe1c 	bl	80021e4 <StoreADCConstant>
			break;
 80015ac:	e083      	b.n	80016b6 <ProcessCommand+0x4e6>


		case cmd_dac_set_k0:
			StoreDACConstant(0, _float_command_value);
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <ProcessCommand+0x444>)
 80015b0:	edd3 7a00 	vldr	s15, [r3]
 80015b4:	eeb0 0a67 	vmov.f32	s0, s15
 80015b8:	2000      	movs	r0, #0
 80015ba:	f001 f803 	bl	80025c4 <StoreDACConstant>
			break;
 80015be:	e07a      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_dac_set_k1:
			StoreDACConstant(1, _float_command_value);
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <ProcessCommand+0x444>)
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ca:	2001      	movs	r0, #1
 80015cc:	f000 fffa 	bl	80025c4 <StoreDACConstant>
			break;
 80015d0:	e071      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_dac_set_k2:
			StoreDACConstant(2, _float_command_value);
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <ProcessCommand+0x444>)
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	eeb0 0a67 	vmov.f32	s0, s15
 80015dc:	2002      	movs	r0, #2
 80015de:	f000 fff1 	bl	80025c4 <StoreDACConstant>
			break;
 80015e2:	e068      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_dac_set_q0:
			StoreDACConstant(3, _float_command_value);
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <ProcessCommand+0x444>)
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	eeb0 0a67 	vmov.f32	s0, s15
 80015ee:	2003      	movs	r0, #3
 80015f0:	f000 ffe8 	bl	80025c4 <StoreDACConstant>
			break;
 80015f4:	e05f      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_dac_set_q1:
			StoreDACConstant(4, _float_command_value);
 80015f6:	4b07      	ldr	r3, [pc, #28]	; (8001614 <ProcessCommand+0x444>)
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001600:	2004      	movs	r0, #4
 8001602:	f000 ffdf 	bl	80025c4 <StoreDACConstant>
			break;
 8001606:	e056      	b.n	80016b6 <ProcessCommand+0x4e6>
 8001608:	200002bd 	.word	0x200002bd
 800160c:	200002b0 	.word	0x200002b0
 8001610:	200002b8 	.word	0x200002b8
 8001614:	200002b4 	.word	0x200002b4

		case cmd_dac_set_q2:
			StoreDACConstant(5, _float_command_value);
 8001618:	4b29      	ldr	r3, [pc, #164]	; (80016c0 <ProcessCommand+0x4f0>)
 800161a:	edd3 7a00 	vldr	s15, [r3]
 800161e:	eeb0 0a67 	vmov.f32	s0, s15
 8001622:	2005      	movs	r0, #5
 8001624:	f000 ffce 	bl	80025c4 <StoreDACConstant>
			break;
 8001628:	e045      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_adc_getallcoef:
			SendADCCoefficients();
 800162a:	f000 fdf3 	bl	8002214 <SendADCCoefficients>
			break;
 800162e:	e042      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_dac_getallcoef:
			SendDACCoefficients();
 8001630:	f000 ffe0 	bl	80025f4 <SendDACCoefficients>
			break;
 8001634:	e03f      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_set_pre_reg_CH1: //debug
			Set_PreReg_Voltage(0, _command_value);
 8001636:	4b23      	ldr	r3, [pc, #140]	; (80016c4 <ProcessCommand+0x4f4>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	b29b      	uxth	r3, r3
 800163c:	4619      	mov	r1, r3
 800163e:	2000      	movs	r0, #0
 8001640:	f001 f89c 	bl	800277c <Set_PreReg_Voltage>
			break;
 8001644:	e037      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_set_pre_reg_CH2: //debug
			Set_PreReg_Voltage(1, _command_value);
 8001646:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <ProcessCommand+0x4f4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	b29b      	uxth	r3, r3
 800164c:	4619      	mov	r1, r3
 800164e:	2001      	movs	r0, #1
 8001650:	f001 f894 	bl	800277c <Set_PreReg_Voltage>
			break;
 8001654:	e02f      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_set_pre_reg_CH3: //debug
			Set_PreReg_Voltage(2, _command_value);
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <ProcessCommand+0x4f4>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	b29b      	uxth	r3, r3
 800165c:	4619      	mov	r1, r3
 800165e:	2002      	movs	r0, #2
 8001660:	f001 f88c 	bl	800277c <Set_PreReg_Voltage>
			break;
 8001664:	e027      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_set_out_reg_CH1: //debug
			Set_OutReg_Voltage(0, _command_value);
 8001666:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <ProcessCommand+0x4f4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	b29b      	uxth	r3, r3
 800166c:	4619      	mov	r1, r3
 800166e:	2000      	movs	r0, #0
 8001670:	f001 f8b2 	bl	80027d8 <Set_OutReg_Voltage>
			break;
 8001674:	e01f      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_set_out_reg_CH2: //debug
			Set_OutReg_Voltage(1, _command_value);
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <ProcessCommand+0x4f4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	b29b      	uxth	r3, r3
 800167c:	4619      	mov	r1, r3
 800167e:	2001      	movs	r0, #1
 8001680:	f001 f8aa 	bl	80027d8 <Set_OutReg_Voltage>
			break;
 8001684:	e017      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_set_out_reg_CH3: //debug
			Set_OutReg_Voltage(2, _command_value);
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <ProcessCommand+0x4f4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	b29b      	uxth	r3, r3
 800168c:	4619      	mov	r1, r3
 800168e:	2002      	movs	r0, #2
 8001690:	f001 f8a2 	bl	80027d8 <Set_OutReg_Voltage>
			break;
 8001694:	e00f      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_reset:
			System_Reset();
 8001696:	f001 fdd7 	bl	8003248 <System_Reset>
			break;
 800169a:	e00c      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_params_store:
			ParamsStore();
 800169c:	f001 fecc 	bl	8003438 <ParamsStore>
			break;
 80016a0:	e009      	b.n	80016b6 <ProcessCommand+0x4e6>

		case cmd_params_default:
			RestoreParamsDefault();
 80016a2:	f001 fee9 	bl	8003478 <RestoreParamsDefault>
			break;
 80016a6:	e006      	b.n	80016b6 <ProcessCommand+0x4e6>

		default:
			break;
 80016a8:	bf00      	nop
 80016aa:	e004      	b.n	80016b6 <ProcessCommand+0x4e6>
			break;
 80016ac:	bf00      	nop
 80016ae:	e002      	b.n	80016b6 <ProcessCommand+0x4e6>
			break;
 80016b0:	bf00      	nop
 80016b2:	e000      	b.n	80016b6 <ProcessCommand+0x4e6>
			break;
 80016b4:	bf00      	nop
	}
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200002b4 	.word	0x200002b4
 80016c4:	200002b0 	.word	0x200002b0

080016c8 <get_string_length>:
 * @param s -> pointer on string
 *
 * @return length of string
 */
int get_string_length(const char *s)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
    int len=0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
    while (s[len] != 0)
 80016d4:	e002      	b.n	80016dc <get_string_length+0x14>
    {
        len++;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	3301      	adds	r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
    while (s[len] != 0)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f6      	bne.n	80016d6 <get_string_length+0xe>
    }

    return len;
 80016e8:	68fb      	ldr	r3, [r7, #12]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <StringIsEqual>:
 *
 * @return true -> string is equal
 * @retuen false -> string is not equal
 */
bool StringIsEqual(const uint8_t *one, int one_start, int one_end, const uint8_t *two,int two_start, int two_end)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b089      	sub	sp, #36	; 0x24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	60f8      	str	r0, [r7, #12]
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
 8001702:	603b      	str	r3, [r7, #0]
	if(!((one_start >= 0) || (two_start >= 0) || (one_end >= 0) || (two_end >= 0))) return false; //start and stop must be equal or bigger than 0
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	da0a      	bge.n	8001720 <StringIsEqual+0x2a>
 800170a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800170c:	2b00      	cmp	r3, #0
 800170e:	da07      	bge.n	8001720 <StringIsEqual+0x2a>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	da04      	bge.n	8001720 <StringIsEqual+0x2a>
 8001716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001718:	2b00      	cmp	r3, #0
 800171a:	da01      	bge.n	8001720 <StringIsEqual+0x2a>
 800171c:	2300      	movs	r3, #0
 800171e:	e02c      	b.n	800177a <StringIsEqual+0x84>

	int one_length = one_end - one_start;
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	61bb      	str	r3, [r7, #24]
	int two_length = two_end - two_start;
 8001728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800172a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	617b      	str	r3, [r7, #20]

	if(!((one_length > 0) || (two_length > 0))) return false; //length must be bigger than 0
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2b00      	cmp	r3, #0
 8001734:	dc04      	bgt.n	8001740 <StringIsEqual+0x4a>
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	2b00      	cmp	r3, #0
 800173a:	dc01      	bgt.n	8001740 <StringIsEqual+0x4a>
 800173c:	2300      	movs	r3, #0
 800173e:	e01c      	b.n	800177a <StringIsEqual+0x84>
	if(!(one_length == two_length)) return false; //length of one and two must be equal
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	429a      	cmp	r2, r3
 8001746:	d001      	beq.n	800174c <StringIsEqual+0x56>
 8001748:	2300      	movs	r3, #0
 800174a:	e016      	b.n	800177a <StringIsEqual+0x84>

	for(int i = 0;i < one_length; i++)
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
 8001750:	e00e      	b.n	8001770 <StringIsEqual+0x7a>
	{
		if(!(one[i] == two[i])) return false;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	4413      	add	r3, r2
 8001758:	781a      	ldrb	r2, [r3, #0]
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	6839      	ldr	r1, [r7, #0]
 800175e:	440b      	add	r3, r1
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d001      	beq.n	800176a <StringIsEqual+0x74>
 8001766:	2300      	movs	r3, #0
 8001768:	e007      	b.n	800177a <StringIsEqual+0x84>
	for(int i = 0;i < one_length; i++)
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3301      	adds	r3, #1
 800176e:	61fb      	str	r3, [r7, #28]
 8001770:	69fa      	ldr	r2, [r7, #28]
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	429a      	cmp	r2, r3
 8001776:	dbec      	blt.n	8001752 <StringIsEqual+0x5c>
	}

	return true;
 8001778:	2301      	movs	r3, #1
}
 800177a:	4618      	mov	r0, r3
 800177c:	3724      	adds	r7, #36	; 0x24
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <GetDelimiterPosition>:
 * @param character -> searched character
 *
 * @return position of searched character or -1 if character is not found
 */
int GetDelimiterPosition(const uint8_t *string, int length, uint8_t character)
{
 8001786:	b480      	push	{r7}
 8001788:	b087      	sub	sp, #28
 800178a:	af00      	add	r7, sp, #0
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	4613      	mov	r3, r2
 8001792:	71fb      	strb	r3, [r7, #7]
	for(int i = 0;i<length; i++)
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	e00b      	b.n	80017b2 <GetDelimiterPosition+0x2c>
	{
		if(string[i] == character)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	79fa      	ldrb	r2, [r7, #7]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d101      	bne.n	80017ac <GetDelimiterPosition+0x26>
		{
			return i;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	e008      	b.n	80017be <GetDelimiterPosition+0x38>
	for(int i = 0;i<length; i++)
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	3301      	adds	r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	dbef      	blt.n	800179a <GetDelimiterPosition+0x14>
		}
	}

	return -1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017be:	4618      	mov	r0, r3
 80017c0:	371c      	adds	r7, #28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <ProcessLine>:
 *
 * @return true -> correct processing
 * @return false -> wrong command
 */
bool ProcessLine(const uint8_t *Buffer, int legth)
{
 80017cc:	b590      	push	{r4, r7, lr}
 80017ce:	b08f      	sub	sp, #60	; 0x3c
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
	int delim_position = GetDelimiterPosition(Buffer,legth,(uint8_t)'='); //position of delimiter =
 80017d6:	223d      	movs	r2, #61	; 0x3d
 80017d8:	6839      	ldr	r1, [r7, #0]
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ffd3 	bl	8001786 <GetDelimiterPosition>
 80017e0:	6238      	str	r0, [r7, #32]
	if(delim_position == -1) return false; //delimiter not found
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017e8:	d101      	bne.n	80017ee <ProcessLine+0x22>
 80017ea:	2300      	movs	r3, #0
 80017ec:	e0e4      	b.n	80019b8 <ProcessLine+0x1ec>

	_command_id  = -1;
 80017ee:	4b74      	ldr	r3, [pc, #464]	; (80019c0 <ProcessLine+0x1f4>)
 80017f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017f4:	601a      	str	r2, [r3, #0]

	_command_value = 0;
 80017f6:	4b73      	ldr	r3, [pc, #460]	; (80019c4 <ProcessLine+0x1f8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
	_float_command_value = 0;
 80017fc:	4b72      	ldr	r3, [pc, #456]	; (80019c8 <ProcessLine+0x1fc>)
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
	_u32_command_value = 0;
 8001804:	4b71      	ldr	r3, [pc, #452]	; (80019cc <ProcessLine+0x200>)
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]

	if(Buffer[0] == '/') //string start with "/"...command is convert from number
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b2f      	cmp	r3, #47	; 0x2f
 8001810:	d133      	bne.n	800187a <ProcessLine+0xae>
	{
		uint8_t buffer_for_id[3] = {0}; //buffer for convert
 8001812:	4b6f      	ldr	r3, [pc, #444]	; (80019d0 <ProcessLine+0x204>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	81bb      	strh	r3, [r7, #12]
 8001818:	2300      	movs	r3, #0
 800181a:	73bb      	strb	r3, [r7, #14]

		for(int i = 1; i<(delim_position); i++ )
 800181c:	2301      	movs	r3, #1
 800181e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001820:	e019      	b.n	8001856 <ProcessLine+0x8a>
		{
			if(i > 3) break;// i bigger then buffer_for_id
 8001822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001824:	2b03      	cmp	r3, #3
 8001826:	dc1b      	bgt.n	8001860 <ProcessLine+0x94>
			char c = Buffer[i]; //take character from Buffer
 8001828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	77fb      	strb	r3, [r7, #31]
			if(!(c >= '0' && c <= '9')) return false; //character is not number
 8001832:	7ffb      	ldrb	r3, [r7, #31]
 8001834:	2b2f      	cmp	r3, #47	; 0x2f
 8001836:	d902      	bls.n	800183e <ProcessLine+0x72>
 8001838:	7ffb      	ldrb	r3, [r7, #31]
 800183a:	2b39      	cmp	r3, #57	; 0x39
 800183c:	d901      	bls.n	8001842 <ProcessLine+0x76>
 800183e:	2300      	movs	r3, #0
 8001840:	e0ba      	b.n	80019b8 <ProcessLine+0x1ec>
			buffer_for_id[i-1] = c;
 8001842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001844:	3b01      	subs	r3, #1
 8001846:	3330      	adds	r3, #48	; 0x30
 8001848:	443b      	add	r3, r7
 800184a:	7ffa      	ldrb	r2, [r7, #31]
 800184c:	f803 2c24 	strb.w	r2, [r3, #-36]
		for(int i = 1; i<(delim_position); i++ )
 8001850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001852:	3301      	adds	r3, #1
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001856:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001858:	6a3b      	ldr	r3, [r7, #32]
 800185a:	429a      	cmp	r2, r3
 800185c:	dbe1      	blt.n	8001822 <ProcessLine+0x56>
 800185e:	e000      	b.n	8001862 <ProcessLine+0x96>
			if(i > 3) break;// i bigger then buffer_for_id
 8001860:	bf00      	nop

		}
			_command_form = cform_short;
 8001862:	4b5c      	ldr	r3, [pc, #368]	; (80019d4 <ProcessLine+0x208>)
 8001864:	2201      	movs	r2, #1
 8001866:	701a      	strb	r2, [r3, #0]
			_command_id = atoi((char *)buffer_for_id); //convert string to int
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	4618      	mov	r0, r3
 800186e:	f007 fc80 	bl	8009172 <atoi>
 8001872:	4603      	mov	r3, r0
 8001874:	4a52      	ldr	r2, [pc, #328]	; (80019c0 <ProcessLine+0x1f4>)
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	e02c      	b.n	80018d4 <ProcessLine+0x108>
	}

	else //command not start with "/"
	{
		//search equal string in command_string table
		for(int i = 0;i<(sizeof(command_strings)/20); i++)
 800187a:	2300      	movs	r3, #0
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
 800187e:	e023      	b.n	80018c8 <ProcessLine+0xfc>
		{
			if(StringIsEqual(Buffer, 0, delim_position, (uint8_t *)command_strings[i], 0, get_string_length(command_strings[i])))
 8001880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4a53      	ldr	r2, [pc, #332]	; (80019d8 <ProcessLine+0x20c>)
 800188c:	189c      	adds	r4, r3, r2
 800188e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4a4f      	ldr	r2, [pc, #316]	; (80019d8 <ProcessLine+0x20c>)
 800189a:	4413      	add	r3, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff13 	bl	80016c8 <get_string_length>
 80018a2:	4603      	mov	r3, r0
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	2300      	movs	r3, #0
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	4623      	mov	r3, r4
 80018ac:	6a3a      	ldr	r2, [r7, #32]
 80018ae:	2100      	movs	r1, #0
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ff20 	bl	80016f6 <StringIsEqual>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <ProcessLine+0xf6>
			{
				_command_id  = i; //get command position
 80018bc:	4a40      	ldr	r2, [pc, #256]	; (80019c0 <ProcessLine+0x1f4>)
 80018be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c0:	6013      	str	r3, [r2, #0]
		for(int i = 0;i<(sizeof(command_strings)/20); i++)
 80018c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018c4:	3301      	adds	r3, #1
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80018c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ca:	2b52      	cmp	r3, #82	; 0x52
 80018cc:	d9d8      	bls.n	8001880 <ProcessLine+0xb4>
			}
		}
		_command_form = cform_full;
 80018ce:	4b41      	ldr	r3, [pc, #260]	; (80019d4 <ProcessLine+0x208>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
	}

	if(_command_id == -1) return false; //command not found
 80018d4:	4b3a      	ldr	r3, [pc, #232]	; (80019c0 <ProcessLine+0x1f4>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018dc:	d101      	bne.n	80018e2 <ProcessLine+0x116>
 80018de:	2300      	movs	r3, #0
 80018e0:	e06a      	b.n	80019b8 <ProcessLine+0x1ec>

	if(Command_parse[_command_id] == cparse_non) return true; //non parsing
 80018e2:	4b37      	ldr	r3, [pc, #220]	; (80019c0 <ProcessLine+0x1f4>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a3d      	ldr	r2, [pc, #244]	; (80019dc <ProcessLine+0x210>)
 80018e8:	5cd3      	ldrb	r3, [r2, r3]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <ProcessLine+0x126>
 80018ee:	2301      	movs	r3, #1
 80018f0:	e062      	b.n	80019b8 <ProcessLine+0x1ec>


	uint8_t buffer_for_number[12] = {0}; //buffer for convert
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]

	//take character to convert from Buffer
	for(int i = 0; i<(legth-delim_position-1); i++ )
 8001900:	2300      	movs	r3, #0
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
 8001904:	e021      	b.n	800194a <ProcessLine+0x17e>
	{
		if(i > 11) return false;// i bigger then buffer_for_int size
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	2b0b      	cmp	r3, #11
 800190a:	dd01      	ble.n	8001910 <ProcessLine+0x144>
 800190c:	2300      	movs	r3, #0
 800190e:	e053      	b.n	80019b8 <ProcessLine+0x1ec>
		char c = Buffer[delim_position+1+i]; //take character from Buffer
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	1c5a      	adds	r2, r3, #1
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	4413      	add	r3, r2
 8001918:	461a      	mov	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	77bb      	strb	r3, [r7, #30]
		if(!((c >= '0' && c <= '9') || c == '.')) return false; //character is not number
 8001922:	7fbb      	ldrb	r3, [r7, #30]
 8001924:	2b2f      	cmp	r3, #47	; 0x2f
 8001926:	d902      	bls.n	800192e <ProcessLine+0x162>
 8001928:	7fbb      	ldrb	r3, [r7, #30]
 800192a:	2b39      	cmp	r3, #57	; 0x39
 800192c:	d904      	bls.n	8001938 <ProcessLine+0x16c>
 800192e:	7fbb      	ldrb	r3, [r7, #30]
 8001930:	2b2e      	cmp	r3, #46	; 0x2e
 8001932:	d001      	beq.n	8001938 <ProcessLine+0x16c>
 8001934:	2300      	movs	r3, #0
 8001936:	e03f      	b.n	80019b8 <ProcessLine+0x1ec>
		buffer_for_number[i] = c;
 8001938:	f107 0210 	add.w	r2, r7, #16
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	4413      	add	r3, r2
 8001940:	7fba      	ldrb	r2, [r7, #30]
 8001942:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<(legth-delim_position-1); i++ )
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	3301      	adds	r3, #1
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	3b01      	subs	r3, #1
 8001952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001954:	429a      	cmp	r2, r3
 8001956:	dbd6      	blt.n	8001906 <ProcessLine+0x13a>
	}

	//convert buffer to number according to Command_parse
	if(Command_parse[_command_id] == cparse_int)
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <ProcessLine+0x1f4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a1f      	ldr	r2, [pc, #124]	; (80019dc <ProcessLine+0x210>)
 800195e:	5cd3      	ldrb	r3, [r2, r3]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d108      	bne.n	8001976 <ProcessLine+0x1aa>
	{
		_command_value = atoi((char *)buffer_for_number); //convert string to int
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	4618      	mov	r0, r3
 800196a:	f007 fc02 	bl	8009172 <atoi>
 800196e:	4603      	mov	r3, r0
 8001970:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <ProcessLine+0x1f8>)
 8001972:	6013      	str	r3, [r2, #0]
 8001974:	e01f      	b.n	80019b6 <ProcessLine+0x1ea>
	}
	else if(Command_parse[_command_id] == cparse_float)
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <ProcessLine+0x1f4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a18      	ldr	r2, [pc, #96]	; (80019dc <ProcessLine+0x210>)
 800197c:	5cd3      	ldrb	r3, [r2, r3]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d10a      	bne.n	8001998 <ProcessLine+0x1cc>
	{
		_float_command_value = atoff((char *)buffer_for_number); //convert string to float
 8001982:	f107 0310 	add.w	r3, r7, #16
 8001986:	4618      	mov	r0, r3
 8001988:	f007 fbf0 	bl	800916c <atoff>
 800198c:	eef0 7a40 	vmov.f32	s15, s0
 8001990:	4b0d      	ldr	r3, [pc, #52]	; (80019c8 <ProcessLine+0x1fc>)
 8001992:	edc3 7a00 	vstr	s15, [r3]
 8001996:	e00e      	b.n	80019b6 <ProcessLine+0x1ea>
	}
	else if(Command_parse[_command_id] == cparse_u32t)
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <ProcessLine+0x1f4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0f      	ldr	r2, [pc, #60]	; (80019dc <ProcessLine+0x210>)
 800199e:	5cd3      	ldrb	r3, [r2, r3]
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d108      	bne.n	80019b6 <ProcessLine+0x1ea>
	{
		_u32_command_value = (uint32_t)atoll((char *)buffer_for_number); //convert string to uint32_t
 80019a4:	f107 0310 	add.w	r3, r7, #16
 80019a8:	4618      	mov	r0, r3
 80019aa:	f007 fbe6 	bl	800917a <atoll>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <ProcessLine+0x200>)
 80019b4:	601a      	str	r2, [r3, #0]
	}


	return true;
 80019b6:	2301      	movs	r3, #1
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3734      	adds	r7, #52	; 0x34
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd90      	pop	{r4, r7, pc}
 80019c0:	200002ac 	.word	0x200002ac
 80019c4:	200002b0 	.word	0x200002b0
 80019c8:	200002b4 	.word	0x200002b4
 80019cc:	200002b8 	.word	0x200002b8
 80019d0:	0800d8c0 	.word	0x0800d8c0
 80019d4:	200002bc 	.word	0x200002bc
 80019d8:	0800d90c 	.word	0x0800d90c
 80019dc:	20000000 	.word	0x20000000

080019e0 <ProcessCommunication_UART>:
 *
 * @return true -> correct processing
 * @return false -> wrong command or not found new line
 */
bool ProcessCommunication_UART()
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b094      	sub	sp, #80	; 0x50
 80019e4:	af00      	add	r7, sp, #0
	if(!Uart_BufferNotEmpty()) return false;
 80019e6:	f002 f81b 	bl	8003a20 <Uart_BufferNotEmpty>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f083 0301 	eor.w	r3, r3, #1
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <ProcessCommunication_UART+0x1a>
 80019f6:	2300      	movs	r3, #0
 80019f8:	e05a      	b.n	8001ab0 <ProcessCommunication_UART+0xd0>

	uint8_t line_buffer[64] = {0};
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	f107 0308 	add.w	r3, r7, #8
 8001a02:	223c      	movs	r2, #60	; 0x3c
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f007 fbfc 	bl	8009204 <memset>
	uint8_t line_counter = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	uint32_t timeout_timer = HAL_GetTick();
 8001a12:	f003 f849 	bl	8004aa8 <HAL_GetTick>
 8001a16:	64b8      	str	r0, [r7, #72]	; 0x48

	while(true)
	{
		if((HAL_GetTick() - timeout_timer) >= 50) return false;
 8001a18:	f003 f846 	bl	8004aa8 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b31      	cmp	r3, #49	; 0x31
 8001a24:	d901      	bls.n	8001a2a <ProcessCommunication_UART+0x4a>
 8001a26:	2300      	movs	r3, #0
 8001a28:	e042      	b.n	8001ab0 <ProcessCommunication_UART+0xd0>
		if(!Uart_BufferNotEmpty()) continue;
 8001a2a:	f001 fff9 	bl	8003a20 <Uart_BufferNotEmpty>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f083 0301 	eor.w	r3, r3, #1
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d138      	bne.n	8001aac <ProcessCommunication_UART+0xcc>

		uint8_t data = Uart_ReadBuffer();
 8001a3a:	f002 f833 	bl	8003aa4 <Uart_ReadBuffer>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

		if(data == '\n' || data == '\r')
 8001a44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a48:	2b0a      	cmp	r3, #10
 8001a4a:	d003      	beq.n	8001a54 <ProcessCommunication_UART+0x74>
 8001a4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a50:	2b0d      	cmp	r3, #13
 8001a52:	d118      	bne.n	8001a86 <ProcessCommunication_UART+0xa6>
		{
			if(line_counter == 0) return false;
 8001a54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <ProcessCommunication_UART+0x80>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	e027      	b.n	8001ab0 <ProcessCommunication_UART+0xd0>

			bool b = ProcessLine(line_buffer, line_counter);
 8001a60:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff feaf 	bl	80017cc <ProcessLine>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

			line_counter = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			_command_source = csource_UART;
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <ProcessCommunication_UART+0xd8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
			return b;
 8001a80:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001a84:	e014      	b.n	8001ab0 <ProcessCommunication_UART+0xd0>
		}
		else
		{
			line_buffer[line_counter] = data;
 8001a86:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a8a:	3350      	adds	r3, #80	; 0x50
 8001a8c:	443b      	add	r3, r7
 8001a8e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001a92:	f803 2c4c 	strb.w	r2, [r3, #-76]
			line_counter++;
 8001a96:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			if(line_counter > (sizeof(line_buffer)-1)) return false;
 8001aa0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001aa4:	2b3f      	cmp	r3, #63	; 0x3f
 8001aa6:	d9b7      	bls.n	8001a18 <ProcessCommunication_UART+0x38>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	e001      	b.n	8001ab0 <ProcessCommunication_UART+0xd0>
		if(!Uart_BufferNotEmpty()) continue;
 8001aac:	bf00      	nop
	{
 8001aae:	e7b3      	b.n	8001a18 <ProcessCommunication_UART+0x38>
		}
	}
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3750      	adds	r7, #80	; 0x50
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	200002bd 	.word	0x200002bd

08001abc <ProcessCommunication_ETH>:
 *
 * @return true -> correct processing
 * @return false -> wrong command or not found new line
 */
bool ProcessCommunication_ETH()
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b094      	sub	sp, #80	; 0x50
 8001ac0:	af00      	add	r7, sp, #0
	if(!ETH_BufferNotEmpty()) return false;
 8001ac2:	f000 fadb 	bl	800207c <ETH_BufferNotEmpty>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	f083 0301 	eor.w	r3, r3, #1
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <ProcessCommunication_ETH+0x1a>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	e054      	b.n	8001b80 <ProcessCommunication_ETH+0xc4>

	uint8_t line_buffer[64] = {0};
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	223c      	movs	r2, #60	; 0x3c
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f007 fb8e 	bl	8009204 <memset>
	uint8_t line_counter = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	uint32_t timeout_timer = HAL_GetTick();
 8001aee:	f002 ffdb 	bl	8004aa8 <HAL_GetTick>
 8001af2:	64b8      	str	r0, [r7, #72]	; 0x48

	while(true)
	{
		if((HAL_GetTick()-timeout_timer) >= 50) return false;
 8001af4:	f002 ffd8 	bl	8004aa8 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b31      	cmp	r3, #49	; 0x31
 8001b00:	d901      	bls.n	8001b06 <ProcessCommunication_ETH+0x4a>
 8001b02:	2300      	movs	r3, #0
 8001b04:	e03c      	b.n	8001b80 <ProcessCommunication_ETH+0xc4>
		if(!ETH_BufferNotEmpty()) continue;
 8001b06:	f000 fab9 	bl	800207c <ETH_BufferNotEmpty>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f083 0301 	eor.w	r3, r3, #1
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d132      	bne.n	8001b7c <ProcessCommunication_ETH+0xc0>

		uint8_t data = ETH_ReadBuffer();
 8001b16:	f000 faff 	bl	8002118 <ETH_ReadBuffer>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

		if(data == '\n' || data == '\r')
 8001b20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b24:	2b0a      	cmp	r3, #10
 8001b26:	d003      	beq.n	8001b30 <ProcessCommunication_ETH+0x74>
 8001b28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b2c:	2b0d      	cmp	r3, #13
 8001b2e:	d112      	bne.n	8001b56 <ProcessCommunication_ETH+0x9a>
		{
			bool b = ProcessLine(line_buffer, line_counter);
 8001b30:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fe47 	bl	80017cc <ProcessLine>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

			line_counter = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			_command_source = csource_ETH;
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <ProcessCommunication_ETH+0xcc>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	701a      	strb	r2, [r3, #0]
			return b;
 8001b50:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001b54:	e014      	b.n	8001b80 <ProcessCommunication_ETH+0xc4>
		}
		else
		{
			line_buffer[line_counter] = data;
 8001b56:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b5a:	3350      	adds	r3, #80	; 0x50
 8001b5c:	443b      	add	r3, r7
 8001b5e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001b62:	f803 2c4c 	strb.w	r2, [r3, #-76]
			line_counter++;
 8001b66:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			if(line_counter > (sizeof(line_buffer)-1)) return false;
 8001b70:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b74:	2b3f      	cmp	r3, #63	; 0x3f
 8001b76:	d9bd      	bls.n	8001af4 <ProcessCommunication_ETH+0x38>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e001      	b.n	8001b80 <ProcessCommunication_ETH+0xc4>
		if(!ETH_BufferNotEmpty()) continue;
 8001b7c:	bf00      	nop
	{
 8001b7e:	e7b9      	b.n	8001af4 <ProcessCommunication_ETH+0x38>
		}
	}
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3750      	adds	r7, #80	; 0x50
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	200002bd 	.word	0x200002bd

08001b8c <SendCommunication>:
 * @param command_id -> number of data command
 * @param data -> data to be transmitted
 *
 */
void SendCommunication(eCommand_Id command_id, int data)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08c      	sub	sp, #48	; 0x30
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	71fb      	strb	r3, [r7, #7]
	char sprint_buffer[32];
	uint8_t size = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(_command_form == cform_full)
 8001b9e:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <SendCommunication+0x98>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d110      	bne.n	8001bc8 <SendCommunication+0x3c>
	{
		size = sprintf(sprint_buffer,"%s=%d\r\n",command_strings[command_id],data);
 8001ba6:	79fa      	ldrb	r2, [r7, #7]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4a1d      	ldr	r2, [pc, #116]	; (8001c28 <SendCommunication+0x9c>)
 8001bb2:	441a      	add	r2, r3
 8001bb4:	f107 000c 	add.w	r0, r7, #12
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	491c      	ldr	r1, [pc, #112]	; (8001c2c <SendCommunication+0xa0>)
 8001bbc:	f008 f884 	bl	8009cc8 <siprintf>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001bc6:	e00d      	b.n	8001be4 <SendCommunication+0x58>
	}
	else if(_command_form == cform_short)
 8001bc8:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <SendCommunication+0x98>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d109      	bne.n	8001be4 <SendCommunication+0x58>
	{
		size = sprintf(sprint_buffer,"/%d=%d\r\n",(int)command_id,data);
 8001bd0:	79fa      	ldrb	r2, [r7, #7]
 8001bd2:	f107 000c 	add.w	r0, r7, #12
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	4915      	ldr	r1, [pc, #84]	; (8001c30 <SendCommunication+0xa4>)
 8001bda:	f008 f875 	bl	8009cc8 <siprintf>
 8001bde:	4603      	mov	r3, r0
 8001be0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if(_command_source == csource_UART)
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <SendCommunication+0xa8>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d109      	bne.n	8001c00 <SendCommunication+0x74>
	{
		Uart_Send(sprint_buffer, size);
 8001bec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	f107 030c 	add.w	r3, r7, #12
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f001 ff7d 	bl	8003af8 <Uart_Send>
	else if(_command_source == csource_ETH)
	{
		ETH_Send(sprint_buffer, size);
	}

}
 8001bfe:	e00c      	b.n	8001c1a <SendCommunication+0x8e>
	else if(_command_source == csource_ETH)
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <SendCommunication+0xa8>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d108      	bne.n	8001c1a <SendCommunication+0x8e>
		ETH_Send(sprint_buffer, size);
 8001c08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	f107 030c 	add.w	r3, r7, #12
 8001c12:	4611      	mov	r1, r2
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 faa9 	bl	800216c <ETH_Send>
}
 8001c1a:	bf00      	nop
 8001c1c:	3730      	adds	r7, #48	; 0x30
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200002bc 	.word	0x200002bc
 8001c28:	0800d90c 	.word	0x0800d90c
 8001c2c:	0800d8c4 	.word	0x0800d8c4
 8001c30:	0800d8cc 	.word	0x0800d8cc
 8001c34:	200002bd 	.word	0x200002bd

08001c38 <SendCommunication_float>:
 * @param command_id -> number of data command
 * @param data -> data to be transmitted
 *
 */
void SendCommunication_float(eCommand_Id command_id, float data)
{
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b08f      	sub	sp, #60	; 0x3c
 8001c3c:	af02      	add	r7, sp, #8
 8001c3e:	4603      	mov	r3, r0
 8001c40:	ed87 0a00 	vstr	s0, [r7]
 8001c44:	71fb      	strb	r3, [r7, #7]
	char sprint_buffer[32];
	uint8_t size = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(_command_form == cform_full)
 8001c4c:	4b27      	ldr	r3, [pc, #156]	; (8001cec <SendCommunication_float+0xb4>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d117      	bne.n	8001c84 <SendCommunication_float+0x4c>
	{
		size = sprintf(sprint_buffer,"%s=%f\r\n",command_strings[command_id],data);
 8001c54:	79fa      	ldrb	r2, [r7, #7]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4a24      	ldr	r2, [pc, #144]	; (8001cf0 <SendCommunication_float+0xb8>)
 8001c60:	189c      	adds	r4, r3, r2
 8001c62:	6838      	ldr	r0, [r7, #0]
 8001c64:	f7fe fc78 	bl	8000558 <__aeabi_f2d>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	f107 000c 	add.w	r0, r7, #12
 8001c70:	e9cd 2300 	strd	r2, r3, [sp]
 8001c74:	4622      	mov	r2, r4
 8001c76:	491f      	ldr	r1, [pc, #124]	; (8001cf4 <SendCommunication_float+0xbc>)
 8001c78:	f008 f826 	bl	8009cc8 <siprintf>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001c82:	e014      	b.n	8001cae <SendCommunication_float+0x76>
	}
	else if(_command_form == cform_short)
 8001c84:	4b19      	ldr	r3, [pc, #100]	; (8001cec <SendCommunication_float+0xb4>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d110      	bne.n	8001cae <SendCommunication_float+0x76>
	{
		size = sprintf(sprint_buffer,"/%d=%f\r\n",(int)command_id,data);
 8001c8c:	79fc      	ldrb	r4, [r7, #7]
 8001c8e:	6838      	ldr	r0, [r7, #0]
 8001c90:	f7fe fc62 	bl	8000558 <__aeabi_f2d>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	f107 000c 	add.w	r0, r7, #12
 8001c9c:	e9cd 2300 	strd	r2, r3, [sp]
 8001ca0:	4622      	mov	r2, r4
 8001ca2:	4915      	ldr	r1, [pc, #84]	; (8001cf8 <SendCommunication_float+0xc0>)
 8001ca4:	f008 f810 	bl	8009cc8 <siprintf>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if(_command_source == csource_UART)
 8001cae:	4b13      	ldr	r3, [pc, #76]	; (8001cfc <SendCommunication_float+0xc4>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d109      	bne.n	8001cca <SendCommunication_float+0x92>
	{
		Uart_Send(sprint_buffer, size);
 8001cb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	f107 030c 	add.w	r3, r7, #12
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f001 ff18 	bl	8003af8 <Uart_Send>
	else if(_command_source == csource_ETH)
	{
		ETH_Send(sprint_buffer, size);
	}

}
 8001cc8:	e00c      	b.n	8001ce4 <SendCommunication_float+0xac>
	else if(_command_source == csource_ETH)
 8001cca:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <SendCommunication_float+0xc4>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d108      	bne.n	8001ce4 <SendCommunication_float+0xac>
		ETH_Send(sprint_buffer, size);
 8001cd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	f107 030c 	add.w	r3, r7, #12
 8001cdc:	4611      	mov	r1, r2
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 fa44 	bl	800216c <ETH_Send>
}
 8001ce4:	bf00      	nop
 8001ce6:	3734      	adds	r7, #52	; 0x34
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd90      	pop	{r4, r7, pc}
 8001cec:	200002bc 	.word	0x200002bc
 8001cf0:	0800d90c 	.word	0x0800d90c
 8001cf4:	0800d8d8 	.word	0x0800d8d8
 8001cf8:	0800d8e0 	.word	0x0800d8e0
 8001cfc:	200002bd 	.word	0x200002bd

08001d00 <SendCommunication_u32>:
 * @param command_id -> number of data command
 * @param data -> data to be transmitted
 *
 */
void SendCommunication_u32(eCommand_Id command_id, uint32_t data)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08c      	sub	sp, #48	; 0x30
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	71fb      	strb	r3, [r7, #7]
	char sprint_buffer[32];
	uint8_t size = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(_command_form == cform_full)
 8001d12:	4b21      	ldr	r3, [pc, #132]	; (8001d98 <SendCommunication_u32+0x98>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d110      	bne.n	8001d3c <SendCommunication_u32+0x3c>
	{
		size = sprintf(sprint_buffer,"%s=%lu\r\n",command_strings[command_id],data);
 8001d1a:	79fa      	ldrb	r2, [r7, #7]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	4a1d      	ldr	r2, [pc, #116]	; (8001d9c <SendCommunication_u32+0x9c>)
 8001d26:	441a      	add	r2, r3
 8001d28:	f107 000c 	add.w	r0, r7, #12
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	491c      	ldr	r1, [pc, #112]	; (8001da0 <SendCommunication_u32+0xa0>)
 8001d30:	f007 ffca 	bl	8009cc8 <siprintf>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001d3a:	e00d      	b.n	8001d58 <SendCommunication_u32+0x58>
	}
	else if(_command_form == cform_short)
 8001d3c:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <SendCommunication_u32+0x98>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d109      	bne.n	8001d58 <SendCommunication_u32+0x58>
	{
		size = sprintf(sprint_buffer,"/%d=%lu\r\n",(int)command_id,data);
 8001d44:	79fa      	ldrb	r2, [r7, #7]
 8001d46:	f107 000c 	add.w	r0, r7, #12
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	4915      	ldr	r1, [pc, #84]	; (8001da4 <SendCommunication_u32+0xa4>)
 8001d4e:	f007 ffbb 	bl	8009cc8 <siprintf>
 8001d52:	4603      	mov	r3, r0
 8001d54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if(_command_source == csource_UART)
 8001d58:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <SendCommunication_u32+0xa8>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d109      	bne.n	8001d74 <SendCommunication_u32+0x74>
	{
		Uart_Send(sprint_buffer, size);
 8001d60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	f107 030c 	add.w	r3, r7, #12
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f001 fec3 	bl	8003af8 <Uart_Send>
	else if(_command_source == csource_ETH)
	{
		ETH_Send(sprint_buffer, size);
	}

}
 8001d72:	e00c      	b.n	8001d8e <SendCommunication_u32+0x8e>
	else if(_command_source == csource_ETH)
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <SendCommunication_u32+0xa8>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d108      	bne.n	8001d8e <SendCommunication_u32+0x8e>
		ETH_Send(sprint_buffer, size);
 8001d7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	f107 030c 	add.w	r3, r7, #12
 8001d86:	4611      	mov	r1, r2
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 f9ef 	bl	800216c <ETH_Send>
}
 8001d8e:	bf00      	nop
 8001d90:	3730      	adds	r7, #48	; 0x30
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200002bc 	.word	0x200002bc
 8001d9c:	0800d90c 	.word	0x0800d90c
 8001da0:	0800d8ec 	.word	0x0800d8ec
 8001da4:	0800d8f8 	.word	0x0800d8f8
 8001da8:	200002bd 	.word	0x200002bd

08001dac <Comunication_ResetConnectedTimer>:


void Comunication_ResetConnectedTimer()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
	ConnectedTimer = HAL_GetTick();
 8001db0:	f002 fe7a 	bl	8004aa8 <HAL_GetTick>
 8001db4:	4603      	mov	r3, r0
 8001db6:	4a03      	ldr	r2, [pc, #12]	; (8001dc4 <Comunication_ResetConnectedTimer+0x18>)
 8001db8:	6013      	str	r3, [r2, #0]
	_AppConnected = true;
 8001dba:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <Comunication_ResetConnectedTimer+0x1c>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	200002a4 	.word	0x200002a4
 8001dc8:	200002a8 	.word	0x200002a8

08001dcc <Communication_ConnectedTimer>:

void Communication_ConnectedTimer()
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0

	  if((HAL_GetTick() - ConnectedTimer) > ConnectedTimer_Value)
 8001dd0:	f002 fe6a 	bl	8004aa8 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	4b05      	ldr	r3, [pc, #20]	; (8001dec <Communication_ConnectedTimer+0x20>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001de0:	d902      	bls.n	8001de8 <Communication_ConnectedTimer+0x1c>
	  {
		  _AppConnected = false;
 8001de2:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <Communication_ConnectedTimer+0x24>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
	  }

}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	200002a4 	.word	0x200002a4
 8001df0:	200002a8 	.word	0x200002a8

08001df4 <ErrorExecute>:

/* @brief reaction on error signal
 *
 */
void ErrorExecute(uint8_t channel)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <ErrorExecute+0x1c>
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d002      	beq.n	8001e10 <ErrorExecute+0x1c>
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d11c      	bne.n	8001e4a <ErrorExecute+0x56>

	_Found_Error = false;
 8001e10:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <ErrorExecute+0x60>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	701a      	strb	r2, [r3, #0]

	//power good execution -> channel disable
	if(*p_ERROR_data[channel])
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	4a0f      	ldr	r2, [pc, #60]	; (8001e58 <ErrorExecute+0x64>)
 8001e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d004      	beq.n	8001e2e <ErrorExecute+0x3a>
	{
		Channel_Enable(channel, false);
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 feef 	bl	8002c0c <Channel_Enable>
	}

	//over current execution -> output disable
	if(*p_ERROR_data[channel + 3])
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	3303      	adds	r3, #3
 8001e32:	4a09      	ldr	r2, [pc, #36]	; (8001e58 <ErrorExecute+0x64>)
 8001e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d006      	beq.n	8001e4c <ErrorExecute+0x58>
	{
		Channel_Output(channel, false);
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 ffe2 	bl	8002e0c <Channel_Output>
 8001e48:	e000      	b.n	8001e4c <ErrorExecute+0x58>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8001e4a:	bf00      	nop
	}
}
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200002f0 	.word	0x200002f0
 8001e58:	200002d8 	.word	0x200002d8

08001e5c <ErrorProcess>:
 *  write to _Found_Error:
 *  	true -> found error
 *  	false -> non error
 */
void ErrorProcess()
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0

	for(int errbit = 0; errbit < 6; errbit++)
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	e02f      	b.n	8001ec8 <ErrorProcess+0x6c>
	{
		int ee = 0;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < Error_Array_Size ; i++)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	607b      	str	r3, [r7, #4]
 8001e70:	e011      	b.n	8001e96 <ErrorProcess+0x3a>
		{
			if(Error_Array_Reg[i] & (1 << errbit)) ee++;
 8001e72:	4a1a      	ldr	r2, [pc, #104]	; (8001edc <ErrorProcess+0x80>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4413      	add	r3, r2
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	fa42 f303 	asr.w	r3, r2, r3
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d002      	beq.n	8001e90 <ErrorProcess+0x34>
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < Error_Array_Size ; i++)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3301      	adds	r3, #1
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b13      	cmp	r3, #19
 8001e9a:	ddea      	ble.n	8001e72 <ErrorProcess+0x16>
		}

		if(ee >= Error_Threshold)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2b0f      	cmp	r3, #15
 8001ea0:	dd09      	ble.n	8001eb6 <ErrorProcess+0x5a>
		{
			*p_ERROR_data[errbit] = true;
 8001ea2:	4a0f      	ldr	r2, [pc, #60]	; (8001ee0 <ErrorProcess+0x84>)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
			_Found_Error = true;
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <ErrorProcess+0x88>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
 8001eb4:	e005      	b.n	8001ec2 <ErrorProcess+0x66>
		}
		else
		{
			*p_ERROR_data[errbit] = false;
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ee0 <ErrorProcess+0x84>)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
	for(int errbit = 0; errbit < 6; errbit++)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b05      	cmp	r3, #5
 8001ecc:	ddcc      	ble.n	8001e68 <ErrorProcess+0xc>
		}
	}
}
 8001ece:	bf00      	nop
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	200002c0 	.word	0x200002c0
 8001ee0:	200002d8 	.word	0x200002d8
 8001ee4:	200002f0 	.word	0x200002f0

08001ee8 <ErrorSignalsRead>:
 *
 * @return true -> found error, after process (after Error_Array_Size counts)
 * @return false -> non error
 */
void ErrorSignalsRead()
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0

	uint8_t temp_error_reg = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	71fb      	strb	r3, [r7, #7]
	
	if(ChannelsStatus[0].enable)
 8001ef2:	4b43      	ldr	r3, [pc, #268]	; (8002000 <ErrorSignalsRead+0x118>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d01f      	beq.n	8001f3a <ErrorSignalsRead+0x52>
	{
		temp_error_reg |= (!((bool)HAL_GPIO_ReadPin(PG_1_GPIO_Port, PG_1_Pin)))  << 0;
 8001efa:	2110      	movs	r1, #16
 8001efc:	4841      	ldr	r0, [pc, #260]	; (8002004 <ErrorSignalsRead+0x11c>)
 8001efe:	f003 fddb 	bl	8005ab8 <HAL_GPIO_ReadPin>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	b25a      	sxtb	r2, r3
 8001f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	b25b      	sxtb	r3, r3
 8001f18:	71fb      	strb	r3, [r7, #7]
		temp_error_reg |= ((bool)HAL_GPIO_ReadPin(OC_1_GPIO_Port, OC_1_Pin))  << 3;
 8001f1a:	2140      	movs	r1, #64	; 0x40
 8001f1c:	4839      	ldr	r0, [pc, #228]	; (8002004 <ErrorSignalsRead+0x11c>)
 8001f1e:	f003 fdcb 	bl	8005ab8 <HAL_GPIO_ReadPin>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <ErrorSignalsRead+0x44>
 8001f28:	2308      	movs	r3, #8
 8001f2a:	e000      	b.n	8001f2e <ErrorSignalsRead+0x46>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	b25a      	sxtb	r2, r3
 8001f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	b25b      	sxtb	r3, r3
 8001f38:	71fb      	strb	r3, [r7, #7]
	}

	if(ChannelsStatus[1].enable)
 8001f3a:	4b31      	ldr	r3, [pc, #196]	; (8002000 <ErrorSignalsRead+0x118>)
 8001f3c:	7d1b      	ldrb	r3, [r3, #20]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d01f      	beq.n	8001f82 <ErrorSignalsRead+0x9a>
	{
		temp_error_reg |= (!((bool)HAL_GPIO_ReadPin(PG_2_GPIO_Port, PG_2_Pin)))  << 1;
 8001f42:	2120      	movs	r1, #32
 8001f44:	482f      	ldr	r0, [pc, #188]	; (8002004 <ErrorSignalsRead+0x11c>)
 8001f46:	f003 fdb7 	bl	8005ab8 <HAL_GPIO_ReadPin>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <ErrorSignalsRead+0x6c>
 8001f50:	2302      	movs	r3, #2
 8001f52:	e000      	b.n	8001f56 <ErrorSignalsRead+0x6e>
 8001f54:	2300      	movs	r3, #0
 8001f56:	b25a      	sxtb	r2, r3
 8001f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	b25b      	sxtb	r3, r3
 8001f60:	71fb      	strb	r3, [r7, #7]
		temp_error_reg |= ((bool)HAL_GPIO_ReadPin(OC_3_GPIO_Port, OC_2_Pin))  << 4;
 8001f62:	2180      	movs	r1, #128	; 0x80
 8001f64:	4827      	ldr	r0, [pc, #156]	; (8002004 <ErrorSignalsRead+0x11c>)
 8001f66:	f003 fda7 	bl	8005ab8 <HAL_GPIO_ReadPin>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <ErrorSignalsRead+0x8c>
 8001f70:	2310      	movs	r3, #16
 8001f72:	e000      	b.n	8001f76 <ErrorSignalsRead+0x8e>
 8001f74:	2300      	movs	r3, #0
 8001f76:	b25a      	sxtb	r2, r3
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	b25b      	sxtb	r3, r3
 8001f80:	71fb      	strb	r3, [r7, #7]
	}

	if(ChannelsStatus[2].enable)
 8001f82:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <ErrorSignalsRead+0x118>)
 8001f84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d020      	beq.n	8001fce <ErrorSignalsRead+0xe6>
	{
		temp_error_reg |= (!((bool)HAL_GPIO_ReadPin(PG_3_GPIO_Port, PG_3_Pin)))  << 2;
 8001f8c:	2104      	movs	r1, #4
 8001f8e:	481e      	ldr	r0, [pc, #120]	; (8002008 <ErrorSignalsRead+0x120>)
 8001f90:	f003 fd92 	bl	8005ab8 <HAL_GPIO_ReadPin>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <ErrorSignalsRead+0xb6>
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	e000      	b.n	8001fa0 <ErrorSignalsRead+0xb8>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	b25a      	sxtb	r2, r3
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	b25b      	sxtb	r3, r3
 8001faa:	71fb      	strb	r3, [r7, #7]
		temp_error_reg |= ((bool)HAL_GPIO_ReadPin(OC_3_GPIO_Port, OC_3_Pin))  << 5;
 8001fac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fb0:	4814      	ldr	r0, [pc, #80]	; (8002004 <ErrorSignalsRead+0x11c>)
 8001fb2:	f003 fd81 	bl	8005ab8 <HAL_GPIO_ReadPin>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <ErrorSignalsRead+0xd8>
 8001fbc:	2320      	movs	r3, #32
 8001fbe:	e000      	b.n	8001fc2 <ErrorSignalsRead+0xda>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	b25a      	sxtb	r2, r3
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	b25b      	sxtb	r3, r3
 8001fcc:	71fb      	strb	r3, [r7, #7]
	}



	Error_Array_Reg[Error_Array_Counter] = temp_error_reg;
 8001fce:	4b0f      	ldr	r3, [pc, #60]	; (800200c <ErrorSignalsRead+0x124>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <ErrorSignalsRead+0x128>)
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	5453      	strb	r3, [r2, r1]
	Error_Array_Counter++;
 8001fda:	4b0c      	ldr	r3, [pc, #48]	; (800200c <ErrorSignalsRead+0x124>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	; (800200c <ErrorSignalsRead+0x124>)
 8001fe4:	701a      	strb	r2, [r3, #0]
	if(Error_Array_Counter > (Error_Array_Size - 1))
 8001fe6:	4b09      	ldr	r3, [pc, #36]	; (800200c <ErrorSignalsRead+0x124>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b13      	cmp	r3, #19
 8001fec:	d904      	bls.n	8001ff8 <ErrorSignalsRead+0x110>
	{
		Error_Array_Counter = 0;
 8001fee:	4b07      	ldr	r3, [pc, #28]	; (800200c <ErrorSignalsRead+0x124>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
		ErrorProcess();
 8001ff4:	f7ff ff32 	bl	8001e5c <ErrorProcess>
	}
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20000780 	.word	0x20000780
 8002004:	40020800 	.word	0x40020800
 8002008:	40020400 	.word	0x40020400
 800200c:	200002d4 	.word	0x200002d4
 8002010:	200002c0 	.word	0x200002c0

08002014 <AppConnectedExecute>:


void AppConnectedExecute(bool AppConnected)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, AppConnected);
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	461a      	mov	r2, r3
 8002022:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002026:	4813      	ldr	r0, [pc, #76]	; (8002074 <AppConnectedExecute+0x60>)
 8002028:	f003 fd5e 	bl	8005ae8 <HAL_GPIO_WritePin>

	if((AppConnected == false) &&_DisableSupplyInLostConnection)
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	f083 0301 	eor.w	r3, r3, #1
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d018      	beq.n	800206a <AppConnectedExecute+0x56>
 8002038:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <AppConnectedExecute+0x64>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d014      	beq.n	800206a <AppConnectedExecute+0x56>
	{

		for(int i = 0; i< 3; i++)
 8002040:	2300      	movs	r3, #0
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	e00e      	b.n	8002064 <AppConnectedExecute+0x50>
		{
			Channel_Enable(i, false);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f000 fddd 	bl	8002c0c <Channel_Enable>
			Channel_Output(i, false);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2100      	movs	r1, #0
 8002058:	4618      	mov	r0, r3
 800205a:	f000 fed7 	bl	8002e0c <Channel_Output>
		for(int i = 0; i< 3; i++)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	3301      	adds	r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b02      	cmp	r3, #2
 8002068:	dded      	ble.n	8002046 <AppConnectedExecute+0x32>
		}

	}
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40020800 	.word	0x40020800
 8002078:	200002f2 	.word	0x200002f2

0800207c <ETH_BufferNotEmpty>:
 *
 * @return true -> FIFO is not empty
 * @return false -> FIFO is empty
 */
bool ETH_BufferNotEmpty()
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
	return (eth_bcounter > 0);
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <ETH_BufferNotEmpty+0x1c>)
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf14      	ite	ne
 8002088:	2301      	movne	r3, #1
 800208a:	2300      	moveq	r3, #0
 800208c:	b2db      	uxtb	r3, r3
}
 800208e:	4618      	mov	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	200006f8 	.word	0x200006f8

0800209c <ETH_WriteBuffer>:

/* @brief function add data byte to FIFO
 *
 */
void ETH_WriteBuffer(const uint8_t *Buffer, int length)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
	for(int i = 0;i<length;i++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	e024      	b.n	80020f6 <ETH_WriteBuffer+0x5a>
	{
		if(eth_bcounter >= (eth_buffer_size-1)) return;
 80020ac:	4b17      	ldr	r3, [pc, #92]	; (800210c <ETH_WriteBuffer+0x70>)
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d823      	bhi.n	8002100 <ETH_WriteBuffer+0x64>

		eth_buffer[eth_wpointer] = Buffer[i];
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	4413      	add	r3, r2
 80020be:	4a14      	ldr	r2, [pc, #80]	; (8002110 <ETH_WriteBuffer+0x74>)
 80020c0:	8812      	ldrh	r2, [r2, #0]
 80020c2:	7819      	ldrb	r1, [r3, #0]
 80020c4:	4b13      	ldr	r3, [pc, #76]	; (8002114 <ETH_WriteBuffer+0x78>)
 80020c6:	5499      	strb	r1, [r3, r2]
		eth_bcounter++;
 80020c8:	4b10      	ldr	r3, [pc, #64]	; (800210c <ETH_WriteBuffer+0x70>)
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	3301      	adds	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	4b0e      	ldr	r3, [pc, #56]	; (800210c <ETH_WriteBuffer+0x70>)
 80020d2:	801a      	strh	r2, [r3, #0]
		eth_wpointer++;
 80020d4:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <ETH_WriteBuffer+0x74>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	3301      	adds	r3, #1
 80020da:	b29a      	uxth	r2, r3
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <ETH_WriteBuffer+0x74>)
 80020de:	801a      	strh	r2, [r3, #0]
		if(eth_wpointer > eth_buffer_size - 1) eth_wpointer = 0;
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <ETH_WriteBuffer+0x74>)
 80020e2:	881b      	ldrh	r3, [r3, #0]
 80020e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e8:	d302      	bcc.n	80020f0 <ETH_WriteBuffer+0x54>
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <ETH_WriteBuffer+0x74>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	801a      	strh	r2, [r3, #0]
	for(int i = 0;i<length;i++)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3301      	adds	r3, #1
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	dbd6      	blt.n	80020ac <ETH_WriteBuffer+0x10>
 80020fe:	e000      	b.n	8002102 <ETH_WriteBuffer+0x66>
		if(eth_bcounter >= (eth_buffer_size-1)) return;
 8002100:	bf00      	nop
	}
}
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	200006f8 	.word	0x200006f8
 8002110:	200006f4 	.word	0x200006f4
 8002114:	200002f4 	.word	0x200002f4

08002118 <ETH_ReadBuffer>:
/* @brief read data byty from FIFO
 *
 * @return one element uint8_t data 
 */
uint8_t ETH_ReadBuffer()
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
	uint8_t data = eth_buffer[eth_rpointer];
 800211e:	4b10      	ldr	r3, [pc, #64]	; (8002160 <ETH_ReadBuffer+0x48>)
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <ETH_ReadBuffer+0x4c>)
 8002126:	5c9b      	ldrb	r3, [r3, r2]
 8002128:	71fb      	strb	r3, [r7, #7]
	eth_bcounter--;
 800212a:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <ETH_ReadBuffer+0x50>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <ETH_ReadBuffer+0x50>)
 8002134:	801a      	strh	r2, [r3, #0]
	eth_rpointer++;
 8002136:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <ETH_ReadBuffer+0x48>)
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	3301      	adds	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	4b08      	ldr	r3, [pc, #32]	; (8002160 <ETH_ReadBuffer+0x48>)
 8002140:	801a      	strh	r2, [r3, #0]
	if(eth_rpointer > eth_buffer_size - 1) eth_rpointer = 0;
 8002142:	4b07      	ldr	r3, [pc, #28]	; (8002160 <ETH_ReadBuffer+0x48>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800214a:	d302      	bcc.n	8002152 <ETH_ReadBuffer+0x3a>
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <ETH_ReadBuffer+0x48>)
 800214e:	2200      	movs	r2, #0
 8002150:	801a      	strh	r2, [r3, #0]

	return data;
 8002152:	79fb      	ldrb	r3, [r7, #7]
}
 8002154:	4618      	mov	r0, r3
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	200006f6 	.word	0x200006f6
 8002164:	200002f4 	.word	0x200002f4
 8002168:	200006f8 	.word	0x200006f8

0800216c <ETH_Send>:
 * @param data -> pointer on data buffer with message
 * @param size -> lenght of data buffer
 *
 */
void ETH_Send(char *data, uint16_t size)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	807b      	strh	r3, [r7, #2]
	ETH_udp_Transmit((uint8_t *)data,size);
 8002178:	887b      	ldrh	r3, [r7, #2]
 800217a:	4619      	mov	r1, r3
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f001 fbd9 	bl	8003934 <ETH_udp_Transmit>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <GetCoef_k>:

};


float GetCoef_k(int channel)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
	float *addr = ((float *)&MainParams.sramOffset_ReadCoef_k_0) + channel;//  + (4 * channel);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4a06      	ldr	r2, [pc, #24]	; (80021b4 <GetCoef_k+0x28>)
 800219a:	4413      	add	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
	return *addr;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	ee07 3a90 	vmov	s15, r3
}
 80021a6:	eeb0 0a67 	vmov.f32	s0, s15
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	20000810 	.word	0x20000810

080021b8 <GetCoef_q>:


float GetCoef_q(int channel)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
	float *addr =((float *)&MainParams.sramOffset_ReadCoef_q_0) + channel;//  + (4 * channel);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4a06      	ldr	r2, [pc, #24]	; (80021e0 <GetCoef_q+0x28>)
 80021c6:	4413      	add	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
	return *addr;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	ee07 3a90 	vmov	s15, r3
}
 80021d2:	eeb0 0a67 	vmov.f32	s0, s15
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	20000828 	.word	0x20000828

080021e4 <StoreADCConstant>:
 * @param value -> value of coefficient
 *
 *
 */
void StoreADCConstant(uint8_t coef, float value)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	ed87 0a00 	vstr	s0, [r7]
 80021f0:	71fb      	strb	r3, [r7, #7]
	float *addr = ((float *)&MainParams.sramOffset_ReadCoef_k_0) + coef;//  + (4 * channel);
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4a06      	ldr	r2, [pc, #24]	; (8002210 <StoreADCConstant+0x2c>)
 80021f8:	4413      	add	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]
	*addr = value;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	601a      	str	r2, [r3, #0]
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000810 	.word	0x20000810

08002214 <SendADCCoefficients>:
/* @brief send ADC coefficients to communication
 *
 *
 */
void SendADCCoefficients()
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
	for(int i = 0;i<12;i++)
 800221a:	2300      	movs	r3, #0
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	e010      	b.n	8002242 <SendADCCoefficients+0x2e>
	{
		SendCommunication_float(cmd_adc_get_k0 + i,GetCoef_k(i));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	332d      	adds	r3, #45	; 0x2d
 8002226:	b2dc      	uxtb	r4, r3
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ffaf 	bl	800218c <GetCoef_k>
 800222e:	eef0 7a40 	vmov.f32	s15, s0
 8002232:	eeb0 0a67 	vmov.f32	s0, s15
 8002236:	4620      	mov	r0, r4
 8002238:	f7ff fcfe 	bl	8001c38 <SendCommunication_float>
	for(int i = 0;i<12;i++)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3301      	adds	r3, #1
 8002240:	607b      	str	r3, [r7, #4]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b0b      	cmp	r3, #11
 8002246:	ddeb      	ble.n	8002220 <SendADCCoefficients+0xc>
	}
}
 8002248:	bf00      	nop
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	bd90      	pop	{r4, r7, pc}

08002252 <CalcAvg>:
 *
 * @return average of array
 *
 */
uint16_t CalcAvg(uint16_t *array, uint16_t length)
{
 8002252:	b480      	push	{r7}
 8002254:	b085      	sub	sp, #20
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
 800225a:	460b      	mov	r3, r1
 800225c:	807b      	strh	r3, [r7, #2]
	uint32_t AVG = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i<length ; i++)
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	e00b      	b.n	8002280 <CalcAvg+0x2e>
	{
		AVG += array[i];
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4413      	add	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<length ; i++)
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	3301      	adds	r3, #1
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	887b      	ldrh	r3, [r7, #2]
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	429a      	cmp	r2, r3
 8002286:	dbef      	blt.n	8002268 <CalcAvg+0x16>
	}

	return (AVG/length);
 8002288:	887b      	ldrh	r3, [r7, #2]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002290:	b29b      	uxth	r3, r3
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <CalcAdcValue>:
 * @param value -> ADC data
 *
 * @return voltage or current (float)
 */
float CalcAdcValue(uint8_t channel,uint16_t value)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	460a      	mov	r2, r1
 80022aa:	71fb      	strb	r3, [r7, #7]
 80022ac:	4613      	mov	r3, r2
 80022ae:	80bb      	strh	r3, [r7, #4]
	float f = (float)value/ADC_coef;
 80022b0:	88bb      	ldrh	r3, [r7, #4]
 80022b2:	ee07 3a90 	vmov	s15, r3
 80022b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ba:	ee17 0a90 	vmov	r0, s15
 80022be:	f7fe f94b 	bl	8000558 <__aeabi_f2d>
 80022c2:	a317      	add	r3, pc, #92	; (adr r3, 8002320 <CalcAdcValue+0x80>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	f7fe fac8 	bl	800085c <__aeabi_ddiv>
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4610      	mov	r0, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	f7fe fc90 	bl	8000bf8 <__aeabi_d2f>
 80022d8:	4603      	mov	r3, r0
 80022da:	617b      	str	r3, [r7, #20]

	float Coef_k = GetCoef_k(channel);
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff ff54 	bl	800218c <GetCoef_k>
 80022e4:	ed87 0a04 	vstr	s0, [r7, #16]
	float Coef_q = GetCoef_q(channel);
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff64 	bl	80021b8 <GetCoef_q>
 80022f0:	ed87 0a03 	vstr	s0, [r7, #12]


	f = (f - Coef_q) / Coef_k;
 80022f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80022f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80022fc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002300:	ed97 7a04 	vldr	s14, [r7, #16]
 8002304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002308:	edc7 7a05 	vstr	s15, [r7, #20]

	return f;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	ee07 3a90 	vmov	s15, r3
}
 8002312:	eeb0 0a67 	vmov.f32	s0, s15
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	f3af 8000 	nop.w
 8002320:	7b0b3919 	.word	0x7b0b3919
 8002324:	4093665a 	.word	0x4093665a

08002328 <ReadADCChannels>:
 *
 *	data save to Read_Data
 *
 */
void ReadADCChannels()
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002334:	4809      	ldr	r0, [pc, #36]	; (800235c <ReadADCChannels+0x34>)
 8002336:	f003 fbd7 	bl	8005ae8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, Adresses, Read_Data, 8,2);
 800233a:	2302      	movs	r3, #2
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	2308      	movs	r3, #8
 8002340:	4a07      	ldr	r2, [pc, #28]	; (8002360 <ReadADCChannels+0x38>)
 8002342:	4908      	ldr	r1, [pc, #32]	; (8002364 <ReadADCChannels+0x3c>)
 8002344:	4808      	ldr	r0, [pc, #32]	; (8002368 <ReadADCChannels+0x40>)
 8002346:	f004 fc75 	bl	8006c34 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800234a:	2201      	movs	r2, #1
 800234c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002350:	4802      	ldr	r0, [pc, #8]	; (800235c <ReadADCChannels+0x34>)
 8002352:	f003 fbc9 	bl	8005ae8 <HAL_GPIO_WritePin>
}
 8002356:	bf00      	nop
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40020400 	.word	0x40020400
 8002360:	20000750 	.word	0x20000750
 8002364:	20000054 	.word	0x20000054
 8002368:	20000dcc 	.word	0x20000dcc

0800236c <ADCStore>:
 *
 *	processed data (measurement average) are saved on selected addresses in p_ADC_data array
 *
 */
void ADCStore()
{
 800236c:	b590      	push	{r4, r7, lr}
 800236e:	b089      	sub	sp, #36	; 0x24
 8002370:	af00      	add	r7, sp, #0
	//save data from ADC data read buffer
	for(int i = 0;i<8;i++)
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	e01d      	b.n	80023b4 <ADCStore+0x48>
	{
		meas_data[i][meas_counter] = 0 | Read_Data[2*i] | (Read_Data[(2*i)+1] << 8);
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4a33      	ldr	r2, [pc, #204]	; (800244c <ADCStore+0xe0>)
 800237e:	5cd3      	ldrb	r3, [r2, r3]
 8002380:	b21a      	sxth	r2, r3
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	3301      	adds	r3, #1
 8002388:	4930      	ldr	r1, [pc, #192]	; (800244c <ADCStore+0xe0>)
 800238a:	5ccb      	ldrb	r3, [r1, r3]
 800238c:	021b      	lsls	r3, r3, #8
 800238e:	b21b      	sxth	r3, r3
 8002390:	4313      	orrs	r3, r2
 8002392:	b21a      	sxth	r2, r3
 8002394:	4b2e      	ldr	r3, [pc, #184]	; (8002450 <ADCStore+0xe4>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	461c      	mov	r4, r3
 800239a:	b290      	uxth	r0, r2
 800239c:	492d      	ldr	r1, [pc, #180]	; (8002454 <ADCStore+0xe8>)
 800239e:	69fa      	ldr	r2, [r7, #28]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	4423      	add	r3, r4
 80023a8:	4602      	mov	r2, r0
 80023aa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(int i = 0;i<8;i++)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3301      	adds	r3, #1
 80023b2:	61fb      	str	r3, [r7, #28]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	2b07      	cmp	r3, #7
 80023b8:	ddde      	ble.n	8002378 <ADCStore+0xc>
	}

	meas_counter++;
 80023ba:	4b25      	ldr	r3, [pc, #148]	; (8002450 <ADCStore+0xe4>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	3301      	adds	r3, #1
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4b23      	ldr	r3, [pc, #140]	; (8002450 <ADCStore+0xe4>)
 80023c4:	701a      	strb	r2, [r3, #0]

	//all buffers full - calculate average and store on selected addresses
	if(meas_counter > (meas_size - 1))
 80023c6:	4b22      	ldr	r3, [pc, #136]	; (8002450 <ADCStore+0xe4>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d93a      	bls.n	8002444 <ADCStore+0xd8>
	{
		meas_counter = 0;
 80023ce:	4b20      	ldr	r3, [pc, #128]	; (8002450 <ADCStore+0xe4>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]

		uint16_t avg[8];
		for(int i = 0; i < 8 ;i++)
 80023d4:	2300      	movs	r3, #0
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	e015      	b.n	8002406 <ADCStore+0x9a>
		{
			avg[i] = CalcAvg(meas_data[i], meas_size); //calculate average
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	4a1b      	ldr	r2, [pc, #108]	; (8002454 <ADCStore+0xe8>)
 80023e6:	4413      	add	r3, r2
 80023e8:	2105      	movs	r1, #5
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff ff31 	bl	8002252 <CalcAvg>
 80023f0:	4603      	mov	r3, r0
 80023f2:	461a      	mov	r2, r3
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	3320      	adds	r3, #32
 80023fa:	443b      	add	r3, r7
 80023fc:	f823 2c1c 	strh.w	r2, [r3, #-28]
		for(int i = 0; i < 8 ;i++)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	3301      	adds	r3, #1
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	2b07      	cmp	r3, #7
 800240a:	dde6      	ble.n	80023da <ADCStore+0x6e>
		}

		for(int i = 0; i<6;i++)
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	e015      	b.n	800243e <ADCStore+0xd2>
		{
			*p_ADC_data[i] = CalcAdcValue(i,avg[i]); //calculate value(voltage or current and saved on selected addresses)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	b2da      	uxtb	r2, r3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	3320      	adds	r3, #32
 800241c:	443b      	add	r3, r7
 800241e:	f833 1c1c 	ldrh.w	r1, [r3, #-28]
 8002422:	480d      	ldr	r0, [pc, #52]	; (8002458 <ADCStore+0xec>)
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 800242a:	4610      	mov	r0, r2
 800242c:	f7ff ff38 	bl	80022a0 <CalcAdcValue>
 8002430:	eef0 7a40 	vmov.f32	s15, s0
 8002434:	edc4 7a00 	vstr	s15, [r4]
		for(int i = 0; i<6;i++)
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	3301      	adds	r3, #1
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2b05      	cmp	r3, #5
 8002442:	dde6      	ble.n	8002412 <ADCStore+0xa6>
		}

	}
}
 8002444:	bf00      	nop
 8002446:	3724      	adds	r7, #36	; 0x24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd90      	pop	{r4, r7, pc}
 800244c:	20000750 	.word	0x20000750
 8002450:	2000074c 	.word	0x2000074c
 8002454:	200006fc 	.word	0x200006fc
 8002458:	20000760 	.word	0x20000760

0800245c <LedSwitch>:

/* @brief switch red led on nucleo board
 *
 */
void LedSwitch(int value)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, value);
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <Enable_GPIO>:
 * @param channel -> channel of power supply
 * @param value   -> enable-true, disable-false
 *
 */
void Enable_GPIO(uint8_t channel, bool value)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	460a      	mov	r2, r1
 800247a:	71fb      	strb	r3, [r7, #7]
 800247c:	4613      	mov	r3, r2
 800247e:	71bb      	strb	r3, [r7, #6]
	switch(channel)
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d015      	beq.n	80024b2 <Enable_GPIO+0x42>
 8002486:	2b02      	cmp	r3, #2
 8002488:	dc1b      	bgt.n	80024c2 <Enable_GPIO+0x52>
 800248a:	2b00      	cmp	r3, #0
 800248c:	d002      	beq.n	8002494 <Enable_GPIO+0x24>
 800248e:	2b01      	cmp	r3, #1
 8002490:	d007      	beq.n	80024a2 <Enable_GPIO+0x32>
		case 2:
			HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, value);
			break;

		default:
			break;
 8002492:	e016      	b.n	80024c2 <Enable_GPIO+0x52>
			HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, value);
 8002494:	79bb      	ldrb	r3, [r7, #6]
 8002496:	461a      	mov	r2, r3
 8002498:	2108      	movs	r1, #8
 800249a:	480c      	ldr	r0, [pc, #48]	; (80024cc <Enable_GPIO+0x5c>)
 800249c:	f003 fb24 	bl	8005ae8 <HAL_GPIO_WritePin>
			break;
 80024a0:	e010      	b.n	80024c4 <Enable_GPIO+0x54>
			HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, value);
 80024a2:	79bb      	ldrb	r3, [r7, #6]
 80024a4:	461a      	mov	r2, r3
 80024a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024aa:	4809      	ldr	r0, [pc, #36]	; (80024d0 <Enable_GPIO+0x60>)
 80024ac:	f003 fb1c 	bl	8005ae8 <HAL_GPIO_WritePin>
			break;
 80024b0:	e008      	b.n	80024c4 <Enable_GPIO+0x54>
			HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, value);
 80024b2:	79bb      	ldrb	r3, [r7, #6]
 80024b4:	461a      	mov	r2, r3
 80024b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024ba:	4805      	ldr	r0, [pc, #20]	; (80024d0 <Enable_GPIO+0x60>)
 80024bc:	f003 fb14 	bl	8005ae8 <HAL_GPIO_WritePin>
			break;
 80024c0:	e000      	b.n	80024c4 <Enable_GPIO+0x54>
			break;
 80024c2:	bf00      	nop

	}
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40020800 	.word	0x40020800
 80024d0:	40020400 	.word	0x40020400

080024d4 <Output_GPIO>:
 * @param relay_p   -> relay for positive polarity (direct relay)
 * @param relay_n   -> relay for negative polarity (reverse relay)
 *
 */
void Output_GPIO(uint8_t channel, bool relay_p, bool relay_n)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
 80024de:	460b      	mov	r3, r1
 80024e0:	71bb      	strb	r3, [r7, #6]
 80024e2:	4613      	mov	r3, r2
 80024e4:	717b      	strb	r3, [r7, #5]
	if(relay_p && relay_n) return;
 80024e6:	79bb      	ldrb	r3, [r7, #6]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <Output_GPIO+0x1e>
 80024ec:	797b      	ldrb	r3, [r7, #5]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d133      	bne.n	800255a <Output_GPIO+0x86>

	switch(channel)
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d022      	beq.n	800253e <Output_GPIO+0x6a>
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	dc30      	bgt.n	800255e <Output_GPIO+0x8a>
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <Output_GPIO+0x32>
 8002500:	2b01      	cmp	r3, #1
 8002502:	d00e      	beq.n	8002522 <Output_GPIO+0x4e>
			HAL_GPIO_WritePin(SWDIR_3_GPIO_Port, SWDIR_3_Pin, relay_p);
			HAL_GPIO_WritePin(SWREV_3_GPIO_Port, SWREV_3_Pin, relay_n);
			break;

		default:
			break;
 8002504:	e02b      	b.n	800255e <Output_GPIO+0x8a>
			HAL_GPIO_WritePin(SWDIR_1_GPIO_Port, SWDIR_1_Pin, relay_p);
 8002506:	79bb      	ldrb	r3, [r7, #6]
 8002508:	461a      	mov	r2, r3
 800250a:	2104      	movs	r1, #4
 800250c:	4816      	ldr	r0, [pc, #88]	; (8002568 <Output_GPIO+0x94>)
 800250e:	f003 faeb 	bl	8005ae8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SWREV_1_GPIO_Port, SWREV_1_Pin, relay_n);
 8002512:	797b      	ldrb	r3, [r7, #5]
 8002514:	461a      	mov	r2, r3
 8002516:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800251a:	4813      	ldr	r0, [pc, #76]	; (8002568 <Output_GPIO+0x94>)
 800251c:	f003 fae4 	bl	8005ae8 <HAL_GPIO_WritePin>
			break;
 8002520:	e01e      	b.n	8002560 <Output_GPIO+0x8c>
			HAL_GPIO_WritePin(SWDIR_2_GPIO_Port, SWDIR_2_Pin, relay_p);
 8002522:	79bb      	ldrb	r3, [r7, #6]
 8002524:	461a      	mov	r2, r3
 8002526:	2102      	movs	r1, #2
 8002528:	480f      	ldr	r0, [pc, #60]	; (8002568 <Output_GPIO+0x94>)
 800252a:	f003 fadd 	bl	8005ae8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SWREV_2_GPIO_Port, SWREV_2_Pin, relay_n);
 800252e:	797b      	ldrb	r3, [r7, #5]
 8002530:	461a      	mov	r2, r3
 8002532:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002536:	480c      	ldr	r0, [pc, #48]	; (8002568 <Output_GPIO+0x94>)
 8002538:	f003 fad6 	bl	8005ae8 <HAL_GPIO_WritePin>
			break;
 800253c:	e010      	b.n	8002560 <Output_GPIO+0x8c>
			HAL_GPIO_WritePin(SWDIR_3_GPIO_Port, SWDIR_3_Pin, relay_p);
 800253e:	79bb      	ldrb	r3, [r7, #6]
 8002540:	461a      	mov	r2, r3
 8002542:	2101      	movs	r1, #1
 8002544:	4808      	ldr	r0, [pc, #32]	; (8002568 <Output_GPIO+0x94>)
 8002546:	f003 facf 	bl	8005ae8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SWREV_3_GPIO_Port, SWREV_3_Pin, relay_n);
 800254a:	797b      	ldrb	r3, [r7, #5]
 800254c:	461a      	mov	r2, r3
 800254e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002552:	4805      	ldr	r0, [pc, #20]	; (8002568 <Output_GPIO+0x94>)
 8002554:	f003 fac8 	bl	8005ae8 <HAL_GPIO_WritePin>
			break;
 8002558:	e002      	b.n	8002560 <Output_GPIO+0x8c>
	if(relay_p && relay_n) return;
 800255a:	bf00      	nop
 800255c:	e000      	b.n	8002560 <Output_GPIO+0x8c>
			break;
 800255e:	bf00      	nop

	}
}
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40020800 	.word	0x40020800

0800256c <GetDacCoef_k>:

bool _ControlOutputWithChannelEnable;


float GetDacCoef_k(int channel)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	float *addr = ((float *)&MainParams.sramOffset_AdjCoef_k_ch0) + channel;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4a06      	ldr	r2, [pc, #24]	; (8002594 <GetDacCoef_k+0x28>)
 800257a:	4413      	add	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
	return *addr;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	ee07 3a90 	vmov	s15, r3
}
 8002586:	eeb0 0a67 	vmov.f32	s0, s15
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	20000840 	.word	0x20000840

08002598 <GetDacCoef_q>:


float GetDacCoef_q(int channel)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
	float *addr = ((float *)&MainParams.sramOffset_AdjCoef_q_ch0) + channel;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4a06      	ldr	r2, [pc, #24]	; (80025c0 <GetDacCoef_q+0x28>)
 80025a6:	4413      	add	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
	return *addr;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	ee07 3a90 	vmov	s15, r3
}
 80025b2:	eeb0 0a67 	vmov.f32	s0, s15
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	2000084c 	.word	0x2000084c

080025c4 <StoreDACConstant>:
 * @param value -> value of coefficient
 *
 *
 */
void StoreDACConstant(uint8_t coef, float value)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	ed87 0a00 	vstr	s0, [r7]
 80025d0:	71fb      	strb	r3, [r7, #7]
	float *addr = ((float *)&MainParams.sramOffset_AdjCoef_k_ch0) + coef;//  + (4 * channel);
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4a06      	ldr	r2, [pc, #24]	; (80025f0 <StoreDACConstant+0x2c>)
 80025d8:	4413      	add	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
	*addr = value;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	601a      	str	r2, [r3, #0]
}
 80025e2:	bf00      	nop
 80025e4:	3714      	adds	r7, #20
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000840 	.word	0x20000840

080025f4 <SendDACCoefficients>:
/* @brief send DAC coefficients to communication
 *
 *
 */
void SendDACCoefficients()
{
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
	for(int i = 0;i<6;i++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	607b      	str	r3, [r7, #4]
 80025fe:	e010      	b.n	8002622 <SendDACCoefficients+0x2e>
	{
		SendCommunication_float(cmd_dac_get_k0 + i, GetDacCoef_k(i));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	333f      	adds	r3, #63	; 0x3f
 8002606:	b2dc      	uxtb	r4, r3
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff ffaf 	bl	800256c <GetDacCoef_k>
 800260e:	eef0 7a40 	vmov.f32	s15, s0
 8002612:	eeb0 0a67 	vmov.f32	s0, s15
 8002616:	4620      	mov	r0, r4
 8002618:	f7ff fb0e 	bl	8001c38 <SendCommunication_float>
	for(int i = 0;i<6;i++)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3301      	adds	r3, #1
 8002620:	607b      	str	r3, [r7, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b05      	cmp	r3, #5
 8002626:	ddeb      	ble.n	8002600 <SendDACCoefficients+0xc>
	}

}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	bd90      	pop	{r4, r7, pc}
 8002632:	0000      	movs	r0, r0
 8002634:	0000      	movs	r0, r0
	...

08002638 <Get_PreRegulatorVoltage>:
 * @param voltage -> request voltage on power supply output
 *
 * @return uint16_t value of voltage for pre regulator
 */
uint16_t Get_PreRegulatorVoltage(uint16_t voltage)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	80fb      	strh	r3, [r7, #6]
	return (0.15789 * (float)voltage) + 21.05263;
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	ee07 3a90 	vmov	s15, r3
 8002648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800264c:	ee17 0a90 	vmov	r0, s15
 8002650:	f7fd ff82 	bl	8000558 <__aeabi_f2d>
 8002654:	a30c      	add	r3, pc, #48	; (adr r3, 8002688 <Get_PreRegulatorVoltage+0x50>)
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	f7fd ffd5 	bl	8000608 <__aeabi_dmul>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4610      	mov	r0, r2
 8002664:	4619      	mov	r1, r3
 8002666:	a30a      	add	r3, pc, #40	; (adr r3, 8002690 <Get_PreRegulatorVoltage+0x58>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f7fd fe16 	bl	800029c <__adddf3>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f7fe fa9e 	bl	8000bb8 <__aeabi_d2uiz>
 800267c:	4603      	mov	r3, r0
 800267e:	b29b      	uxth	r3, r3
}
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	512ec6bd 	.word	0x512ec6bd
 800268c:	3fc435bd 	.word	0x3fc435bd
 8002690:	28e0c9da 	.word	0x28e0c9da
 8002694:	40350d79 	.word	0x40350d79

08002698 <Get_DACValue>:

//Calculate DAC register value from recomended voltage
uint16_t Get_DACValue(int dac_channel, uint16_t value)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	807b      	strh	r3, [r7, #2]
	uint16_t code;

	if(dac_channel == 0 || dac_channel == 1 || dac_channel == 2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d005      	beq.n	80026b6 <Get_DACValue+0x1e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d002      	beq.n	80026b6 <Get_DACValue+0x1e>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d12a      	bne.n	800270c <Get_DACValue+0x74>
	{
		code = (uint16_t)(((PreReg_Coef_q - (float)value) / PreReg_Coef_k) * (float)DAC_coef);
 80026b6:	887b      	ldrh	r3, [r7, #2]
 80026b8:	ee07 3a90 	vmov	s15, r3
 80026bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026c0:	ee17 0a90 	vmov	r0, s15
 80026c4:	f7fd ff48 	bl	8000558 <__aeabi_f2d>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	a125      	add	r1, pc, #148	; (adr r1, 8002764 <Get_DACValue+0xcc>)
 80026ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026d2:	f7fd fde1 	bl	8000298 <__aeabi_dsub>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4610      	mov	r0, r2
 80026dc:	4619      	mov	r1, r3
 80026de:	a323      	add	r3, pc, #140	; (adr r3, 800276c <Get_DACValue+0xd4>)
 80026e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e4:	f7fe f8ba 	bl	800085c <__aeabi_ddiv>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4610      	mov	r0, r2
 80026ee:	4619      	mov	r1, r3
 80026f0:	a320      	add	r3, pc, #128	; (adr r3, 8002774 <Get_DACValue+0xdc>)
 80026f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f6:	f7fd ff87 	bl	8000608 <__aeabi_dmul>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4610      	mov	r0, r2
 8002700:	4619      	mov	r1, r3
 8002702:	f7fe fa59 	bl	8000bb8 <__aeabi_d2uiz>
 8002706:	4603      	mov	r3, r0
 8002708:	82fb      	strh	r3, [r7, #22]
 800270a:	e023      	b.n	8002754 <Get_DACValue+0xbc>
	}
	else
	{
		float coef_k = GetDacCoef_k(dac_channel - 3);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3b03      	subs	r3, #3
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ff2b 	bl	800256c <GetDacCoef_k>
 8002716:	ed87 0a04 	vstr	s0, [r7, #16]
		float coef_q = GetDacCoef_q(dac_channel - 3);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	3b03      	subs	r3, #3
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff ff3a 	bl	8002598 <GetDacCoef_q>
 8002724:	ed87 0a03 	vstr	s0, [r7, #12]

		code = (uint16_t)(((coef_q - (float)value) / coef_k) * (float)DAC_coef);
 8002728:	887b      	ldrh	r3, [r7, #2]
 800272a:	ee07 3a90 	vmov	s15, r3
 800272e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002732:	ed97 7a03 	vldr	s14, [r7, #12]
 8002736:	ee77 6a67 	vsub.f32	s13, s14, s15
 800273a:	ed97 7a04 	vldr	s14, [r7, #16]
 800273e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002742:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002760 <Get_DACValue+0xc8>
 8002746:	ee67 7a87 	vmul.f32	s15, s15, s14
 800274a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800274e:	ee17 3a90 	vmov	r3, s15
 8002752:	82fb      	strh	r3, [r7, #22]
	}


	return code;
 8002754:	8afb      	ldrh	r3, [r7, #22]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	454ccccd 	.word	0x454ccccd
 8002764:	3dee7818 	.word	0x3dee7818
 8002768:	405ff4dc 	.word	0x405ff4dc
 800276c:	c39af4e3 	.word	0xc39af4e3
 8002770:	405537da 	.word	0x405537da
 8002774:	a0000000 	.word	0xa0000000
 8002778:	40a99999 	.word	0x40a99999

0800277c <Set_PreReg_Voltage>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param voltage -> request voltage on regulator output
 * 
 */
void Set_PreReg_Voltage(uint8_t channel, uint16_t voltage)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	460a      	mov	r2, r1
 8002786:	71fb      	strb	r3, [r7, #7]
 8002788:	4613      	mov	r3, r2
 800278a:	80bb      	strh	r3, [r7, #4]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d005      	beq.n	800279e <Set_PreReg_Voltage+0x22>
 8002792:	79fb      	ldrb	r3, [r7, #7]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d002      	beq.n	800279e <Set_PreReg_Voltage+0x22>
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d116      	bne.n	80027cc <Set_PreReg_Voltage+0x50>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 800279e:	88bb      	ldrh	r3, [r7, #4]
 80027a0:	2b18      	cmp	r3, #24
 80027a2:	d804      	bhi.n	80027ae <Set_PreReg_Voltage+0x32>
 80027a4:	88bb      	ldrh	r3, [r7, #4]
 80027a6:	f240 2226 	movw	r2, #550	; 0x226
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d810      	bhi.n	80027d0 <Set_PreReg_Voltage+0x54>

	uint16_t value = Get_DACValue(channel, voltage);
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	88ba      	ldrh	r2, [r7, #4]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff6f 	bl	8002698 <Get_DACValue>
 80027ba:	4603      	mov	r3, r0
 80027bc:	81fb      	strh	r3, [r7, #14]
	SendValueToDAC(channel,value);
 80027be:	89fa      	ldrh	r2, [r7, #14]
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	4611      	mov	r1, r2
 80027c4:	4618      	mov	r0, r3
 80027c6:	f000 fea5 	bl	8003514 <SendValueToDAC>
 80027ca:	e002      	b.n	80027d2 <Set_PreReg_Voltage+0x56>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 80027cc:	bf00      	nop
 80027ce:	e000      	b.n	80027d2 <Set_PreReg_Voltage+0x56>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 80027d0:	bf00      	nop
}
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <Set_OutReg_Voltage>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param voltage -> request voltage on regulator output
 * 
 */
void Set_OutReg_Voltage(uint8_t channel, uint16_t voltage)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	460a      	mov	r2, r1
 80027e2:	71fb      	strb	r3, [r7, #7]
 80027e4:	4613      	mov	r3, r2
 80027e6:	80bb      	strh	r3, [r7, #4]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d005      	beq.n	80027fa <Set_OutReg_Voltage+0x22>
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d002      	beq.n	80027fa <Set_OutReg_Voltage+0x22>
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d119      	bne.n	800282e <Set_OutReg_Voltage+0x56>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 80027fa:	88bb      	ldrh	r3, [r7, #4]
 80027fc:	2b18      	cmp	r3, #24
 80027fe:	d804      	bhi.n	800280a <Set_OutReg_Voltage+0x32>
 8002800:	88bb      	ldrh	r3, [r7, #4]
 8002802:	f240 2226 	movw	r2, #550	; 0x226
 8002806:	4293      	cmp	r3, r2
 8002808:	d813      	bhi.n	8002832 <Set_OutReg_Voltage+0x5a>

	uint16_t value = Get_DACValue(channel + 3, voltage);
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	3303      	adds	r3, #3
 800280e:	88ba      	ldrh	r2, [r7, #4]
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff40 	bl	8002698 <Get_DACValue>
 8002818:	4603      	mov	r3, r0
 800281a:	81fb      	strh	r3, [r7, #14]
	SendValueToDAC(channel + 3, value);
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	3303      	adds	r3, #3
 8002820:	b2db      	uxtb	r3, r3
 8002822:	89fa      	ldrh	r2, [r7, #14]
 8002824:	4611      	mov	r1, r2
 8002826:	4618      	mov	r0, r3
 8002828:	f000 fe74 	bl	8003514 <SendValueToDAC>
 800282c:	e002      	b.n	8002834 <Set_OutReg_Voltage+0x5c>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 800282e:	bf00      	nop
 8002830:	e000      	b.n	8002834 <Set_OutReg_Voltage+0x5c>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 8002832:	bf00      	nop
}
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <Set_Voltage>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param voltage -> request voltage on output of power supply channel
 * 
 */
void Set_Voltage(uint8_t channel, uint16_t voltage)
{
 800283c:	b590      	push	{r4, r7, lr}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	4603      	mov	r3, r0
 8002844:	460a      	mov	r2, r1
 8002846:	71fb      	strb	r3, [r7, #7]
 8002848:	4613      	mov	r3, r2
 800284a:	80bb      	strh	r3, [r7, #4]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d006      	beq.n	8002860 <Set_Voltage+0x24>
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d003      	beq.n	8002860 <Set_Voltage+0x24>
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	2b02      	cmp	r3, #2
 800285c:	f040 80b6 	bne.w	80029cc <Set_Voltage+0x190>
	if((voltage < minimum_voltage) || (voltage > maximum_voltage)) return;
 8002860:	88bb      	ldrh	r3, [r7, #4]
 8002862:	2b18      	cmp	r3, #24
 8002864:	f240 80b4 	bls.w	80029d0 <Set_Voltage+0x194>
 8002868:	88bb      	ldrh	r3, [r7, #4]
 800286a:	f240 2226 	movw	r2, #550	; 0x226
 800286e:	4293      	cmp	r3, r2
 8002870:	f200 80ae 	bhi.w	80029d0 <Set_Voltage+0x194>

	ChannelsChange[channel].request_voltage = voltage; //store request voltage
 8002874:	79fa      	ldrb	r2, [r7, #7]
 8002876:	4958      	ldr	r1, [pc, #352]	; (80029d8 <Set_Voltage+0x19c>)
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	3310      	adds	r3, #16
 8002884:	88ba      	ldrh	r2, [r7, #4]
 8002886:	801a      	strh	r2, [r3, #0]

	if(abs(voltage - ChannelsStatus[channel].set_voltage) > ramp_v_step) //voltage ramping if difference is bigger that voltage ramp step
 8002888:	88b9      	ldrh	r1, [r7, #4]
 800288a:	79fa      	ldrb	r2, [r7, #7]
 800288c:	4853      	ldr	r0, [pc, #332]	; (80029dc <Set_Voltage+0x1a0>)
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4403      	add	r3, r0
 8002898:	3302      	adds	r3, #2
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	1acb      	subs	r3, r1, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	bfb8      	it	lt
 80028a2:	425b      	neglt	r3, r3
 80028a4:	2b0a      	cmp	r3, #10
 80028a6:	dd75      	ble.n	8002994 <Set_Voltage+0x158>
	{
		//ChannelsChange[channel].request_voltage = voltage; //store request voltage

		//calculate new voltage
		if(ChannelsStatus[channel].set_voltage < ChannelsChange[channel].request_voltage)
 80028a8:	79fa      	ldrb	r2, [r7, #7]
 80028aa:	494c      	ldr	r1, [pc, #304]	; (80029dc <Set_Voltage+0x1a0>)
 80028ac:	4613      	mov	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	3302      	adds	r3, #2
 80028b8:	8819      	ldrh	r1, [r3, #0]
 80028ba:	79fa      	ldrb	r2, [r7, #7]
 80028bc:	4846      	ldr	r0, [pc, #280]	; (80029d8 <Set_Voltage+0x19c>)
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4403      	add	r3, r0
 80028c8:	3310      	adds	r3, #16
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	4299      	cmp	r1, r3
 80028ce:	d215      	bcs.n	80028fc <Set_Voltage+0xc0>
		{
			ChannelsStatus[channel].set_voltage += ramp_v_step;
 80028d0:	79fa      	ldrb	r2, [r7, #7]
 80028d2:	4942      	ldr	r1, [pc, #264]	; (80029dc <Set_Voltage+0x1a0>)
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	3302      	adds	r3, #2
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	79fa      	ldrb	r2, [r7, #7]
 80028e4:	330a      	adds	r3, #10
 80028e6:	b298      	uxth	r0, r3
 80028e8:	493c      	ldr	r1, [pc, #240]	; (80029dc <Set_Voltage+0x1a0>)
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	3302      	adds	r3, #2
 80028f6:	4602      	mov	r2, r0
 80028f8:	801a      	strh	r2, [r3, #0]
 80028fa:	e014      	b.n	8002926 <Set_Voltage+0xea>
		}
		else
		{
			ChannelsStatus[channel].set_voltage -= ramp_v_step;
 80028fc:	79fa      	ldrb	r2, [r7, #7]
 80028fe:	4937      	ldr	r1, [pc, #220]	; (80029dc <Set_Voltage+0x1a0>)
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	3302      	adds	r3, #2
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	79fa      	ldrb	r2, [r7, #7]
 8002910:	3b0a      	subs	r3, #10
 8002912:	b298      	uxth	r0, r3
 8002914:	4931      	ldr	r1, [pc, #196]	; (80029dc <Set_Voltage+0x1a0>)
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	3302      	adds	r3, #2
 8002922:	4602      	mov	r2, r0
 8002924:	801a      	strh	r2, [r3, #0]
		}

		//Set voltage
		Set_OutReg_Voltage(channel, ChannelsStatus[channel].set_voltage);
 8002926:	79fa      	ldrb	r2, [r7, #7]
 8002928:	492c      	ldr	r1, [pc, #176]	; (80029dc <Set_Voltage+0x1a0>)
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	3302      	adds	r3, #2
 8002936:	881a      	ldrh	r2, [r3, #0]
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	4611      	mov	r1, r2
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff4b 	bl	80027d8 <Set_OutReg_Voltage>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(ChannelsStatus[channel].set_voltage));
 8002942:	79fa      	ldrb	r2, [r7, #7]
 8002944:	4925      	ldr	r1, [pc, #148]	; (80029dc <Set_Voltage+0x1a0>)
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	3302      	adds	r3, #2
 8002952:	881b      	ldrh	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fe6f 	bl	8002638 <Get_PreRegulatorVoltage>
 800295a:	4603      	mov	r3, r0
 800295c:	461a      	mov	r2, r3
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	4611      	mov	r1, r2
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff ff0a 	bl	800277c <Set_PreReg_Voltage>

		//Enable and set ramping timer
		ChannelsChange[channel].voltage_ramp = true;
 8002968:	79fa      	ldrb	r2, [r7, #7]
 800296a:	491b      	ldr	r1, [pc, #108]	; (80029d8 <Set_Voltage+0x19c>)
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].voltage_ramp_timer = HAL_GetTick();
 800297a:	79fc      	ldrb	r4, [r7, #7]
 800297c:	f002 f894 	bl	8004aa8 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	4915      	ldr	r1, [pc, #84]	; (80029d8 <Set_Voltage+0x19c>)
 8002984:	4623      	mov	r3, r4
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4423      	add	r3, r4
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	3304      	adds	r3, #4
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	e01e      	b.n	80029d2 <Set_Voltage+0x196>
	}
	else //without voltage ramping if difference is smaller that voltage ramp step
	{
		//ChannelsChange[channel].request_voltage = voltage; //store request voltage
		ChannelsStatus[channel].set_voltage = voltage;
 8002994:	79fa      	ldrb	r2, [r7, #7]
 8002996:	4911      	ldr	r1, [pc, #68]	; (80029dc <Set_Voltage+0x1a0>)
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	3302      	adds	r3, #2
 80029a4:	88ba      	ldrh	r2, [r7, #4]
 80029a6:	801a      	strh	r2, [r3, #0]
		Set_OutReg_Voltage(channel, voltage);
 80029a8:	88ba      	ldrh	r2, [r7, #4]
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff ff12 	bl	80027d8 <Set_OutReg_Voltage>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(voltage));
 80029b4:	88bb      	ldrh	r3, [r7, #4]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff fe3e 	bl	8002638 <Get_PreRegulatorVoltage>
 80029bc:	4603      	mov	r3, r0
 80029be:	461a      	mov	r2, r3
 80029c0:	79fb      	ldrb	r3, [r7, #7]
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fed9 	bl	800277c <Set_PreReg_Voltage>
 80029ca:	e002      	b.n	80029d2 <Set_Voltage+0x196>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 80029cc:	bf00      	nop
 80029ce:	e000      	b.n	80029d2 <Set_Voltage+0x196>
	if((voltage < minimum_voltage) || (voltage > maximum_voltage)) return;
 80029d0:	bf00      	nop
	}

}
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd90      	pop	{r4, r7, pc}
 80029d8:	200007bc 	.word	0x200007bc
 80029dc:	20000780 	.word	0x20000780

080029e0 <Set_VoltageInEnable>:


void Set_VoltageInEnable(uint8_t channel)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 80029ea:	79fb      	ldrb	r3, [r7, #7]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <Set_VoltageInEnable+0x1c>
 80029f0:	79fb      	ldrb	r3, [r7, #7]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d002      	beq.n	80029fc <Set_VoltageInEnable+0x1c>
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d11d      	bne.n	8002a38 <Set_VoltageInEnable+0x58>

	uint16_t voltage = minimum_voltage;
 80029fc:	2319      	movs	r3, #25
 80029fe:	81fb      	strh	r3, [r7, #14]

	Set_OutReg_Voltage(channel, voltage);
 8002a00:	89fa      	ldrh	r2, [r7, #14]
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	4611      	mov	r1, r2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fee6 	bl	80027d8 <Set_OutReg_Voltage>
	Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(voltage));
 8002a0c:	89fb      	ldrh	r3, [r7, #14]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fe12 	bl	8002638 <Get_PreRegulatorVoltage>
 8002a14:	4603      	mov	r3, r0
 8002a16:	461a      	mov	r2, r3
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff fead 	bl	800277c <Set_PreReg_Voltage>

	ChannelsStatus[channel].set_voltage = voltage;
 8002a22:	79fa      	ldrb	r2, [r7, #7]
 8002a24:	4906      	ldr	r1, [pc, #24]	; (8002a40 <Set_VoltageInEnable+0x60>)
 8002a26:	4613      	mov	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	440b      	add	r3, r1
 8002a30:	3302      	adds	r3, #2
 8002a32:	89fa      	ldrh	r2, [r7, #14]
 8002a34:	801a      	strh	r2, [r3, #0]
 8002a36:	e000      	b.n	8002a3a <Set_VoltageInEnable+0x5a>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002a38:	bf00      	nop
}
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20000780 	.word	0x20000780

08002a44 <Set_Voltage_From_Ramping>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param voltage -> request voltage on output of power supply channel
 *
 */
void Set_Voltage_From_Ramping(uint8_t channel)
{
 8002a44:	b590      	push	{r4, r7, lr}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d006      	beq.n	8002a62 <Set_Voltage_From_Ramping+0x1e>
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d003      	beq.n	8002a62 <Set_Voltage_From_Ramping+0x1e>
 8002a5a:	79fb      	ldrb	r3, [r7, #7]
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	f040 80cd 	bne.w	8002bfc <Set_Voltage_From_Ramping+0x1b8>

	if(abs(ChannelsStatus[channel].set_voltage - ChannelsChange[channel].request_voltage) > ramp_v_step) //keep ramping
 8002a62:	79fa      	ldrb	r2, [r7, #7]
 8002a64:	4967      	ldr	r1, [pc, #412]	; (8002c04 <Set_Voltage_From_Ramping+0x1c0>)
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	3302      	adds	r3, #2
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	79fa      	ldrb	r2, [r7, #7]
 8002a78:	4963      	ldr	r1, [pc, #396]	; (8002c08 <Set_Voltage_From_Ramping+0x1c4>)
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	3310      	adds	r3, #16
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	1ac3      	subs	r3, r0, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bfb8      	it	lt
 8002a8e:	425b      	neglt	r3, r3
 8002a90:	2b0a      	cmp	r3, #10
 8002a92:	dd75      	ble.n	8002b80 <Set_Voltage_From_Ramping+0x13c>
	{

		//calculate new voltage
		if(ChannelsStatus[channel].set_voltage < ChannelsChange[channel].request_voltage)
 8002a94:	79fa      	ldrb	r2, [r7, #7]
 8002a96:	495b      	ldr	r1, [pc, #364]	; (8002c04 <Set_Voltage_From_Ramping+0x1c0>)
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	8819      	ldrh	r1, [r3, #0]
 8002aa6:	79fa      	ldrb	r2, [r7, #7]
 8002aa8:	4857      	ldr	r0, [pc, #348]	; (8002c08 <Set_Voltage_From_Ramping+0x1c4>)
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4403      	add	r3, r0
 8002ab4:	3310      	adds	r3, #16
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	4299      	cmp	r1, r3
 8002aba:	d215      	bcs.n	8002ae8 <Set_Voltage_From_Ramping+0xa4>
		{
			ChannelsStatus[channel].set_voltage += ramp_v_step;
 8002abc:	79fa      	ldrb	r2, [r7, #7]
 8002abe:	4951      	ldr	r1, [pc, #324]	; (8002c04 <Set_Voltage_From_Ramping+0x1c0>)
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	3302      	adds	r3, #2
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	79fa      	ldrb	r2, [r7, #7]
 8002ad0:	330a      	adds	r3, #10
 8002ad2:	b298      	uxth	r0, r3
 8002ad4:	494b      	ldr	r1, [pc, #300]	; (8002c04 <Set_Voltage_From_Ramping+0x1c0>)
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	3302      	adds	r3, #2
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	801a      	strh	r2, [r3, #0]
 8002ae6:	e014      	b.n	8002b12 <Set_Voltage_From_Ramping+0xce>
		}
		else
		{
			ChannelsStatus[channel].set_voltage -= ramp_v_step;
 8002ae8:	79fa      	ldrb	r2, [r7, #7]
 8002aea:	4946      	ldr	r1, [pc, #280]	; (8002c04 <Set_Voltage_From_Ramping+0x1c0>)
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	3302      	adds	r3, #2
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	79fa      	ldrb	r2, [r7, #7]
 8002afc:	3b0a      	subs	r3, #10
 8002afe:	b298      	uxth	r0, r3
 8002b00:	4940      	ldr	r1, [pc, #256]	; (8002c04 <Set_Voltage_From_Ramping+0x1c0>)
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	3302      	adds	r3, #2
 8002b0e:	4602      	mov	r2, r0
 8002b10:	801a      	strh	r2, [r3, #0]
		}

		//Set out voltage
		Set_OutReg_Voltage(channel, ChannelsStatus[channel].set_voltage);
 8002b12:	79fa      	ldrb	r2, [r7, #7]
 8002b14:	493b      	ldr	r1, [pc, #236]	; (8002c04 <Set_Voltage_From_Ramping+0x1c0>)
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	3302      	adds	r3, #2
 8002b22:	881a      	ldrh	r2, [r3, #0]
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fe55 	bl	80027d8 <Set_OutReg_Voltage>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(ChannelsStatus[channel].set_voltage));
 8002b2e:	79fa      	ldrb	r2, [r7, #7]
 8002b30:	4934      	ldr	r1, [pc, #208]	; (8002c04 <Set_Voltage_From_Ramping+0x1c0>)
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fd79 	bl	8002638 <Get_PreRegulatorVoltage>
 8002b46:	4603      	mov	r3, r0
 8002b48:	461a      	mov	r2, r3
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fe14 	bl	800277c <Set_PreReg_Voltage>

		//Reset ramping timer
		ChannelsChange[channel].voltage_ramp = true;
 8002b54:	79fa      	ldrb	r2, [r7, #7]
 8002b56:	492c      	ldr	r1, [pc, #176]	; (8002c08 <Set_Voltage_From_Ramping+0x1c4>)
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	2201      	movs	r2, #1
 8002b64:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].voltage_ramp_timer = HAL_GetTick();
 8002b66:	79fc      	ldrb	r4, [r7, #7]
 8002b68:	f001 ff9e 	bl	8004aa8 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	4926      	ldr	r1, [pc, #152]	; (8002c08 <Set_Voltage_From_Ramping+0x1c4>)
 8002b70:	4623      	mov	r3, r4
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4423      	add	r3, r4
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	e03e      	b.n	8002bfe <Set_Voltage_From_Ramping+0x1ba>
	}
	else
	{
		//Disable ramping timer
		ChannelsChange[channel].voltage_ramp = false;
 8002b80:	79fa      	ldrb	r2, [r7, #7]
 8002b82:	4921      	ldr	r1, [pc, #132]	; (8002c08 <Set_Voltage_From_Ramping+0x1c4>)
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]

		ChannelsStatus[channel].set_voltage = ChannelsChange[channel].request_voltage;
 8002b92:	79f9      	ldrb	r1, [r7, #7]
 8002b94:	79fa      	ldrb	r2, [r7, #7]
 8002b96:	481c      	ldr	r0, [pc, #112]	; (8002c08 <Set_Voltage_From_Ramping+0x1c4>)
 8002b98:	460b      	mov	r3, r1
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4403      	add	r3, r0
 8002ba2:	3310      	adds	r3, #16
 8002ba4:	8818      	ldrh	r0, [r3, #0]
 8002ba6:	4917      	ldr	r1, [pc, #92]	; (8002c04 <Set_Voltage_From_Ramping+0x1c0>)
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	3302      	adds	r3, #2
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	801a      	strh	r2, [r3, #0]

		Set_OutReg_Voltage(channel, ChannelsStatus[channel].set_voltage);
 8002bb8:	79fa      	ldrb	r2, [r7, #7]
 8002bba:	4912      	ldr	r1, [pc, #72]	; (8002c04 <Set_Voltage_From_Ramping+0x1c0>)
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	3302      	adds	r3, #2
 8002bc8:	881a      	ldrh	r2, [r3, #0]
 8002bca:	79fb      	ldrb	r3, [r7, #7]
 8002bcc:	4611      	mov	r1, r2
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fe02 	bl	80027d8 <Set_OutReg_Voltage>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(ChannelsStatus[channel].set_voltage));
 8002bd4:	79fa      	ldrb	r2, [r7, #7]
 8002bd6:	490b      	ldr	r1, [pc, #44]	; (8002c04 <Set_Voltage_From_Ramping+0x1c0>)
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	3302      	adds	r3, #2
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff fd26 	bl	8002638 <Get_PreRegulatorVoltage>
 8002bec:	4603      	mov	r3, r0
 8002bee:	461a      	mov	r2, r3
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fdc1 	bl	800277c <Set_PreReg_Voltage>
 8002bfa:	e000      	b.n	8002bfe <Set_Voltage_From_Ramping+0x1ba>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002bfc:	bf00      	nop
	}

}
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd90      	pop	{r4, r7, pc}
 8002c04:	20000780 	.word	0x20000780
 8002c08:	200007bc 	.word	0x200007bc

08002c0c <Channel_Enable>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param enable -> true - enable, false disble 
 * 
 */
void Channel_Enable(uint8_t channel, bool enable)
{
 8002c0c:	b590      	push	{r4, r7, lr}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	460a      	mov	r2, r1
 8002c16:	71fb      	strb	r3, [r7, #7]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	71bb      	strb	r3, [r7, #6]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d005      	beq.n	8002c2e <Channel_Enable+0x22>
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d002      	beq.n	8002c2e <Channel_Enable+0x22>
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d174      	bne.n	8002d18 <Channel_Enable+0x10c>
	if(enable == ChannelsStatus[channel].enable) return;
 8002c2e:	79fa      	ldrb	r2, [r7, #7]
 8002c30:	493c      	ldr	r1, [pc, #240]	; (8002d24 <Channel_Enable+0x118>)
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	79ba      	ldrb	r2, [r7, #6]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d06b      	beq.n	8002d1c <Channel_Enable+0x110>


	ChannelsChange[channel].voltageBeforeEnable = ChannelsChange[channel].request_voltage;
 8002c44:	79f9      	ldrb	r1, [r7, #7]
 8002c46:	79fa      	ldrb	r2, [r7, #7]
 8002c48:	4837      	ldr	r0, [pc, #220]	; (8002d28 <Channel_Enable+0x11c>)
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4403      	add	r3, r0
 8002c54:	3310      	adds	r3, #16
 8002c56:	8818      	ldrh	r0, [r3, #0]
 8002c58:	4933      	ldr	r1, [pc, #204]	; (8002d28 <Channel_Enable+0x11c>)
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	3312      	adds	r3, #18
 8002c66:	4602      	mov	r2, r0
 8002c68:	801a      	strh	r2, [r3, #0]


	if(enable)
 8002c6a:	79bb      	ldrb	r3, [r7, #6]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d028      	beq.n	8002cc2 <Channel_Enable+0xb6>
	{
		//Set_Voltage(channel, minimum_voltage);
		Set_VoltageInEnable(channel);
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff feb4 	bl	80029e0 <Set_VoltageInEnable>
		Enable_GPIO(channel, true);
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fbf7 	bl	8002470 <Enable_GPIO>
		ChannelsStatus[channel].enable = true;
 8002c82:	79fa      	ldrb	r2, [r7, #7]
 8002c84:	4927      	ldr	r1, [pc, #156]	; (8002d24 <Channel_Enable+0x118>)
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	2201      	movs	r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].enable_request = true;
 8002c94:	79fa      	ldrb	r2, [r7, #7]
 8002c96:	4924      	ldr	r1, [pc, #144]	; (8002d28 <Channel_Enable+0x11c>)
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].enable_timer = HAL_GetTick();
 8002ca8:	79fc      	ldrb	r4, [r7, #7]
 8002caa:	f001 fefd 	bl	8004aa8 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	491d      	ldr	r1, [pc, #116]	; (8002d28 <Channel_Enable+0x11c>)
 8002cb2:	4623      	mov	r3, r4
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4423      	add	r3, r4
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	3308      	adds	r3, #8
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	e017      	b.n	8002cf2 <Channel_Enable+0xe6>
	}
	else
	{
		ChannelsChange[channel].enable_request = false;
 8002cc2:	79fa      	ldrb	r2, [r7, #7]
 8002cc4:	4918      	ldr	r1, [pc, #96]	; (8002d28 <Channel_Enable+0x11c>)
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
		ChannelsStatus[channel].enable = false;
 8002cd6:	79fa      	ldrb	r2, [r7, #7]
 8002cd8:	4912      	ldr	r1, [pc, #72]	; (8002d24 <Channel_Enable+0x118>)
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
		Enable_GPIO(channel, false);
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	2100      	movs	r1, #0
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fbbf 	bl	8002470 <Enable_GPIO>
	}


	if(_ControlOutputWithChannelEnable) //je aktivni funkce ovladani vystupu s eneble
 8002cf2:	4b0e      	ldr	r3, [pc, #56]	; (8002d2c <Channel_Enable+0x120>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d011      	beq.n	8002d1e <Channel_Enable+0x112>
	{
		if(enable)
 8002cfa:	79bb      	ldrb	r3, [r7, #6]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <Channel_Enable+0x100>
		{
			Channel_Output(channel, true);
 8002d00:	79fb      	ldrb	r3, [r7, #7]
 8002d02:	2101      	movs	r1, #1
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 f881 	bl	8002e0c <Channel_Output>
 8002d0a:	e008      	b.n	8002d1e <Channel_Enable+0x112>
		}
		else
		{
			Channel_Output(channel, false);
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 f87b 	bl	8002e0c <Channel_Output>
 8002d16:	e002      	b.n	8002d1e <Channel_Enable+0x112>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002d18:	bf00      	nop
 8002d1a:	e000      	b.n	8002d1e <Channel_Enable+0x112>
	if(enable == ChannelsStatus[channel].enable) return;
 8002d1c:	bf00      	nop
		}
	}

}
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd90      	pop	{r4, r7, pc}
 8002d24:	20000780 	.word	0x20000780
 8002d28:	200007bc 	.word	0x200007bc
 8002d2c:	200007f8 	.word	0x200007f8

08002d30 <Channel_Polarity>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param polarity -> polarity of output voltage
 * 
 */
void Channel_Polarity(uint8_t channel, eOutputPolarity polarity)
{
 8002d30:	b590      	push	{r4, r7, lr}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	460a      	mov	r2, r1
 8002d3a:	71fb      	strb	r3, [r7, #7]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	71bb      	strb	r3, [r7, #6]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <Channel_Polarity+0x22>
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d002      	beq.n	8002d52 <Channel_Polarity+0x22>
 8002d4c:	79fb      	ldrb	r3, [r7, #7]
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d14b      	bne.n	8002dea <Channel_Polarity+0xba>
	if(polarity == ChannelsStatus[channel].polarity) return;
 8002d52:	79fa      	ldrb	r2, [r7, #7]
 8002d54:	492a      	ldr	r1, [pc, #168]	; (8002e00 <Channel_Polarity+0xd0>)
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	440b      	add	r3, r1
 8002d60:	3304      	adds	r3, #4
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	79ba      	ldrb	r2, [r7, #6]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d041      	beq.n	8002dee <Channel_Polarity+0xbe>

	if(_ControlOutputWithChannelEnable && ChannelsStatus[channel].enable) return; // polarita nejde prepnout, kdyz je kanál zapnutý
 8002d6a:	4b26      	ldr	r3, [pc, #152]	; (8002e04 <Channel_Polarity+0xd4>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d009      	beq.n	8002d86 <Channel_Polarity+0x56>
 8002d72:	79fa      	ldrb	r2, [r7, #7]
 8002d74:	4922      	ldr	r1, [pc, #136]	; (8002e00 <Channel_Polarity+0xd0>)
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d135      	bne.n	8002df2 <Channel_Polarity+0xc2>


	if(ChannelsChange[channel].polarity_request) return;
 8002d86:	79fa      	ldrb	r2, [r7, #7]
 8002d88:	491f      	ldr	r1, [pc, #124]	; (8002e08 <Channel_Polarity+0xd8>)
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	3302      	adds	r3, #2
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d12c      	bne.n	8002df6 <Channel_Polarity+0xc6>

	ChannelsStatus[channel].polarity = polarity;
 8002d9c:	79fa      	ldrb	r2, [r7, #7]
 8002d9e:	4918      	ldr	r1, [pc, #96]	; (8002e00 <Channel_Polarity+0xd0>)
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	3304      	adds	r3, #4
 8002dac:	79ba      	ldrb	r2, [r7, #6]
 8002dae:	701a      	strb	r2, [r3, #0]
	Output_GPIO(channel, false, false);
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	2200      	movs	r2, #0
 8002db4:	2100      	movs	r1, #0
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff fb8c 	bl	80024d4 <Output_GPIO>

	ChannelsChange[channel].polarity_request = true;
 8002dbc:	79fa      	ldrb	r2, [r7, #7]
 8002dbe:	4912      	ldr	r1, [pc, #72]	; (8002e08 <Channel_Polarity+0xd8>)
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	3302      	adds	r3, #2
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]
	ChannelsChange[channel].polarity_timer = HAL_GetTick();
 8002dd0:	79fc      	ldrb	r4, [r7, #7]
 8002dd2:	f001 fe69 	bl	8004aa8 <HAL_GetTick>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	490b      	ldr	r1, [pc, #44]	; (8002e08 <Channel_Polarity+0xd8>)
 8002dda:	4623      	mov	r3, r4
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4423      	add	r3, r4
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	330c      	adds	r3, #12
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	e006      	b.n	8002df8 <Channel_Polarity+0xc8>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002dea:	bf00      	nop
 8002dec:	e004      	b.n	8002df8 <Channel_Polarity+0xc8>
	if(polarity == ChannelsStatus[channel].polarity) return;
 8002dee:	bf00      	nop
 8002df0:	e002      	b.n	8002df8 <Channel_Polarity+0xc8>
	if(_ControlOutputWithChannelEnable && ChannelsStatus[channel].enable) return; // polarita nejde prepnout, kdyz je kanál zapnutý
 8002df2:	bf00      	nop
 8002df4:	e000      	b.n	8002df8 <Channel_Polarity+0xc8>
	if(ChannelsChange[channel].polarity_request) return;
 8002df6:	bf00      	nop

}
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd90      	pop	{r4, r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000780 	.word	0x20000780
 8002e04:	200007f8 	.word	0x200007f8
 8002e08:	200007bc 	.word	0x200007bc

08002e0c <Channel_Output>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param output -> true - output on, false - output off
 * 
 */
void Channel_Output(uint8_t channel, bool output)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	460a      	mov	r2, r1
 8002e16:	71fb      	strb	r3, [r7, #7]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	71bb      	strb	r3, [r7, #6]

	if(_ControlOutputWithChannelEnable && ChannelsStatus[channel].enable && !ChannelsChange[channel].enable_request && output) return; // vystup nejde zapnout, kdyz je kanál zapnutý
 8002e1c:	4b28      	ldr	r3, [pc, #160]	; (8002ec0 <Channel_Output+0xb4>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01a      	beq.n	8002e5a <Channel_Output+0x4e>
 8002e24:	79fa      	ldrb	r2, [r7, #7]
 8002e26:	4927      	ldr	r1, [pc, #156]	; (8002ec4 <Channel_Output+0xb8>)
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d010      	beq.n	8002e5a <Channel_Output+0x4e>
 8002e38:	79fa      	ldrb	r2, [r7, #7]
 8002e3a:	4923      	ldr	r1, [pc, #140]	; (8002ec8 <Channel_Output+0xbc>)
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	3301      	adds	r3, #1
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	f083 0301 	eor.w	r3, r3, #1
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <Channel_Output+0x4e>
 8002e54:	79bb      	ldrb	r3, [r7, #6]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d12d      	bne.n	8002eb6 <Channel_Output+0xaa>

	ChannelsStatus[channel].output = output;
 8002e5a:	79fa      	ldrb	r2, [r7, #7]
 8002e5c:	4919      	ldr	r1, [pc, #100]	; (8002ec4 <Channel_Output+0xb8>)
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	3305      	adds	r3, #5
 8002e6a:	79ba      	ldrb	r2, [r7, #6]
 8002e6c:	701a      	strb	r2, [r3, #0]

	if(ChannelsStatus[channel].polarity == polarity_positive)
 8002e6e:	79fa      	ldrb	r2, [r7, #7]
 8002e70:	4914      	ldr	r1, [pc, #80]	; (8002ec4 <Channel_Output+0xb8>)
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d106      	bne.n	8002e92 <Channel_Output+0x86>
	{
		Output_GPIO(channel, output, false);
 8002e84:	79b9      	ldrb	r1, [r7, #6]
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff fb22 	bl	80024d4 <Output_GPIO>
 8002e90:	e012      	b.n	8002eb8 <Channel_Output+0xac>
	}
	else if(ChannelsStatus[channel].polarity == polarity_negative)
 8002e92:	79fa      	ldrb	r2, [r7, #7]
 8002e94:	490b      	ldr	r1, [pc, #44]	; (8002ec4 <Channel_Output+0xb8>)
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	3304      	adds	r3, #4
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d107      	bne.n	8002eb8 <Channel_Output+0xac>
	{
		Output_GPIO(channel, false, output);
 8002ea8:	79ba      	ldrb	r2, [r7, #6]
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	2100      	movs	r1, #0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7ff fb10 	bl	80024d4 <Output_GPIO>
 8002eb4:	e000      	b.n	8002eb8 <Channel_Output+0xac>
	if(_ControlOutputWithChannelEnable && ChannelsStatus[channel].enable && !ChannelsChange[channel].enable_request && output) return; // vystup nejde zapnout, kdyz je kanál zapnutý
 8002eb6:	bf00      	nop
	}
}
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	200007f8 	.word	0x200007f8
 8002ec4:	20000780 	.word	0x20000780
 8002ec8:	200007bc 	.word	0x200007bc

08002ecc <ChannelControl>:
 *
 * @param channel -> Channel of power supply (0,1,2)
 * 
 */
void ChannelControl(uint8_t channel)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	71fb      	strb	r3, [r7, #7]
	//voltage ramping
	if(ChannelsChange[channel].voltage_ramp)
 8002ed6:	79fa      	ldrb	r2, [r7, #7]
 8002ed8:	4954      	ldr	r1, [pc, #336]	; (800302c <ChannelControl+0x160>)
 8002eda:	4613      	mov	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d012      	beq.n	8002f10 <ChannelControl+0x44>
	{
		if((HAL_GetTick()-ChannelsChange[channel].voltage_ramp_timer) >= ramp_t_step)
 8002eea:	f001 fddd 	bl	8004aa8 <HAL_GetTick>
 8002eee:	4601      	mov	r1, r0
 8002ef0:	79fa      	ldrb	r2, [r7, #7]
 8002ef2:	484e      	ldr	r0, [pc, #312]	; (800302c <ChannelControl+0x160>)
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4403      	add	r3, r0
 8002efe:	3304      	adds	r3, #4
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	1acb      	subs	r3, r1, r3
 8002f04:	2bc7      	cmp	r3, #199	; 0xc7
 8002f06:	d903      	bls.n	8002f10 <ChannelControl+0x44>
		{
			Set_Voltage_From_Ramping(channel);
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff fd9a 	bl	8002a44 <Set_Voltage_From_Ramping>
		}
	}

	//enable control
	if(ChannelsChange[channel].enable_request)
 8002f10:	79fa      	ldrb	r2, [r7, #7]
 8002f12:	4946      	ldr	r1, [pc, #280]	; (800302c <ChannelControl+0x160>)
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	3301      	adds	r3, #1
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d02c      	beq.n	8002f80 <ChannelControl+0xb4>
	{
		if((HAL_GetTick()-ChannelsChange[channel].enable_timer) >= delay_enable)
 8002f26:	f001 fdbf 	bl	8004aa8 <HAL_GetTick>
 8002f2a:	4601      	mov	r1, r0
 8002f2c:	79fa      	ldrb	r2, [r7, #7]
 8002f2e:	483f      	ldr	r0, [pc, #252]	; (800302c <ChannelControl+0x160>)
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4403      	add	r3, r0
 8002f3a:	3308      	adds	r3, #8
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	1acb      	subs	r3, r1, r3
 8002f40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f44:	d31c      	bcc.n	8002f80 <ChannelControl+0xb4>
		{
			ChannelsChange[channel].enable_request = false;
 8002f46:	79fa      	ldrb	r2, [r7, #7]
 8002f48:	4938      	ldr	r1, [pc, #224]	; (800302c <ChannelControl+0x160>)
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	3301      	adds	r3, #1
 8002f56:	2200      	movs	r2, #0
 8002f58:	701a      	strb	r2, [r3, #0]
			Enable_GPIO(channel, true);
 8002f5a:	79fb      	ldrb	r3, [r7, #7]
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff fa86 	bl	8002470 <Enable_GPIO>
			//nastavit napeti
			Set_Voltage(channel, ChannelsChange[channel].request_voltage );
 8002f64:	79fa      	ldrb	r2, [r7, #7]
 8002f66:	4931      	ldr	r1, [pc, #196]	; (800302c <ChannelControl+0x160>)
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	3310      	adds	r3, #16
 8002f74:	881a      	ldrh	r2, [r3, #0]
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	4611      	mov	r1, r2
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fc5e 	bl	800283c <Set_Voltage>
		}
	}

	//polarity change control
	if(ChannelsChange[channel].polarity_request)
 8002f80:	79fa      	ldrb	r2, [r7, #7]
 8002f82:	492a      	ldr	r1, [pc, #168]	; (800302c <ChannelControl+0x160>)
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	3302      	adds	r3, #2
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d045      	beq.n	8003022 <ChannelControl+0x156>
	{
		if((HAL_GetTick()-ChannelsChange[channel].polarity_timer) >= delay_polarity)
 8002f96:	f001 fd87 	bl	8004aa8 <HAL_GetTick>
 8002f9a:	4601      	mov	r1, r0
 8002f9c:	79fa      	ldrb	r2, [r7, #7]
 8002f9e:	4823      	ldr	r0, [pc, #140]	; (800302c <ChannelControl+0x160>)
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4403      	add	r3, r0
 8002faa:	330c      	adds	r3, #12
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	1acb      	subs	r3, r1, r3
 8002fb0:	2bc7      	cmp	r3, #199	; 0xc7
 8002fb2:	d936      	bls.n	8003022 <ChannelControl+0x156>
		{
			ChannelsChange[channel].polarity_request = false;
 8002fb4:	79fa      	ldrb	r2, [r7, #7]
 8002fb6:	491d      	ldr	r1, [pc, #116]	; (800302c <ChannelControl+0x160>)
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	3302      	adds	r3, #2
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]
			bool output = ChannelsStatus[channel].output;
 8002fc8:	79fa      	ldrb	r2, [r7, #7]
 8002fca:	4919      	ldr	r1, [pc, #100]	; (8003030 <ChannelControl+0x164>)
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	3305      	adds	r3, #5
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	73fb      	strb	r3, [r7, #15]

			if(ChannelsStatus[channel].polarity == polarity_positive)
 8002fdc:	79fa      	ldrb	r2, [r7, #7]
 8002fde:	4914      	ldr	r1, [pc, #80]	; (8003030 <ChannelControl+0x164>)
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	3304      	adds	r3, #4
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d106      	bne.n	8003000 <ChannelControl+0x134>
			{
				Output_GPIO(channel, output, false);
 8002ff2:	7bf9      	ldrb	r1, [r7, #15]
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fa6b 	bl	80024d4 <Output_GPIO>
				Output_GPIO(channel, false, output);
			}

		}
	}
}
 8002ffe:	e010      	b.n	8003022 <ChannelControl+0x156>
			else if(ChannelsStatus[channel].polarity == polarity_negative)
 8003000:	79fa      	ldrb	r2, [r7, #7]
 8003002:	490b      	ldr	r1, [pc, #44]	; (8003030 <ChannelControl+0x164>)
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	3304      	adds	r3, #4
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d105      	bne.n	8003022 <ChannelControl+0x156>
				Output_GPIO(channel, false, output);
 8003016:	7bfa      	ldrb	r2, [r7, #15]
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	2100      	movs	r1, #0
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff fa59 	bl	80024d4 <Output_GPIO>
}
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	200007bc 	.word	0x200007bc
 8003030:	20000780 	.word	0x20000780

08003034 <Get_ChannelVoltage>:
 *
 * @param channel -> Channel of power supply (0,1,2)
 * 
 */
void Get_ChannelVoltage(uint8_t channel)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <Get_ChannelVoltage+0x1c>
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d002      	beq.n	8003050 <Get_ChannelVoltage+0x1c>
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d112      	bne.n	8003076 <Get_ChannelVoltage+0x42>

	//SendCommunication(cmd_get_voltage_CH1 + channel, ChannelsStatus[channel].voltage_measurement*100);
	SendCommunication_float(cmd_get_voltage_CH1 + channel, ChannelsStatus[channel].voltage_measurement);
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	330e      	adds	r3, #14
 8003054:	b2d9      	uxtb	r1, r3
 8003056:	79fa      	ldrb	r2, [r7, #7]
 8003058:	4809      	ldr	r0, [pc, #36]	; (8003080 <Get_ChannelVoltage+0x4c>)
 800305a:	4613      	mov	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4403      	add	r3, r0
 8003064:	3308      	adds	r3, #8
 8003066:	edd3 7a00 	vldr	s15, [r3]
 800306a:	eeb0 0a67 	vmov.f32	s0, s15
 800306e:	4608      	mov	r0, r1
 8003070:	f7fe fde2 	bl	8001c38 <SendCommunication_float>
 8003074:	e000      	b.n	8003078 <Get_ChannelVoltage+0x44>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8003076:	bf00      	nop
}
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	20000780 	.word	0x20000780

08003084 <Get_ChannelCurrent>:
 *
 * @param channel -> Channel of power supply (0,1,2)
 * 
 */
void Get_ChannelCurrent(uint8_t channel)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <Get_ChannelCurrent+0x1c>
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d002      	beq.n	80030a0 <Get_ChannelCurrent+0x1c>
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d112      	bne.n	80030c6 <Get_ChannelCurrent+0x42>

	//SendCommunication(cmd_get_current_CH1 + channel, ChannelsStatus[channel].current_measurement*1000);
	SendCommunication_float(cmd_get_current_CH1 + channel, ChannelsStatus[channel].current_measurement);
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	3311      	adds	r3, #17
 80030a4:	b2d9      	uxtb	r1, r3
 80030a6:	79fa      	ldrb	r2, [r7, #7]
 80030a8:	4809      	ldr	r0, [pc, #36]	; (80030d0 <Get_ChannelCurrent+0x4c>)
 80030aa:	4613      	mov	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4403      	add	r3, r0
 80030b4:	330c      	adds	r3, #12
 80030b6:	edd3 7a00 	vldr	s15, [r3]
 80030ba:	eeb0 0a67 	vmov.f32	s0, s15
 80030be:	4608      	mov	r0, r1
 80030c0:	f7fe fdba 	bl	8001c38 <SendCommunication_float>
 80030c4:	e000      	b.n	80030c8 <Get_ChannelCurrent+0x44>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 80030c6:	bf00      	nop
}
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000780 	.word	0x20000780

080030d4 <Get_ErrorSignals>:

void Get_ErrorSignals()
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
	uint8_t error_reg = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	71fb      	strb	r3, [r7, #7]

	error_reg |= ChannelsStatus[0].power_good << 0;
 80030de:	4b20      	ldr	r3, [pc, #128]	; (8003160 <Get_ErrorSignals+0x8c>)
 80030e0:	7c5b      	ldrb	r3, [r3, #17]
 80030e2:	461a      	mov	r2, r3
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	71fb      	strb	r3, [r7, #7]
	error_reg |= ChannelsStatus[1].power_good << 1;
 80030ea:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <Get_ErrorSignals+0x8c>)
 80030ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	b25a      	sxtb	r2, r3
 80030f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	b25b      	sxtb	r3, r3
 80030fc:	71fb      	strb	r3, [r7, #7]
	error_reg |= ChannelsStatus[2].power_good << 2;
 80030fe:	4b18      	ldr	r3, [pc, #96]	; (8003160 <Get_ErrorSignals+0x8c>)
 8003100:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	b25a      	sxtb	r2, r3
 8003108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310c:	4313      	orrs	r3, r2
 800310e:	b25b      	sxtb	r3, r3
 8003110:	71fb      	strb	r3, [r7, #7]

	error_reg |= ChannelsStatus[0].over_current << 3;
 8003112:	4b13      	ldr	r3, [pc, #76]	; (8003160 <Get_ErrorSignals+0x8c>)
 8003114:	7c1b      	ldrb	r3, [r3, #16]
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	b25a      	sxtb	r2, r3
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	4313      	orrs	r3, r2
 8003120:	b25b      	sxtb	r3, r3
 8003122:	71fb      	strb	r3, [r7, #7]
	error_reg |= ChannelsStatus[1].over_current << 4;
 8003124:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <Get_ErrorSignals+0x8c>)
 8003126:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	b25a      	sxtb	r2, r3
 800312e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003132:	4313      	orrs	r3, r2
 8003134:	b25b      	sxtb	r3, r3
 8003136:	71fb      	strb	r3, [r7, #7]
	error_reg |= ChannelsStatus[2].over_current << 5;
 8003138:	4b09      	ldr	r3, [pc, #36]	; (8003160 <Get_ErrorSignals+0x8c>)
 800313a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800313e:	015b      	lsls	r3, r3, #5
 8003140:	b25a      	sxtb	r2, r3
 8003142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003146:	4313      	orrs	r3, r2
 8003148:	b25b      	sxtb	r3, r3
 800314a:	71fb      	strb	r3, [r7, #7]

	SendCommunication(cmd_error_signals, error_reg);
 800314c:	79fb      	ldrb	r3, [r7, #7]
 800314e:	4619      	mov	r1, r3
 8003150:	2014      	movs	r0, #20
 8003152:	f7fe fd1b 	bl	8001b8c <SendCommunication>
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000780 	.word	0x20000780

08003164 <Get_AllMeasurement>:
/* @brief Send by communication all measured value, all voltages and currents
 *
 * 
 */
void Get_AllMeasurement()
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
	Get_ChannelVoltage(0);
 8003168:	2000      	movs	r0, #0
 800316a:	f7ff ff63 	bl	8003034 <Get_ChannelVoltage>
	Get_ChannelVoltage(1);
 800316e:	2001      	movs	r0, #1
 8003170:	f7ff ff60 	bl	8003034 <Get_ChannelVoltage>
	Get_ChannelVoltage(2);
 8003174:	2002      	movs	r0, #2
 8003176:	f7ff ff5d 	bl	8003034 <Get_ChannelVoltage>
	Get_ChannelCurrent(0);
 800317a:	2000      	movs	r0, #0
 800317c:	f7ff ff82 	bl	8003084 <Get_ChannelCurrent>
	Get_ChannelCurrent(1);
 8003180:	2001      	movs	r0, #1
 8003182:	f7ff ff7f 	bl	8003084 <Get_ChannelCurrent>
	Get_ChannelCurrent(2);
 8003186:	2002      	movs	r0, #2
 8003188:	f7ff ff7c 	bl	8003084 <Get_ChannelCurrent>

	Get_ErrorSignals();
 800318c:	f7ff ffa2 	bl	80030d4 <Get_ErrorSignals>
}
 8003190:	bf00      	nop
 8003192:	bd80      	pop	{r7, pc}

08003194 <Get_Setting>:
/* @brief Send by communication setting of power supply
 *
 * 
 */
void Get_Setting()
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
	SendCommunication(cmd_set_voltage_CH1, ChannelsChange[0].request_voltage);
 8003198:	4b29      	ldr	r3, [pc, #164]	; (8003240 <Get_Setting+0xac>)
 800319a:	8a1b      	ldrh	r3, [r3, #16]
 800319c:	4619      	mov	r1, r3
 800319e:	2008      	movs	r0, #8
 80031a0:	f7fe fcf4 	bl	8001b8c <SendCommunication>
	SendCommunication(cmd_set_voltage_CH2, ChannelsChange[1].request_voltage);
 80031a4:	4b26      	ldr	r3, [pc, #152]	; (8003240 <Get_Setting+0xac>)
 80031a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80031a8:	4619      	mov	r1, r3
 80031aa:	2009      	movs	r0, #9
 80031ac:	f7fe fcee 	bl	8001b8c <SendCommunication>
	SendCommunication(cmd_set_voltage_CH3, ChannelsChange[2].request_voltage);
 80031b0:	4b23      	ldr	r3, [pc, #140]	; (8003240 <Get_Setting+0xac>)
 80031b2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80031b4:	4619      	mov	r1, r3
 80031b6:	200a      	movs	r0, #10
 80031b8:	f7fe fce8 	bl	8001b8c <SendCommunication>

	//SendCommunication(cmd_set_voltage_CH1,ChannelsStatus[0].set_voltage);
	//SendCommunication(cmd_set_voltage_CH2,ChannelsStatus[1].set_voltage);
	//SendCommunication(cmd_set_voltage_CH3,ChannelsStatus[2].set_voltage);

	SendCommunication(cmd_enable_CH1, ChannelsStatus[0].enable);
 80031bc:	4b21      	ldr	r3, [pc, #132]	; (8003244 <Get_Setting+0xb0>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	4619      	mov	r1, r3
 80031c2:	2002      	movs	r0, #2
 80031c4:	f7fe fce2 	bl	8001b8c <SendCommunication>
	SendCommunication(cmd_enable_CH2, ChannelsStatus[1].enable);
 80031c8:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <Get_Setting+0xb0>)
 80031ca:	7d1b      	ldrb	r3, [r3, #20]
 80031cc:	4619      	mov	r1, r3
 80031ce:	2003      	movs	r0, #3
 80031d0:	f7fe fcdc 	bl	8001b8c <SendCommunication>
	SendCommunication(cmd_enable_CH3, ChannelsStatus[2].enable);
 80031d4:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <Get_Setting+0xb0>)
 80031d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80031da:	4619      	mov	r1, r3
 80031dc:	2004      	movs	r0, #4
 80031de:	f7fe fcd5 	bl	8001b8c <SendCommunication>

	SendCommunication(cmd_polarity_CH1, ChannelsStatus[0].polarity + 1);
 80031e2:	4b18      	ldr	r3, [pc, #96]	; (8003244 <Get_Setting+0xb0>)
 80031e4:	791b      	ldrb	r3, [r3, #4]
 80031e6:	3301      	adds	r3, #1
 80031e8:	4619      	mov	r1, r3
 80031ea:	200b      	movs	r0, #11
 80031ec:	f7fe fcce 	bl	8001b8c <SendCommunication>
	SendCommunication(cmd_polarity_CH2, ChannelsStatus[1].polarity + 1);
 80031f0:	4b14      	ldr	r3, [pc, #80]	; (8003244 <Get_Setting+0xb0>)
 80031f2:	7e1b      	ldrb	r3, [r3, #24]
 80031f4:	3301      	adds	r3, #1
 80031f6:	4619      	mov	r1, r3
 80031f8:	200c      	movs	r0, #12
 80031fa:	f7fe fcc7 	bl	8001b8c <SendCommunication>
	SendCommunication(cmd_polarity_CH3, ChannelsStatus[2].polarity + 1);
 80031fe:	4b11      	ldr	r3, [pc, #68]	; (8003244 <Get_Setting+0xb0>)
 8003200:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003204:	3301      	adds	r3, #1
 8003206:	4619      	mov	r1, r3
 8003208:	200d      	movs	r0, #13
 800320a:	f7fe fcbf 	bl	8001b8c <SendCommunication>

	SendCommunication(cmd_output_CH1, ChannelsStatus[0].output);
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <Get_Setting+0xb0>)
 8003210:	795b      	ldrb	r3, [r3, #5]
 8003212:	4619      	mov	r1, r3
 8003214:	2005      	movs	r0, #5
 8003216:	f7fe fcb9 	bl	8001b8c <SendCommunication>
	SendCommunication(cmd_output_CH2, ChannelsStatus[1].output);
 800321a:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <Get_Setting+0xb0>)
 800321c:	7e5b      	ldrb	r3, [r3, #25]
 800321e:	4619      	mov	r1, r3
 8003220:	2006      	movs	r0, #6
 8003222:	f7fe fcb3 	bl	8001b8c <SendCommunication>
	SendCommunication(cmd_output_CH3, ChannelsStatus[2].output);
 8003226:	4b07      	ldr	r3, [pc, #28]	; (8003244 <Get_Setting+0xb0>)
 8003228:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800322c:	4619      	mov	r1, r3
 800322e:	2007      	movs	r0, #7
 8003230:	f7fe fcac 	bl	8001b8c <SendCommunication>

	SendCommunication(cmd_thats_all, 1);
 8003234:	2101      	movs	r1, #1
 8003236:	2017      	movs	r0, #23
 8003238:	f7fe fca8 	bl	8001b8c <SendCommunication>
}
 800323c:	bf00      	nop
 800323e:	bd80      	pop	{r7, pc}
 8003240:	200007bc 	.word	0x200007bc
 8003244:	20000780 	.word	0x20000780

08003248 <System_Reset>:
/* @brief reset MCU
 *
 *
 */
void System_Reset()
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800324c:	f3bf 8f4f 	dsb	sy
}
 8003250:	bf00      	nop
	__DSB();
	SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) | (SCB_AIRCR_SYSRESETREQ_Msk));
 8003252:	4b03      	ldr	r3, [pc, #12]	; (8003260 <System_Reset+0x18>)
 8003254:	4a03      	ldr	r2, [pc, #12]	; (8003264 <System_Reset+0x1c>)
 8003256:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003258:	f3bf 8f4f 	dsb	sy
}
 800325c:	bf00      	nop
	__DSB();
	while(1);
 800325e:	e7fe      	b.n	800325e <System_Reset+0x16>
 8003260:	e000ed00 	.word	0xe000ed00
 8003264:	05fa0004 	.word	0x05fa0004

08003268 <MakeUint32FromFloat>:
FlashSectorParams MainParams;
FlashSectorParams DefaultParams;


uint32_t MakeUint32FromFloat(float value)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
	uint32_t x;
	memcpy(&x,&value,sizeof(x));
 8003274:	60fb      	str	r3, [r7, #12]

	return x;
 8003276:	68fb      	ldr	r3, [r7, #12]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <ParamsDefaultValues>:



void ParamsDefaultValues()
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0

	DefaultParams.sramOffset_StoreControl_0 = 0;
 8003288:	4b47      	ldr	r3, [pc, #284]	; (80033a8 <ParamsDefaultValues+0x124>)
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
	DefaultParams.sramOffset_StoreControl_1 = 0;
 800328e:	4b46      	ldr	r3, [pc, #280]	; (80033a8 <ParamsDefaultValues+0x124>)
 8003290:	2200      	movs	r2, #0
 8003292:	605a      	str	r2, [r3, #4]

	DefaultParams.sramOffset_IP_ADDRESS = ip_MAKEU32(192,168,0,22);
 8003294:	4b44      	ldr	r3, [pc, #272]	; (80033a8 <ParamsDefaultValues+0x124>)
 8003296:	4a45      	ldr	r2, [pc, #276]	; (80033ac <ParamsDefaultValues+0x128>)
 8003298:	609a      	str	r2, [r3, #8]
	DefaultParams.sramOffset_NETMASK_ADDRESS = ip_MAKEU32(255,255,255,0);
 800329a:	4b43      	ldr	r3, [pc, #268]	; (80033a8 <ParamsDefaultValues+0x124>)
 800329c:	f06f 02ff 	mvn.w	r2, #255	; 0xff
 80032a0:	60da      	str	r2, [r3, #12]
	DefaultParams.sramOffset_GATEWAY_ADDRESS = ip_MAKEU32(192,168,0,1);
 80032a2:	4b41      	ldr	r3, [pc, #260]	; (80033a8 <ParamsDefaultValues+0x124>)
 80032a4:	4a42      	ldr	r2, [pc, #264]	; (80033b0 <ParamsDefaultValues+0x12c>)
 80032a6:	611a      	str	r2, [r3, #16]

	DefaultParams.sramOffset_ReadCoef_k_0 = MakeUint32FromFloat(0.00540804);
 80032a8:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80033b4 <ParamsDefaultValues+0x130>
 80032ac:	f7ff ffdc 	bl	8003268 <MakeUint32FromFloat>
 80032b0:	4603      	mov	r3, r0
 80032b2:	4a3d      	ldr	r2, [pc, #244]	; (80033a8 <ParamsDefaultValues+0x124>)
 80032b4:	6153      	str	r3, [r2, #20]
	DefaultParams.sramOffset_ReadCoef_k_1 = MakeUint32FromFloat(0.00540804);
 80032b6:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 80033b4 <ParamsDefaultValues+0x130>
 80032ba:	f7ff ffd5 	bl	8003268 <MakeUint32FromFloat>
 80032be:	4603      	mov	r3, r0
 80032c0:	4a39      	ldr	r2, [pc, #228]	; (80033a8 <ParamsDefaultValues+0x124>)
 80032c2:	6193      	str	r3, [r2, #24]
	DefaultParams.sramOffset_ReadCoef_k_2 = MakeUint32FromFloat(0.00540804);
 80032c4:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 80033b4 <ParamsDefaultValues+0x130>
 80032c8:	f7ff ffce 	bl	8003268 <MakeUint32FromFloat>
 80032cc:	4603      	mov	r3, r0
 80032ce:	4a36      	ldr	r2, [pc, #216]	; (80033a8 <ParamsDefaultValues+0x124>)
 80032d0:	61d3      	str	r3, [r2, #28]
	DefaultParams.sramOffset_ReadCoef_k_3 = MakeUint32FromFloat(0.06175469);
 80032d2:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80033b8 <ParamsDefaultValues+0x134>
 80032d6:	f7ff ffc7 	bl	8003268 <MakeUint32FromFloat>
 80032da:	4603      	mov	r3, r0
 80032dc:	4a32      	ldr	r2, [pc, #200]	; (80033a8 <ParamsDefaultValues+0x124>)
 80032de:	6213      	str	r3, [r2, #32]
	DefaultParams.sramOffset_ReadCoef_k_4 = MakeUint32FromFloat(0.06175469);
 80032e0:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80033b8 <ParamsDefaultValues+0x134>
 80032e4:	f7ff ffc0 	bl	8003268 <MakeUint32FromFloat>
 80032e8:	4603      	mov	r3, r0
 80032ea:	4a2f      	ldr	r2, [pc, #188]	; (80033a8 <ParamsDefaultValues+0x124>)
 80032ec:	6253      	str	r3, [r2, #36]	; 0x24
	DefaultParams.sramOffset_ReadCoef_k_5 = MakeUint32FromFloat(0.06175469);
 80032ee:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80033b8 <ParamsDefaultValues+0x134>
 80032f2:	f7ff ffb9 	bl	8003268 <MakeUint32FromFloat>
 80032f6:	4603      	mov	r3, r0
 80032f8:	4a2b      	ldr	r2, [pc, #172]	; (80033a8 <ParamsDefaultValues+0x124>)
 80032fa:	6293      	str	r3, [r2, #40]	; 0x28

	DefaultParams.sramOffset_ReadCoef_q_0 = MakeUint32FromFloat(0.09030197);
 80032fc:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80033bc <ParamsDefaultValues+0x138>
 8003300:	f7ff ffb2 	bl	8003268 <MakeUint32FromFloat>
 8003304:	4603      	mov	r3, r0
 8003306:	4a28      	ldr	r2, [pc, #160]	; (80033a8 <ParamsDefaultValues+0x124>)
 8003308:	62d3      	str	r3, [r2, #44]	; 0x2c
	DefaultParams.sramOffset_ReadCoef_q_1 = MakeUint32FromFloat(0.09030197);
 800330a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80033bc <ParamsDefaultValues+0x138>
 800330e:	f7ff ffab 	bl	8003268 <MakeUint32FromFloat>
 8003312:	4603      	mov	r3, r0
 8003314:	4a24      	ldr	r2, [pc, #144]	; (80033a8 <ParamsDefaultValues+0x124>)
 8003316:	6313      	str	r3, [r2, #48]	; 0x30
	DefaultParams.sramOffset_ReadCoef_q_2 = MakeUint32FromFloat(0.09030197);
 8003318:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80033bc <ParamsDefaultValues+0x138>
 800331c:	f7ff ffa4 	bl	8003268 <MakeUint32FromFloat>
 8003320:	4603      	mov	r3, r0
 8003322:	4a21      	ldr	r2, [pc, #132]	; (80033a8 <ParamsDefaultValues+0x124>)
 8003324:	6353      	str	r3, [r2, #52]	; 0x34
	DefaultParams.sramOffset_ReadCoef_q_3 = MakeUint32FromFloat(0.06370294);
 8003326:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80033c0 <ParamsDefaultValues+0x13c>
 800332a:	f7ff ff9d 	bl	8003268 <MakeUint32FromFloat>
 800332e:	4603      	mov	r3, r0
 8003330:	4a1d      	ldr	r2, [pc, #116]	; (80033a8 <ParamsDefaultValues+0x124>)
 8003332:	6393      	str	r3, [r2, #56]	; 0x38
	DefaultParams.sramOffset_ReadCoef_q_4 = MakeUint32FromFloat(0.06370294);
 8003334:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80033c0 <ParamsDefaultValues+0x13c>
 8003338:	f7ff ff96 	bl	8003268 <MakeUint32FromFloat>
 800333c:	4603      	mov	r3, r0
 800333e:	4a1a      	ldr	r2, [pc, #104]	; (80033a8 <ParamsDefaultValues+0x124>)
 8003340:	63d3      	str	r3, [r2, #60]	; 0x3c
	DefaultParams.sramOffset_ReadCoef_q_5 = MakeUint32FromFloat(0.06370294);
 8003342:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80033c0 <ParamsDefaultValues+0x13c>
 8003346:	f7ff ff8f 	bl	8003268 <MakeUint32FromFloat>
 800334a:	4603      	mov	r3, r0
 800334c:	4a16      	ldr	r2, [pc, #88]	; (80033a8 <ParamsDefaultValues+0x124>)
 800334e:	6413      	str	r3, [r2, #64]	; 0x40

	DefaultParams.sramOffset_AdjCoef_k_ch0 =  MakeUint32FromFloat(Default_AdjCoef_k);
 8003350:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80033c4 <ParamsDefaultValues+0x140>
 8003354:	f7ff ff88 	bl	8003268 <MakeUint32FromFloat>
 8003358:	4603      	mov	r3, r0
 800335a:	4a13      	ldr	r2, [pc, #76]	; (80033a8 <ParamsDefaultValues+0x124>)
 800335c:	6453      	str	r3, [r2, #68]	; 0x44
	DefaultParams.sramOffset_AdjCoef_k_ch1  =  MakeUint32FromFloat(Default_AdjCoef_k);
 800335e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80033c4 <ParamsDefaultValues+0x140>
 8003362:	f7ff ff81 	bl	8003268 <MakeUint32FromFloat>
 8003366:	4603      	mov	r3, r0
 8003368:	4a0f      	ldr	r2, [pc, #60]	; (80033a8 <ParamsDefaultValues+0x124>)
 800336a:	6493      	str	r3, [r2, #72]	; 0x48
	DefaultParams.sramOffset_AdjCoef_k_ch2  =  MakeUint32FromFloat(Default_AdjCoef_k);
 800336c:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80033c4 <ParamsDefaultValues+0x140>
 8003370:	f7ff ff7a 	bl	8003268 <MakeUint32FromFloat>
 8003374:	4603      	mov	r3, r0
 8003376:	4a0c      	ldr	r2, [pc, #48]	; (80033a8 <ParamsDefaultValues+0x124>)
 8003378:	64d3      	str	r3, [r2, #76]	; 0x4c
	DefaultParams.sramOffset_AdjCoef_q_ch0 = MakeUint32FromFloat(Default_AdjCoef_q);
 800337a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80033c8 <ParamsDefaultValues+0x144>
 800337e:	f7ff ff73 	bl	8003268 <MakeUint32FromFloat>
 8003382:	4603      	mov	r3, r0
 8003384:	4a08      	ldr	r2, [pc, #32]	; (80033a8 <ParamsDefaultValues+0x124>)
 8003386:	6513      	str	r3, [r2, #80]	; 0x50
	DefaultParams.sramOffset_AdjCoef_q_ch1 =  MakeUint32FromFloat(Default_AdjCoef_q);
 8003388:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80033c8 <ParamsDefaultValues+0x144>
 800338c:	f7ff ff6c 	bl	8003268 <MakeUint32FromFloat>
 8003390:	4603      	mov	r3, r0
 8003392:	4a05      	ldr	r2, [pc, #20]	; (80033a8 <ParamsDefaultValues+0x124>)
 8003394:	6553      	str	r3, [r2, #84]	; 0x54
	DefaultParams.sramOffset_AdjCoef_q_ch2  =  MakeUint32FromFloat(Default_AdjCoef_q);
 8003396:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80033c8 <ParamsDefaultValues+0x144>
 800339a:	f7ff ff65 	bl	8003268 <MakeUint32FromFloat>
 800339e:	4603      	mov	r3, r0
 80033a0:	4a01      	ldr	r2, [pc, #4]	; (80033a8 <ParamsDefaultValues+0x124>)
 80033a2:	6593      	str	r3, [r2, #88]	; 0x58


}
 80033a4:	bf00      	nop
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20000858 	.word	0x20000858
 80033ac:	c0a80016 	.word	0xc0a80016
 80033b0:	c0a80001 	.word	0xc0a80001
 80033b4:	3bb135ed 	.word	0x3bb135ed
 80033b8:	3d7cf27c 	.word	0x3d7cf27c
 80033bc:	3db8f03d 	.word	0x3db8f03d
 80033c0:	3d8276b0 	.word	0x3d8276b0
 80033c4:	43ffe8bc 	.word	0x43ffe8bc
 80033c8:	4423d0f3 	.word	0x4423d0f3

080033cc <ParamsLoad>:


void ParamsLoad()
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b09a      	sub	sp, #104	; 0x68
 80033d0:	af00      	add	r7, sp, #0

	FlashSectorParams LoadParams;

	Flash_ReadParamStruct(&LoadParams);
 80033d2:	1d3b      	adds	r3, r7, #4
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 fd11 	bl	8003dfc <Flash_ReadParamStruct>

	uint32_t StoreControl_0 = LoadParams.sramOffset_StoreControl_0;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	663b      	str	r3, [r7, #96]	; 0x60
	//uint32_t StoreControl_1 = LoadParams.sramOffset_StoreControl_1;


	for(int i = 2; i < NUMBER_OF_PARAMS;i++)
 80033de:	2302      	movs	r3, #2
 80033e0:	667b      	str	r3, [r7, #100]	; 0x64
 80033e2:	e01b      	b.n	800341c <ParamsLoad+0x50>
	{
		//if((StoreControl_0 == STORE_VALIDE_CODE) &&  ((StoreControl_1 >> i) & 0x000001))
		if(StoreControl_0 == STORE_VALIDE_CODE)
 80033e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033e6:	4a11      	ldr	r2, [pc, #68]	; (800342c <ParamsLoad+0x60>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d10a      	bne.n	8003402 <ParamsLoad+0x36>
		{
			*((uint32_t*)(&MainParams)+i) = *((uint32_t*)(&LoadParams)+i);
 80033ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	1d3a      	adds	r2, r7, #4
 80033f2:	441a      	add	r2, r3
 80033f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	490d      	ldr	r1, [pc, #52]	; (8003430 <ParamsLoad+0x64>)
 80033fa:	440b      	add	r3, r1
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	e009      	b.n	8003416 <ParamsLoad+0x4a>


		}
		else
		{
			*((uint32_t*)(&MainParams)+i) = *((uint32_t*)(&DefaultParams)+i);
 8003402:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4a0b      	ldr	r2, [pc, #44]	; (8003434 <ParamsLoad+0x68>)
 8003408:	441a      	add	r2, r3
 800340a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4908      	ldr	r1, [pc, #32]	; (8003430 <ParamsLoad+0x64>)
 8003410:	440b      	add	r3, r1
 8003412:	6812      	ldr	r2, [r2, #0]
 8003414:	601a      	str	r2, [r3, #0]
	for(int i = 2; i < NUMBER_OF_PARAMS;i++)
 8003416:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003418:	3301      	adds	r3, #1
 800341a:	667b      	str	r3, [r7, #100]	; 0x64
 800341c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800341e:	2b16      	cmp	r3, #22
 8003420:	d9e0      	bls.n	80033e4 <ParamsLoad+0x18>
		}
	}

}
 8003422:	bf00      	nop
 8003424:	bf00      	nop
 8003426:	3768      	adds	r7, #104	; 0x68
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	a4b7a4b7 	.word	0xa4b7a4b7
 8003430:	200007fc 	.word	0x200007fc
 8003434:	20000858 	.word	0x20000858

08003438 <ParamsStore>:

void ParamsStore()
{
 8003438:	b590      	push	{r4, r7, lr}
 800343a:	b095      	sub	sp, #84	; 0x54
 800343c:	af14      	add	r7, sp, #80	; 0x50
	MainParams.sramOffset_StoreControl_0 = STORE_VALIDE_CODE;
 800343e:	4b0b      	ldr	r3, [pc, #44]	; (800346c <ParamsStore+0x34>)
 8003440:	4a0b      	ldr	r2, [pc, #44]	; (8003470 <ParamsStore+0x38>)
 8003442:	601a      	str	r2, [r3, #0]
	MainParams.sramOffset_StoreControl_1 = 0xA1B2C3D4;
 8003444:	4b09      	ldr	r3, [pc, #36]	; (800346c <ParamsStore+0x34>)
 8003446:	4a0b      	ldr	r2, [pc, #44]	; (8003474 <ParamsStore+0x3c>)
 8003448:	605a      	str	r2, [r3, #4]

	Flash_WriteParamStruct(MainParams);
 800344a:	4c08      	ldr	r4, [pc, #32]	; (800346c <ParamsStore+0x34>)
 800344c:	4668      	mov	r0, sp
 800344e:	f104 0310 	add.w	r3, r4, #16
 8003452:	224c      	movs	r2, #76	; 0x4c
 8003454:	4619      	mov	r1, r3
 8003456:	f005 fec7 	bl	80091e8 <memcpy>
 800345a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800345e:	f000 fcef 	bl	8003e40 <Flash_WriteParamStruct>
}
 8003462:	bf00      	nop
 8003464:	3704      	adds	r7, #4
 8003466:	46bd      	mov	sp, r7
 8003468:	bd90      	pop	{r4, r7, pc}
 800346a:	bf00      	nop
 800346c:	200007fc 	.word	0x200007fc
 8003470:	a4b7a4b7 	.word	0xa4b7a4b7
 8003474:	a1b2c3d4 	.word	0xa1b2c3d4

08003478 <RestoreParamsDefault>:

void RestoreParamsDefault()
{
 8003478:	b590      	push	{r4, r7, lr}
 800347a:	b095      	sub	sp, #84	; 0x54
 800347c:	af14      	add	r7, sp, #80	; 0x50
	Flash_WriteParamStruct(DefaultParams);
 800347e:	4c09      	ldr	r4, [pc, #36]	; (80034a4 <RestoreParamsDefault+0x2c>)
 8003480:	4668      	mov	r0, sp
 8003482:	f104 0310 	add.w	r3, r4, #16
 8003486:	224c      	movs	r2, #76	; 0x4c
 8003488:	4619      	mov	r1, r3
 800348a:	f005 fead 	bl	80091e8 <memcpy>
 800348e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003492:	f000 fcd5 	bl	8003e40 <Flash_WriteParamStruct>
	ParamsLoad();
 8003496:	f7ff ff99 	bl	80033cc <ParamsLoad>
}
 800349a:	bf00      	nop
 800349c:	3704      	adds	r7, #4
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd90      	pop	{r4, r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000858 	.word	0x20000858

080034a8 <SendCommandToDAC>:
 * @param value -> value to write in DAC register
 * @param rw    -> read/write bit
 *
 */
void SendCommandToDAC(uint8_t adr, uint16_t value,  bool rw)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	71fb      	strb	r3, [r7, #7]
 80034b2:	460b      	mov	r3, r1
 80034b4:	80bb      	strh	r3, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	71bb      	strb	r3, [r7, #6]

	uint8_t data[3];

	data[2] = value & (0x00FF);
 80034ba:	88bb      	ldrh	r3, [r7, #4]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	73bb      	strb	r3, [r7, #14]
	data[1] = value >> 8;
 80034c0:	88bb      	ldrh	r3, [r7, #4]
 80034c2:	0a1b      	lsrs	r3, r3, #8
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	737b      	strb	r3, [r7, #13]
	data[0] = (adr & 0x0F) | (rw << 7);
 80034ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	b25a      	sxtb	r2, r3
 80034d4:	79bb      	ldrb	r3, [r7, #6]
 80034d6:	01db      	lsls	r3, r3, #7
 80034d8:	b25b      	sxtb	r3, r3
 80034da:	4313      	orrs	r3, r2
 80034dc:	b25b      	sxtb	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80034e2:	2200      	movs	r2, #0
 80034e4:	2110      	movs	r1, #16
 80034e6:	4809      	ldr	r0, [pc, #36]	; (800350c <SendCommandToDAC+0x64>)
 80034e8:	f002 fafe 	bl	8005ae8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, sizeof(data),10);
 80034ec:	f107 010c 	add.w	r1, r7, #12
 80034f0:	230a      	movs	r3, #10
 80034f2:	2203      	movs	r2, #3
 80034f4:	4806      	ldr	r0, [pc, #24]	; (8003510 <SendCommandToDAC+0x68>)
 80034f6:	f003 f950 	bl	800679a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80034fa:	2201      	movs	r2, #1
 80034fc:	2110      	movs	r1, #16
 80034fe:	4803      	ldr	r0, [pc, #12]	; (800350c <SendCommandToDAC+0x64>)
 8003500:	f002 faf2 	bl	8005ae8 <HAL_GPIO_WritePin>
}
 8003504:	bf00      	nop
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40020000 	.word	0x40020000
 8003510:	20000d74 	.word	0x20000d74

08003514 <SendValueToDAC>:
 * @param dac_channel -> DAC output channel
 * @param value       -> value to write in DAC output register
 *
 */
void SendValueToDAC(uint8_t dac_channel, uint16_t value)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	460a      	mov	r2, r1
 800351e:	71fb      	strb	r3, [r7, #7]
 8003520:	4613      	mov	r3, r2
 8003522:	80bb      	strh	r3, [r7, #4]

	uint8_t data[3];

	data[2] = value & 0x000F;
 8003524:	88bb      	ldrh	r3, [r7, #4]
 8003526:	b2db      	uxtb	r3, r3
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	b2db      	uxtb	r3, r3
 800352e:	73bb      	strb	r3, [r7, #14]
	data[1] = value >> 4;
 8003530:	88bb      	ldrh	r3, [r7, #4]
 8003532:	091b      	lsrs	r3, r3, #4
 8003534:	b29b      	uxth	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	737b      	strb	r3, [r7, #13]
	data[0] = (dac_channel & 0x07) | (1 << 3) | (0 << 7);
 800353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	b25b      	sxtb	r3, r3
 8003544:	f043 0308 	orr.w	r3, r3, #8
 8003548:	b25b      	sxtb	r3, r3
 800354a:	b2db      	uxtb	r3, r3
 800354c:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800354e:	2200      	movs	r2, #0
 8003550:	2110      	movs	r1, #16
 8003552:	4809      	ldr	r0, [pc, #36]	; (8003578 <SendValueToDAC+0x64>)
 8003554:	f002 fac8 	bl	8005ae8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, sizeof(data),10);
 8003558:	f107 010c 	add.w	r1, r7, #12
 800355c:	230a      	movs	r3, #10
 800355e:	2203      	movs	r2, #3
 8003560:	4806      	ldr	r0, [pc, #24]	; (800357c <SendValueToDAC+0x68>)
 8003562:	f003 f91a 	bl	800679a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8003566:	2201      	movs	r2, #1
 8003568:	2110      	movs	r1, #16
 800356a:	4803      	ldr	r0, [pc, #12]	; (8003578 <SendValueToDAC+0x64>)
 800356c:	f002 fabc 	bl	8005ae8 <HAL_GPIO_WritePin>

}
 8003570:	bf00      	nop
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40020000 	.word	0x40020000
 800357c:	20000d74 	.word	0x20000d74

08003580 <DAC_Init>:

/* @brief DAC initialization
 *
 */
void DAC_Init()
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
	SendCommandToDAC(0, 0, 0); //dummy command
 8003586:	2200      	movs	r2, #0
 8003588:	2100      	movs	r1, #0
 800358a:	2000      	movs	r0, #0
 800358c:	f7ff ff8c 	bl	80034a8 <SendCommandToDAC>
	SendCommandToDAC(5, 0xA, 0); //reset up
 8003590:	2200      	movs	r2, #0
 8003592:	210a      	movs	r1, #10
 8003594:	2005      	movs	r0, #5
 8003596:	f7ff ff87 	bl	80034a8 <SendCommandToDAC>
	SendCommandToDAC(5, 0, 0); //reset down
 800359a:	2200      	movs	r2, #0
 800359c:	2100      	movs	r1, #0
 800359e:	2005      	movs	r0, #5
 80035a0:	f7ff ff82 	bl	80034a8 <SendCommandToDAC>
	SendCommandToDAC(2, 0, 0); //sync register -> all 0
 80035a4:	2200      	movs	r2, #0
 80035a6:	2100      	movs	r1, #0
 80035a8:	2002      	movs	r0, #2
 80035aa:	f7ff ff7d 	bl	80034a8 <SendCommandToDAC>
	SendCommandToDAC(3, 0, 0); //config register -> all 0
 80035ae:	2200      	movs	r2, #0
 80035b0:	2100      	movs	r1, #0
 80035b2:	2003      	movs	r0, #3
 80035b4:	f7ff ff78 	bl	80034a8 <SendCommandToDAC>
	SendCommandToDAC(4, 0 | (1 << 8)  , 0); //gain register -> reference diveded by 2
 80035b8:	2200      	movs	r2, #0
 80035ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035be:	2004      	movs	r0, #4
 80035c0:	f7ff ff72 	bl	80034a8 <SendCommandToDAC>

	for(int i = 0; i < 8; i++)
 80035c4:	2300      	movs	r3, #0
 80035c6:	607b      	str	r3, [r7, #4]
 80035c8:	e009      	b.n	80035de <DAC_Init+0x5e>
	{
		SendValueToDAC(i, 4095); // set all DAC channels on maximum value -> minimum output voltage of power supply
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	f640 71ff 	movw	r1, #4095	; 0xfff
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff ff9e 	bl	8003514 <SendValueToDAC>
	for(int i = 0; i < 8; i++)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3301      	adds	r3, #1
 80035dc:	607b      	str	r3, [r7, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b07      	cmp	r3, #7
 80035e2:	ddf2      	ble.n	80035ca <DAC_Init+0x4a>
	}

}
 80035e4:	bf00      	nop
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <ETH_StoreIP>:
 *
 * @param ip -> ip address
 *
 */
void ETH_StoreIP(uint32_t ip)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
	MainParams.sramOffset_IP_ADDRESS = ip;
 80035f8:	4a04      	ldr	r2, [pc, #16]	; (800360c <ETH_StoreIP+0x1c>)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6093      	str	r3, [r2, #8]
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	200007fc 	.word	0x200007fc

08003610 <ETH_StoreNETMASK>:
 *
 * @param netmask -> netmask address
 *
 */
void ETH_StoreNETMASK(uint32_t netmask)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
	MainParams.sramOffset_NETMASK_ADDRESS = netmask;
 8003618:	4a04      	ldr	r2, [pc, #16]	; (800362c <ETH_StoreNETMASK+0x1c>)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	60d3      	str	r3, [r2, #12]
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	200007fc 	.word	0x200007fc

08003630 <ETH_StoreGATEWAY>:
 *
 * @param gateway -> gateway address
 *
 */
void ETH_StoreGATEWAY(uint32_t gateway)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
	MainParams.sramOffset_GATEWAY_ADDRESS = gateway;
 8003638:	4a04      	ldr	r2, [pc, #16]	; (800364c <ETH_StoreGATEWAY+0x1c>)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6113      	str	r3, [r2, #16]
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	200007fc 	.word	0x200007fc

08003650 <ETH_GetIP>:
/* @brief get ip address from sram
 *
 *
 */
uint32_t ETH_GetIP()
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
	uint32_t temp = ip_MAKEU32(myNetInfo.ip[0], myNetInfo.ip[1], myNetInfo.ip[2], myNetInfo.ip[3]);
 8003656:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <ETH_GetIP+0x34>)
 8003658:	799b      	ldrb	r3, [r3, #6]
 800365a:	061a      	lsls	r2, r3, #24
 800365c:	4b09      	ldr	r3, [pc, #36]	; (8003684 <ETH_GetIP+0x34>)
 800365e:	79db      	ldrb	r3, [r3, #7]
 8003660:	041b      	lsls	r3, r3, #16
 8003662:	431a      	orrs	r2, r3
 8003664:	4b07      	ldr	r3, [pc, #28]	; (8003684 <ETH_GetIP+0x34>)
 8003666:	7a1b      	ldrb	r3, [r3, #8]
 8003668:	021b      	lsls	r3, r3, #8
 800366a:	4313      	orrs	r3, r2
 800366c:	4a05      	ldr	r2, [pc, #20]	; (8003684 <ETH_GetIP+0x34>)
 800366e:	7a52      	ldrb	r2, [r2, #9]
 8003670:	4313      	orrs	r3, r2
 8003672:	607b      	str	r3, [r7, #4]
	return temp;
 8003674:	687b      	ldr	r3, [r7, #4]
}
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20000064 	.word	0x20000064

08003688 <ETH_GetNETMASK>:
/* @brief get netmask from sram
 *
 *
 */
uint32_t ETH_GetNETMASK()
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
	uint32_t temp = ip_MAKEU32(myNetInfo.sn[0], myNetInfo.sn[1], myNetInfo.sn[2], myNetInfo.sn[3]);
 800368e:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <ETH_GetNETMASK+0x34>)
 8003690:	7a9b      	ldrb	r3, [r3, #10]
 8003692:	061a      	lsls	r2, r3, #24
 8003694:	4b09      	ldr	r3, [pc, #36]	; (80036bc <ETH_GetNETMASK+0x34>)
 8003696:	7adb      	ldrb	r3, [r3, #11]
 8003698:	041b      	lsls	r3, r3, #16
 800369a:	431a      	orrs	r2, r3
 800369c:	4b07      	ldr	r3, [pc, #28]	; (80036bc <ETH_GetNETMASK+0x34>)
 800369e:	7b1b      	ldrb	r3, [r3, #12]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	4313      	orrs	r3, r2
 80036a4:	4a05      	ldr	r2, [pc, #20]	; (80036bc <ETH_GetNETMASK+0x34>)
 80036a6:	7b52      	ldrb	r2, [r2, #13]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	607b      	str	r3, [r7, #4]
	return temp;
 80036ac:	687b      	ldr	r3, [r7, #4]

}
 80036ae:	4618      	mov	r0, r3
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	20000064 	.word	0x20000064

080036c0 <ETH_GetGATEWAY>:
/* @brief get gateway address from sram
 *
 *
 */
uint32_t ETH_GetGATEWAY()
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
	uint32_t temp = ip_MAKEU32(myNetInfo.gw[0], myNetInfo.gw[1], myNetInfo.gw[2], myNetInfo.gw[3]);
 80036c6:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <ETH_GetGATEWAY+0x34>)
 80036c8:	7b9b      	ldrb	r3, [r3, #14]
 80036ca:	061a      	lsls	r2, r3, #24
 80036cc:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <ETH_GetGATEWAY+0x34>)
 80036ce:	7bdb      	ldrb	r3, [r3, #15]
 80036d0:	041b      	lsls	r3, r3, #16
 80036d2:	431a      	orrs	r2, r3
 80036d4:	4b07      	ldr	r3, [pc, #28]	; (80036f4 <ETH_GetGATEWAY+0x34>)
 80036d6:	7c1b      	ldrb	r3, [r3, #16]
 80036d8:	021b      	lsls	r3, r3, #8
 80036da:	4313      	orrs	r3, r2
 80036dc:	4a05      	ldr	r2, [pc, #20]	; (80036f4 <ETH_GetGATEWAY+0x34>)
 80036de:	7c52      	ldrb	r2, [r2, #17]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	607b      	str	r3, [r7, #4]
	return temp;
 80036e4:	687b      	ldr	r3, [r7, #4]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	20000064 	.word	0x20000064

080036f8 <W5500_Select>:




void W5500_Select(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80036fc:	2200      	movs	r2, #0
 80036fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003702:	4802      	ldr	r0, [pc, #8]	; (800370c <W5500_Select+0x14>)
 8003704:	f002 f9f0 	bl	8005ae8 <HAL_GPIO_WritePin>
}
 8003708:	bf00      	nop
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40020000 	.word	0x40020000

08003710 <W5500_Unselect>:

void W5500_Unselect(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8003714:	2201      	movs	r2, #1
 8003716:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800371a:	4802      	ldr	r0, [pc, #8]	; (8003724 <W5500_Unselect+0x14>)
 800371c:	f002 f9e4 	bl	8005ae8 <HAL_GPIO_WritePin>
}
 8003720:	bf00      	nop
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40020000 	.word	0x40020000

08003728 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi3, buff, len, HAL_MAX_DELAY);
 8003734:	887a      	ldrh	r2, [r7, #2]
 8003736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4803      	ldr	r0, [pc, #12]	; (800374c <W5500_ReadBuff+0x24>)
 800373e:	f003 f968 	bl	8006a12 <HAL_SPI_Receive>
}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20000e24 	.word	0x20000e24

08003750 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi3, buff, len, HAL_MAX_DELAY);
 800375c:	887a      	ldrh	r2, [r7, #2]
 800375e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	4803      	ldr	r0, [pc, #12]	; (8003774 <W5500_WriteBuff+0x24>)
 8003766:	f003 f818 	bl	800679a <HAL_SPI_Transmit>
}
 800376a:	bf00      	nop
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	20000e24 	.word	0x20000e24

08003778 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 800377e:	1dfb      	adds	r3, r7, #7
 8003780:	2101      	movs	r1, #1
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff ffd0 	bl	8003728 <W5500_ReadBuff>
    return byte;
 8003788:	79fb      	ldrb	r3, [r7, #7]
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}

08003792 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	b082      	sub	sp, #8
 8003796:	af00      	add	r7, sp, #0
 8003798:	4603      	mov	r3, r0
 800379a:	71fb      	strb	r3, [r7, #7]
    W5500_WriteBuff(&byte, sizeof(byte));
 800379c:	1dfb      	adds	r3, r7, #7
 800379e:	2101      	movs	r1, #1
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff ffd5 	bl	8003750 <W5500_WriteBuff>
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <ETH_SendSetting>:
/* @brief send setting of ethernet
 *
 *
 */
void ETH_SendSetting()
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	af00      	add	r7, sp, #0
	SendCommunication_u32(cmd_ip_get_myip, ETH_GetIP());
 80037b2:	f7ff ff4d 	bl	8003650 <ETH_GetIP>
 80037b6:	4603      	mov	r3, r0
 80037b8:	4619      	mov	r1, r3
 80037ba:	201d      	movs	r0, #29
 80037bc:	f7fe faa0 	bl	8001d00 <SendCommunication_u32>
	SendCommunication_u32(cmd_ip_get_mymask, ETH_GetNETMASK());
 80037c0:	f7ff ff62 	bl	8003688 <ETH_GetNETMASK>
 80037c4:	4603      	mov	r3, r0
 80037c6:	4619      	mov	r1, r3
 80037c8:	201e      	movs	r0, #30
 80037ca:	f7fe fa99 	bl	8001d00 <SendCommunication_u32>
	SendCommunication_u32(cmd_ip_get_mygatew, ETH_GetGATEWAY());
 80037ce:	f7ff ff77 	bl	80036c0 <ETH_GetGATEWAY>
 80037d2:	4603      	mov	r3, r0
 80037d4:	4619      	mov	r1, r3
 80037d6:	201f      	movs	r0, #31
 80037d8:	f7fe fa92 	bl	8001d00 <SendCommunication_u32>
}
 80037dc:	bf00      	nop
 80037de:	bd80      	pop	{r7, pc}

080037e0 <ETH_load_ip>:




void ETH_load_ip()
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
	uint32_t x;

		x = MainParams.sramOffset_IP_ADDRESS;
 80037e6:	4b24      	ldr	r3, [pc, #144]	; (8003878 <ETH_load_ip+0x98>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	607b      	str	r3, [r7, #4]
		myNetInfo.ip[0] = ip_GET8(x,0);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	0e1b      	lsrs	r3, r3, #24
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	4b22      	ldr	r3, [pc, #136]	; (800387c <ETH_load_ip+0x9c>)
 80037f4:	719a      	strb	r2, [r3, #6]
		myNetInfo.ip[1] = ip_GET8(x,1);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	0c1b      	lsrs	r3, r3, #16
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	4b1f      	ldr	r3, [pc, #124]	; (800387c <ETH_load_ip+0x9c>)
 80037fe:	71da      	strb	r2, [r3, #7]
		myNetInfo.ip[2] = ip_GET8(x,2);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	0a1b      	lsrs	r3, r3, #8
 8003804:	b2da      	uxtb	r2, r3
 8003806:	4b1d      	ldr	r3, [pc, #116]	; (800387c <ETH_load_ip+0x9c>)
 8003808:	721a      	strb	r2, [r3, #8]
		myNetInfo.ip[3] = ip_GET8(x,3);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	b2da      	uxtb	r2, r3
 800380e:	4b1b      	ldr	r3, [pc, #108]	; (800387c <ETH_load_ip+0x9c>)
 8003810:	725a      	strb	r2, [r3, #9]

		x = MainParams.sramOffset_NETMASK_ADDRESS;
 8003812:	4b19      	ldr	r3, [pc, #100]	; (8003878 <ETH_load_ip+0x98>)
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	607b      	str	r3, [r7, #4]
		myNetInfo.sn[0] = ip_GET8(x,0);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	0e1b      	lsrs	r3, r3, #24
 800381c:	b2da      	uxtb	r2, r3
 800381e:	4b17      	ldr	r3, [pc, #92]	; (800387c <ETH_load_ip+0x9c>)
 8003820:	729a      	strb	r2, [r3, #10]
		myNetInfo.sn[1] = ip_GET8(x,1);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	0c1b      	lsrs	r3, r3, #16
 8003826:	b2da      	uxtb	r2, r3
 8003828:	4b14      	ldr	r3, [pc, #80]	; (800387c <ETH_load_ip+0x9c>)
 800382a:	72da      	strb	r2, [r3, #11]
		myNetInfo.sn[2] = ip_GET8(x,2);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	0a1b      	lsrs	r3, r3, #8
 8003830:	b2da      	uxtb	r2, r3
 8003832:	4b12      	ldr	r3, [pc, #72]	; (800387c <ETH_load_ip+0x9c>)
 8003834:	731a      	strb	r2, [r3, #12]
		myNetInfo.sn[3] = ip_GET8(x,3);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	b2da      	uxtb	r2, r3
 800383a:	4b10      	ldr	r3, [pc, #64]	; (800387c <ETH_load_ip+0x9c>)
 800383c:	735a      	strb	r2, [r3, #13]

		x = MainParams.sramOffset_GATEWAY_ADDRESS;
 800383e:	4b0e      	ldr	r3, [pc, #56]	; (8003878 <ETH_load_ip+0x98>)
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	607b      	str	r3, [r7, #4]
		myNetInfo.gw[0] = ip_GET8(x,0);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	0e1b      	lsrs	r3, r3, #24
 8003848:	b2da      	uxtb	r2, r3
 800384a:	4b0c      	ldr	r3, [pc, #48]	; (800387c <ETH_load_ip+0x9c>)
 800384c:	739a      	strb	r2, [r3, #14]
		myNetInfo.gw[1] = ip_GET8(x,1);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	0c1b      	lsrs	r3, r3, #16
 8003852:	b2da      	uxtb	r2, r3
 8003854:	4b09      	ldr	r3, [pc, #36]	; (800387c <ETH_load_ip+0x9c>)
 8003856:	73da      	strb	r2, [r3, #15]
		myNetInfo.gw[2] = ip_GET8(x,2);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	0a1b      	lsrs	r3, r3, #8
 800385c:	b2da      	uxtb	r2, r3
 800385e:	4b07      	ldr	r3, [pc, #28]	; (800387c <ETH_load_ip+0x9c>)
 8003860:	741a      	strb	r2, [r3, #16]
		myNetInfo.gw[3] = ip_GET8(x,3);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b05      	ldr	r3, [pc, #20]	; (800387c <ETH_load_ip+0x9c>)
 8003868:	745a      	strb	r2, [r3, #17]

}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	200007fc 	.word	0x200007fc
 800387c:	20000064 	.word	0x20000064

08003880 <ETH_udp_Init>:
/* @brief UDP communication init
 *
 *
 */
void ETH_udp_Init()
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
	//---------udp_connect(udp_pcb, IP46_ADDR_ANY(), UDP_PORT);
	//udp_connect(udp_pcb, &endpoint_ip, UDP_PORT);

	//---------udp_recv(udp_pcb, UDP_Receiver_handler, NULL);

    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8003886:	4915      	ldr	r1, [pc, #84]	; (80038dc <ETH_udp_Init+0x5c>)
 8003888:	4815      	ldr	r0, [pc, #84]	; (80038e0 <ETH_udp_Init+0x60>)
 800388a:	f005 fad9 	bl	8008e40 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 800388e:	4915      	ldr	r1, [pc, #84]	; (80038e4 <ETH_udp_Init+0x64>)
 8003890:	4815      	ldr	r0, [pc, #84]	; (80038e8 <ETH_udp_Init+0x68>)
 8003892:	f005 fafb 	bl	8008e8c <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8003896:	4915      	ldr	r1, [pc, #84]	; (80038ec <ETH_udp_Init+0x6c>)
 8003898:	4815      	ldr	r0, [pc, #84]	; (80038f0 <ETH_udp_Init+0x70>)
 800389a:	f005 fb23 	bl	8008ee4 <reg_wizchip_spiburst_cbfunc>

    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 800389e:	4a15      	ldr	r2, [pc, #84]	; (80038f4 <ETH_udp_Init+0x74>)
 80038a0:	1d3b      	adds	r3, r7, #4
 80038a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80038a6:	e883 0003 	stmia.w	r3, {r0, r1}
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 80038aa:	1d3a      	adds	r2, r7, #4
 80038ac:	1d3b      	adds	r3, r7, #4
 80038ae:	4611      	mov	r1, r2
 80038b0:	4618      	mov	r0, r3
 80038b2:	f005 fb8f 	bl	8008fd4 <wizchip_init>


    ETH_load_ip();
 80038b6:	f7ff ff93 	bl	80037e0 <ETH_load_ip>

    wizchip_setnetinfo(&myNetInfo);
 80038ba:	480f      	ldr	r0, [pc, #60]	; (80038f8 <ETH_udp_Init+0x78>)
 80038bc:	f005 fc16 	bl	80090ec <wizchip_setnetinfo>

    int udp_socket = socket(UDP_SOCKET, Sn_MR_UDP, UDP_PORT, SF_IO_NONBLOCK);
 80038c0:	2301      	movs	r3, #1
 80038c2:	f241 328d 	movw	r2, #5005	; 0x138d
 80038c6:	2102      	movs	r1, #2
 80038c8:	2003      	movs	r0, #3
 80038ca:	f004 fdad 	bl	8008428 <socket>
 80038ce:	4603      	mov	r3, r0
 80038d0:	60fb      	str	r3, [r7, #12]

    if(udp_socket != UDP_SOCKET)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2b03      	cmp	r3, #3
    {
    	//error
    	return;
    }

}
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	08003711 	.word	0x08003711
 80038e0:	080036f9 	.word	0x080036f9
 80038e4:	08003793 	.word	0x08003793
 80038e8:	08003779 	.word	0x08003779
 80038ec:	08003751 	.word	0x08003751
 80038f0:	08003729 	.word	0x08003729
 80038f4:	0800d904 	.word	0x0800d904
 80038f8:	20000064 	.word	0x20000064

080038fc <ETH_udp_StoreEndpoint>:
/* @brief store UDP endpoint
 *
 *
 */
void ETH_udp_StoreEndpoint()
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
	//---------endpoint_ip = last_message_ip;
	//---------udp_connect(udp_pcb, &endpoint_ip, UDP_PORT);

		//memcpy(endpoint_ip,last_message_ip,sizeof(last_message_ip));

	endpoint_ip[0] = last_message_ip[0];
 8003900:	4b0a      	ldr	r3, [pc, #40]	; (800392c <ETH_udp_StoreEndpoint+0x30>)
 8003902:	781a      	ldrb	r2, [r3, #0]
 8003904:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <ETH_udp_StoreEndpoint+0x34>)
 8003906:	701a      	strb	r2, [r3, #0]
	endpoint_ip[1] = last_message_ip[1];
 8003908:	4b08      	ldr	r3, [pc, #32]	; (800392c <ETH_udp_StoreEndpoint+0x30>)
 800390a:	785a      	ldrb	r2, [r3, #1]
 800390c:	4b08      	ldr	r3, [pc, #32]	; (8003930 <ETH_udp_StoreEndpoint+0x34>)
 800390e:	705a      	strb	r2, [r3, #1]
	endpoint_ip[2] = last_message_ip[2];
 8003910:	4b06      	ldr	r3, [pc, #24]	; (800392c <ETH_udp_StoreEndpoint+0x30>)
 8003912:	789a      	ldrb	r2, [r3, #2]
 8003914:	4b06      	ldr	r3, [pc, #24]	; (8003930 <ETH_udp_StoreEndpoint+0x34>)
 8003916:	709a      	strb	r2, [r3, #2]
	endpoint_ip[3] = last_message_ip[3];
 8003918:	4b04      	ldr	r3, [pc, #16]	; (800392c <ETH_udp_StoreEndpoint+0x30>)
 800391a:	78da      	ldrb	r2, [r3, #3]
 800391c:	4b04      	ldr	r3, [pc, #16]	; (8003930 <ETH_udp_StoreEndpoint+0x34>)
 800391e:	70da      	strb	r2, [r3, #3]

}
 8003920:	bf00      	nop
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	200008b4 	.word	0x200008b4
 8003930:	200008b8 	.word	0x200008b8

08003934 <ETH_udp_Transmit>:
 * @param *pData -> pointer on data to send
 * @param Size -> Size od data
 *
 */
void ETH_udp_Transmit(uint8_t *pData, uint16_t Size)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af02      	add	r7, sp, #8
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	807b      	strh	r3, [r7, #2]
	uint16_t sentsize;

    //while(!(sentsize >= Size))
    //{

    	ret = sendto(UDP_SOCKET, pData, Size, endpoint_ip, UDP_PORT);
 8003940:	887a      	ldrh	r2, [r7, #2]
 8003942:	f241 338d 	movw	r3, #5005	; 0x138d
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	4b04      	ldr	r3, [pc, #16]	; (800395c <ETH_udp_Transmit+0x28>)
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	2003      	movs	r0, #3
 800394e:	f004 feef 	bl	8008730 <sendto>
 8003952:	60f8      	str	r0, [r7, #12]

    	//sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
    //}


}
 8003954:	bf00      	nop
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	200008b8 	.word	0x200008b8

08003960 <ETH_udp_Receive>:


void ETH_udp_Receive()
{
 8003960:	b580      	push	{r7, lr}
 8003962:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8003966:	b086      	sub	sp, #24
 8003968:	af02      	add	r7, sp, #8
	int32_t  ret;
	uint8_t buf[DATA_BUF_SIZE];
	uint16_t size;
	uint16_t destport;

	size = getSn_RX_RSR(UDP_SOCKET);
 800396a:	2003      	movs	r0, #3
 800396c:	f004 fc11 	bl	8008192 <getSn_RX_RSR>
 8003970:	4603      	mov	r3, r0
 8003972:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003976:	f102 020e 	add.w	r2, r2, #14
 800397a:	8013      	strh	r3, [r2, #0]

    if(size > 0)
 800397c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003980:	f103 030e 	add.w	r3, r3, #14
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d042      	beq.n	8003a10 <ETH_udp_Receive+0xb0>
    {

    	if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 800398a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800398e:	f103 030e 	add.w	r3, r3, #14
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003998:	d906      	bls.n	80039a8 <ETH_udp_Receive+0x48>
 800399a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800399e:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80039a2:	f102 020e 	add.w	r2, r2, #14
 80039a6:	8013      	strh	r3, [r2, #0]

    	ret = recvfrom(UDP_SOCKET, buf, size, last_message_ip, (uint16_t*)&destport);
 80039a8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80039ac:	f103 030e 	add.w	r3, r3, #14
 80039b0:	881a      	ldrh	r2, [r3, #0]
 80039b2:	f107 0110 	add.w	r1, r7, #16
 80039b6:	3908      	subs	r1, #8
 80039b8:	f107 0310 	add.w	r3, r7, #16
 80039bc:	3b0a      	subs	r3, #10
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	4b16      	ldr	r3, [pc, #88]	; (8003a1c <ETH_udp_Receive+0xbc>)
 80039c2:	2003      	movs	r0, #3
 80039c4:	f004 ffea 	bl	800899c <recvfrom>
 80039c8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80039cc:	f103 0308 	add.w	r3, r3, #8
 80039d0:	6018      	str	r0, [r3, #0]

    	//ETH_udp_Transmit(buf, size);

    	if(ret <= 0)
 80039d2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80039d6:	f103 0308 	add.w	r3, r3, #8
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	dd16      	ble.n	8003a0e <ETH_udp_Receive+0xae>
    	{
    		return;
    	}

    	size = (uint16_t) ret;
 80039e0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80039e4:	f103 0308 	add.w	r3, r3, #8
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80039ee:	f102 020e 	add.w	r2, r2, #14
 80039f2:	8013      	strh	r3, [r2, #0]


    	ETH_WriteBuffer(buf, size);
 80039f4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80039f8:	f103 030e 	add.w	r3, r3, #14
 80039fc:	881a      	ldrh	r2, [r3, #0]
 80039fe:	f107 0310 	add.w	r3, r7, #16
 8003a02:	3b08      	subs	r3, #8
 8003a04:	4611      	mov	r1, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe fb48 	bl	800209c <ETH_WriteBuffer>
 8003a0c:	e000      	b.n	8003a10 <ETH_udp_Receive+0xb0>
    		return;
 8003a0e:	bf00      	nop

    	//ETH_udp_Transmit(buf, size);
    }


}
 8003a10:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	200008b4 	.word	0x200008b4

08003a20 <Uart_BufferNotEmpty>:
 *
 * @return true -> FIFO is not empty
 * @return false -> FIFO is empty
 */
bool Uart_BufferNotEmpty()
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
	return (uart_bcounter > 0);
 8003a24:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <Uart_BufferNotEmpty+0x1c>)
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bf14      	ite	ne
 8003a2c:	2301      	movne	r3, #1
 8003a2e:	2300      	moveq	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	20000cc0 	.word	0x20000cc0

08003a40 <Uart_WriteBuffer>:

/* @brief function add data byte to FIFO
 *
 */
void Uart_WriteBuffer(uint8_t data)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	71fb      	strb	r3, [r7, #7]
	if(uart_bcounter >= (uart_buffer_size-1)) return;
 8003a4a:	4b13      	ldr	r3, [pc, #76]	; (8003a98 <Uart_WriteBuffer+0x58>)
 8003a4c:	881b      	ldrh	r3, [r3, #0]
 8003a4e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d81a      	bhi.n	8003a8c <Uart_WriteBuffer+0x4c>

	uart_buffer[uart_wpointer] = data;
 8003a56:	4b11      	ldr	r3, [pc, #68]	; (8003a9c <Uart_WriteBuffer+0x5c>)
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4a10      	ldr	r2, [pc, #64]	; (8003aa0 <Uart_WriteBuffer+0x60>)
 8003a5e:	79fb      	ldrb	r3, [r7, #7]
 8003a60:	5453      	strb	r3, [r2, r1]
	uart_bcounter++;
 8003a62:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <Uart_WriteBuffer+0x58>)
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	3301      	adds	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	4b0b      	ldr	r3, [pc, #44]	; (8003a98 <Uart_WriteBuffer+0x58>)
 8003a6c:	801a      	strh	r2, [r3, #0]
	uart_wpointer++;
 8003a6e:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <Uart_WriteBuffer+0x5c>)
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	3301      	adds	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <Uart_WriteBuffer+0x5c>)
 8003a78:	801a      	strh	r2, [r3, #0]
	if(uart_wpointer > uart_buffer_size - 1) uart_wpointer = 0;
 8003a7a:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <Uart_WriteBuffer+0x5c>)
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a82:	d304      	bcc.n	8003a8e <Uart_WriteBuffer+0x4e>
 8003a84:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <Uart_WriteBuffer+0x5c>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	801a      	strh	r2, [r3, #0]
 8003a8a:	e000      	b.n	8003a8e <Uart_WriteBuffer+0x4e>
	if(uart_bcounter >= (uart_buffer_size-1)) return;
 8003a8c:	bf00      	nop

}
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	20000cc0 	.word	0x20000cc0
 8003a9c:	20000cbc 	.word	0x20000cbc
 8003aa0:	200008bc 	.word	0x200008bc

08003aa4 <Uart_ReadBuffer>:
/* @brief read data byte from FIFO
 *
 * @return one element uint8_t data 
 */
uint8_t Uart_ReadBuffer()
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
	uint8_t data = uart_buffer[uart_rpointer];
 8003aaa:	4b10      	ldr	r3, [pc, #64]	; (8003aec <Uart_ReadBuffer+0x48>)
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <Uart_ReadBuffer+0x4c>)
 8003ab2:	5c9b      	ldrb	r3, [r3, r2]
 8003ab4:	71fb      	strb	r3, [r7, #7]
	uart_bcounter--;
 8003ab6:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <Uart_ReadBuffer+0x50>)
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <Uart_ReadBuffer+0x50>)
 8003ac0:	801a      	strh	r2, [r3, #0]
	uart_rpointer++;
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <Uart_ReadBuffer+0x48>)
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	4b08      	ldr	r3, [pc, #32]	; (8003aec <Uart_ReadBuffer+0x48>)
 8003acc:	801a      	strh	r2, [r3, #0]
	if(uart_rpointer > uart_buffer_size - 1) uart_rpointer = 0;
 8003ace:	4b07      	ldr	r3, [pc, #28]	; (8003aec <Uart_ReadBuffer+0x48>)
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad6:	d302      	bcc.n	8003ade <Uart_ReadBuffer+0x3a>
 8003ad8:	4b04      	ldr	r3, [pc, #16]	; (8003aec <Uart_ReadBuffer+0x48>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	801a      	strh	r2, [r3, #0]

	return data;
 8003ade:	79fb      	ldrb	r3, [r7, #7]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	20000cbe 	.word	0x20000cbe
 8003af0:	200008bc 	.word	0x200008bc
 8003af4:	20000cc0 	.word	0x20000cc0

08003af8 <Uart_Send>:
 * @param data -> pointer on data buffer with message
 * @param size -> lenght of data buffer
 *
 */
void Uart_Send(char *data, uint16_t size)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	460b      	mov	r3, r1
 8003b02:	807b      	strh	r3, [r7, #2]

	HAL_UART_Transmit(&huart2, (uint8_t *)data, size,100);
 8003b04:	887a      	ldrh	r2, [r7, #2]
 8003b06:	2364      	movs	r3, #100	; 0x64
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	4803      	ldr	r0, [pc, #12]	; (8003b18 <Uart_Send+0x20>)
 8003b0c:	f003 fe27 	bl	800775e <HAL_UART_Transmit>
}
 8003b10:	bf00      	nop
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	20000f20 	.word	0x20000f20

08003b1c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003b22:	463b      	mov	r3, r7
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003b2e:	4b21      	ldr	r3, [pc, #132]	; (8003bb4 <MX_ADC1_Init+0x98>)
 8003b30:	4a21      	ldr	r2, [pc, #132]	; (8003bb8 <MX_ADC1_Init+0x9c>)
 8003b32:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003b34:	4b1f      	ldr	r3, [pc, #124]	; (8003bb4 <MX_ADC1_Init+0x98>)
 8003b36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b3a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003b3c:	4b1d      	ldr	r3, [pc, #116]	; (8003bb4 <MX_ADC1_Init+0x98>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003b42:	4b1c      	ldr	r3, [pc, #112]	; (8003bb4 <MX_ADC1_Init+0x98>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003b48:	4b1a      	ldr	r3, [pc, #104]	; (8003bb4 <MX_ADC1_Init+0x98>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003b4e:	4b19      	ldr	r3, [pc, #100]	; (8003bb4 <MX_ADC1_Init+0x98>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003b56:	4b17      	ldr	r3, [pc, #92]	; (8003bb4 <MX_ADC1_Init+0x98>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003b5c:	4b15      	ldr	r3, [pc, #84]	; (8003bb4 <MX_ADC1_Init+0x98>)
 8003b5e:	4a17      	ldr	r2, [pc, #92]	; (8003bbc <MX_ADC1_Init+0xa0>)
 8003b60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b62:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <MX_ADC1_Init+0x98>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003b68:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <MX_ADC1_Init+0x98>)
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003b6e:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <MX_ADC1_Init+0x98>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003b76:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <MX_ADC1_Init+0x98>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003b7c:	480d      	ldr	r0, [pc, #52]	; (8003bb4 <MX_ADC1_Init+0x98>)
 8003b7e:	f000 ff9f 	bl	8004ac0 <HAL_ADC_Init>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003b88:	f000 fb08 	bl	800419c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003b90:	2301      	movs	r3, #1
 8003b92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003b98:	463b      	mov	r3, r7
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	4805      	ldr	r0, [pc, #20]	; (8003bb4 <MX_ADC1_Init+0x98>)
 8003b9e:	f000 ffd3 	bl	8004b48 <HAL_ADC_ConfigChannel>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003ba8:	f000 faf8 	bl	800419c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003bac:	bf00      	nop
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20000cc4 	.word	0x20000cc4
 8003bb8:	40012000 	.word	0x40012000
 8003bbc:	0f000001 	.word	0x0f000001

08003bc0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	; 0x28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc8:	f107 0314 	add.w	r3, r7, #20
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	60da      	str	r2, [r3, #12]
 8003bd6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a17      	ldr	r2, [pc, #92]	; (8003c3c <HAL_ADC_MspInit+0x7c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d127      	bne.n	8003c32 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003be2:	2300      	movs	r3, #0
 8003be4:	613b      	str	r3, [r7, #16]
 8003be6:	4b16      	ldr	r3, [pc, #88]	; (8003c40 <HAL_ADC_MspInit+0x80>)
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	4a15      	ldr	r2, [pc, #84]	; (8003c40 <HAL_ADC_MspInit+0x80>)
 8003bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bf2:	4b13      	ldr	r3, [pc, #76]	; (8003c40 <HAL_ADC_MspInit+0x80>)
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfa:	613b      	str	r3, [r7, #16]
 8003bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <HAL_ADC_MspInit+0x80>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	4a0e      	ldr	r2, [pc, #56]	; (8003c40 <HAL_ADC_MspInit+0x80>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c0e:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <HAL_ADC_MspInit+0x80>)
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c26:	f107 0314 	add.w	r3, r7, #20
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4805      	ldr	r0, [pc, #20]	; (8003c44 <HAL_ADC_MspInit+0x84>)
 8003c2e:	f001 fdbf 	bl	80057b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003c32:	bf00      	nop
 8003c34:	3728      	adds	r7, #40	; 0x28
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40012000 	.word	0x40012000
 8003c40:	40023800 	.word	0x40023800
 8003c44:	40020000 	.word	0x40020000

08003c48 <Flash_GetSector>:

/*
 * Function returns Flash Sector by given address
 */
uint32_t Flash_GetSector(uint32_t StartSectorAddress)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]

  uint32_t sector = 0;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]

  if((StartSectorAddress < 0x08003FFF) && (StartSectorAddress >= 0x08000000))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a2e      	ldr	r2, [pc, #184]	; (8003d10 <Flash_GetSector+0xc8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d806      	bhi.n	8003c6a <Flash_GetSector+0x22>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c62:	d302      	bcc.n	8003c6a <Flash_GetSector+0x22>
	{
	  sector = FLASH_SECTOR_0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	e04b      	b.n	8003d02 <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x08007FFF) && (StartSectorAddress >= 0x08004000))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a29      	ldr	r2, [pc, #164]	; (8003d14 <Flash_GetSector+0xcc>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d806      	bhi.n	8003c80 <Flash_GetSector+0x38>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a28      	ldr	r2, [pc, #160]	; (8003d18 <Flash_GetSector+0xd0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d302      	bcc.n	8003c80 <Flash_GetSector+0x38>
	{
	  sector = FLASH_SECTOR_1;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	e040      	b.n	8003d02 <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0800BFFF) && (StartSectorAddress >= 0x08008000))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a26      	ldr	r2, [pc, #152]	; (8003d1c <Flash_GetSector+0xd4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d806      	bhi.n	8003c96 <Flash_GetSector+0x4e>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a25      	ldr	r2, [pc, #148]	; (8003d20 <Flash_GetSector+0xd8>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d302      	bcc.n	8003c96 <Flash_GetSector+0x4e>
	{
	  sector = FLASH_SECTOR_2;
 8003c90:	2302      	movs	r3, #2
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	e035      	b.n	8003d02 <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0800FFFF) && (StartSectorAddress >= 0x0800C000))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a22      	ldr	r2, [pc, #136]	; (8003d24 <Flash_GetSector+0xdc>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d206      	bcs.n	8003cac <Flash_GetSector+0x64>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a21      	ldr	r2, [pc, #132]	; (8003d28 <Flash_GetSector+0xe0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d302      	bcc.n	8003cac <Flash_GetSector+0x64>
	{
	  sector = FLASH_SECTOR_3;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	e02a      	b.n	8003d02 <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0801FFFF) && (StartSectorAddress >= 0x08010000))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a1f      	ldr	r2, [pc, #124]	; (8003d2c <Flash_GetSector+0xe4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d206      	bcs.n	8003cc2 <Flash_GetSector+0x7a>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a1b      	ldr	r2, [pc, #108]	; (8003d24 <Flash_GetSector+0xdc>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d902      	bls.n	8003cc2 <Flash_GetSector+0x7a>
	{
	  sector = FLASH_SECTOR_4;
 8003cbc:	2304      	movs	r3, #4
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	e01f      	b.n	8003d02 <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0803FFFF) && (StartSectorAddress >= 0x08020000))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a1a      	ldr	r2, [pc, #104]	; (8003d30 <Flash_GetSector+0xe8>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d206      	bcs.n	8003cd8 <Flash_GetSector+0x90>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a17      	ldr	r2, [pc, #92]	; (8003d2c <Flash_GetSector+0xe4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d902      	bls.n	8003cd8 <Flash_GetSector+0x90>
	{
	  sector = FLASH_SECTOR_5;
 8003cd2:	2305      	movs	r3, #5
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	e014      	b.n	8003d02 <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0805FFFF) && (StartSectorAddress >= 0x08040000))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a16      	ldr	r2, [pc, #88]	; (8003d34 <Flash_GetSector+0xec>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d206      	bcs.n	8003cee <Flash_GetSector+0xa6>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a13      	ldr	r2, [pc, #76]	; (8003d30 <Flash_GetSector+0xe8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d902      	bls.n	8003cee <Flash_GetSector+0xa6>
	{
	  sector = FLASH_SECTOR_6;
 8003ce8:	2306      	movs	r3, #6
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	e009      	b.n	8003d02 <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0807FFFF) && (StartSectorAddress >= 0x08060000))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a11      	ldr	r2, [pc, #68]	; (8003d38 <Flash_GetSector+0xf0>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d205      	bcs.n	8003d02 <Flash_GetSector+0xba>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a0e      	ldr	r2, [pc, #56]	; (8003d34 <Flash_GetSector+0xec>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <Flash_GetSector+0xba>
	{
	  sector = FLASH_SECTOR_7;
 8003cfe:	2307      	movs	r3, #7
 8003d00:	60fb      	str	r3, [r7, #12]
	}

  return sector;
 8003d02:	68fb      	ldr	r3, [r7, #12]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	08003ffe 	.word	0x08003ffe
 8003d14:	08007ffe 	.word	0x08007ffe
 8003d18:	08004000 	.word	0x08004000
 8003d1c:	0800bffe 	.word	0x0800bffe
 8003d20:	08008000 	.word	0x08008000
 8003d24:	0800ffff 	.word	0x0800ffff
 8003d28:	0800c000 	.word	0x0800c000
 8003d2c:	0801ffff 	.word	0x0801ffff
 8003d30:	0803ffff 	.word	0x0803ffff
 8003d34:	0805ffff 	.word	0x0805ffff
 8003d38:	0807ffff 	.word	0x0807ffff

08003d3c <Flash_WriteData>:
 * Function writes given number of uint32_t words to given flash address
 * Function unlocks flash, erases needed sector(s), flash given memmory and locks Flash
 * Function returns 0 if there was no error
 */
uint32_t Flash_WriteData (uint32_t StartSectorAddress, uint32_t *Data, uint16_t NumOfWords)
{
 8003d3c:	b5b0      	push	{r4, r5, r7, lr}
 8003d3e:	b08a      	sub	sp, #40	; 0x28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80fb      	strh	r3, [r7, #6]
  static FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t loc_Error;

  /* Unlock the Flash to enable the flash control register access */
  HAL_FLASH_Unlock();
 8003d4a:	f001 fa91 	bl	8005270 <HAL_FLASH_Unlock>


  /* Get the number of sector to erase from 1st sector */

  uint32_t StartSector = Flash_GetSector(StartSectorAddress);
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f7ff ff7a 	bl	8003c48 <Flash_GetSector>
 8003d54:	6238      	str	r0, [r7, #32]
  uint32_t EndSectorAddress = StartSectorAddress + NumOfWords*4;
 8003d56:	88fb      	ldrh	r3, [r7, #6]
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4413      	add	r3, r2
 8003d60:	61fb      	str	r3, [r7, #28]
  uint32_t EndSector = Flash_GetSector(EndSectorAddress);
 8003d62:	69f8      	ldr	r0, [r7, #28]
 8003d64:	f7ff ff70 	bl	8003c48 <Flash_GetSector>
 8003d68:	61b8      	str	r0, [r7, #24]

  /* Fill EraseInit structure*/
  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8003d6a:	4b23      	ldr	r3, [pc, #140]	; (8003df8 <Flash_WriteData+0xbc>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8003d70:	4b21      	ldr	r3, [pc, #132]	; (8003df8 <Flash_WriteData+0xbc>)
 8003d72:	2202      	movs	r2, #2
 8003d74:	611a      	str	r2, [r3, #16]
  EraseInitStruct.Sector        = StartSector;
 8003d76:	4a20      	ldr	r2, [pc, #128]	; (8003df8 <Flash_WriteData+0xbc>)
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	6093      	str	r3, [r2, #8]
  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	3301      	adds	r3, #1
 8003d84:	4a1c      	ldr	r2, [pc, #112]	; (8003df8 <Flash_WriteData+0xbc>)
 8003d86:	60d3      	str	r3, [r2, #12]

  /* Erase the user Flash area with given setting */
  /* Note!: Erase is done on whole sector/page */
  if (HAL_FLASHEx_Erase(&EraseInitStruct, &loc_Error) != HAL_OK)
 8003d88:	f107 0314 	add.w	r3, r7, #20
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	481a      	ldr	r0, [pc, #104]	; (8003df8 <Flash_WriteData+0xbc>)
 8003d90:	f001 fbec 	bl	800556c <HAL_FLASHEx_Erase>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <Flash_WriteData+0x66>
  {
	  return HAL_FLASH_GetError ();
 8003d9a:	f001 fa9b 	bl	80052d4 <HAL_FLASH_GetError>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	e025      	b.n	8003dee <Flash_WriteData+0xb2>
  }

  /* Program the user Flash area word by word*/

  for (uint16_t i = 0;  i < NumOfWords; i++) 
 8003da2:	2300      	movs	r3, #0
 8003da4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003da6:	e01b      	b.n	8003de0 <Flash_WriteData+0xa4>
  {


	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[i]) == HAL_OK)
 8003da8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	4413      	add	r3, r2
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2200      	movs	r2, #0
 8003db4:	461c      	mov	r4, r3
 8003db6:	4615      	mov	r5, r2
 8003db8:	4622      	mov	r2, r4
 8003dba:	462b      	mov	r3, r5
 8003dbc:	68f9      	ldr	r1, [r7, #12]
 8003dbe:	2002      	movs	r0, #2
 8003dc0:	f001 fa02 	bl	80051c8 <HAL_FLASH_Program>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d103      	bne.n	8003dd2 <Flash_WriteData+0x96>
    {
        //Shift address by 4 (Word Size)
    	StartSectorAddress += 4;  // StartPageAddress += 2 for half word and 8 for double word
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	e003      	b.n	8003dda <Flash_WriteData+0x9e>
    	//i++;
    }
    else
    {
      /* Error occurred while writing data in Flash memory*/
      return HAL_FLASH_GetError ();
 8003dd2:	f001 fa7f 	bl	80052d4 <HAL_FLASH_GetError>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	e009      	b.n	8003dee <Flash_WriteData+0xb2>
  for (uint16_t i = 0;  i < NumOfWords; i++) 
 8003dda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ddc:	3301      	adds	r3, #1
 8003dde:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003de0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003de2:	88fb      	ldrh	r3, [r7, #6]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d3df      	bcc.n	8003da8 <Flash_WriteData+0x6c>
    }
  }

  /* Lock the Flash to disable the flash control register access */
  HAL_FLASH_Lock();
 8003de8:	f001 fa64 	bl	80052b4 <HAL_FLASH_Lock>

  return 0;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3728      	adds	r7, #40	; 0x28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bdb0      	pop	{r4, r5, r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000d0c 	.word	0x20000d0c

08003dfc <Flash_ReadParamStruct>:
/*
 * Read Data from fixed address in sector 7 given by BASE_PARAM_ADR
 * Data are read to FlashSectorParams struct
 */
void Flash_ReadParamStruct(FlashSectorParams* s_data)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUMBER_OF_PARAMS; i++)
 8003e04:	2300      	movs	r3, #0
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	e00f      	b.n	8003e2a <Flash_ReadParamStruct+0x2e>
	{
		*((uint32_t*)(s_data)+i)=*((uint32_t*)(BASE_PARAM_ADR+4*i));
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003e10:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4619      	mov	r1, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	4413      	add	r3, r2
 8003e20:	680a      	ldr	r2, [r1, #0]
 8003e22:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUMBER_OF_PARAMS; i++)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	3301      	adds	r3, #1
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b16      	cmp	r3, #22
 8003e2e:	d9ec      	bls.n	8003e0a <Flash_ReadParamStruct+0xe>
	}
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
	...

08003e40 <Flash_WriteParamStruct>:
 * Write Data to fixed address in sector 7 given by BASE_PARAM_ADR
 * Write data have FlashSectorParams struct format.. number of parametrs are given by NUMBER_OF_PARAMS define
 * Function returns 0 if there was no error
 */
uint32_t Flash_WriteParamStruct(FlashSectorParams ParamsData)
{
 8003e40:	b084      	sub	sp, #16
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b082      	sub	sp, #8
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	f107 0c10 	add.w	ip, r7, #16
 8003e4c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 uint32_t loc_Error;

	 loc_Error = Flash_WriteData(BASE_PARAM_ADR,(uint32_t*)&ParamsData,NUMBER_OF_PARAMS);
 8003e50:	2217      	movs	r2, #23
 8003e52:	f107 0110 	add.w	r1, r7, #16
 8003e56:	4806      	ldr	r0, [pc, #24]	; (8003e70 <Flash_WriteParamStruct+0x30>)
 8003e58:	f7ff ff70 	bl	8003d3c <Flash_WriteData>
 8003e5c:	6078      	str	r0, [r7, #4]

	 return loc_Error;
 8003e5e:	687b      	ldr	r3, [r7, #4]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e6a:	b004      	add	sp, #16
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	08060000 	.word	0x08060000

08003e74 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e7a:	f107 030c 	add.w	r3, r7, #12
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	605a      	str	r2, [r3, #4]
 8003e84:	609a      	str	r2, [r3, #8]
 8003e86:	60da      	str	r2, [r3, #12]
 8003e88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	4b42      	ldr	r3, [pc, #264]	; (8003f98 <MX_GPIO_Init+0x124>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	4a41      	ldr	r2, [pc, #260]	; (8003f98 <MX_GPIO_Init+0x124>)
 8003e94:	f043 0304 	orr.w	r3, r3, #4
 8003e98:	6313      	str	r3, [r2, #48]	; 0x30
 8003e9a:	4b3f      	ldr	r3, [pc, #252]	; (8003f98 <MX_GPIO_Init+0x124>)
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9e:	f003 0304 	and.w	r3, r3, #4
 8003ea2:	60bb      	str	r3, [r7, #8]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	607b      	str	r3, [r7, #4]
 8003eaa:	4b3b      	ldr	r3, [pc, #236]	; (8003f98 <MX_GPIO_Init+0x124>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	4a3a      	ldr	r2, [pc, #232]	; (8003f98 <MX_GPIO_Init+0x124>)
 8003eb0:	f043 0301 	orr.w	r3, r3, #1
 8003eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003eb6:	4b38      	ldr	r3, [pc, #224]	; (8003f98 <MX_GPIO_Init+0x124>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	607b      	str	r3, [r7, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	603b      	str	r3, [r7, #0]
 8003ec6:	4b34      	ldr	r3, [pc, #208]	; (8003f98 <MX_GPIO_Init+0x124>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	4a33      	ldr	r2, [pc, #204]	; (8003f98 <MX_GPIO_Init+0x124>)
 8003ecc:	f043 0302 	orr.w	r3, r3, #2
 8003ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ed2:	4b31      	ldr	r3, [pc, #196]	; (8003f98 <MX_GPIO_Init+0x124>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SWREV_3_Pin|SWREV_2_Pin|SWREV_1_Pin|SWDIR_3_Pin
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f24e 210f 	movw	r1, #57871	; 0xe20f
 8003ee4:	482d      	ldr	r0, [pc, #180]	; (8003f9c <MX_GPIO_Init+0x128>)
 8003ee6:	f001 fdff 	bl	8005ae8 <HAL_GPIO_WritePin>
                          |SWDIR_2_Pin|SWDIR_1_Pin|EN_1_Pin|LED_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|LED_1_Pin|EXT_0_Pin|EXT_1_Pin
 8003eea:	2200      	movs	r2, #0
 8003eec:	f648 3110 	movw	r1, #35600	; 0x8b10
 8003ef0:	482b      	ldr	r0, [pc, #172]	; (8003fa0 <MX_GPIO_Init+0x12c>)
 8003ef2:	f001 fdf9 	bl	8005ae8 <HAL_GPIO_WritePin>
                          |SPI3_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN_Pin|SPI2_CS_Pin|W55_RST_Pin|W55_INT_Pin
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f241 7138 	movw	r1, #5944	; 0x1738
 8003efc:	4829      	ldr	r0, [pc, #164]	; (8003fa4 <MX_GPIO_Init+0x130>)
 8003efe:	f001 fdf3 	bl	8005ae8 <HAL_GPIO_WritePin>
                          |LED_2_Pin|EN_3_Pin|EN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SWREV_3_Pin|SWREV_2_Pin|SWREV_1_Pin|SWDIR_3_Pin
 8003f02:	f24e 230f 	movw	r3, #57871	; 0xe20f
 8003f06:	60fb      	str	r3, [r7, #12]
                          |SWDIR_2_Pin|SWDIR_1_Pin|EN_1_Pin|LED_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f10:	2300      	movs	r3, #0
 8003f12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f14:	f107 030c 	add.w	r3, r7, #12
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4820      	ldr	r0, [pc, #128]	; (8003f9c <MX_GPIO_Init+0x128>)
 8003f1c:	f001 fc48 	bl	80057b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LED_1_Pin|EXT_0_Pin|EXT_1_Pin
 8003f20:	f648 3310 	movw	r3, #35600	; 0x8b10
 8003f24:	60fb      	str	r3, [r7, #12]
                          |SPI3_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f26:	2301      	movs	r3, #1
 8003f28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f32:	f107 030c 	add.w	r3, r7, #12
 8003f36:	4619      	mov	r1, r3
 8003f38:	4819      	ldr	r0, [pc, #100]	; (8003fa0 <MX_GPIO_Init+0x12c>)
 8003f3a:	f001 fc39 	bl	80057b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = PG_1_Pin|PG_2_Pin|OC_1_Pin|OC_2_Pin
 8003f3e:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8003f42:	60fb      	str	r3, [r7, #12]
                          |OC_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f44:	2300      	movs	r3, #0
 8003f46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f4c:	f107 030c 	add.w	r3, r7, #12
 8003f50:	4619      	mov	r1, r3
 8003f52:	4812      	ldr	r0, [pc, #72]	; (8003f9c <MX_GPIO_Init+0x128>)
 8003f54:	f001 fc2c 	bl	80057b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PG_3_Pin;
 8003f58:	2304      	movs	r3, #4
 8003f5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PG_3_GPIO_Port, &GPIO_InitStruct);
 8003f64:	f107 030c 	add.w	r3, r7, #12
 8003f68:	4619      	mov	r1, r3
 8003f6a:	480e      	ldr	r0, [pc, #56]	; (8003fa4 <MX_GPIO_Init+0x130>)
 8003f6c:	f001 fc20 	bl	80057b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PWR_EN_Pin|SPI2_CS_Pin|W55_RST_Pin|W55_INT_Pin
 8003f70:	f241 7338 	movw	r3, #5944	; 0x1738
 8003f74:	60fb      	str	r3, [r7, #12]
                          |LED_2_Pin|EN_3_Pin|EN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f76:	2301      	movs	r3, #1
 8003f78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f82:	f107 030c 	add.w	r3, r7, #12
 8003f86:	4619      	mov	r1, r3
 8003f88:	4806      	ldr	r0, [pc, #24]	; (8003fa4 <MX_GPIO_Init+0x130>)
 8003f8a:	f001 fc11 	bl	80057b0 <HAL_GPIO_Init>

}
 8003f8e:	bf00      	nop
 8003f90:	3720      	adds	r7, #32
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	40020800 	.word	0x40020800
 8003fa0:	40020000 	.word	0x40020000
 8003fa4:	40020400 	.word	0x40020400

08003fa8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003fac:	4b12      	ldr	r3, [pc, #72]	; (8003ff8 <MX_I2C1_Init+0x50>)
 8003fae:	4a13      	ldr	r2, [pc, #76]	; (8003ffc <MX_I2C1_Init+0x54>)
 8003fb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003fb2:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <MX_I2C1_Init+0x50>)
 8003fb4:	4a12      	ldr	r2, [pc, #72]	; (8004000 <MX_I2C1_Init+0x58>)
 8003fb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003fb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <MX_I2C1_Init+0x50>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <MX_I2C1_Init+0x50>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <MX_I2C1_Init+0x50>)
 8003fc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003fcc:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <MX_I2C1_Init+0x50>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003fd2:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <MX_I2C1_Init+0x50>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003fd8:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <MX_I2C1_Init+0x50>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003fde:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <MX_I2C1_Init+0x50>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003fe4:	4804      	ldr	r0, [pc, #16]	; (8003ff8 <MX_I2C1_Init+0x50>)
 8003fe6:	f001 fdb3 	bl	8005b50 <HAL_I2C_Init>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003ff0:	f000 f8d4 	bl	800419c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ff4:	bf00      	nop
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	20000d20 	.word	0x20000d20
 8003ffc:	40005400 	.word	0x40005400
 8004000:	000186a0 	.word	0x000186a0

08004004 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b08a      	sub	sp, #40	; 0x28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800400c:	f107 0314 	add.w	r3, r7, #20
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	605a      	str	r2, [r3, #4]
 8004016:	609a      	str	r2, [r3, #8]
 8004018:	60da      	str	r2, [r3, #12]
 800401a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a19      	ldr	r2, [pc, #100]	; (8004088 <HAL_I2C_MspInit+0x84>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d12b      	bne.n	800407e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	613b      	str	r3, [r7, #16]
 800402a:	4b18      	ldr	r3, [pc, #96]	; (800408c <HAL_I2C_MspInit+0x88>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	4a17      	ldr	r2, [pc, #92]	; (800408c <HAL_I2C_MspInit+0x88>)
 8004030:	f043 0302 	orr.w	r3, r3, #2
 8004034:	6313      	str	r3, [r2, #48]	; 0x30
 8004036:	4b15      	ldr	r3, [pc, #84]	; (800408c <HAL_I2C_MspInit+0x88>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004042:	23c0      	movs	r3, #192	; 0xc0
 8004044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004046:	2312      	movs	r3, #18
 8004048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404a:	2300      	movs	r3, #0
 800404c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800404e:	2303      	movs	r3, #3
 8004050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004052:	2304      	movs	r3, #4
 8004054:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004056:	f107 0314 	add.w	r3, r7, #20
 800405a:	4619      	mov	r1, r3
 800405c:	480c      	ldr	r0, [pc, #48]	; (8004090 <HAL_I2C_MspInit+0x8c>)
 800405e:	f001 fba7 	bl	80057b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	4b09      	ldr	r3, [pc, #36]	; (800408c <HAL_I2C_MspInit+0x88>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	4a08      	ldr	r2, [pc, #32]	; (800408c <HAL_I2C_MspInit+0x88>)
 800406c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004070:	6413      	str	r3, [r2, #64]	; 0x40
 8004072:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_I2C_MspInit+0x88>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800407a:	60fb      	str	r3, [r7, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800407e:	bf00      	nop
 8004080:	3728      	adds	r7, #40	; 0x28
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40005400 	.word	0x40005400
 800408c:	40023800 	.word	0x40023800
 8004090:	40020400 	.word	0x40020400

08004094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004098:	f000 fca0 	bl	80049dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800409c:	f000 f816 	bl	80040cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80040a0:	f7ff fee8 	bl	8003e74 <MX_GPIO_Init>
  MX_ADC1_Init();
 80040a4:	f7ff fd3a 	bl	8003b1c <MX_ADC1_Init>
  MX_I2C1_Init();
 80040a8:	f7ff ff7e 	bl	8003fa8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80040ac:	f000 f87c 	bl	80041a8 <MX_SPI1_Init>
  MX_SPI2_Init();
 80040b0:	f000 f8b2 	bl	8004218 <MX_SPI2_Init>
  MX_SPI3_Init();
 80040b4:	f000 f8e8 	bl	8004288 <MX_SPI3_Init>
  MX_SPI5_Init();
 80040b8:	f000 f91c 	bl	80042f4 <MX_SPI5_Init>
  MX_USART2_UART_Init();
 80040bc:	f000 fbea 	bl	8004894 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 80040c0:	f000 fb9c 	bl	80047fc <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  application_main();
 80040c4:	f7fc ffa0 	bl	8001008 <application_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80040c8:	e7fe      	b.n	80040c8 <main+0x34>
	...

080040cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b094      	sub	sp, #80	; 0x50
 80040d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040d2:	f107 0320 	add.w	r3, r7, #32
 80040d6:	2230      	movs	r2, #48	; 0x30
 80040d8:	2100      	movs	r1, #0
 80040da:	4618      	mov	r0, r3
 80040dc:	f005 f892 	bl	8009204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040e0:	f107 030c 	add.w	r3, r7, #12
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	605a      	str	r2, [r3, #4]
 80040ea:	609a      	str	r2, [r3, #8]
 80040ec:	60da      	str	r2, [r3, #12]
 80040ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80040f0:	2300      	movs	r3, #0
 80040f2:	60bb      	str	r3, [r7, #8]
 80040f4:	4b27      	ldr	r3, [pc, #156]	; (8004194 <SystemClock_Config+0xc8>)
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	4a26      	ldr	r2, [pc, #152]	; (8004194 <SystemClock_Config+0xc8>)
 80040fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040fe:	6413      	str	r3, [r2, #64]	; 0x40
 8004100:	4b24      	ldr	r3, [pc, #144]	; (8004194 <SystemClock_Config+0xc8>)
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004108:	60bb      	str	r3, [r7, #8]
 800410a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800410c:	2300      	movs	r3, #0
 800410e:	607b      	str	r3, [r7, #4]
 8004110:	4b21      	ldr	r3, [pc, #132]	; (8004198 <SystemClock_Config+0xcc>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a20      	ldr	r2, [pc, #128]	; (8004198 <SystemClock_Config+0xcc>)
 8004116:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	4b1e      	ldr	r3, [pc, #120]	; (8004198 <SystemClock_Config+0xcc>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004124:	607b      	str	r3, [r7, #4]
 8004126:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004128:	2302      	movs	r3, #2
 800412a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800412c:	2301      	movs	r3, #1
 800412e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004130:	2310      	movs	r3, #16
 8004132:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004134:	2302      	movs	r3, #2
 8004136:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004138:	2300      	movs	r3, #0
 800413a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800413c:	2308      	movs	r3, #8
 800413e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004140:	2364      	movs	r3, #100	; 0x64
 8004142:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004144:	2302      	movs	r3, #2
 8004146:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004148:	2304      	movs	r3, #4
 800414a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800414c:	f107 0320 	add.w	r3, r7, #32
 8004150:	4618      	mov	r0, r3
 8004152:	f001 fe41 	bl	8005dd8 <HAL_RCC_OscConfig>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800415c:	f000 f81e 	bl	800419c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004160:	230f      	movs	r3, #15
 8004162:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004164:	2302      	movs	r3, #2
 8004166:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800416c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004170:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004176:	f107 030c 	add.w	r3, r7, #12
 800417a:	2103      	movs	r1, #3
 800417c:	4618      	mov	r0, r3
 800417e:	f002 f8a3 	bl	80062c8 <HAL_RCC_ClockConfig>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004188:	f000 f808 	bl	800419c <Error_Handler>
  }
}
 800418c:	bf00      	nop
 800418e:	3750      	adds	r7, #80	; 0x50
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40023800 	.word	0x40023800
 8004198:	40007000 	.word	0x40007000

0800419c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80041a0:	b672      	cpsid	i
}
 80041a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80041a4:	e7fe      	b.n	80041a4 <Error_Handler+0x8>
	...

080041a8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi5;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80041ac:	4b18      	ldr	r3, [pc, #96]	; (8004210 <MX_SPI1_Init+0x68>)
 80041ae:	4a19      	ldr	r2, [pc, #100]	; (8004214 <MX_SPI1_Init+0x6c>)
 80041b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80041b2:	4b17      	ldr	r3, [pc, #92]	; (8004210 <MX_SPI1_Init+0x68>)
 80041b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80041b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80041ba:	4b15      	ldr	r3, [pc, #84]	; (8004210 <MX_SPI1_Init+0x68>)
 80041bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80041c0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80041c2:	4b13      	ldr	r3, [pc, #76]	; (8004210 <MX_SPI1_Init+0x68>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041c8:	4b11      	ldr	r3, [pc, #68]	; (8004210 <MX_SPI1_Init+0x68>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80041ce:	4b10      	ldr	r3, [pc, #64]	; (8004210 <MX_SPI1_Init+0x68>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80041d4:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <MX_SPI1_Init+0x68>)
 80041d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80041dc:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <MX_SPI1_Init+0x68>)
 80041de:	2238      	movs	r2, #56	; 0x38
 80041e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80041e2:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <MX_SPI1_Init+0x68>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80041e8:	4b09      	ldr	r3, [pc, #36]	; (8004210 <MX_SPI1_Init+0x68>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041ee:	4b08      	ldr	r3, [pc, #32]	; (8004210 <MX_SPI1_Init+0x68>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <MX_SPI1_Init+0x68>)
 80041f6:	220a      	movs	r2, #10
 80041f8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80041fa:	4805      	ldr	r0, [pc, #20]	; (8004210 <MX_SPI1_Init+0x68>)
 80041fc:	f002 fa44 	bl	8006688 <HAL_SPI_Init>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8004206:	f7ff ffc9 	bl	800419c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800420a:	bf00      	nop
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	20000d74 	.word	0x20000d74
 8004214:	40013000 	.word	0x40013000

08004218 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800421c:	4b18      	ldr	r3, [pc, #96]	; (8004280 <MX_SPI2_Init+0x68>)
 800421e:	4a19      	ldr	r2, [pc, #100]	; (8004284 <MX_SPI2_Init+0x6c>)
 8004220:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004222:	4b17      	ldr	r3, [pc, #92]	; (8004280 <MX_SPI2_Init+0x68>)
 8004224:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004228:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800422a:	4b15      	ldr	r3, [pc, #84]	; (8004280 <MX_SPI2_Init+0x68>)
 800422c:	2200      	movs	r2, #0
 800422e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8004230:	4b13      	ldr	r3, [pc, #76]	; (8004280 <MX_SPI2_Init+0x68>)
 8004232:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004236:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004238:	4b11      	ldr	r3, [pc, #68]	; (8004280 <MX_SPI2_Init+0x68>)
 800423a:	2200      	movs	r2, #0
 800423c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800423e:	4b10      	ldr	r3, [pc, #64]	; (8004280 <MX_SPI2_Init+0x68>)
 8004240:	2200      	movs	r2, #0
 8004242:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004244:	4b0e      	ldr	r3, [pc, #56]	; (8004280 <MX_SPI2_Init+0x68>)
 8004246:	f44f 7200 	mov.w	r2, #512	; 0x200
 800424a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800424c:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <MX_SPI2_Init+0x68>)
 800424e:	2210      	movs	r2, #16
 8004250:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004252:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <MX_SPI2_Init+0x68>)
 8004254:	2200      	movs	r2, #0
 8004256:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004258:	4b09      	ldr	r3, [pc, #36]	; (8004280 <MX_SPI2_Init+0x68>)
 800425a:	2200      	movs	r2, #0
 800425c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800425e:	4b08      	ldr	r3, [pc, #32]	; (8004280 <MX_SPI2_Init+0x68>)
 8004260:	2200      	movs	r2, #0
 8004262:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004264:	4b06      	ldr	r3, [pc, #24]	; (8004280 <MX_SPI2_Init+0x68>)
 8004266:	220a      	movs	r2, #10
 8004268:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800426a:	4805      	ldr	r0, [pc, #20]	; (8004280 <MX_SPI2_Init+0x68>)
 800426c:	f002 fa0c 	bl	8006688 <HAL_SPI_Init>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8004276:	f7ff ff91 	bl	800419c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800427a:	bf00      	nop
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20000dcc 	.word	0x20000dcc
 8004284:	40003800 	.word	0x40003800

08004288 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800428c:	4b17      	ldr	r3, [pc, #92]	; (80042ec <MX_SPI3_Init+0x64>)
 800428e:	4a18      	ldr	r2, [pc, #96]	; (80042f0 <MX_SPI3_Init+0x68>)
 8004290:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004292:	4b16      	ldr	r3, [pc, #88]	; (80042ec <MX_SPI3_Init+0x64>)
 8004294:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004298:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800429a:	4b14      	ldr	r3, [pc, #80]	; (80042ec <MX_SPI3_Init+0x64>)
 800429c:	2200      	movs	r2, #0
 800429e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80042a0:	4b12      	ldr	r3, [pc, #72]	; (80042ec <MX_SPI3_Init+0x64>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80042a6:	4b11      	ldr	r3, [pc, #68]	; (80042ec <MX_SPI3_Init+0x64>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80042ac:	4b0f      	ldr	r3, [pc, #60]	; (80042ec <MX_SPI3_Init+0x64>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80042b2:	4b0e      	ldr	r3, [pc, #56]	; (80042ec <MX_SPI3_Init+0x64>)
 80042b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80042ba:	4b0c      	ldr	r3, [pc, #48]	; (80042ec <MX_SPI3_Init+0x64>)
 80042bc:	2220      	movs	r2, #32
 80042be:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042c0:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <MX_SPI3_Init+0x64>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80042c6:	4b09      	ldr	r3, [pc, #36]	; (80042ec <MX_SPI3_Init+0x64>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042cc:	4b07      	ldr	r3, [pc, #28]	; (80042ec <MX_SPI3_Init+0x64>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80042d2:	4b06      	ldr	r3, [pc, #24]	; (80042ec <MX_SPI3_Init+0x64>)
 80042d4:	220a      	movs	r2, #10
 80042d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80042d8:	4804      	ldr	r0, [pc, #16]	; (80042ec <MX_SPI3_Init+0x64>)
 80042da:	f002 f9d5 	bl	8006688 <HAL_SPI_Init>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80042e4:	f7ff ff5a 	bl	800419c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80042e8:	bf00      	nop
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	20000e24 	.word	0x20000e24
 80042f0:	40003c00 	.word	0x40003c00

080042f4 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80042f8:	4b17      	ldr	r3, [pc, #92]	; (8004358 <MX_SPI5_Init+0x64>)
 80042fa:	4a18      	ldr	r2, [pc, #96]	; (800435c <MX_SPI5_Init+0x68>)
 80042fc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80042fe:	4b16      	ldr	r3, [pc, #88]	; (8004358 <MX_SPI5_Init+0x64>)
 8004300:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004304:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004306:	4b14      	ldr	r3, [pc, #80]	; (8004358 <MX_SPI5_Init+0x64>)
 8004308:	2200      	movs	r2, #0
 800430a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800430c:	4b12      	ldr	r3, [pc, #72]	; (8004358 <MX_SPI5_Init+0x64>)
 800430e:	2200      	movs	r2, #0
 8004310:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004312:	4b11      	ldr	r3, [pc, #68]	; (8004358 <MX_SPI5_Init+0x64>)
 8004314:	2200      	movs	r2, #0
 8004316:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004318:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <MX_SPI5_Init+0x64>)
 800431a:	2200      	movs	r2, #0
 800431c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800431e:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <MX_SPI5_Init+0x64>)
 8004320:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004324:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004326:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <MX_SPI5_Init+0x64>)
 8004328:	2200      	movs	r2, #0
 800432a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800432c:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <MX_SPI5_Init+0x64>)
 800432e:	2200      	movs	r2, #0
 8004330:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004332:	4b09      	ldr	r3, [pc, #36]	; (8004358 <MX_SPI5_Init+0x64>)
 8004334:	2200      	movs	r2, #0
 8004336:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004338:	4b07      	ldr	r3, [pc, #28]	; (8004358 <MX_SPI5_Init+0x64>)
 800433a:	2200      	movs	r2, #0
 800433c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800433e:	4b06      	ldr	r3, [pc, #24]	; (8004358 <MX_SPI5_Init+0x64>)
 8004340:	220a      	movs	r2, #10
 8004342:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8004344:	4804      	ldr	r0, [pc, #16]	; (8004358 <MX_SPI5_Init+0x64>)
 8004346:	f002 f99f 	bl	8006688 <HAL_SPI_Init>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d001      	beq.n	8004354 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8004350:	f7ff ff24 	bl	800419c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8004354:	bf00      	nop
 8004356:	bd80      	pop	{r7, pc}
 8004358:	20000e7c 	.word	0x20000e7c
 800435c:	40015000 	.word	0x40015000

08004360 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b090      	sub	sp, #64	; 0x40
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	609a      	str	r2, [r3, #8]
 8004374:	60da      	str	r2, [r3, #12]
 8004376:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a74      	ldr	r2, [pc, #464]	; (8004550 <HAL_SPI_MspInit+0x1f0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d12c      	bne.n	80043dc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004382:	2300      	movs	r3, #0
 8004384:	62bb      	str	r3, [r7, #40]	; 0x28
 8004386:	4b73      	ldr	r3, [pc, #460]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 8004388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438a:	4a72      	ldr	r2, [pc, #456]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 800438c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004390:	6453      	str	r3, [r2, #68]	; 0x44
 8004392:	4b70      	ldr	r3, [pc, #448]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 8004394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800439a:	62bb      	str	r3, [r7, #40]	; 0x28
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800439e:	2300      	movs	r3, #0
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
 80043a2:	4b6c      	ldr	r3, [pc, #432]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	4a6b      	ldr	r2, [pc, #428]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 80043a8:	f043 0301 	orr.w	r3, r3, #1
 80043ac:	6313      	str	r3, [r2, #48]	; 0x30
 80043ae:	4b69      	ldr	r3, [pc, #420]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 80043b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80043ba:	23a0      	movs	r3, #160	; 0xa0
 80043bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043be:	2302      	movs	r3, #2
 80043c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c2:	2300      	movs	r3, #0
 80043c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043c6:	2303      	movs	r3, #3
 80043c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80043ca:	2305      	movs	r3, #5
 80043cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043d2:	4619      	mov	r1, r3
 80043d4:	4860      	ldr	r0, [pc, #384]	; (8004558 <HAL_SPI_MspInit+0x1f8>)
 80043d6:	f001 f9eb 	bl	80057b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80043da:	e0b5      	b.n	8004548 <HAL_SPI_MspInit+0x1e8>
  else if(spiHandle->Instance==SPI2)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a5e      	ldr	r2, [pc, #376]	; (800455c <HAL_SPI_MspInit+0x1fc>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d12d      	bne.n	8004442 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80043e6:	2300      	movs	r3, #0
 80043e8:	623b      	str	r3, [r7, #32]
 80043ea:	4b5a      	ldr	r3, [pc, #360]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	4a59      	ldr	r2, [pc, #356]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 80043f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043f4:	6413      	str	r3, [r2, #64]	; 0x40
 80043f6:	4b57      	ldr	r3, [pc, #348]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043fe:	623b      	str	r3, [r7, #32]
 8004400:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004402:	2300      	movs	r3, #0
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	4b53      	ldr	r3, [pc, #332]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	4a52      	ldr	r2, [pc, #328]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 800440c:	f043 0302 	orr.w	r3, r3, #2
 8004410:	6313      	str	r3, [r2, #48]	; 0x30
 8004412:	4b50      	ldr	r3, [pc, #320]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	61fb      	str	r3, [r7, #28]
 800441c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800441e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004422:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004424:	2302      	movs	r3, #2
 8004426:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004428:	2300      	movs	r3, #0
 800442a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800442c:	2303      	movs	r3, #3
 800442e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004430:	2305      	movs	r3, #5
 8004432:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004434:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004438:	4619      	mov	r1, r3
 800443a:	4849      	ldr	r0, [pc, #292]	; (8004560 <HAL_SPI_MspInit+0x200>)
 800443c:	f001 f9b8 	bl	80057b0 <HAL_GPIO_Init>
}
 8004440:	e082      	b.n	8004548 <HAL_SPI_MspInit+0x1e8>
  else if(spiHandle->Instance==SPI3)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a47      	ldr	r2, [pc, #284]	; (8004564 <HAL_SPI_MspInit+0x204>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d12d      	bne.n	80044a8 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800444c:	2300      	movs	r3, #0
 800444e:	61bb      	str	r3, [r7, #24]
 8004450:	4b40      	ldr	r3, [pc, #256]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	4a3f      	ldr	r2, [pc, #252]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 8004456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800445a:	6413      	str	r3, [r2, #64]	; 0x40
 800445c:	4b3d      	ldr	r3, [pc, #244]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004464:	61bb      	str	r3, [r7, #24]
 8004466:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	4b39      	ldr	r3, [pc, #228]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	4a38      	ldr	r2, [pc, #224]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 8004472:	f043 0304 	orr.w	r3, r3, #4
 8004476:	6313      	str	r3, [r2, #48]	; 0x30
 8004478:	4b36      	ldr	r3, [pc, #216]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 800447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004484:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004488:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800448a:	2302      	movs	r3, #2
 800448c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448e:	2300      	movs	r3, #0
 8004490:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004492:	2303      	movs	r3, #3
 8004494:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004496:	2306      	movs	r3, #6
 8004498:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800449a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800449e:	4619      	mov	r1, r3
 80044a0:	4831      	ldr	r0, [pc, #196]	; (8004568 <HAL_SPI_MspInit+0x208>)
 80044a2:	f001 f985 	bl	80057b0 <HAL_GPIO_Init>
}
 80044a6:	e04f      	b.n	8004548 <HAL_SPI_MspInit+0x1e8>
  else if(spiHandle->Instance==SPI5)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a2f      	ldr	r2, [pc, #188]	; (800456c <HAL_SPI_MspInit+0x20c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d14a      	bne.n	8004548 <HAL_SPI_MspInit+0x1e8>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	4b27      	ldr	r3, [pc, #156]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 80044b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ba:	4a26      	ldr	r2, [pc, #152]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 80044bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044c0:	6453      	str	r3, [r2, #68]	; 0x44
 80044c2:	4b24      	ldr	r3, [pc, #144]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 80044c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ce:	2300      	movs	r3, #0
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	4b20      	ldr	r3, [pc, #128]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	4a1f      	ldr	r2, [pc, #124]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 80044d8:	f043 0302 	orr.w	r3, r3, #2
 80044dc:	6313      	str	r3, [r2, #48]	; 0x30
 80044de:	4b1d      	ldr	r3, [pc, #116]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 80044e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ea:	2300      	movs	r3, #0
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	4b19      	ldr	r3, [pc, #100]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	4a18      	ldr	r2, [pc, #96]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	6313      	str	r3, [r2, #48]	; 0x30
 80044fa:	4b16      	ldr	r3, [pc, #88]	; (8004554 <HAL_SPI_MspInit+0x1f4>)
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	60bb      	str	r3, [r7, #8]
 8004504:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004506:	2303      	movs	r3, #3
 8004508:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450a:	2302      	movs	r3, #2
 800450c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450e:	2300      	movs	r3, #0
 8004510:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004512:	2303      	movs	r3, #3
 8004514:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004516:	2306      	movs	r3, #6
 8004518:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800451a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800451e:	4619      	mov	r1, r3
 8004520:	480f      	ldr	r0, [pc, #60]	; (8004560 <HAL_SPI_MspInit+0x200>)
 8004522:	f001 f945 	bl	80057b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8004526:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800452a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800452c:	2302      	movs	r3, #2
 800452e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004530:	2300      	movs	r3, #0
 8004532:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004534:	2303      	movs	r3, #3
 8004536:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004538:	2306      	movs	r3, #6
 800453a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800453c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004540:	4619      	mov	r1, r3
 8004542:	4805      	ldr	r0, [pc, #20]	; (8004558 <HAL_SPI_MspInit+0x1f8>)
 8004544:	f001 f934 	bl	80057b0 <HAL_GPIO_Init>
}
 8004548:	bf00      	nop
 800454a:	3740      	adds	r7, #64	; 0x40
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	40013000 	.word	0x40013000
 8004554:	40023800 	.word	0x40023800
 8004558:	40020000 	.word	0x40020000
 800455c:	40003800 	.word	0x40003800
 8004560:	40020400 	.word	0x40020400
 8004564:	40003c00 	.word	0x40003c00
 8004568:	40020800 	.word	0x40020800
 800456c:	40015000 	.word	0x40015000

08004570 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004576:	2300      	movs	r3, #0
 8004578:	607b      	str	r3, [r7, #4]
 800457a:	4b10      	ldr	r3, [pc, #64]	; (80045bc <HAL_MspInit+0x4c>)
 800457c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457e:	4a0f      	ldr	r2, [pc, #60]	; (80045bc <HAL_MspInit+0x4c>)
 8004580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004584:	6453      	str	r3, [r2, #68]	; 0x44
 8004586:	4b0d      	ldr	r3, [pc, #52]	; (80045bc <HAL_MspInit+0x4c>)
 8004588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800458e:	607b      	str	r3, [r7, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004592:	2300      	movs	r3, #0
 8004594:	603b      	str	r3, [r7, #0]
 8004596:	4b09      	ldr	r3, [pc, #36]	; (80045bc <HAL_MspInit+0x4c>)
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	4a08      	ldr	r2, [pc, #32]	; (80045bc <HAL_MspInit+0x4c>)
 800459c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a0:	6413      	str	r3, [r2, #64]	; 0x40
 80045a2:	4b06      	ldr	r3, [pc, #24]	; (80045bc <HAL_MspInit+0x4c>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045aa:	603b      	str	r3, [r7, #0]
 80045ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045ae:	bf00      	nop
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40023800 	.word	0x40023800

080045c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045c4:	e7fe      	b.n	80045c4 <NMI_Handler+0x4>

080045c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045c6:	b480      	push	{r7}
 80045c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045ca:	e7fe      	b.n	80045ca <HardFault_Handler+0x4>

080045cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045d0:	e7fe      	b.n	80045d0 <MemManage_Handler+0x4>

080045d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045d2:	b480      	push	{r7}
 80045d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045d6:	e7fe      	b.n	80045d6 <BusFault_Handler+0x4>

080045d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045dc:	e7fe      	b.n	80045dc <UsageFault_Handler+0x4>

080045de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045de:	b480      	push	{r7}
 80045e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045e2:	bf00      	nop
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045f0:	bf00      	nop
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045fa:	b480      	push	{r7}
 80045fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045fe:	bf00      	nop
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800460c:	f000 fa38 	bl	8004a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004610:	bf00      	nop
 8004612:	bd80      	pop	{r7, pc}

08004614 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004618:	4802      	ldr	r0, [pc, #8]	; (8004624 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800461a:	f002 fe8f 	bl	800733c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800461e:	bf00      	nop
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	20000ed8 	.word	0x20000ed8

08004628 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	USART2->SR &= ~USART_SR_RXNE_Msk;
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <USART2_IRQHandler+0x20>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a05      	ldr	r2, [pc, #20]	; (8004648 <USART2_IRQHandler+0x20>)
 8004632:	f023 0320 	bic.w	r3, r3, #32
 8004636:	6013      	str	r3, [r2, #0]
	Uart_WriteBuffer(USART2->DR);
 8004638:	4b03      	ldr	r3, [pc, #12]	; (8004648 <USART2_IRQHandler+0x20>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff f9fe 	bl	8003a40 <Uart_WriteBuffer>

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004644:	bf00      	nop
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40004400 	.word	0x40004400

0800464c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  return 1;
 8004650:	2301      	movs	r3, #1
}
 8004652:	4618      	mov	r0, r3
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <_kill>:

int _kill(int pid, int sig)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004666:	f004 fd8d 	bl	8009184 <__errno>
 800466a:	4603      	mov	r3, r0
 800466c:	2216      	movs	r2, #22
 800466e:	601a      	str	r2, [r3, #0]
  return -1;
 8004670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004674:	4618      	mov	r0, r3
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <_exit>:

void _exit (int status)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004684:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff ffe7 	bl	800465c <_kill>
  while (1) {}    /* Make sure we hang here */
 800468e:	e7fe      	b.n	800468e <_exit+0x12>

08004690 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	e00a      	b.n	80046b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80046a2:	f3af 8000 	nop.w
 80046a6:	4601      	mov	r1, r0
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	60ba      	str	r2, [r7, #8]
 80046ae:	b2ca      	uxtb	r2, r1
 80046b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	3301      	adds	r3, #1
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	429a      	cmp	r2, r3
 80046be:	dbf0      	blt.n	80046a2 <_read+0x12>
  }

  return len;
 80046c0:	687b      	ldr	r3, [r7, #4]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b086      	sub	sp, #24
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046d6:	2300      	movs	r3, #0
 80046d8:	617b      	str	r3, [r7, #20]
 80046da:	e009      	b.n	80046f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	1c5a      	adds	r2, r3, #1
 80046e0:	60ba      	str	r2, [r7, #8]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	3301      	adds	r3, #1
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	dbf1      	blt.n	80046dc <_write+0x12>
  }
  return len;
 80046f8:	687b      	ldr	r3, [r7, #4]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <_close>:

int _close(int file)
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800470a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr

0800471a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
 8004722:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800472a:	605a      	str	r2, [r3, #4]
  return 0;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <_isatty>:

int _isatty(int file)
{
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004742:	2301      	movs	r3, #1
}
 8004744:	4618      	mov	r0, r3
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
	...

0800476c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004774:	4a14      	ldr	r2, [pc, #80]	; (80047c8 <_sbrk+0x5c>)
 8004776:	4b15      	ldr	r3, [pc, #84]	; (80047cc <_sbrk+0x60>)
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004780:	4b13      	ldr	r3, [pc, #76]	; (80047d0 <_sbrk+0x64>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d102      	bne.n	800478e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004788:	4b11      	ldr	r3, [pc, #68]	; (80047d0 <_sbrk+0x64>)
 800478a:	4a12      	ldr	r2, [pc, #72]	; (80047d4 <_sbrk+0x68>)
 800478c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800478e:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <_sbrk+0x64>)
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4413      	add	r3, r2
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	429a      	cmp	r2, r3
 800479a:	d207      	bcs.n	80047ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800479c:	f004 fcf2 	bl	8009184 <__errno>
 80047a0:	4603      	mov	r3, r0
 80047a2:	220c      	movs	r2, #12
 80047a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047aa:	e009      	b.n	80047c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047ac:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <_sbrk+0x64>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047b2:	4b07      	ldr	r3, [pc, #28]	; (80047d0 <_sbrk+0x64>)
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4413      	add	r3, r2
 80047ba:	4a05      	ldr	r2, [pc, #20]	; (80047d0 <_sbrk+0x64>)
 80047bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047be:	68fb      	ldr	r3, [r7, #12]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	20020000 	.word	0x20020000
 80047cc:	00000400 	.word	0x00000400
 80047d0:	20000ed4 	.word	0x20000ed4
 80047d4:	20000fc0 	.word	0x20000fc0

080047d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047dc:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <SystemInit+0x20>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e2:	4a05      	ldr	r2, [pc, #20]	; (80047f8 <SystemInit+0x20>)
 80047e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047ec:	bf00      	nop
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	e000ed00 	.word	0xe000ed00

080047fc <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004800:	4b0e      	ldr	r3, [pc, #56]	; (800483c <MX_TIM10_Init+0x40>)
 8004802:	4a0f      	ldr	r2, [pc, #60]	; (8004840 <MX_TIM10_Init+0x44>)
 8004804:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 8004806:	4b0d      	ldr	r3, [pc, #52]	; (800483c <MX_TIM10_Init+0x40>)
 8004808:	2263      	movs	r2, #99	; 0x63
 800480a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800480c:	4b0b      	ldr	r3, [pc, #44]	; (800483c <MX_TIM10_Init+0x40>)
 800480e:	2200      	movs	r2, #0
 8004810:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 17999;
 8004812:	4b0a      	ldr	r3, [pc, #40]	; (800483c <MX_TIM10_Init+0x40>)
 8004814:	f244 624f 	movw	r2, #17999	; 0x464f
 8004818:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800481a:	4b08      	ldr	r3, [pc, #32]	; (800483c <MX_TIM10_Init+0x40>)
 800481c:	2200      	movs	r2, #0
 800481e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004820:	4b06      	ldr	r3, [pc, #24]	; (800483c <MX_TIM10_Init+0x40>)
 8004822:	2200      	movs	r2, #0
 8004824:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004826:	4805      	ldr	r0, [pc, #20]	; (800483c <MX_TIM10_Init+0x40>)
 8004828:	f002 fcd6 	bl	80071d8 <HAL_TIM_Base_Init>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8004832:	f7ff fcb3 	bl	800419c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8004836:	bf00      	nop
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20000ed8 	.word	0x20000ed8
 8004840:	40014400 	.word	0x40014400

08004844 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a0e      	ldr	r2, [pc, #56]	; (800488c <HAL_TIM_Base_MspInit+0x48>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d115      	bne.n	8004882 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	4b0d      	ldr	r3, [pc, #52]	; (8004890 <HAL_TIM_Base_MspInit+0x4c>)
 800485c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485e:	4a0c      	ldr	r2, [pc, #48]	; (8004890 <HAL_TIM_Base_MspInit+0x4c>)
 8004860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004864:	6453      	str	r3, [r2, #68]	; 0x44
 8004866:	4b0a      	ldr	r3, [pc, #40]	; (8004890 <HAL_TIM_Base_MspInit+0x4c>)
 8004868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8004872:	2200      	movs	r2, #0
 8004874:	2100      	movs	r1, #0
 8004876:	2019      	movs	r0, #25
 8004878:	f000 fc6f 	bl	800515a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800487c:	2019      	movs	r0, #25
 800487e:	f000 fc88 	bl	8005192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8004882:	bf00      	nop
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40014400 	.word	0x40014400
 8004890:	40023800 	.word	0x40023800

08004894 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004898:	4b11      	ldr	r3, [pc, #68]	; (80048e0 <MX_USART2_UART_Init+0x4c>)
 800489a:	4a12      	ldr	r2, [pc, #72]	; (80048e4 <MX_USART2_UART_Init+0x50>)
 800489c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800489e:	4b10      	ldr	r3, [pc, #64]	; (80048e0 <MX_USART2_UART_Init+0x4c>)
 80048a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80048a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80048a6:	4b0e      	ldr	r3, [pc, #56]	; (80048e0 <MX_USART2_UART_Init+0x4c>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80048ac:	4b0c      	ldr	r3, [pc, #48]	; (80048e0 <MX_USART2_UART_Init+0x4c>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80048b2:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <MX_USART2_UART_Init+0x4c>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80048b8:	4b09      	ldr	r3, [pc, #36]	; (80048e0 <MX_USART2_UART_Init+0x4c>)
 80048ba:	220c      	movs	r2, #12
 80048bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048be:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <MX_USART2_UART_Init+0x4c>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80048c4:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <MX_USART2_UART_Init+0x4c>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80048ca:	4805      	ldr	r0, [pc, #20]	; (80048e0 <MX_USART2_UART_Init+0x4c>)
 80048cc:	f002 fefa 	bl	80076c4 <HAL_UART_Init>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80048d6:	f7ff fc61 	bl	800419c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80048da:	bf00      	nop
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20000f20 	.word	0x20000f20
 80048e4:	40004400 	.word	0x40004400

080048e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08a      	sub	sp, #40	; 0x28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f0:	f107 0314 	add.w	r3, r7, #20
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	605a      	str	r2, [r3, #4]
 80048fa:	609a      	str	r2, [r3, #8]
 80048fc:	60da      	str	r2, [r3, #12]
 80048fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a1d      	ldr	r2, [pc, #116]	; (800497c <HAL_UART_MspInit+0x94>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d133      	bne.n	8004972 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800490a:	2300      	movs	r3, #0
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	4b1c      	ldr	r3, [pc, #112]	; (8004980 <HAL_UART_MspInit+0x98>)
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	4a1b      	ldr	r2, [pc, #108]	; (8004980 <HAL_UART_MspInit+0x98>)
 8004914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004918:	6413      	str	r3, [r2, #64]	; 0x40
 800491a:	4b19      	ldr	r3, [pc, #100]	; (8004980 <HAL_UART_MspInit+0x98>)
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004922:	613b      	str	r3, [r7, #16]
 8004924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004926:	2300      	movs	r3, #0
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	4b15      	ldr	r3, [pc, #84]	; (8004980 <HAL_UART_MspInit+0x98>)
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	4a14      	ldr	r2, [pc, #80]	; (8004980 <HAL_UART_MspInit+0x98>)
 8004930:	f043 0301 	orr.w	r3, r3, #1
 8004934:	6313      	str	r3, [r2, #48]	; 0x30
 8004936:	4b12      	ldr	r3, [pc, #72]	; (8004980 <HAL_UART_MspInit+0x98>)
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004942:	230c      	movs	r3, #12
 8004944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004946:	2302      	movs	r3, #2
 8004948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494a:	2300      	movs	r3, #0
 800494c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800494e:	2303      	movs	r3, #3
 8004950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004952:	2307      	movs	r3, #7
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004956:	f107 0314 	add.w	r3, r7, #20
 800495a:	4619      	mov	r1, r3
 800495c:	4809      	ldr	r0, [pc, #36]	; (8004984 <HAL_UART_MspInit+0x9c>)
 800495e:	f000 ff27 	bl	80057b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004962:	2200      	movs	r2, #0
 8004964:	2100      	movs	r1, #0
 8004966:	2026      	movs	r0, #38	; 0x26
 8004968:	f000 fbf7 	bl	800515a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800496c:	2026      	movs	r0, #38	; 0x26
 800496e:	f000 fc10 	bl	8005192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004972:	bf00      	nop
 8004974:	3728      	adds	r7, #40	; 0x28
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	40004400 	.word	0x40004400
 8004980:	40023800 	.word	0x40023800
 8004984:	40020000 	.word	0x40020000

08004988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800498c:	480d      	ldr	r0, [pc, #52]	; (80049c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800498e:	490e      	ldr	r1, [pc, #56]	; (80049c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004990:	4a0e      	ldr	r2, [pc, #56]	; (80049cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004994:	e002      	b.n	800499c <LoopCopyDataInit>

08004996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800499a:	3304      	adds	r3, #4

0800499c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800499c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800499e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049a0:	d3f9      	bcc.n	8004996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049a2:	4a0b      	ldr	r2, [pc, #44]	; (80049d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80049a4:	4c0b      	ldr	r4, [pc, #44]	; (80049d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80049a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049a8:	e001      	b.n	80049ae <LoopFillZerobss>

080049aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049ac:	3204      	adds	r2, #4

080049ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049b0:	d3fb      	bcc.n	80049aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80049b2:	f7ff ff11 	bl	80047d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049b6:	f004 fbeb 	bl	8009190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049ba:	f7ff fb6b 	bl	8004094 <main>
  bx  lr    
 80049be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80049c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80049c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049c8:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 80049cc:	0800e458 	.word	0x0800e458
  ldr r2, =_sbss
 80049d0:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 80049d4:	20000fbc 	.word	0x20000fbc

080049d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049d8:	e7fe      	b.n	80049d8 <ADC_IRQHandler>
	...

080049dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049e0:	4b0e      	ldr	r3, [pc, #56]	; (8004a1c <HAL_Init+0x40>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a0d      	ldr	r2, [pc, #52]	; (8004a1c <HAL_Init+0x40>)
 80049e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049ec:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <HAL_Init+0x40>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a0a      	ldr	r2, [pc, #40]	; (8004a1c <HAL_Init+0x40>)
 80049f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049f8:	4b08      	ldr	r3, [pc, #32]	; (8004a1c <HAL_Init+0x40>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a07      	ldr	r2, [pc, #28]	; (8004a1c <HAL_Init+0x40>)
 80049fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a04:	2003      	movs	r0, #3
 8004a06:	f000 fb9d 	bl	8005144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a0a:	200f      	movs	r0, #15
 8004a0c:	f000 f808 	bl	8004a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a10:	f7ff fdae 	bl	8004570 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	40023c00 	.word	0x40023c00

08004a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a28:	4b12      	ldr	r3, [pc, #72]	; (8004a74 <HAL_InitTick+0x54>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	4b12      	ldr	r3, [pc, #72]	; (8004a78 <HAL_InitTick+0x58>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	4619      	mov	r1, r3
 8004a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 fbb5 	bl	80051ae <HAL_SYSTICK_Config>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e00e      	b.n	8004a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b0f      	cmp	r3, #15
 8004a52:	d80a      	bhi.n	8004a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a54:	2200      	movs	r2, #0
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a5c:	f000 fb7d 	bl	800515a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a60:	4a06      	ldr	r2, [pc, #24]	; (8004a7c <HAL_InitTick+0x5c>)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	e000      	b.n	8004a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	2000007c 	.word	0x2000007c
 8004a78:	20000084 	.word	0x20000084
 8004a7c:	20000080 	.word	0x20000080

08004a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a84:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <HAL_IncTick+0x20>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <HAL_IncTick+0x24>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4413      	add	r3, r2
 8004a90:	4a04      	ldr	r2, [pc, #16]	; (8004aa4 <HAL_IncTick+0x24>)
 8004a92:	6013      	str	r3, [r2, #0]
}
 8004a94:	bf00      	nop
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	20000084 	.word	0x20000084
 8004aa4:	20000f64 	.word	0x20000f64

08004aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8004aac:	4b03      	ldr	r3, [pc, #12]	; (8004abc <HAL_GetTick+0x14>)
 8004aae:	681b      	ldr	r3, [r3, #0]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	20000f64 	.word	0x20000f64

08004ac0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e033      	b.n	8004b3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d109      	bne.n	8004af2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff f86e 	bl	8003bc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	f003 0310 	and.w	r3, r3, #16
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d118      	bne.n	8004b30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004b06:	f023 0302 	bic.w	r3, r3, #2
 8004b0a:	f043 0202 	orr.w	r2, r3, #2
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f94a 	bl	8004dac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	f023 0303 	bic.w	r3, r3, #3
 8004b26:	f043 0201 	orr.w	r2, r3, #1
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40
 8004b2e:	e001      	b.n	8004b34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_ADC_ConfigChannel+0x1c>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e113      	b.n	8004d8c <HAL_ADC_ConfigChannel+0x244>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b09      	cmp	r3, #9
 8004b72:	d925      	bls.n	8004bc0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68d9      	ldr	r1, [r3, #12]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	4613      	mov	r3, r2
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	4413      	add	r3, r2
 8004b88:	3b1e      	subs	r3, #30
 8004b8a:	2207      	movs	r2, #7
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	43da      	mvns	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	400a      	ands	r2, r1
 8004b98:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68d9      	ldr	r1, [r3, #12]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	4618      	mov	r0, r3
 8004bac:	4603      	mov	r3, r0
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	4403      	add	r3, r0
 8004bb2:	3b1e      	subs	r3, #30
 8004bb4:	409a      	lsls	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	60da      	str	r2, [r3, #12]
 8004bbe:	e022      	b.n	8004c06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6919      	ldr	r1, [r3, #16]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	4613      	mov	r3, r2
 8004bd0:	005b      	lsls	r3, r3, #1
 8004bd2:	4413      	add	r3, r2
 8004bd4:	2207      	movs	r2, #7
 8004bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bda:	43da      	mvns	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	400a      	ands	r2, r1
 8004be2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	6919      	ldr	r1, [r3, #16]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	4403      	add	r3, r0
 8004bfc:	409a      	lsls	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2b06      	cmp	r3, #6
 8004c0c:	d824      	bhi.n	8004c58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	3b05      	subs	r3, #5
 8004c20:	221f      	movs	r2, #31
 8004c22:	fa02 f303 	lsl.w	r3, r2, r3
 8004c26:	43da      	mvns	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	400a      	ands	r2, r1
 8004c2e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	4613      	mov	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	3b05      	subs	r3, #5
 8004c4a:	fa00 f203 	lsl.w	r2, r0, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	635a      	str	r2, [r3, #52]	; 0x34
 8004c56:	e04c      	b.n	8004cf2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	2b0c      	cmp	r3, #12
 8004c5e:	d824      	bhi.n	8004caa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	3b23      	subs	r3, #35	; 0x23
 8004c72:	221f      	movs	r2, #31
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	43da      	mvns	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	400a      	ands	r2, r1
 8004c80:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	4618      	mov	r0, r3
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	4613      	mov	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	3b23      	subs	r3, #35	; 0x23
 8004c9c:	fa00 f203 	lsl.w	r2, r0, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30
 8004ca8:	e023      	b.n	8004cf2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	3b41      	subs	r3, #65	; 0x41
 8004cbc:	221f      	movs	r2, #31
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	43da      	mvns	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	400a      	ands	r2, r1
 8004cca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	4618      	mov	r0, r3
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4413      	add	r3, r2
 8004ce4:	3b41      	subs	r3, #65	; 0x41
 8004ce6:	fa00 f203 	lsl.w	r2, r0, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cf2:	4b29      	ldr	r3, [pc, #164]	; (8004d98 <HAL_ADC_ConfigChannel+0x250>)
 8004cf4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a28      	ldr	r2, [pc, #160]	; (8004d9c <HAL_ADC_ConfigChannel+0x254>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d10f      	bne.n	8004d20 <HAL_ADC_ConfigChannel+0x1d8>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b12      	cmp	r3, #18
 8004d06:	d10b      	bne.n	8004d20 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1d      	ldr	r2, [pc, #116]	; (8004d9c <HAL_ADC_ConfigChannel+0x254>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d12b      	bne.n	8004d82 <HAL_ADC_ConfigChannel+0x23a>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a1c      	ldr	r2, [pc, #112]	; (8004da0 <HAL_ADC_ConfigChannel+0x258>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d003      	beq.n	8004d3c <HAL_ADC_ConfigChannel+0x1f4>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b11      	cmp	r3, #17
 8004d3a:	d122      	bne.n	8004d82 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a11      	ldr	r2, [pc, #68]	; (8004da0 <HAL_ADC_ConfigChannel+0x258>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d111      	bne.n	8004d82 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004d5e:	4b11      	ldr	r3, [pc, #68]	; (8004da4 <HAL_ADC_ConfigChannel+0x25c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a11      	ldr	r2, [pc, #68]	; (8004da8 <HAL_ADC_ConfigChannel+0x260>)
 8004d64:	fba2 2303 	umull	r2, r3, r2, r3
 8004d68:	0c9a      	lsrs	r2, r3, #18
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004d74:	e002      	b.n	8004d7c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f9      	bne.n	8004d76 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3714      	adds	r7, #20
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr
 8004d98:	40012300 	.word	0x40012300
 8004d9c:	40012000 	.word	0x40012000
 8004da0:	10000012 	.word	0x10000012
 8004da4:	2000007c 	.word	0x2000007c
 8004da8:	431bde83 	.word	0x431bde83

08004dac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004db4:	4b79      	ldr	r3, [pc, #484]	; (8004f9c <ADC_Init+0x1f0>)
 8004db6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004de0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6859      	ldr	r1, [r3, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	021a      	lsls	r2, r3, #8
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004e04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6859      	ldr	r1, [r3, #4]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	6899      	ldr	r1, [r3, #8]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3e:	4a58      	ldr	r2, [pc, #352]	; (8004fa0 <ADC_Init+0x1f4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d022      	beq.n	8004e8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6899      	ldr	r1, [r3, #8]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689a      	ldr	r2, [r3, #8]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	6899      	ldr	r1, [r3, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	609a      	str	r2, [r3, #8]
 8004e88:	e00f      	b.n	8004eaa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689a      	ldr	r2, [r3, #8]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ea8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0202 	bic.w	r2, r2, #2
 8004eb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6899      	ldr	r1, [r3, #8]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	7e1b      	ldrb	r3, [r3, #24]
 8004ec4:	005a      	lsls	r2, r3, #1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d01b      	beq.n	8004f10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ee6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004ef6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6859      	ldr	r1, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	3b01      	subs	r3, #1
 8004f04:	035a      	lsls	r2, r3, #13
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	605a      	str	r2, [r3, #4]
 8004f0e:	e007      	b.n	8004f20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	051a      	lsls	r2, r3, #20
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6899      	ldr	r1, [r3, #8]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f62:	025a      	lsls	r2, r3, #9
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6899      	ldr	r1, [r3, #8]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	029a      	lsls	r2, r3, #10
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	609a      	str	r2, [r3, #8]
}
 8004f90:	bf00      	nop
 8004f92:	3714      	adds	r7, #20
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	40012300 	.word	0x40012300
 8004fa0:	0f000001 	.word	0x0f000001

08004fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fb4:	4b0c      	ldr	r3, [pc, #48]	; (8004fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fd6:	4a04      	ldr	r2, [pc, #16]	; (8004fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	60d3      	str	r3, [r2, #12]
}
 8004fdc:	bf00      	nop
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	e000ed00 	.word	0xe000ed00

08004fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ff0:	4b04      	ldr	r3, [pc, #16]	; (8005004 <__NVIC_GetPriorityGrouping+0x18>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	0a1b      	lsrs	r3, r3, #8
 8004ff6:	f003 0307 	and.w	r3, r3, #7
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	e000ed00 	.word	0xe000ed00

08005008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	4603      	mov	r3, r0
 8005010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005016:	2b00      	cmp	r3, #0
 8005018:	db0b      	blt.n	8005032 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	f003 021f 	and.w	r2, r3, #31
 8005020:	4907      	ldr	r1, [pc, #28]	; (8005040 <__NVIC_EnableIRQ+0x38>)
 8005022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	2001      	movs	r0, #1
 800502a:	fa00 f202 	lsl.w	r2, r0, r2
 800502e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	e000e100 	.word	0xe000e100

08005044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	4603      	mov	r3, r0
 800504c:	6039      	str	r1, [r7, #0]
 800504e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005054:	2b00      	cmp	r3, #0
 8005056:	db0a      	blt.n	800506e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	b2da      	uxtb	r2, r3
 800505c:	490c      	ldr	r1, [pc, #48]	; (8005090 <__NVIC_SetPriority+0x4c>)
 800505e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005062:	0112      	lsls	r2, r2, #4
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	440b      	add	r3, r1
 8005068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800506c:	e00a      	b.n	8005084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	b2da      	uxtb	r2, r3
 8005072:	4908      	ldr	r1, [pc, #32]	; (8005094 <__NVIC_SetPriority+0x50>)
 8005074:	79fb      	ldrb	r3, [r7, #7]
 8005076:	f003 030f 	and.w	r3, r3, #15
 800507a:	3b04      	subs	r3, #4
 800507c:	0112      	lsls	r2, r2, #4
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	440b      	add	r3, r1
 8005082:	761a      	strb	r2, [r3, #24]
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	e000e100 	.word	0xe000e100
 8005094:	e000ed00 	.word	0xe000ed00

08005098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005098:	b480      	push	{r7}
 800509a:	b089      	sub	sp, #36	; 0x24
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f1c3 0307 	rsb	r3, r3, #7
 80050b2:	2b04      	cmp	r3, #4
 80050b4:	bf28      	it	cs
 80050b6:	2304      	movcs	r3, #4
 80050b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	3304      	adds	r3, #4
 80050be:	2b06      	cmp	r3, #6
 80050c0:	d902      	bls.n	80050c8 <NVIC_EncodePriority+0x30>
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	3b03      	subs	r3, #3
 80050c6:	e000      	b.n	80050ca <NVIC_EncodePriority+0x32>
 80050c8:	2300      	movs	r3, #0
 80050ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	43da      	mvns	r2, r3
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	401a      	ands	r2, r3
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ea:	43d9      	mvns	r1, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050f0:	4313      	orrs	r3, r2
         );
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3724      	adds	r7, #36	; 0x24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
	...

08005100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3b01      	subs	r3, #1
 800510c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005110:	d301      	bcc.n	8005116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005112:	2301      	movs	r3, #1
 8005114:	e00f      	b.n	8005136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005116:	4a0a      	ldr	r2, [pc, #40]	; (8005140 <SysTick_Config+0x40>)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	3b01      	subs	r3, #1
 800511c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800511e:	210f      	movs	r1, #15
 8005120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005124:	f7ff ff8e 	bl	8005044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005128:	4b05      	ldr	r3, [pc, #20]	; (8005140 <SysTick_Config+0x40>)
 800512a:	2200      	movs	r2, #0
 800512c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800512e:	4b04      	ldr	r3, [pc, #16]	; (8005140 <SysTick_Config+0x40>)
 8005130:	2207      	movs	r2, #7
 8005132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	e000e010 	.word	0xe000e010

08005144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f7ff ff29 	bl	8004fa4 <__NVIC_SetPriorityGrouping>
}
 8005152:	bf00      	nop
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800515a:	b580      	push	{r7, lr}
 800515c:	b086      	sub	sp, #24
 800515e:	af00      	add	r7, sp, #0
 8005160:	4603      	mov	r3, r0
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	607a      	str	r2, [r7, #4]
 8005166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005168:	2300      	movs	r3, #0
 800516a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800516c:	f7ff ff3e 	bl	8004fec <__NVIC_GetPriorityGrouping>
 8005170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	68b9      	ldr	r1, [r7, #8]
 8005176:	6978      	ldr	r0, [r7, #20]
 8005178:	f7ff ff8e 	bl	8005098 <NVIC_EncodePriority>
 800517c:	4602      	mov	r2, r0
 800517e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005182:	4611      	mov	r1, r2
 8005184:	4618      	mov	r0, r3
 8005186:	f7ff ff5d 	bl	8005044 <__NVIC_SetPriority>
}
 800518a:	bf00      	nop
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b082      	sub	sp, #8
 8005196:	af00      	add	r7, sp, #0
 8005198:	4603      	mov	r3, r0
 800519a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800519c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff ff31 	bl	8005008 <__NVIC_EnableIRQ>
}
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b082      	sub	sp, #8
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7ff ffa2 	bl	8005100 <SysTick_Config>
 80051bc:	4603      	mov	r3, r0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
	...

080051c8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80051da:	4b23      	ldr	r3, [pc, #140]	; (8005268 <HAL_FLASH_Program+0xa0>)
 80051dc:	7e1b      	ldrb	r3, [r3, #24]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d101      	bne.n	80051e6 <HAL_FLASH_Program+0x1e>
 80051e2:	2302      	movs	r3, #2
 80051e4:	e03b      	b.n	800525e <HAL_FLASH_Program+0x96>
 80051e6:	4b20      	ldr	r3, [pc, #128]	; (8005268 <HAL_FLASH_Program+0xa0>)
 80051e8:	2201      	movs	r2, #1
 80051ea:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80051ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80051f0:	f000 f87c 	bl	80052ec <FLASH_WaitForLastOperation>
 80051f4:	4603      	mov	r3, r0
 80051f6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80051f8:	7dfb      	ldrb	r3, [r7, #23]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d12b      	bne.n	8005256 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d105      	bne.n	8005210 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005204:	783b      	ldrb	r3, [r7, #0]
 8005206:	4619      	mov	r1, r3
 8005208:	68b8      	ldr	r0, [r7, #8]
 800520a:	f000 f927 	bl	800545c <FLASH_Program_Byte>
 800520e:	e016      	b.n	800523e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d105      	bne.n	8005222 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005216:	883b      	ldrh	r3, [r7, #0]
 8005218:	4619      	mov	r1, r3
 800521a:	68b8      	ldr	r0, [r7, #8]
 800521c:	f000 f8fa 	bl	8005414 <FLASH_Program_HalfWord>
 8005220:	e00d      	b.n	800523e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b02      	cmp	r3, #2
 8005226:	d105      	bne.n	8005234 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	4619      	mov	r1, r3
 800522c:	68b8      	ldr	r0, [r7, #8]
 800522e:	f000 f8cf 	bl	80053d0 <FLASH_Program_Word>
 8005232:	e004      	b.n	800523e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005234:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005238:	68b8      	ldr	r0, [r7, #8]
 800523a:	f000 f897 	bl	800536c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800523e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005242:	f000 f853 	bl	80052ec <FLASH_WaitForLastOperation>
 8005246:	4603      	mov	r3, r0
 8005248:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800524a:	4b08      	ldr	r3, [pc, #32]	; (800526c <HAL_FLASH_Program+0xa4>)
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	4a07      	ldr	r2, [pc, #28]	; (800526c <HAL_FLASH_Program+0xa4>)
 8005250:	f023 0301 	bic.w	r3, r3, #1
 8005254:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005256:	4b04      	ldr	r3, [pc, #16]	; (8005268 <HAL_FLASH_Program+0xa0>)
 8005258:	2200      	movs	r2, #0
 800525a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800525c:	7dfb      	ldrb	r3, [r7, #23]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000f68 	.word	0x20000f68
 800526c:	40023c00 	.word	0x40023c00

08005270 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800527a:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <HAL_FLASH_Unlock+0x38>)
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	da0b      	bge.n	800529a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005282:	4b09      	ldr	r3, [pc, #36]	; (80052a8 <HAL_FLASH_Unlock+0x38>)
 8005284:	4a09      	ldr	r2, [pc, #36]	; (80052ac <HAL_FLASH_Unlock+0x3c>)
 8005286:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005288:	4b07      	ldr	r3, [pc, #28]	; (80052a8 <HAL_FLASH_Unlock+0x38>)
 800528a:	4a09      	ldr	r2, [pc, #36]	; (80052b0 <HAL_FLASH_Unlock+0x40>)
 800528c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800528e:	4b06      	ldr	r3, [pc, #24]	; (80052a8 <HAL_FLASH_Unlock+0x38>)
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	da01      	bge.n	800529a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800529a:	79fb      	ldrb	r3, [r7, #7]
}
 800529c:	4618      	mov	r0, r3
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	40023c00 	.word	0x40023c00
 80052ac:	45670123 	.word	0x45670123
 80052b0:	cdef89ab 	.word	0xcdef89ab

080052b4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80052b8:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <HAL_FLASH_Lock+0x1c>)
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	4a04      	ldr	r2, [pc, #16]	; (80052d0 <HAL_FLASH_Lock+0x1c>)
 80052be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052c2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	40023c00 	.word	0x40023c00

080052d4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80052d8:	4b03      	ldr	r3, [pc, #12]	; (80052e8 <HAL_FLASH_GetError+0x14>)
 80052da:	69db      	ldr	r3, [r3, #28]
}  
 80052dc:	4618      	mov	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	20000f68 	.word	0x20000f68

080052ec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80052f8:	4b1a      	ldr	r3, [pc, #104]	; (8005364 <FLASH_WaitForLastOperation+0x78>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80052fe:	f7ff fbd3 	bl	8004aa8 <HAL_GetTick>
 8005302:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005304:	e010      	b.n	8005328 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800530c:	d00c      	beq.n	8005328 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d007      	beq.n	8005324 <FLASH_WaitForLastOperation+0x38>
 8005314:	f7ff fbc8 	bl	8004aa8 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	429a      	cmp	r2, r3
 8005322:	d201      	bcs.n	8005328 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e019      	b.n	800535c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005328:	4b0f      	ldr	r3, [pc, #60]	; (8005368 <FLASH_WaitForLastOperation+0x7c>)
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e8      	bne.n	8005306 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005334:	4b0c      	ldr	r3, [pc, #48]	; (8005368 <FLASH_WaitForLastOperation+0x7c>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005340:	4b09      	ldr	r3, [pc, #36]	; (8005368 <FLASH_WaitForLastOperation+0x7c>)
 8005342:	2201      	movs	r2, #1
 8005344:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005346:	4b08      	ldr	r3, [pc, #32]	; (8005368 <FLASH_WaitForLastOperation+0x7c>)
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005352:	f000 f8a5 	bl	80054a0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800535a:	2300      	movs	r3, #0
  
}  
 800535c:	4618      	mov	r0, r3
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	20000f68 	.word	0x20000f68
 8005368:	40023c00 	.word	0x40023c00

0800536c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005378:	4b14      	ldr	r3, [pc, #80]	; (80053cc <FLASH_Program_DoubleWord+0x60>)
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	4a13      	ldr	r2, [pc, #76]	; (80053cc <FLASH_Program_DoubleWord+0x60>)
 800537e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005382:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005384:	4b11      	ldr	r3, [pc, #68]	; (80053cc <FLASH_Program_DoubleWord+0x60>)
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	4a10      	ldr	r2, [pc, #64]	; (80053cc <FLASH_Program_DoubleWord+0x60>)
 800538a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800538e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005390:	4b0e      	ldr	r3, [pc, #56]	; (80053cc <FLASH_Program_DoubleWord+0x60>)
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	4a0d      	ldr	r2, [pc, #52]	; (80053cc <FLASH_Program_DoubleWord+0x60>)
 8005396:	f043 0301 	orr.w	r3, r3, #1
 800539a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80053a2:	f3bf 8f6f 	isb	sy
}
 80053a6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80053a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	000a      	movs	r2, r1
 80053b6:	2300      	movs	r3, #0
 80053b8:	68f9      	ldr	r1, [r7, #12]
 80053ba:	3104      	adds	r1, #4
 80053bc:	4613      	mov	r3, r2
 80053be:	600b      	str	r3, [r1, #0]
}
 80053c0:	bf00      	nop
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	40023c00 	.word	0x40023c00

080053d0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80053da:	4b0d      	ldr	r3, [pc, #52]	; (8005410 <FLASH_Program_Word+0x40>)
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	4a0c      	ldr	r2, [pc, #48]	; (8005410 <FLASH_Program_Word+0x40>)
 80053e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80053e6:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <FLASH_Program_Word+0x40>)
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	4a09      	ldr	r2, [pc, #36]	; (8005410 <FLASH_Program_Word+0x40>)
 80053ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80053f2:	4b07      	ldr	r3, [pc, #28]	; (8005410 <FLASH_Program_Word+0x40>)
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	4a06      	ldr	r2, [pc, #24]	; (8005410 <FLASH_Program_Word+0x40>)
 80053f8:	f043 0301 	orr.w	r3, r3, #1
 80053fc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	601a      	str	r2, [r3, #0]
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	40023c00 	.word	0x40023c00

08005414 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	460b      	mov	r3, r1
 800541e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005420:	4b0d      	ldr	r3, [pc, #52]	; (8005458 <FLASH_Program_HalfWord+0x44>)
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	4a0c      	ldr	r2, [pc, #48]	; (8005458 <FLASH_Program_HalfWord+0x44>)
 8005426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800542a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800542c:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <FLASH_Program_HalfWord+0x44>)
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	4a09      	ldr	r2, [pc, #36]	; (8005458 <FLASH_Program_HalfWord+0x44>)
 8005432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005436:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005438:	4b07      	ldr	r3, [pc, #28]	; (8005458 <FLASH_Program_HalfWord+0x44>)
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	4a06      	ldr	r2, [pc, #24]	; (8005458 <FLASH_Program_HalfWord+0x44>)
 800543e:	f043 0301 	orr.w	r3, r3, #1
 8005442:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	887a      	ldrh	r2, [r7, #2]
 8005448:	801a      	strh	r2, [r3, #0]
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	40023c00 	.word	0x40023c00

0800545c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	460b      	mov	r3, r1
 8005466:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005468:	4b0c      	ldr	r3, [pc, #48]	; (800549c <FLASH_Program_Byte+0x40>)
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	4a0b      	ldr	r2, [pc, #44]	; (800549c <FLASH_Program_Byte+0x40>)
 800546e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005472:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005474:	4b09      	ldr	r3, [pc, #36]	; (800549c <FLASH_Program_Byte+0x40>)
 8005476:	4a09      	ldr	r2, [pc, #36]	; (800549c <FLASH_Program_Byte+0x40>)
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800547c:	4b07      	ldr	r3, [pc, #28]	; (800549c <FLASH_Program_Byte+0x40>)
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	4a06      	ldr	r2, [pc, #24]	; (800549c <FLASH_Program_Byte+0x40>)
 8005482:	f043 0301 	orr.w	r3, r3, #1
 8005486:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	78fa      	ldrb	r2, [r7, #3]
 800548c:	701a      	strb	r2, [r3, #0]
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40023c00 	.word	0x40023c00

080054a0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80054a4:	4b2f      	ldr	r3, [pc, #188]	; (8005564 <FLASH_SetErrorCode+0xc4>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f003 0310 	and.w	r3, r3, #16
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d008      	beq.n	80054c2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80054b0:	4b2d      	ldr	r3, [pc, #180]	; (8005568 <FLASH_SetErrorCode+0xc8>)
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	f043 0310 	orr.w	r3, r3, #16
 80054b8:	4a2b      	ldr	r2, [pc, #172]	; (8005568 <FLASH_SetErrorCode+0xc8>)
 80054ba:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80054bc:	4b29      	ldr	r3, [pc, #164]	; (8005564 <FLASH_SetErrorCode+0xc4>)
 80054be:	2210      	movs	r2, #16
 80054c0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80054c2:	4b28      	ldr	r3, [pc, #160]	; (8005564 <FLASH_SetErrorCode+0xc4>)
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f003 0320 	and.w	r3, r3, #32
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d008      	beq.n	80054e0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80054ce:	4b26      	ldr	r3, [pc, #152]	; (8005568 <FLASH_SetErrorCode+0xc8>)
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	f043 0308 	orr.w	r3, r3, #8
 80054d6:	4a24      	ldr	r2, [pc, #144]	; (8005568 <FLASH_SetErrorCode+0xc8>)
 80054d8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80054da:	4b22      	ldr	r3, [pc, #136]	; (8005564 <FLASH_SetErrorCode+0xc4>)
 80054dc:	2220      	movs	r2, #32
 80054de:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80054e0:	4b20      	ldr	r3, [pc, #128]	; (8005564 <FLASH_SetErrorCode+0xc4>)
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80054ec:	4b1e      	ldr	r3, [pc, #120]	; (8005568 <FLASH_SetErrorCode+0xc8>)
 80054ee:	69db      	ldr	r3, [r3, #28]
 80054f0:	f043 0304 	orr.w	r3, r3, #4
 80054f4:	4a1c      	ldr	r2, [pc, #112]	; (8005568 <FLASH_SetErrorCode+0xc8>)
 80054f6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80054f8:	4b1a      	ldr	r3, [pc, #104]	; (8005564 <FLASH_SetErrorCode+0xc4>)
 80054fa:	2240      	movs	r2, #64	; 0x40
 80054fc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80054fe:	4b19      	ldr	r3, [pc, #100]	; (8005564 <FLASH_SetErrorCode+0xc4>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005506:	2b00      	cmp	r3, #0
 8005508:	d008      	beq.n	800551c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800550a:	4b17      	ldr	r3, [pc, #92]	; (8005568 <FLASH_SetErrorCode+0xc8>)
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f043 0302 	orr.w	r3, r3, #2
 8005512:	4a15      	ldr	r2, [pc, #84]	; (8005568 <FLASH_SetErrorCode+0xc8>)
 8005514:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005516:	4b13      	ldr	r3, [pc, #76]	; (8005564 <FLASH_SetErrorCode+0xc4>)
 8005518:	2280      	movs	r2, #128	; 0x80
 800551a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800551c:	4b11      	ldr	r3, [pc, #68]	; (8005564 <FLASH_SetErrorCode+0xc4>)
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005524:	2b00      	cmp	r3, #0
 8005526:	d009      	beq.n	800553c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005528:	4b0f      	ldr	r3, [pc, #60]	; (8005568 <FLASH_SetErrorCode+0xc8>)
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	f043 0301 	orr.w	r3, r3, #1
 8005530:	4a0d      	ldr	r2, [pc, #52]	; (8005568 <FLASH_SetErrorCode+0xc8>)
 8005532:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005534:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <FLASH_SetErrorCode+0xc4>)
 8005536:	f44f 7280 	mov.w	r2, #256	; 0x100
 800553a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800553c:	4b09      	ldr	r3, [pc, #36]	; (8005564 <FLASH_SetErrorCode+0xc4>)
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d008      	beq.n	800555a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005548:	4b07      	ldr	r3, [pc, #28]	; (8005568 <FLASH_SetErrorCode+0xc8>)
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	f043 0320 	orr.w	r3, r3, #32
 8005550:	4a05      	ldr	r2, [pc, #20]	; (8005568 <FLASH_SetErrorCode+0xc8>)
 8005552:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005554:	4b03      	ldr	r3, [pc, #12]	; (8005564 <FLASH_SetErrorCode+0xc4>)
 8005556:	2202      	movs	r2, #2
 8005558:	60da      	str	r2, [r3, #12]
  }
}
 800555a:	bf00      	nop
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr
 8005564:	40023c00 	.word	0x40023c00
 8005568:	20000f68 	.word	0x20000f68

0800556c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800557a:	2300      	movs	r3, #0
 800557c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800557e:	4b31      	ldr	r3, [pc, #196]	; (8005644 <HAL_FLASHEx_Erase+0xd8>)
 8005580:	7e1b      	ldrb	r3, [r3, #24]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d101      	bne.n	800558a <HAL_FLASHEx_Erase+0x1e>
 8005586:	2302      	movs	r3, #2
 8005588:	e058      	b.n	800563c <HAL_FLASHEx_Erase+0xd0>
 800558a:	4b2e      	ldr	r3, [pc, #184]	; (8005644 <HAL_FLASHEx_Erase+0xd8>)
 800558c:	2201      	movs	r2, #1
 800558e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005590:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005594:	f7ff feaa 	bl	80052ec <FLASH_WaitForLastOperation>
 8005598:	4603      	mov	r3, r0
 800559a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d148      	bne.n	8005634 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055a8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d115      	bne.n	80055de <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	4619      	mov	r1, r3
 80055be:	4610      	mov	r0, r2
 80055c0:	f000 f844 	bl	800564c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80055c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80055c8:	f7ff fe90 	bl	80052ec <FLASH_WaitForLastOperation>
 80055cc:	4603      	mov	r3, r0
 80055ce:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80055d0:	4b1d      	ldr	r3, [pc, #116]	; (8005648 <HAL_FLASHEx_Erase+0xdc>)
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	4a1c      	ldr	r2, [pc, #112]	; (8005648 <HAL_FLASHEx_Erase+0xdc>)
 80055d6:	f023 0304 	bic.w	r3, r3, #4
 80055da:	6113      	str	r3, [r2, #16]
 80055dc:	e028      	b.n	8005630 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	60bb      	str	r3, [r7, #8]
 80055e4:	e01c      	b.n	8005620 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	4619      	mov	r1, r3
 80055ee:	68b8      	ldr	r0, [r7, #8]
 80055f0:	f000 f850 	bl	8005694 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80055f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80055f8:	f7ff fe78 	bl	80052ec <FLASH_WaitForLastOperation>
 80055fc:	4603      	mov	r3, r0
 80055fe:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005600:	4b11      	ldr	r3, [pc, #68]	; (8005648 <HAL_FLASHEx_Erase+0xdc>)
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	4a10      	ldr	r2, [pc, #64]	; (8005648 <HAL_FLASHEx_Erase+0xdc>)
 8005606:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800560a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800560c:	7bfb      	ldrb	r3, [r7, #15]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	601a      	str	r2, [r3, #0]
          break;
 8005618:	e00a      	b.n	8005630 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	3301      	adds	r3, #1
 800561e:	60bb      	str	r3, [r7, #8]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68da      	ldr	r2, [r3, #12]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	4413      	add	r3, r2
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	429a      	cmp	r2, r3
 800562e:	d3da      	bcc.n	80055e6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005630:	f000 f878 	bl	8005724 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005634:	4b03      	ldr	r3, [pc, #12]	; (8005644 <HAL_FLASHEx_Erase+0xd8>)
 8005636:	2200      	movs	r2, #0
 8005638:	761a      	strb	r2, [r3, #24]

  return status;
 800563a:	7bfb      	ldrb	r3, [r7, #15]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	20000f68 	.word	0x20000f68
 8005648:	40023c00 	.word	0x40023c00

0800564c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	6039      	str	r1, [r7, #0]
 8005656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005658:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <FLASH_MassErase+0x44>)
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	4a0c      	ldr	r2, [pc, #48]	; (8005690 <FLASH_MassErase+0x44>)
 800565e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005662:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005664:	4b0a      	ldr	r3, [pc, #40]	; (8005690 <FLASH_MassErase+0x44>)
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	4a09      	ldr	r2, [pc, #36]	; (8005690 <FLASH_MassErase+0x44>)
 800566a:	f043 0304 	orr.w	r3, r3, #4
 800566e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005670:	4b07      	ldr	r3, [pc, #28]	; (8005690 <FLASH_MassErase+0x44>)
 8005672:	691a      	ldr	r2, [r3, #16]
 8005674:	79fb      	ldrb	r3, [r7, #7]
 8005676:	021b      	lsls	r3, r3, #8
 8005678:	4313      	orrs	r3, r2
 800567a:	4a05      	ldr	r2, [pc, #20]	; (8005690 <FLASH_MassErase+0x44>)
 800567c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005680:	6113      	str	r3, [r2, #16]
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40023c00 	.word	0x40023c00

08005694 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	460b      	mov	r3, r1
 800569e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80056a4:	78fb      	ldrb	r3, [r7, #3]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d102      	bne.n	80056b0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80056aa:	2300      	movs	r3, #0
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	e010      	b.n	80056d2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d103      	bne.n	80056be <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80056b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	e009      	b.n	80056d2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80056be:	78fb      	ldrb	r3, [r7, #3]
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d103      	bne.n	80056cc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80056c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	e002      	b.n	80056d2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80056cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80056d0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80056d2:	4b13      	ldr	r3, [pc, #76]	; (8005720 <FLASH_Erase_Sector+0x8c>)
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	4a12      	ldr	r2, [pc, #72]	; (8005720 <FLASH_Erase_Sector+0x8c>)
 80056d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80056de:	4b10      	ldr	r3, [pc, #64]	; (8005720 <FLASH_Erase_Sector+0x8c>)
 80056e0:	691a      	ldr	r2, [r3, #16]
 80056e2:	490f      	ldr	r1, [pc, #60]	; (8005720 <FLASH_Erase_Sector+0x8c>)
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80056ea:	4b0d      	ldr	r3, [pc, #52]	; (8005720 <FLASH_Erase_Sector+0x8c>)
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	4a0c      	ldr	r2, [pc, #48]	; (8005720 <FLASH_Erase_Sector+0x8c>)
 80056f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80056f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80056f6:	4b0a      	ldr	r3, [pc, #40]	; (8005720 <FLASH_Erase_Sector+0x8c>)
 80056f8:	691a      	ldr	r2, [r3, #16]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	4313      	orrs	r3, r2
 8005700:	4a07      	ldr	r2, [pc, #28]	; (8005720 <FLASH_Erase_Sector+0x8c>)
 8005702:	f043 0302 	orr.w	r3, r3, #2
 8005706:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005708:	4b05      	ldr	r3, [pc, #20]	; (8005720 <FLASH_Erase_Sector+0x8c>)
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	4a04      	ldr	r2, [pc, #16]	; (8005720 <FLASH_Erase_Sector+0x8c>)
 800570e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005712:	6113      	str	r3, [r2, #16]
}
 8005714:	bf00      	nop
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	40023c00 	.word	0x40023c00

08005724 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005728:	4b20      	ldr	r3, [pc, #128]	; (80057ac <FLASH_FlushCaches+0x88>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005730:	2b00      	cmp	r3, #0
 8005732:	d017      	beq.n	8005764 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005734:	4b1d      	ldr	r3, [pc, #116]	; (80057ac <FLASH_FlushCaches+0x88>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a1c      	ldr	r2, [pc, #112]	; (80057ac <FLASH_FlushCaches+0x88>)
 800573a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800573e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005740:	4b1a      	ldr	r3, [pc, #104]	; (80057ac <FLASH_FlushCaches+0x88>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a19      	ldr	r2, [pc, #100]	; (80057ac <FLASH_FlushCaches+0x88>)
 8005746:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800574a:	6013      	str	r3, [r2, #0]
 800574c:	4b17      	ldr	r3, [pc, #92]	; (80057ac <FLASH_FlushCaches+0x88>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a16      	ldr	r2, [pc, #88]	; (80057ac <FLASH_FlushCaches+0x88>)
 8005752:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005756:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005758:	4b14      	ldr	r3, [pc, #80]	; (80057ac <FLASH_FlushCaches+0x88>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a13      	ldr	r2, [pc, #76]	; (80057ac <FLASH_FlushCaches+0x88>)
 800575e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005762:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005764:	4b11      	ldr	r3, [pc, #68]	; (80057ac <FLASH_FlushCaches+0x88>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800576c:	2b00      	cmp	r3, #0
 800576e:	d017      	beq.n	80057a0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005770:	4b0e      	ldr	r3, [pc, #56]	; (80057ac <FLASH_FlushCaches+0x88>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a0d      	ldr	r2, [pc, #52]	; (80057ac <FLASH_FlushCaches+0x88>)
 8005776:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800577a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800577c:	4b0b      	ldr	r3, [pc, #44]	; (80057ac <FLASH_FlushCaches+0x88>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a0a      	ldr	r2, [pc, #40]	; (80057ac <FLASH_FlushCaches+0x88>)
 8005782:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005786:	6013      	str	r3, [r2, #0]
 8005788:	4b08      	ldr	r3, [pc, #32]	; (80057ac <FLASH_FlushCaches+0x88>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a07      	ldr	r2, [pc, #28]	; (80057ac <FLASH_FlushCaches+0x88>)
 800578e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005792:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005794:	4b05      	ldr	r3, [pc, #20]	; (80057ac <FLASH_FlushCaches+0x88>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a04      	ldr	r2, [pc, #16]	; (80057ac <FLASH_FlushCaches+0x88>)
 800579a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800579e:	6013      	str	r3, [r2, #0]
  }
}
 80057a0:	bf00      	nop
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	40023c00 	.word	0x40023c00

080057b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b089      	sub	sp, #36	; 0x24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80057ba:	2300      	movs	r3, #0
 80057bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80057be:	2300      	movs	r3, #0
 80057c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057c6:	2300      	movs	r3, #0
 80057c8:	61fb      	str	r3, [r7, #28]
 80057ca:	e159      	b.n	8005a80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057cc:	2201      	movs	r2, #1
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	fa02 f303 	lsl.w	r3, r2, r3
 80057d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	4013      	ands	r3, r2
 80057de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	f040 8148 	bne.w	8005a7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	f003 0303 	and.w	r3, r3, #3
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d005      	beq.n	8005802 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d130      	bne.n	8005864 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	2203      	movs	r2, #3
 800580e:	fa02 f303 	lsl.w	r3, r2, r3
 8005812:	43db      	mvns	r3, r3
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	4013      	ands	r3, r2
 8005818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	fa02 f303 	lsl.w	r3, r2, r3
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	4313      	orrs	r3, r2
 800582a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005838:	2201      	movs	r2, #1
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	43db      	mvns	r3, r3
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	4013      	ands	r3, r2
 8005846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	091b      	lsrs	r3, r3, #4
 800584e:	f003 0201 	and.w	r2, r3, #1
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	4313      	orrs	r3, r2
 800585c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f003 0303 	and.w	r3, r3, #3
 800586c:	2b03      	cmp	r3, #3
 800586e:	d017      	beq.n	80058a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	2203      	movs	r2, #3
 800587c:	fa02 f303 	lsl.w	r3, r2, r3
 8005880:	43db      	mvns	r3, r3
 8005882:	69ba      	ldr	r2, [r7, #24]
 8005884:	4013      	ands	r3, r2
 8005886:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	fa02 f303 	lsl.w	r3, r2, r3
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	4313      	orrs	r3, r2
 8005898:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f003 0303 	and.w	r3, r3, #3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d123      	bne.n	80058f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	08da      	lsrs	r2, r3, #3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	3208      	adds	r2, #8
 80058b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	f003 0307 	and.w	r3, r3, #7
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	220f      	movs	r2, #15
 80058c4:	fa02 f303 	lsl.w	r3, r2, r3
 80058c8:	43db      	mvns	r3, r3
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	4013      	ands	r3, r2
 80058ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	691a      	ldr	r2, [r3, #16]
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	69ba      	ldr	r2, [r7, #24]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	08da      	lsrs	r2, r3, #3
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3208      	adds	r2, #8
 80058ee:	69b9      	ldr	r1, [r7, #24]
 80058f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	2203      	movs	r2, #3
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	43db      	mvns	r3, r3
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	4013      	ands	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f003 0203 	and.w	r2, r3, #3
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	4313      	orrs	r3, r2
 8005920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 80a2 	beq.w	8005a7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005936:	2300      	movs	r3, #0
 8005938:	60fb      	str	r3, [r7, #12]
 800593a:	4b57      	ldr	r3, [pc, #348]	; (8005a98 <HAL_GPIO_Init+0x2e8>)
 800593c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593e:	4a56      	ldr	r2, [pc, #344]	; (8005a98 <HAL_GPIO_Init+0x2e8>)
 8005940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005944:	6453      	str	r3, [r2, #68]	; 0x44
 8005946:	4b54      	ldr	r3, [pc, #336]	; (8005a98 <HAL_GPIO_Init+0x2e8>)
 8005948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005952:	4a52      	ldr	r2, [pc, #328]	; (8005a9c <HAL_GPIO_Init+0x2ec>)
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	089b      	lsrs	r3, r3, #2
 8005958:	3302      	adds	r3, #2
 800595a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800595e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	f003 0303 	and.w	r3, r3, #3
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	220f      	movs	r2, #15
 800596a:	fa02 f303 	lsl.w	r3, r2, r3
 800596e:	43db      	mvns	r3, r3
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	4013      	ands	r3, r2
 8005974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a49      	ldr	r2, [pc, #292]	; (8005aa0 <HAL_GPIO_Init+0x2f0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d019      	beq.n	80059b2 <HAL_GPIO_Init+0x202>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a48      	ldr	r2, [pc, #288]	; (8005aa4 <HAL_GPIO_Init+0x2f4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d013      	beq.n	80059ae <HAL_GPIO_Init+0x1fe>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a47      	ldr	r2, [pc, #284]	; (8005aa8 <HAL_GPIO_Init+0x2f8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d00d      	beq.n	80059aa <HAL_GPIO_Init+0x1fa>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a46      	ldr	r2, [pc, #280]	; (8005aac <HAL_GPIO_Init+0x2fc>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d007      	beq.n	80059a6 <HAL_GPIO_Init+0x1f6>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a45      	ldr	r2, [pc, #276]	; (8005ab0 <HAL_GPIO_Init+0x300>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d101      	bne.n	80059a2 <HAL_GPIO_Init+0x1f2>
 800599e:	2304      	movs	r3, #4
 80059a0:	e008      	b.n	80059b4 <HAL_GPIO_Init+0x204>
 80059a2:	2307      	movs	r3, #7
 80059a4:	e006      	b.n	80059b4 <HAL_GPIO_Init+0x204>
 80059a6:	2303      	movs	r3, #3
 80059a8:	e004      	b.n	80059b4 <HAL_GPIO_Init+0x204>
 80059aa:	2302      	movs	r3, #2
 80059ac:	e002      	b.n	80059b4 <HAL_GPIO_Init+0x204>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <HAL_GPIO_Init+0x204>
 80059b2:	2300      	movs	r3, #0
 80059b4:	69fa      	ldr	r2, [r7, #28]
 80059b6:	f002 0203 	and.w	r2, r2, #3
 80059ba:	0092      	lsls	r2, r2, #2
 80059bc:	4093      	lsls	r3, r2
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	4313      	orrs	r3, r2
 80059c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059c4:	4935      	ldr	r1, [pc, #212]	; (8005a9c <HAL_GPIO_Init+0x2ec>)
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	089b      	lsrs	r3, r3, #2
 80059ca:	3302      	adds	r3, #2
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059d2:	4b38      	ldr	r3, [pc, #224]	; (8005ab4 <HAL_GPIO_Init+0x304>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	43db      	mvns	r3, r3
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	4013      	ands	r3, r2
 80059e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d003      	beq.n	80059f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059f6:	4a2f      	ldr	r2, [pc, #188]	; (8005ab4 <HAL_GPIO_Init+0x304>)
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059fc:	4b2d      	ldr	r3, [pc, #180]	; (8005ab4 <HAL_GPIO_Init+0x304>)
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	43db      	mvns	r3, r3
 8005a06:	69ba      	ldr	r2, [r7, #24]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d003      	beq.n	8005a20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a20:	4a24      	ldr	r2, [pc, #144]	; (8005ab4 <HAL_GPIO_Init+0x304>)
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a26:	4b23      	ldr	r3, [pc, #140]	; (8005ab4 <HAL_GPIO_Init+0x304>)
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	43db      	mvns	r3, r3
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	4013      	ands	r3, r2
 8005a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a4a:	4a1a      	ldr	r2, [pc, #104]	; (8005ab4 <HAL_GPIO_Init+0x304>)
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a50:	4b18      	ldr	r3, [pc, #96]	; (8005ab4 <HAL_GPIO_Init+0x304>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a74:	4a0f      	ldr	r2, [pc, #60]	; (8005ab4 <HAL_GPIO_Init+0x304>)
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	61fb      	str	r3, [r7, #28]
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	2b0f      	cmp	r3, #15
 8005a84:	f67f aea2 	bls.w	80057cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a88:	bf00      	nop
 8005a8a:	bf00      	nop
 8005a8c:	3724      	adds	r7, #36	; 0x24
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40023800 	.word	0x40023800
 8005a9c:	40013800 	.word	0x40013800
 8005aa0:	40020000 	.word	0x40020000
 8005aa4:	40020400 	.word	0x40020400
 8005aa8:	40020800 	.word	0x40020800
 8005aac:	40020c00 	.word	0x40020c00
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	40013c00 	.word	0x40013c00

08005ab8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	887b      	ldrh	r3, [r7, #2]
 8005aca:	4013      	ands	r3, r2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	73fb      	strb	r3, [r7, #15]
 8005ad4:	e001      	b.n	8005ada <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	460b      	mov	r3, r1
 8005af2:	807b      	strh	r3, [r7, #2]
 8005af4:	4613      	mov	r3, r2
 8005af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005af8:	787b      	ldrb	r3, [r7, #1]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005afe:	887a      	ldrh	r2, [r7, #2]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b04:	e003      	b.n	8005b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b06:	887b      	ldrh	r3, [r7, #2]
 8005b08:	041a      	lsls	r2, r3, #16
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	619a      	str	r2, [r3, #24]
}
 8005b0e:	bf00      	nop
 8005b10:	370c      	adds	r7, #12
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b085      	sub	sp, #20
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	460b      	mov	r3, r1
 8005b24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005b2c:	887a      	ldrh	r2, [r7, #2]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	4013      	ands	r3, r2
 8005b32:	041a      	lsls	r2, r3, #16
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	43d9      	mvns	r1, r3
 8005b38:	887b      	ldrh	r3, [r7, #2]
 8005b3a:	400b      	ands	r3, r1
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	619a      	str	r2, [r3, #24]
}
 8005b42:	bf00      	nop
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
	...

08005b50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e12b      	b.n	8005dba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d106      	bne.n	8005b7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7fe fa44 	bl	8004004 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2224      	movs	r2, #36	; 0x24
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0201 	bic.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ba2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bb2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005bb4:	f000 fd40 	bl	8006638 <HAL_RCC_GetPCLK1Freq>
 8005bb8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	4a81      	ldr	r2, [pc, #516]	; (8005dc4 <HAL_I2C_Init+0x274>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d807      	bhi.n	8005bd4 <HAL_I2C_Init+0x84>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4a80      	ldr	r2, [pc, #512]	; (8005dc8 <HAL_I2C_Init+0x278>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	bf94      	ite	ls
 8005bcc:	2301      	movls	r3, #1
 8005bce:	2300      	movhi	r3, #0
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	e006      	b.n	8005be2 <HAL_I2C_Init+0x92>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4a7d      	ldr	r2, [pc, #500]	; (8005dcc <HAL_I2C_Init+0x27c>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	bf94      	ite	ls
 8005bdc:	2301      	movls	r3, #1
 8005bde:	2300      	movhi	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e0e7      	b.n	8005dba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4a78      	ldr	r2, [pc, #480]	; (8005dd0 <HAL_I2C_Init+0x280>)
 8005bee:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf2:	0c9b      	lsrs	r3, r3, #18
 8005bf4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	4a6a      	ldr	r2, [pc, #424]	; (8005dc4 <HAL_I2C_Init+0x274>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d802      	bhi.n	8005c24 <HAL_I2C_Init+0xd4>
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	3301      	adds	r3, #1
 8005c22:	e009      	b.n	8005c38 <HAL_I2C_Init+0xe8>
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005c2a:	fb02 f303 	mul.w	r3, r2, r3
 8005c2e:	4a69      	ldr	r2, [pc, #420]	; (8005dd4 <HAL_I2C_Init+0x284>)
 8005c30:	fba2 2303 	umull	r2, r3, r2, r3
 8005c34:	099b      	lsrs	r3, r3, #6
 8005c36:	3301      	adds	r3, #1
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6812      	ldr	r2, [r2, #0]
 8005c3c:	430b      	orrs	r3, r1
 8005c3e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005c4a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	495c      	ldr	r1, [pc, #368]	; (8005dc4 <HAL_I2C_Init+0x274>)
 8005c54:	428b      	cmp	r3, r1
 8005c56:	d819      	bhi.n	8005c8c <HAL_I2C_Init+0x13c>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	1e59      	subs	r1, r3, #1
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	005b      	lsls	r3, r3, #1
 8005c62:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c66:	1c59      	adds	r1, r3, #1
 8005c68:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c6c:	400b      	ands	r3, r1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <HAL_I2C_Init+0x138>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	1e59      	subs	r1, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	005b      	lsls	r3, r3, #1
 8005c7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c80:	3301      	adds	r3, #1
 8005c82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c86:	e051      	b.n	8005d2c <HAL_I2C_Init+0x1dc>
 8005c88:	2304      	movs	r3, #4
 8005c8a:	e04f      	b.n	8005d2c <HAL_I2C_Init+0x1dc>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d111      	bne.n	8005cb8 <HAL_I2C_Init+0x168>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	1e58      	subs	r0, r3, #1
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6859      	ldr	r1, [r3, #4]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	440b      	add	r3, r1
 8005ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	bf0c      	ite	eq
 8005cb0:	2301      	moveq	r3, #1
 8005cb2:	2300      	movne	r3, #0
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	e012      	b.n	8005cde <HAL_I2C_Init+0x18e>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	1e58      	subs	r0, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6859      	ldr	r1, [r3, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	440b      	add	r3, r1
 8005cc6:	0099      	lsls	r1, r3, #2
 8005cc8:	440b      	add	r3, r1
 8005cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cce:	3301      	adds	r3, #1
 8005cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	bf0c      	ite	eq
 8005cd8:	2301      	moveq	r3, #1
 8005cda:	2300      	movne	r3, #0
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <HAL_I2C_Init+0x196>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e022      	b.n	8005d2c <HAL_I2C_Init+0x1dc>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10e      	bne.n	8005d0c <HAL_I2C_Init+0x1bc>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	1e58      	subs	r0, r3, #1
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6859      	ldr	r1, [r3, #4]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	440b      	add	r3, r1
 8005cfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d00:	3301      	adds	r3, #1
 8005d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d0a:	e00f      	b.n	8005d2c <HAL_I2C_Init+0x1dc>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	1e58      	subs	r0, r3, #1
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6859      	ldr	r1, [r3, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	440b      	add	r3, r1
 8005d1a:	0099      	lsls	r1, r3, #2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d22:	3301      	adds	r3, #1
 8005d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d2c:	6879      	ldr	r1, [r7, #4]
 8005d2e:	6809      	ldr	r1, [r1, #0]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	69da      	ldr	r2, [r3, #28]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	431a      	orrs	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005d5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	6911      	ldr	r1, [r2, #16]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	68d2      	ldr	r2, [r2, #12]
 8005d66:	4311      	orrs	r1, r2
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	6812      	ldr	r2, [r2, #0]
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	695a      	ldr	r2, [r3, #20]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	431a      	orrs	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	430a      	orrs	r2, r1
 8005d8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f042 0201 	orr.w	r2, r2, #1
 8005d9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2220      	movs	r2, #32
 8005da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	000186a0 	.word	0x000186a0
 8005dc8:	001e847f 	.word	0x001e847f
 8005dcc:	003d08ff 	.word	0x003d08ff
 8005dd0:	431bde83 	.word	0x431bde83
 8005dd4:	10624dd3 	.word	0x10624dd3

08005dd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e267      	b.n	80062ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d075      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005df6:	4b88      	ldr	r3, [pc, #544]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 030c 	and.w	r3, r3, #12
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d00c      	beq.n	8005e1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e02:	4b85      	ldr	r3, [pc, #532]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e0a:	2b08      	cmp	r3, #8
 8005e0c:	d112      	bne.n	8005e34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e0e:	4b82      	ldr	r3, [pc, #520]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e1a:	d10b      	bne.n	8005e34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e1c:	4b7e      	ldr	r3, [pc, #504]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d05b      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x108>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d157      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e242      	b.n	80062ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e3c:	d106      	bne.n	8005e4c <HAL_RCC_OscConfig+0x74>
 8005e3e:	4b76      	ldr	r3, [pc, #472]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a75      	ldr	r2, [pc, #468]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e48:	6013      	str	r3, [r2, #0]
 8005e4a:	e01d      	b.n	8005e88 <HAL_RCC_OscConfig+0xb0>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e54:	d10c      	bne.n	8005e70 <HAL_RCC_OscConfig+0x98>
 8005e56:	4b70      	ldr	r3, [pc, #448]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a6f      	ldr	r2, [pc, #444]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	4b6d      	ldr	r3, [pc, #436]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a6c      	ldr	r2, [pc, #432]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	e00b      	b.n	8005e88 <HAL_RCC_OscConfig+0xb0>
 8005e70:	4b69      	ldr	r3, [pc, #420]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a68      	ldr	r2, [pc, #416]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e7a:	6013      	str	r3, [r2, #0]
 8005e7c:	4b66      	ldr	r3, [pc, #408]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a65      	ldr	r2, [pc, #404]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d013      	beq.n	8005eb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e90:	f7fe fe0a 	bl	8004aa8 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005e98:	f7fe fe06 	bl	8004aa8 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b64      	cmp	r3, #100	; 0x64
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e207      	b.n	80062ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eaa:	4b5b      	ldr	r3, [pc, #364]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0f0      	beq.n	8005e98 <HAL_RCC_OscConfig+0xc0>
 8005eb6:	e014      	b.n	8005ee2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb8:	f7fe fdf6 	bl	8004aa8 <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ec0:	f7fe fdf2 	bl	8004aa8 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b64      	cmp	r3, #100	; 0x64
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e1f3      	b.n	80062ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ed2:	4b51      	ldr	r3, [pc, #324]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1f0      	bne.n	8005ec0 <HAL_RCC_OscConfig+0xe8>
 8005ede:	e000      	b.n	8005ee2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d063      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005eee:	4b4a      	ldr	r3, [pc, #296]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 030c 	and.w	r3, r3, #12
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00b      	beq.n	8005f12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005efa:	4b47      	ldr	r3, [pc, #284]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f02:	2b08      	cmp	r3, #8
 8005f04:	d11c      	bne.n	8005f40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f06:	4b44      	ldr	r3, [pc, #272]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d116      	bne.n	8005f40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f12:	4b41      	ldr	r3, [pc, #260]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d005      	beq.n	8005f2a <HAL_RCC_OscConfig+0x152>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d001      	beq.n	8005f2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e1c7      	b.n	80062ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f2a:	4b3b      	ldr	r3, [pc, #236]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	00db      	lsls	r3, r3, #3
 8005f38:	4937      	ldr	r1, [pc, #220]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f3e:	e03a      	b.n	8005fb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d020      	beq.n	8005f8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f48:	4b34      	ldr	r3, [pc, #208]	; (800601c <HAL_RCC_OscConfig+0x244>)
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4e:	f7fe fdab 	bl	8004aa8 <HAL_GetTick>
 8005f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f54:	e008      	b.n	8005f68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f56:	f7fe fda7 	bl	8004aa8 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d901      	bls.n	8005f68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e1a8      	b.n	80062ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f68:	4b2b      	ldr	r3, [pc, #172]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d0f0      	beq.n	8005f56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f74:	4b28      	ldr	r3, [pc, #160]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	4925      	ldr	r1, [pc, #148]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	600b      	str	r3, [r1, #0]
 8005f88:	e015      	b.n	8005fb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f8a:	4b24      	ldr	r3, [pc, #144]	; (800601c <HAL_RCC_OscConfig+0x244>)
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f90:	f7fe fd8a 	bl	8004aa8 <HAL_GetTick>
 8005f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f96:	e008      	b.n	8005faa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f98:	f7fe fd86 	bl	8004aa8 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d901      	bls.n	8005faa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	e187      	b.n	80062ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005faa:	4b1b      	ldr	r3, [pc, #108]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1f0      	bne.n	8005f98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0308 	and.w	r3, r3, #8
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d036      	beq.n	8006030 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d016      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fca:	4b15      	ldr	r3, [pc, #84]	; (8006020 <HAL_RCC_OscConfig+0x248>)
 8005fcc:	2201      	movs	r2, #1
 8005fce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fd0:	f7fe fd6a 	bl	8004aa8 <HAL_GetTick>
 8005fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005fd8:	f7fe fd66 	bl	8004aa8 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e167      	b.n	80062ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005fea:	4b0b      	ldr	r3, [pc, #44]	; (8006018 <HAL_RCC_OscConfig+0x240>)
 8005fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d0f0      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x200>
 8005ff6:	e01b      	b.n	8006030 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ff8:	4b09      	ldr	r3, [pc, #36]	; (8006020 <HAL_RCC_OscConfig+0x248>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ffe:	f7fe fd53 	bl	8004aa8 <HAL_GetTick>
 8006002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006004:	e00e      	b.n	8006024 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006006:	f7fe fd4f 	bl	8004aa8 <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	2b02      	cmp	r3, #2
 8006012:	d907      	bls.n	8006024 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e150      	b.n	80062ba <HAL_RCC_OscConfig+0x4e2>
 8006018:	40023800 	.word	0x40023800
 800601c:	42470000 	.word	0x42470000
 8006020:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006024:	4b88      	ldr	r3, [pc, #544]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 8006026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1ea      	bne.n	8006006 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0304 	and.w	r3, r3, #4
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 8097 	beq.w	800616c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800603e:	2300      	movs	r3, #0
 8006040:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006042:	4b81      	ldr	r3, [pc, #516]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10f      	bne.n	800606e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800604e:	2300      	movs	r3, #0
 8006050:	60bb      	str	r3, [r7, #8]
 8006052:	4b7d      	ldr	r3, [pc, #500]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	4a7c      	ldr	r2, [pc, #496]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 8006058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800605c:	6413      	str	r3, [r2, #64]	; 0x40
 800605e:	4b7a      	ldr	r3, [pc, #488]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006066:	60bb      	str	r3, [r7, #8]
 8006068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800606a:	2301      	movs	r3, #1
 800606c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800606e:	4b77      	ldr	r3, [pc, #476]	; (800624c <HAL_RCC_OscConfig+0x474>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006076:	2b00      	cmp	r3, #0
 8006078:	d118      	bne.n	80060ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800607a:	4b74      	ldr	r3, [pc, #464]	; (800624c <HAL_RCC_OscConfig+0x474>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a73      	ldr	r2, [pc, #460]	; (800624c <HAL_RCC_OscConfig+0x474>)
 8006080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006086:	f7fe fd0f 	bl	8004aa8 <HAL_GetTick>
 800608a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800608c:	e008      	b.n	80060a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800608e:	f7fe fd0b 	bl	8004aa8 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	2b02      	cmp	r3, #2
 800609a:	d901      	bls.n	80060a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e10c      	b.n	80062ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a0:	4b6a      	ldr	r3, [pc, #424]	; (800624c <HAL_RCC_OscConfig+0x474>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d0f0      	beq.n	800608e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d106      	bne.n	80060c2 <HAL_RCC_OscConfig+0x2ea>
 80060b4:	4b64      	ldr	r3, [pc, #400]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 80060b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b8:	4a63      	ldr	r2, [pc, #396]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 80060ba:	f043 0301 	orr.w	r3, r3, #1
 80060be:	6713      	str	r3, [r2, #112]	; 0x70
 80060c0:	e01c      	b.n	80060fc <HAL_RCC_OscConfig+0x324>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	2b05      	cmp	r3, #5
 80060c8:	d10c      	bne.n	80060e4 <HAL_RCC_OscConfig+0x30c>
 80060ca:	4b5f      	ldr	r3, [pc, #380]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 80060cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ce:	4a5e      	ldr	r2, [pc, #376]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 80060d0:	f043 0304 	orr.w	r3, r3, #4
 80060d4:	6713      	str	r3, [r2, #112]	; 0x70
 80060d6:	4b5c      	ldr	r3, [pc, #368]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 80060d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060da:	4a5b      	ldr	r2, [pc, #364]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 80060dc:	f043 0301 	orr.w	r3, r3, #1
 80060e0:	6713      	str	r3, [r2, #112]	; 0x70
 80060e2:	e00b      	b.n	80060fc <HAL_RCC_OscConfig+0x324>
 80060e4:	4b58      	ldr	r3, [pc, #352]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 80060e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060e8:	4a57      	ldr	r2, [pc, #348]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 80060ea:	f023 0301 	bic.w	r3, r3, #1
 80060ee:	6713      	str	r3, [r2, #112]	; 0x70
 80060f0:	4b55      	ldr	r3, [pc, #340]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 80060f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f4:	4a54      	ldr	r2, [pc, #336]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 80060f6:	f023 0304 	bic.w	r3, r3, #4
 80060fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d015      	beq.n	8006130 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006104:	f7fe fcd0 	bl	8004aa8 <HAL_GetTick>
 8006108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800610a:	e00a      	b.n	8006122 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800610c:	f7fe fccc 	bl	8004aa8 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	f241 3288 	movw	r2, #5000	; 0x1388
 800611a:	4293      	cmp	r3, r2
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e0cb      	b.n	80062ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006122:	4b49      	ldr	r3, [pc, #292]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 8006124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0ee      	beq.n	800610c <HAL_RCC_OscConfig+0x334>
 800612e:	e014      	b.n	800615a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006130:	f7fe fcba 	bl	8004aa8 <HAL_GetTick>
 8006134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006136:	e00a      	b.n	800614e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006138:	f7fe fcb6 	bl	8004aa8 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	f241 3288 	movw	r2, #5000	; 0x1388
 8006146:	4293      	cmp	r3, r2
 8006148:	d901      	bls.n	800614e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e0b5      	b.n	80062ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800614e:	4b3e      	ldr	r3, [pc, #248]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 8006150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1ee      	bne.n	8006138 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800615a:	7dfb      	ldrb	r3, [r7, #23]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d105      	bne.n	800616c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006160:	4b39      	ldr	r3, [pc, #228]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 8006162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006164:	4a38      	ldr	r2, [pc, #224]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 8006166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800616a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 80a1 	beq.w	80062b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006176:	4b34      	ldr	r3, [pc, #208]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f003 030c 	and.w	r3, r3, #12
 800617e:	2b08      	cmp	r3, #8
 8006180:	d05c      	beq.n	800623c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	2b02      	cmp	r3, #2
 8006188:	d141      	bne.n	800620e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800618a:	4b31      	ldr	r3, [pc, #196]	; (8006250 <HAL_RCC_OscConfig+0x478>)
 800618c:	2200      	movs	r2, #0
 800618e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006190:	f7fe fc8a 	bl	8004aa8 <HAL_GetTick>
 8006194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006196:	e008      	b.n	80061aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006198:	f7fe fc86 	bl	8004aa8 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d901      	bls.n	80061aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e087      	b.n	80062ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061aa:	4b27      	ldr	r3, [pc, #156]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1f0      	bne.n	8006198 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	69da      	ldr	r2, [r3, #28]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	431a      	orrs	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	019b      	lsls	r3, r3, #6
 80061c6:	431a      	orrs	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061cc:	085b      	lsrs	r3, r3, #1
 80061ce:	3b01      	subs	r3, #1
 80061d0:	041b      	lsls	r3, r3, #16
 80061d2:	431a      	orrs	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d8:	061b      	lsls	r3, r3, #24
 80061da:	491b      	ldr	r1, [pc, #108]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 80061dc:	4313      	orrs	r3, r2
 80061de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061e0:	4b1b      	ldr	r3, [pc, #108]	; (8006250 <HAL_RCC_OscConfig+0x478>)
 80061e2:	2201      	movs	r2, #1
 80061e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e6:	f7fe fc5f 	bl	8004aa8 <HAL_GetTick>
 80061ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061ec:	e008      	b.n	8006200 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061ee:	f7fe fc5b 	bl	8004aa8 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d901      	bls.n	8006200 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80061fc:	2303      	movs	r3, #3
 80061fe:	e05c      	b.n	80062ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006200:	4b11      	ldr	r3, [pc, #68]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006208:	2b00      	cmp	r3, #0
 800620a:	d0f0      	beq.n	80061ee <HAL_RCC_OscConfig+0x416>
 800620c:	e054      	b.n	80062b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800620e:	4b10      	ldr	r3, [pc, #64]	; (8006250 <HAL_RCC_OscConfig+0x478>)
 8006210:	2200      	movs	r2, #0
 8006212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006214:	f7fe fc48 	bl	8004aa8 <HAL_GetTick>
 8006218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800621a:	e008      	b.n	800622e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800621c:	f7fe fc44 	bl	8004aa8 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e045      	b.n	80062ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800622e:	4b06      	ldr	r3, [pc, #24]	; (8006248 <HAL_RCC_OscConfig+0x470>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1f0      	bne.n	800621c <HAL_RCC_OscConfig+0x444>
 800623a:	e03d      	b.n	80062b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d107      	bne.n	8006254 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e038      	b.n	80062ba <HAL_RCC_OscConfig+0x4e2>
 8006248:	40023800 	.word	0x40023800
 800624c:	40007000 	.word	0x40007000
 8006250:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006254:	4b1b      	ldr	r3, [pc, #108]	; (80062c4 <HAL_RCC_OscConfig+0x4ec>)
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d028      	beq.n	80062b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800626c:	429a      	cmp	r2, r3
 800626e:	d121      	bne.n	80062b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800627a:	429a      	cmp	r2, r3
 800627c:	d11a      	bne.n	80062b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006284:	4013      	ands	r3, r2
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800628a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800628c:	4293      	cmp	r3, r2
 800628e:	d111      	bne.n	80062b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629a:	085b      	lsrs	r3, r3, #1
 800629c:	3b01      	subs	r3, #1
 800629e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d107      	bne.n	80062b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d001      	beq.n	80062b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e000      	b.n	80062ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3718      	adds	r7, #24
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	40023800 	.word	0x40023800

080062c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e0cc      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80062dc:	4b68      	ldr	r3, [pc, #416]	; (8006480 <HAL_RCC_ClockConfig+0x1b8>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0307 	and.w	r3, r3, #7
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d90c      	bls.n	8006304 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ea:	4b65      	ldr	r3, [pc, #404]	; (8006480 <HAL_RCC_ClockConfig+0x1b8>)
 80062ec:	683a      	ldr	r2, [r7, #0]
 80062ee:	b2d2      	uxtb	r2, r2
 80062f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062f2:	4b63      	ldr	r3, [pc, #396]	; (8006480 <HAL_RCC_ClockConfig+0x1b8>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0307 	and.w	r3, r3, #7
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d001      	beq.n	8006304 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e0b8      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d020      	beq.n	8006352 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0304 	and.w	r3, r3, #4
 8006318:	2b00      	cmp	r3, #0
 800631a:	d005      	beq.n	8006328 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800631c:	4b59      	ldr	r3, [pc, #356]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	4a58      	ldr	r2, [pc, #352]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 8006322:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006326:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0308 	and.w	r3, r3, #8
 8006330:	2b00      	cmp	r3, #0
 8006332:	d005      	beq.n	8006340 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006334:	4b53      	ldr	r3, [pc, #332]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	4a52      	ldr	r2, [pc, #328]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 800633a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800633e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006340:	4b50      	ldr	r3, [pc, #320]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	494d      	ldr	r1, [pc, #308]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 800634e:	4313      	orrs	r3, r2
 8006350:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0301 	and.w	r3, r3, #1
 800635a:	2b00      	cmp	r3, #0
 800635c:	d044      	beq.n	80063e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d107      	bne.n	8006376 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006366:	4b47      	ldr	r3, [pc, #284]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d119      	bne.n	80063a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e07f      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	2b02      	cmp	r3, #2
 800637c:	d003      	beq.n	8006386 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006382:	2b03      	cmp	r3, #3
 8006384:	d107      	bne.n	8006396 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006386:	4b3f      	ldr	r3, [pc, #252]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d109      	bne.n	80063a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e06f      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006396:	4b3b      	ldr	r3, [pc, #236]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e067      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063a6:	4b37      	ldr	r3, [pc, #220]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f023 0203 	bic.w	r2, r3, #3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	4934      	ldr	r1, [pc, #208]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063b8:	f7fe fb76 	bl	8004aa8 <HAL_GetTick>
 80063bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063be:	e00a      	b.n	80063d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063c0:	f7fe fb72 	bl	8004aa8 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e04f      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063d6:	4b2b      	ldr	r3, [pc, #172]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f003 020c 	and.w	r2, r3, #12
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d1eb      	bne.n	80063c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80063e8:	4b25      	ldr	r3, [pc, #148]	; (8006480 <HAL_RCC_ClockConfig+0x1b8>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0307 	and.w	r3, r3, #7
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d20c      	bcs.n	8006410 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063f6:	4b22      	ldr	r3, [pc, #136]	; (8006480 <HAL_RCC_ClockConfig+0x1b8>)
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	b2d2      	uxtb	r2, r2
 80063fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063fe:	4b20      	ldr	r3, [pc, #128]	; (8006480 <HAL_RCC_ClockConfig+0x1b8>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0307 	and.w	r3, r3, #7
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	429a      	cmp	r2, r3
 800640a:	d001      	beq.n	8006410 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e032      	b.n	8006476 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b00      	cmp	r3, #0
 800641a:	d008      	beq.n	800642e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800641c:	4b19      	ldr	r3, [pc, #100]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	4916      	ldr	r1, [pc, #88]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 800642a:	4313      	orrs	r3, r2
 800642c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0308 	and.w	r3, r3, #8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d009      	beq.n	800644e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800643a:	4b12      	ldr	r3, [pc, #72]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	490e      	ldr	r1, [pc, #56]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 800644a:	4313      	orrs	r3, r2
 800644c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800644e:	f000 f821 	bl	8006494 <HAL_RCC_GetSysClockFreq>
 8006452:	4602      	mov	r2, r0
 8006454:	4b0b      	ldr	r3, [pc, #44]	; (8006484 <HAL_RCC_ClockConfig+0x1bc>)
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	091b      	lsrs	r3, r3, #4
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	490a      	ldr	r1, [pc, #40]	; (8006488 <HAL_RCC_ClockConfig+0x1c0>)
 8006460:	5ccb      	ldrb	r3, [r1, r3]
 8006462:	fa22 f303 	lsr.w	r3, r2, r3
 8006466:	4a09      	ldr	r2, [pc, #36]	; (800648c <HAL_RCC_ClockConfig+0x1c4>)
 8006468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800646a:	4b09      	ldr	r3, [pc, #36]	; (8006490 <HAL_RCC_ClockConfig+0x1c8>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4618      	mov	r0, r3
 8006470:	f7fe fad6 	bl	8004a20 <HAL_InitTick>

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	40023c00 	.word	0x40023c00
 8006484:	40023800 	.word	0x40023800
 8006488:	0800df88 	.word	0x0800df88
 800648c:	2000007c 	.word	0x2000007c
 8006490:	20000080 	.word	0x20000080

08006494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006498:	b090      	sub	sp, #64	; 0x40
 800649a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	637b      	str	r3, [r7, #52]	; 0x34
 80064a0:	2300      	movs	r3, #0
 80064a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064a4:	2300      	movs	r3, #0
 80064a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064ac:	4b59      	ldr	r3, [pc, #356]	; (8006614 <HAL_RCC_GetSysClockFreq+0x180>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f003 030c 	and.w	r3, r3, #12
 80064b4:	2b08      	cmp	r3, #8
 80064b6:	d00d      	beq.n	80064d4 <HAL_RCC_GetSysClockFreq+0x40>
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	f200 80a1 	bhi.w	8006600 <HAL_RCC_GetSysClockFreq+0x16c>
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d002      	beq.n	80064c8 <HAL_RCC_GetSysClockFreq+0x34>
 80064c2:	2b04      	cmp	r3, #4
 80064c4:	d003      	beq.n	80064ce <HAL_RCC_GetSysClockFreq+0x3a>
 80064c6:	e09b      	b.n	8006600 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064c8:	4b53      	ldr	r3, [pc, #332]	; (8006618 <HAL_RCC_GetSysClockFreq+0x184>)
 80064ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80064cc:	e09b      	b.n	8006606 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064ce:	4b53      	ldr	r3, [pc, #332]	; (800661c <HAL_RCC_GetSysClockFreq+0x188>)
 80064d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80064d2:	e098      	b.n	8006606 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064d4:	4b4f      	ldr	r3, [pc, #316]	; (8006614 <HAL_RCC_GetSysClockFreq+0x180>)
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80064dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064de:	4b4d      	ldr	r3, [pc, #308]	; (8006614 <HAL_RCC_GetSysClockFreq+0x180>)
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d028      	beq.n	800653c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064ea:	4b4a      	ldr	r3, [pc, #296]	; (8006614 <HAL_RCC_GetSysClockFreq+0x180>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	099b      	lsrs	r3, r3, #6
 80064f0:	2200      	movs	r2, #0
 80064f2:	623b      	str	r3, [r7, #32]
 80064f4:	627a      	str	r2, [r7, #36]	; 0x24
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80064fc:	2100      	movs	r1, #0
 80064fe:	4b47      	ldr	r3, [pc, #284]	; (800661c <HAL_RCC_GetSysClockFreq+0x188>)
 8006500:	fb03 f201 	mul.w	r2, r3, r1
 8006504:	2300      	movs	r3, #0
 8006506:	fb00 f303 	mul.w	r3, r0, r3
 800650a:	4413      	add	r3, r2
 800650c:	4a43      	ldr	r2, [pc, #268]	; (800661c <HAL_RCC_GetSysClockFreq+0x188>)
 800650e:	fba0 1202 	umull	r1, r2, r0, r2
 8006512:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006514:	460a      	mov	r2, r1
 8006516:	62ba      	str	r2, [r7, #40]	; 0x28
 8006518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800651a:	4413      	add	r3, r2
 800651c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800651e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006520:	2200      	movs	r2, #0
 8006522:	61bb      	str	r3, [r7, #24]
 8006524:	61fa      	str	r2, [r7, #28]
 8006526:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800652a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800652e:	f7fa fbb3 	bl	8000c98 <__aeabi_uldivmod>
 8006532:	4602      	mov	r2, r0
 8006534:	460b      	mov	r3, r1
 8006536:	4613      	mov	r3, r2
 8006538:	63fb      	str	r3, [r7, #60]	; 0x3c
 800653a:	e053      	b.n	80065e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800653c:	4b35      	ldr	r3, [pc, #212]	; (8006614 <HAL_RCC_GetSysClockFreq+0x180>)
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	099b      	lsrs	r3, r3, #6
 8006542:	2200      	movs	r2, #0
 8006544:	613b      	str	r3, [r7, #16]
 8006546:	617a      	str	r2, [r7, #20]
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800654e:	f04f 0b00 	mov.w	fp, #0
 8006552:	4652      	mov	r2, sl
 8006554:	465b      	mov	r3, fp
 8006556:	f04f 0000 	mov.w	r0, #0
 800655a:	f04f 0100 	mov.w	r1, #0
 800655e:	0159      	lsls	r1, r3, #5
 8006560:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006564:	0150      	lsls	r0, r2, #5
 8006566:	4602      	mov	r2, r0
 8006568:	460b      	mov	r3, r1
 800656a:	ebb2 080a 	subs.w	r8, r2, sl
 800656e:	eb63 090b 	sbc.w	r9, r3, fp
 8006572:	f04f 0200 	mov.w	r2, #0
 8006576:	f04f 0300 	mov.w	r3, #0
 800657a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800657e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006582:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006586:	ebb2 0408 	subs.w	r4, r2, r8
 800658a:	eb63 0509 	sbc.w	r5, r3, r9
 800658e:	f04f 0200 	mov.w	r2, #0
 8006592:	f04f 0300 	mov.w	r3, #0
 8006596:	00eb      	lsls	r3, r5, #3
 8006598:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800659c:	00e2      	lsls	r2, r4, #3
 800659e:	4614      	mov	r4, r2
 80065a0:	461d      	mov	r5, r3
 80065a2:	eb14 030a 	adds.w	r3, r4, sl
 80065a6:	603b      	str	r3, [r7, #0]
 80065a8:	eb45 030b 	adc.w	r3, r5, fp
 80065ac:	607b      	str	r3, [r7, #4]
 80065ae:	f04f 0200 	mov.w	r2, #0
 80065b2:	f04f 0300 	mov.w	r3, #0
 80065b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065ba:	4629      	mov	r1, r5
 80065bc:	028b      	lsls	r3, r1, #10
 80065be:	4621      	mov	r1, r4
 80065c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065c4:	4621      	mov	r1, r4
 80065c6:	028a      	lsls	r2, r1, #10
 80065c8:	4610      	mov	r0, r2
 80065ca:	4619      	mov	r1, r3
 80065cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ce:	2200      	movs	r2, #0
 80065d0:	60bb      	str	r3, [r7, #8]
 80065d2:	60fa      	str	r2, [r7, #12]
 80065d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065d8:	f7fa fb5e 	bl	8000c98 <__aeabi_uldivmod>
 80065dc:	4602      	mov	r2, r0
 80065de:	460b      	mov	r3, r1
 80065e0:	4613      	mov	r3, r2
 80065e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80065e4:	4b0b      	ldr	r3, [pc, #44]	; (8006614 <HAL_RCC_GetSysClockFreq+0x180>)
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	0c1b      	lsrs	r3, r3, #16
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	3301      	adds	r3, #1
 80065f0:	005b      	lsls	r3, r3, #1
 80065f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80065f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80065fe:	e002      	b.n	8006606 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006600:	4b05      	ldr	r3, [pc, #20]	; (8006618 <HAL_RCC_GetSysClockFreq+0x184>)
 8006602:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006608:	4618      	mov	r0, r3
 800660a:	3740      	adds	r7, #64	; 0x40
 800660c:	46bd      	mov	sp, r7
 800660e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006612:	bf00      	nop
 8006614:	40023800 	.word	0x40023800
 8006618:	00f42400 	.word	0x00f42400
 800661c:	017d7840 	.word	0x017d7840

08006620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006620:	b480      	push	{r7}
 8006622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006624:	4b03      	ldr	r3, [pc, #12]	; (8006634 <HAL_RCC_GetHCLKFreq+0x14>)
 8006626:	681b      	ldr	r3, [r3, #0]
}
 8006628:	4618      	mov	r0, r3
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	2000007c 	.word	0x2000007c

08006638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800663c:	f7ff fff0 	bl	8006620 <HAL_RCC_GetHCLKFreq>
 8006640:	4602      	mov	r2, r0
 8006642:	4b05      	ldr	r3, [pc, #20]	; (8006658 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	0a9b      	lsrs	r3, r3, #10
 8006648:	f003 0307 	and.w	r3, r3, #7
 800664c:	4903      	ldr	r1, [pc, #12]	; (800665c <HAL_RCC_GetPCLK1Freq+0x24>)
 800664e:	5ccb      	ldrb	r3, [r1, r3]
 8006650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006654:	4618      	mov	r0, r3
 8006656:	bd80      	pop	{r7, pc}
 8006658:	40023800 	.word	0x40023800
 800665c:	0800df98 	.word	0x0800df98

08006660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006664:	f7ff ffdc 	bl	8006620 <HAL_RCC_GetHCLKFreq>
 8006668:	4602      	mov	r2, r0
 800666a:	4b05      	ldr	r3, [pc, #20]	; (8006680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	0b5b      	lsrs	r3, r3, #13
 8006670:	f003 0307 	and.w	r3, r3, #7
 8006674:	4903      	ldr	r1, [pc, #12]	; (8006684 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006676:	5ccb      	ldrb	r3, [r1, r3]
 8006678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800667c:	4618      	mov	r0, r3
 800667e:	bd80      	pop	{r7, pc}
 8006680:	40023800 	.word	0x40023800
 8006684:	0800df98 	.word	0x0800df98

08006688 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e07b      	b.n	8006792 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d108      	bne.n	80066b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066aa:	d009      	beq.n	80066c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	61da      	str	r2, [r3, #28]
 80066b2:	e005      	b.n	80066c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d106      	bne.n	80066e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f7fd fe40 	bl	8004360 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006708:	431a      	orrs	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006712:	431a      	orrs	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	431a      	orrs	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	431a      	orrs	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006730:	431a      	orrs	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006744:	ea42 0103 	orr.w	r1, r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	699b      	ldr	r3, [r3, #24]
 800675c:	0c1b      	lsrs	r3, r3, #16
 800675e:	f003 0104 	and.w	r1, r3, #4
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006766:	f003 0210 	and.w	r2, r3, #16
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	430a      	orrs	r2, r1
 8006770:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	69da      	ldr	r2, [r3, #28]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006780:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006790:	2300      	movs	r3, #0
}
 8006792:	4618      	mov	r0, r3
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}

0800679a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b088      	sub	sp, #32
 800679e:	af00      	add	r7, sp, #0
 80067a0:	60f8      	str	r0, [r7, #12]
 80067a2:	60b9      	str	r1, [r7, #8]
 80067a4:	603b      	str	r3, [r7, #0]
 80067a6:	4613      	mov	r3, r2
 80067a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d101      	bne.n	80067bc <HAL_SPI_Transmit+0x22>
 80067b8:	2302      	movs	r3, #2
 80067ba:	e126      	b.n	8006a0a <HAL_SPI_Transmit+0x270>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067c4:	f7fe f970 	bl	8004aa8 <HAL_GetTick>
 80067c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80067ca:	88fb      	ldrh	r3, [r7, #6]
 80067cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d002      	beq.n	80067e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80067da:	2302      	movs	r3, #2
 80067dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067de:	e10b      	b.n	80069f8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <HAL_SPI_Transmit+0x52>
 80067e6:	88fb      	ldrh	r3, [r7, #6]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d102      	bne.n	80067f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067f0:	e102      	b.n	80069f8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2203      	movs	r2, #3
 80067f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	88fa      	ldrh	r2, [r7, #6]
 800680a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	88fa      	ldrh	r2, [r7, #6]
 8006810:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006838:	d10f      	bne.n	800685a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006848:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006858:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006864:	2b40      	cmp	r3, #64	; 0x40
 8006866:	d007      	beq.n	8006878 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006876:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006880:	d14b      	bne.n	800691a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d002      	beq.n	8006890 <HAL_SPI_Transmit+0xf6>
 800688a:	8afb      	ldrh	r3, [r7, #22]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d13e      	bne.n	800690e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006894:	881a      	ldrh	r2, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a0:	1c9a      	adds	r2, r3, #2
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	3b01      	subs	r3, #1
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80068b4:	e02b      	b.n	800690e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d112      	bne.n	80068ea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c8:	881a      	ldrh	r2, [r3, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d4:	1c9a      	adds	r2, r3, #2
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068de:	b29b      	uxth	r3, r3
 80068e0:	3b01      	subs	r3, #1
 80068e2:	b29a      	uxth	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80068e8:	e011      	b.n	800690e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068ea:	f7fe f8dd 	bl	8004aa8 <HAL_GetTick>
 80068ee:	4602      	mov	r2, r0
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d803      	bhi.n	8006902 <HAL_SPI_Transmit+0x168>
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006900:	d102      	bne.n	8006908 <HAL_SPI_Transmit+0x16e>
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d102      	bne.n	800690e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800690c:	e074      	b.n	80069f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006912:	b29b      	uxth	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1ce      	bne.n	80068b6 <HAL_SPI_Transmit+0x11c>
 8006918:	e04c      	b.n	80069b4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d002      	beq.n	8006928 <HAL_SPI_Transmit+0x18e>
 8006922:	8afb      	ldrh	r3, [r7, #22]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d140      	bne.n	80069aa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	330c      	adds	r3, #12
 8006932:	7812      	ldrb	r2, [r2, #0]
 8006934:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006944:	b29b      	uxth	r3, r3
 8006946:	3b01      	subs	r3, #1
 8006948:	b29a      	uxth	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800694e:	e02c      	b.n	80069aa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b02      	cmp	r3, #2
 800695c:	d113      	bne.n	8006986 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	330c      	adds	r3, #12
 8006968:	7812      	ldrb	r2, [r2, #0]
 800696a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800697a:	b29b      	uxth	r3, r3
 800697c:	3b01      	subs	r3, #1
 800697e:	b29a      	uxth	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	86da      	strh	r2, [r3, #54]	; 0x36
 8006984:	e011      	b.n	80069aa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006986:	f7fe f88f 	bl	8004aa8 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	683a      	ldr	r2, [r7, #0]
 8006992:	429a      	cmp	r2, r3
 8006994:	d803      	bhi.n	800699e <HAL_SPI_Transmit+0x204>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800699c:	d102      	bne.n	80069a4 <HAL_SPI_Transmit+0x20a>
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d102      	bne.n	80069aa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80069a8:	e026      	b.n	80069f8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1cd      	bne.n	8006950 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069b4:	69ba      	ldr	r2, [r7, #24]
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 fbcb 	bl	8007154 <SPI_EndRxTxTransaction>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d002      	beq.n	80069ca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2220      	movs	r2, #32
 80069c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10a      	bne.n	80069e8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80069d2:	2300      	movs	r3, #0
 80069d4:	613b      	str	r3, [r7, #16]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	613b      	str	r3, [r7, #16]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	613b      	str	r3, [r7, #16]
 80069e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d002      	beq.n	80069f6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	77fb      	strb	r3, [r7, #31]
 80069f4:	e000      	b.n	80069f8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80069f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a08:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3720      	adds	r7, #32
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b088      	sub	sp, #32
 8006a16:	af02      	add	r7, sp, #8
 8006a18:	60f8      	str	r0, [r7, #12]
 8006a1a:	60b9      	str	r1, [r7, #8]
 8006a1c:	603b      	str	r3, [r7, #0]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a2e:	d112      	bne.n	8006a56 <HAL_SPI_Receive+0x44>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d10e      	bne.n	8006a56 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2204      	movs	r2, #4
 8006a3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006a40:	88fa      	ldrh	r2, [r7, #6]
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	4613      	mov	r3, r2
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	68b9      	ldr	r1, [r7, #8]
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 f8f1 	bl	8006c34 <HAL_SPI_TransmitReceive>
 8006a52:	4603      	mov	r3, r0
 8006a54:	e0ea      	b.n	8006c2c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d101      	bne.n	8006a64 <HAL_SPI_Receive+0x52>
 8006a60:	2302      	movs	r3, #2
 8006a62:	e0e3      	b.n	8006c2c <HAL_SPI_Receive+0x21a>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a6c:	f7fe f81c 	bl	8004aa8 <HAL_GetTick>
 8006a70:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d002      	beq.n	8006a84 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006a7e:	2302      	movs	r3, #2
 8006a80:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a82:	e0ca      	b.n	8006c1a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d002      	beq.n	8006a90 <HAL_SPI_Receive+0x7e>
 8006a8a:	88fb      	ldrh	r3, [r7, #6]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d102      	bne.n	8006a96 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a94:	e0c1      	b.n	8006c1a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2204      	movs	r2, #4
 8006a9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	88fa      	ldrh	r2, [r7, #6]
 8006aae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	88fa      	ldrh	r2, [r7, #6]
 8006ab4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006adc:	d10f      	bne.n	8006afe <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006afc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b08:	2b40      	cmp	r3, #64	; 0x40
 8006b0a:	d007      	beq.n	8006b1c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b1a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d162      	bne.n	8006bea <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006b24:	e02e      	b.n	8006b84 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d115      	bne.n	8006b60 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f103 020c 	add.w	r2, r3, #12
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b40:	7812      	ldrb	r2, [r2, #0]
 8006b42:	b2d2      	uxtb	r2, r2
 8006b44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4a:	1c5a      	adds	r2, r3, #1
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	3b01      	subs	r3, #1
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b5e:	e011      	b.n	8006b84 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b60:	f7fd ffa2 	bl	8004aa8 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	683a      	ldr	r2, [r7, #0]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d803      	bhi.n	8006b78 <HAL_SPI_Receive+0x166>
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b76:	d102      	bne.n	8006b7e <HAL_SPI_Receive+0x16c>
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d102      	bne.n	8006b84 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006b82:	e04a      	b.n	8006c1a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1cb      	bne.n	8006b26 <HAL_SPI_Receive+0x114>
 8006b8e:	e031      	b.n	8006bf4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d113      	bne.n	8006bc6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68da      	ldr	r2, [r3, #12]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba8:	b292      	uxth	r2, r2
 8006baa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb0:	1c9a      	adds	r2, r3, #2
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006bc4:	e011      	b.n	8006bea <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bc6:	f7fd ff6f 	bl	8004aa8 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d803      	bhi.n	8006bde <HAL_SPI_Receive+0x1cc>
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bdc:	d102      	bne.n	8006be4 <HAL_SPI_Receive+0x1d2>
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d102      	bne.n	8006bea <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006be8:	e017      	b.n	8006c1a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1cd      	bne.n	8006b90 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 fa45 	bl	8007088 <SPI_EndRxTransaction>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2220      	movs	r2, #32
 8006c08:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d002      	beq.n	8006c18 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	75fb      	strb	r3, [r7, #23]
 8006c16:	e000      	b.n	8006c1a <HAL_SPI_Receive+0x208>
  }

error :
 8006c18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006c2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3718      	adds	r7, #24
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08c      	sub	sp, #48	; 0x30
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
 8006c40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c42:	2301      	movs	r3, #1
 8006c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d101      	bne.n	8006c5a <HAL_SPI_TransmitReceive+0x26>
 8006c56:	2302      	movs	r3, #2
 8006c58:	e18a      	b.n	8006f70 <HAL_SPI_TransmitReceive+0x33c>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c62:	f7fd ff21 	bl	8004aa8 <HAL_GetTick>
 8006c66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006c78:	887b      	ldrh	r3, [r7, #2]
 8006c7a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d00f      	beq.n	8006ca4 <HAL_SPI_TransmitReceive+0x70>
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c8a:	d107      	bne.n	8006c9c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d103      	bne.n	8006c9c <HAL_SPI_TransmitReceive+0x68>
 8006c94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c98:	2b04      	cmp	r3, #4
 8006c9a:	d003      	beq.n	8006ca4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006ca2:	e15b      	b.n	8006f5c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d005      	beq.n	8006cb6 <HAL_SPI_TransmitReceive+0x82>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d002      	beq.n	8006cb6 <HAL_SPI_TransmitReceive+0x82>
 8006cb0:	887b      	ldrh	r3, [r7, #2]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d103      	bne.n	8006cbe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006cbc:	e14e      	b.n	8006f5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d003      	beq.n	8006cd2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2205      	movs	r2, #5
 8006cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	887a      	ldrh	r2, [r7, #2]
 8006ce2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	887a      	ldrh	r2, [r7, #2]
 8006ce8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	887a      	ldrh	r2, [r7, #2]
 8006cf4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	887a      	ldrh	r2, [r7, #2]
 8006cfa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d12:	2b40      	cmp	r3, #64	; 0x40
 8006d14:	d007      	beq.n	8006d26 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d2e:	d178      	bne.n	8006e22 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d002      	beq.n	8006d3e <HAL_SPI_TransmitReceive+0x10a>
 8006d38:	8b7b      	ldrh	r3, [r7, #26]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d166      	bne.n	8006e0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d42:	881a      	ldrh	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4e:	1c9a      	adds	r2, r3, #2
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d62:	e053      	b.n	8006e0c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d11b      	bne.n	8006daa <HAL_SPI_TransmitReceive+0x176>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d016      	beq.n	8006daa <HAL_SPI_TransmitReceive+0x176>
 8006d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d113      	bne.n	8006daa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d86:	881a      	ldrh	r2, [r3, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d92:	1c9a      	adds	r2, r3, #2
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f003 0301 	and.w	r3, r3, #1
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d119      	bne.n	8006dec <HAL_SPI_TransmitReceive+0x1b8>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d014      	beq.n	8006dec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68da      	ldr	r2, [r3, #12]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dcc:	b292      	uxth	r2, r2
 8006dce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd4:	1c9a      	adds	r2, r3, #2
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	3b01      	subs	r3, #1
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006de8:	2301      	movs	r3, #1
 8006dea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006dec:	f7fd fe5c 	bl	8004aa8 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d807      	bhi.n	8006e0c <HAL_SPI_TransmitReceive+0x1d8>
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e02:	d003      	beq.n	8006e0c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006e0a:	e0a7      	b.n	8006f5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1a6      	bne.n	8006d64 <HAL_SPI_TransmitReceive+0x130>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1a1      	bne.n	8006d64 <HAL_SPI_TransmitReceive+0x130>
 8006e20:	e07c      	b.n	8006f1c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d002      	beq.n	8006e30 <HAL_SPI_TransmitReceive+0x1fc>
 8006e2a:	8b7b      	ldrh	r3, [r7, #26]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d16b      	bne.n	8006f08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	330c      	adds	r3, #12
 8006e3a:	7812      	ldrb	r2, [r2, #0]
 8006e3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e56:	e057      	b.n	8006f08 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d11c      	bne.n	8006ea0 <HAL_SPI_TransmitReceive+0x26c>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d017      	beq.n	8006ea0 <HAL_SPI_TransmitReceive+0x26c>
 8006e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d114      	bne.n	8006ea0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	330c      	adds	r3, #12
 8006e80:	7812      	ldrb	r2, [r2, #0]
 8006e82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e88:	1c5a      	adds	r2, r3, #1
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	3b01      	subs	r3, #1
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d119      	bne.n	8006ee2 <HAL_SPI_TransmitReceive+0x2ae>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d014      	beq.n	8006ee2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68da      	ldr	r2, [r3, #12]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec2:	b2d2      	uxtb	r2, r2
 8006ec4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ee2:	f7fd fde1 	bl	8004aa8 <HAL_GetTick>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d803      	bhi.n	8006efa <HAL_SPI_TransmitReceive+0x2c6>
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ef8:	d102      	bne.n	8006f00 <HAL_SPI_TransmitReceive+0x2cc>
 8006efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d103      	bne.n	8006f08 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006f06:	e029      	b.n	8006f5c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1a2      	bne.n	8006e58 <HAL_SPI_TransmitReceive+0x224>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d19d      	bne.n	8006e58 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 f917 	bl	8007154 <SPI_EndRxTxTransaction>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d006      	beq.n	8006f3a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2220      	movs	r2, #32
 8006f36:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006f38:	e010      	b.n	8006f5c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10b      	bne.n	8006f5a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f42:	2300      	movs	r3, #0
 8006f44:	617b      	str	r3, [r7, #20]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	617b      	str	r3, [r7, #20]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	617b      	str	r3, [r7, #20]
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	e000      	b.n	8006f5c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006f5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3730      	adds	r7, #48	; 0x30
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b088      	sub	sp, #32
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	603b      	str	r3, [r7, #0]
 8006f84:	4613      	mov	r3, r2
 8006f86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f88:	f7fd fd8e 	bl	8004aa8 <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f90:	1a9b      	subs	r3, r3, r2
 8006f92:	683a      	ldr	r2, [r7, #0]
 8006f94:	4413      	add	r3, r2
 8006f96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f98:	f7fd fd86 	bl	8004aa8 <HAL_GetTick>
 8006f9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f9e:	4b39      	ldr	r3, [pc, #228]	; (8007084 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	015b      	lsls	r3, r3, #5
 8006fa4:	0d1b      	lsrs	r3, r3, #20
 8006fa6:	69fa      	ldr	r2, [r7, #28]
 8006fa8:	fb02 f303 	mul.w	r3, r2, r3
 8006fac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fae:	e054      	b.n	800705a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fb6:	d050      	beq.n	800705a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fb8:	f7fd fd76 	bl	8004aa8 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	69fa      	ldr	r2, [r7, #28]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d902      	bls.n	8006fce <SPI_WaitFlagStateUntilTimeout+0x56>
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d13d      	bne.n	800704a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006fdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fe6:	d111      	bne.n	800700c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ff0:	d004      	beq.n	8006ffc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ffa:	d107      	bne.n	800700c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800700a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007010:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007014:	d10f      	bne.n	8007036 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007024:	601a      	str	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007034:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007046:	2303      	movs	r3, #3
 8007048:	e017      	b.n	800707a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d101      	bne.n	8007054 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007050:	2300      	movs	r3, #0
 8007052:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	3b01      	subs	r3, #1
 8007058:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	4013      	ands	r3, r2
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	429a      	cmp	r2, r3
 8007068:	bf0c      	ite	eq
 800706a:	2301      	moveq	r3, #1
 800706c:	2300      	movne	r3, #0
 800706e:	b2db      	uxtb	r3, r3
 8007070:	461a      	mov	r2, r3
 8007072:	79fb      	ldrb	r3, [r7, #7]
 8007074:	429a      	cmp	r2, r3
 8007076:	d19b      	bne.n	8006fb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3720      	adds	r7, #32
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	2000007c 	.word	0x2000007c

08007088 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b086      	sub	sp, #24
 800708c:	af02      	add	r7, sp, #8
 800708e:	60f8      	str	r0, [r7, #12]
 8007090:	60b9      	str	r1, [r7, #8]
 8007092:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800709c:	d111      	bne.n	80070c2 <SPI_EndRxTransaction+0x3a>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070a6:	d004      	beq.n	80070b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070b0:	d107      	bne.n	80070c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070ca:	d12a      	bne.n	8007122 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070d4:	d012      	beq.n	80070fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	2200      	movs	r2, #0
 80070de:	2180      	movs	r1, #128	; 0x80
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f7ff ff49 	bl	8006f78 <SPI_WaitFlagStateUntilTimeout>
 80070e6:	4603      	mov	r3, r0
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d02d      	beq.n	8007148 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f0:	f043 0220 	orr.w	r2, r3, #32
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e026      	b.n	800714a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2200      	movs	r2, #0
 8007104:	2101      	movs	r1, #1
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f7ff ff36 	bl	8006f78 <SPI_WaitFlagStateUntilTimeout>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d01a      	beq.n	8007148 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007116:	f043 0220 	orr.w	r2, r3, #32
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e013      	b.n	800714a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2200      	movs	r2, #0
 800712a:	2101      	movs	r1, #1
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f7ff ff23 	bl	8006f78 <SPI_WaitFlagStateUntilTimeout>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d007      	beq.n	8007148 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800713c:	f043 0220 	orr.w	r2, r3, #32
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e000      	b.n	800714a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
	...

08007154 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b088      	sub	sp, #32
 8007158:	af02      	add	r7, sp, #8
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007160:	4b1b      	ldr	r3, [pc, #108]	; (80071d0 <SPI_EndRxTxTransaction+0x7c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a1b      	ldr	r2, [pc, #108]	; (80071d4 <SPI_EndRxTxTransaction+0x80>)
 8007166:	fba2 2303 	umull	r2, r3, r2, r3
 800716a:	0d5b      	lsrs	r3, r3, #21
 800716c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007170:	fb02 f303 	mul.w	r3, r2, r3
 8007174:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800717e:	d112      	bne.n	80071a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2200      	movs	r2, #0
 8007188:	2180      	movs	r1, #128	; 0x80
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f7ff fef4 	bl	8006f78 <SPI_WaitFlagStateUntilTimeout>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d016      	beq.n	80071c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800719a:	f043 0220 	orr.w	r2, r3, #32
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e00f      	b.n	80071c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00a      	beq.n	80071c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071bc:	2b80      	cmp	r3, #128	; 0x80
 80071be:	d0f2      	beq.n	80071a6 <SPI_EndRxTxTransaction+0x52>
 80071c0:	e000      	b.n	80071c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80071c2:	bf00      	nop
  }

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3718      	adds	r7, #24
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	2000007c 	.word	0x2000007c
 80071d4:	165e9f81 	.word	0x165e9f81

080071d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e041      	b.n	800726e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d106      	bne.n	8007204 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f7fd fb20 	bl	8004844 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2202      	movs	r2, #2
 8007208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	3304      	adds	r3, #4
 8007214:	4619      	mov	r1, r3
 8007216:	4610      	mov	r0, r2
 8007218:	f000 f9c0 	bl	800759c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3708      	adds	r7, #8
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
	...

08007278 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b01      	cmp	r3, #1
 800728a:	d001      	beq.n	8007290 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e044      	b.n	800731a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68da      	ldr	r2, [r3, #12]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0201 	orr.w	r2, r2, #1
 80072a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a1e      	ldr	r2, [pc, #120]	; (8007328 <HAL_TIM_Base_Start_IT+0xb0>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d018      	beq.n	80072e4 <HAL_TIM_Base_Start_IT+0x6c>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072ba:	d013      	beq.n	80072e4 <HAL_TIM_Base_Start_IT+0x6c>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a1a      	ldr	r2, [pc, #104]	; (800732c <HAL_TIM_Base_Start_IT+0xb4>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d00e      	beq.n	80072e4 <HAL_TIM_Base_Start_IT+0x6c>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a19      	ldr	r2, [pc, #100]	; (8007330 <HAL_TIM_Base_Start_IT+0xb8>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d009      	beq.n	80072e4 <HAL_TIM_Base_Start_IT+0x6c>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a17      	ldr	r2, [pc, #92]	; (8007334 <HAL_TIM_Base_Start_IT+0xbc>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d004      	beq.n	80072e4 <HAL_TIM_Base_Start_IT+0x6c>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a16      	ldr	r2, [pc, #88]	; (8007338 <HAL_TIM_Base_Start_IT+0xc0>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d111      	bne.n	8007308 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	f003 0307 	and.w	r3, r3, #7
 80072ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b06      	cmp	r3, #6
 80072f4:	d010      	beq.n	8007318 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f042 0201 	orr.w	r2, r2, #1
 8007304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007306:	e007      	b.n	8007318 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f042 0201 	orr.w	r2, r2, #1
 8007316:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3714      	adds	r7, #20
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	40010000 	.word	0x40010000
 800732c:	40000400 	.word	0x40000400
 8007330:	40000800 	.word	0x40000800
 8007334:	40000c00 	.word	0x40000c00
 8007338:	40014000 	.word	0x40014000

0800733c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	f003 0302 	and.w	r3, r3, #2
 800734e:	2b02      	cmp	r3, #2
 8007350:	d122      	bne.n	8007398 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	f003 0302 	and.w	r3, r3, #2
 800735c:	2b02      	cmp	r3, #2
 800735e:	d11b      	bne.n	8007398 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f06f 0202 	mvn.w	r2, #2
 8007368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f8ee 	bl	8007560 <HAL_TIM_IC_CaptureCallback>
 8007384:	e005      	b.n	8007392 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f8e0 	bl	800754c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f8f1 	bl	8007574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	f003 0304 	and.w	r3, r3, #4
 80073a2:	2b04      	cmp	r3, #4
 80073a4:	d122      	bne.n	80073ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	f003 0304 	and.w	r3, r3, #4
 80073b0:	2b04      	cmp	r3, #4
 80073b2:	d11b      	bne.n	80073ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f06f 0204 	mvn.w	r2, #4
 80073bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2202      	movs	r2, #2
 80073c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f8c4 	bl	8007560 <HAL_TIM_IC_CaptureCallback>
 80073d8:	e005      	b.n	80073e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f8b6 	bl	800754c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f8c7 	bl	8007574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	f003 0308 	and.w	r3, r3, #8
 80073f6:	2b08      	cmp	r3, #8
 80073f8:	d122      	bne.n	8007440 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	f003 0308 	and.w	r3, r3, #8
 8007404:	2b08      	cmp	r3, #8
 8007406:	d11b      	bne.n	8007440 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f06f 0208 	mvn.w	r2, #8
 8007410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2204      	movs	r2, #4
 8007416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	69db      	ldr	r3, [r3, #28]
 800741e:	f003 0303 	and.w	r3, r3, #3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d003      	beq.n	800742e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f89a 	bl	8007560 <HAL_TIM_IC_CaptureCallback>
 800742c:	e005      	b.n	800743a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f88c 	bl	800754c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f89d 	bl	8007574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	f003 0310 	and.w	r3, r3, #16
 800744a:	2b10      	cmp	r3, #16
 800744c:	d122      	bne.n	8007494 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	f003 0310 	and.w	r3, r3, #16
 8007458:	2b10      	cmp	r3, #16
 800745a:	d11b      	bne.n	8007494 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f06f 0210 	mvn.w	r2, #16
 8007464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2208      	movs	r2, #8
 800746a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f870 	bl	8007560 <HAL_TIM_IC_CaptureCallback>
 8007480:	e005      	b.n	800748e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f862 	bl	800754c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f873 	bl	8007574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d10e      	bne.n	80074c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d107      	bne.n	80074c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f06f 0201 	mvn.w	r2, #1
 80074b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7f9 fe74 	bl	80011a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ca:	2b80      	cmp	r3, #128	; 0x80
 80074cc:	d10e      	bne.n	80074ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d8:	2b80      	cmp	r3, #128	; 0x80
 80074da:	d107      	bne.n	80074ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 f8e2 	bl	80076b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f6:	2b40      	cmp	r3, #64	; 0x40
 80074f8:	d10e      	bne.n	8007518 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007504:	2b40      	cmp	r3, #64	; 0x40
 8007506:	d107      	bne.n	8007518 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f838 	bl	8007588 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	f003 0320 	and.w	r3, r3, #32
 8007522:	2b20      	cmp	r3, #32
 8007524:	d10e      	bne.n	8007544 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	f003 0320 	and.w	r3, r3, #32
 8007530:	2b20      	cmp	r3, #32
 8007532:	d107      	bne.n	8007544 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f06f 0220 	mvn.w	r2, #32
 800753c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f8ac 	bl	800769c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007544:	bf00      	nop
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800757c:	bf00      	nop
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a34      	ldr	r2, [pc, #208]	; (8007680 <TIM_Base_SetConfig+0xe4>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d00f      	beq.n	80075d4 <TIM_Base_SetConfig+0x38>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075ba:	d00b      	beq.n	80075d4 <TIM_Base_SetConfig+0x38>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a31      	ldr	r2, [pc, #196]	; (8007684 <TIM_Base_SetConfig+0xe8>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d007      	beq.n	80075d4 <TIM_Base_SetConfig+0x38>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a30      	ldr	r2, [pc, #192]	; (8007688 <TIM_Base_SetConfig+0xec>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d003      	beq.n	80075d4 <TIM_Base_SetConfig+0x38>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a2f      	ldr	r2, [pc, #188]	; (800768c <TIM_Base_SetConfig+0xf0>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d108      	bne.n	80075e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	4313      	orrs	r3, r2
 80075e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a25      	ldr	r2, [pc, #148]	; (8007680 <TIM_Base_SetConfig+0xe4>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d01b      	beq.n	8007626 <TIM_Base_SetConfig+0x8a>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075f4:	d017      	beq.n	8007626 <TIM_Base_SetConfig+0x8a>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a22      	ldr	r2, [pc, #136]	; (8007684 <TIM_Base_SetConfig+0xe8>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d013      	beq.n	8007626 <TIM_Base_SetConfig+0x8a>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a21      	ldr	r2, [pc, #132]	; (8007688 <TIM_Base_SetConfig+0xec>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d00f      	beq.n	8007626 <TIM_Base_SetConfig+0x8a>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a20      	ldr	r2, [pc, #128]	; (800768c <TIM_Base_SetConfig+0xf0>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d00b      	beq.n	8007626 <TIM_Base_SetConfig+0x8a>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a1f      	ldr	r2, [pc, #124]	; (8007690 <TIM_Base_SetConfig+0xf4>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d007      	beq.n	8007626 <TIM_Base_SetConfig+0x8a>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a1e      	ldr	r2, [pc, #120]	; (8007694 <TIM_Base_SetConfig+0xf8>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d003      	beq.n	8007626 <TIM_Base_SetConfig+0x8a>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a1d      	ldr	r2, [pc, #116]	; (8007698 <TIM_Base_SetConfig+0xfc>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d108      	bne.n	8007638 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800762c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	4313      	orrs	r3, r2
 8007636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	4313      	orrs	r3, r2
 8007644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	689a      	ldr	r2, [r3, #8]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a08      	ldr	r2, [pc, #32]	; (8007680 <TIM_Base_SetConfig+0xe4>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d103      	bne.n	800766c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	691a      	ldr	r2, [r3, #16]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	615a      	str	r2, [r3, #20]
}
 8007672:	bf00      	nop
 8007674:	3714      	adds	r7, #20
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	40010000 	.word	0x40010000
 8007684:	40000400 	.word	0x40000400
 8007688:	40000800 	.word	0x40000800
 800768c:	40000c00 	.word	0x40000c00
 8007690:	40014000 	.word	0x40014000
 8007694:	40014400 	.word	0x40014400
 8007698:	40014800 	.word	0x40014800

0800769c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e03f      	b.n	8007756 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d106      	bne.n	80076f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f7fd f8fc 	bl	80048e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2224      	movs	r2, #36	; 0x24
 80076f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68da      	ldr	r2, [r3, #12]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007706:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f929 	bl	8007960 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	691a      	ldr	r2, [r3, #16]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800771c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	695a      	ldr	r2, [r3, #20]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800772c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68da      	ldr	r2, [r3, #12]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800773c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2220      	movs	r2, #32
 8007748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2220      	movs	r2, #32
 8007750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b08a      	sub	sp, #40	; 0x28
 8007762:	af02      	add	r7, sp, #8
 8007764:	60f8      	str	r0, [r7, #12]
 8007766:	60b9      	str	r1, [r7, #8]
 8007768:	603b      	str	r3, [r7, #0]
 800776a:	4613      	mov	r3, r2
 800776c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800776e:	2300      	movs	r3, #0
 8007770:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b20      	cmp	r3, #32
 800777c:	d17c      	bne.n	8007878 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d002      	beq.n	800778a <HAL_UART_Transmit+0x2c>
 8007784:	88fb      	ldrh	r3, [r7, #6]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e075      	b.n	800787a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007794:	2b01      	cmp	r3, #1
 8007796:	d101      	bne.n	800779c <HAL_UART_Transmit+0x3e>
 8007798:	2302      	movs	r3, #2
 800779a:	e06e      	b.n	800787a <HAL_UART_Transmit+0x11c>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2221      	movs	r2, #33	; 0x21
 80077ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077b2:	f7fd f979 	bl	8004aa8 <HAL_GetTick>
 80077b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	88fa      	ldrh	r2, [r7, #6]
 80077bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	88fa      	ldrh	r2, [r7, #6]
 80077c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077cc:	d108      	bne.n	80077e0 <HAL_UART_Transmit+0x82>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d104      	bne.n	80077e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80077d6:	2300      	movs	r3, #0
 80077d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	61bb      	str	r3, [r7, #24]
 80077de:	e003      	b.n	80077e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077e4:	2300      	movs	r3, #0
 80077e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80077f0:	e02a      	b.n	8007848 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	2200      	movs	r2, #0
 80077fa:	2180      	movs	r1, #128	; 0x80
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 f840 	bl	8007882 <UART_WaitOnFlagUntilTimeout>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e036      	b.n	800787a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10b      	bne.n	800782a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	881b      	ldrh	r3, [r3, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007820:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	3302      	adds	r3, #2
 8007826:	61bb      	str	r3, [r7, #24]
 8007828:	e007      	b.n	800783a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	781a      	ldrb	r2, [r3, #0]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	3301      	adds	r3, #1
 8007838:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800783e:	b29b      	uxth	r3, r3
 8007840:	3b01      	subs	r3, #1
 8007842:	b29a      	uxth	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800784c:	b29b      	uxth	r3, r3
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1cf      	bne.n	80077f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	2200      	movs	r2, #0
 800785a:	2140      	movs	r1, #64	; 0x40
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f000 f810 	bl	8007882 <UART_WaitOnFlagUntilTimeout>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d001      	beq.n	800786c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007868:	2303      	movs	r3, #3
 800786a:	e006      	b.n	800787a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2220      	movs	r2, #32
 8007870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007874:	2300      	movs	r3, #0
 8007876:	e000      	b.n	800787a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007878:	2302      	movs	r3, #2
  }
}
 800787a:	4618      	mov	r0, r3
 800787c:	3720      	adds	r7, #32
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b090      	sub	sp, #64	; 0x40
 8007886:	af00      	add	r7, sp, #0
 8007888:	60f8      	str	r0, [r7, #12]
 800788a:	60b9      	str	r1, [r7, #8]
 800788c:	603b      	str	r3, [r7, #0]
 800788e:	4613      	mov	r3, r2
 8007890:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007892:	e050      	b.n	8007936 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007896:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800789a:	d04c      	beq.n	8007936 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800789c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d007      	beq.n	80078b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80078a2:	f7fd f901 	bl	8004aa8 <HAL_GetTick>
 80078a6:	4602      	mov	r2, r0
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d241      	bcs.n	8007936 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	330c      	adds	r3, #12
 80078b8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078bc:	e853 3f00 	ldrex	r3, [r3]
 80078c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80078c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	330c      	adds	r3, #12
 80078d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078d2:	637a      	str	r2, [r7, #52]	; 0x34
 80078d4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80078d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078da:	e841 2300 	strex	r3, r2, [r1]
 80078de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80078e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1e5      	bne.n	80078b2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3314      	adds	r3, #20
 80078ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	e853 3f00 	ldrex	r3, [r3]
 80078f4:	613b      	str	r3, [r7, #16]
   return(result);
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	f023 0301 	bic.w	r3, r3, #1
 80078fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	3314      	adds	r3, #20
 8007904:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007906:	623a      	str	r2, [r7, #32]
 8007908:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790a:	69f9      	ldr	r1, [r7, #28]
 800790c:	6a3a      	ldr	r2, [r7, #32]
 800790e:	e841 2300 	strex	r3, r2, [r1]
 8007912:	61bb      	str	r3, [r7, #24]
   return(result);
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1e5      	bne.n	80078e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2220      	movs	r2, #32
 800791e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2220      	movs	r2, #32
 8007926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e00f      	b.n	8007956 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	4013      	ands	r3, r2
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	429a      	cmp	r2, r3
 8007944:	bf0c      	ite	eq
 8007946:	2301      	moveq	r3, #1
 8007948:	2300      	movne	r3, #0
 800794a:	b2db      	uxtb	r3, r3
 800794c:	461a      	mov	r2, r3
 800794e:	79fb      	ldrb	r3, [r7, #7]
 8007950:	429a      	cmp	r2, r3
 8007952:	d09f      	beq.n	8007894 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3740      	adds	r7, #64	; 0x40
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
	...

08007960 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007964:	b0c0      	sub	sp, #256	; 0x100
 8007966:	af00      	add	r7, sp, #0
 8007968:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800796c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800797c:	68d9      	ldr	r1, [r3, #12]
 800797e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	ea40 0301 	orr.w	r3, r0, r1
 8007988:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800798a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800798e:	689a      	ldr	r2, [r3, #8]
 8007990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	431a      	orrs	r2, r3
 8007998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	431a      	orrs	r2, r3
 80079a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079a4:	69db      	ldr	r3, [r3, #28]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80079ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80079b8:	f021 010c 	bic.w	r1, r1, #12
 80079bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079c6:	430b      	orrs	r3, r1
 80079c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80079d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079da:	6999      	ldr	r1, [r3, #24]
 80079dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	ea40 0301 	orr.w	r3, r0, r1
 80079e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	4b8f      	ldr	r3, [pc, #572]	; (8007c2c <UART_SetConfig+0x2cc>)
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d005      	beq.n	8007a00 <UART_SetConfig+0xa0>
 80079f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	4b8d      	ldr	r3, [pc, #564]	; (8007c30 <UART_SetConfig+0x2d0>)
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d104      	bne.n	8007a0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a00:	f7fe fe2e 	bl	8006660 <HAL_RCC_GetPCLK2Freq>
 8007a04:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007a08:	e003      	b.n	8007a12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a0a:	f7fe fe15 	bl	8006638 <HAL_RCC_GetPCLK1Freq>
 8007a0e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a16:	69db      	ldr	r3, [r3, #28]
 8007a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a1c:	f040 810c 	bne.w	8007c38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a24:	2200      	movs	r2, #0
 8007a26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a2a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007a2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007a32:	4622      	mov	r2, r4
 8007a34:	462b      	mov	r3, r5
 8007a36:	1891      	adds	r1, r2, r2
 8007a38:	65b9      	str	r1, [r7, #88]	; 0x58
 8007a3a:	415b      	adcs	r3, r3
 8007a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a42:	4621      	mov	r1, r4
 8007a44:	eb12 0801 	adds.w	r8, r2, r1
 8007a48:	4629      	mov	r1, r5
 8007a4a:	eb43 0901 	adc.w	r9, r3, r1
 8007a4e:	f04f 0200 	mov.w	r2, #0
 8007a52:	f04f 0300 	mov.w	r3, #0
 8007a56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a62:	4690      	mov	r8, r2
 8007a64:	4699      	mov	r9, r3
 8007a66:	4623      	mov	r3, r4
 8007a68:	eb18 0303 	adds.w	r3, r8, r3
 8007a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a70:	462b      	mov	r3, r5
 8007a72:	eb49 0303 	adc.w	r3, r9, r3
 8007a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a86:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007a8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007a8e:	460b      	mov	r3, r1
 8007a90:	18db      	adds	r3, r3, r3
 8007a92:	653b      	str	r3, [r7, #80]	; 0x50
 8007a94:	4613      	mov	r3, r2
 8007a96:	eb42 0303 	adc.w	r3, r2, r3
 8007a9a:	657b      	str	r3, [r7, #84]	; 0x54
 8007a9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007aa0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007aa4:	f7f9 f8f8 	bl	8000c98 <__aeabi_uldivmod>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	460b      	mov	r3, r1
 8007aac:	4b61      	ldr	r3, [pc, #388]	; (8007c34 <UART_SetConfig+0x2d4>)
 8007aae:	fba3 2302 	umull	r2, r3, r3, r2
 8007ab2:	095b      	lsrs	r3, r3, #5
 8007ab4:	011c      	lsls	r4, r3, #4
 8007ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007aba:	2200      	movs	r2, #0
 8007abc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ac0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007ac4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007ac8:	4642      	mov	r2, r8
 8007aca:	464b      	mov	r3, r9
 8007acc:	1891      	adds	r1, r2, r2
 8007ace:	64b9      	str	r1, [r7, #72]	; 0x48
 8007ad0:	415b      	adcs	r3, r3
 8007ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ad4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007ad8:	4641      	mov	r1, r8
 8007ada:	eb12 0a01 	adds.w	sl, r2, r1
 8007ade:	4649      	mov	r1, r9
 8007ae0:	eb43 0b01 	adc.w	fp, r3, r1
 8007ae4:	f04f 0200 	mov.w	r2, #0
 8007ae8:	f04f 0300 	mov.w	r3, #0
 8007aec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007af0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007af4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007af8:	4692      	mov	sl, r2
 8007afa:	469b      	mov	fp, r3
 8007afc:	4643      	mov	r3, r8
 8007afe:	eb1a 0303 	adds.w	r3, sl, r3
 8007b02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b06:	464b      	mov	r3, r9
 8007b08:	eb4b 0303 	adc.w	r3, fp, r3
 8007b0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b1c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007b20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007b24:	460b      	mov	r3, r1
 8007b26:	18db      	adds	r3, r3, r3
 8007b28:	643b      	str	r3, [r7, #64]	; 0x40
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	eb42 0303 	adc.w	r3, r2, r3
 8007b30:	647b      	str	r3, [r7, #68]	; 0x44
 8007b32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007b36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007b3a:	f7f9 f8ad 	bl	8000c98 <__aeabi_uldivmod>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	4611      	mov	r1, r2
 8007b44:	4b3b      	ldr	r3, [pc, #236]	; (8007c34 <UART_SetConfig+0x2d4>)
 8007b46:	fba3 2301 	umull	r2, r3, r3, r1
 8007b4a:	095b      	lsrs	r3, r3, #5
 8007b4c:	2264      	movs	r2, #100	; 0x64
 8007b4e:	fb02 f303 	mul.w	r3, r2, r3
 8007b52:	1acb      	subs	r3, r1, r3
 8007b54:	00db      	lsls	r3, r3, #3
 8007b56:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007b5a:	4b36      	ldr	r3, [pc, #216]	; (8007c34 <UART_SetConfig+0x2d4>)
 8007b5c:	fba3 2302 	umull	r2, r3, r3, r2
 8007b60:	095b      	lsrs	r3, r3, #5
 8007b62:	005b      	lsls	r3, r3, #1
 8007b64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b68:	441c      	add	r4, r3
 8007b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b74:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007b78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007b7c:	4642      	mov	r2, r8
 8007b7e:	464b      	mov	r3, r9
 8007b80:	1891      	adds	r1, r2, r2
 8007b82:	63b9      	str	r1, [r7, #56]	; 0x38
 8007b84:	415b      	adcs	r3, r3
 8007b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b8c:	4641      	mov	r1, r8
 8007b8e:	1851      	adds	r1, r2, r1
 8007b90:	6339      	str	r1, [r7, #48]	; 0x30
 8007b92:	4649      	mov	r1, r9
 8007b94:	414b      	adcs	r3, r1
 8007b96:	637b      	str	r3, [r7, #52]	; 0x34
 8007b98:	f04f 0200 	mov.w	r2, #0
 8007b9c:	f04f 0300 	mov.w	r3, #0
 8007ba0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007ba4:	4659      	mov	r1, fp
 8007ba6:	00cb      	lsls	r3, r1, #3
 8007ba8:	4651      	mov	r1, sl
 8007baa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bae:	4651      	mov	r1, sl
 8007bb0:	00ca      	lsls	r2, r1, #3
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	4642      	mov	r2, r8
 8007bba:	189b      	adds	r3, r3, r2
 8007bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007bc0:	464b      	mov	r3, r9
 8007bc2:	460a      	mov	r2, r1
 8007bc4:	eb42 0303 	adc.w	r3, r2, r3
 8007bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007bd8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007bdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007be0:	460b      	mov	r3, r1
 8007be2:	18db      	adds	r3, r3, r3
 8007be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007be6:	4613      	mov	r3, r2
 8007be8:	eb42 0303 	adc.w	r3, r2, r3
 8007bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007bf2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007bf6:	f7f9 f84f 	bl	8000c98 <__aeabi_uldivmod>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	4b0d      	ldr	r3, [pc, #52]	; (8007c34 <UART_SetConfig+0x2d4>)
 8007c00:	fba3 1302 	umull	r1, r3, r3, r2
 8007c04:	095b      	lsrs	r3, r3, #5
 8007c06:	2164      	movs	r1, #100	; 0x64
 8007c08:	fb01 f303 	mul.w	r3, r1, r3
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	00db      	lsls	r3, r3, #3
 8007c10:	3332      	adds	r3, #50	; 0x32
 8007c12:	4a08      	ldr	r2, [pc, #32]	; (8007c34 <UART_SetConfig+0x2d4>)
 8007c14:	fba2 2303 	umull	r2, r3, r2, r3
 8007c18:	095b      	lsrs	r3, r3, #5
 8007c1a:	f003 0207 	and.w	r2, r3, #7
 8007c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4422      	add	r2, r4
 8007c26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c28:	e105      	b.n	8007e36 <UART_SetConfig+0x4d6>
 8007c2a:	bf00      	nop
 8007c2c:	40011000 	.word	0x40011000
 8007c30:	40011400 	.word	0x40011400
 8007c34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c42:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007c46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007c4a:	4642      	mov	r2, r8
 8007c4c:	464b      	mov	r3, r9
 8007c4e:	1891      	adds	r1, r2, r2
 8007c50:	6239      	str	r1, [r7, #32]
 8007c52:	415b      	adcs	r3, r3
 8007c54:	627b      	str	r3, [r7, #36]	; 0x24
 8007c56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c5a:	4641      	mov	r1, r8
 8007c5c:	1854      	adds	r4, r2, r1
 8007c5e:	4649      	mov	r1, r9
 8007c60:	eb43 0501 	adc.w	r5, r3, r1
 8007c64:	f04f 0200 	mov.w	r2, #0
 8007c68:	f04f 0300 	mov.w	r3, #0
 8007c6c:	00eb      	lsls	r3, r5, #3
 8007c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c72:	00e2      	lsls	r2, r4, #3
 8007c74:	4614      	mov	r4, r2
 8007c76:	461d      	mov	r5, r3
 8007c78:	4643      	mov	r3, r8
 8007c7a:	18e3      	adds	r3, r4, r3
 8007c7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c80:	464b      	mov	r3, r9
 8007c82:	eb45 0303 	adc.w	r3, r5, r3
 8007c86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c9a:	f04f 0200 	mov.w	r2, #0
 8007c9e:	f04f 0300 	mov.w	r3, #0
 8007ca2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	008b      	lsls	r3, r1, #2
 8007caa:	4621      	mov	r1, r4
 8007cac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cb0:	4621      	mov	r1, r4
 8007cb2:	008a      	lsls	r2, r1, #2
 8007cb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007cb8:	f7f8 ffee 	bl	8000c98 <__aeabi_uldivmod>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4b60      	ldr	r3, [pc, #384]	; (8007e44 <UART_SetConfig+0x4e4>)
 8007cc2:	fba3 2302 	umull	r2, r3, r3, r2
 8007cc6:	095b      	lsrs	r3, r3, #5
 8007cc8:	011c      	lsls	r4, r3, #4
 8007cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007cd4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007cd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007cdc:	4642      	mov	r2, r8
 8007cde:	464b      	mov	r3, r9
 8007ce0:	1891      	adds	r1, r2, r2
 8007ce2:	61b9      	str	r1, [r7, #24]
 8007ce4:	415b      	adcs	r3, r3
 8007ce6:	61fb      	str	r3, [r7, #28]
 8007ce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cec:	4641      	mov	r1, r8
 8007cee:	1851      	adds	r1, r2, r1
 8007cf0:	6139      	str	r1, [r7, #16]
 8007cf2:	4649      	mov	r1, r9
 8007cf4:	414b      	adcs	r3, r1
 8007cf6:	617b      	str	r3, [r7, #20]
 8007cf8:	f04f 0200 	mov.w	r2, #0
 8007cfc:	f04f 0300 	mov.w	r3, #0
 8007d00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d04:	4659      	mov	r1, fp
 8007d06:	00cb      	lsls	r3, r1, #3
 8007d08:	4651      	mov	r1, sl
 8007d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d0e:	4651      	mov	r1, sl
 8007d10:	00ca      	lsls	r2, r1, #3
 8007d12:	4610      	mov	r0, r2
 8007d14:	4619      	mov	r1, r3
 8007d16:	4603      	mov	r3, r0
 8007d18:	4642      	mov	r2, r8
 8007d1a:	189b      	adds	r3, r3, r2
 8007d1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d20:	464b      	mov	r3, r9
 8007d22:	460a      	mov	r2, r1
 8007d24:	eb42 0303 	adc.w	r3, r2, r3
 8007d28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d36:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007d38:	f04f 0200 	mov.w	r2, #0
 8007d3c:	f04f 0300 	mov.w	r3, #0
 8007d40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007d44:	4649      	mov	r1, r9
 8007d46:	008b      	lsls	r3, r1, #2
 8007d48:	4641      	mov	r1, r8
 8007d4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d4e:	4641      	mov	r1, r8
 8007d50:	008a      	lsls	r2, r1, #2
 8007d52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007d56:	f7f8 ff9f 	bl	8000c98 <__aeabi_uldivmod>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	4b39      	ldr	r3, [pc, #228]	; (8007e44 <UART_SetConfig+0x4e4>)
 8007d60:	fba3 1302 	umull	r1, r3, r3, r2
 8007d64:	095b      	lsrs	r3, r3, #5
 8007d66:	2164      	movs	r1, #100	; 0x64
 8007d68:	fb01 f303 	mul.w	r3, r1, r3
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	011b      	lsls	r3, r3, #4
 8007d70:	3332      	adds	r3, #50	; 0x32
 8007d72:	4a34      	ldr	r2, [pc, #208]	; (8007e44 <UART_SetConfig+0x4e4>)
 8007d74:	fba2 2303 	umull	r2, r3, r2, r3
 8007d78:	095b      	lsrs	r3, r3, #5
 8007d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d7e:	441c      	add	r4, r3
 8007d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d84:	2200      	movs	r2, #0
 8007d86:	673b      	str	r3, [r7, #112]	; 0x70
 8007d88:	677a      	str	r2, [r7, #116]	; 0x74
 8007d8a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007d8e:	4642      	mov	r2, r8
 8007d90:	464b      	mov	r3, r9
 8007d92:	1891      	adds	r1, r2, r2
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	415b      	adcs	r3, r3
 8007d98:	60fb      	str	r3, [r7, #12]
 8007d9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d9e:	4641      	mov	r1, r8
 8007da0:	1851      	adds	r1, r2, r1
 8007da2:	6039      	str	r1, [r7, #0]
 8007da4:	4649      	mov	r1, r9
 8007da6:	414b      	adcs	r3, r1
 8007da8:	607b      	str	r3, [r7, #4]
 8007daa:	f04f 0200 	mov.w	r2, #0
 8007dae:	f04f 0300 	mov.w	r3, #0
 8007db2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007db6:	4659      	mov	r1, fp
 8007db8:	00cb      	lsls	r3, r1, #3
 8007dba:	4651      	mov	r1, sl
 8007dbc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dc0:	4651      	mov	r1, sl
 8007dc2:	00ca      	lsls	r2, r1, #3
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	4603      	mov	r3, r0
 8007dca:	4642      	mov	r2, r8
 8007dcc:	189b      	adds	r3, r3, r2
 8007dce:	66bb      	str	r3, [r7, #104]	; 0x68
 8007dd0:	464b      	mov	r3, r9
 8007dd2:	460a      	mov	r2, r1
 8007dd4:	eb42 0303 	adc.w	r3, r2, r3
 8007dd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	663b      	str	r3, [r7, #96]	; 0x60
 8007de4:	667a      	str	r2, [r7, #100]	; 0x64
 8007de6:	f04f 0200 	mov.w	r2, #0
 8007dea:	f04f 0300 	mov.w	r3, #0
 8007dee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007df2:	4649      	mov	r1, r9
 8007df4:	008b      	lsls	r3, r1, #2
 8007df6:	4641      	mov	r1, r8
 8007df8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dfc:	4641      	mov	r1, r8
 8007dfe:	008a      	lsls	r2, r1, #2
 8007e00:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007e04:	f7f8 ff48 	bl	8000c98 <__aeabi_uldivmod>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4b0d      	ldr	r3, [pc, #52]	; (8007e44 <UART_SetConfig+0x4e4>)
 8007e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8007e12:	095b      	lsrs	r3, r3, #5
 8007e14:	2164      	movs	r1, #100	; 0x64
 8007e16:	fb01 f303 	mul.w	r3, r1, r3
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	011b      	lsls	r3, r3, #4
 8007e1e:	3332      	adds	r3, #50	; 0x32
 8007e20:	4a08      	ldr	r2, [pc, #32]	; (8007e44 <UART_SetConfig+0x4e4>)
 8007e22:	fba2 2303 	umull	r2, r3, r2, r3
 8007e26:	095b      	lsrs	r3, r3, #5
 8007e28:	f003 020f 	and.w	r2, r3, #15
 8007e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4422      	add	r2, r4
 8007e34:	609a      	str	r2, [r3, #8]
}
 8007e36:	bf00      	nop
 8007e38:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e42:	bf00      	nop
 8007e44:	51eb851f 	.word	0x51eb851f

08007e48 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8007e50:	4b22      	ldr	r3, [pc, #136]	; (8007edc <WIZCHIP_READ+0x94>)
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	4798      	blx	r3
   WIZCHIP.CS._select();
 8007e56:	4b21      	ldr	r3, [pc, #132]	; (8007edc <WIZCHIP_READ+0x94>)
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007e5c:	4b1f      	ldr	r3, [pc, #124]	; (8007edc <WIZCHIP_READ+0x94>)
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d003      	beq.n	8007e6c <WIZCHIP_READ+0x24>
 8007e64:	4b1d      	ldr	r3, [pc, #116]	; (8007edc <WIZCHIP_READ+0x94>)
 8007e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d114      	bne.n	8007e96 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8007e6c:	4b1b      	ldr	r3, [pc, #108]	; (8007edc <WIZCHIP_READ+0x94>)
 8007e6e:	6a1b      	ldr	r3, [r3, #32]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	0c12      	lsrs	r2, r2, #16
 8007e74:	b2d2      	uxtb	r2, r2
 8007e76:	4610      	mov	r0, r2
 8007e78:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8007e7a:	4b18      	ldr	r3, [pc, #96]	; (8007edc <WIZCHIP_READ+0x94>)
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	0a12      	lsrs	r2, r2, #8
 8007e82:	b2d2      	uxtb	r2, r2
 8007e84:	4610      	mov	r0, r2
 8007e86:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8007e88:	4b14      	ldr	r3, [pc, #80]	; (8007edc <WIZCHIP_READ+0x94>)
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	b2d2      	uxtb	r2, r2
 8007e90:	4610      	mov	r0, r2
 8007e92:	4798      	blx	r3
 8007e94:	e011      	b.n	8007eba <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	0c1b      	lsrs	r3, r3, #16
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	0a1b      	lsrs	r3, r3, #8
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8007eac:	4b0b      	ldr	r3, [pc, #44]	; (8007edc <WIZCHIP_READ+0x94>)
 8007eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb0:	f107 020c 	add.w	r2, r7, #12
 8007eb4:	2103      	movs	r1, #3
 8007eb6:	4610      	mov	r0, r2
 8007eb8:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8007eba:	4b08      	ldr	r3, [pc, #32]	; (8007edc <WIZCHIP_READ+0x94>)
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	4798      	blx	r3
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8007ec4:	4b05      	ldr	r3, [pc, #20]	; (8007edc <WIZCHIP_READ+0x94>)
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007eca:	4b04      	ldr	r3, [pc, #16]	; (8007edc <WIZCHIP_READ+0x94>)
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	4798      	blx	r3
   return ret;
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	20000088 	.word	0x20000088

08007ee0 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	460b      	mov	r3, r1
 8007eea:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8007eec:	4b22      	ldr	r3, [pc, #136]	; (8007f78 <WIZCHIP_WRITE+0x98>)
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	4798      	blx	r3
   WIZCHIP.CS._select();
 8007ef2:	4b21      	ldr	r3, [pc, #132]	; (8007f78 <WIZCHIP_WRITE+0x98>)
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f043 0304 	orr.w	r3, r3, #4
 8007efe:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007f00:	4b1d      	ldr	r3, [pc, #116]	; (8007f78 <WIZCHIP_WRITE+0x98>)
 8007f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d119      	bne.n	8007f3c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8007f08:	4b1b      	ldr	r3, [pc, #108]	; (8007f78 <WIZCHIP_WRITE+0x98>)
 8007f0a:	6a1b      	ldr	r3, [r3, #32]
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	0c12      	lsrs	r2, r2, #16
 8007f10:	b2d2      	uxtb	r2, r2
 8007f12:	4610      	mov	r0, r2
 8007f14:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8007f16:	4b18      	ldr	r3, [pc, #96]	; (8007f78 <WIZCHIP_WRITE+0x98>)
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	687a      	ldr	r2, [r7, #4]
 8007f1c:	0a12      	lsrs	r2, r2, #8
 8007f1e:	b2d2      	uxtb	r2, r2
 8007f20:	4610      	mov	r0, r2
 8007f22:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8007f24:	4b14      	ldr	r3, [pc, #80]	; (8007f78 <WIZCHIP_WRITE+0x98>)
 8007f26:	6a1b      	ldr	r3, [r3, #32]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	b2d2      	uxtb	r2, r2
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8007f30:	4b11      	ldr	r3, [pc, #68]	; (8007f78 <WIZCHIP_WRITE+0x98>)
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	78fa      	ldrb	r2, [r7, #3]
 8007f36:	4610      	mov	r0, r2
 8007f38:	4798      	blx	r3
 8007f3a:	e013      	b.n	8007f64 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	0c1b      	lsrs	r3, r3, #16
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	0a1b      	lsrs	r3, r3, #8
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8007f52:	78fb      	ldrb	r3, [r7, #3]
 8007f54:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8007f56:	4b08      	ldr	r3, [pc, #32]	; (8007f78 <WIZCHIP_WRITE+0x98>)
 8007f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5a:	f107 020c 	add.w	r2, r7, #12
 8007f5e:	2104      	movs	r1, #4
 8007f60:	4610      	mov	r0, r2
 8007f62:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8007f64:	4b04      	ldr	r3, [pc, #16]	; (8007f78 <WIZCHIP_WRITE+0x98>)
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007f6a:	4b03      	ldr	r3, [pc, #12]	; (8007f78 <WIZCHIP_WRITE+0x98>)
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	4798      	blx	r3
}
 8007f70:	bf00      	nop
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	20000088 	.word	0x20000088

08007f7c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8007f7c:	b590      	push	{r4, r7, lr}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	4613      	mov	r3, r2
 8007f88:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8007f8a:	4b2b      	ldr	r3, [pc, #172]	; (8008038 <WIZCHIP_READ_BUF+0xbc>)
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8007f90:	4b29      	ldr	r3, [pc, #164]	; (8008038 <WIZCHIP_READ_BUF+0xbc>)
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007f96:	4b28      	ldr	r3, [pc, #160]	; (8008038 <WIZCHIP_READ_BUF+0xbc>)
 8007f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <WIZCHIP_READ_BUF+0x2a>
 8007f9e:	4b26      	ldr	r3, [pc, #152]	; (8008038 <WIZCHIP_READ_BUF+0xbc>)
 8007fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d126      	bne.n	8007ff4 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8007fa6:	4b24      	ldr	r3, [pc, #144]	; (8008038 <WIZCHIP_READ_BUF+0xbc>)
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	0c12      	lsrs	r2, r2, #16
 8007fae:	b2d2      	uxtb	r2, r2
 8007fb0:	4610      	mov	r0, r2
 8007fb2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8007fb4:	4b20      	ldr	r3, [pc, #128]	; (8008038 <WIZCHIP_READ_BUF+0xbc>)
 8007fb6:	6a1b      	ldr	r3, [r3, #32]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	0a12      	lsrs	r2, r2, #8
 8007fbc:	b2d2      	uxtb	r2, r2
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8007fc2:	4b1d      	ldr	r3, [pc, #116]	; (8008038 <WIZCHIP_READ_BUF+0xbc>)
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	b2d2      	uxtb	r2, r2
 8007fca:	4610      	mov	r0, r2
 8007fcc:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8007fce:	2300      	movs	r3, #0
 8007fd0:	82fb      	strh	r3, [r7, #22]
 8007fd2:	e00a      	b.n	8007fea <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8007fd4:	4b18      	ldr	r3, [pc, #96]	; (8008038 <WIZCHIP_READ_BUF+0xbc>)
 8007fd6:	69db      	ldr	r3, [r3, #28]
 8007fd8:	8afa      	ldrh	r2, [r7, #22]
 8007fda:	68b9      	ldr	r1, [r7, #8]
 8007fdc:	188c      	adds	r4, r1, r2
 8007fde:	4798      	blx	r3
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8007fe4:	8afb      	ldrh	r3, [r7, #22]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	82fb      	strh	r3, [r7, #22]
 8007fea:	8afa      	ldrh	r2, [r7, #22]
 8007fec:	88fb      	ldrh	r3, [r7, #6]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d3f0      	bcc.n	8007fd4 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007ff2:	e017      	b.n	8008024 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	0c1b      	lsrs	r3, r3, #16
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	0a1b      	lsrs	r3, r3, #8
 8008000:	b2db      	uxtb	r3, r3
 8008002:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	b2db      	uxtb	r3, r3
 8008008:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800800a:	4b0b      	ldr	r3, [pc, #44]	; (8008038 <WIZCHIP_READ_BUF+0xbc>)
 800800c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800e:	f107 0210 	add.w	r2, r7, #16
 8008012:	2103      	movs	r1, #3
 8008014:	4610      	mov	r0, r2
 8008016:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8008018:	4b07      	ldr	r3, [pc, #28]	; (8008038 <WIZCHIP_READ_BUF+0xbc>)
 800801a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801c:	88fa      	ldrh	r2, [r7, #6]
 800801e:	4611      	mov	r1, r2
 8008020:	68b8      	ldr	r0, [r7, #8]
 8008022:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8008024:	4b04      	ldr	r3, [pc, #16]	; (8008038 <WIZCHIP_READ_BUF+0xbc>)
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800802a:	4b03      	ldr	r3, [pc, #12]	; (8008038 <WIZCHIP_READ_BUF+0xbc>)
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	4798      	blx	r3
}
 8008030:	bf00      	nop
 8008032:	371c      	adds	r7, #28
 8008034:	46bd      	mov	sp, r7
 8008036:	bd90      	pop	{r4, r7, pc}
 8008038:	20000088 	.word	0x20000088

0800803c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	4613      	mov	r3, r2
 8008048:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800804a:	4b2b      	ldr	r3, [pc, #172]	; (80080f8 <WIZCHIP_WRITE_BUF+0xbc>)
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8008050:	4b29      	ldr	r3, [pc, #164]	; (80080f8 <WIZCHIP_WRITE_BUF+0xbc>)
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f043 0304 	orr.w	r3, r3, #4
 800805c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800805e:	4b26      	ldr	r3, [pc, #152]	; (80080f8 <WIZCHIP_WRITE_BUF+0xbc>)
 8008060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008062:	2b00      	cmp	r3, #0
 8008064:	d126      	bne.n	80080b4 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8008066:	4b24      	ldr	r3, [pc, #144]	; (80080f8 <WIZCHIP_WRITE_BUF+0xbc>)
 8008068:	6a1b      	ldr	r3, [r3, #32]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	0c12      	lsrs	r2, r2, #16
 800806e:	b2d2      	uxtb	r2, r2
 8008070:	4610      	mov	r0, r2
 8008072:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8008074:	4b20      	ldr	r3, [pc, #128]	; (80080f8 <WIZCHIP_WRITE_BUF+0xbc>)
 8008076:	6a1b      	ldr	r3, [r3, #32]
 8008078:	68fa      	ldr	r2, [r7, #12]
 800807a:	0a12      	lsrs	r2, r2, #8
 800807c:	b2d2      	uxtb	r2, r2
 800807e:	4610      	mov	r0, r2
 8008080:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8008082:	4b1d      	ldr	r3, [pc, #116]	; (80080f8 <WIZCHIP_WRITE_BUF+0xbc>)
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	b2d2      	uxtb	r2, r2
 800808a:	4610      	mov	r0, r2
 800808c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800808e:	2300      	movs	r3, #0
 8008090:	82fb      	strh	r3, [r7, #22]
 8008092:	e00a      	b.n	80080aa <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8008094:	4b18      	ldr	r3, [pc, #96]	; (80080f8 <WIZCHIP_WRITE_BUF+0xbc>)
 8008096:	6a1b      	ldr	r3, [r3, #32]
 8008098:	8afa      	ldrh	r2, [r7, #22]
 800809a:	68b9      	ldr	r1, [r7, #8]
 800809c:	440a      	add	r2, r1
 800809e:	7812      	ldrb	r2, [r2, #0]
 80080a0:	4610      	mov	r0, r2
 80080a2:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80080a4:	8afb      	ldrh	r3, [r7, #22]
 80080a6:	3301      	adds	r3, #1
 80080a8:	82fb      	strh	r3, [r7, #22]
 80080aa:	8afa      	ldrh	r2, [r7, #22]
 80080ac:	88fb      	ldrh	r3, [r7, #6]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d3f0      	bcc.n	8008094 <WIZCHIP_WRITE_BUF+0x58>
 80080b2:	e017      	b.n	80080e4 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	0c1b      	lsrs	r3, r3, #16
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	0a1b      	lsrs	r3, r3, #8
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80080ca:	4b0b      	ldr	r3, [pc, #44]	; (80080f8 <WIZCHIP_WRITE_BUF+0xbc>)
 80080cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ce:	f107 0210 	add.w	r2, r7, #16
 80080d2:	2103      	movs	r1, #3
 80080d4:	4610      	mov	r0, r2
 80080d6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80080d8:	4b07      	ldr	r3, [pc, #28]	; (80080f8 <WIZCHIP_WRITE_BUF+0xbc>)
 80080da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080dc:	88fa      	ldrh	r2, [r7, #6]
 80080de:	4611      	mov	r1, r2
 80080e0:	68b8      	ldr	r0, [r7, #8]
 80080e2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80080e4:	4b04      	ldr	r3, [pc, #16]	; (80080f8 <WIZCHIP_WRITE_BUF+0xbc>)
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80080ea:	4b03      	ldr	r3, [pc, #12]	; (80080f8 <WIZCHIP_WRITE_BUF+0xbc>)
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	4798      	blx	r3
}
 80080f0:	bf00      	nop
 80080f2:	3718      	adds	r7, #24
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	20000088 	.word	0x20000088

080080fc <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80080fc:	b590      	push	{r4, r7, lr}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	4603      	mov	r3, r0
 8008104:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8008106:	2300      	movs	r3, #0
 8008108:	81fb      	strh	r3, [r7, #14]
 800810a:	2300      	movs	r3, #0
 800810c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800810e:	79fb      	ldrb	r3, [r7, #7]
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	3301      	adds	r3, #1
 8008114:	00db      	lsls	r3, r3, #3
 8008116:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800811a:	4618      	mov	r0, r3
 800811c:	f7ff fe94 	bl	8007e48 <WIZCHIP_READ>
 8008120:	4603      	mov	r3, r0
 8008122:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8008124:	89bb      	ldrh	r3, [r7, #12]
 8008126:	021b      	lsls	r3, r3, #8
 8008128:	b29c      	uxth	r4, r3
 800812a:	79fb      	ldrb	r3, [r7, #7]
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	3301      	adds	r3, #1
 8008130:	00db      	lsls	r3, r3, #3
 8008132:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8008136:	4618      	mov	r0, r3
 8008138:	f7ff fe86 	bl	8007e48 <WIZCHIP_READ>
 800813c:	4603      	mov	r3, r0
 800813e:	b29b      	uxth	r3, r3
 8008140:	4423      	add	r3, r4
 8008142:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8008144:	89bb      	ldrh	r3, [r7, #12]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d01a      	beq.n	8008180 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800814a:	79fb      	ldrb	r3, [r7, #7]
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	3301      	adds	r3, #1
 8008150:	00db      	lsls	r3, r3, #3
 8008152:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008156:	4618      	mov	r0, r3
 8008158:	f7ff fe76 	bl	8007e48 <WIZCHIP_READ>
 800815c:	4603      	mov	r3, r0
 800815e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8008160:	89fb      	ldrh	r3, [r7, #14]
 8008162:	021b      	lsls	r3, r3, #8
 8008164:	b29c      	uxth	r4, r3
 8008166:	79fb      	ldrb	r3, [r7, #7]
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	3301      	adds	r3, #1
 800816c:	00db      	lsls	r3, r3, #3
 800816e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8008172:	4618      	mov	r0, r3
 8008174:	f7ff fe68 	bl	8007e48 <WIZCHIP_READ>
 8008178:	4603      	mov	r3, r0
 800817a:	b29b      	uxth	r3, r3
 800817c:	4423      	add	r3, r4
 800817e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8008180:	89fa      	ldrh	r2, [r7, #14]
 8008182:	89bb      	ldrh	r3, [r7, #12]
 8008184:	429a      	cmp	r2, r3
 8008186:	d1c2      	bne.n	800810e <getSn_TX_FSR+0x12>
   return val;
 8008188:	89fb      	ldrh	r3, [r7, #14]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3714      	adds	r7, #20
 800818e:	46bd      	mov	sp, r7
 8008190:	bd90      	pop	{r4, r7, pc}

08008192 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8008192:	b590      	push	{r4, r7, lr}
 8008194:	b085      	sub	sp, #20
 8008196:	af00      	add	r7, sp, #0
 8008198:	4603      	mov	r3, r0
 800819a:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800819c:	2300      	movs	r3, #0
 800819e:	81fb      	strh	r3, [r7, #14]
 80081a0:	2300      	movs	r3, #0
 80081a2:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80081a4:	79fb      	ldrb	r3, [r7, #7]
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	3301      	adds	r3, #1
 80081aa:	00db      	lsls	r3, r3, #3
 80081ac:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7ff fe49 	bl	8007e48 <WIZCHIP_READ>
 80081b6:	4603      	mov	r3, r0
 80081b8:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80081ba:	89bb      	ldrh	r3, [r7, #12]
 80081bc:	021b      	lsls	r3, r3, #8
 80081be:	b29c      	uxth	r4, r3
 80081c0:	79fb      	ldrb	r3, [r7, #7]
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	3301      	adds	r3, #1
 80081c6:	00db      	lsls	r3, r3, #3
 80081c8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7ff fe3b 	bl	8007e48 <WIZCHIP_READ>
 80081d2:	4603      	mov	r3, r0
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	4423      	add	r3, r4
 80081d8:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80081da:	89bb      	ldrh	r3, [r7, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d01a      	beq.n	8008216 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80081e0:	79fb      	ldrb	r3, [r7, #7]
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	3301      	adds	r3, #1
 80081e6:	00db      	lsls	r3, r3, #3
 80081e8:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7ff fe2b 	bl	8007e48 <WIZCHIP_READ>
 80081f2:	4603      	mov	r3, r0
 80081f4:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80081f6:	89fb      	ldrh	r3, [r7, #14]
 80081f8:	021b      	lsls	r3, r3, #8
 80081fa:	b29c      	uxth	r4, r3
 80081fc:	79fb      	ldrb	r3, [r7, #7]
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	3301      	adds	r3, #1
 8008202:	00db      	lsls	r3, r3, #3
 8008204:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8008208:	4618      	mov	r0, r3
 800820a:	f7ff fe1d 	bl	8007e48 <WIZCHIP_READ>
 800820e:	4603      	mov	r3, r0
 8008210:	b29b      	uxth	r3, r3
 8008212:	4423      	add	r3, r4
 8008214:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8008216:	89fa      	ldrh	r2, [r7, #14]
 8008218:	89bb      	ldrh	r3, [r7, #12]
 800821a:	429a      	cmp	r2, r3
 800821c:	d1c2      	bne.n	80081a4 <getSn_RX_RSR+0x12>
   return val;
 800821e:	89fb      	ldrh	r3, [r7, #14]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3714      	adds	r7, #20
 8008224:	46bd      	mov	sp, r7
 8008226:	bd90      	pop	{r4, r7, pc}

08008228 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8008228:	b590      	push	{r4, r7, lr}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	4603      	mov	r3, r0
 8008230:	6039      	str	r1, [r7, #0]
 8008232:	71fb      	strb	r3, [r7, #7]
 8008234:	4613      	mov	r3, r2
 8008236:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8008238:	2300      	movs	r3, #0
 800823a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 800823c:	2300      	movs	r3, #0
 800823e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8008240:	88bb      	ldrh	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d048      	beq.n	80082d8 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8008246:	79fb      	ldrb	r3, [r7, #7]
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	3301      	adds	r3, #1
 800824c:	00db      	lsls	r3, r3, #3
 800824e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8008252:	4618      	mov	r0, r3
 8008254:	f7ff fdf8 	bl	8007e48 <WIZCHIP_READ>
 8008258:	4603      	mov	r3, r0
 800825a:	b29b      	uxth	r3, r3
 800825c:	021b      	lsls	r3, r3, #8
 800825e:	b29c      	uxth	r4, r3
 8008260:	79fb      	ldrb	r3, [r7, #7]
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	3301      	adds	r3, #1
 8008266:	00db      	lsls	r3, r3, #3
 8008268:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 800826c:	4618      	mov	r0, r3
 800826e:	f7ff fdeb 	bl	8007e48 <WIZCHIP_READ>
 8008272:	4603      	mov	r3, r0
 8008274:	b29b      	uxth	r3, r3
 8008276:	4423      	add	r3, r4
 8008278:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 800827a:	89fb      	ldrh	r3, [r7, #14]
 800827c:	021b      	lsls	r3, r3, #8
 800827e:	79fa      	ldrb	r2, [r7, #7]
 8008280:	0092      	lsls	r2, r2, #2
 8008282:	3202      	adds	r2, #2
 8008284:	00d2      	lsls	r2, r2, #3
 8008286:	4413      	add	r3, r2
 8008288:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800828a:	88bb      	ldrh	r3, [r7, #4]
 800828c:	461a      	mov	r2, r3
 800828e:	6839      	ldr	r1, [r7, #0]
 8008290:	68b8      	ldr	r0, [r7, #8]
 8008292:	f7ff fed3 	bl	800803c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8008296:	89fa      	ldrh	r2, [r7, #14]
 8008298:	88bb      	ldrh	r3, [r7, #4]
 800829a:	4413      	add	r3, r2
 800829c:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800829e:	79fb      	ldrb	r3, [r7, #7]
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	3301      	adds	r3, #1
 80082a4:	00db      	lsls	r3, r3, #3
 80082a6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80082aa:	461a      	mov	r2, r3
 80082ac:	89fb      	ldrh	r3, [r7, #14]
 80082ae:	0a1b      	lsrs	r3, r3, #8
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	4619      	mov	r1, r3
 80082b6:	4610      	mov	r0, r2
 80082b8:	f7ff fe12 	bl	8007ee0 <WIZCHIP_WRITE>
 80082bc:	79fb      	ldrb	r3, [r7, #7]
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	3301      	adds	r3, #1
 80082c2:	00db      	lsls	r3, r3, #3
 80082c4:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80082c8:	461a      	mov	r2, r3
 80082ca:	89fb      	ldrh	r3, [r7, #14]
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	4619      	mov	r1, r3
 80082d0:	4610      	mov	r0, r2
 80082d2:	f7ff fe05 	bl	8007ee0 <WIZCHIP_WRITE>
 80082d6:	e000      	b.n	80082da <wiz_send_data+0xb2>
   if(len == 0)  return;
 80082d8:	bf00      	nop
}
 80082da:	3714      	adds	r7, #20
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd90      	pop	{r4, r7, pc}

080082e0 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80082e0:	b590      	push	{r4, r7, lr}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	4603      	mov	r3, r0
 80082e8:	6039      	str	r1, [r7, #0]
 80082ea:	71fb      	strb	r3, [r7, #7]
 80082ec:	4613      	mov	r3, r2
 80082ee:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80082f0:	2300      	movs	r3, #0
 80082f2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80082f4:	2300      	movs	r3, #0
 80082f6:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80082f8:	88bb      	ldrh	r3, [r7, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d048      	beq.n	8008390 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 80082fe:	79fb      	ldrb	r3, [r7, #7]
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	3301      	adds	r3, #1
 8008304:	00db      	lsls	r3, r3, #3
 8008306:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800830a:	4618      	mov	r0, r3
 800830c:	f7ff fd9c 	bl	8007e48 <WIZCHIP_READ>
 8008310:	4603      	mov	r3, r0
 8008312:	b29b      	uxth	r3, r3
 8008314:	021b      	lsls	r3, r3, #8
 8008316:	b29c      	uxth	r4, r3
 8008318:	79fb      	ldrb	r3, [r7, #7]
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	3301      	adds	r3, #1
 800831e:	00db      	lsls	r3, r3, #3
 8008320:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8008324:	4618      	mov	r0, r3
 8008326:	f7ff fd8f 	bl	8007e48 <WIZCHIP_READ>
 800832a:	4603      	mov	r3, r0
 800832c:	b29b      	uxth	r3, r3
 800832e:	4423      	add	r3, r4
 8008330:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8008332:	89fb      	ldrh	r3, [r7, #14]
 8008334:	021b      	lsls	r3, r3, #8
 8008336:	79fa      	ldrb	r2, [r7, #7]
 8008338:	0092      	lsls	r2, r2, #2
 800833a:	3203      	adds	r2, #3
 800833c:	00d2      	lsls	r2, r2, #3
 800833e:	4413      	add	r3, r2
 8008340:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8008342:	88bb      	ldrh	r3, [r7, #4]
 8008344:	461a      	mov	r2, r3
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	68b8      	ldr	r0, [r7, #8]
 800834a:	f7ff fe17 	bl	8007f7c <WIZCHIP_READ_BUF>
   ptr += len;
 800834e:	89fa      	ldrh	r2, [r7, #14]
 8008350:	88bb      	ldrh	r3, [r7, #4]
 8008352:	4413      	add	r3, r2
 8008354:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8008356:	79fb      	ldrb	r3, [r7, #7]
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	3301      	adds	r3, #1
 800835c:	00db      	lsls	r3, r3, #3
 800835e:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8008362:	461a      	mov	r2, r3
 8008364:	89fb      	ldrh	r3, [r7, #14]
 8008366:	0a1b      	lsrs	r3, r3, #8
 8008368:	b29b      	uxth	r3, r3
 800836a:	b2db      	uxtb	r3, r3
 800836c:	4619      	mov	r1, r3
 800836e:	4610      	mov	r0, r2
 8008370:	f7ff fdb6 	bl	8007ee0 <WIZCHIP_WRITE>
 8008374:	79fb      	ldrb	r3, [r7, #7]
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	3301      	adds	r3, #1
 800837a:	00db      	lsls	r3, r3, #3
 800837c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8008380:	461a      	mov	r2, r3
 8008382:	89fb      	ldrh	r3, [r7, #14]
 8008384:	b2db      	uxtb	r3, r3
 8008386:	4619      	mov	r1, r3
 8008388:	4610      	mov	r0, r2
 800838a:	f7ff fda9 	bl	8007ee0 <WIZCHIP_WRITE>
 800838e:	e000      	b.n	8008392 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8008390:	bf00      	nop
}
 8008392:	3714      	adds	r7, #20
 8008394:	46bd      	mov	sp, r7
 8008396:	bd90      	pop	{r4, r7, pc}

08008398 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8008398:	b590      	push	{r4, r7, lr}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	4603      	mov	r3, r0
 80083a0:	460a      	mov	r2, r1
 80083a2:	71fb      	strb	r3, [r7, #7]
 80083a4:	4613      	mov	r3, r2
 80083a6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80083a8:	2300      	movs	r3, #0
 80083aa:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 80083ac:	79fb      	ldrb	r3, [r7, #7]
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	3301      	adds	r3, #1
 80083b2:	00db      	lsls	r3, r3, #3
 80083b4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7ff fd45 	bl	8007e48 <WIZCHIP_READ>
 80083be:	4603      	mov	r3, r0
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	021b      	lsls	r3, r3, #8
 80083c4:	b29c      	uxth	r4, r3
 80083c6:	79fb      	ldrb	r3, [r7, #7]
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	3301      	adds	r3, #1
 80083cc:	00db      	lsls	r3, r3, #3
 80083ce:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7ff fd38 	bl	8007e48 <WIZCHIP_READ>
 80083d8:	4603      	mov	r3, r0
 80083da:	b29b      	uxth	r3, r3
 80083dc:	4423      	add	r3, r4
 80083de:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 80083e0:	89fa      	ldrh	r2, [r7, #14]
 80083e2:	88bb      	ldrh	r3, [r7, #4]
 80083e4:	4413      	add	r3, r2
 80083e6:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 80083e8:	79fb      	ldrb	r3, [r7, #7]
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	3301      	adds	r3, #1
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80083f4:	461a      	mov	r2, r3
 80083f6:	89fb      	ldrh	r3, [r7, #14]
 80083f8:	0a1b      	lsrs	r3, r3, #8
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	4619      	mov	r1, r3
 8008400:	4610      	mov	r0, r2
 8008402:	f7ff fd6d 	bl	8007ee0 <WIZCHIP_WRITE>
 8008406:	79fb      	ldrb	r3, [r7, #7]
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	3301      	adds	r3, #1
 800840c:	00db      	lsls	r3, r3, #3
 800840e:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8008412:	461a      	mov	r2, r3
 8008414:	89fb      	ldrh	r3, [r7, #14]
 8008416:	b2db      	uxtb	r3, r3
 8008418:	4619      	mov	r1, r3
 800841a:	4610      	mov	r0, r2
 800841c:	f7ff fd60 	bl	8007ee0 <WIZCHIP_WRITE>
}
 8008420:	bf00      	nop
 8008422:	3714      	adds	r7, #20
 8008424:	46bd      	mov	sp, r7
 8008426:	bd90      	pop	{r4, r7, pc}

08008428 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8008428:	b590      	push	{r4, r7, lr}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	4604      	mov	r4, r0
 8008430:	4608      	mov	r0, r1
 8008432:	4611      	mov	r1, r2
 8008434:	461a      	mov	r2, r3
 8008436:	4623      	mov	r3, r4
 8008438:	71fb      	strb	r3, [r7, #7]
 800843a:	4603      	mov	r3, r0
 800843c:	71bb      	strb	r3, [r7, #6]
 800843e:	460b      	mov	r3, r1
 8008440:	80bb      	strh	r3, [r7, #4]
 8008442:	4613      	mov	r3, r2
 8008444:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8008446:	79fb      	ldrb	r3, [r7, #7]
 8008448:	2b08      	cmp	r3, #8
 800844a:	d902      	bls.n	8008452 <socket+0x2a>
 800844c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008450:	e0f2      	b.n	8008638 <socket+0x210>
	switch(protocol)
 8008452:	79bb      	ldrb	r3, [r7, #6]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d005      	beq.n	8008464 <socket+0x3c>
 8008458:	2b00      	cmp	r3, #0
 800845a:	dd11      	ble.n	8008480 <socket+0x58>
 800845c:	3b02      	subs	r3, #2
 800845e:	2b02      	cmp	r3, #2
 8008460:	d80e      	bhi.n	8008480 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8008462:	e011      	b.n	8008488 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8008464:	f107 030c 	add.w	r3, r7, #12
 8008468:	2204      	movs	r2, #4
 800846a:	4619      	mov	r1, r3
 800846c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8008470:	f7ff fd84 	bl	8007f7c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d105      	bne.n	8008486 <socket+0x5e>
 800847a:	f06f 0302 	mvn.w	r3, #2
 800847e:	e0db      	b.n	8008638 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8008480:	f06f 0304 	mvn.w	r3, #4
 8008484:	e0d8      	b.n	8008638 <socket+0x210>
	    break;
 8008486:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8008488:	78fb      	ldrb	r3, [r7, #3]
 800848a:	f003 0304 	and.w	r3, r3, #4
 800848e:	2b00      	cmp	r3, #0
 8008490:	d002      	beq.n	8008498 <socket+0x70>
 8008492:	f06f 0305 	mvn.w	r3, #5
 8008496:	e0cf      	b.n	8008638 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8008498:	78fb      	ldrb	r3, [r7, #3]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d025      	beq.n	80084ea <socket+0xc2>
	{
   	switch(protocol)
 800849e:	79bb      	ldrb	r3, [r7, #6]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d002      	beq.n	80084aa <socket+0x82>
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d008      	beq.n	80084ba <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80084a8:	e024      	b.n	80084f4 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80084aa:	78fb      	ldrb	r3, [r7, #3]
 80084ac:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d11c      	bne.n	80084ee <socket+0xc6>
 80084b4:	f06f 0305 	mvn.w	r3, #5
 80084b8:	e0be      	b.n	8008638 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 80084ba:	78fb      	ldrb	r3, [r7, #3]
 80084bc:	f003 0320 	and.w	r3, r3, #32
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d006      	beq.n	80084d2 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80084c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	db02      	blt.n	80084d2 <socket+0xaa>
 80084cc:	f06f 0305 	mvn.w	r3, #5
 80084d0:	e0b2      	b.n	8008638 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 80084d2:	78fb      	ldrb	r3, [r7, #3]
 80084d4:	f003 0310 	and.w	r3, r3, #16
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00a      	beq.n	80084f2 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80084dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	db06      	blt.n	80084f2 <socket+0xca>
 80084e4:	f06f 0305 	mvn.w	r3, #5
 80084e8:	e0a6      	b.n	8008638 <socket+0x210>
   	}
   }
 80084ea:	bf00      	nop
 80084ec:	e002      	b.n	80084f4 <socket+0xcc>
   	      break;
 80084ee:	bf00      	nop
 80084f0:	e000      	b.n	80084f4 <socket+0xcc>
   	      break;
 80084f2:	bf00      	nop
	close(sn);
 80084f4:	79fb      	ldrb	r3, [r7, #7]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f000 f8ac 	bl	8008654 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80084fc:	79fb      	ldrb	r3, [r7, #7]
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	3301      	adds	r3, #1
 8008502:	00db      	lsls	r3, r3, #3
 8008504:	4618      	mov	r0, r3
 8008506:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800850a:	f023 030f 	bic.w	r3, r3, #15
 800850e:	b25a      	sxtb	r2, r3
 8008510:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008514:	4313      	orrs	r3, r2
 8008516:	b25b      	sxtb	r3, r3
 8008518:	b2db      	uxtb	r3, r3
 800851a:	4619      	mov	r1, r3
 800851c:	f7ff fce0 	bl	8007ee0 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8008520:	88bb      	ldrh	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d110      	bne.n	8008548 <socket+0x120>
	{
	   port = sock_any_port++;
 8008526:	4b46      	ldr	r3, [pc, #280]	; (8008640 <socket+0x218>)
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	b291      	uxth	r1, r2
 800852e:	4a44      	ldr	r2, [pc, #272]	; (8008640 <socket+0x218>)
 8008530:	8011      	strh	r1, [r2, #0]
 8008532:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8008534:	4b42      	ldr	r3, [pc, #264]	; (8008640 <socket+0x218>)
 8008536:	881b      	ldrh	r3, [r3, #0]
 8008538:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800853c:	4293      	cmp	r3, r2
 800853e:	d103      	bne.n	8008548 <socket+0x120>
 8008540:	4b3f      	ldr	r3, [pc, #252]	; (8008640 <socket+0x218>)
 8008542:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8008546:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8008548:	79fb      	ldrb	r3, [r7, #7]
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	3301      	adds	r3, #1
 800854e:	00db      	lsls	r3, r3, #3
 8008550:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008554:	461a      	mov	r2, r3
 8008556:	88bb      	ldrh	r3, [r7, #4]
 8008558:	0a1b      	lsrs	r3, r3, #8
 800855a:	b29b      	uxth	r3, r3
 800855c:	b2db      	uxtb	r3, r3
 800855e:	4619      	mov	r1, r3
 8008560:	4610      	mov	r0, r2
 8008562:	f7ff fcbd 	bl	8007ee0 <WIZCHIP_WRITE>
 8008566:	79fb      	ldrb	r3, [r7, #7]
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	3301      	adds	r3, #1
 800856c:	00db      	lsls	r3, r3, #3
 800856e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008572:	461a      	mov	r2, r3
 8008574:	88bb      	ldrh	r3, [r7, #4]
 8008576:	b2db      	uxtb	r3, r3
 8008578:	4619      	mov	r1, r3
 800857a:	4610      	mov	r0, r2
 800857c:	f7ff fcb0 	bl	8007ee0 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8008580:	79fb      	ldrb	r3, [r7, #7]
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	3301      	adds	r3, #1
 8008586:	00db      	lsls	r3, r3, #3
 8008588:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800858c:	2101      	movs	r1, #1
 800858e:	4618      	mov	r0, r3
 8008590:	f7ff fca6 	bl	8007ee0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8008594:	bf00      	nop
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	3301      	adds	r3, #1
 800859c:	00db      	lsls	r3, r3, #3
 800859e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7ff fc50 	bl	8007e48 <WIZCHIP_READ>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1f3      	bne.n	8008596 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80085ae:	79fb      	ldrb	r3, [r7, #7]
 80085b0:	2201      	movs	r2, #1
 80085b2:	fa02 f303 	lsl.w	r3, r2, r3
 80085b6:	b21b      	sxth	r3, r3
 80085b8:	43db      	mvns	r3, r3
 80085ba:	b21a      	sxth	r2, r3
 80085bc:	4b21      	ldr	r3, [pc, #132]	; (8008644 <socket+0x21c>)
 80085be:	881b      	ldrh	r3, [r3, #0]
 80085c0:	b21b      	sxth	r3, r3
 80085c2:	4013      	ands	r3, r2
 80085c4:	b21b      	sxth	r3, r3
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	4b1e      	ldr	r3, [pc, #120]	; (8008644 <socket+0x21c>)
 80085ca:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80085cc:	78fb      	ldrb	r3, [r7, #3]
 80085ce:	f003 0201 	and.w	r2, r3, #1
 80085d2:	79fb      	ldrb	r3, [r7, #7]
 80085d4:	fa02 f303 	lsl.w	r3, r2, r3
 80085d8:	b21a      	sxth	r2, r3
 80085da:	4b1a      	ldr	r3, [pc, #104]	; (8008644 <socket+0x21c>)
 80085dc:	881b      	ldrh	r3, [r3, #0]
 80085de:	b21b      	sxth	r3, r3
 80085e0:	4313      	orrs	r3, r2
 80085e2:	b21b      	sxth	r3, r3
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	4b17      	ldr	r3, [pc, #92]	; (8008644 <socket+0x21c>)
 80085e8:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80085ea:	79fb      	ldrb	r3, [r7, #7]
 80085ec:	2201      	movs	r2, #1
 80085ee:	fa02 f303 	lsl.w	r3, r2, r3
 80085f2:	b21b      	sxth	r3, r3
 80085f4:	43db      	mvns	r3, r3
 80085f6:	b21a      	sxth	r2, r3
 80085f8:	4b13      	ldr	r3, [pc, #76]	; (8008648 <socket+0x220>)
 80085fa:	881b      	ldrh	r3, [r3, #0]
 80085fc:	b21b      	sxth	r3, r3
 80085fe:	4013      	ands	r3, r2
 8008600:	b21b      	sxth	r3, r3
 8008602:	b29a      	uxth	r2, r3
 8008604:	4b10      	ldr	r3, [pc, #64]	; (8008648 <socket+0x220>)
 8008606:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8008608:	79fb      	ldrb	r3, [r7, #7]
 800860a:	4a10      	ldr	r2, [pc, #64]	; (800864c <socket+0x224>)
 800860c:	2100      	movs	r1, #0
 800860e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8008612:	79fb      	ldrb	r3, [r7, #7]
 8008614:	4a0e      	ldr	r2, [pc, #56]	; (8008650 <socket+0x228>)
 8008616:	2100      	movs	r1, #0
 8008618:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 800861a:	bf00      	nop
 800861c:	79fb      	ldrb	r3, [r7, #7]
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	3301      	adds	r3, #1
 8008622:	00db      	lsls	r3, r3, #3
 8008624:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008628:	4618      	mov	r0, r3
 800862a:	f7ff fc0d 	bl	8007e48 <WIZCHIP_READ>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d0f3      	beq.n	800861c <socket+0x1f4>
   return (int8_t)sn;
 8008634:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8008638:	4618      	mov	r0, r3
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	bd90      	pop	{r4, r7, pc}
 8008640:	20000086 	.word	0x20000086
 8008644:	20000f88 	.word	0x20000f88
 8008648:	20000f8a 	.word	0x20000f8a
 800864c:	20000f8c 	.word	0x20000f8c
 8008650:	20000f9c 	.word	0x20000f9c

08008654 <close>:

int8_t close(uint8_t sn)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	4603      	mov	r3, r0
 800865c:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 800865e:	79fb      	ldrb	r3, [r7, #7]
 8008660:	2b08      	cmp	r3, #8
 8008662:	d902      	bls.n	800866a <close+0x16>
 8008664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008668:	e055      	b.n	8008716 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800866a:	79fb      	ldrb	r3, [r7, #7]
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	3301      	adds	r3, #1
 8008670:	00db      	lsls	r3, r3, #3
 8008672:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008676:	2110      	movs	r1, #16
 8008678:	4618      	mov	r0, r3
 800867a:	f7ff fc31 	bl	8007ee0 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800867e:	bf00      	nop
 8008680:	79fb      	ldrb	r3, [r7, #7]
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	3301      	adds	r3, #1
 8008686:	00db      	lsls	r3, r3, #3
 8008688:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800868c:	4618      	mov	r0, r3
 800868e:	f7ff fbdb 	bl	8007e48 <WIZCHIP_READ>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1f3      	bne.n	8008680 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8008698:	79fb      	ldrb	r3, [r7, #7]
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	3301      	adds	r3, #1
 800869e:	00db      	lsls	r3, r3, #3
 80086a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80086a4:	211f      	movs	r1, #31
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7ff fc1a 	bl	8007ee0 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80086ac:	79fb      	ldrb	r3, [r7, #7]
 80086ae:	2201      	movs	r2, #1
 80086b0:	fa02 f303 	lsl.w	r3, r2, r3
 80086b4:	b21b      	sxth	r3, r3
 80086b6:	43db      	mvns	r3, r3
 80086b8:	b21a      	sxth	r2, r3
 80086ba:	4b19      	ldr	r3, [pc, #100]	; (8008720 <close+0xcc>)
 80086bc:	881b      	ldrh	r3, [r3, #0]
 80086be:	b21b      	sxth	r3, r3
 80086c0:	4013      	ands	r3, r2
 80086c2:	b21b      	sxth	r3, r3
 80086c4:	b29a      	uxth	r2, r3
 80086c6:	4b16      	ldr	r3, [pc, #88]	; (8008720 <close+0xcc>)
 80086c8:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 80086ca:	79fb      	ldrb	r3, [r7, #7]
 80086cc:	2201      	movs	r2, #1
 80086ce:	fa02 f303 	lsl.w	r3, r2, r3
 80086d2:	b21b      	sxth	r3, r3
 80086d4:	43db      	mvns	r3, r3
 80086d6:	b21a      	sxth	r2, r3
 80086d8:	4b12      	ldr	r3, [pc, #72]	; (8008724 <close+0xd0>)
 80086da:	881b      	ldrh	r3, [r3, #0]
 80086dc:	b21b      	sxth	r3, r3
 80086de:	4013      	ands	r3, r2
 80086e0:	b21b      	sxth	r3, r3
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	4b0f      	ldr	r3, [pc, #60]	; (8008724 <close+0xd0>)
 80086e6:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 80086e8:	79fb      	ldrb	r3, [r7, #7]
 80086ea:	4a0f      	ldr	r2, [pc, #60]	; (8008728 <close+0xd4>)
 80086ec:	2100      	movs	r1, #0
 80086ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 80086f2:	79fb      	ldrb	r3, [r7, #7]
 80086f4:	4a0d      	ldr	r2, [pc, #52]	; (800872c <close+0xd8>)
 80086f6:	2100      	movs	r1, #0
 80086f8:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 80086fa:	bf00      	nop
 80086fc:	79fb      	ldrb	r3, [r7, #7]
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	3301      	adds	r3, #1
 8008702:	00db      	lsls	r3, r3, #3
 8008704:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008708:	4618      	mov	r0, r3
 800870a:	f7ff fb9d 	bl	8007e48 <WIZCHIP_READ>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1f3      	bne.n	80086fc <close+0xa8>
	return SOCK_OK;
 8008714:	2301      	movs	r3, #1
}
 8008716:	4618      	mov	r0, r3
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	20000f88 	.word	0x20000f88
 8008724:	20000f8a 	.word	0x20000f8a
 8008728:	20000f8c 	.word	0x20000f8c
 800872c:	20000f9c 	.word	0x20000f9c

08008730 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
 8008736:	60b9      	str	r1, [r7, #8]
 8008738:	607b      	str	r3, [r7, #4]
 800873a:	4603      	mov	r3, r0
 800873c:	73fb      	strb	r3, [r7, #15]
 800873e:	4613      	mov	r3, r2
 8008740:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8008742:	2300      	movs	r3, #0
 8008744:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8008746:	2300      	movs	r3, #0
 8008748:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800874a:	7bfb      	ldrb	r3, [r7, #15]
 800874c:	2b08      	cmp	r3, #8
 800874e:	d902      	bls.n	8008756 <sendto+0x26>
 8008750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008754:	e11b      	b.n	800898e <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	3301      	adds	r3, #1
 800875c:	00db      	lsls	r3, r3, #3
 800875e:	4618      	mov	r0, r3
 8008760:	f7ff fb72 	bl	8007e48 <WIZCHIP_READ>
 8008764:	4603      	mov	r3, r0
 8008766:	f003 030f 	and.w	r3, r3, #15
 800876a:	3b02      	subs	r3, #2
 800876c:	2b02      	cmp	r3, #2
 800876e:	d902      	bls.n	8008776 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8008770:	f06f 0304 	mvn.w	r3, #4
 8008774:	e10b      	b.n	800898e <sendto+0x25e>
         break;
 8008776:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8008778:	89bb      	ldrh	r3, [r7, #12]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d102      	bne.n	8008784 <sendto+0x54>
 800877e:	f06f 030d 	mvn.w	r3, #13
 8008782:	e104      	b.n	800898e <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	021b      	lsls	r3, r3, #8
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	3201      	adds	r2, #1
 8008792:	7812      	ldrb	r2, [r2, #0]
 8008794:	4413      	add	r3, r2
 8008796:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	021b      	lsls	r3, r3, #8
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	3202      	adds	r2, #2
 80087a0:	7812      	ldrb	r2, [r2, #0]
 80087a2:	4413      	add	r3, r2
 80087a4:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	021b      	lsls	r3, r3, #8
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	3203      	adds	r2, #3
 80087ae:	7812      	ldrb	r2, [r2, #0]
 80087b0:	4413      	add	r3, r2
 80087b2:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d10e      	bne.n	80087d8 <sendto+0xa8>
 80087ba:	7bfb      	ldrb	r3, [r7, #15]
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	3301      	adds	r3, #1
 80087c0:	00db      	lsls	r3, r3, #3
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7ff fb40 	bl	8007e48 <WIZCHIP_READ>
 80087c8:	4603      	mov	r3, r0
 80087ca:	f003 0304 	and.w	r3, r3, #4
 80087ce:	2b04      	cmp	r3, #4
 80087d0:	d002      	beq.n	80087d8 <sendto+0xa8>
 80087d2:	f06f 030b 	mvn.w	r3, #11
 80087d6:	e0da      	b.n	800898e <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80087d8:	8c3b      	ldrh	r3, [r7, #32]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d10e      	bne.n	80087fc <sendto+0xcc>
 80087de:	7bfb      	ldrb	r3, [r7, #15]
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	3301      	adds	r3, #1
 80087e4:	00db      	lsls	r3, r3, #3
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7ff fb2e 	bl	8007e48 <WIZCHIP_READ>
 80087ec:	4603      	mov	r3, r0
 80087ee:	f003 0304 	and.w	r3, r3, #4
 80087f2:	2b04      	cmp	r3, #4
 80087f4:	d002      	beq.n	80087fc <sendto+0xcc>
 80087f6:	f06f 030a 	mvn.w	r3, #10
 80087fa:	e0c8      	b.n	800898e <sendto+0x25e>
   tmp = getSn_SR(sn);
 80087fc:	7bfb      	ldrb	r3, [r7, #15]
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	3301      	adds	r3, #1
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008808:	4618      	mov	r0, r3
 800880a:	f7ff fb1d 	bl	8007e48 <WIZCHIP_READ>
 800880e:	4603      	mov	r3, r0
 8008810:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8008812:	7dfb      	ldrb	r3, [r7, #23]
 8008814:	2b42      	cmp	r3, #66	; 0x42
 8008816:	d008      	beq.n	800882a <sendto+0xfa>
 8008818:	7dfb      	ldrb	r3, [r7, #23]
 800881a:	2b22      	cmp	r3, #34	; 0x22
 800881c:	d005      	beq.n	800882a <sendto+0xfa>
 800881e:	7dfb      	ldrb	r3, [r7, #23]
 8008820:	2b32      	cmp	r3, #50	; 0x32
 8008822:	d002      	beq.n	800882a <sendto+0xfa>
 8008824:	f06f 0306 	mvn.w	r3, #6
 8008828:	e0b1      	b.n	800898e <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 800882a:	7bfb      	ldrb	r3, [r7, #15]
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	3301      	adds	r3, #1
 8008830:	00db      	lsls	r3, r3, #3
 8008832:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8008836:	2204      	movs	r2, #4
 8008838:	6879      	ldr	r1, [r7, #4]
 800883a:	4618      	mov	r0, r3
 800883c:	f7ff fbfe 	bl	800803c <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	3301      	adds	r3, #1
 8008846:	00db      	lsls	r3, r3, #3
 8008848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800884c:	461a      	mov	r2, r3
 800884e:	8c3b      	ldrh	r3, [r7, #32]
 8008850:	0a1b      	lsrs	r3, r3, #8
 8008852:	b29b      	uxth	r3, r3
 8008854:	b2db      	uxtb	r3, r3
 8008856:	4619      	mov	r1, r3
 8008858:	4610      	mov	r0, r2
 800885a:	f7ff fb41 	bl	8007ee0 <WIZCHIP_WRITE>
 800885e:	7bfb      	ldrb	r3, [r7, #15]
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	3301      	adds	r3, #1
 8008864:	00db      	lsls	r3, r3, #3
 8008866:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800886a:	461a      	mov	r2, r3
 800886c:	8c3b      	ldrh	r3, [r7, #32]
 800886e:	b2db      	uxtb	r3, r3
 8008870:	4619      	mov	r1, r3
 8008872:	4610      	mov	r0, r2
 8008874:	f7ff fb34 	bl	8007ee0 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8008878:	7bfb      	ldrb	r3, [r7, #15]
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	3301      	adds	r3, #1
 800887e:	00db      	lsls	r3, r3, #3
 8008880:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8008884:	4618      	mov	r0, r3
 8008886:	f7ff fadf 	bl	8007e48 <WIZCHIP_READ>
 800888a:	4603      	mov	r3, r0
 800888c:	b29b      	uxth	r3, r3
 800888e:	029b      	lsls	r3, r3, #10
 8008890:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8008892:	89ba      	ldrh	r2, [r7, #12]
 8008894:	8abb      	ldrh	r3, [r7, #20]
 8008896:	429a      	cmp	r2, r3
 8008898:	d901      	bls.n	800889e <sendto+0x16e>
 800889a:	8abb      	ldrh	r3, [r7, #20]
 800889c:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800889e:	7bfb      	ldrb	r3, [r7, #15]
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7ff fc2b 	bl	80080fc <getSn_TX_FSR>
 80088a6:	4603      	mov	r3, r0
 80088a8:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	3301      	adds	r3, #1
 80088b0:	00db      	lsls	r3, r3, #3
 80088b2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7ff fac6 	bl	8007e48 <WIZCHIP_READ>
 80088bc:	4603      	mov	r3, r0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d102      	bne.n	80088c8 <sendto+0x198>
 80088c2:	f06f 0303 	mvn.w	r3, #3
 80088c6:	e062      	b.n	800898e <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80088c8:	4b33      	ldr	r3, [pc, #204]	; (8008998 <sendto+0x268>)
 80088ca:	881b      	ldrh	r3, [r3, #0]
 80088cc:	461a      	mov	r2, r3
 80088ce:	7bfb      	ldrb	r3, [r7, #15]
 80088d0:	fa42 f303 	asr.w	r3, r2, r3
 80088d4:	f003 0301 	and.w	r3, r3, #1
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d005      	beq.n	80088e8 <sendto+0x1b8>
 80088dc:	89ba      	ldrh	r2, [r7, #12]
 80088de:	8abb      	ldrh	r3, [r7, #20]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d901      	bls.n	80088e8 <sendto+0x1b8>
 80088e4:	2300      	movs	r3, #0
 80088e6:	e052      	b.n	800898e <sendto+0x25e>
      if(len <= freesize) break;
 80088e8:	89ba      	ldrh	r2, [r7, #12]
 80088ea:	8abb      	ldrh	r3, [r7, #20]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d900      	bls.n	80088f2 <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 80088f0:	e7d5      	b.n	800889e <sendto+0x16e>
      if(len <= freesize) break;
 80088f2:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80088f4:	89ba      	ldrh	r2, [r7, #12]
 80088f6:	7bfb      	ldrb	r3, [r7, #15]
 80088f8:	68b9      	ldr	r1, [r7, #8]
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7ff fc94 	bl	8008228 <wiz_send_data>
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   

   setSn_CR(sn,Sn_CR_SEND);
 8008900:	7bfb      	ldrb	r3, [r7, #15]
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	3301      	adds	r3, #1
 8008906:	00db      	lsls	r3, r3, #3
 8008908:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800890c:	2120      	movs	r1, #32
 800890e:	4618      	mov	r0, r3
 8008910:	f7ff fae6 	bl	8007ee0 <WIZCHIP_WRITE>


	/* wait to process the command... */
	while(getSn_CR(sn));
 8008914:	bf00      	nop
 8008916:	7bfb      	ldrb	r3, [r7, #15]
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	3301      	adds	r3, #1
 800891c:	00db      	lsls	r3, r3, #3
 800891e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008922:	4618      	mov	r0, r3
 8008924:	f7ff fa90 	bl	8007e48 <WIZCHIP_READ>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1f3      	bne.n	8008916 <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 800892e:	7bfb      	ldrb	r3, [r7, #15]
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	3301      	adds	r3, #1
 8008934:	00db      	lsls	r3, r3, #3
 8008936:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800893a:	4618      	mov	r0, r3
 800893c:	f7ff fa84 	bl	8007e48 <WIZCHIP_READ>
 8008940:	4603      	mov	r3, r0
 8008942:	f003 031f 	and.w	r3, r3, #31
 8008946:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8008948:	7dfb      	ldrb	r3, [r7, #23]
 800894a:	f003 0310 	and.w	r3, r3, #16
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00c      	beq.n	800896c <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8008952:	7bfb      	ldrb	r3, [r7, #15]
 8008954:	009b      	lsls	r3, r3, #2
 8008956:	3301      	adds	r3, #1
 8008958:	00db      	lsls	r3, r3, #3
 800895a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800895e:	2110      	movs	r1, #16
 8008960:	4618      	mov	r0, r3
 8008962:	f7ff fabd 	bl	8007ee0 <WIZCHIP_WRITE>
         break;
 8008966:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8008968:	89bb      	ldrh	r3, [r7, #12]
 800896a:	e010      	b.n	800898e <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 800896c:	7dfb      	ldrb	r3, [r7, #23]
 800896e:	f003 0308 	and.w	r3, r3, #8
 8008972:	2b00      	cmp	r3, #0
 8008974:	d0db      	beq.n	800892e <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8008976:	7bfb      	ldrb	r3, [r7, #15]
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	3301      	adds	r3, #1
 800897c:	00db      	lsls	r3, r3, #3
 800897e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008982:	2108      	movs	r1, #8
 8008984:	4618      	mov	r0, r3
 8008986:	f7ff faab 	bl	8007ee0 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 800898a:	f06f 030c 	mvn.w	r3, #12
}
 800898e:	4618      	mov	r0, r3
 8008990:	3718      	adds	r7, #24
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	20000f88 	.word	0x20000f88

0800899c <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b088      	sub	sp, #32
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60b9      	str	r1, [r7, #8]
 80089a4:	607b      	str	r3, [r7, #4]
 80089a6:	4603      	mov	r3, r0
 80089a8:	73fb      	strb	r3, [r7, #15]
 80089aa:	4613      	mov	r3, r2
 80089ac:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 80089ae:	2300      	movs	r3, #0
 80089b0:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 80089b2:	7bfb      	ldrb	r3, [r7, #15]
 80089b4:	2b08      	cmp	r3, #8
 80089b6:	d902      	bls.n	80089be <recvfrom+0x22>
 80089b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089bc:	e1d4      	b.n	8008d68 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 80089be:	7bfb      	ldrb	r3, [r7, #15]
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	3301      	adds	r3, #1
 80089c4:	00db      	lsls	r3, r3, #3
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7ff fa3e 	bl	8007e48 <WIZCHIP_READ>
 80089cc:	4603      	mov	r3, r0
 80089ce:	777b      	strb	r3, [r7, #29]
 80089d0:	7f7b      	ldrb	r3, [r7, #29]
 80089d2:	f003 030f 	and.w	r3, r3, #15
 80089d6:	3b02      	subs	r3, #2
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d902      	bls.n	80089e2 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 80089dc:	f06f 0304 	mvn.w	r3, #4
 80089e0:	e1c2      	b.n	8008d68 <recvfrom+0x3cc>
         break;
 80089e2:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80089e4:	89bb      	ldrh	r3, [r7, #12]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d102      	bne.n	80089f0 <recvfrom+0x54>
 80089ea:	f06f 030d 	mvn.w	r3, #13
 80089ee:	e1bb      	b.n	8008d68 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
 80089f2:	4a88      	ldr	r2, [pc, #544]	; (8008c14 <recvfrom+0x278>)
 80089f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d128      	bne.n	8008a4e <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7ff fbc7 	bl	8008192 <getSn_RX_RSR>
 8008a04:	4603      	mov	r3, r0
 8008a06:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8008a08:	7bfb      	ldrb	r3, [r7, #15]
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	00db      	lsls	r3, r3, #3
 8008a10:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008a14:	4618      	mov	r0, r3
 8008a16:	f7ff fa17 	bl	8007e48 <WIZCHIP_READ>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d102      	bne.n	8008a26 <recvfrom+0x8a>
 8008a20:	f06f 0303 	mvn.w	r3, #3
 8008a24:	e1a0      	b.n	8008d68 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8008a26:	4b7c      	ldr	r3, [pc, #496]	; (8008c18 <recvfrom+0x27c>)
 8008a28:	881b      	ldrh	r3, [r3, #0]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
 8008a2e:	fa42 f303 	asr.w	r3, r2, r3
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d004      	beq.n	8008a44 <recvfrom+0xa8>
 8008a3a:	8bfb      	ldrh	r3, [r7, #30]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <recvfrom+0xa8>
 8008a40:	2300      	movs	r3, #0
 8008a42:	e191      	b.n	8008d68 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8008a44:	8bfb      	ldrh	r3, [r7, #30]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d100      	bne.n	8008a4c <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8008a4a:	e7d7      	b.n	80089fc <recvfrom+0x60>
         if(pack_len != 0) break;
 8008a4c:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8008a4e:	7f7b      	ldrb	r3, [r7, #29]
 8008a50:	f003 0307 	and.w	r3, r3, #7
 8008a54:	2b04      	cmp	r3, #4
 8008a56:	d079      	beq.n	8008b4c <recvfrom+0x1b0>
 8008a58:	2b04      	cmp	r3, #4
 8008a5a:	f300 8142 	bgt.w	8008ce2 <recvfrom+0x346>
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d003      	beq.n	8008a6a <recvfrom+0xce>
 8008a62:	2b03      	cmp	r3, #3
 8008a64:	f000 80dc 	beq.w	8008c20 <recvfrom+0x284>
 8008a68:	e13b      	b.n	8008ce2 <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
 8008a6c:	4a69      	ldr	r2, [pc, #420]	; (8008c14 <recvfrom+0x278>)
 8008a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d152      	bne.n	8008b1c <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 8008a76:	f107 0114 	add.w	r1, r7, #20
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
 8008a7c:	2208      	movs	r2, #8
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7ff fc2e 	bl	80082e0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8008a84:	7bfb      	ldrb	r3, [r7, #15]
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	3301      	adds	r3, #1
 8008a8a:	00db      	lsls	r3, r3, #3
 8008a8c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008a90:	2140      	movs	r1, #64	; 0x40
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7ff fa24 	bl	8007ee0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8008a98:	bf00      	nop
 8008a9a:	7bfb      	ldrb	r3, [r7, #15]
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	00db      	lsls	r3, r3, #3
 8008aa2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7ff f9ce 	bl	8007e48 <WIZCHIP_READ>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1f3      	bne.n	8008a9a <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8008ab2:	7d3a      	ldrb	r2, [r7, #20]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	3301      	adds	r3, #1
 8008abc:	7d7a      	ldrb	r2, [r7, #21]
 8008abe:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	3302      	adds	r3, #2
 8008ac4:	7dba      	ldrb	r2, [r7, #22]
 8008ac6:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	3303      	adds	r3, #3
 8008acc:	7dfa      	ldrb	r2, [r7, #23]
 8008ace:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8008ad0:	7e3b      	ldrb	r3, [r7, #24]
 8008ad2:	b29a      	uxth	r2, r3
 8008ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad6:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8008ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ada:	881b      	ldrh	r3, [r3, #0]
 8008adc:	021b      	lsls	r3, r3, #8
 8008ade:	b29a      	uxth	r2, r3
 8008ae0:	7e7b      	ldrb	r3, [r7, #25]
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	4413      	add	r3, r2
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aea:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8008aec:	7eba      	ldrb	r2, [r7, #26]
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	b291      	uxth	r1, r2
 8008af2:	4a48      	ldr	r2, [pc, #288]	; (8008c14 <recvfrom+0x278>)
 8008af4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
 8008afa:	4a46      	ldr	r2, [pc, #280]	; (8008c14 <recvfrom+0x278>)
 8008afc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b00:	021b      	lsls	r3, r3, #8
 8008b02:	b299      	uxth	r1, r3
 8008b04:	7efb      	ldrb	r3, [r7, #27]
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	7bfb      	ldrb	r3, [r7, #15]
 8008b0a:	440a      	add	r2, r1
 8008b0c:	b291      	uxth	r1, r2
 8008b0e:	4a41      	ldr	r2, [pc, #260]	; (8008c14 <recvfrom+0x278>)
 8008b10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
 8008b16:	4a41      	ldr	r2, [pc, #260]	; (8008c1c <recvfrom+0x280>)
 8008b18:	2180      	movs	r1, #128	; 0x80
 8008b1a:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	4a3d      	ldr	r2, [pc, #244]	; (8008c14 <recvfrom+0x278>)
 8008b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b24:	89ba      	ldrh	r2, [r7, #12]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d202      	bcs.n	8008b30 <recvfrom+0x194>
 8008b2a:	89bb      	ldrh	r3, [r7, #12]
 8008b2c:	83fb      	strh	r3, [r7, #30]
 8008b2e:	e004      	b.n	8008b3a <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	4a38      	ldr	r2, [pc, #224]	; (8008c14 <recvfrom+0x278>)
 8008b34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b38:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8008b3a:	8bfb      	ldrh	r3, [r7, #30]
 8008b3c:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8008b3e:	8bfa      	ldrh	r2, [r7, #30]
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
 8008b42:	68b9      	ldr	r1, [r7, #8]
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7ff fbcb 	bl	80082e0 <wiz_recv_data>
			break;
 8008b4a:	e0d6      	b.n	8008cfa <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
 8008b4e:	4a31      	ldr	r2, [pc, #196]	; (8008c14 <recvfrom+0x278>)
 8008b50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d146      	bne.n	8008be6 <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8008b58:	f107 0114 	add.w	r1, r7, #20
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	2202      	movs	r2, #2
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7ff fbbd 	bl	80082e0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	00db      	lsls	r3, r3, #3
 8008b6e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008b72:	2140      	movs	r1, #64	; 0x40
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7ff f9b3 	bl	8007ee0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8008b7a:	bf00      	nop
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	3301      	adds	r3, #1
 8008b82:	00db      	lsls	r3, r3, #3
 8008b84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7ff f95d 	bl	8007e48 <WIZCHIP_READ>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d1f3      	bne.n	8008b7c <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8008b94:	7d3a      	ldrb	r2, [r7, #20]
 8008b96:	7bfb      	ldrb	r3, [r7, #15]
 8008b98:	b291      	uxth	r1, r2
 8008b9a:	4a1e      	ldr	r2, [pc, #120]	; (8008c14 <recvfrom+0x278>)
 8008b9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	4a1c      	ldr	r2, [pc, #112]	; (8008c14 <recvfrom+0x278>)
 8008ba4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ba8:	021b      	lsls	r3, r3, #8
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	7d7b      	ldrb	r3, [r7, #21]
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	4413      	add	r3, r2
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
 8008bb6:	3a02      	subs	r2, #2
 8008bb8:	b291      	uxth	r1, r2
 8008bba:	4a16      	ldr	r2, [pc, #88]	; (8008c14 <recvfrom+0x278>)
 8008bbc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
 8008bc2:	4a14      	ldr	r2, [pc, #80]	; (8008c14 <recvfrom+0x278>)
 8008bc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bc8:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d906      	bls.n	8008bde <recvfrom+0x242>
   			{
   			   close(sn);
 8008bd0:	7bfb      	ldrb	r3, [r7, #15]
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7ff fd3e 	bl	8008654 <close>
   			   return SOCKFATAL_PACKLEN;
 8008bd8:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 8008bdc:	e0c4      	b.n	8008d68 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
 8008be0:	4a0e      	ldr	r2, [pc, #56]	; (8008c1c <recvfrom+0x280>)
 8008be2:	2180      	movs	r1, #128	; 0x80
 8008be4:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8008be6:	7bfb      	ldrb	r3, [r7, #15]
 8008be8:	4a0a      	ldr	r2, [pc, #40]	; (8008c14 <recvfrom+0x278>)
 8008bea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bee:	89ba      	ldrh	r2, [r7, #12]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d202      	bcs.n	8008bfa <recvfrom+0x25e>
 8008bf4:	89bb      	ldrh	r3, [r7, #12]
 8008bf6:	83fb      	strh	r3, [r7, #30]
 8008bf8:	e004      	b.n	8008c04 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
 8008bfc:	4a05      	ldr	r2, [pc, #20]	; (8008c14 <recvfrom+0x278>)
 8008bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c02:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8008c04:	8bfa      	ldrh	r2, [r7, #30]
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	68b9      	ldr	r1, [r7, #8]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7ff fb68 	bl	80082e0 <wiz_recv_data>
		   break;
 8008c10:	e073      	b.n	8008cfa <recvfrom+0x35e>
 8008c12:	bf00      	nop
 8008c14:	20000f8c 	.word	0x20000f8c
 8008c18:	20000f88 	.word	0x20000f88
 8008c1c:	20000f9c 	.word	0x20000f9c
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8008c20:	7bfb      	ldrb	r3, [r7, #15]
 8008c22:	4a53      	ldr	r2, [pc, #332]	; (8008d70 <recvfrom+0x3d4>)
 8008c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d144      	bne.n	8008cb6 <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8008c2c:	f107 0114 	add.w	r1, r7, #20
 8008c30:	7bfb      	ldrb	r3, [r7, #15]
 8008c32:	2206      	movs	r2, #6
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7ff fb53 	bl	80082e0 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8008c3a:	7bfb      	ldrb	r3, [r7, #15]
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	3301      	adds	r3, #1
 8008c40:	00db      	lsls	r3, r3, #3
 8008c42:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008c46:	2140      	movs	r1, #64	; 0x40
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7ff f949 	bl	8007ee0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8008c4e:	bf00      	nop
 8008c50:	7bfb      	ldrb	r3, [r7, #15]
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	3301      	adds	r3, #1
 8008c56:	00db      	lsls	r3, r3, #3
 8008c58:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7ff f8f3 	bl	8007e48 <WIZCHIP_READ>
 8008c62:	4603      	mov	r3, r0
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1f3      	bne.n	8008c50 <recvfrom+0x2b4>
   			addr[0] = head[0];
 8008c68:	7d3a      	ldrb	r2, [r7, #20]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	3301      	adds	r3, #1
 8008c72:	7d7a      	ldrb	r2, [r7, #21]
 8008c74:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	3302      	adds	r3, #2
 8008c7a:	7dba      	ldrb	r2, [r7, #22]
 8008c7c:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	3303      	adds	r3, #3
 8008c82:	7dfa      	ldrb	r2, [r7, #23]
 8008c84:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8008c86:	7e3a      	ldrb	r2, [r7, #24]
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
 8008c8a:	b291      	uxth	r1, r2
 8008c8c:	4a38      	ldr	r2, [pc, #224]	; (8008d70 <recvfrom+0x3d4>)
 8008c8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8008c92:	7bfb      	ldrb	r3, [r7, #15]
 8008c94:	4a36      	ldr	r2, [pc, #216]	; (8008d70 <recvfrom+0x3d4>)
 8008c96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c9a:	021b      	lsls	r3, r3, #8
 8008c9c:	b299      	uxth	r1, r3
 8008c9e:	7e7b      	ldrb	r3, [r7, #25]
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	7bfb      	ldrb	r3, [r7, #15]
 8008ca4:	440a      	add	r2, r1
 8008ca6:	b291      	uxth	r1, r2
 8008ca8:	4a31      	ldr	r2, [pc, #196]	; (8008d70 <recvfrom+0x3d4>)
 8008caa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
 8008cb0:	4a30      	ldr	r2, [pc, #192]	; (8008d74 <recvfrom+0x3d8>)
 8008cb2:	2180      	movs	r1, #128	; 0x80
 8008cb4:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8008cb6:	7bfb      	ldrb	r3, [r7, #15]
 8008cb8:	4a2d      	ldr	r2, [pc, #180]	; (8008d70 <recvfrom+0x3d4>)
 8008cba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cbe:	89ba      	ldrh	r2, [r7, #12]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d202      	bcs.n	8008cca <recvfrom+0x32e>
 8008cc4:	89bb      	ldrh	r3, [r7, #12]
 8008cc6:	83fb      	strh	r3, [r7, #30]
 8008cc8:	e004      	b.n	8008cd4 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 8008cca:	7bfb      	ldrb	r3, [r7, #15]
 8008ccc:	4a28      	ldr	r2, [pc, #160]	; (8008d70 <recvfrom+0x3d4>)
 8008cce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cd2:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8008cd4:	8bfa      	ldrh	r2, [r7, #30]
 8008cd6:	7bfb      	ldrb	r3, [r7, #15]
 8008cd8:	68b9      	ldr	r1, [r7, #8]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7ff fb00 	bl	80082e0 <wiz_recv_data>
			break;
 8008ce0:	e00b      	b.n	8008cfa <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8008ce2:	8bfa      	ldrh	r2, [r7, #30]
 8008ce4:	7bfb      	ldrb	r3, [r7, #15]
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f7ff fb55 	bl	8008398 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8008cee:	7bfb      	ldrb	r3, [r7, #15]
 8008cf0:	491f      	ldr	r1, [pc, #124]	; (8008d70 <recvfrom+0x3d4>)
 8008cf2:	8bfa      	ldrh	r2, [r7, #30]
 8008cf4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8008cf8:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8008cfa:	7bfb      	ldrb	r3, [r7, #15]
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	3301      	adds	r3, #1
 8008d00:	00db      	lsls	r3, r3, #3
 8008d02:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008d06:	2140      	movs	r1, #64	; 0x40
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7ff f8e9 	bl	8007ee0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8008d0e:	bf00      	nop
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	3301      	adds	r3, #1
 8008d16:	00db      	lsls	r3, r3, #3
 8008d18:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7ff f893 	bl	8007e48 <WIZCHIP_READ>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d1f3      	bne.n	8008d10 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
 8008d2a:	4a11      	ldr	r2, [pc, #68]	; (8008d70 <recvfrom+0x3d4>)
 8008d2c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8008d30:	7bfb      	ldrb	r3, [r7, #15]
 8008d32:	8bfa      	ldrh	r2, [r7, #30]
 8008d34:	1a8a      	subs	r2, r1, r2
 8008d36:	b291      	uxth	r1, r2
 8008d38:	4a0d      	ldr	r2, [pc, #52]	; (8008d70 <recvfrom+0x3d4>)
 8008d3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
 8008d40:	4a0b      	ldr	r2, [pc, #44]	; (8008d70 <recvfrom+0x3d4>)
 8008d42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d009      	beq.n	8008d5e <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8008d4a:	7bfb      	ldrb	r3, [r7, #15]
 8008d4c:	4a09      	ldr	r2, [pc, #36]	; (8008d74 <recvfrom+0x3d8>)
 8008d4e:	5cd2      	ldrb	r2, [r2, r3]
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
 8008d52:	f042 0201 	orr.w	r2, r2, #1
 8008d56:	b2d1      	uxtb	r1, r2
 8008d58:	4a06      	ldr	r2, [pc, #24]	; (8008d74 <recvfrom+0x3d8>)
 8008d5a:	54d1      	strb	r1, [r2, r3]
 8008d5c:	e003      	b.n	8008d66 <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
 8008d60:	4a04      	ldr	r2, [pc, #16]	; (8008d74 <recvfrom+0x3d8>)
 8008d62:	2100      	movs	r1, #0
 8008d64:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8008d66:	8bfb      	ldrh	r3, [r7, #30]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3720      	adds	r7, #32
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	20000f8c 	.word	0x20000f8c
 8008d74:	20000f9c 	.word	0x20000f9c

08008d78 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8008d78:	b480      	push	{r7}
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	bf00      	nop
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr

08008d86 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8008d86:	b480      	push	{r7}
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	bf00      	nop
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8008d94:	b480      	push	{r7}
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	bf00      	nop
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8008da2:	b480      	push	{r7}
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	bf00      	nop
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8008dca:	b480      	push	{r7}
 8008dcc:	b083      	sub	sp, #12
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	70fb      	strb	r3, [r7, #3]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	78fa      	ldrb	r2, [r7, #3]
 8008dda:	701a      	strb	r2, [r3, #0]
 8008ddc:	bf00      	nop
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8008de8:	b480      	push	{r7}
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	2300      	movs	r3, #0
 8008dee:	4618      	mov	r0, r3
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	4603      	mov	r3, r0
 8008e00:	71fb      	strb	r3, [r7, #7]
 8008e02:	bf00      	nop
 8008e04:	370c      	adds	r7, #12
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8008e0e:	b480      	push	{r7}
 8008e10:	b083      	sub	sp, #12
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
 8008e16:	460b      	mov	r3, r1
 8008e18:	807b      	strh	r3, [r7, #2]
 8008e1a:	bf00      	nop
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr

08008e26 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8008e26:	b480      	push	{r7}
 8008e28:	b083      	sub	sp, #12
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	460b      	mov	r3, r1
 8008e30:	807b      	strh	r3, [r7, #2]
 8008e32:	bf00      	nop
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
	...

08008e40 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d002      	beq.n	8008e56 <reg_wizchip_cs_cbfunc+0x16>
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d106      	bne.n	8008e64 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8008e56:	4b0a      	ldr	r3, [pc, #40]	; (8008e80 <reg_wizchip_cs_cbfunc+0x40>)
 8008e58:	4a0a      	ldr	r2, [pc, #40]	; (8008e84 <reg_wizchip_cs_cbfunc+0x44>)
 8008e5a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8008e5c:	4b08      	ldr	r3, [pc, #32]	; (8008e80 <reg_wizchip_cs_cbfunc+0x40>)
 8008e5e:	4a0a      	ldr	r2, [pc, #40]	; (8008e88 <reg_wizchip_cs_cbfunc+0x48>)
 8008e60:	619a      	str	r2, [r3, #24]
 8008e62:	e006      	b.n	8008e72 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8008e64:	4a06      	ldr	r2, [pc, #24]	; (8008e80 <reg_wizchip_cs_cbfunc+0x40>)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8008e6a:	4a05      	ldr	r2, [pc, #20]	; (8008e80 <reg_wizchip_cs_cbfunc+0x40>)
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	6193      	str	r3, [r2, #24]
   }
}
 8008e70:	bf00      	nop
 8008e72:	bf00      	nop
 8008e74:	370c      	adds	r7, #12
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	20000088 	.word	0x20000088
 8008e84:	08008d95 	.word	0x08008d95
 8008e88:	08008da3 	.word	0x08008da3

08008e8c <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8008e96:	bf00      	nop
 8008e98:	4b0f      	ldr	r3, [pc, #60]	; (8008ed8 <reg_wizchip_spi_cbfunc+0x4c>)
 8008e9a:	881b      	ldrh	r3, [r3, #0]
 8008e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d0f9      	beq.n	8008e98 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d002      	beq.n	8008eb0 <reg_wizchip_spi_cbfunc+0x24>
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d106      	bne.n	8008ebe <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8008eb0:	4b09      	ldr	r3, [pc, #36]	; (8008ed8 <reg_wizchip_spi_cbfunc+0x4c>)
 8008eb2:	4a0a      	ldr	r2, [pc, #40]	; (8008edc <reg_wizchip_spi_cbfunc+0x50>)
 8008eb4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8008eb6:	4b08      	ldr	r3, [pc, #32]	; (8008ed8 <reg_wizchip_spi_cbfunc+0x4c>)
 8008eb8:	4a09      	ldr	r2, [pc, #36]	; (8008ee0 <reg_wizchip_spi_cbfunc+0x54>)
 8008eba:	621a      	str	r2, [r3, #32]
 8008ebc:	e006      	b.n	8008ecc <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8008ebe:	4a06      	ldr	r2, [pc, #24]	; (8008ed8 <reg_wizchip_spi_cbfunc+0x4c>)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8008ec4:	4a04      	ldr	r2, [pc, #16]	; (8008ed8 <reg_wizchip_spi_cbfunc+0x4c>)
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	6213      	str	r3, [r2, #32]
   }
}
 8008eca:	bf00      	nop
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr
 8008ed8:	20000088 	.word	0x20000088
 8008edc:	08008de9 	.word	0x08008de9
 8008ee0:	08008df9 	.word	0x08008df9

08008ee4 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8008eee:	bf00      	nop
 8008ef0:	4b0f      	ldr	r3, [pc, #60]	; (8008f30 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8008ef2:	881b      	ldrh	r3, [r3, #0]
 8008ef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d0f9      	beq.n	8008ef0 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d002      	beq.n	8008f08 <reg_wizchip_spiburst_cbfunc+0x24>
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d106      	bne.n	8008f16 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8008f08:	4b09      	ldr	r3, [pc, #36]	; (8008f30 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8008f0a:	4a0a      	ldr	r2, [pc, #40]	; (8008f34 <reg_wizchip_spiburst_cbfunc+0x50>)
 8008f0c:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8008f0e:	4b08      	ldr	r3, [pc, #32]	; (8008f30 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8008f10:	4a09      	ldr	r2, [pc, #36]	; (8008f38 <reg_wizchip_spiburst_cbfunc+0x54>)
 8008f12:	629a      	str	r2, [r3, #40]	; 0x28
 8008f14:	e006      	b.n	8008f24 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8008f16:	4a06      	ldr	r2, [pc, #24]	; (8008f30 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8008f1c:	4a04      	ldr	r2, [pc, #16]	; (8008f30 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8008f22:	bf00      	nop
 8008f24:	bf00      	nop
 8008f26:	370c      	adds	r7, #12
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr
 8008f30:	20000088 	.word	0x20000088
 8008f34:	08008e0f 	.word	0x08008e0f
 8008f38:	08008e27 	.word	0x08008e27

08008f3c <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b086      	sub	sp, #24
 8008f40:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8008f42:	1d3b      	adds	r3, r7, #4
 8008f44:	2206      	movs	r2, #6
 8008f46:	4619      	mov	r1, r3
 8008f48:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8008f4c:	f7ff f816 	bl	8007f7c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8008f50:	f107 0314 	add.w	r3, r7, #20
 8008f54:	2204      	movs	r2, #4
 8008f56:	4619      	mov	r1, r3
 8008f58:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008f5c:	f7ff f80e 	bl	8007f7c <WIZCHIP_READ_BUF>
 8008f60:	f107 0310 	add.w	r3, r7, #16
 8008f64:	2204      	movs	r2, #4
 8008f66:	4619      	mov	r1, r3
 8008f68:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8008f6c:	f7ff f806 	bl	8007f7c <WIZCHIP_READ_BUF>
 8008f70:	f107 030c 	add.w	r3, r7, #12
 8008f74:	2204      	movs	r2, #4
 8008f76:	4619      	mov	r1, r3
 8008f78:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8008f7c:	f7fe fffe 	bl	8007f7c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8008f80:	2180      	movs	r1, #128	; 0x80
 8008f82:	2000      	movs	r0, #0
 8008f84:	f7fe ffac 	bl	8007ee0 <WIZCHIP_WRITE>
   getMR(); // for delay
 8008f88:	2000      	movs	r0, #0
 8008f8a:	f7fe ff5d 	bl	8007e48 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8008f8e:	1d3b      	adds	r3, r7, #4
 8008f90:	2206      	movs	r2, #6
 8008f92:	4619      	mov	r1, r3
 8008f94:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8008f98:	f7ff f850 	bl	800803c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8008f9c:	f107 0314 	add.w	r3, r7, #20
 8008fa0:	2204      	movs	r2, #4
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008fa8:	f7ff f848 	bl	800803c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8008fac:	f107 0310 	add.w	r3, r7, #16
 8008fb0:	2204      	movs	r2, #4
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8008fb8:	f7ff f840 	bl	800803c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8008fbc:	f107 030c 	add.w	r3, r7, #12
 8008fc0:	2204      	movs	r2, #4
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8008fc8:	f7ff f838 	bl	800803c <WIZCHIP_WRITE_BUF>
}
 8008fcc:	bf00      	nop
 8008fce:	3718      	adds	r7, #24
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8008fe2:	f7ff ffab 	bl	8008f3c <wizchip_sw_reset>
   if(txsize)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d03b      	beq.n	8009064 <wizchip_init+0x90>
   {
      tmp = 0;
 8008fec:	2300      	movs	r3, #0
 8008fee:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	73fb      	strb	r3, [r7, #15]
 8008ff4:	e015      	b.n	8009022 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8008ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	781a      	ldrb	r2, [r3, #0]
 8009000:	7bbb      	ldrb	r3, [r7, #14]
 8009002:	4413      	add	r3, r2
 8009004:	b2db      	uxtb	r3, r3
 8009006:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8009008:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800900c:	2b10      	cmp	r3, #16
 800900e:	dd02      	ble.n	8009016 <wizchip_init+0x42>
 8009010:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009014:	e066      	b.n	80090e4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800901a:	b2db      	uxtb	r3, r3
 800901c:	3301      	adds	r3, #1
 800901e:	b2db      	uxtb	r3, r3
 8009020:	73fb      	strb	r3, [r7, #15]
 8009022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009026:	2b07      	cmp	r3, #7
 8009028:	dde5      	ble.n	8008ff6 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800902a:	2300      	movs	r3, #0
 800902c:	73fb      	strb	r3, [r7, #15]
 800902e:	e015      	b.n	800905c <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8009030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	3301      	adds	r3, #1
 8009038:	00db      	lsls	r3, r3, #3
 800903a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800903e:	4618      	mov	r0, r3
 8009040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	4413      	add	r3, r2
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	4619      	mov	r1, r3
 800904c:	f7fe ff48 	bl	8007ee0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009054:	b2db      	uxtb	r3, r3
 8009056:	3301      	adds	r3, #1
 8009058:	b2db      	uxtb	r3, r3
 800905a:	73fb      	strb	r3, [r7, #15]
 800905c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009060:	2b07      	cmp	r3, #7
 8009062:	dde5      	ble.n	8009030 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d03b      	beq.n	80090e2 <wizchip_init+0x10e>
   {
      tmp = 0;
 800906a:	2300      	movs	r3, #0
 800906c:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800906e:	2300      	movs	r3, #0
 8009070:	73fb      	strb	r3, [r7, #15]
 8009072:	e015      	b.n	80090a0 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8009074:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009078:	683a      	ldr	r2, [r7, #0]
 800907a:	4413      	add	r3, r2
 800907c:	781a      	ldrb	r2, [r3, #0]
 800907e:	7bbb      	ldrb	r3, [r7, #14]
 8009080:	4413      	add	r3, r2
 8009082:	b2db      	uxtb	r3, r3
 8009084:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8009086:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800908a:	2b10      	cmp	r3, #16
 800908c:	dd02      	ble.n	8009094 <wizchip_init+0xc0>
 800908e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009092:	e027      	b.n	80090e4 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009098:	b2db      	uxtb	r3, r3
 800909a:	3301      	adds	r3, #1
 800909c:	b2db      	uxtb	r3, r3
 800909e:	73fb      	strb	r3, [r7, #15]
 80090a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090a4:	2b07      	cmp	r3, #7
 80090a6:	dde5      	ble.n	8009074 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80090a8:	2300      	movs	r3, #0
 80090aa:	73fb      	strb	r3, [r7, #15]
 80090ac:	e015      	b.n	80090da <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80090ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	3301      	adds	r3, #1
 80090b6:	00db      	lsls	r3, r3, #3
 80090b8:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80090bc:	4618      	mov	r0, r3
 80090be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090c2:	683a      	ldr	r2, [r7, #0]
 80090c4:	4413      	add	r3, r2
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	4619      	mov	r1, r3
 80090ca:	f7fe ff09 	bl	8007ee0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80090ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	3301      	adds	r3, #1
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	73fb      	strb	r3, [r7, #15]
 80090da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090de:	2b07      	cmp	r3, #7
 80090e0:	dde5      	ble.n	80090ae <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2206      	movs	r2, #6
 80090f8:	4619      	mov	r1, r3
 80090fa:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80090fe:	f7fe ff9d 	bl	800803c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	330e      	adds	r3, #14
 8009106:	2204      	movs	r2, #4
 8009108:	4619      	mov	r1, r3
 800910a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800910e:	f7fe ff95 	bl	800803c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	330a      	adds	r3, #10
 8009116:	2204      	movs	r2, #4
 8009118:	4619      	mov	r1, r3
 800911a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800911e:	f7fe ff8d 	bl	800803c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	3306      	adds	r3, #6
 8009126:	2204      	movs	r2, #4
 8009128:	4619      	mov	r1, r3
 800912a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800912e:	f7fe ff85 	bl	800803c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	7c9a      	ldrb	r2, [r3, #18]
 8009136:	4b0b      	ldr	r3, [pc, #44]	; (8009164 <wizchip_setnetinfo+0x78>)
 8009138:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	7cda      	ldrb	r2, [r3, #19]
 800913e:	4b09      	ldr	r3, [pc, #36]	; (8009164 <wizchip_setnetinfo+0x78>)
 8009140:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	7d1a      	ldrb	r2, [r3, #20]
 8009146:	4b07      	ldr	r3, [pc, #28]	; (8009164 <wizchip_setnetinfo+0x78>)
 8009148:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	7d5a      	ldrb	r2, [r3, #21]
 800914e:	4b05      	ldr	r3, [pc, #20]	; (8009164 <wizchip_setnetinfo+0x78>)
 8009150:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	7d9a      	ldrb	r2, [r3, #22]
 8009156:	4b04      	ldr	r3, [pc, #16]	; (8009168 <wizchip_setnetinfo+0x7c>)
 8009158:	701a      	strb	r2, [r3, #0]
}
 800915a:	bf00      	nop
 800915c:	3708      	adds	r7, #8
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	20000fa4 	.word	0x20000fa4
 8009168:	20000fa8 	.word	0x20000fa8

0800916c <atoff>:
 800916c:	2100      	movs	r1, #0
 800916e:	f001 bc45 	b.w	800a9fc <strtof>

08009172 <atoi>:
 8009172:	220a      	movs	r2, #10
 8009174:	2100      	movs	r1, #0
 8009176:	f001 bd1f 	b.w	800abb8 <strtol>

0800917a <atoll>:
 800917a:	220a      	movs	r2, #10
 800917c:	2100      	movs	r1, #0
 800917e:	f001 bdbb 	b.w	800acf8 <strtoll>
	...

08009184 <__errno>:
 8009184:	4b01      	ldr	r3, [pc, #4]	; (800918c <__errno+0x8>)
 8009186:	6818      	ldr	r0, [r3, #0]
 8009188:	4770      	bx	lr
 800918a:	bf00      	nop
 800918c:	200000b4 	.word	0x200000b4

08009190 <__libc_init_array>:
 8009190:	b570      	push	{r4, r5, r6, lr}
 8009192:	4d0d      	ldr	r5, [pc, #52]	; (80091c8 <__libc_init_array+0x38>)
 8009194:	4c0d      	ldr	r4, [pc, #52]	; (80091cc <__libc_init_array+0x3c>)
 8009196:	1b64      	subs	r4, r4, r5
 8009198:	10a4      	asrs	r4, r4, #2
 800919a:	2600      	movs	r6, #0
 800919c:	42a6      	cmp	r6, r4
 800919e:	d109      	bne.n	80091b4 <__libc_init_array+0x24>
 80091a0:	4d0b      	ldr	r5, [pc, #44]	; (80091d0 <__libc_init_array+0x40>)
 80091a2:	4c0c      	ldr	r4, [pc, #48]	; (80091d4 <__libc_init_array+0x44>)
 80091a4:	f004 fb7e 	bl	800d8a4 <_init>
 80091a8:	1b64      	subs	r4, r4, r5
 80091aa:	10a4      	asrs	r4, r4, #2
 80091ac:	2600      	movs	r6, #0
 80091ae:	42a6      	cmp	r6, r4
 80091b0:	d105      	bne.n	80091be <__libc_init_array+0x2e>
 80091b2:	bd70      	pop	{r4, r5, r6, pc}
 80091b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80091b8:	4798      	blx	r3
 80091ba:	3601      	adds	r6, #1
 80091bc:	e7ee      	b.n	800919c <__libc_init_array+0xc>
 80091be:	f855 3b04 	ldr.w	r3, [r5], #4
 80091c2:	4798      	blx	r3
 80091c4:	3601      	adds	r6, #1
 80091c6:	e7f2      	b.n	80091ae <__libc_init_array+0x1e>
 80091c8:	0800e450 	.word	0x0800e450
 80091cc:	0800e450 	.word	0x0800e450
 80091d0:	0800e450 	.word	0x0800e450
 80091d4:	0800e454 	.word	0x0800e454

080091d8 <malloc>:
 80091d8:	4b02      	ldr	r3, [pc, #8]	; (80091e4 <malloc+0xc>)
 80091da:	4601      	mov	r1, r0
 80091dc:	6818      	ldr	r0, [r3, #0]
 80091de:	f000 b885 	b.w	80092ec <_malloc_r>
 80091e2:	bf00      	nop
 80091e4:	200000b4 	.word	0x200000b4

080091e8 <memcpy>:
 80091e8:	440a      	add	r2, r1
 80091ea:	4291      	cmp	r1, r2
 80091ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80091f0:	d100      	bne.n	80091f4 <memcpy+0xc>
 80091f2:	4770      	bx	lr
 80091f4:	b510      	push	{r4, lr}
 80091f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091fe:	4291      	cmp	r1, r2
 8009200:	d1f9      	bne.n	80091f6 <memcpy+0xe>
 8009202:	bd10      	pop	{r4, pc}

08009204 <memset>:
 8009204:	4402      	add	r2, r0
 8009206:	4603      	mov	r3, r0
 8009208:	4293      	cmp	r3, r2
 800920a:	d100      	bne.n	800920e <memset+0xa>
 800920c:	4770      	bx	lr
 800920e:	f803 1b01 	strb.w	r1, [r3], #1
 8009212:	e7f9      	b.n	8009208 <memset+0x4>

08009214 <_free_r>:
 8009214:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009216:	2900      	cmp	r1, #0
 8009218:	d044      	beq.n	80092a4 <_free_r+0x90>
 800921a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800921e:	9001      	str	r0, [sp, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	f1a1 0404 	sub.w	r4, r1, #4
 8009226:	bfb8      	it	lt
 8009228:	18e4      	addlt	r4, r4, r3
 800922a:	f003 fab5 	bl	800c798 <__malloc_lock>
 800922e:	4a1e      	ldr	r2, [pc, #120]	; (80092a8 <_free_r+0x94>)
 8009230:	9801      	ldr	r0, [sp, #4]
 8009232:	6813      	ldr	r3, [r2, #0]
 8009234:	b933      	cbnz	r3, 8009244 <_free_r+0x30>
 8009236:	6063      	str	r3, [r4, #4]
 8009238:	6014      	str	r4, [r2, #0]
 800923a:	b003      	add	sp, #12
 800923c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009240:	f003 bab0 	b.w	800c7a4 <__malloc_unlock>
 8009244:	42a3      	cmp	r3, r4
 8009246:	d908      	bls.n	800925a <_free_r+0x46>
 8009248:	6825      	ldr	r5, [r4, #0]
 800924a:	1961      	adds	r1, r4, r5
 800924c:	428b      	cmp	r3, r1
 800924e:	bf01      	itttt	eq
 8009250:	6819      	ldreq	r1, [r3, #0]
 8009252:	685b      	ldreq	r3, [r3, #4]
 8009254:	1949      	addeq	r1, r1, r5
 8009256:	6021      	streq	r1, [r4, #0]
 8009258:	e7ed      	b.n	8009236 <_free_r+0x22>
 800925a:	461a      	mov	r2, r3
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	b10b      	cbz	r3, 8009264 <_free_r+0x50>
 8009260:	42a3      	cmp	r3, r4
 8009262:	d9fa      	bls.n	800925a <_free_r+0x46>
 8009264:	6811      	ldr	r1, [r2, #0]
 8009266:	1855      	adds	r5, r2, r1
 8009268:	42a5      	cmp	r5, r4
 800926a:	d10b      	bne.n	8009284 <_free_r+0x70>
 800926c:	6824      	ldr	r4, [r4, #0]
 800926e:	4421      	add	r1, r4
 8009270:	1854      	adds	r4, r2, r1
 8009272:	42a3      	cmp	r3, r4
 8009274:	6011      	str	r1, [r2, #0]
 8009276:	d1e0      	bne.n	800923a <_free_r+0x26>
 8009278:	681c      	ldr	r4, [r3, #0]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	6053      	str	r3, [r2, #4]
 800927e:	4421      	add	r1, r4
 8009280:	6011      	str	r1, [r2, #0]
 8009282:	e7da      	b.n	800923a <_free_r+0x26>
 8009284:	d902      	bls.n	800928c <_free_r+0x78>
 8009286:	230c      	movs	r3, #12
 8009288:	6003      	str	r3, [r0, #0]
 800928a:	e7d6      	b.n	800923a <_free_r+0x26>
 800928c:	6825      	ldr	r5, [r4, #0]
 800928e:	1961      	adds	r1, r4, r5
 8009290:	428b      	cmp	r3, r1
 8009292:	bf04      	itt	eq
 8009294:	6819      	ldreq	r1, [r3, #0]
 8009296:	685b      	ldreq	r3, [r3, #4]
 8009298:	6063      	str	r3, [r4, #4]
 800929a:	bf04      	itt	eq
 800929c:	1949      	addeq	r1, r1, r5
 800929e:	6021      	streq	r1, [r4, #0]
 80092a0:	6054      	str	r4, [r2, #4]
 80092a2:	e7ca      	b.n	800923a <_free_r+0x26>
 80092a4:	b003      	add	sp, #12
 80092a6:	bd30      	pop	{r4, r5, pc}
 80092a8:	20000fac 	.word	0x20000fac

080092ac <sbrk_aligned>:
 80092ac:	b570      	push	{r4, r5, r6, lr}
 80092ae:	4e0e      	ldr	r6, [pc, #56]	; (80092e8 <sbrk_aligned+0x3c>)
 80092b0:	460c      	mov	r4, r1
 80092b2:	6831      	ldr	r1, [r6, #0]
 80092b4:	4605      	mov	r5, r0
 80092b6:	b911      	cbnz	r1, 80092be <sbrk_aligned+0x12>
 80092b8:	f000 fcf6 	bl	8009ca8 <_sbrk_r>
 80092bc:	6030      	str	r0, [r6, #0]
 80092be:	4621      	mov	r1, r4
 80092c0:	4628      	mov	r0, r5
 80092c2:	f000 fcf1 	bl	8009ca8 <_sbrk_r>
 80092c6:	1c43      	adds	r3, r0, #1
 80092c8:	d00a      	beq.n	80092e0 <sbrk_aligned+0x34>
 80092ca:	1cc4      	adds	r4, r0, #3
 80092cc:	f024 0403 	bic.w	r4, r4, #3
 80092d0:	42a0      	cmp	r0, r4
 80092d2:	d007      	beq.n	80092e4 <sbrk_aligned+0x38>
 80092d4:	1a21      	subs	r1, r4, r0
 80092d6:	4628      	mov	r0, r5
 80092d8:	f000 fce6 	bl	8009ca8 <_sbrk_r>
 80092dc:	3001      	adds	r0, #1
 80092de:	d101      	bne.n	80092e4 <sbrk_aligned+0x38>
 80092e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80092e4:	4620      	mov	r0, r4
 80092e6:	bd70      	pop	{r4, r5, r6, pc}
 80092e8:	20000fb0 	.word	0x20000fb0

080092ec <_malloc_r>:
 80092ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f0:	1ccd      	adds	r5, r1, #3
 80092f2:	f025 0503 	bic.w	r5, r5, #3
 80092f6:	3508      	adds	r5, #8
 80092f8:	2d0c      	cmp	r5, #12
 80092fa:	bf38      	it	cc
 80092fc:	250c      	movcc	r5, #12
 80092fe:	2d00      	cmp	r5, #0
 8009300:	4607      	mov	r7, r0
 8009302:	db01      	blt.n	8009308 <_malloc_r+0x1c>
 8009304:	42a9      	cmp	r1, r5
 8009306:	d905      	bls.n	8009314 <_malloc_r+0x28>
 8009308:	230c      	movs	r3, #12
 800930a:	603b      	str	r3, [r7, #0]
 800930c:	2600      	movs	r6, #0
 800930e:	4630      	mov	r0, r6
 8009310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009314:	4e2e      	ldr	r6, [pc, #184]	; (80093d0 <_malloc_r+0xe4>)
 8009316:	f003 fa3f 	bl	800c798 <__malloc_lock>
 800931a:	6833      	ldr	r3, [r6, #0]
 800931c:	461c      	mov	r4, r3
 800931e:	bb34      	cbnz	r4, 800936e <_malloc_r+0x82>
 8009320:	4629      	mov	r1, r5
 8009322:	4638      	mov	r0, r7
 8009324:	f7ff ffc2 	bl	80092ac <sbrk_aligned>
 8009328:	1c43      	adds	r3, r0, #1
 800932a:	4604      	mov	r4, r0
 800932c:	d14d      	bne.n	80093ca <_malloc_r+0xde>
 800932e:	6834      	ldr	r4, [r6, #0]
 8009330:	4626      	mov	r6, r4
 8009332:	2e00      	cmp	r6, #0
 8009334:	d140      	bne.n	80093b8 <_malloc_r+0xcc>
 8009336:	6823      	ldr	r3, [r4, #0]
 8009338:	4631      	mov	r1, r6
 800933a:	4638      	mov	r0, r7
 800933c:	eb04 0803 	add.w	r8, r4, r3
 8009340:	f000 fcb2 	bl	8009ca8 <_sbrk_r>
 8009344:	4580      	cmp	r8, r0
 8009346:	d13a      	bne.n	80093be <_malloc_r+0xd2>
 8009348:	6821      	ldr	r1, [r4, #0]
 800934a:	3503      	adds	r5, #3
 800934c:	1a6d      	subs	r5, r5, r1
 800934e:	f025 0503 	bic.w	r5, r5, #3
 8009352:	3508      	adds	r5, #8
 8009354:	2d0c      	cmp	r5, #12
 8009356:	bf38      	it	cc
 8009358:	250c      	movcc	r5, #12
 800935a:	4629      	mov	r1, r5
 800935c:	4638      	mov	r0, r7
 800935e:	f7ff ffa5 	bl	80092ac <sbrk_aligned>
 8009362:	3001      	adds	r0, #1
 8009364:	d02b      	beq.n	80093be <_malloc_r+0xd2>
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	442b      	add	r3, r5
 800936a:	6023      	str	r3, [r4, #0]
 800936c:	e00e      	b.n	800938c <_malloc_r+0xa0>
 800936e:	6822      	ldr	r2, [r4, #0]
 8009370:	1b52      	subs	r2, r2, r5
 8009372:	d41e      	bmi.n	80093b2 <_malloc_r+0xc6>
 8009374:	2a0b      	cmp	r2, #11
 8009376:	d916      	bls.n	80093a6 <_malloc_r+0xba>
 8009378:	1961      	adds	r1, r4, r5
 800937a:	42a3      	cmp	r3, r4
 800937c:	6025      	str	r5, [r4, #0]
 800937e:	bf18      	it	ne
 8009380:	6059      	strne	r1, [r3, #4]
 8009382:	6863      	ldr	r3, [r4, #4]
 8009384:	bf08      	it	eq
 8009386:	6031      	streq	r1, [r6, #0]
 8009388:	5162      	str	r2, [r4, r5]
 800938a:	604b      	str	r3, [r1, #4]
 800938c:	4638      	mov	r0, r7
 800938e:	f104 060b 	add.w	r6, r4, #11
 8009392:	f003 fa07 	bl	800c7a4 <__malloc_unlock>
 8009396:	f026 0607 	bic.w	r6, r6, #7
 800939a:	1d23      	adds	r3, r4, #4
 800939c:	1af2      	subs	r2, r6, r3
 800939e:	d0b6      	beq.n	800930e <_malloc_r+0x22>
 80093a0:	1b9b      	subs	r3, r3, r6
 80093a2:	50a3      	str	r3, [r4, r2]
 80093a4:	e7b3      	b.n	800930e <_malloc_r+0x22>
 80093a6:	6862      	ldr	r2, [r4, #4]
 80093a8:	42a3      	cmp	r3, r4
 80093aa:	bf0c      	ite	eq
 80093ac:	6032      	streq	r2, [r6, #0]
 80093ae:	605a      	strne	r2, [r3, #4]
 80093b0:	e7ec      	b.n	800938c <_malloc_r+0xa0>
 80093b2:	4623      	mov	r3, r4
 80093b4:	6864      	ldr	r4, [r4, #4]
 80093b6:	e7b2      	b.n	800931e <_malloc_r+0x32>
 80093b8:	4634      	mov	r4, r6
 80093ba:	6876      	ldr	r6, [r6, #4]
 80093bc:	e7b9      	b.n	8009332 <_malloc_r+0x46>
 80093be:	230c      	movs	r3, #12
 80093c0:	603b      	str	r3, [r7, #0]
 80093c2:	4638      	mov	r0, r7
 80093c4:	f003 f9ee 	bl	800c7a4 <__malloc_unlock>
 80093c8:	e7a1      	b.n	800930e <_malloc_r+0x22>
 80093ca:	6025      	str	r5, [r4, #0]
 80093cc:	e7de      	b.n	800938c <_malloc_r+0xa0>
 80093ce:	bf00      	nop
 80093d0:	20000fac 	.word	0x20000fac

080093d4 <__cvt>:
 80093d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093d8:	ec55 4b10 	vmov	r4, r5, d0
 80093dc:	2d00      	cmp	r5, #0
 80093de:	460e      	mov	r6, r1
 80093e0:	4619      	mov	r1, r3
 80093e2:	462b      	mov	r3, r5
 80093e4:	bfbb      	ittet	lt
 80093e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80093ea:	461d      	movlt	r5, r3
 80093ec:	2300      	movge	r3, #0
 80093ee:	232d      	movlt	r3, #45	; 0x2d
 80093f0:	700b      	strb	r3, [r1, #0]
 80093f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80093f8:	4691      	mov	r9, r2
 80093fa:	f023 0820 	bic.w	r8, r3, #32
 80093fe:	bfbc      	itt	lt
 8009400:	4622      	movlt	r2, r4
 8009402:	4614      	movlt	r4, r2
 8009404:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009408:	d005      	beq.n	8009416 <__cvt+0x42>
 800940a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800940e:	d100      	bne.n	8009412 <__cvt+0x3e>
 8009410:	3601      	adds	r6, #1
 8009412:	2102      	movs	r1, #2
 8009414:	e000      	b.n	8009418 <__cvt+0x44>
 8009416:	2103      	movs	r1, #3
 8009418:	ab03      	add	r3, sp, #12
 800941a:	9301      	str	r3, [sp, #4]
 800941c:	ab02      	add	r3, sp, #8
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	ec45 4b10 	vmov	d0, r4, r5
 8009424:	4653      	mov	r3, sl
 8009426:	4632      	mov	r2, r6
 8009428:	f001 fdfe 	bl	800b028 <_dtoa_r>
 800942c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009430:	4607      	mov	r7, r0
 8009432:	d102      	bne.n	800943a <__cvt+0x66>
 8009434:	f019 0f01 	tst.w	r9, #1
 8009438:	d022      	beq.n	8009480 <__cvt+0xac>
 800943a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800943e:	eb07 0906 	add.w	r9, r7, r6
 8009442:	d110      	bne.n	8009466 <__cvt+0x92>
 8009444:	783b      	ldrb	r3, [r7, #0]
 8009446:	2b30      	cmp	r3, #48	; 0x30
 8009448:	d10a      	bne.n	8009460 <__cvt+0x8c>
 800944a:	2200      	movs	r2, #0
 800944c:	2300      	movs	r3, #0
 800944e:	4620      	mov	r0, r4
 8009450:	4629      	mov	r1, r5
 8009452:	f7f7 fb41 	bl	8000ad8 <__aeabi_dcmpeq>
 8009456:	b918      	cbnz	r0, 8009460 <__cvt+0x8c>
 8009458:	f1c6 0601 	rsb	r6, r6, #1
 800945c:	f8ca 6000 	str.w	r6, [sl]
 8009460:	f8da 3000 	ldr.w	r3, [sl]
 8009464:	4499      	add	r9, r3
 8009466:	2200      	movs	r2, #0
 8009468:	2300      	movs	r3, #0
 800946a:	4620      	mov	r0, r4
 800946c:	4629      	mov	r1, r5
 800946e:	f7f7 fb33 	bl	8000ad8 <__aeabi_dcmpeq>
 8009472:	b108      	cbz	r0, 8009478 <__cvt+0xa4>
 8009474:	f8cd 900c 	str.w	r9, [sp, #12]
 8009478:	2230      	movs	r2, #48	; 0x30
 800947a:	9b03      	ldr	r3, [sp, #12]
 800947c:	454b      	cmp	r3, r9
 800947e:	d307      	bcc.n	8009490 <__cvt+0xbc>
 8009480:	9b03      	ldr	r3, [sp, #12]
 8009482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009484:	1bdb      	subs	r3, r3, r7
 8009486:	4638      	mov	r0, r7
 8009488:	6013      	str	r3, [r2, #0]
 800948a:	b004      	add	sp, #16
 800948c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009490:	1c59      	adds	r1, r3, #1
 8009492:	9103      	str	r1, [sp, #12]
 8009494:	701a      	strb	r2, [r3, #0]
 8009496:	e7f0      	b.n	800947a <__cvt+0xa6>

08009498 <__exponent>:
 8009498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800949a:	4603      	mov	r3, r0
 800949c:	2900      	cmp	r1, #0
 800949e:	bfb8      	it	lt
 80094a0:	4249      	neglt	r1, r1
 80094a2:	f803 2b02 	strb.w	r2, [r3], #2
 80094a6:	bfb4      	ite	lt
 80094a8:	222d      	movlt	r2, #45	; 0x2d
 80094aa:	222b      	movge	r2, #43	; 0x2b
 80094ac:	2909      	cmp	r1, #9
 80094ae:	7042      	strb	r2, [r0, #1]
 80094b0:	dd2a      	ble.n	8009508 <__exponent+0x70>
 80094b2:	f10d 0407 	add.w	r4, sp, #7
 80094b6:	46a4      	mov	ip, r4
 80094b8:	270a      	movs	r7, #10
 80094ba:	46a6      	mov	lr, r4
 80094bc:	460a      	mov	r2, r1
 80094be:	fb91 f6f7 	sdiv	r6, r1, r7
 80094c2:	fb07 1516 	mls	r5, r7, r6, r1
 80094c6:	3530      	adds	r5, #48	; 0x30
 80094c8:	2a63      	cmp	r2, #99	; 0x63
 80094ca:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80094ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80094d2:	4631      	mov	r1, r6
 80094d4:	dcf1      	bgt.n	80094ba <__exponent+0x22>
 80094d6:	3130      	adds	r1, #48	; 0x30
 80094d8:	f1ae 0502 	sub.w	r5, lr, #2
 80094dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80094e0:	1c44      	adds	r4, r0, #1
 80094e2:	4629      	mov	r1, r5
 80094e4:	4561      	cmp	r1, ip
 80094e6:	d30a      	bcc.n	80094fe <__exponent+0x66>
 80094e8:	f10d 0209 	add.w	r2, sp, #9
 80094ec:	eba2 020e 	sub.w	r2, r2, lr
 80094f0:	4565      	cmp	r5, ip
 80094f2:	bf88      	it	hi
 80094f4:	2200      	movhi	r2, #0
 80094f6:	4413      	add	r3, r2
 80094f8:	1a18      	subs	r0, r3, r0
 80094fa:	b003      	add	sp, #12
 80094fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009502:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009506:	e7ed      	b.n	80094e4 <__exponent+0x4c>
 8009508:	2330      	movs	r3, #48	; 0x30
 800950a:	3130      	adds	r1, #48	; 0x30
 800950c:	7083      	strb	r3, [r0, #2]
 800950e:	70c1      	strb	r1, [r0, #3]
 8009510:	1d03      	adds	r3, r0, #4
 8009512:	e7f1      	b.n	80094f8 <__exponent+0x60>

08009514 <_printf_float>:
 8009514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009518:	ed2d 8b02 	vpush	{d8}
 800951c:	b08d      	sub	sp, #52	; 0x34
 800951e:	460c      	mov	r4, r1
 8009520:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009524:	4616      	mov	r6, r2
 8009526:	461f      	mov	r7, r3
 8009528:	4605      	mov	r5, r0
 800952a:	f003 f8a3 	bl	800c674 <_localeconv_r>
 800952e:	f8d0 a000 	ldr.w	sl, [r0]
 8009532:	4650      	mov	r0, sl
 8009534:	f7f6 fe54 	bl	80001e0 <strlen>
 8009538:	2300      	movs	r3, #0
 800953a:	930a      	str	r3, [sp, #40]	; 0x28
 800953c:	6823      	ldr	r3, [r4, #0]
 800953e:	9305      	str	r3, [sp, #20]
 8009540:	f8d8 3000 	ldr.w	r3, [r8]
 8009544:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009548:	3307      	adds	r3, #7
 800954a:	f023 0307 	bic.w	r3, r3, #7
 800954e:	f103 0208 	add.w	r2, r3, #8
 8009552:	f8c8 2000 	str.w	r2, [r8]
 8009556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800955a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800955e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009562:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009566:	9307      	str	r3, [sp, #28]
 8009568:	f8cd 8018 	str.w	r8, [sp, #24]
 800956c:	ee08 0a10 	vmov	s16, r0
 8009570:	4b9f      	ldr	r3, [pc, #636]	; (80097f0 <_printf_float+0x2dc>)
 8009572:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800957a:	f7f7 fadf 	bl	8000b3c <__aeabi_dcmpun>
 800957e:	bb88      	cbnz	r0, 80095e4 <_printf_float+0xd0>
 8009580:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009584:	4b9a      	ldr	r3, [pc, #616]	; (80097f0 <_printf_float+0x2dc>)
 8009586:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800958a:	f7f7 fab9 	bl	8000b00 <__aeabi_dcmple>
 800958e:	bb48      	cbnz	r0, 80095e4 <_printf_float+0xd0>
 8009590:	2200      	movs	r2, #0
 8009592:	2300      	movs	r3, #0
 8009594:	4640      	mov	r0, r8
 8009596:	4649      	mov	r1, r9
 8009598:	f7f7 faa8 	bl	8000aec <__aeabi_dcmplt>
 800959c:	b110      	cbz	r0, 80095a4 <_printf_float+0x90>
 800959e:	232d      	movs	r3, #45	; 0x2d
 80095a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095a4:	4b93      	ldr	r3, [pc, #588]	; (80097f4 <_printf_float+0x2e0>)
 80095a6:	4894      	ldr	r0, [pc, #592]	; (80097f8 <_printf_float+0x2e4>)
 80095a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80095ac:	bf94      	ite	ls
 80095ae:	4698      	movls	r8, r3
 80095b0:	4680      	movhi	r8, r0
 80095b2:	2303      	movs	r3, #3
 80095b4:	6123      	str	r3, [r4, #16]
 80095b6:	9b05      	ldr	r3, [sp, #20]
 80095b8:	f023 0204 	bic.w	r2, r3, #4
 80095bc:	6022      	str	r2, [r4, #0]
 80095be:	f04f 0900 	mov.w	r9, #0
 80095c2:	9700      	str	r7, [sp, #0]
 80095c4:	4633      	mov	r3, r6
 80095c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80095c8:	4621      	mov	r1, r4
 80095ca:	4628      	mov	r0, r5
 80095cc:	f000 f9d8 	bl	8009980 <_printf_common>
 80095d0:	3001      	adds	r0, #1
 80095d2:	f040 8090 	bne.w	80096f6 <_printf_float+0x1e2>
 80095d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095da:	b00d      	add	sp, #52	; 0x34
 80095dc:	ecbd 8b02 	vpop	{d8}
 80095e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e4:	4642      	mov	r2, r8
 80095e6:	464b      	mov	r3, r9
 80095e8:	4640      	mov	r0, r8
 80095ea:	4649      	mov	r1, r9
 80095ec:	f7f7 faa6 	bl	8000b3c <__aeabi_dcmpun>
 80095f0:	b140      	cbz	r0, 8009604 <_printf_float+0xf0>
 80095f2:	464b      	mov	r3, r9
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	bfbc      	itt	lt
 80095f8:	232d      	movlt	r3, #45	; 0x2d
 80095fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80095fe:	487f      	ldr	r0, [pc, #508]	; (80097fc <_printf_float+0x2e8>)
 8009600:	4b7f      	ldr	r3, [pc, #508]	; (8009800 <_printf_float+0x2ec>)
 8009602:	e7d1      	b.n	80095a8 <_printf_float+0x94>
 8009604:	6863      	ldr	r3, [r4, #4]
 8009606:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800960a:	9206      	str	r2, [sp, #24]
 800960c:	1c5a      	adds	r2, r3, #1
 800960e:	d13f      	bne.n	8009690 <_printf_float+0x17c>
 8009610:	2306      	movs	r3, #6
 8009612:	6063      	str	r3, [r4, #4]
 8009614:	9b05      	ldr	r3, [sp, #20]
 8009616:	6861      	ldr	r1, [r4, #4]
 8009618:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800961c:	2300      	movs	r3, #0
 800961e:	9303      	str	r3, [sp, #12]
 8009620:	ab0a      	add	r3, sp, #40	; 0x28
 8009622:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009626:	ab09      	add	r3, sp, #36	; 0x24
 8009628:	ec49 8b10 	vmov	d0, r8, r9
 800962c:	9300      	str	r3, [sp, #0]
 800962e:	6022      	str	r2, [r4, #0]
 8009630:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009634:	4628      	mov	r0, r5
 8009636:	f7ff fecd 	bl	80093d4 <__cvt>
 800963a:	9b06      	ldr	r3, [sp, #24]
 800963c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800963e:	2b47      	cmp	r3, #71	; 0x47
 8009640:	4680      	mov	r8, r0
 8009642:	d108      	bne.n	8009656 <_printf_float+0x142>
 8009644:	1cc8      	adds	r0, r1, #3
 8009646:	db02      	blt.n	800964e <_printf_float+0x13a>
 8009648:	6863      	ldr	r3, [r4, #4]
 800964a:	4299      	cmp	r1, r3
 800964c:	dd41      	ble.n	80096d2 <_printf_float+0x1be>
 800964e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009652:	fa5f fb8b 	uxtb.w	fp, fp
 8009656:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800965a:	d820      	bhi.n	800969e <_printf_float+0x18a>
 800965c:	3901      	subs	r1, #1
 800965e:	465a      	mov	r2, fp
 8009660:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009664:	9109      	str	r1, [sp, #36]	; 0x24
 8009666:	f7ff ff17 	bl	8009498 <__exponent>
 800966a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800966c:	1813      	adds	r3, r2, r0
 800966e:	2a01      	cmp	r2, #1
 8009670:	4681      	mov	r9, r0
 8009672:	6123      	str	r3, [r4, #16]
 8009674:	dc02      	bgt.n	800967c <_printf_float+0x168>
 8009676:	6822      	ldr	r2, [r4, #0]
 8009678:	07d2      	lsls	r2, r2, #31
 800967a:	d501      	bpl.n	8009680 <_printf_float+0x16c>
 800967c:	3301      	adds	r3, #1
 800967e:	6123      	str	r3, [r4, #16]
 8009680:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009684:	2b00      	cmp	r3, #0
 8009686:	d09c      	beq.n	80095c2 <_printf_float+0xae>
 8009688:	232d      	movs	r3, #45	; 0x2d
 800968a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800968e:	e798      	b.n	80095c2 <_printf_float+0xae>
 8009690:	9a06      	ldr	r2, [sp, #24]
 8009692:	2a47      	cmp	r2, #71	; 0x47
 8009694:	d1be      	bne.n	8009614 <_printf_float+0x100>
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1bc      	bne.n	8009614 <_printf_float+0x100>
 800969a:	2301      	movs	r3, #1
 800969c:	e7b9      	b.n	8009612 <_printf_float+0xfe>
 800969e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80096a2:	d118      	bne.n	80096d6 <_printf_float+0x1c2>
 80096a4:	2900      	cmp	r1, #0
 80096a6:	6863      	ldr	r3, [r4, #4]
 80096a8:	dd0b      	ble.n	80096c2 <_printf_float+0x1ae>
 80096aa:	6121      	str	r1, [r4, #16]
 80096ac:	b913      	cbnz	r3, 80096b4 <_printf_float+0x1a0>
 80096ae:	6822      	ldr	r2, [r4, #0]
 80096b0:	07d0      	lsls	r0, r2, #31
 80096b2:	d502      	bpl.n	80096ba <_printf_float+0x1a6>
 80096b4:	3301      	adds	r3, #1
 80096b6:	440b      	add	r3, r1
 80096b8:	6123      	str	r3, [r4, #16]
 80096ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80096bc:	f04f 0900 	mov.w	r9, #0
 80096c0:	e7de      	b.n	8009680 <_printf_float+0x16c>
 80096c2:	b913      	cbnz	r3, 80096ca <_printf_float+0x1b6>
 80096c4:	6822      	ldr	r2, [r4, #0]
 80096c6:	07d2      	lsls	r2, r2, #31
 80096c8:	d501      	bpl.n	80096ce <_printf_float+0x1ba>
 80096ca:	3302      	adds	r3, #2
 80096cc:	e7f4      	b.n	80096b8 <_printf_float+0x1a4>
 80096ce:	2301      	movs	r3, #1
 80096d0:	e7f2      	b.n	80096b8 <_printf_float+0x1a4>
 80096d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80096d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096d8:	4299      	cmp	r1, r3
 80096da:	db05      	blt.n	80096e8 <_printf_float+0x1d4>
 80096dc:	6823      	ldr	r3, [r4, #0]
 80096de:	6121      	str	r1, [r4, #16]
 80096e0:	07d8      	lsls	r0, r3, #31
 80096e2:	d5ea      	bpl.n	80096ba <_printf_float+0x1a6>
 80096e4:	1c4b      	adds	r3, r1, #1
 80096e6:	e7e7      	b.n	80096b8 <_printf_float+0x1a4>
 80096e8:	2900      	cmp	r1, #0
 80096ea:	bfd4      	ite	le
 80096ec:	f1c1 0202 	rsble	r2, r1, #2
 80096f0:	2201      	movgt	r2, #1
 80096f2:	4413      	add	r3, r2
 80096f4:	e7e0      	b.n	80096b8 <_printf_float+0x1a4>
 80096f6:	6823      	ldr	r3, [r4, #0]
 80096f8:	055a      	lsls	r2, r3, #21
 80096fa:	d407      	bmi.n	800970c <_printf_float+0x1f8>
 80096fc:	6923      	ldr	r3, [r4, #16]
 80096fe:	4642      	mov	r2, r8
 8009700:	4631      	mov	r1, r6
 8009702:	4628      	mov	r0, r5
 8009704:	47b8      	blx	r7
 8009706:	3001      	adds	r0, #1
 8009708:	d12c      	bne.n	8009764 <_printf_float+0x250>
 800970a:	e764      	b.n	80095d6 <_printf_float+0xc2>
 800970c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009710:	f240 80e0 	bls.w	80098d4 <_printf_float+0x3c0>
 8009714:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009718:	2200      	movs	r2, #0
 800971a:	2300      	movs	r3, #0
 800971c:	f7f7 f9dc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009720:	2800      	cmp	r0, #0
 8009722:	d034      	beq.n	800978e <_printf_float+0x27a>
 8009724:	4a37      	ldr	r2, [pc, #220]	; (8009804 <_printf_float+0x2f0>)
 8009726:	2301      	movs	r3, #1
 8009728:	4631      	mov	r1, r6
 800972a:	4628      	mov	r0, r5
 800972c:	47b8      	blx	r7
 800972e:	3001      	adds	r0, #1
 8009730:	f43f af51 	beq.w	80095d6 <_printf_float+0xc2>
 8009734:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009738:	429a      	cmp	r2, r3
 800973a:	db02      	blt.n	8009742 <_printf_float+0x22e>
 800973c:	6823      	ldr	r3, [r4, #0]
 800973e:	07d8      	lsls	r0, r3, #31
 8009740:	d510      	bpl.n	8009764 <_printf_float+0x250>
 8009742:	ee18 3a10 	vmov	r3, s16
 8009746:	4652      	mov	r2, sl
 8009748:	4631      	mov	r1, r6
 800974a:	4628      	mov	r0, r5
 800974c:	47b8      	blx	r7
 800974e:	3001      	adds	r0, #1
 8009750:	f43f af41 	beq.w	80095d6 <_printf_float+0xc2>
 8009754:	f04f 0800 	mov.w	r8, #0
 8009758:	f104 091a 	add.w	r9, r4, #26
 800975c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800975e:	3b01      	subs	r3, #1
 8009760:	4543      	cmp	r3, r8
 8009762:	dc09      	bgt.n	8009778 <_printf_float+0x264>
 8009764:	6823      	ldr	r3, [r4, #0]
 8009766:	079b      	lsls	r3, r3, #30
 8009768:	f100 8105 	bmi.w	8009976 <_printf_float+0x462>
 800976c:	68e0      	ldr	r0, [r4, #12]
 800976e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009770:	4298      	cmp	r0, r3
 8009772:	bfb8      	it	lt
 8009774:	4618      	movlt	r0, r3
 8009776:	e730      	b.n	80095da <_printf_float+0xc6>
 8009778:	2301      	movs	r3, #1
 800977a:	464a      	mov	r2, r9
 800977c:	4631      	mov	r1, r6
 800977e:	4628      	mov	r0, r5
 8009780:	47b8      	blx	r7
 8009782:	3001      	adds	r0, #1
 8009784:	f43f af27 	beq.w	80095d6 <_printf_float+0xc2>
 8009788:	f108 0801 	add.w	r8, r8, #1
 800978c:	e7e6      	b.n	800975c <_printf_float+0x248>
 800978e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009790:	2b00      	cmp	r3, #0
 8009792:	dc39      	bgt.n	8009808 <_printf_float+0x2f4>
 8009794:	4a1b      	ldr	r2, [pc, #108]	; (8009804 <_printf_float+0x2f0>)
 8009796:	2301      	movs	r3, #1
 8009798:	4631      	mov	r1, r6
 800979a:	4628      	mov	r0, r5
 800979c:	47b8      	blx	r7
 800979e:	3001      	adds	r0, #1
 80097a0:	f43f af19 	beq.w	80095d6 <_printf_float+0xc2>
 80097a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097a8:	4313      	orrs	r3, r2
 80097aa:	d102      	bne.n	80097b2 <_printf_float+0x29e>
 80097ac:	6823      	ldr	r3, [r4, #0]
 80097ae:	07d9      	lsls	r1, r3, #31
 80097b0:	d5d8      	bpl.n	8009764 <_printf_float+0x250>
 80097b2:	ee18 3a10 	vmov	r3, s16
 80097b6:	4652      	mov	r2, sl
 80097b8:	4631      	mov	r1, r6
 80097ba:	4628      	mov	r0, r5
 80097bc:	47b8      	blx	r7
 80097be:	3001      	adds	r0, #1
 80097c0:	f43f af09 	beq.w	80095d6 <_printf_float+0xc2>
 80097c4:	f04f 0900 	mov.w	r9, #0
 80097c8:	f104 0a1a 	add.w	sl, r4, #26
 80097cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ce:	425b      	negs	r3, r3
 80097d0:	454b      	cmp	r3, r9
 80097d2:	dc01      	bgt.n	80097d8 <_printf_float+0x2c4>
 80097d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097d6:	e792      	b.n	80096fe <_printf_float+0x1ea>
 80097d8:	2301      	movs	r3, #1
 80097da:	4652      	mov	r2, sl
 80097dc:	4631      	mov	r1, r6
 80097de:	4628      	mov	r0, r5
 80097e0:	47b8      	blx	r7
 80097e2:	3001      	adds	r0, #1
 80097e4:	f43f aef7 	beq.w	80095d6 <_printf_float+0xc2>
 80097e8:	f109 0901 	add.w	r9, r9, #1
 80097ec:	e7ee      	b.n	80097cc <_printf_float+0x2b8>
 80097ee:	bf00      	nop
 80097f0:	7fefffff 	.word	0x7fefffff
 80097f4:	0800e0a8 	.word	0x0800e0a8
 80097f8:	0800e0ac 	.word	0x0800e0ac
 80097fc:	0800e0b4 	.word	0x0800e0b4
 8009800:	0800e0b0 	.word	0x0800e0b0
 8009804:	0800e0b8 	.word	0x0800e0b8
 8009808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800980a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800980c:	429a      	cmp	r2, r3
 800980e:	bfa8      	it	ge
 8009810:	461a      	movge	r2, r3
 8009812:	2a00      	cmp	r2, #0
 8009814:	4691      	mov	r9, r2
 8009816:	dc37      	bgt.n	8009888 <_printf_float+0x374>
 8009818:	f04f 0b00 	mov.w	fp, #0
 800981c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009820:	f104 021a 	add.w	r2, r4, #26
 8009824:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009826:	9305      	str	r3, [sp, #20]
 8009828:	eba3 0309 	sub.w	r3, r3, r9
 800982c:	455b      	cmp	r3, fp
 800982e:	dc33      	bgt.n	8009898 <_printf_float+0x384>
 8009830:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009834:	429a      	cmp	r2, r3
 8009836:	db3b      	blt.n	80098b0 <_printf_float+0x39c>
 8009838:	6823      	ldr	r3, [r4, #0]
 800983a:	07da      	lsls	r2, r3, #31
 800983c:	d438      	bmi.n	80098b0 <_printf_float+0x39c>
 800983e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009840:	9a05      	ldr	r2, [sp, #20]
 8009842:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009844:	1a9a      	subs	r2, r3, r2
 8009846:	eba3 0901 	sub.w	r9, r3, r1
 800984a:	4591      	cmp	r9, r2
 800984c:	bfa8      	it	ge
 800984e:	4691      	movge	r9, r2
 8009850:	f1b9 0f00 	cmp.w	r9, #0
 8009854:	dc35      	bgt.n	80098c2 <_printf_float+0x3ae>
 8009856:	f04f 0800 	mov.w	r8, #0
 800985a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800985e:	f104 0a1a 	add.w	sl, r4, #26
 8009862:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009866:	1a9b      	subs	r3, r3, r2
 8009868:	eba3 0309 	sub.w	r3, r3, r9
 800986c:	4543      	cmp	r3, r8
 800986e:	f77f af79 	ble.w	8009764 <_printf_float+0x250>
 8009872:	2301      	movs	r3, #1
 8009874:	4652      	mov	r2, sl
 8009876:	4631      	mov	r1, r6
 8009878:	4628      	mov	r0, r5
 800987a:	47b8      	blx	r7
 800987c:	3001      	adds	r0, #1
 800987e:	f43f aeaa 	beq.w	80095d6 <_printf_float+0xc2>
 8009882:	f108 0801 	add.w	r8, r8, #1
 8009886:	e7ec      	b.n	8009862 <_printf_float+0x34e>
 8009888:	4613      	mov	r3, r2
 800988a:	4631      	mov	r1, r6
 800988c:	4642      	mov	r2, r8
 800988e:	4628      	mov	r0, r5
 8009890:	47b8      	blx	r7
 8009892:	3001      	adds	r0, #1
 8009894:	d1c0      	bne.n	8009818 <_printf_float+0x304>
 8009896:	e69e      	b.n	80095d6 <_printf_float+0xc2>
 8009898:	2301      	movs	r3, #1
 800989a:	4631      	mov	r1, r6
 800989c:	4628      	mov	r0, r5
 800989e:	9205      	str	r2, [sp, #20]
 80098a0:	47b8      	blx	r7
 80098a2:	3001      	adds	r0, #1
 80098a4:	f43f ae97 	beq.w	80095d6 <_printf_float+0xc2>
 80098a8:	9a05      	ldr	r2, [sp, #20]
 80098aa:	f10b 0b01 	add.w	fp, fp, #1
 80098ae:	e7b9      	b.n	8009824 <_printf_float+0x310>
 80098b0:	ee18 3a10 	vmov	r3, s16
 80098b4:	4652      	mov	r2, sl
 80098b6:	4631      	mov	r1, r6
 80098b8:	4628      	mov	r0, r5
 80098ba:	47b8      	blx	r7
 80098bc:	3001      	adds	r0, #1
 80098be:	d1be      	bne.n	800983e <_printf_float+0x32a>
 80098c0:	e689      	b.n	80095d6 <_printf_float+0xc2>
 80098c2:	9a05      	ldr	r2, [sp, #20]
 80098c4:	464b      	mov	r3, r9
 80098c6:	4442      	add	r2, r8
 80098c8:	4631      	mov	r1, r6
 80098ca:	4628      	mov	r0, r5
 80098cc:	47b8      	blx	r7
 80098ce:	3001      	adds	r0, #1
 80098d0:	d1c1      	bne.n	8009856 <_printf_float+0x342>
 80098d2:	e680      	b.n	80095d6 <_printf_float+0xc2>
 80098d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098d6:	2a01      	cmp	r2, #1
 80098d8:	dc01      	bgt.n	80098de <_printf_float+0x3ca>
 80098da:	07db      	lsls	r3, r3, #31
 80098dc:	d538      	bpl.n	8009950 <_printf_float+0x43c>
 80098de:	2301      	movs	r3, #1
 80098e0:	4642      	mov	r2, r8
 80098e2:	4631      	mov	r1, r6
 80098e4:	4628      	mov	r0, r5
 80098e6:	47b8      	blx	r7
 80098e8:	3001      	adds	r0, #1
 80098ea:	f43f ae74 	beq.w	80095d6 <_printf_float+0xc2>
 80098ee:	ee18 3a10 	vmov	r3, s16
 80098f2:	4652      	mov	r2, sl
 80098f4:	4631      	mov	r1, r6
 80098f6:	4628      	mov	r0, r5
 80098f8:	47b8      	blx	r7
 80098fa:	3001      	adds	r0, #1
 80098fc:	f43f ae6b 	beq.w	80095d6 <_printf_float+0xc2>
 8009900:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009904:	2200      	movs	r2, #0
 8009906:	2300      	movs	r3, #0
 8009908:	f7f7 f8e6 	bl	8000ad8 <__aeabi_dcmpeq>
 800990c:	b9d8      	cbnz	r0, 8009946 <_printf_float+0x432>
 800990e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009910:	f108 0201 	add.w	r2, r8, #1
 8009914:	3b01      	subs	r3, #1
 8009916:	4631      	mov	r1, r6
 8009918:	4628      	mov	r0, r5
 800991a:	47b8      	blx	r7
 800991c:	3001      	adds	r0, #1
 800991e:	d10e      	bne.n	800993e <_printf_float+0x42a>
 8009920:	e659      	b.n	80095d6 <_printf_float+0xc2>
 8009922:	2301      	movs	r3, #1
 8009924:	4652      	mov	r2, sl
 8009926:	4631      	mov	r1, r6
 8009928:	4628      	mov	r0, r5
 800992a:	47b8      	blx	r7
 800992c:	3001      	adds	r0, #1
 800992e:	f43f ae52 	beq.w	80095d6 <_printf_float+0xc2>
 8009932:	f108 0801 	add.w	r8, r8, #1
 8009936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009938:	3b01      	subs	r3, #1
 800993a:	4543      	cmp	r3, r8
 800993c:	dcf1      	bgt.n	8009922 <_printf_float+0x40e>
 800993e:	464b      	mov	r3, r9
 8009940:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009944:	e6dc      	b.n	8009700 <_printf_float+0x1ec>
 8009946:	f04f 0800 	mov.w	r8, #0
 800994a:	f104 0a1a 	add.w	sl, r4, #26
 800994e:	e7f2      	b.n	8009936 <_printf_float+0x422>
 8009950:	2301      	movs	r3, #1
 8009952:	4642      	mov	r2, r8
 8009954:	e7df      	b.n	8009916 <_printf_float+0x402>
 8009956:	2301      	movs	r3, #1
 8009958:	464a      	mov	r2, r9
 800995a:	4631      	mov	r1, r6
 800995c:	4628      	mov	r0, r5
 800995e:	47b8      	blx	r7
 8009960:	3001      	adds	r0, #1
 8009962:	f43f ae38 	beq.w	80095d6 <_printf_float+0xc2>
 8009966:	f108 0801 	add.w	r8, r8, #1
 800996a:	68e3      	ldr	r3, [r4, #12]
 800996c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800996e:	1a5b      	subs	r3, r3, r1
 8009970:	4543      	cmp	r3, r8
 8009972:	dcf0      	bgt.n	8009956 <_printf_float+0x442>
 8009974:	e6fa      	b.n	800976c <_printf_float+0x258>
 8009976:	f04f 0800 	mov.w	r8, #0
 800997a:	f104 0919 	add.w	r9, r4, #25
 800997e:	e7f4      	b.n	800996a <_printf_float+0x456>

08009980 <_printf_common>:
 8009980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009984:	4616      	mov	r6, r2
 8009986:	4699      	mov	r9, r3
 8009988:	688a      	ldr	r2, [r1, #8]
 800998a:	690b      	ldr	r3, [r1, #16]
 800998c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009990:	4293      	cmp	r3, r2
 8009992:	bfb8      	it	lt
 8009994:	4613      	movlt	r3, r2
 8009996:	6033      	str	r3, [r6, #0]
 8009998:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800999c:	4607      	mov	r7, r0
 800999e:	460c      	mov	r4, r1
 80099a0:	b10a      	cbz	r2, 80099a6 <_printf_common+0x26>
 80099a2:	3301      	adds	r3, #1
 80099a4:	6033      	str	r3, [r6, #0]
 80099a6:	6823      	ldr	r3, [r4, #0]
 80099a8:	0699      	lsls	r1, r3, #26
 80099aa:	bf42      	ittt	mi
 80099ac:	6833      	ldrmi	r3, [r6, #0]
 80099ae:	3302      	addmi	r3, #2
 80099b0:	6033      	strmi	r3, [r6, #0]
 80099b2:	6825      	ldr	r5, [r4, #0]
 80099b4:	f015 0506 	ands.w	r5, r5, #6
 80099b8:	d106      	bne.n	80099c8 <_printf_common+0x48>
 80099ba:	f104 0a19 	add.w	sl, r4, #25
 80099be:	68e3      	ldr	r3, [r4, #12]
 80099c0:	6832      	ldr	r2, [r6, #0]
 80099c2:	1a9b      	subs	r3, r3, r2
 80099c4:	42ab      	cmp	r3, r5
 80099c6:	dc26      	bgt.n	8009a16 <_printf_common+0x96>
 80099c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099cc:	1e13      	subs	r3, r2, #0
 80099ce:	6822      	ldr	r2, [r4, #0]
 80099d0:	bf18      	it	ne
 80099d2:	2301      	movne	r3, #1
 80099d4:	0692      	lsls	r2, r2, #26
 80099d6:	d42b      	bmi.n	8009a30 <_printf_common+0xb0>
 80099d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099dc:	4649      	mov	r1, r9
 80099de:	4638      	mov	r0, r7
 80099e0:	47c0      	blx	r8
 80099e2:	3001      	adds	r0, #1
 80099e4:	d01e      	beq.n	8009a24 <_printf_common+0xa4>
 80099e6:	6823      	ldr	r3, [r4, #0]
 80099e8:	68e5      	ldr	r5, [r4, #12]
 80099ea:	6832      	ldr	r2, [r6, #0]
 80099ec:	f003 0306 	and.w	r3, r3, #6
 80099f0:	2b04      	cmp	r3, #4
 80099f2:	bf08      	it	eq
 80099f4:	1aad      	subeq	r5, r5, r2
 80099f6:	68a3      	ldr	r3, [r4, #8]
 80099f8:	6922      	ldr	r2, [r4, #16]
 80099fa:	bf0c      	ite	eq
 80099fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a00:	2500      	movne	r5, #0
 8009a02:	4293      	cmp	r3, r2
 8009a04:	bfc4      	itt	gt
 8009a06:	1a9b      	subgt	r3, r3, r2
 8009a08:	18ed      	addgt	r5, r5, r3
 8009a0a:	2600      	movs	r6, #0
 8009a0c:	341a      	adds	r4, #26
 8009a0e:	42b5      	cmp	r5, r6
 8009a10:	d11a      	bne.n	8009a48 <_printf_common+0xc8>
 8009a12:	2000      	movs	r0, #0
 8009a14:	e008      	b.n	8009a28 <_printf_common+0xa8>
 8009a16:	2301      	movs	r3, #1
 8009a18:	4652      	mov	r2, sl
 8009a1a:	4649      	mov	r1, r9
 8009a1c:	4638      	mov	r0, r7
 8009a1e:	47c0      	blx	r8
 8009a20:	3001      	adds	r0, #1
 8009a22:	d103      	bne.n	8009a2c <_printf_common+0xac>
 8009a24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a2c:	3501      	adds	r5, #1
 8009a2e:	e7c6      	b.n	80099be <_printf_common+0x3e>
 8009a30:	18e1      	adds	r1, r4, r3
 8009a32:	1c5a      	adds	r2, r3, #1
 8009a34:	2030      	movs	r0, #48	; 0x30
 8009a36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a3a:	4422      	add	r2, r4
 8009a3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a44:	3302      	adds	r3, #2
 8009a46:	e7c7      	b.n	80099d8 <_printf_common+0x58>
 8009a48:	2301      	movs	r3, #1
 8009a4a:	4622      	mov	r2, r4
 8009a4c:	4649      	mov	r1, r9
 8009a4e:	4638      	mov	r0, r7
 8009a50:	47c0      	blx	r8
 8009a52:	3001      	adds	r0, #1
 8009a54:	d0e6      	beq.n	8009a24 <_printf_common+0xa4>
 8009a56:	3601      	adds	r6, #1
 8009a58:	e7d9      	b.n	8009a0e <_printf_common+0x8e>
	...

08009a5c <_printf_i>:
 8009a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a60:	7e0f      	ldrb	r7, [r1, #24]
 8009a62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a64:	2f78      	cmp	r7, #120	; 0x78
 8009a66:	4691      	mov	r9, r2
 8009a68:	4680      	mov	r8, r0
 8009a6a:	460c      	mov	r4, r1
 8009a6c:	469a      	mov	sl, r3
 8009a6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a72:	d807      	bhi.n	8009a84 <_printf_i+0x28>
 8009a74:	2f62      	cmp	r7, #98	; 0x62
 8009a76:	d80a      	bhi.n	8009a8e <_printf_i+0x32>
 8009a78:	2f00      	cmp	r7, #0
 8009a7a:	f000 80d8 	beq.w	8009c2e <_printf_i+0x1d2>
 8009a7e:	2f58      	cmp	r7, #88	; 0x58
 8009a80:	f000 80a3 	beq.w	8009bca <_printf_i+0x16e>
 8009a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a8c:	e03a      	b.n	8009b04 <_printf_i+0xa8>
 8009a8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a92:	2b15      	cmp	r3, #21
 8009a94:	d8f6      	bhi.n	8009a84 <_printf_i+0x28>
 8009a96:	a101      	add	r1, pc, #4	; (adr r1, 8009a9c <_printf_i+0x40>)
 8009a98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a9c:	08009af5 	.word	0x08009af5
 8009aa0:	08009b09 	.word	0x08009b09
 8009aa4:	08009a85 	.word	0x08009a85
 8009aa8:	08009a85 	.word	0x08009a85
 8009aac:	08009a85 	.word	0x08009a85
 8009ab0:	08009a85 	.word	0x08009a85
 8009ab4:	08009b09 	.word	0x08009b09
 8009ab8:	08009a85 	.word	0x08009a85
 8009abc:	08009a85 	.word	0x08009a85
 8009ac0:	08009a85 	.word	0x08009a85
 8009ac4:	08009a85 	.word	0x08009a85
 8009ac8:	08009c15 	.word	0x08009c15
 8009acc:	08009b39 	.word	0x08009b39
 8009ad0:	08009bf7 	.word	0x08009bf7
 8009ad4:	08009a85 	.word	0x08009a85
 8009ad8:	08009a85 	.word	0x08009a85
 8009adc:	08009c37 	.word	0x08009c37
 8009ae0:	08009a85 	.word	0x08009a85
 8009ae4:	08009b39 	.word	0x08009b39
 8009ae8:	08009a85 	.word	0x08009a85
 8009aec:	08009a85 	.word	0x08009a85
 8009af0:	08009bff 	.word	0x08009bff
 8009af4:	682b      	ldr	r3, [r5, #0]
 8009af6:	1d1a      	adds	r2, r3, #4
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	602a      	str	r2, [r5, #0]
 8009afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b04:	2301      	movs	r3, #1
 8009b06:	e0a3      	b.n	8009c50 <_printf_i+0x1f4>
 8009b08:	6820      	ldr	r0, [r4, #0]
 8009b0a:	6829      	ldr	r1, [r5, #0]
 8009b0c:	0606      	lsls	r6, r0, #24
 8009b0e:	f101 0304 	add.w	r3, r1, #4
 8009b12:	d50a      	bpl.n	8009b2a <_printf_i+0xce>
 8009b14:	680e      	ldr	r6, [r1, #0]
 8009b16:	602b      	str	r3, [r5, #0]
 8009b18:	2e00      	cmp	r6, #0
 8009b1a:	da03      	bge.n	8009b24 <_printf_i+0xc8>
 8009b1c:	232d      	movs	r3, #45	; 0x2d
 8009b1e:	4276      	negs	r6, r6
 8009b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b24:	485e      	ldr	r0, [pc, #376]	; (8009ca0 <_printf_i+0x244>)
 8009b26:	230a      	movs	r3, #10
 8009b28:	e019      	b.n	8009b5e <_printf_i+0x102>
 8009b2a:	680e      	ldr	r6, [r1, #0]
 8009b2c:	602b      	str	r3, [r5, #0]
 8009b2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b32:	bf18      	it	ne
 8009b34:	b236      	sxthne	r6, r6
 8009b36:	e7ef      	b.n	8009b18 <_printf_i+0xbc>
 8009b38:	682b      	ldr	r3, [r5, #0]
 8009b3a:	6820      	ldr	r0, [r4, #0]
 8009b3c:	1d19      	adds	r1, r3, #4
 8009b3e:	6029      	str	r1, [r5, #0]
 8009b40:	0601      	lsls	r1, r0, #24
 8009b42:	d501      	bpl.n	8009b48 <_printf_i+0xec>
 8009b44:	681e      	ldr	r6, [r3, #0]
 8009b46:	e002      	b.n	8009b4e <_printf_i+0xf2>
 8009b48:	0646      	lsls	r6, r0, #25
 8009b4a:	d5fb      	bpl.n	8009b44 <_printf_i+0xe8>
 8009b4c:	881e      	ldrh	r6, [r3, #0]
 8009b4e:	4854      	ldr	r0, [pc, #336]	; (8009ca0 <_printf_i+0x244>)
 8009b50:	2f6f      	cmp	r7, #111	; 0x6f
 8009b52:	bf0c      	ite	eq
 8009b54:	2308      	moveq	r3, #8
 8009b56:	230a      	movne	r3, #10
 8009b58:	2100      	movs	r1, #0
 8009b5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b5e:	6865      	ldr	r5, [r4, #4]
 8009b60:	60a5      	str	r5, [r4, #8]
 8009b62:	2d00      	cmp	r5, #0
 8009b64:	bfa2      	ittt	ge
 8009b66:	6821      	ldrge	r1, [r4, #0]
 8009b68:	f021 0104 	bicge.w	r1, r1, #4
 8009b6c:	6021      	strge	r1, [r4, #0]
 8009b6e:	b90e      	cbnz	r6, 8009b74 <_printf_i+0x118>
 8009b70:	2d00      	cmp	r5, #0
 8009b72:	d04d      	beq.n	8009c10 <_printf_i+0x1b4>
 8009b74:	4615      	mov	r5, r2
 8009b76:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b7a:	fb03 6711 	mls	r7, r3, r1, r6
 8009b7e:	5dc7      	ldrb	r7, [r0, r7]
 8009b80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b84:	4637      	mov	r7, r6
 8009b86:	42bb      	cmp	r3, r7
 8009b88:	460e      	mov	r6, r1
 8009b8a:	d9f4      	bls.n	8009b76 <_printf_i+0x11a>
 8009b8c:	2b08      	cmp	r3, #8
 8009b8e:	d10b      	bne.n	8009ba8 <_printf_i+0x14c>
 8009b90:	6823      	ldr	r3, [r4, #0]
 8009b92:	07de      	lsls	r6, r3, #31
 8009b94:	d508      	bpl.n	8009ba8 <_printf_i+0x14c>
 8009b96:	6923      	ldr	r3, [r4, #16]
 8009b98:	6861      	ldr	r1, [r4, #4]
 8009b9a:	4299      	cmp	r1, r3
 8009b9c:	bfde      	ittt	le
 8009b9e:	2330      	movle	r3, #48	; 0x30
 8009ba0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ba4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009ba8:	1b52      	subs	r2, r2, r5
 8009baa:	6122      	str	r2, [r4, #16]
 8009bac:	f8cd a000 	str.w	sl, [sp]
 8009bb0:	464b      	mov	r3, r9
 8009bb2:	aa03      	add	r2, sp, #12
 8009bb4:	4621      	mov	r1, r4
 8009bb6:	4640      	mov	r0, r8
 8009bb8:	f7ff fee2 	bl	8009980 <_printf_common>
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	d14c      	bne.n	8009c5a <_printf_i+0x1fe>
 8009bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009bc4:	b004      	add	sp, #16
 8009bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bca:	4835      	ldr	r0, [pc, #212]	; (8009ca0 <_printf_i+0x244>)
 8009bcc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009bd0:	6829      	ldr	r1, [r5, #0]
 8009bd2:	6823      	ldr	r3, [r4, #0]
 8009bd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8009bd8:	6029      	str	r1, [r5, #0]
 8009bda:	061d      	lsls	r5, r3, #24
 8009bdc:	d514      	bpl.n	8009c08 <_printf_i+0x1ac>
 8009bde:	07df      	lsls	r7, r3, #31
 8009be0:	bf44      	itt	mi
 8009be2:	f043 0320 	orrmi.w	r3, r3, #32
 8009be6:	6023      	strmi	r3, [r4, #0]
 8009be8:	b91e      	cbnz	r6, 8009bf2 <_printf_i+0x196>
 8009bea:	6823      	ldr	r3, [r4, #0]
 8009bec:	f023 0320 	bic.w	r3, r3, #32
 8009bf0:	6023      	str	r3, [r4, #0]
 8009bf2:	2310      	movs	r3, #16
 8009bf4:	e7b0      	b.n	8009b58 <_printf_i+0xfc>
 8009bf6:	6823      	ldr	r3, [r4, #0]
 8009bf8:	f043 0320 	orr.w	r3, r3, #32
 8009bfc:	6023      	str	r3, [r4, #0]
 8009bfe:	2378      	movs	r3, #120	; 0x78
 8009c00:	4828      	ldr	r0, [pc, #160]	; (8009ca4 <_printf_i+0x248>)
 8009c02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c06:	e7e3      	b.n	8009bd0 <_printf_i+0x174>
 8009c08:	0659      	lsls	r1, r3, #25
 8009c0a:	bf48      	it	mi
 8009c0c:	b2b6      	uxthmi	r6, r6
 8009c0e:	e7e6      	b.n	8009bde <_printf_i+0x182>
 8009c10:	4615      	mov	r5, r2
 8009c12:	e7bb      	b.n	8009b8c <_printf_i+0x130>
 8009c14:	682b      	ldr	r3, [r5, #0]
 8009c16:	6826      	ldr	r6, [r4, #0]
 8009c18:	6961      	ldr	r1, [r4, #20]
 8009c1a:	1d18      	adds	r0, r3, #4
 8009c1c:	6028      	str	r0, [r5, #0]
 8009c1e:	0635      	lsls	r5, r6, #24
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	d501      	bpl.n	8009c28 <_printf_i+0x1cc>
 8009c24:	6019      	str	r1, [r3, #0]
 8009c26:	e002      	b.n	8009c2e <_printf_i+0x1d2>
 8009c28:	0670      	lsls	r0, r6, #25
 8009c2a:	d5fb      	bpl.n	8009c24 <_printf_i+0x1c8>
 8009c2c:	8019      	strh	r1, [r3, #0]
 8009c2e:	2300      	movs	r3, #0
 8009c30:	6123      	str	r3, [r4, #16]
 8009c32:	4615      	mov	r5, r2
 8009c34:	e7ba      	b.n	8009bac <_printf_i+0x150>
 8009c36:	682b      	ldr	r3, [r5, #0]
 8009c38:	1d1a      	adds	r2, r3, #4
 8009c3a:	602a      	str	r2, [r5, #0]
 8009c3c:	681d      	ldr	r5, [r3, #0]
 8009c3e:	6862      	ldr	r2, [r4, #4]
 8009c40:	2100      	movs	r1, #0
 8009c42:	4628      	mov	r0, r5
 8009c44:	f7f6 fad4 	bl	80001f0 <memchr>
 8009c48:	b108      	cbz	r0, 8009c4e <_printf_i+0x1f2>
 8009c4a:	1b40      	subs	r0, r0, r5
 8009c4c:	6060      	str	r0, [r4, #4]
 8009c4e:	6863      	ldr	r3, [r4, #4]
 8009c50:	6123      	str	r3, [r4, #16]
 8009c52:	2300      	movs	r3, #0
 8009c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c58:	e7a8      	b.n	8009bac <_printf_i+0x150>
 8009c5a:	6923      	ldr	r3, [r4, #16]
 8009c5c:	462a      	mov	r2, r5
 8009c5e:	4649      	mov	r1, r9
 8009c60:	4640      	mov	r0, r8
 8009c62:	47d0      	blx	sl
 8009c64:	3001      	adds	r0, #1
 8009c66:	d0ab      	beq.n	8009bc0 <_printf_i+0x164>
 8009c68:	6823      	ldr	r3, [r4, #0]
 8009c6a:	079b      	lsls	r3, r3, #30
 8009c6c:	d413      	bmi.n	8009c96 <_printf_i+0x23a>
 8009c6e:	68e0      	ldr	r0, [r4, #12]
 8009c70:	9b03      	ldr	r3, [sp, #12]
 8009c72:	4298      	cmp	r0, r3
 8009c74:	bfb8      	it	lt
 8009c76:	4618      	movlt	r0, r3
 8009c78:	e7a4      	b.n	8009bc4 <_printf_i+0x168>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	4632      	mov	r2, r6
 8009c7e:	4649      	mov	r1, r9
 8009c80:	4640      	mov	r0, r8
 8009c82:	47d0      	blx	sl
 8009c84:	3001      	adds	r0, #1
 8009c86:	d09b      	beq.n	8009bc0 <_printf_i+0x164>
 8009c88:	3501      	adds	r5, #1
 8009c8a:	68e3      	ldr	r3, [r4, #12]
 8009c8c:	9903      	ldr	r1, [sp, #12]
 8009c8e:	1a5b      	subs	r3, r3, r1
 8009c90:	42ab      	cmp	r3, r5
 8009c92:	dcf2      	bgt.n	8009c7a <_printf_i+0x21e>
 8009c94:	e7eb      	b.n	8009c6e <_printf_i+0x212>
 8009c96:	2500      	movs	r5, #0
 8009c98:	f104 0619 	add.w	r6, r4, #25
 8009c9c:	e7f5      	b.n	8009c8a <_printf_i+0x22e>
 8009c9e:	bf00      	nop
 8009ca0:	0800e0ba 	.word	0x0800e0ba
 8009ca4:	0800e0cb 	.word	0x0800e0cb

08009ca8 <_sbrk_r>:
 8009ca8:	b538      	push	{r3, r4, r5, lr}
 8009caa:	4d06      	ldr	r5, [pc, #24]	; (8009cc4 <_sbrk_r+0x1c>)
 8009cac:	2300      	movs	r3, #0
 8009cae:	4604      	mov	r4, r0
 8009cb0:	4608      	mov	r0, r1
 8009cb2:	602b      	str	r3, [r5, #0]
 8009cb4:	f7fa fd5a 	bl	800476c <_sbrk>
 8009cb8:	1c43      	adds	r3, r0, #1
 8009cba:	d102      	bne.n	8009cc2 <_sbrk_r+0x1a>
 8009cbc:	682b      	ldr	r3, [r5, #0]
 8009cbe:	b103      	cbz	r3, 8009cc2 <_sbrk_r+0x1a>
 8009cc0:	6023      	str	r3, [r4, #0]
 8009cc2:	bd38      	pop	{r3, r4, r5, pc}
 8009cc4:	20000fb8 	.word	0x20000fb8

08009cc8 <siprintf>:
 8009cc8:	b40e      	push	{r1, r2, r3}
 8009cca:	b500      	push	{lr}
 8009ccc:	b09c      	sub	sp, #112	; 0x70
 8009cce:	ab1d      	add	r3, sp, #116	; 0x74
 8009cd0:	9002      	str	r0, [sp, #8]
 8009cd2:	9006      	str	r0, [sp, #24]
 8009cd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009cd8:	4809      	ldr	r0, [pc, #36]	; (8009d00 <siprintf+0x38>)
 8009cda:	9107      	str	r1, [sp, #28]
 8009cdc:	9104      	str	r1, [sp, #16]
 8009cde:	4909      	ldr	r1, [pc, #36]	; (8009d04 <siprintf+0x3c>)
 8009ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ce4:	9105      	str	r1, [sp, #20]
 8009ce6:	6800      	ldr	r0, [r0, #0]
 8009ce8:	9301      	str	r3, [sp, #4]
 8009cea:	a902      	add	r1, sp, #8
 8009cec:	f003 fa92 	bl	800d214 <_svfiprintf_r>
 8009cf0:	9b02      	ldr	r3, [sp, #8]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	701a      	strb	r2, [r3, #0]
 8009cf6:	b01c      	add	sp, #112	; 0x70
 8009cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cfc:	b003      	add	sp, #12
 8009cfe:	4770      	bx	lr
 8009d00:	200000b4 	.word	0x200000b4
 8009d04:	ffff0208 	.word	0xffff0208

08009d08 <__sread>:
 8009d08:	b510      	push	{r4, lr}
 8009d0a:	460c      	mov	r4, r1
 8009d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d10:	f003 fcda 	bl	800d6c8 <_read_r>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	bfab      	itete	ge
 8009d18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d1a:	89a3      	ldrhlt	r3, [r4, #12]
 8009d1c:	181b      	addge	r3, r3, r0
 8009d1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d22:	bfac      	ite	ge
 8009d24:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d26:	81a3      	strhlt	r3, [r4, #12]
 8009d28:	bd10      	pop	{r4, pc}

08009d2a <__swrite>:
 8009d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d2e:	461f      	mov	r7, r3
 8009d30:	898b      	ldrh	r3, [r1, #12]
 8009d32:	05db      	lsls	r3, r3, #23
 8009d34:	4605      	mov	r5, r0
 8009d36:	460c      	mov	r4, r1
 8009d38:	4616      	mov	r6, r2
 8009d3a:	d505      	bpl.n	8009d48 <__swrite+0x1e>
 8009d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d40:	2302      	movs	r3, #2
 8009d42:	2200      	movs	r2, #0
 8009d44:	f002 fc9e 	bl	800c684 <_lseek_r>
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d52:	81a3      	strh	r3, [r4, #12]
 8009d54:	4632      	mov	r2, r6
 8009d56:	463b      	mov	r3, r7
 8009d58:	4628      	mov	r0, r5
 8009d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d5e:	f001 b827 	b.w	800adb0 <_write_r>

08009d62 <__sseek>:
 8009d62:	b510      	push	{r4, lr}
 8009d64:	460c      	mov	r4, r1
 8009d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d6a:	f002 fc8b 	bl	800c684 <_lseek_r>
 8009d6e:	1c43      	adds	r3, r0, #1
 8009d70:	89a3      	ldrh	r3, [r4, #12]
 8009d72:	bf15      	itete	ne
 8009d74:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d7e:	81a3      	strheq	r3, [r4, #12]
 8009d80:	bf18      	it	ne
 8009d82:	81a3      	strhne	r3, [r4, #12]
 8009d84:	bd10      	pop	{r4, pc}

08009d86 <__sclose>:
 8009d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d8a:	f001 b8af 	b.w	800aeec <_close_r>

08009d8e <strncmp>:
 8009d8e:	b510      	push	{r4, lr}
 8009d90:	b17a      	cbz	r2, 8009db2 <strncmp+0x24>
 8009d92:	4603      	mov	r3, r0
 8009d94:	3901      	subs	r1, #1
 8009d96:	1884      	adds	r4, r0, r2
 8009d98:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009d9c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009da0:	4290      	cmp	r0, r2
 8009da2:	d101      	bne.n	8009da8 <strncmp+0x1a>
 8009da4:	42a3      	cmp	r3, r4
 8009da6:	d101      	bne.n	8009dac <strncmp+0x1e>
 8009da8:	1a80      	subs	r0, r0, r2
 8009daa:	bd10      	pop	{r4, pc}
 8009dac:	2800      	cmp	r0, #0
 8009dae:	d1f3      	bne.n	8009d98 <strncmp+0xa>
 8009db0:	e7fa      	b.n	8009da8 <strncmp+0x1a>
 8009db2:	4610      	mov	r0, r2
 8009db4:	e7f9      	b.n	8009daa <strncmp+0x1c>

08009db6 <sulp>:
 8009db6:	b570      	push	{r4, r5, r6, lr}
 8009db8:	4604      	mov	r4, r0
 8009dba:	460d      	mov	r5, r1
 8009dbc:	ec45 4b10 	vmov	d0, r4, r5
 8009dc0:	4616      	mov	r6, r2
 8009dc2:	f003 f867 	bl	800ce94 <__ulp>
 8009dc6:	ec51 0b10 	vmov	r0, r1, d0
 8009dca:	b17e      	cbz	r6, 8009dec <sulp+0x36>
 8009dcc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009dd0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	dd09      	ble.n	8009dec <sulp+0x36>
 8009dd8:	051b      	lsls	r3, r3, #20
 8009dda:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009dde:	2400      	movs	r4, #0
 8009de0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009de4:	4622      	mov	r2, r4
 8009de6:	462b      	mov	r3, r5
 8009de8:	f7f6 fc0e 	bl	8000608 <__aeabi_dmul>
 8009dec:	bd70      	pop	{r4, r5, r6, pc}
	...

08009df0 <_strtod_l>:
 8009df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df4:	ed2d 8b02 	vpush	{d8}
 8009df8:	b09d      	sub	sp, #116	; 0x74
 8009dfa:	461f      	mov	r7, r3
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	9318      	str	r3, [sp, #96]	; 0x60
 8009e00:	4ba2      	ldr	r3, [pc, #648]	; (800a08c <_strtod_l+0x29c>)
 8009e02:	9213      	str	r2, [sp, #76]	; 0x4c
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	9305      	str	r3, [sp, #20]
 8009e08:	4604      	mov	r4, r0
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	4688      	mov	r8, r1
 8009e0e:	f7f6 f9e7 	bl	80001e0 <strlen>
 8009e12:	f04f 0a00 	mov.w	sl, #0
 8009e16:	4605      	mov	r5, r0
 8009e18:	f04f 0b00 	mov.w	fp, #0
 8009e1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009e20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e22:	781a      	ldrb	r2, [r3, #0]
 8009e24:	2a2b      	cmp	r2, #43	; 0x2b
 8009e26:	d04e      	beq.n	8009ec6 <_strtod_l+0xd6>
 8009e28:	d83b      	bhi.n	8009ea2 <_strtod_l+0xb2>
 8009e2a:	2a0d      	cmp	r2, #13
 8009e2c:	d834      	bhi.n	8009e98 <_strtod_l+0xa8>
 8009e2e:	2a08      	cmp	r2, #8
 8009e30:	d834      	bhi.n	8009e9c <_strtod_l+0xac>
 8009e32:	2a00      	cmp	r2, #0
 8009e34:	d03e      	beq.n	8009eb4 <_strtod_l+0xc4>
 8009e36:	2300      	movs	r3, #0
 8009e38:	930a      	str	r3, [sp, #40]	; 0x28
 8009e3a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009e3c:	7833      	ldrb	r3, [r6, #0]
 8009e3e:	2b30      	cmp	r3, #48	; 0x30
 8009e40:	f040 80b0 	bne.w	8009fa4 <_strtod_l+0x1b4>
 8009e44:	7873      	ldrb	r3, [r6, #1]
 8009e46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009e4a:	2b58      	cmp	r3, #88	; 0x58
 8009e4c:	d168      	bne.n	8009f20 <_strtod_l+0x130>
 8009e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e50:	9301      	str	r3, [sp, #4]
 8009e52:	ab18      	add	r3, sp, #96	; 0x60
 8009e54:	9702      	str	r7, [sp, #8]
 8009e56:	9300      	str	r3, [sp, #0]
 8009e58:	4a8d      	ldr	r2, [pc, #564]	; (800a090 <_strtod_l+0x2a0>)
 8009e5a:	ab19      	add	r3, sp, #100	; 0x64
 8009e5c:	a917      	add	r1, sp, #92	; 0x5c
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f002 f900 	bl	800c064 <__gethex>
 8009e64:	f010 0707 	ands.w	r7, r0, #7
 8009e68:	4605      	mov	r5, r0
 8009e6a:	d005      	beq.n	8009e78 <_strtod_l+0x88>
 8009e6c:	2f06      	cmp	r7, #6
 8009e6e:	d12c      	bne.n	8009eca <_strtod_l+0xda>
 8009e70:	3601      	adds	r6, #1
 8009e72:	2300      	movs	r3, #0
 8009e74:	9617      	str	r6, [sp, #92]	; 0x5c
 8009e76:	930a      	str	r3, [sp, #40]	; 0x28
 8009e78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f040 8590 	bne.w	800a9a0 <_strtod_l+0xbb0>
 8009e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e82:	b1eb      	cbz	r3, 8009ec0 <_strtod_l+0xd0>
 8009e84:	4652      	mov	r2, sl
 8009e86:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009e8a:	ec43 2b10 	vmov	d0, r2, r3
 8009e8e:	b01d      	add	sp, #116	; 0x74
 8009e90:	ecbd 8b02 	vpop	{d8}
 8009e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e98:	2a20      	cmp	r2, #32
 8009e9a:	d1cc      	bne.n	8009e36 <_strtod_l+0x46>
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009ea0:	e7be      	b.n	8009e20 <_strtod_l+0x30>
 8009ea2:	2a2d      	cmp	r2, #45	; 0x2d
 8009ea4:	d1c7      	bne.n	8009e36 <_strtod_l+0x46>
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	920a      	str	r2, [sp, #40]	; 0x28
 8009eaa:	1c5a      	adds	r2, r3, #1
 8009eac:	9217      	str	r2, [sp, #92]	; 0x5c
 8009eae:	785b      	ldrb	r3, [r3, #1]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1c2      	bne.n	8009e3a <_strtod_l+0x4a>
 8009eb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009eb6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	f040 856e 	bne.w	800a99c <_strtod_l+0xbac>
 8009ec0:	4652      	mov	r2, sl
 8009ec2:	465b      	mov	r3, fp
 8009ec4:	e7e1      	b.n	8009e8a <_strtod_l+0x9a>
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	e7ee      	b.n	8009ea8 <_strtod_l+0xb8>
 8009eca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009ecc:	b13a      	cbz	r2, 8009ede <_strtod_l+0xee>
 8009ece:	2135      	movs	r1, #53	; 0x35
 8009ed0:	a81a      	add	r0, sp, #104	; 0x68
 8009ed2:	f003 f8ea 	bl	800d0aa <__copybits>
 8009ed6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f002 fca9 	bl	800c830 <_Bfree>
 8009ede:	3f01      	subs	r7, #1
 8009ee0:	2f04      	cmp	r7, #4
 8009ee2:	d806      	bhi.n	8009ef2 <_strtod_l+0x102>
 8009ee4:	e8df f007 	tbb	[pc, r7]
 8009ee8:	1714030a 	.word	0x1714030a
 8009eec:	0a          	.byte	0x0a
 8009eed:	00          	.byte	0x00
 8009eee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009ef2:	0728      	lsls	r0, r5, #28
 8009ef4:	d5c0      	bpl.n	8009e78 <_strtod_l+0x88>
 8009ef6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009efa:	e7bd      	b.n	8009e78 <_strtod_l+0x88>
 8009efc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009f00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009f02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009f06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009f0a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009f0e:	e7f0      	b.n	8009ef2 <_strtod_l+0x102>
 8009f10:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a094 <_strtod_l+0x2a4>
 8009f14:	e7ed      	b.n	8009ef2 <_strtod_l+0x102>
 8009f16:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009f1a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009f1e:	e7e8      	b.n	8009ef2 <_strtod_l+0x102>
 8009f20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f22:	1c5a      	adds	r2, r3, #1
 8009f24:	9217      	str	r2, [sp, #92]	; 0x5c
 8009f26:	785b      	ldrb	r3, [r3, #1]
 8009f28:	2b30      	cmp	r3, #48	; 0x30
 8009f2a:	d0f9      	beq.n	8009f20 <_strtod_l+0x130>
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d0a3      	beq.n	8009e78 <_strtod_l+0x88>
 8009f30:	2301      	movs	r3, #1
 8009f32:	f04f 0900 	mov.w	r9, #0
 8009f36:	9304      	str	r3, [sp, #16]
 8009f38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f3a:	9308      	str	r3, [sp, #32]
 8009f3c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009f40:	464f      	mov	r7, r9
 8009f42:	220a      	movs	r2, #10
 8009f44:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009f46:	7806      	ldrb	r6, [r0, #0]
 8009f48:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009f4c:	b2d9      	uxtb	r1, r3
 8009f4e:	2909      	cmp	r1, #9
 8009f50:	d92a      	bls.n	8009fa8 <_strtod_l+0x1b8>
 8009f52:	9905      	ldr	r1, [sp, #20]
 8009f54:	462a      	mov	r2, r5
 8009f56:	f7ff ff1a 	bl	8009d8e <strncmp>
 8009f5a:	b398      	cbz	r0, 8009fc4 <_strtod_l+0x1d4>
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	4632      	mov	r2, r6
 8009f60:	463d      	mov	r5, r7
 8009f62:	9005      	str	r0, [sp, #20]
 8009f64:	4603      	mov	r3, r0
 8009f66:	2a65      	cmp	r2, #101	; 0x65
 8009f68:	d001      	beq.n	8009f6e <_strtod_l+0x17e>
 8009f6a:	2a45      	cmp	r2, #69	; 0x45
 8009f6c:	d118      	bne.n	8009fa0 <_strtod_l+0x1b0>
 8009f6e:	b91d      	cbnz	r5, 8009f78 <_strtod_l+0x188>
 8009f70:	9a04      	ldr	r2, [sp, #16]
 8009f72:	4302      	orrs	r2, r0
 8009f74:	d09e      	beq.n	8009eb4 <_strtod_l+0xc4>
 8009f76:	2500      	movs	r5, #0
 8009f78:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009f7c:	f108 0201 	add.w	r2, r8, #1
 8009f80:	9217      	str	r2, [sp, #92]	; 0x5c
 8009f82:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009f86:	2a2b      	cmp	r2, #43	; 0x2b
 8009f88:	d075      	beq.n	800a076 <_strtod_l+0x286>
 8009f8a:	2a2d      	cmp	r2, #45	; 0x2d
 8009f8c:	d07b      	beq.n	800a086 <_strtod_l+0x296>
 8009f8e:	f04f 0c00 	mov.w	ip, #0
 8009f92:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009f96:	2909      	cmp	r1, #9
 8009f98:	f240 8082 	bls.w	800a0a0 <_strtod_l+0x2b0>
 8009f9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009fa0:	2600      	movs	r6, #0
 8009fa2:	e09d      	b.n	800a0e0 <_strtod_l+0x2f0>
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	e7c4      	b.n	8009f32 <_strtod_l+0x142>
 8009fa8:	2f08      	cmp	r7, #8
 8009faa:	bfd8      	it	le
 8009fac:	9907      	ldrle	r1, [sp, #28]
 8009fae:	f100 0001 	add.w	r0, r0, #1
 8009fb2:	bfda      	itte	le
 8009fb4:	fb02 3301 	mlale	r3, r2, r1, r3
 8009fb8:	9307      	strle	r3, [sp, #28]
 8009fba:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009fbe:	3701      	adds	r7, #1
 8009fc0:	9017      	str	r0, [sp, #92]	; 0x5c
 8009fc2:	e7bf      	b.n	8009f44 <_strtod_l+0x154>
 8009fc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009fc6:	195a      	adds	r2, r3, r5
 8009fc8:	9217      	str	r2, [sp, #92]	; 0x5c
 8009fca:	5d5a      	ldrb	r2, [r3, r5]
 8009fcc:	2f00      	cmp	r7, #0
 8009fce:	d037      	beq.n	800a040 <_strtod_l+0x250>
 8009fd0:	9005      	str	r0, [sp, #20]
 8009fd2:	463d      	mov	r5, r7
 8009fd4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009fd8:	2b09      	cmp	r3, #9
 8009fda:	d912      	bls.n	800a002 <_strtod_l+0x212>
 8009fdc:	2301      	movs	r3, #1
 8009fde:	e7c2      	b.n	8009f66 <_strtod_l+0x176>
 8009fe0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009fe2:	1c5a      	adds	r2, r3, #1
 8009fe4:	9217      	str	r2, [sp, #92]	; 0x5c
 8009fe6:	785a      	ldrb	r2, [r3, #1]
 8009fe8:	3001      	adds	r0, #1
 8009fea:	2a30      	cmp	r2, #48	; 0x30
 8009fec:	d0f8      	beq.n	8009fe0 <_strtod_l+0x1f0>
 8009fee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009ff2:	2b08      	cmp	r3, #8
 8009ff4:	f200 84d9 	bhi.w	800a9aa <_strtod_l+0xbba>
 8009ff8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ffa:	9005      	str	r0, [sp, #20]
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	9308      	str	r3, [sp, #32]
 800a000:	4605      	mov	r5, r0
 800a002:	3a30      	subs	r2, #48	; 0x30
 800a004:	f100 0301 	add.w	r3, r0, #1
 800a008:	d014      	beq.n	800a034 <_strtod_l+0x244>
 800a00a:	9905      	ldr	r1, [sp, #20]
 800a00c:	4419      	add	r1, r3
 800a00e:	9105      	str	r1, [sp, #20]
 800a010:	462b      	mov	r3, r5
 800a012:	eb00 0e05 	add.w	lr, r0, r5
 800a016:	210a      	movs	r1, #10
 800a018:	4573      	cmp	r3, lr
 800a01a:	d113      	bne.n	800a044 <_strtod_l+0x254>
 800a01c:	182b      	adds	r3, r5, r0
 800a01e:	2b08      	cmp	r3, #8
 800a020:	f105 0501 	add.w	r5, r5, #1
 800a024:	4405      	add	r5, r0
 800a026:	dc1c      	bgt.n	800a062 <_strtod_l+0x272>
 800a028:	9907      	ldr	r1, [sp, #28]
 800a02a:	230a      	movs	r3, #10
 800a02c:	fb03 2301 	mla	r3, r3, r1, r2
 800a030:	9307      	str	r3, [sp, #28]
 800a032:	2300      	movs	r3, #0
 800a034:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a036:	1c51      	adds	r1, r2, #1
 800a038:	9117      	str	r1, [sp, #92]	; 0x5c
 800a03a:	7852      	ldrb	r2, [r2, #1]
 800a03c:	4618      	mov	r0, r3
 800a03e:	e7c9      	b.n	8009fd4 <_strtod_l+0x1e4>
 800a040:	4638      	mov	r0, r7
 800a042:	e7d2      	b.n	8009fea <_strtod_l+0x1fa>
 800a044:	2b08      	cmp	r3, #8
 800a046:	dc04      	bgt.n	800a052 <_strtod_l+0x262>
 800a048:	9e07      	ldr	r6, [sp, #28]
 800a04a:	434e      	muls	r6, r1
 800a04c:	9607      	str	r6, [sp, #28]
 800a04e:	3301      	adds	r3, #1
 800a050:	e7e2      	b.n	800a018 <_strtod_l+0x228>
 800a052:	f103 0c01 	add.w	ip, r3, #1
 800a056:	f1bc 0f10 	cmp.w	ip, #16
 800a05a:	bfd8      	it	le
 800a05c:	fb01 f909 	mulle.w	r9, r1, r9
 800a060:	e7f5      	b.n	800a04e <_strtod_l+0x25e>
 800a062:	2d10      	cmp	r5, #16
 800a064:	bfdc      	itt	le
 800a066:	230a      	movle	r3, #10
 800a068:	fb03 2909 	mlale	r9, r3, r9, r2
 800a06c:	e7e1      	b.n	800a032 <_strtod_l+0x242>
 800a06e:	2300      	movs	r3, #0
 800a070:	9305      	str	r3, [sp, #20]
 800a072:	2301      	movs	r3, #1
 800a074:	e77c      	b.n	8009f70 <_strtod_l+0x180>
 800a076:	f04f 0c00 	mov.w	ip, #0
 800a07a:	f108 0202 	add.w	r2, r8, #2
 800a07e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a080:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a084:	e785      	b.n	8009f92 <_strtod_l+0x1a2>
 800a086:	f04f 0c01 	mov.w	ip, #1
 800a08a:	e7f6      	b.n	800a07a <_strtod_l+0x28a>
 800a08c:	0800e2c4 	.word	0x0800e2c4
 800a090:	0800e0dc 	.word	0x0800e0dc
 800a094:	7ff00000 	.word	0x7ff00000
 800a098:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a09a:	1c51      	adds	r1, r2, #1
 800a09c:	9117      	str	r1, [sp, #92]	; 0x5c
 800a09e:	7852      	ldrb	r2, [r2, #1]
 800a0a0:	2a30      	cmp	r2, #48	; 0x30
 800a0a2:	d0f9      	beq.n	800a098 <_strtod_l+0x2a8>
 800a0a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a0a8:	2908      	cmp	r1, #8
 800a0aa:	f63f af79 	bhi.w	8009fa0 <_strtod_l+0x1b0>
 800a0ae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a0b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a0b4:	9206      	str	r2, [sp, #24]
 800a0b6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a0b8:	1c51      	adds	r1, r2, #1
 800a0ba:	9117      	str	r1, [sp, #92]	; 0x5c
 800a0bc:	7852      	ldrb	r2, [r2, #1]
 800a0be:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a0c2:	2e09      	cmp	r6, #9
 800a0c4:	d937      	bls.n	800a136 <_strtod_l+0x346>
 800a0c6:	9e06      	ldr	r6, [sp, #24]
 800a0c8:	1b89      	subs	r1, r1, r6
 800a0ca:	2908      	cmp	r1, #8
 800a0cc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a0d0:	dc02      	bgt.n	800a0d8 <_strtod_l+0x2e8>
 800a0d2:	4576      	cmp	r6, lr
 800a0d4:	bfa8      	it	ge
 800a0d6:	4676      	movge	r6, lr
 800a0d8:	f1bc 0f00 	cmp.w	ip, #0
 800a0dc:	d000      	beq.n	800a0e0 <_strtod_l+0x2f0>
 800a0de:	4276      	negs	r6, r6
 800a0e0:	2d00      	cmp	r5, #0
 800a0e2:	d14d      	bne.n	800a180 <_strtod_l+0x390>
 800a0e4:	9904      	ldr	r1, [sp, #16]
 800a0e6:	4301      	orrs	r1, r0
 800a0e8:	f47f aec6 	bne.w	8009e78 <_strtod_l+0x88>
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f47f aee1 	bne.w	8009eb4 <_strtod_l+0xc4>
 800a0f2:	2a69      	cmp	r2, #105	; 0x69
 800a0f4:	d027      	beq.n	800a146 <_strtod_l+0x356>
 800a0f6:	dc24      	bgt.n	800a142 <_strtod_l+0x352>
 800a0f8:	2a49      	cmp	r2, #73	; 0x49
 800a0fa:	d024      	beq.n	800a146 <_strtod_l+0x356>
 800a0fc:	2a4e      	cmp	r2, #78	; 0x4e
 800a0fe:	f47f aed9 	bne.w	8009eb4 <_strtod_l+0xc4>
 800a102:	499f      	ldr	r1, [pc, #636]	; (800a380 <_strtod_l+0x590>)
 800a104:	a817      	add	r0, sp, #92	; 0x5c
 800a106:	f002 fa05 	bl	800c514 <__match>
 800a10a:	2800      	cmp	r0, #0
 800a10c:	f43f aed2 	beq.w	8009eb4 <_strtod_l+0xc4>
 800a110:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	2b28      	cmp	r3, #40	; 0x28
 800a116:	d12d      	bne.n	800a174 <_strtod_l+0x384>
 800a118:	499a      	ldr	r1, [pc, #616]	; (800a384 <_strtod_l+0x594>)
 800a11a:	aa1a      	add	r2, sp, #104	; 0x68
 800a11c:	a817      	add	r0, sp, #92	; 0x5c
 800a11e:	f002 fa0d 	bl	800c53c <__hexnan>
 800a122:	2805      	cmp	r0, #5
 800a124:	d126      	bne.n	800a174 <_strtod_l+0x384>
 800a126:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a128:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a12c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a130:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a134:	e6a0      	b.n	8009e78 <_strtod_l+0x88>
 800a136:	210a      	movs	r1, #10
 800a138:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a13c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a140:	e7b9      	b.n	800a0b6 <_strtod_l+0x2c6>
 800a142:	2a6e      	cmp	r2, #110	; 0x6e
 800a144:	e7db      	b.n	800a0fe <_strtod_l+0x30e>
 800a146:	4990      	ldr	r1, [pc, #576]	; (800a388 <_strtod_l+0x598>)
 800a148:	a817      	add	r0, sp, #92	; 0x5c
 800a14a:	f002 f9e3 	bl	800c514 <__match>
 800a14e:	2800      	cmp	r0, #0
 800a150:	f43f aeb0 	beq.w	8009eb4 <_strtod_l+0xc4>
 800a154:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a156:	498d      	ldr	r1, [pc, #564]	; (800a38c <_strtod_l+0x59c>)
 800a158:	3b01      	subs	r3, #1
 800a15a:	a817      	add	r0, sp, #92	; 0x5c
 800a15c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a15e:	f002 f9d9 	bl	800c514 <__match>
 800a162:	b910      	cbnz	r0, 800a16a <_strtod_l+0x37a>
 800a164:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a166:	3301      	adds	r3, #1
 800a168:	9317      	str	r3, [sp, #92]	; 0x5c
 800a16a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a39c <_strtod_l+0x5ac>
 800a16e:	f04f 0a00 	mov.w	sl, #0
 800a172:	e681      	b.n	8009e78 <_strtod_l+0x88>
 800a174:	4886      	ldr	r0, [pc, #536]	; (800a390 <_strtod_l+0x5a0>)
 800a176:	f003 fabb 	bl	800d6f0 <nan>
 800a17a:	ec5b ab10 	vmov	sl, fp, d0
 800a17e:	e67b      	b.n	8009e78 <_strtod_l+0x88>
 800a180:	9b05      	ldr	r3, [sp, #20]
 800a182:	9807      	ldr	r0, [sp, #28]
 800a184:	1af3      	subs	r3, r6, r3
 800a186:	2f00      	cmp	r7, #0
 800a188:	bf08      	it	eq
 800a18a:	462f      	moveq	r7, r5
 800a18c:	2d10      	cmp	r5, #16
 800a18e:	9306      	str	r3, [sp, #24]
 800a190:	46a8      	mov	r8, r5
 800a192:	bfa8      	it	ge
 800a194:	f04f 0810 	movge.w	r8, #16
 800a198:	f7f6 f9bc 	bl	8000514 <__aeabi_ui2d>
 800a19c:	2d09      	cmp	r5, #9
 800a19e:	4682      	mov	sl, r0
 800a1a0:	468b      	mov	fp, r1
 800a1a2:	dd13      	ble.n	800a1cc <_strtod_l+0x3dc>
 800a1a4:	4b7b      	ldr	r3, [pc, #492]	; (800a394 <_strtod_l+0x5a4>)
 800a1a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a1aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a1ae:	f7f6 fa2b 	bl	8000608 <__aeabi_dmul>
 800a1b2:	4682      	mov	sl, r0
 800a1b4:	4648      	mov	r0, r9
 800a1b6:	468b      	mov	fp, r1
 800a1b8:	f7f6 f9ac 	bl	8000514 <__aeabi_ui2d>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	460b      	mov	r3, r1
 800a1c0:	4650      	mov	r0, sl
 800a1c2:	4659      	mov	r1, fp
 800a1c4:	f7f6 f86a 	bl	800029c <__adddf3>
 800a1c8:	4682      	mov	sl, r0
 800a1ca:	468b      	mov	fp, r1
 800a1cc:	2d0f      	cmp	r5, #15
 800a1ce:	dc38      	bgt.n	800a242 <_strtod_l+0x452>
 800a1d0:	9b06      	ldr	r3, [sp, #24]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	f43f ae50 	beq.w	8009e78 <_strtod_l+0x88>
 800a1d8:	dd24      	ble.n	800a224 <_strtod_l+0x434>
 800a1da:	2b16      	cmp	r3, #22
 800a1dc:	dc0b      	bgt.n	800a1f6 <_strtod_l+0x406>
 800a1de:	496d      	ldr	r1, [pc, #436]	; (800a394 <_strtod_l+0x5a4>)
 800a1e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a1e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1e8:	4652      	mov	r2, sl
 800a1ea:	465b      	mov	r3, fp
 800a1ec:	f7f6 fa0c 	bl	8000608 <__aeabi_dmul>
 800a1f0:	4682      	mov	sl, r0
 800a1f2:	468b      	mov	fp, r1
 800a1f4:	e640      	b.n	8009e78 <_strtod_l+0x88>
 800a1f6:	9a06      	ldr	r2, [sp, #24]
 800a1f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	db20      	blt.n	800a242 <_strtod_l+0x452>
 800a200:	4c64      	ldr	r4, [pc, #400]	; (800a394 <_strtod_l+0x5a4>)
 800a202:	f1c5 050f 	rsb	r5, r5, #15
 800a206:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a20a:	4652      	mov	r2, sl
 800a20c:	465b      	mov	r3, fp
 800a20e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a212:	f7f6 f9f9 	bl	8000608 <__aeabi_dmul>
 800a216:	9b06      	ldr	r3, [sp, #24]
 800a218:	1b5d      	subs	r5, r3, r5
 800a21a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a21e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a222:	e7e3      	b.n	800a1ec <_strtod_l+0x3fc>
 800a224:	9b06      	ldr	r3, [sp, #24]
 800a226:	3316      	adds	r3, #22
 800a228:	db0b      	blt.n	800a242 <_strtod_l+0x452>
 800a22a:	9b05      	ldr	r3, [sp, #20]
 800a22c:	1b9e      	subs	r6, r3, r6
 800a22e:	4b59      	ldr	r3, [pc, #356]	; (800a394 <_strtod_l+0x5a4>)
 800a230:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a234:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a238:	4650      	mov	r0, sl
 800a23a:	4659      	mov	r1, fp
 800a23c:	f7f6 fb0e 	bl	800085c <__aeabi_ddiv>
 800a240:	e7d6      	b.n	800a1f0 <_strtod_l+0x400>
 800a242:	9b06      	ldr	r3, [sp, #24]
 800a244:	eba5 0808 	sub.w	r8, r5, r8
 800a248:	4498      	add	r8, r3
 800a24a:	f1b8 0f00 	cmp.w	r8, #0
 800a24e:	dd74      	ble.n	800a33a <_strtod_l+0x54a>
 800a250:	f018 030f 	ands.w	r3, r8, #15
 800a254:	d00a      	beq.n	800a26c <_strtod_l+0x47c>
 800a256:	494f      	ldr	r1, [pc, #316]	; (800a394 <_strtod_l+0x5a4>)
 800a258:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a25c:	4652      	mov	r2, sl
 800a25e:	465b      	mov	r3, fp
 800a260:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a264:	f7f6 f9d0 	bl	8000608 <__aeabi_dmul>
 800a268:	4682      	mov	sl, r0
 800a26a:	468b      	mov	fp, r1
 800a26c:	f038 080f 	bics.w	r8, r8, #15
 800a270:	d04f      	beq.n	800a312 <_strtod_l+0x522>
 800a272:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a276:	dd22      	ble.n	800a2be <_strtod_l+0x4ce>
 800a278:	2500      	movs	r5, #0
 800a27a:	462e      	mov	r6, r5
 800a27c:	9507      	str	r5, [sp, #28]
 800a27e:	9505      	str	r5, [sp, #20]
 800a280:	2322      	movs	r3, #34	; 0x22
 800a282:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a39c <_strtod_l+0x5ac>
 800a286:	6023      	str	r3, [r4, #0]
 800a288:	f04f 0a00 	mov.w	sl, #0
 800a28c:	9b07      	ldr	r3, [sp, #28]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	f43f adf2 	beq.w	8009e78 <_strtod_l+0x88>
 800a294:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a296:	4620      	mov	r0, r4
 800a298:	f002 faca 	bl	800c830 <_Bfree>
 800a29c:	9905      	ldr	r1, [sp, #20]
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f002 fac6 	bl	800c830 <_Bfree>
 800a2a4:	4631      	mov	r1, r6
 800a2a6:	4620      	mov	r0, r4
 800a2a8:	f002 fac2 	bl	800c830 <_Bfree>
 800a2ac:	9907      	ldr	r1, [sp, #28]
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	f002 fabe 	bl	800c830 <_Bfree>
 800a2b4:	4629      	mov	r1, r5
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	f002 faba 	bl	800c830 <_Bfree>
 800a2bc:	e5dc      	b.n	8009e78 <_strtod_l+0x88>
 800a2be:	4b36      	ldr	r3, [pc, #216]	; (800a398 <_strtod_l+0x5a8>)
 800a2c0:	9304      	str	r3, [sp, #16]
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a2c8:	4650      	mov	r0, sl
 800a2ca:	4659      	mov	r1, fp
 800a2cc:	4699      	mov	r9, r3
 800a2ce:	f1b8 0f01 	cmp.w	r8, #1
 800a2d2:	dc21      	bgt.n	800a318 <_strtod_l+0x528>
 800a2d4:	b10b      	cbz	r3, 800a2da <_strtod_l+0x4ea>
 800a2d6:	4682      	mov	sl, r0
 800a2d8:	468b      	mov	fp, r1
 800a2da:	4b2f      	ldr	r3, [pc, #188]	; (800a398 <_strtod_l+0x5a8>)
 800a2dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a2e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a2e4:	4652      	mov	r2, sl
 800a2e6:	465b      	mov	r3, fp
 800a2e8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a2ec:	f7f6 f98c 	bl	8000608 <__aeabi_dmul>
 800a2f0:	4b2a      	ldr	r3, [pc, #168]	; (800a39c <_strtod_l+0x5ac>)
 800a2f2:	460a      	mov	r2, r1
 800a2f4:	400b      	ands	r3, r1
 800a2f6:	492a      	ldr	r1, [pc, #168]	; (800a3a0 <_strtod_l+0x5b0>)
 800a2f8:	428b      	cmp	r3, r1
 800a2fa:	4682      	mov	sl, r0
 800a2fc:	d8bc      	bhi.n	800a278 <_strtod_l+0x488>
 800a2fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a302:	428b      	cmp	r3, r1
 800a304:	bf86      	itte	hi
 800a306:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a3a4 <_strtod_l+0x5b4>
 800a30a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800a30e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a312:	2300      	movs	r3, #0
 800a314:	9304      	str	r3, [sp, #16]
 800a316:	e084      	b.n	800a422 <_strtod_l+0x632>
 800a318:	f018 0f01 	tst.w	r8, #1
 800a31c:	d005      	beq.n	800a32a <_strtod_l+0x53a>
 800a31e:	9b04      	ldr	r3, [sp, #16]
 800a320:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a324:	f7f6 f970 	bl	8000608 <__aeabi_dmul>
 800a328:	2301      	movs	r3, #1
 800a32a:	9a04      	ldr	r2, [sp, #16]
 800a32c:	3208      	adds	r2, #8
 800a32e:	f109 0901 	add.w	r9, r9, #1
 800a332:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a336:	9204      	str	r2, [sp, #16]
 800a338:	e7c9      	b.n	800a2ce <_strtod_l+0x4de>
 800a33a:	d0ea      	beq.n	800a312 <_strtod_l+0x522>
 800a33c:	f1c8 0800 	rsb	r8, r8, #0
 800a340:	f018 020f 	ands.w	r2, r8, #15
 800a344:	d00a      	beq.n	800a35c <_strtod_l+0x56c>
 800a346:	4b13      	ldr	r3, [pc, #76]	; (800a394 <_strtod_l+0x5a4>)
 800a348:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a34c:	4650      	mov	r0, sl
 800a34e:	4659      	mov	r1, fp
 800a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a354:	f7f6 fa82 	bl	800085c <__aeabi_ddiv>
 800a358:	4682      	mov	sl, r0
 800a35a:	468b      	mov	fp, r1
 800a35c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a360:	d0d7      	beq.n	800a312 <_strtod_l+0x522>
 800a362:	f1b8 0f1f 	cmp.w	r8, #31
 800a366:	dd1f      	ble.n	800a3a8 <_strtod_l+0x5b8>
 800a368:	2500      	movs	r5, #0
 800a36a:	462e      	mov	r6, r5
 800a36c:	9507      	str	r5, [sp, #28]
 800a36e:	9505      	str	r5, [sp, #20]
 800a370:	2322      	movs	r3, #34	; 0x22
 800a372:	f04f 0a00 	mov.w	sl, #0
 800a376:	f04f 0b00 	mov.w	fp, #0
 800a37a:	6023      	str	r3, [r4, #0]
 800a37c:	e786      	b.n	800a28c <_strtod_l+0x49c>
 800a37e:	bf00      	nop
 800a380:	0800e0b5 	.word	0x0800e0b5
 800a384:	0800e0f0 	.word	0x0800e0f0
 800a388:	0800e0ad 	.word	0x0800e0ad
 800a38c:	0800e16f 	.word	0x0800e16f
 800a390:	0800e16b 	.word	0x0800e16b
 800a394:	0800e360 	.word	0x0800e360
 800a398:	0800e338 	.word	0x0800e338
 800a39c:	7ff00000 	.word	0x7ff00000
 800a3a0:	7ca00000 	.word	0x7ca00000
 800a3a4:	7fefffff 	.word	0x7fefffff
 800a3a8:	f018 0310 	ands.w	r3, r8, #16
 800a3ac:	bf18      	it	ne
 800a3ae:	236a      	movne	r3, #106	; 0x6a
 800a3b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a760 <_strtod_l+0x970>
 800a3b4:	9304      	str	r3, [sp, #16]
 800a3b6:	4650      	mov	r0, sl
 800a3b8:	4659      	mov	r1, fp
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	f018 0f01 	tst.w	r8, #1
 800a3c0:	d004      	beq.n	800a3cc <_strtod_l+0x5dc>
 800a3c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a3c6:	f7f6 f91f 	bl	8000608 <__aeabi_dmul>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a3d0:	f109 0908 	add.w	r9, r9, #8
 800a3d4:	d1f2      	bne.n	800a3bc <_strtod_l+0x5cc>
 800a3d6:	b10b      	cbz	r3, 800a3dc <_strtod_l+0x5ec>
 800a3d8:	4682      	mov	sl, r0
 800a3da:	468b      	mov	fp, r1
 800a3dc:	9b04      	ldr	r3, [sp, #16]
 800a3de:	b1c3      	cbz	r3, 800a412 <_strtod_l+0x622>
 800a3e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a3e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	4659      	mov	r1, fp
 800a3ec:	dd11      	ble.n	800a412 <_strtod_l+0x622>
 800a3ee:	2b1f      	cmp	r3, #31
 800a3f0:	f340 8124 	ble.w	800a63c <_strtod_l+0x84c>
 800a3f4:	2b34      	cmp	r3, #52	; 0x34
 800a3f6:	bfde      	ittt	le
 800a3f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a3fc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800a400:	fa03 f202 	lslle.w	r2, r3, r2
 800a404:	f04f 0a00 	mov.w	sl, #0
 800a408:	bfcc      	ite	gt
 800a40a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a40e:	ea02 0b01 	andle.w	fp, r2, r1
 800a412:	2200      	movs	r2, #0
 800a414:	2300      	movs	r3, #0
 800a416:	4650      	mov	r0, sl
 800a418:	4659      	mov	r1, fp
 800a41a:	f7f6 fb5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800a41e:	2800      	cmp	r0, #0
 800a420:	d1a2      	bne.n	800a368 <_strtod_l+0x578>
 800a422:	9b07      	ldr	r3, [sp, #28]
 800a424:	9300      	str	r3, [sp, #0]
 800a426:	9908      	ldr	r1, [sp, #32]
 800a428:	462b      	mov	r3, r5
 800a42a:	463a      	mov	r2, r7
 800a42c:	4620      	mov	r0, r4
 800a42e:	f002 fa67 	bl	800c900 <__s2b>
 800a432:	9007      	str	r0, [sp, #28]
 800a434:	2800      	cmp	r0, #0
 800a436:	f43f af1f 	beq.w	800a278 <_strtod_l+0x488>
 800a43a:	9b05      	ldr	r3, [sp, #20]
 800a43c:	1b9e      	subs	r6, r3, r6
 800a43e:	9b06      	ldr	r3, [sp, #24]
 800a440:	2b00      	cmp	r3, #0
 800a442:	bfb4      	ite	lt
 800a444:	4633      	movlt	r3, r6
 800a446:	2300      	movge	r3, #0
 800a448:	930c      	str	r3, [sp, #48]	; 0x30
 800a44a:	9b06      	ldr	r3, [sp, #24]
 800a44c:	2500      	movs	r5, #0
 800a44e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a452:	9312      	str	r3, [sp, #72]	; 0x48
 800a454:	462e      	mov	r6, r5
 800a456:	9b07      	ldr	r3, [sp, #28]
 800a458:	4620      	mov	r0, r4
 800a45a:	6859      	ldr	r1, [r3, #4]
 800a45c:	f002 f9a8 	bl	800c7b0 <_Balloc>
 800a460:	9005      	str	r0, [sp, #20]
 800a462:	2800      	cmp	r0, #0
 800a464:	f43f af0c 	beq.w	800a280 <_strtod_l+0x490>
 800a468:	9b07      	ldr	r3, [sp, #28]
 800a46a:	691a      	ldr	r2, [r3, #16]
 800a46c:	3202      	adds	r2, #2
 800a46e:	f103 010c 	add.w	r1, r3, #12
 800a472:	0092      	lsls	r2, r2, #2
 800a474:	300c      	adds	r0, #12
 800a476:	f7fe feb7 	bl	80091e8 <memcpy>
 800a47a:	ec4b ab10 	vmov	d0, sl, fp
 800a47e:	aa1a      	add	r2, sp, #104	; 0x68
 800a480:	a919      	add	r1, sp, #100	; 0x64
 800a482:	4620      	mov	r0, r4
 800a484:	f002 fd82 	bl	800cf8c <__d2b>
 800a488:	ec4b ab18 	vmov	d8, sl, fp
 800a48c:	9018      	str	r0, [sp, #96]	; 0x60
 800a48e:	2800      	cmp	r0, #0
 800a490:	f43f aef6 	beq.w	800a280 <_strtod_l+0x490>
 800a494:	2101      	movs	r1, #1
 800a496:	4620      	mov	r0, r4
 800a498:	f002 facc 	bl	800ca34 <__i2b>
 800a49c:	4606      	mov	r6, r0
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	f43f aeee 	beq.w	800a280 <_strtod_l+0x490>
 800a4a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a4a6:	9904      	ldr	r1, [sp, #16]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	bfab      	itete	ge
 800a4ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a4ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a4b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a4b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a4b6:	bfac      	ite	ge
 800a4b8:	eb03 0902 	addge.w	r9, r3, r2
 800a4bc:	1ad7      	sublt	r7, r2, r3
 800a4be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a4c0:	eba3 0801 	sub.w	r8, r3, r1
 800a4c4:	4490      	add	r8, r2
 800a4c6:	4ba1      	ldr	r3, [pc, #644]	; (800a74c <_strtod_l+0x95c>)
 800a4c8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a4cc:	4598      	cmp	r8, r3
 800a4ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a4d2:	f280 80c7 	bge.w	800a664 <_strtod_l+0x874>
 800a4d6:	eba3 0308 	sub.w	r3, r3, r8
 800a4da:	2b1f      	cmp	r3, #31
 800a4dc:	eba2 0203 	sub.w	r2, r2, r3
 800a4e0:	f04f 0101 	mov.w	r1, #1
 800a4e4:	f300 80b1 	bgt.w	800a64a <_strtod_l+0x85a>
 800a4e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a4ec:	930d      	str	r3, [sp, #52]	; 0x34
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	9308      	str	r3, [sp, #32]
 800a4f2:	eb09 0802 	add.w	r8, r9, r2
 800a4f6:	9b04      	ldr	r3, [sp, #16]
 800a4f8:	45c1      	cmp	r9, r8
 800a4fa:	4417      	add	r7, r2
 800a4fc:	441f      	add	r7, r3
 800a4fe:	464b      	mov	r3, r9
 800a500:	bfa8      	it	ge
 800a502:	4643      	movge	r3, r8
 800a504:	42bb      	cmp	r3, r7
 800a506:	bfa8      	it	ge
 800a508:	463b      	movge	r3, r7
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	bfc2      	ittt	gt
 800a50e:	eba8 0803 	subgt.w	r8, r8, r3
 800a512:	1aff      	subgt	r7, r7, r3
 800a514:	eba9 0903 	subgt.w	r9, r9, r3
 800a518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	dd17      	ble.n	800a54e <_strtod_l+0x75e>
 800a51e:	4631      	mov	r1, r6
 800a520:	461a      	mov	r2, r3
 800a522:	4620      	mov	r0, r4
 800a524:	f002 fb46 	bl	800cbb4 <__pow5mult>
 800a528:	4606      	mov	r6, r0
 800a52a:	2800      	cmp	r0, #0
 800a52c:	f43f aea8 	beq.w	800a280 <_strtod_l+0x490>
 800a530:	4601      	mov	r1, r0
 800a532:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a534:	4620      	mov	r0, r4
 800a536:	f002 fa93 	bl	800ca60 <__multiply>
 800a53a:	900b      	str	r0, [sp, #44]	; 0x2c
 800a53c:	2800      	cmp	r0, #0
 800a53e:	f43f ae9f 	beq.w	800a280 <_strtod_l+0x490>
 800a542:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a544:	4620      	mov	r0, r4
 800a546:	f002 f973 	bl	800c830 <_Bfree>
 800a54a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a54c:	9318      	str	r3, [sp, #96]	; 0x60
 800a54e:	f1b8 0f00 	cmp.w	r8, #0
 800a552:	f300 808c 	bgt.w	800a66e <_strtod_l+0x87e>
 800a556:	9b06      	ldr	r3, [sp, #24]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	dd08      	ble.n	800a56e <_strtod_l+0x77e>
 800a55c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a55e:	9905      	ldr	r1, [sp, #20]
 800a560:	4620      	mov	r0, r4
 800a562:	f002 fb27 	bl	800cbb4 <__pow5mult>
 800a566:	9005      	str	r0, [sp, #20]
 800a568:	2800      	cmp	r0, #0
 800a56a:	f43f ae89 	beq.w	800a280 <_strtod_l+0x490>
 800a56e:	2f00      	cmp	r7, #0
 800a570:	dd08      	ble.n	800a584 <_strtod_l+0x794>
 800a572:	9905      	ldr	r1, [sp, #20]
 800a574:	463a      	mov	r2, r7
 800a576:	4620      	mov	r0, r4
 800a578:	f002 fb76 	bl	800cc68 <__lshift>
 800a57c:	9005      	str	r0, [sp, #20]
 800a57e:	2800      	cmp	r0, #0
 800a580:	f43f ae7e 	beq.w	800a280 <_strtod_l+0x490>
 800a584:	f1b9 0f00 	cmp.w	r9, #0
 800a588:	dd08      	ble.n	800a59c <_strtod_l+0x7ac>
 800a58a:	4631      	mov	r1, r6
 800a58c:	464a      	mov	r2, r9
 800a58e:	4620      	mov	r0, r4
 800a590:	f002 fb6a 	bl	800cc68 <__lshift>
 800a594:	4606      	mov	r6, r0
 800a596:	2800      	cmp	r0, #0
 800a598:	f43f ae72 	beq.w	800a280 <_strtod_l+0x490>
 800a59c:	9a05      	ldr	r2, [sp, #20]
 800a59e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	f002 fbed 	bl	800cd80 <__mdiff>
 800a5a6:	4605      	mov	r5, r0
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	f43f ae69 	beq.w	800a280 <_strtod_l+0x490>
 800a5ae:	68c3      	ldr	r3, [r0, #12]
 800a5b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	60c3      	str	r3, [r0, #12]
 800a5b6:	4631      	mov	r1, r6
 800a5b8:	f002 fbc6 	bl	800cd48 <__mcmp>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	da60      	bge.n	800a682 <_strtod_l+0x892>
 800a5c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5c2:	ea53 030a 	orrs.w	r3, r3, sl
 800a5c6:	f040 8082 	bne.w	800a6ce <_strtod_l+0x8de>
 800a5ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d17d      	bne.n	800a6ce <_strtod_l+0x8de>
 800a5d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a5d6:	0d1b      	lsrs	r3, r3, #20
 800a5d8:	051b      	lsls	r3, r3, #20
 800a5da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a5de:	d976      	bls.n	800a6ce <_strtod_l+0x8de>
 800a5e0:	696b      	ldr	r3, [r5, #20]
 800a5e2:	b913      	cbnz	r3, 800a5ea <_strtod_l+0x7fa>
 800a5e4:	692b      	ldr	r3, [r5, #16]
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	dd71      	ble.n	800a6ce <_strtod_l+0x8de>
 800a5ea:	4629      	mov	r1, r5
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	f002 fb3a 	bl	800cc68 <__lshift>
 800a5f4:	4631      	mov	r1, r6
 800a5f6:	4605      	mov	r5, r0
 800a5f8:	f002 fba6 	bl	800cd48 <__mcmp>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	dd66      	ble.n	800a6ce <_strtod_l+0x8de>
 800a600:	9904      	ldr	r1, [sp, #16]
 800a602:	4a53      	ldr	r2, [pc, #332]	; (800a750 <_strtod_l+0x960>)
 800a604:	465b      	mov	r3, fp
 800a606:	2900      	cmp	r1, #0
 800a608:	f000 8081 	beq.w	800a70e <_strtod_l+0x91e>
 800a60c:	ea02 010b 	and.w	r1, r2, fp
 800a610:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a614:	dc7b      	bgt.n	800a70e <_strtod_l+0x91e>
 800a616:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a61a:	f77f aea9 	ble.w	800a370 <_strtod_l+0x580>
 800a61e:	4b4d      	ldr	r3, [pc, #308]	; (800a754 <_strtod_l+0x964>)
 800a620:	4650      	mov	r0, sl
 800a622:	4659      	mov	r1, fp
 800a624:	2200      	movs	r2, #0
 800a626:	f7f5 ffef 	bl	8000608 <__aeabi_dmul>
 800a62a:	460b      	mov	r3, r1
 800a62c:	4303      	orrs	r3, r0
 800a62e:	bf08      	it	eq
 800a630:	2322      	moveq	r3, #34	; 0x22
 800a632:	4682      	mov	sl, r0
 800a634:	468b      	mov	fp, r1
 800a636:	bf08      	it	eq
 800a638:	6023      	streq	r3, [r4, #0]
 800a63a:	e62b      	b.n	800a294 <_strtod_l+0x4a4>
 800a63c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a640:	fa02 f303 	lsl.w	r3, r2, r3
 800a644:	ea03 0a0a 	and.w	sl, r3, sl
 800a648:	e6e3      	b.n	800a412 <_strtod_l+0x622>
 800a64a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a64e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a652:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a656:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a65a:	fa01 f308 	lsl.w	r3, r1, r8
 800a65e:	9308      	str	r3, [sp, #32]
 800a660:	910d      	str	r1, [sp, #52]	; 0x34
 800a662:	e746      	b.n	800a4f2 <_strtod_l+0x702>
 800a664:	2300      	movs	r3, #0
 800a666:	9308      	str	r3, [sp, #32]
 800a668:	2301      	movs	r3, #1
 800a66a:	930d      	str	r3, [sp, #52]	; 0x34
 800a66c:	e741      	b.n	800a4f2 <_strtod_l+0x702>
 800a66e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a670:	4642      	mov	r2, r8
 800a672:	4620      	mov	r0, r4
 800a674:	f002 faf8 	bl	800cc68 <__lshift>
 800a678:	9018      	str	r0, [sp, #96]	; 0x60
 800a67a:	2800      	cmp	r0, #0
 800a67c:	f47f af6b 	bne.w	800a556 <_strtod_l+0x766>
 800a680:	e5fe      	b.n	800a280 <_strtod_l+0x490>
 800a682:	465f      	mov	r7, fp
 800a684:	d16e      	bne.n	800a764 <_strtod_l+0x974>
 800a686:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a688:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a68c:	b342      	cbz	r2, 800a6e0 <_strtod_l+0x8f0>
 800a68e:	4a32      	ldr	r2, [pc, #200]	; (800a758 <_strtod_l+0x968>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d128      	bne.n	800a6e6 <_strtod_l+0x8f6>
 800a694:	9b04      	ldr	r3, [sp, #16]
 800a696:	4651      	mov	r1, sl
 800a698:	b1eb      	cbz	r3, 800a6d6 <_strtod_l+0x8e6>
 800a69a:	4b2d      	ldr	r3, [pc, #180]	; (800a750 <_strtod_l+0x960>)
 800a69c:	403b      	ands	r3, r7
 800a69e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a6a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6a6:	d819      	bhi.n	800a6dc <_strtod_l+0x8ec>
 800a6a8:	0d1b      	lsrs	r3, r3, #20
 800a6aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a6ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a6b2:	4299      	cmp	r1, r3
 800a6b4:	d117      	bne.n	800a6e6 <_strtod_l+0x8f6>
 800a6b6:	4b29      	ldr	r3, [pc, #164]	; (800a75c <_strtod_l+0x96c>)
 800a6b8:	429f      	cmp	r7, r3
 800a6ba:	d102      	bne.n	800a6c2 <_strtod_l+0x8d2>
 800a6bc:	3101      	adds	r1, #1
 800a6be:	f43f addf 	beq.w	800a280 <_strtod_l+0x490>
 800a6c2:	4b23      	ldr	r3, [pc, #140]	; (800a750 <_strtod_l+0x960>)
 800a6c4:	403b      	ands	r3, r7
 800a6c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a6ca:	f04f 0a00 	mov.w	sl, #0
 800a6ce:	9b04      	ldr	r3, [sp, #16]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d1a4      	bne.n	800a61e <_strtod_l+0x82e>
 800a6d4:	e5de      	b.n	800a294 <_strtod_l+0x4a4>
 800a6d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6da:	e7ea      	b.n	800a6b2 <_strtod_l+0x8c2>
 800a6dc:	4613      	mov	r3, r2
 800a6de:	e7e8      	b.n	800a6b2 <_strtod_l+0x8c2>
 800a6e0:	ea53 030a 	orrs.w	r3, r3, sl
 800a6e4:	d08c      	beq.n	800a600 <_strtod_l+0x810>
 800a6e6:	9b08      	ldr	r3, [sp, #32]
 800a6e8:	b1db      	cbz	r3, 800a722 <_strtod_l+0x932>
 800a6ea:	423b      	tst	r3, r7
 800a6ec:	d0ef      	beq.n	800a6ce <_strtod_l+0x8de>
 800a6ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6f0:	9a04      	ldr	r2, [sp, #16]
 800a6f2:	4650      	mov	r0, sl
 800a6f4:	4659      	mov	r1, fp
 800a6f6:	b1c3      	cbz	r3, 800a72a <_strtod_l+0x93a>
 800a6f8:	f7ff fb5d 	bl	8009db6 <sulp>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	460b      	mov	r3, r1
 800a700:	ec51 0b18 	vmov	r0, r1, d8
 800a704:	f7f5 fdca 	bl	800029c <__adddf3>
 800a708:	4682      	mov	sl, r0
 800a70a:	468b      	mov	fp, r1
 800a70c:	e7df      	b.n	800a6ce <_strtod_l+0x8de>
 800a70e:	4013      	ands	r3, r2
 800a710:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a714:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a718:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a71c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a720:	e7d5      	b.n	800a6ce <_strtod_l+0x8de>
 800a722:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a724:	ea13 0f0a 	tst.w	r3, sl
 800a728:	e7e0      	b.n	800a6ec <_strtod_l+0x8fc>
 800a72a:	f7ff fb44 	bl	8009db6 <sulp>
 800a72e:	4602      	mov	r2, r0
 800a730:	460b      	mov	r3, r1
 800a732:	ec51 0b18 	vmov	r0, r1, d8
 800a736:	f7f5 fdaf 	bl	8000298 <__aeabi_dsub>
 800a73a:	2200      	movs	r2, #0
 800a73c:	2300      	movs	r3, #0
 800a73e:	4682      	mov	sl, r0
 800a740:	468b      	mov	fp, r1
 800a742:	f7f6 f9c9 	bl	8000ad8 <__aeabi_dcmpeq>
 800a746:	2800      	cmp	r0, #0
 800a748:	d0c1      	beq.n	800a6ce <_strtod_l+0x8de>
 800a74a:	e611      	b.n	800a370 <_strtod_l+0x580>
 800a74c:	fffffc02 	.word	0xfffffc02
 800a750:	7ff00000 	.word	0x7ff00000
 800a754:	39500000 	.word	0x39500000
 800a758:	000fffff 	.word	0x000fffff
 800a75c:	7fefffff 	.word	0x7fefffff
 800a760:	0800e108 	.word	0x0800e108
 800a764:	4631      	mov	r1, r6
 800a766:	4628      	mov	r0, r5
 800a768:	f002 fc6c 	bl	800d044 <__ratio>
 800a76c:	ec59 8b10 	vmov	r8, r9, d0
 800a770:	ee10 0a10 	vmov	r0, s0
 800a774:	2200      	movs	r2, #0
 800a776:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a77a:	4649      	mov	r1, r9
 800a77c:	f7f6 f9c0 	bl	8000b00 <__aeabi_dcmple>
 800a780:	2800      	cmp	r0, #0
 800a782:	d07a      	beq.n	800a87a <_strtod_l+0xa8a>
 800a784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a786:	2b00      	cmp	r3, #0
 800a788:	d04a      	beq.n	800a820 <_strtod_l+0xa30>
 800a78a:	4b95      	ldr	r3, [pc, #596]	; (800a9e0 <_strtod_l+0xbf0>)
 800a78c:	2200      	movs	r2, #0
 800a78e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a792:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a9e0 <_strtod_l+0xbf0>
 800a796:	f04f 0800 	mov.w	r8, #0
 800a79a:	4b92      	ldr	r3, [pc, #584]	; (800a9e4 <_strtod_l+0xbf4>)
 800a79c:	403b      	ands	r3, r7
 800a79e:	930d      	str	r3, [sp, #52]	; 0x34
 800a7a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7a2:	4b91      	ldr	r3, [pc, #580]	; (800a9e8 <_strtod_l+0xbf8>)
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	f040 80b0 	bne.w	800a90a <_strtod_l+0xb1a>
 800a7aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a7ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a7b2:	ec4b ab10 	vmov	d0, sl, fp
 800a7b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a7ba:	f002 fb6b 	bl	800ce94 <__ulp>
 800a7be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a7c2:	ec53 2b10 	vmov	r2, r3, d0
 800a7c6:	f7f5 ff1f 	bl	8000608 <__aeabi_dmul>
 800a7ca:	4652      	mov	r2, sl
 800a7cc:	465b      	mov	r3, fp
 800a7ce:	f7f5 fd65 	bl	800029c <__adddf3>
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	4983      	ldr	r1, [pc, #524]	; (800a9e4 <_strtod_l+0xbf4>)
 800a7d6:	4a85      	ldr	r2, [pc, #532]	; (800a9ec <_strtod_l+0xbfc>)
 800a7d8:	4019      	ands	r1, r3
 800a7da:	4291      	cmp	r1, r2
 800a7dc:	4682      	mov	sl, r0
 800a7de:	d960      	bls.n	800a8a2 <_strtod_l+0xab2>
 800a7e0:	ee18 3a90 	vmov	r3, s17
 800a7e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d104      	bne.n	800a7f6 <_strtod_l+0xa06>
 800a7ec:	ee18 3a10 	vmov	r3, s16
 800a7f0:	3301      	adds	r3, #1
 800a7f2:	f43f ad45 	beq.w	800a280 <_strtod_l+0x490>
 800a7f6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a9f8 <_strtod_l+0xc08>
 800a7fa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a7fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a800:	4620      	mov	r0, r4
 800a802:	f002 f815 	bl	800c830 <_Bfree>
 800a806:	9905      	ldr	r1, [sp, #20]
 800a808:	4620      	mov	r0, r4
 800a80a:	f002 f811 	bl	800c830 <_Bfree>
 800a80e:	4631      	mov	r1, r6
 800a810:	4620      	mov	r0, r4
 800a812:	f002 f80d 	bl	800c830 <_Bfree>
 800a816:	4629      	mov	r1, r5
 800a818:	4620      	mov	r0, r4
 800a81a:	f002 f809 	bl	800c830 <_Bfree>
 800a81e:	e61a      	b.n	800a456 <_strtod_l+0x666>
 800a820:	f1ba 0f00 	cmp.w	sl, #0
 800a824:	d11b      	bne.n	800a85e <_strtod_l+0xa6e>
 800a826:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a82a:	b9f3      	cbnz	r3, 800a86a <_strtod_l+0xa7a>
 800a82c:	4b6c      	ldr	r3, [pc, #432]	; (800a9e0 <_strtod_l+0xbf0>)
 800a82e:	2200      	movs	r2, #0
 800a830:	4640      	mov	r0, r8
 800a832:	4649      	mov	r1, r9
 800a834:	f7f6 f95a 	bl	8000aec <__aeabi_dcmplt>
 800a838:	b9d0      	cbnz	r0, 800a870 <_strtod_l+0xa80>
 800a83a:	4640      	mov	r0, r8
 800a83c:	4649      	mov	r1, r9
 800a83e:	4b6c      	ldr	r3, [pc, #432]	; (800a9f0 <_strtod_l+0xc00>)
 800a840:	2200      	movs	r2, #0
 800a842:	f7f5 fee1 	bl	8000608 <__aeabi_dmul>
 800a846:	4680      	mov	r8, r0
 800a848:	4689      	mov	r9, r1
 800a84a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a84e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a852:	9315      	str	r3, [sp, #84]	; 0x54
 800a854:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a858:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a85c:	e79d      	b.n	800a79a <_strtod_l+0x9aa>
 800a85e:	f1ba 0f01 	cmp.w	sl, #1
 800a862:	d102      	bne.n	800a86a <_strtod_l+0xa7a>
 800a864:	2f00      	cmp	r7, #0
 800a866:	f43f ad83 	beq.w	800a370 <_strtod_l+0x580>
 800a86a:	4b62      	ldr	r3, [pc, #392]	; (800a9f4 <_strtod_l+0xc04>)
 800a86c:	2200      	movs	r2, #0
 800a86e:	e78e      	b.n	800a78e <_strtod_l+0x99e>
 800a870:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a9f0 <_strtod_l+0xc00>
 800a874:	f04f 0800 	mov.w	r8, #0
 800a878:	e7e7      	b.n	800a84a <_strtod_l+0xa5a>
 800a87a:	4b5d      	ldr	r3, [pc, #372]	; (800a9f0 <_strtod_l+0xc00>)
 800a87c:	4640      	mov	r0, r8
 800a87e:	4649      	mov	r1, r9
 800a880:	2200      	movs	r2, #0
 800a882:	f7f5 fec1 	bl	8000608 <__aeabi_dmul>
 800a886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a888:	4680      	mov	r8, r0
 800a88a:	4689      	mov	r9, r1
 800a88c:	b933      	cbnz	r3, 800a89c <_strtod_l+0xaac>
 800a88e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a892:	900e      	str	r0, [sp, #56]	; 0x38
 800a894:	930f      	str	r3, [sp, #60]	; 0x3c
 800a896:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a89a:	e7dd      	b.n	800a858 <_strtod_l+0xa68>
 800a89c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a8a0:	e7f9      	b.n	800a896 <_strtod_l+0xaa6>
 800a8a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a8a6:	9b04      	ldr	r3, [sp, #16]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d1a8      	bne.n	800a7fe <_strtod_l+0xa0e>
 800a8ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a8b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a8b2:	0d1b      	lsrs	r3, r3, #20
 800a8b4:	051b      	lsls	r3, r3, #20
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d1a1      	bne.n	800a7fe <_strtod_l+0xa0e>
 800a8ba:	4640      	mov	r0, r8
 800a8bc:	4649      	mov	r1, r9
 800a8be:	f7f6 fa03 	bl	8000cc8 <__aeabi_d2lz>
 800a8c2:	f7f5 fe73 	bl	80005ac <__aeabi_l2d>
 800a8c6:	4602      	mov	r2, r0
 800a8c8:	460b      	mov	r3, r1
 800a8ca:	4640      	mov	r0, r8
 800a8cc:	4649      	mov	r1, r9
 800a8ce:	f7f5 fce3 	bl	8000298 <__aeabi_dsub>
 800a8d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a8d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a8d8:	ea43 030a 	orr.w	r3, r3, sl
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	4680      	mov	r8, r0
 800a8e0:	4689      	mov	r9, r1
 800a8e2:	d055      	beq.n	800a990 <_strtod_l+0xba0>
 800a8e4:	a336      	add	r3, pc, #216	; (adr r3, 800a9c0 <_strtod_l+0xbd0>)
 800a8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ea:	f7f6 f8ff 	bl	8000aec <__aeabi_dcmplt>
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	f47f acd0 	bne.w	800a294 <_strtod_l+0x4a4>
 800a8f4:	a334      	add	r3, pc, #208	; (adr r3, 800a9c8 <_strtod_l+0xbd8>)
 800a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fa:	4640      	mov	r0, r8
 800a8fc:	4649      	mov	r1, r9
 800a8fe:	f7f6 f913 	bl	8000b28 <__aeabi_dcmpgt>
 800a902:	2800      	cmp	r0, #0
 800a904:	f43f af7b 	beq.w	800a7fe <_strtod_l+0xa0e>
 800a908:	e4c4      	b.n	800a294 <_strtod_l+0x4a4>
 800a90a:	9b04      	ldr	r3, [sp, #16]
 800a90c:	b333      	cbz	r3, 800a95c <_strtod_l+0xb6c>
 800a90e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a910:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a914:	d822      	bhi.n	800a95c <_strtod_l+0xb6c>
 800a916:	a32e      	add	r3, pc, #184	; (adr r3, 800a9d0 <_strtod_l+0xbe0>)
 800a918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91c:	4640      	mov	r0, r8
 800a91e:	4649      	mov	r1, r9
 800a920:	f7f6 f8ee 	bl	8000b00 <__aeabi_dcmple>
 800a924:	b1a0      	cbz	r0, 800a950 <_strtod_l+0xb60>
 800a926:	4649      	mov	r1, r9
 800a928:	4640      	mov	r0, r8
 800a92a:	f7f6 f945 	bl	8000bb8 <__aeabi_d2uiz>
 800a92e:	2801      	cmp	r0, #1
 800a930:	bf38      	it	cc
 800a932:	2001      	movcc	r0, #1
 800a934:	f7f5 fdee 	bl	8000514 <__aeabi_ui2d>
 800a938:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a93a:	4680      	mov	r8, r0
 800a93c:	4689      	mov	r9, r1
 800a93e:	bb23      	cbnz	r3, 800a98a <_strtod_l+0xb9a>
 800a940:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a944:	9010      	str	r0, [sp, #64]	; 0x40
 800a946:	9311      	str	r3, [sp, #68]	; 0x44
 800a948:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a94c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a952:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a954:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a958:	1a9b      	subs	r3, r3, r2
 800a95a:	9309      	str	r3, [sp, #36]	; 0x24
 800a95c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a960:	eeb0 0a48 	vmov.f32	s0, s16
 800a964:	eef0 0a68 	vmov.f32	s1, s17
 800a968:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a96c:	f002 fa92 	bl	800ce94 <__ulp>
 800a970:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a974:	ec53 2b10 	vmov	r2, r3, d0
 800a978:	f7f5 fe46 	bl	8000608 <__aeabi_dmul>
 800a97c:	ec53 2b18 	vmov	r2, r3, d8
 800a980:	f7f5 fc8c 	bl	800029c <__adddf3>
 800a984:	4682      	mov	sl, r0
 800a986:	468b      	mov	fp, r1
 800a988:	e78d      	b.n	800a8a6 <_strtod_l+0xab6>
 800a98a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a98e:	e7db      	b.n	800a948 <_strtod_l+0xb58>
 800a990:	a311      	add	r3, pc, #68	; (adr r3, 800a9d8 <_strtod_l+0xbe8>)
 800a992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a996:	f7f6 f8a9 	bl	8000aec <__aeabi_dcmplt>
 800a99a:	e7b2      	b.n	800a902 <_strtod_l+0xb12>
 800a99c:	2300      	movs	r3, #0
 800a99e:	930a      	str	r3, [sp, #40]	; 0x28
 800a9a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a9a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9a4:	6013      	str	r3, [r2, #0]
 800a9a6:	f7ff ba6b 	b.w	8009e80 <_strtod_l+0x90>
 800a9aa:	2a65      	cmp	r2, #101	; 0x65
 800a9ac:	f43f ab5f 	beq.w	800a06e <_strtod_l+0x27e>
 800a9b0:	2a45      	cmp	r2, #69	; 0x45
 800a9b2:	f43f ab5c 	beq.w	800a06e <_strtod_l+0x27e>
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	f7ff bb94 	b.w	800a0e4 <_strtod_l+0x2f4>
 800a9bc:	f3af 8000 	nop.w
 800a9c0:	94a03595 	.word	0x94a03595
 800a9c4:	3fdfffff 	.word	0x3fdfffff
 800a9c8:	35afe535 	.word	0x35afe535
 800a9cc:	3fe00000 	.word	0x3fe00000
 800a9d0:	ffc00000 	.word	0xffc00000
 800a9d4:	41dfffff 	.word	0x41dfffff
 800a9d8:	94a03595 	.word	0x94a03595
 800a9dc:	3fcfffff 	.word	0x3fcfffff
 800a9e0:	3ff00000 	.word	0x3ff00000
 800a9e4:	7ff00000 	.word	0x7ff00000
 800a9e8:	7fe00000 	.word	0x7fe00000
 800a9ec:	7c9fffff 	.word	0x7c9fffff
 800a9f0:	3fe00000 	.word	0x3fe00000
 800a9f4:	bff00000 	.word	0xbff00000
 800a9f8:	7fefffff 	.word	0x7fefffff

0800a9fc <strtof>:
 800a9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa00:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800aab0 <strtof+0xb4>
 800aa04:	4b26      	ldr	r3, [pc, #152]	; (800aaa0 <strtof+0xa4>)
 800aa06:	460a      	mov	r2, r1
 800aa08:	ed2d 8b02 	vpush	{d8}
 800aa0c:	4601      	mov	r1, r0
 800aa0e:	f8d8 0000 	ldr.w	r0, [r8]
 800aa12:	f7ff f9ed 	bl	8009df0 <_strtod_l>
 800aa16:	ec55 4b10 	vmov	r4, r5, d0
 800aa1a:	ee10 2a10 	vmov	r2, s0
 800aa1e:	ee10 0a10 	vmov	r0, s0
 800aa22:	462b      	mov	r3, r5
 800aa24:	4629      	mov	r1, r5
 800aa26:	f7f6 f889 	bl	8000b3c <__aeabi_dcmpun>
 800aa2a:	b190      	cbz	r0, 800aa52 <strtof+0x56>
 800aa2c:	2d00      	cmp	r5, #0
 800aa2e:	481d      	ldr	r0, [pc, #116]	; (800aaa4 <strtof+0xa8>)
 800aa30:	da09      	bge.n	800aa46 <strtof+0x4a>
 800aa32:	f002 fe65 	bl	800d700 <nanf>
 800aa36:	eeb1 8a40 	vneg.f32	s16, s0
 800aa3a:	eeb0 0a48 	vmov.f32	s0, s16
 800aa3e:	ecbd 8b02 	vpop	{d8}
 800aa42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa46:	ecbd 8b02 	vpop	{d8}
 800aa4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa4e:	f002 be57 	b.w	800d700 <nanf>
 800aa52:	4620      	mov	r0, r4
 800aa54:	4629      	mov	r1, r5
 800aa56:	f7f6 f8cf 	bl	8000bf8 <__aeabi_d2f>
 800aa5a:	ee08 0a10 	vmov	s16, r0
 800aa5e:	eddf 7a12 	vldr	s15, [pc, #72]	; 800aaa8 <strtof+0xac>
 800aa62:	eeb0 7ac8 	vabs.f32	s14, s16
 800aa66:	eeb4 7a67 	vcmp.f32	s14, s15
 800aa6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa6e:	dde4      	ble.n	800aa3a <strtof+0x3e>
 800aa70:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800aa74:	4b0d      	ldr	r3, [pc, #52]	; (800aaac <strtof+0xb0>)
 800aa76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	4639      	mov	r1, r7
 800aa7e:	f7f6 f85d 	bl	8000b3c <__aeabi_dcmpun>
 800aa82:	b940      	cbnz	r0, 800aa96 <strtof+0x9a>
 800aa84:	4b09      	ldr	r3, [pc, #36]	; (800aaac <strtof+0xb0>)
 800aa86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa8a:	4620      	mov	r0, r4
 800aa8c:	4639      	mov	r1, r7
 800aa8e:	f7f6 f837 	bl	8000b00 <__aeabi_dcmple>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d0d1      	beq.n	800aa3a <strtof+0x3e>
 800aa96:	f8d8 3000 	ldr.w	r3, [r8]
 800aa9a:	2222      	movs	r2, #34	; 0x22
 800aa9c:	601a      	str	r2, [r3, #0]
 800aa9e:	e7cc      	b.n	800aa3a <strtof+0x3e>
 800aaa0:	2000011c 	.word	0x2000011c
 800aaa4:	0800e16b 	.word	0x0800e16b
 800aaa8:	7f7fffff 	.word	0x7f7fffff
 800aaac:	7fefffff 	.word	0x7fefffff
 800aab0:	200000b4 	.word	0x200000b4

0800aab4 <_strtol_l.constprop.0>:
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaba:	d001      	beq.n	800aac0 <_strtol_l.constprop.0+0xc>
 800aabc:	2b24      	cmp	r3, #36	; 0x24
 800aabe:	d906      	bls.n	800aace <_strtol_l.constprop.0+0x1a>
 800aac0:	f7fe fb60 	bl	8009184 <__errno>
 800aac4:	2316      	movs	r3, #22
 800aac6:	6003      	str	r3, [r0, #0]
 800aac8:	2000      	movs	r0, #0
 800aaca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aace:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800abb4 <_strtol_l.constprop.0+0x100>
 800aad2:	460d      	mov	r5, r1
 800aad4:	462e      	mov	r6, r5
 800aad6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aada:	f814 700c 	ldrb.w	r7, [r4, ip]
 800aade:	f017 0708 	ands.w	r7, r7, #8
 800aae2:	d1f7      	bne.n	800aad4 <_strtol_l.constprop.0+0x20>
 800aae4:	2c2d      	cmp	r4, #45	; 0x2d
 800aae6:	d132      	bne.n	800ab4e <_strtol_l.constprop.0+0x9a>
 800aae8:	782c      	ldrb	r4, [r5, #0]
 800aaea:	2701      	movs	r7, #1
 800aaec:	1cb5      	adds	r5, r6, #2
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d05b      	beq.n	800abaa <_strtol_l.constprop.0+0xf6>
 800aaf2:	2b10      	cmp	r3, #16
 800aaf4:	d109      	bne.n	800ab0a <_strtol_l.constprop.0+0x56>
 800aaf6:	2c30      	cmp	r4, #48	; 0x30
 800aaf8:	d107      	bne.n	800ab0a <_strtol_l.constprop.0+0x56>
 800aafa:	782c      	ldrb	r4, [r5, #0]
 800aafc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ab00:	2c58      	cmp	r4, #88	; 0x58
 800ab02:	d14d      	bne.n	800aba0 <_strtol_l.constprop.0+0xec>
 800ab04:	786c      	ldrb	r4, [r5, #1]
 800ab06:	2310      	movs	r3, #16
 800ab08:	3502      	adds	r5, #2
 800ab0a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ab0e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ab12:	f04f 0c00 	mov.w	ip, #0
 800ab16:	fbb8 f9f3 	udiv	r9, r8, r3
 800ab1a:	4666      	mov	r6, ip
 800ab1c:	fb03 8a19 	mls	sl, r3, r9, r8
 800ab20:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ab24:	f1be 0f09 	cmp.w	lr, #9
 800ab28:	d816      	bhi.n	800ab58 <_strtol_l.constprop.0+0xa4>
 800ab2a:	4674      	mov	r4, lr
 800ab2c:	42a3      	cmp	r3, r4
 800ab2e:	dd24      	ble.n	800ab7a <_strtol_l.constprop.0+0xc6>
 800ab30:	f1bc 0f00 	cmp.w	ip, #0
 800ab34:	db1e      	blt.n	800ab74 <_strtol_l.constprop.0+0xc0>
 800ab36:	45b1      	cmp	r9, r6
 800ab38:	d31c      	bcc.n	800ab74 <_strtol_l.constprop.0+0xc0>
 800ab3a:	d101      	bne.n	800ab40 <_strtol_l.constprop.0+0x8c>
 800ab3c:	45a2      	cmp	sl, r4
 800ab3e:	db19      	blt.n	800ab74 <_strtol_l.constprop.0+0xc0>
 800ab40:	fb06 4603 	mla	r6, r6, r3, r4
 800ab44:	f04f 0c01 	mov.w	ip, #1
 800ab48:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab4c:	e7e8      	b.n	800ab20 <_strtol_l.constprop.0+0x6c>
 800ab4e:	2c2b      	cmp	r4, #43	; 0x2b
 800ab50:	bf04      	itt	eq
 800ab52:	782c      	ldrbeq	r4, [r5, #0]
 800ab54:	1cb5      	addeq	r5, r6, #2
 800ab56:	e7ca      	b.n	800aaee <_strtol_l.constprop.0+0x3a>
 800ab58:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ab5c:	f1be 0f19 	cmp.w	lr, #25
 800ab60:	d801      	bhi.n	800ab66 <_strtol_l.constprop.0+0xb2>
 800ab62:	3c37      	subs	r4, #55	; 0x37
 800ab64:	e7e2      	b.n	800ab2c <_strtol_l.constprop.0+0x78>
 800ab66:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ab6a:	f1be 0f19 	cmp.w	lr, #25
 800ab6e:	d804      	bhi.n	800ab7a <_strtol_l.constprop.0+0xc6>
 800ab70:	3c57      	subs	r4, #87	; 0x57
 800ab72:	e7db      	b.n	800ab2c <_strtol_l.constprop.0+0x78>
 800ab74:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800ab78:	e7e6      	b.n	800ab48 <_strtol_l.constprop.0+0x94>
 800ab7a:	f1bc 0f00 	cmp.w	ip, #0
 800ab7e:	da05      	bge.n	800ab8c <_strtol_l.constprop.0+0xd8>
 800ab80:	2322      	movs	r3, #34	; 0x22
 800ab82:	6003      	str	r3, [r0, #0]
 800ab84:	4646      	mov	r6, r8
 800ab86:	b942      	cbnz	r2, 800ab9a <_strtol_l.constprop.0+0xe6>
 800ab88:	4630      	mov	r0, r6
 800ab8a:	e79e      	b.n	800aaca <_strtol_l.constprop.0+0x16>
 800ab8c:	b107      	cbz	r7, 800ab90 <_strtol_l.constprop.0+0xdc>
 800ab8e:	4276      	negs	r6, r6
 800ab90:	2a00      	cmp	r2, #0
 800ab92:	d0f9      	beq.n	800ab88 <_strtol_l.constprop.0+0xd4>
 800ab94:	f1bc 0f00 	cmp.w	ip, #0
 800ab98:	d000      	beq.n	800ab9c <_strtol_l.constprop.0+0xe8>
 800ab9a:	1e69      	subs	r1, r5, #1
 800ab9c:	6011      	str	r1, [r2, #0]
 800ab9e:	e7f3      	b.n	800ab88 <_strtol_l.constprop.0+0xd4>
 800aba0:	2430      	movs	r4, #48	; 0x30
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1b1      	bne.n	800ab0a <_strtol_l.constprop.0+0x56>
 800aba6:	2308      	movs	r3, #8
 800aba8:	e7af      	b.n	800ab0a <_strtol_l.constprop.0+0x56>
 800abaa:	2c30      	cmp	r4, #48	; 0x30
 800abac:	d0a5      	beq.n	800aafa <_strtol_l.constprop.0+0x46>
 800abae:	230a      	movs	r3, #10
 800abb0:	e7ab      	b.n	800ab0a <_strtol_l.constprop.0+0x56>
 800abb2:	bf00      	nop
 800abb4:	0800dfa1 	.word	0x0800dfa1

0800abb8 <strtol>:
 800abb8:	4613      	mov	r3, r2
 800abba:	460a      	mov	r2, r1
 800abbc:	4601      	mov	r1, r0
 800abbe:	4802      	ldr	r0, [pc, #8]	; (800abc8 <strtol+0x10>)
 800abc0:	6800      	ldr	r0, [r0, #0]
 800abc2:	f7ff bf77 	b.w	800aab4 <_strtol_l.constprop.0>
 800abc6:	bf00      	nop
 800abc8:	200000b4 	.word	0x200000b4

0800abcc <_strtoll_l.constprop.0>:
 800abcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd0:	b085      	sub	sp, #20
 800abd2:	4688      	mov	r8, r1
 800abd4:	9201      	str	r2, [sp, #4]
 800abd6:	4a47      	ldr	r2, [pc, #284]	; (800acf4 <_strtoll_l.constprop.0+0x128>)
 800abd8:	9003      	str	r0, [sp, #12]
 800abda:	461e      	mov	r6, r3
 800abdc:	460d      	mov	r5, r1
 800abde:	462b      	mov	r3, r5
 800abe0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abe4:	5ca7      	ldrb	r7, [r4, r2]
 800abe6:	f017 0708 	ands.w	r7, r7, #8
 800abea:	d1f8      	bne.n	800abde <_strtoll_l.constprop.0+0x12>
 800abec:	2c2d      	cmp	r4, #45	; 0x2d
 800abee:	d147      	bne.n	800ac80 <_strtoll_l.constprop.0+0xb4>
 800abf0:	782c      	ldrb	r4, [r5, #0]
 800abf2:	2701      	movs	r7, #1
 800abf4:	1c9d      	adds	r5, r3, #2
 800abf6:	2e00      	cmp	r6, #0
 800abf8:	d077      	beq.n	800acea <_strtoll_l.constprop.0+0x11e>
 800abfa:	2e10      	cmp	r6, #16
 800abfc:	d109      	bne.n	800ac12 <_strtoll_l.constprop.0+0x46>
 800abfe:	2c30      	cmp	r4, #48	; 0x30
 800ac00:	d107      	bne.n	800ac12 <_strtoll_l.constprop.0+0x46>
 800ac02:	782b      	ldrb	r3, [r5, #0]
 800ac04:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ac08:	2b58      	cmp	r3, #88	; 0x58
 800ac0a:	d169      	bne.n	800ace0 <_strtoll_l.constprop.0+0x114>
 800ac0c:	786c      	ldrb	r4, [r5, #1]
 800ac0e:	2610      	movs	r6, #16
 800ac10:	3502      	adds	r5, #2
 800ac12:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 800ac16:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
 800ac1a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ac1e:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800ac22:	4632      	mov	r2, r6
 800ac24:	464b      	mov	r3, r9
 800ac26:	4658      	mov	r0, fp
 800ac28:	4651      	mov	r1, sl
 800ac2a:	f7f6 f835 	bl	8000c98 <__aeabi_uldivmod>
 800ac2e:	2300      	movs	r3, #0
 800ac30:	9202      	str	r2, [sp, #8]
 800ac32:	468c      	mov	ip, r1
 800ac34:	4602      	mov	r2, r0
 800ac36:	4619      	mov	r1, r3
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ac3e:	f1be 0f09 	cmp.w	lr, #9
 800ac42:	d822      	bhi.n	800ac8a <_strtoll_l.constprop.0+0xbe>
 800ac44:	4674      	mov	r4, lr
 800ac46:	42a6      	cmp	r6, r4
 800ac48:	dd30      	ble.n	800acac <_strtoll_l.constprop.0+0xe0>
 800ac4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac4e:	d014      	beq.n	800ac7a <_strtoll_l.constprop.0+0xae>
 800ac50:	4282      	cmp	r2, r0
 800ac52:	eb7c 0301 	sbcs.w	r3, ip, r1
 800ac56:	d326      	bcc.n	800aca6 <_strtoll_l.constprop.0+0xda>
 800ac58:	458c      	cmp	ip, r1
 800ac5a:	bf08      	it	eq
 800ac5c:	4282      	cmpeq	r2, r0
 800ac5e:	d102      	bne.n	800ac66 <_strtoll_l.constprop.0+0x9a>
 800ac60:	9b02      	ldr	r3, [sp, #8]
 800ac62:	42a3      	cmp	r3, r4
 800ac64:	db1f      	blt.n	800aca6 <_strtoll_l.constprop.0+0xda>
 800ac66:	4371      	muls	r1, r6
 800ac68:	fb00 1109 	mla	r1, r0, r9, r1
 800ac6c:	fba6 0300 	umull	r0, r3, r6, r0
 800ac70:	4419      	add	r1, r3
 800ac72:	1820      	adds	r0, r4, r0
 800ac74:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800ac78:	2301      	movs	r3, #1
 800ac7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac7e:	e7dc      	b.n	800ac3a <_strtoll_l.constprop.0+0x6e>
 800ac80:	2c2b      	cmp	r4, #43	; 0x2b
 800ac82:	bf04      	itt	eq
 800ac84:	782c      	ldrbeq	r4, [r5, #0]
 800ac86:	1c9d      	addeq	r5, r3, #2
 800ac88:	e7b5      	b.n	800abf6 <_strtoll_l.constprop.0+0x2a>
 800ac8a:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ac8e:	f1be 0f19 	cmp.w	lr, #25
 800ac92:	d801      	bhi.n	800ac98 <_strtoll_l.constprop.0+0xcc>
 800ac94:	3c37      	subs	r4, #55	; 0x37
 800ac96:	e7d6      	b.n	800ac46 <_strtoll_l.constprop.0+0x7a>
 800ac98:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ac9c:	f1be 0f19 	cmp.w	lr, #25
 800aca0:	d804      	bhi.n	800acac <_strtoll_l.constprop.0+0xe0>
 800aca2:	3c57      	subs	r4, #87	; 0x57
 800aca4:	e7cf      	b.n	800ac46 <_strtoll_l.constprop.0+0x7a>
 800aca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800acaa:	e7e6      	b.n	800ac7a <_strtoll_l.constprop.0+0xae>
 800acac:	1c5a      	adds	r2, r3, #1
 800acae:	d109      	bne.n	800acc4 <_strtoll_l.constprop.0+0xf8>
 800acb0:	9a03      	ldr	r2, [sp, #12]
 800acb2:	2322      	movs	r3, #34	; 0x22
 800acb4:	6013      	str	r3, [r2, #0]
 800acb6:	9b01      	ldr	r3, [sp, #4]
 800acb8:	4658      	mov	r0, fp
 800acba:	4651      	mov	r1, sl
 800acbc:	b953      	cbnz	r3, 800acd4 <_strtoll_l.constprop.0+0x108>
 800acbe:	b005      	add	sp, #20
 800acc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc4:	b117      	cbz	r7, 800accc <_strtoll_l.constprop.0+0x100>
 800acc6:	4240      	negs	r0, r0
 800acc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800accc:	9a01      	ldr	r2, [sp, #4]
 800acce:	2a00      	cmp	r2, #0
 800acd0:	d0f5      	beq.n	800acbe <_strtoll_l.constprop.0+0xf2>
 800acd2:	b10b      	cbz	r3, 800acd8 <_strtoll_l.constprop.0+0x10c>
 800acd4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800acd8:	9b01      	ldr	r3, [sp, #4]
 800acda:	f8c3 8000 	str.w	r8, [r3]
 800acde:	e7ee      	b.n	800acbe <_strtoll_l.constprop.0+0xf2>
 800ace0:	2430      	movs	r4, #48	; 0x30
 800ace2:	2e00      	cmp	r6, #0
 800ace4:	d195      	bne.n	800ac12 <_strtoll_l.constprop.0+0x46>
 800ace6:	2608      	movs	r6, #8
 800ace8:	e793      	b.n	800ac12 <_strtoll_l.constprop.0+0x46>
 800acea:	2c30      	cmp	r4, #48	; 0x30
 800acec:	d089      	beq.n	800ac02 <_strtoll_l.constprop.0+0x36>
 800acee:	260a      	movs	r6, #10
 800acf0:	e78f      	b.n	800ac12 <_strtoll_l.constprop.0+0x46>
 800acf2:	bf00      	nop
 800acf4:	0800dfa1 	.word	0x0800dfa1

0800acf8 <strtoll>:
 800acf8:	4613      	mov	r3, r2
 800acfa:	460a      	mov	r2, r1
 800acfc:	4601      	mov	r1, r0
 800acfe:	4802      	ldr	r0, [pc, #8]	; (800ad08 <strtoll+0x10>)
 800ad00:	6800      	ldr	r0, [r0, #0]
 800ad02:	f7ff bf63 	b.w	800abcc <_strtoll_l.constprop.0>
 800ad06:	bf00      	nop
 800ad08:	200000b4 	.word	0x200000b4

0800ad0c <__swbuf_r>:
 800ad0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0e:	460e      	mov	r6, r1
 800ad10:	4614      	mov	r4, r2
 800ad12:	4605      	mov	r5, r0
 800ad14:	b118      	cbz	r0, 800ad1e <__swbuf_r+0x12>
 800ad16:	6983      	ldr	r3, [r0, #24]
 800ad18:	b90b      	cbnz	r3, 800ad1e <__swbuf_r+0x12>
 800ad1a:	f001 f88d 	bl	800be38 <__sinit>
 800ad1e:	4b21      	ldr	r3, [pc, #132]	; (800ada4 <__swbuf_r+0x98>)
 800ad20:	429c      	cmp	r4, r3
 800ad22:	d12b      	bne.n	800ad7c <__swbuf_r+0x70>
 800ad24:	686c      	ldr	r4, [r5, #4]
 800ad26:	69a3      	ldr	r3, [r4, #24]
 800ad28:	60a3      	str	r3, [r4, #8]
 800ad2a:	89a3      	ldrh	r3, [r4, #12]
 800ad2c:	071a      	lsls	r2, r3, #28
 800ad2e:	d52f      	bpl.n	800ad90 <__swbuf_r+0x84>
 800ad30:	6923      	ldr	r3, [r4, #16]
 800ad32:	b36b      	cbz	r3, 800ad90 <__swbuf_r+0x84>
 800ad34:	6923      	ldr	r3, [r4, #16]
 800ad36:	6820      	ldr	r0, [r4, #0]
 800ad38:	1ac0      	subs	r0, r0, r3
 800ad3a:	6963      	ldr	r3, [r4, #20]
 800ad3c:	b2f6      	uxtb	r6, r6
 800ad3e:	4283      	cmp	r3, r0
 800ad40:	4637      	mov	r7, r6
 800ad42:	dc04      	bgt.n	800ad4e <__swbuf_r+0x42>
 800ad44:	4621      	mov	r1, r4
 800ad46:	4628      	mov	r0, r5
 800ad48:	f000 ffe2 	bl	800bd10 <_fflush_r>
 800ad4c:	bb30      	cbnz	r0, 800ad9c <__swbuf_r+0x90>
 800ad4e:	68a3      	ldr	r3, [r4, #8]
 800ad50:	3b01      	subs	r3, #1
 800ad52:	60a3      	str	r3, [r4, #8]
 800ad54:	6823      	ldr	r3, [r4, #0]
 800ad56:	1c5a      	adds	r2, r3, #1
 800ad58:	6022      	str	r2, [r4, #0]
 800ad5a:	701e      	strb	r6, [r3, #0]
 800ad5c:	6963      	ldr	r3, [r4, #20]
 800ad5e:	3001      	adds	r0, #1
 800ad60:	4283      	cmp	r3, r0
 800ad62:	d004      	beq.n	800ad6e <__swbuf_r+0x62>
 800ad64:	89a3      	ldrh	r3, [r4, #12]
 800ad66:	07db      	lsls	r3, r3, #31
 800ad68:	d506      	bpl.n	800ad78 <__swbuf_r+0x6c>
 800ad6a:	2e0a      	cmp	r6, #10
 800ad6c:	d104      	bne.n	800ad78 <__swbuf_r+0x6c>
 800ad6e:	4621      	mov	r1, r4
 800ad70:	4628      	mov	r0, r5
 800ad72:	f000 ffcd 	bl	800bd10 <_fflush_r>
 800ad76:	b988      	cbnz	r0, 800ad9c <__swbuf_r+0x90>
 800ad78:	4638      	mov	r0, r7
 800ad7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad7c:	4b0a      	ldr	r3, [pc, #40]	; (800ada8 <__swbuf_r+0x9c>)
 800ad7e:	429c      	cmp	r4, r3
 800ad80:	d101      	bne.n	800ad86 <__swbuf_r+0x7a>
 800ad82:	68ac      	ldr	r4, [r5, #8]
 800ad84:	e7cf      	b.n	800ad26 <__swbuf_r+0x1a>
 800ad86:	4b09      	ldr	r3, [pc, #36]	; (800adac <__swbuf_r+0xa0>)
 800ad88:	429c      	cmp	r4, r3
 800ad8a:	bf08      	it	eq
 800ad8c:	68ec      	ldreq	r4, [r5, #12]
 800ad8e:	e7ca      	b.n	800ad26 <__swbuf_r+0x1a>
 800ad90:	4621      	mov	r1, r4
 800ad92:	4628      	mov	r0, r5
 800ad94:	f000 f81e 	bl	800add4 <__swsetup_r>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	d0cb      	beq.n	800ad34 <__swbuf_r+0x28>
 800ad9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ada0:	e7ea      	b.n	800ad78 <__swbuf_r+0x6c>
 800ada2:	bf00      	nop
 800ada4:	0800e21c 	.word	0x0800e21c
 800ada8:	0800e23c 	.word	0x0800e23c
 800adac:	0800e1fc 	.word	0x0800e1fc

0800adb0 <_write_r>:
 800adb0:	b538      	push	{r3, r4, r5, lr}
 800adb2:	4d07      	ldr	r5, [pc, #28]	; (800add0 <_write_r+0x20>)
 800adb4:	4604      	mov	r4, r0
 800adb6:	4608      	mov	r0, r1
 800adb8:	4611      	mov	r1, r2
 800adba:	2200      	movs	r2, #0
 800adbc:	602a      	str	r2, [r5, #0]
 800adbe:	461a      	mov	r2, r3
 800adc0:	f7f9 fc83 	bl	80046ca <_write>
 800adc4:	1c43      	adds	r3, r0, #1
 800adc6:	d102      	bne.n	800adce <_write_r+0x1e>
 800adc8:	682b      	ldr	r3, [r5, #0]
 800adca:	b103      	cbz	r3, 800adce <_write_r+0x1e>
 800adcc:	6023      	str	r3, [r4, #0]
 800adce:	bd38      	pop	{r3, r4, r5, pc}
 800add0:	20000fb8 	.word	0x20000fb8

0800add4 <__swsetup_r>:
 800add4:	4b32      	ldr	r3, [pc, #200]	; (800aea0 <__swsetup_r+0xcc>)
 800add6:	b570      	push	{r4, r5, r6, lr}
 800add8:	681d      	ldr	r5, [r3, #0]
 800adda:	4606      	mov	r6, r0
 800addc:	460c      	mov	r4, r1
 800adde:	b125      	cbz	r5, 800adea <__swsetup_r+0x16>
 800ade0:	69ab      	ldr	r3, [r5, #24]
 800ade2:	b913      	cbnz	r3, 800adea <__swsetup_r+0x16>
 800ade4:	4628      	mov	r0, r5
 800ade6:	f001 f827 	bl	800be38 <__sinit>
 800adea:	4b2e      	ldr	r3, [pc, #184]	; (800aea4 <__swsetup_r+0xd0>)
 800adec:	429c      	cmp	r4, r3
 800adee:	d10f      	bne.n	800ae10 <__swsetup_r+0x3c>
 800adf0:	686c      	ldr	r4, [r5, #4]
 800adf2:	89a3      	ldrh	r3, [r4, #12]
 800adf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800adf8:	0719      	lsls	r1, r3, #28
 800adfa:	d42c      	bmi.n	800ae56 <__swsetup_r+0x82>
 800adfc:	06dd      	lsls	r5, r3, #27
 800adfe:	d411      	bmi.n	800ae24 <__swsetup_r+0x50>
 800ae00:	2309      	movs	r3, #9
 800ae02:	6033      	str	r3, [r6, #0]
 800ae04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae08:	81a3      	strh	r3, [r4, #12]
 800ae0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae0e:	e03e      	b.n	800ae8e <__swsetup_r+0xba>
 800ae10:	4b25      	ldr	r3, [pc, #148]	; (800aea8 <__swsetup_r+0xd4>)
 800ae12:	429c      	cmp	r4, r3
 800ae14:	d101      	bne.n	800ae1a <__swsetup_r+0x46>
 800ae16:	68ac      	ldr	r4, [r5, #8]
 800ae18:	e7eb      	b.n	800adf2 <__swsetup_r+0x1e>
 800ae1a:	4b24      	ldr	r3, [pc, #144]	; (800aeac <__swsetup_r+0xd8>)
 800ae1c:	429c      	cmp	r4, r3
 800ae1e:	bf08      	it	eq
 800ae20:	68ec      	ldreq	r4, [r5, #12]
 800ae22:	e7e6      	b.n	800adf2 <__swsetup_r+0x1e>
 800ae24:	0758      	lsls	r0, r3, #29
 800ae26:	d512      	bpl.n	800ae4e <__swsetup_r+0x7a>
 800ae28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae2a:	b141      	cbz	r1, 800ae3e <__swsetup_r+0x6a>
 800ae2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae30:	4299      	cmp	r1, r3
 800ae32:	d002      	beq.n	800ae3a <__swsetup_r+0x66>
 800ae34:	4630      	mov	r0, r6
 800ae36:	f7fe f9ed 	bl	8009214 <_free_r>
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	6363      	str	r3, [r4, #52]	; 0x34
 800ae3e:	89a3      	ldrh	r3, [r4, #12]
 800ae40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae44:	81a3      	strh	r3, [r4, #12]
 800ae46:	2300      	movs	r3, #0
 800ae48:	6063      	str	r3, [r4, #4]
 800ae4a:	6923      	ldr	r3, [r4, #16]
 800ae4c:	6023      	str	r3, [r4, #0]
 800ae4e:	89a3      	ldrh	r3, [r4, #12]
 800ae50:	f043 0308 	orr.w	r3, r3, #8
 800ae54:	81a3      	strh	r3, [r4, #12]
 800ae56:	6923      	ldr	r3, [r4, #16]
 800ae58:	b94b      	cbnz	r3, 800ae6e <__swsetup_r+0x9a>
 800ae5a:	89a3      	ldrh	r3, [r4, #12]
 800ae5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae64:	d003      	beq.n	800ae6e <__swsetup_r+0x9a>
 800ae66:	4621      	mov	r1, r4
 800ae68:	4630      	mov	r0, r6
 800ae6a:	f001 fc43 	bl	800c6f4 <__smakebuf_r>
 800ae6e:	89a0      	ldrh	r0, [r4, #12]
 800ae70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae74:	f010 0301 	ands.w	r3, r0, #1
 800ae78:	d00a      	beq.n	800ae90 <__swsetup_r+0xbc>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	60a3      	str	r3, [r4, #8]
 800ae7e:	6963      	ldr	r3, [r4, #20]
 800ae80:	425b      	negs	r3, r3
 800ae82:	61a3      	str	r3, [r4, #24]
 800ae84:	6923      	ldr	r3, [r4, #16]
 800ae86:	b943      	cbnz	r3, 800ae9a <__swsetup_r+0xc6>
 800ae88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae8c:	d1ba      	bne.n	800ae04 <__swsetup_r+0x30>
 800ae8e:	bd70      	pop	{r4, r5, r6, pc}
 800ae90:	0781      	lsls	r1, r0, #30
 800ae92:	bf58      	it	pl
 800ae94:	6963      	ldrpl	r3, [r4, #20]
 800ae96:	60a3      	str	r3, [r4, #8]
 800ae98:	e7f4      	b.n	800ae84 <__swsetup_r+0xb0>
 800ae9a:	2000      	movs	r0, #0
 800ae9c:	e7f7      	b.n	800ae8e <__swsetup_r+0xba>
 800ae9e:	bf00      	nop
 800aea0:	200000b4 	.word	0x200000b4
 800aea4:	0800e21c 	.word	0x0800e21c
 800aea8:	0800e23c 	.word	0x0800e23c
 800aeac:	0800e1fc 	.word	0x0800e1fc

0800aeb0 <__assert_func>:
 800aeb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aeb2:	4614      	mov	r4, r2
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	4b09      	ldr	r3, [pc, #36]	; (800aedc <__assert_func+0x2c>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4605      	mov	r5, r0
 800aebc:	68d8      	ldr	r0, [r3, #12]
 800aebe:	b14c      	cbz	r4, 800aed4 <__assert_func+0x24>
 800aec0:	4b07      	ldr	r3, [pc, #28]	; (800aee0 <__assert_func+0x30>)
 800aec2:	9100      	str	r1, [sp, #0]
 800aec4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aec8:	4906      	ldr	r1, [pc, #24]	; (800aee4 <__assert_func+0x34>)
 800aeca:	462b      	mov	r3, r5
 800aecc:	f001 f832 	bl	800bf34 <fiprintf>
 800aed0:	f002 fc29 	bl	800d726 <abort>
 800aed4:	4b04      	ldr	r3, [pc, #16]	; (800aee8 <__assert_func+0x38>)
 800aed6:	461c      	mov	r4, r3
 800aed8:	e7f3      	b.n	800aec2 <__assert_func+0x12>
 800aeda:	bf00      	nop
 800aedc:	200000b4 	.word	0x200000b4
 800aee0:	0800e130 	.word	0x0800e130
 800aee4:	0800e13d 	.word	0x0800e13d
 800aee8:	0800e16b 	.word	0x0800e16b

0800aeec <_close_r>:
 800aeec:	b538      	push	{r3, r4, r5, lr}
 800aeee:	4d06      	ldr	r5, [pc, #24]	; (800af08 <_close_r+0x1c>)
 800aef0:	2300      	movs	r3, #0
 800aef2:	4604      	mov	r4, r0
 800aef4:	4608      	mov	r0, r1
 800aef6:	602b      	str	r3, [r5, #0]
 800aef8:	f7f9 fc03 	bl	8004702 <_close>
 800aefc:	1c43      	adds	r3, r0, #1
 800aefe:	d102      	bne.n	800af06 <_close_r+0x1a>
 800af00:	682b      	ldr	r3, [r5, #0]
 800af02:	b103      	cbz	r3, 800af06 <_close_r+0x1a>
 800af04:	6023      	str	r3, [r4, #0]
 800af06:	bd38      	pop	{r3, r4, r5, pc}
 800af08:	20000fb8 	.word	0x20000fb8

0800af0c <quorem>:
 800af0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af10:	6903      	ldr	r3, [r0, #16]
 800af12:	690c      	ldr	r4, [r1, #16]
 800af14:	42a3      	cmp	r3, r4
 800af16:	4607      	mov	r7, r0
 800af18:	f2c0 8081 	blt.w	800b01e <quorem+0x112>
 800af1c:	3c01      	subs	r4, #1
 800af1e:	f101 0814 	add.w	r8, r1, #20
 800af22:	f100 0514 	add.w	r5, r0, #20
 800af26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af2a:	9301      	str	r3, [sp, #4]
 800af2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af34:	3301      	adds	r3, #1
 800af36:	429a      	cmp	r2, r3
 800af38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800af3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af40:	fbb2 f6f3 	udiv	r6, r2, r3
 800af44:	d331      	bcc.n	800afaa <quorem+0x9e>
 800af46:	f04f 0e00 	mov.w	lr, #0
 800af4a:	4640      	mov	r0, r8
 800af4c:	46ac      	mov	ip, r5
 800af4e:	46f2      	mov	sl, lr
 800af50:	f850 2b04 	ldr.w	r2, [r0], #4
 800af54:	b293      	uxth	r3, r2
 800af56:	fb06 e303 	mla	r3, r6, r3, lr
 800af5a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800af5e:	b29b      	uxth	r3, r3
 800af60:	ebaa 0303 	sub.w	r3, sl, r3
 800af64:	f8dc a000 	ldr.w	sl, [ip]
 800af68:	0c12      	lsrs	r2, r2, #16
 800af6a:	fa13 f38a 	uxtah	r3, r3, sl
 800af6e:	fb06 e202 	mla	r2, r6, r2, lr
 800af72:	9300      	str	r3, [sp, #0]
 800af74:	9b00      	ldr	r3, [sp, #0]
 800af76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800af7a:	b292      	uxth	r2, r2
 800af7c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800af80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af84:	f8bd 3000 	ldrh.w	r3, [sp]
 800af88:	4581      	cmp	r9, r0
 800af8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af8e:	f84c 3b04 	str.w	r3, [ip], #4
 800af92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800af96:	d2db      	bcs.n	800af50 <quorem+0x44>
 800af98:	f855 300b 	ldr.w	r3, [r5, fp]
 800af9c:	b92b      	cbnz	r3, 800afaa <quorem+0x9e>
 800af9e:	9b01      	ldr	r3, [sp, #4]
 800afa0:	3b04      	subs	r3, #4
 800afa2:	429d      	cmp	r5, r3
 800afa4:	461a      	mov	r2, r3
 800afa6:	d32e      	bcc.n	800b006 <quorem+0xfa>
 800afa8:	613c      	str	r4, [r7, #16]
 800afaa:	4638      	mov	r0, r7
 800afac:	f001 fecc 	bl	800cd48 <__mcmp>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	db24      	blt.n	800affe <quorem+0xf2>
 800afb4:	3601      	adds	r6, #1
 800afb6:	4628      	mov	r0, r5
 800afb8:	f04f 0c00 	mov.w	ip, #0
 800afbc:	f858 2b04 	ldr.w	r2, [r8], #4
 800afc0:	f8d0 e000 	ldr.w	lr, [r0]
 800afc4:	b293      	uxth	r3, r2
 800afc6:	ebac 0303 	sub.w	r3, ip, r3
 800afca:	0c12      	lsrs	r2, r2, #16
 800afcc:	fa13 f38e 	uxtah	r3, r3, lr
 800afd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800afd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800afd8:	b29b      	uxth	r3, r3
 800afda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afde:	45c1      	cmp	r9, r8
 800afe0:	f840 3b04 	str.w	r3, [r0], #4
 800afe4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800afe8:	d2e8      	bcs.n	800afbc <quorem+0xb0>
 800afea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aff2:	b922      	cbnz	r2, 800affe <quorem+0xf2>
 800aff4:	3b04      	subs	r3, #4
 800aff6:	429d      	cmp	r5, r3
 800aff8:	461a      	mov	r2, r3
 800affa:	d30a      	bcc.n	800b012 <quorem+0x106>
 800affc:	613c      	str	r4, [r7, #16]
 800affe:	4630      	mov	r0, r6
 800b000:	b003      	add	sp, #12
 800b002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b006:	6812      	ldr	r2, [r2, #0]
 800b008:	3b04      	subs	r3, #4
 800b00a:	2a00      	cmp	r2, #0
 800b00c:	d1cc      	bne.n	800afa8 <quorem+0x9c>
 800b00e:	3c01      	subs	r4, #1
 800b010:	e7c7      	b.n	800afa2 <quorem+0x96>
 800b012:	6812      	ldr	r2, [r2, #0]
 800b014:	3b04      	subs	r3, #4
 800b016:	2a00      	cmp	r2, #0
 800b018:	d1f0      	bne.n	800affc <quorem+0xf0>
 800b01a:	3c01      	subs	r4, #1
 800b01c:	e7eb      	b.n	800aff6 <quorem+0xea>
 800b01e:	2000      	movs	r0, #0
 800b020:	e7ee      	b.n	800b000 <quorem+0xf4>
 800b022:	0000      	movs	r0, r0
 800b024:	0000      	movs	r0, r0
	...

0800b028 <_dtoa_r>:
 800b028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b02c:	ed2d 8b04 	vpush	{d8-d9}
 800b030:	ec57 6b10 	vmov	r6, r7, d0
 800b034:	b093      	sub	sp, #76	; 0x4c
 800b036:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b038:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b03c:	9106      	str	r1, [sp, #24]
 800b03e:	ee10 aa10 	vmov	sl, s0
 800b042:	4604      	mov	r4, r0
 800b044:	9209      	str	r2, [sp, #36]	; 0x24
 800b046:	930c      	str	r3, [sp, #48]	; 0x30
 800b048:	46bb      	mov	fp, r7
 800b04a:	b975      	cbnz	r5, 800b06a <_dtoa_r+0x42>
 800b04c:	2010      	movs	r0, #16
 800b04e:	f7fe f8c3 	bl	80091d8 <malloc>
 800b052:	4602      	mov	r2, r0
 800b054:	6260      	str	r0, [r4, #36]	; 0x24
 800b056:	b920      	cbnz	r0, 800b062 <_dtoa_r+0x3a>
 800b058:	4ba7      	ldr	r3, [pc, #668]	; (800b2f8 <_dtoa_r+0x2d0>)
 800b05a:	21ea      	movs	r1, #234	; 0xea
 800b05c:	48a7      	ldr	r0, [pc, #668]	; (800b2fc <_dtoa_r+0x2d4>)
 800b05e:	f7ff ff27 	bl	800aeb0 <__assert_func>
 800b062:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b066:	6005      	str	r5, [r0, #0]
 800b068:	60c5      	str	r5, [r0, #12]
 800b06a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b06c:	6819      	ldr	r1, [r3, #0]
 800b06e:	b151      	cbz	r1, 800b086 <_dtoa_r+0x5e>
 800b070:	685a      	ldr	r2, [r3, #4]
 800b072:	604a      	str	r2, [r1, #4]
 800b074:	2301      	movs	r3, #1
 800b076:	4093      	lsls	r3, r2
 800b078:	608b      	str	r3, [r1, #8]
 800b07a:	4620      	mov	r0, r4
 800b07c:	f001 fbd8 	bl	800c830 <_Bfree>
 800b080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b082:	2200      	movs	r2, #0
 800b084:	601a      	str	r2, [r3, #0]
 800b086:	1e3b      	subs	r3, r7, #0
 800b088:	bfaa      	itet	ge
 800b08a:	2300      	movge	r3, #0
 800b08c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b090:	f8c8 3000 	strge.w	r3, [r8]
 800b094:	4b9a      	ldr	r3, [pc, #616]	; (800b300 <_dtoa_r+0x2d8>)
 800b096:	bfbc      	itt	lt
 800b098:	2201      	movlt	r2, #1
 800b09a:	f8c8 2000 	strlt.w	r2, [r8]
 800b09e:	ea33 030b 	bics.w	r3, r3, fp
 800b0a2:	d11b      	bne.n	800b0dc <_dtoa_r+0xb4>
 800b0a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0a6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b0aa:	6013      	str	r3, [r2, #0]
 800b0ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0b0:	4333      	orrs	r3, r6
 800b0b2:	f000 8592 	beq.w	800bbda <_dtoa_r+0xbb2>
 800b0b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0b8:	b963      	cbnz	r3, 800b0d4 <_dtoa_r+0xac>
 800b0ba:	4b92      	ldr	r3, [pc, #584]	; (800b304 <_dtoa_r+0x2dc>)
 800b0bc:	e022      	b.n	800b104 <_dtoa_r+0xdc>
 800b0be:	4b92      	ldr	r3, [pc, #584]	; (800b308 <_dtoa_r+0x2e0>)
 800b0c0:	9301      	str	r3, [sp, #4]
 800b0c2:	3308      	adds	r3, #8
 800b0c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b0c6:	6013      	str	r3, [r2, #0]
 800b0c8:	9801      	ldr	r0, [sp, #4]
 800b0ca:	b013      	add	sp, #76	; 0x4c
 800b0cc:	ecbd 8b04 	vpop	{d8-d9}
 800b0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0d4:	4b8b      	ldr	r3, [pc, #556]	; (800b304 <_dtoa_r+0x2dc>)
 800b0d6:	9301      	str	r3, [sp, #4]
 800b0d8:	3303      	adds	r3, #3
 800b0da:	e7f3      	b.n	800b0c4 <_dtoa_r+0x9c>
 800b0dc:	2200      	movs	r2, #0
 800b0de:	2300      	movs	r3, #0
 800b0e0:	4650      	mov	r0, sl
 800b0e2:	4659      	mov	r1, fp
 800b0e4:	f7f5 fcf8 	bl	8000ad8 <__aeabi_dcmpeq>
 800b0e8:	ec4b ab19 	vmov	d9, sl, fp
 800b0ec:	4680      	mov	r8, r0
 800b0ee:	b158      	cbz	r0, 800b108 <_dtoa_r+0xe0>
 800b0f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	6013      	str	r3, [r2, #0]
 800b0f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	f000 856b 	beq.w	800bbd4 <_dtoa_r+0xbac>
 800b0fe:	4883      	ldr	r0, [pc, #524]	; (800b30c <_dtoa_r+0x2e4>)
 800b100:	6018      	str	r0, [r3, #0]
 800b102:	1e43      	subs	r3, r0, #1
 800b104:	9301      	str	r3, [sp, #4]
 800b106:	e7df      	b.n	800b0c8 <_dtoa_r+0xa0>
 800b108:	ec4b ab10 	vmov	d0, sl, fp
 800b10c:	aa10      	add	r2, sp, #64	; 0x40
 800b10e:	a911      	add	r1, sp, #68	; 0x44
 800b110:	4620      	mov	r0, r4
 800b112:	f001 ff3b 	bl	800cf8c <__d2b>
 800b116:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b11a:	ee08 0a10 	vmov	s16, r0
 800b11e:	2d00      	cmp	r5, #0
 800b120:	f000 8084 	beq.w	800b22c <_dtoa_r+0x204>
 800b124:	ee19 3a90 	vmov	r3, s19
 800b128:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b12c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b130:	4656      	mov	r6, sl
 800b132:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b136:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b13a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b13e:	4b74      	ldr	r3, [pc, #464]	; (800b310 <_dtoa_r+0x2e8>)
 800b140:	2200      	movs	r2, #0
 800b142:	4630      	mov	r0, r6
 800b144:	4639      	mov	r1, r7
 800b146:	f7f5 f8a7 	bl	8000298 <__aeabi_dsub>
 800b14a:	a365      	add	r3, pc, #404	; (adr r3, 800b2e0 <_dtoa_r+0x2b8>)
 800b14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b150:	f7f5 fa5a 	bl	8000608 <__aeabi_dmul>
 800b154:	a364      	add	r3, pc, #400	; (adr r3, 800b2e8 <_dtoa_r+0x2c0>)
 800b156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15a:	f7f5 f89f 	bl	800029c <__adddf3>
 800b15e:	4606      	mov	r6, r0
 800b160:	4628      	mov	r0, r5
 800b162:	460f      	mov	r7, r1
 800b164:	f7f5 f9e6 	bl	8000534 <__aeabi_i2d>
 800b168:	a361      	add	r3, pc, #388	; (adr r3, 800b2f0 <_dtoa_r+0x2c8>)
 800b16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16e:	f7f5 fa4b 	bl	8000608 <__aeabi_dmul>
 800b172:	4602      	mov	r2, r0
 800b174:	460b      	mov	r3, r1
 800b176:	4630      	mov	r0, r6
 800b178:	4639      	mov	r1, r7
 800b17a:	f7f5 f88f 	bl	800029c <__adddf3>
 800b17e:	4606      	mov	r6, r0
 800b180:	460f      	mov	r7, r1
 800b182:	f7f5 fcf1 	bl	8000b68 <__aeabi_d2iz>
 800b186:	2200      	movs	r2, #0
 800b188:	9000      	str	r0, [sp, #0]
 800b18a:	2300      	movs	r3, #0
 800b18c:	4630      	mov	r0, r6
 800b18e:	4639      	mov	r1, r7
 800b190:	f7f5 fcac 	bl	8000aec <__aeabi_dcmplt>
 800b194:	b150      	cbz	r0, 800b1ac <_dtoa_r+0x184>
 800b196:	9800      	ldr	r0, [sp, #0]
 800b198:	f7f5 f9cc 	bl	8000534 <__aeabi_i2d>
 800b19c:	4632      	mov	r2, r6
 800b19e:	463b      	mov	r3, r7
 800b1a0:	f7f5 fc9a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1a4:	b910      	cbnz	r0, 800b1ac <_dtoa_r+0x184>
 800b1a6:	9b00      	ldr	r3, [sp, #0]
 800b1a8:	3b01      	subs	r3, #1
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	9b00      	ldr	r3, [sp, #0]
 800b1ae:	2b16      	cmp	r3, #22
 800b1b0:	d85a      	bhi.n	800b268 <_dtoa_r+0x240>
 800b1b2:	9a00      	ldr	r2, [sp, #0]
 800b1b4:	4b57      	ldr	r3, [pc, #348]	; (800b314 <_dtoa_r+0x2ec>)
 800b1b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1be:	ec51 0b19 	vmov	r0, r1, d9
 800b1c2:	f7f5 fc93 	bl	8000aec <__aeabi_dcmplt>
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	d050      	beq.n	800b26c <_dtoa_r+0x244>
 800b1ca:	9b00      	ldr	r3, [sp, #0]
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	9300      	str	r3, [sp, #0]
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1d6:	1b5d      	subs	r5, r3, r5
 800b1d8:	1e6b      	subs	r3, r5, #1
 800b1da:	9305      	str	r3, [sp, #20]
 800b1dc:	bf45      	ittet	mi
 800b1de:	f1c5 0301 	rsbmi	r3, r5, #1
 800b1e2:	9304      	strmi	r3, [sp, #16]
 800b1e4:	2300      	movpl	r3, #0
 800b1e6:	2300      	movmi	r3, #0
 800b1e8:	bf4c      	ite	mi
 800b1ea:	9305      	strmi	r3, [sp, #20]
 800b1ec:	9304      	strpl	r3, [sp, #16]
 800b1ee:	9b00      	ldr	r3, [sp, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	db3d      	blt.n	800b270 <_dtoa_r+0x248>
 800b1f4:	9b05      	ldr	r3, [sp, #20]
 800b1f6:	9a00      	ldr	r2, [sp, #0]
 800b1f8:	920a      	str	r2, [sp, #40]	; 0x28
 800b1fa:	4413      	add	r3, r2
 800b1fc:	9305      	str	r3, [sp, #20]
 800b1fe:	2300      	movs	r3, #0
 800b200:	9307      	str	r3, [sp, #28]
 800b202:	9b06      	ldr	r3, [sp, #24]
 800b204:	2b09      	cmp	r3, #9
 800b206:	f200 8089 	bhi.w	800b31c <_dtoa_r+0x2f4>
 800b20a:	2b05      	cmp	r3, #5
 800b20c:	bfc4      	itt	gt
 800b20e:	3b04      	subgt	r3, #4
 800b210:	9306      	strgt	r3, [sp, #24]
 800b212:	9b06      	ldr	r3, [sp, #24]
 800b214:	f1a3 0302 	sub.w	r3, r3, #2
 800b218:	bfcc      	ite	gt
 800b21a:	2500      	movgt	r5, #0
 800b21c:	2501      	movle	r5, #1
 800b21e:	2b03      	cmp	r3, #3
 800b220:	f200 8087 	bhi.w	800b332 <_dtoa_r+0x30a>
 800b224:	e8df f003 	tbb	[pc, r3]
 800b228:	59383a2d 	.word	0x59383a2d
 800b22c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b230:	441d      	add	r5, r3
 800b232:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b236:	2b20      	cmp	r3, #32
 800b238:	bfc1      	itttt	gt
 800b23a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b23e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b242:	fa0b f303 	lslgt.w	r3, fp, r3
 800b246:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b24a:	bfda      	itte	le
 800b24c:	f1c3 0320 	rsble	r3, r3, #32
 800b250:	fa06 f003 	lslle.w	r0, r6, r3
 800b254:	4318      	orrgt	r0, r3
 800b256:	f7f5 f95d 	bl	8000514 <__aeabi_ui2d>
 800b25a:	2301      	movs	r3, #1
 800b25c:	4606      	mov	r6, r0
 800b25e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b262:	3d01      	subs	r5, #1
 800b264:	930e      	str	r3, [sp, #56]	; 0x38
 800b266:	e76a      	b.n	800b13e <_dtoa_r+0x116>
 800b268:	2301      	movs	r3, #1
 800b26a:	e7b2      	b.n	800b1d2 <_dtoa_r+0x1aa>
 800b26c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b26e:	e7b1      	b.n	800b1d4 <_dtoa_r+0x1ac>
 800b270:	9b04      	ldr	r3, [sp, #16]
 800b272:	9a00      	ldr	r2, [sp, #0]
 800b274:	1a9b      	subs	r3, r3, r2
 800b276:	9304      	str	r3, [sp, #16]
 800b278:	4253      	negs	r3, r2
 800b27a:	9307      	str	r3, [sp, #28]
 800b27c:	2300      	movs	r3, #0
 800b27e:	930a      	str	r3, [sp, #40]	; 0x28
 800b280:	e7bf      	b.n	800b202 <_dtoa_r+0x1da>
 800b282:	2300      	movs	r3, #0
 800b284:	9308      	str	r3, [sp, #32]
 800b286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b288:	2b00      	cmp	r3, #0
 800b28a:	dc55      	bgt.n	800b338 <_dtoa_r+0x310>
 800b28c:	2301      	movs	r3, #1
 800b28e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b292:	461a      	mov	r2, r3
 800b294:	9209      	str	r2, [sp, #36]	; 0x24
 800b296:	e00c      	b.n	800b2b2 <_dtoa_r+0x28a>
 800b298:	2301      	movs	r3, #1
 800b29a:	e7f3      	b.n	800b284 <_dtoa_r+0x25c>
 800b29c:	2300      	movs	r3, #0
 800b29e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2a0:	9308      	str	r3, [sp, #32]
 800b2a2:	9b00      	ldr	r3, [sp, #0]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	9302      	str	r3, [sp, #8]
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	9303      	str	r3, [sp, #12]
 800b2ae:	bfb8      	it	lt
 800b2b0:	2301      	movlt	r3, #1
 800b2b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	6042      	str	r2, [r0, #4]
 800b2b8:	2204      	movs	r2, #4
 800b2ba:	f102 0614 	add.w	r6, r2, #20
 800b2be:	429e      	cmp	r6, r3
 800b2c0:	6841      	ldr	r1, [r0, #4]
 800b2c2:	d93d      	bls.n	800b340 <_dtoa_r+0x318>
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	f001 fa73 	bl	800c7b0 <_Balloc>
 800b2ca:	9001      	str	r0, [sp, #4]
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d13b      	bne.n	800b348 <_dtoa_r+0x320>
 800b2d0:	4b11      	ldr	r3, [pc, #68]	; (800b318 <_dtoa_r+0x2f0>)
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b2d8:	e6c0      	b.n	800b05c <_dtoa_r+0x34>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e7df      	b.n	800b29e <_dtoa_r+0x276>
 800b2de:	bf00      	nop
 800b2e0:	636f4361 	.word	0x636f4361
 800b2e4:	3fd287a7 	.word	0x3fd287a7
 800b2e8:	8b60c8b3 	.word	0x8b60c8b3
 800b2ec:	3fc68a28 	.word	0x3fc68a28
 800b2f0:	509f79fb 	.word	0x509f79fb
 800b2f4:	3fd34413 	.word	0x3fd34413
 800b2f8:	0800e179 	.word	0x0800e179
 800b2fc:	0800e190 	.word	0x0800e190
 800b300:	7ff00000 	.word	0x7ff00000
 800b304:	0800e175 	.word	0x0800e175
 800b308:	0800e16c 	.word	0x0800e16c
 800b30c:	0800e0b9 	.word	0x0800e0b9
 800b310:	3ff80000 	.word	0x3ff80000
 800b314:	0800e360 	.word	0x0800e360
 800b318:	0800e1eb 	.word	0x0800e1eb
 800b31c:	2501      	movs	r5, #1
 800b31e:	2300      	movs	r3, #0
 800b320:	9306      	str	r3, [sp, #24]
 800b322:	9508      	str	r5, [sp, #32]
 800b324:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b328:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b32c:	2200      	movs	r2, #0
 800b32e:	2312      	movs	r3, #18
 800b330:	e7b0      	b.n	800b294 <_dtoa_r+0x26c>
 800b332:	2301      	movs	r3, #1
 800b334:	9308      	str	r3, [sp, #32]
 800b336:	e7f5      	b.n	800b324 <_dtoa_r+0x2fc>
 800b338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b33a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b33e:	e7b8      	b.n	800b2b2 <_dtoa_r+0x28a>
 800b340:	3101      	adds	r1, #1
 800b342:	6041      	str	r1, [r0, #4]
 800b344:	0052      	lsls	r2, r2, #1
 800b346:	e7b8      	b.n	800b2ba <_dtoa_r+0x292>
 800b348:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b34a:	9a01      	ldr	r2, [sp, #4]
 800b34c:	601a      	str	r2, [r3, #0]
 800b34e:	9b03      	ldr	r3, [sp, #12]
 800b350:	2b0e      	cmp	r3, #14
 800b352:	f200 809d 	bhi.w	800b490 <_dtoa_r+0x468>
 800b356:	2d00      	cmp	r5, #0
 800b358:	f000 809a 	beq.w	800b490 <_dtoa_r+0x468>
 800b35c:	9b00      	ldr	r3, [sp, #0]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	dd32      	ble.n	800b3c8 <_dtoa_r+0x3a0>
 800b362:	4ab7      	ldr	r2, [pc, #732]	; (800b640 <_dtoa_r+0x618>)
 800b364:	f003 030f 	and.w	r3, r3, #15
 800b368:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b36c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b370:	9b00      	ldr	r3, [sp, #0]
 800b372:	05d8      	lsls	r0, r3, #23
 800b374:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b378:	d516      	bpl.n	800b3a8 <_dtoa_r+0x380>
 800b37a:	4bb2      	ldr	r3, [pc, #712]	; (800b644 <_dtoa_r+0x61c>)
 800b37c:	ec51 0b19 	vmov	r0, r1, d9
 800b380:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b384:	f7f5 fa6a 	bl	800085c <__aeabi_ddiv>
 800b388:	f007 070f 	and.w	r7, r7, #15
 800b38c:	4682      	mov	sl, r0
 800b38e:	468b      	mov	fp, r1
 800b390:	2503      	movs	r5, #3
 800b392:	4eac      	ldr	r6, [pc, #688]	; (800b644 <_dtoa_r+0x61c>)
 800b394:	b957      	cbnz	r7, 800b3ac <_dtoa_r+0x384>
 800b396:	4642      	mov	r2, r8
 800b398:	464b      	mov	r3, r9
 800b39a:	4650      	mov	r0, sl
 800b39c:	4659      	mov	r1, fp
 800b39e:	f7f5 fa5d 	bl	800085c <__aeabi_ddiv>
 800b3a2:	4682      	mov	sl, r0
 800b3a4:	468b      	mov	fp, r1
 800b3a6:	e028      	b.n	800b3fa <_dtoa_r+0x3d2>
 800b3a8:	2502      	movs	r5, #2
 800b3aa:	e7f2      	b.n	800b392 <_dtoa_r+0x36a>
 800b3ac:	07f9      	lsls	r1, r7, #31
 800b3ae:	d508      	bpl.n	800b3c2 <_dtoa_r+0x39a>
 800b3b0:	4640      	mov	r0, r8
 800b3b2:	4649      	mov	r1, r9
 800b3b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b3b8:	f7f5 f926 	bl	8000608 <__aeabi_dmul>
 800b3bc:	3501      	adds	r5, #1
 800b3be:	4680      	mov	r8, r0
 800b3c0:	4689      	mov	r9, r1
 800b3c2:	107f      	asrs	r7, r7, #1
 800b3c4:	3608      	adds	r6, #8
 800b3c6:	e7e5      	b.n	800b394 <_dtoa_r+0x36c>
 800b3c8:	f000 809b 	beq.w	800b502 <_dtoa_r+0x4da>
 800b3cc:	9b00      	ldr	r3, [sp, #0]
 800b3ce:	4f9d      	ldr	r7, [pc, #628]	; (800b644 <_dtoa_r+0x61c>)
 800b3d0:	425e      	negs	r6, r3
 800b3d2:	4b9b      	ldr	r3, [pc, #620]	; (800b640 <_dtoa_r+0x618>)
 800b3d4:	f006 020f 	and.w	r2, r6, #15
 800b3d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e0:	ec51 0b19 	vmov	r0, r1, d9
 800b3e4:	f7f5 f910 	bl	8000608 <__aeabi_dmul>
 800b3e8:	1136      	asrs	r6, r6, #4
 800b3ea:	4682      	mov	sl, r0
 800b3ec:	468b      	mov	fp, r1
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	2502      	movs	r5, #2
 800b3f2:	2e00      	cmp	r6, #0
 800b3f4:	d17a      	bne.n	800b4ec <_dtoa_r+0x4c4>
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d1d3      	bne.n	800b3a2 <_dtoa_r+0x37a>
 800b3fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	f000 8082 	beq.w	800b506 <_dtoa_r+0x4de>
 800b402:	4b91      	ldr	r3, [pc, #580]	; (800b648 <_dtoa_r+0x620>)
 800b404:	2200      	movs	r2, #0
 800b406:	4650      	mov	r0, sl
 800b408:	4659      	mov	r1, fp
 800b40a:	f7f5 fb6f 	bl	8000aec <__aeabi_dcmplt>
 800b40e:	2800      	cmp	r0, #0
 800b410:	d079      	beq.n	800b506 <_dtoa_r+0x4de>
 800b412:	9b03      	ldr	r3, [sp, #12]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d076      	beq.n	800b506 <_dtoa_r+0x4de>
 800b418:	9b02      	ldr	r3, [sp, #8]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	dd36      	ble.n	800b48c <_dtoa_r+0x464>
 800b41e:	9b00      	ldr	r3, [sp, #0]
 800b420:	4650      	mov	r0, sl
 800b422:	4659      	mov	r1, fp
 800b424:	1e5f      	subs	r7, r3, #1
 800b426:	2200      	movs	r2, #0
 800b428:	4b88      	ldr	r3, [pc, #544]	; (800b64c <_dtoa_r+0x624>)
 800b42a:	f7f5 f8ed 	bl	8000608 <__aeabi_dmul>
 800b42e:	9e02      	ldr	r6, [sp, #8]
 800b430:	4682      	mov	sl, r0
 800b432:	468b      	mov	fp, r1
 800b434:	3501      	adds	r5, #1
 800b436:	4628      	mov	r0, r5
 800b438:	f7f5 f87c 	bl	8000534 <__aeabi_i2d>
 800b43c:	4652      	mov	r2, sl
 800b43e:	465b      	mov	r3, fp
 800b440:	f7f5 f8e2 	bl	8000608 <__aeabi_dmul>
 800b444:	4b82      	ldr	r3, [pc, #520]	; (800b650 <_dtoa_r+0x628>)
 800b446:	2200      	movs	r2, #0
 800b448:	f7f4 ff28 	bl	800029c <__adddf3>
 800b44c:	46d0      	mov	r8, sl
 800b44e:	46d9      	mov	r9, fp
 800b450:	4682      	mov	sl, r0
 800b452:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b456:	2e00      	cmp	r6, #0
 800b458:	d158      	bne.n	800b50c <_dtoa_r+0x4e4>
 800b45a:	4b7e      	ldr	r3, [pc, #504]	; (800b654 <_dtoa_r+0x62c>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	4640      	mov	r0, r8
 800b460:	4649      	mov	r1, r9
 800b462:	f7f4 ff19 	bl	8000298 <__aeabi_dsub>
 800b466:	4652      	mov	r2, sl
 800b468:	465b      	mov	r3, fp
 800b46a:	4680      	mov	r8, r0
 800b46c:	4689      	mov	r9, r1
 800b46e:	f7f5 fb5b 	bl	8000b28 <__aeabi_dcmpgt>
 800b472:	2800      	cmp	r0, #0
 800b474:	f040 8295 	bne.w	800b9a2 <_dtoa_r+0x97a>
 800b478:	4652      	mov	r2, sl
 800b47a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b47e:	4640      	mov	r0, r8
 800b480:	4649      	mov	r1, r9
 800b482:	f7f5 fb33 	bl	8000aec <__aeabi_dcmplt>
 800b486:	2800      	cmp	r0, #0
 800b488:	f040 8289 	bne.w	800b99e <_dtoa_r+0x976>
 800b48c:	ec5b ab19 	vmov	sl, fp, d9
 800b490:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b492:	2b00      	cmp	r3, #0
 800b494:	f2c0 8148 	blt.w	800b728 <_dtoa_r+0x700>
 800b498:	9a00      	ldr	r2, [sp, #0]
 800b49a:	2a0e      	cmp	r2, #14
 800b49c:	f300 8144 	bgt.w	800b728 <_dtoa_r+0x700>
 800b4a0:	4b67      	ldr	r3, [pc, #412]	; (800b640 <_dtoa_r+0x618>)
 800b4a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	f280 80d5 	bge.w	800b65c <_dtoa_r+0x634>
 800b4b2:	9b03      	ldr	r3, [sp, #12]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	f300 80d1 	bgt.w	800b65c <_dtoa_r+0x634>
 800b4ba:	f040 826f 	bne.w	800b99c <_dtoa_r+0x974>
 800b4be:	4b65      	ldr	r3, [pc, #404]	; (800b654 <_dtoa_r+0x62c>)
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	4640      	mov	r0, r8
 800b4c4:	4649      	mov	r1, r9
 800b4c6:	f7f5 f89f 	bl	8000608 <__aeabi_dmul>
 800b4ca:	4652      	mov	r2, sl
 800b4cc:	465b      	mov	r3, fp
 800b4ce:	f7f5 fb21 	bl	8000b14 <__aeabi_dcmpge>
 800b4d2:	9e03      	ldr	r6, [sp, #12]
 800b4d4:	4637      	mov	r7, r6
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	f040 8245 	bne.w	800b966 <_dtoa_r+0x93e>
 800b4dc:	9d01      	ldr	r5, [sp, #4]
 800b4de:	2331      	movs	r3, #49	; 0x31
 800b4e0:	f805 3b01 	strb.w	r3, [r5], #1
 800b4e4:	9b00      	ldr	r3, [sp, #0]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	9300      	str	r3, [sp, #0]
 800b4ea:	e240      	b.n	800b96e <_dtoa_r+0x946>
 800b4ec:	07f2      	lsls	r2, r6, #31
 800b4ee:	d505      	bpl.n	800b4fc <_dtoa_r+0x4d4>
 800b4f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4f4:	f7f5 f888 	bl	8000608 <__aeabi_dmul>
 800b4f8:	3501      	adds	r5, #1
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	1076      	asrs	r6, r6, #1
 800b4fe:	3708      	adds	r7, #8
 800b500:	e777      	b.n	800b3f2 <_dtoa_r+0x3ca>
 800b502:	2502      	movs	r5, #2
 800b504:	e779      	b.n	800b3fa <_dtoa_r+0x3d2>
 800b506:	9f00      	ldr	r7, [sp, #0]
 800b508:	9e03      	ldr	r6, [sp, #12]
 800b50a:	e794      	b.n	800b436 <_dtoa_r+0x40e>
 800b50c:	9901      	ldr	r1, [sp, #4]
 800b50e:	4b4c      	ldr	r3, [pc, #304]	; (800b640 <_dtoa_r+0x618>)
 800b510:	4431      	add	r1, r6
 800b512:	910d      	str	r1, [sp, #52]	; 0x34
 800b514:	9908      	ldr	r1, [sp, #32]
 800b516:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b51a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b51e:	2900      	cmp	r1, #0
 800b520:	d043      	beq.n	800b5aa <_dtoa_r+0x582>
 800b522:	494d      	ldr	r1, [pc, #308]	; (800b658 <_dtoa_r+0x630>)
 800b524:	2000      	movs	r0, #0
 800b526:	f7f5 f999 	bl	800085c <__aeabi_ddiv>
 800b52a:	4652      	mov	r2, sl
 800b52c:	465b      	mov	r3, fp
 800b52e:	f7f4 feb3 	bl	8000298 <__aeabi_dsub>
 800b532:	9d01      	ldr	r5, [sp, #4]
 800b534:	4682      	mov	sl, r0
 800b536:	468b      	mov	fp, r1
 800b538:	4649      	mov	r1, r9
 800b53a:	4640      	mov	r0, r8
 800b53c:	f7f5 fb14 	bl	8000b68 <__aeabi_d2iz>
 800b540:	4606      	mov	r6, r0
 800b542:	f7f4 fff7 	bl	8000534 <__aeabi_i2d>
 800b546:	4602      	mov	r2, r0
 800b548:	460b      	mov	r3, r1
 800b54a:	4640      	mov	r0, r8
 800b54c:	4649      	mov	r1, r9
 800b54e:	f7f4 fea3 	bl	8000298 <__aeabi_dsub>
 800b552:	3630      	adds	r6, #48	; 0x30
 800b554:	f805 6b01 	strb.w	r6, [r5], #1
 800b558:	4652      	mov	r2, sl
 800b55a:	465b      	mov	r3, fp
 800b55c:	4680      	mov	r8, r0
 800b55e:	4689      	mov	r9, r1
 800b560:	f7f5 fac4 	bl	8000aec <__aeabi_dcmplt>
 800b564:	2800      	cmp	r0, #0
 800b566:	d163      	bne.n	800b630 <_dtoa_r+0x608>
 800b568:	4642      	mov	r2, r8
 800b56a:	464b      	mov	r3, r9
 800b56c:	4936      	ldr	r1, [pc, #216]	; (800b648 <_dtoa_r+0x620>)
 800b56e:	2000      	movs	r0, #0
 800b570:	f7f4 fe92 	bl	8000298 <__aeabi_dsub>
 800b574:	4652      	mov	r2, sl
 800b576:	465b      	mov	r3, fp
 800b578:	f7f5 fab8 	bl	8000aec <__aeabi_dcmplt>
 800b57c:	2800      	cmp	r0, #0
 800b57e:	f040 80b5 	bne.w	800b6ec <_dtoa_r+0x6c4>
 800b582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b584:	429d      	cmp	r5, r3
 800b586:	d081      	beq.n	800b48c <_dtoa_r+0x464>
 800b588:	4b30      	ldr	r3, [pc, #192]	; (800b64c <_dtoa_r+0x624>)
 800b58a:	2200      	movs	r2, #0
 800b58c:	4650      	mov	r0, sl
 800b58e:	4659      	mov	r1, fp
 800b590:	f7f5 f83a 	bl	8000608 <__aeabi_dmul>
 800b594:	4b2d      	ldr	r3, [pc, #180]	; (800b64c <_dtoa_r+0x624>)
 800b596:	4682      	mov	sl, r0
 800b598:	468b      	mov	fp, r1
 800b59a:	4640      	mov	r0, r8
 800b59c:	4649      	mov	r1, r9
 800b59e:	2200      	movs	r2, #0
 800b5a0:	f7f5 f832 	bl	8000608 <__aeabi_dmul>
 800b5a4:	4680      	mov	r8, r0
 800b5a6:	4689      	mov	r9, r1
 800b5a8:	e7c6      	b.n	800b538 <_dtoa_r+0x510>
 800b5aa:	4650      	mov	r0, sl
 800b5ac:	4659      	mov	r1, fp
 800b5ae:	f7f5 f82b 	bl	8000608 <__aeabi_dmul>
 800b5b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5b4:	9d01      	ldr	r5, [sp, #4]
 800b5b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5b8:	4682      	mov	sl, r0
 800b5ba:	468b      	mov	fp, r1
 800b5bc:	4649      	mov	r1, r9
 800b5be:	4640      	mov	r0, r8
 800b5c0:	f7f5 fad2 	bl	8000b68 <__aeabi_d2iz>
 800b5c4:	4606      	mov	r6, r0
 800b5c6:	f7f4 ffb5 	bl	8000534 <__aeabi_i2d>
 800b5ca:	3630      	adds	r6, #48	; 0x30
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	4640      	mov	r0, r8
 800b5d2:	4649      	mov	r1, r9
 800b5d4:	f7f4 fe60 	bl	8000298 <__aeabi_dsub>
 800b5d8:	f805 6b01 	strb.w	r6, [r5], #1
 800b5dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5de:	429d      	cmp	r5, r3
 800b5e0:	4680      	mov	r8, r0
 800b5e2:	4689      	mov	r9, r1
 800b5e4:	f04f 0200 	mov.w	r2, #0
 800b5e8:	d124      	bne.n	800b634 <_dtoa_r+0x60c>
 800b5ea:	4b1b      	ldr	r3, [pc, #108]	; (800b658 <_dtoa_r+0x630>)
 800b5ec:	4650      	mov	r0, sl
 800b5ee:	4659      	mov	r1, fp
 800b5f0:	f7f4 fe54 	bl	800029c <__adddf3>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	4640      	mov	r0, r8
 800b5fa:	4649      	mov	r1, r9
 800b5fc:	f7f5 fa94 	bl	8000b28 <__aeabi_dcmpgt>
 800b600:	2800      	cmp	r0, #0
 800b602:	d173      	bne.n	800b6ec <_dtoa_r+0x6c4>
 800b604:	4652      	mov	r2, sl
 800b606:	465b      	mov	r3, fp
 800b608:	4913      	ldr	r1, [pc, #76]	; (800b658 <_dtoa_r+0x630>)
 800b60a:	2000      	movs	r0, #0
 800b60c:	f7f4 fe44 	bl	8000298 <__aeabi_dsub>
 800b610:	4602      	mov	r2, r0
 800b612:	460b      	mov	r3, r1
 800b614:	4640      	mov	r0, r8
 800b616:	4649      	mov	r1, r9
 800b618:	f7f5 fa68 	bl	8000aec <__aeabi_dcmplt>
 800b61c:	2800      	cmp	r0, #0
 800b61e:	f43f af35 	beq.w	800b48c <_dtoa_r+0x464>
 800b622:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b624:	1e6b      	subs	r3, r5, #1
 800b626:	930f      	str	r3, [sp, #60]	; 0x3c
 800b628:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b62c:	2b30      	cmp	r3, #48	; 0x30
 800b62e:	d0f8      	beq.n	800b622 <_dtoa_r+0x5fa>
 800b630:	9700      	str	r7, [sp, #0]
 800b632:	e049      	b.n	800b6c8 <_dtoa_r+0x6a0>
 800b634:	4b05      	ldr	r3, [pc, #20]	; (800b64c <_dtoa_r+0x624>)
 800b636:	f7f4 ffe7 	bl	8000608 <__aeabi_dmul>
 800b63a:	4680      	mov	r8, r0
 800b63c:	4689      	mov	r9, r1
 800b63e:	e7bd      	b.n	800b5bc <_dtoa_r+0x594>
 800b640:	0800e360 	.word	0x0800e360
 800b644:	0800e338 	.word	0x0800e338
 800b648:	3ff00000 	.word	0x3ff00000
 800b64c:	40240000 	.word	0x40240000
 800b650:	401c0000 	.word	0x401c0000
 800b654:	40140000 	.word	0x40140000
 800b658:	3fe00000 	.word	0x3fe00000
 800b65c:	9d01      	ldr	r5, [sp, #4]
 800b65e:	4656      	mov	r6, sl
 800b660:	465f      	mov	r7, fp
 800b662:	4642      	mov	r2, r8
 800b664:	464b      	mov	r3, r9
 800b666:	4630      	mov	r0, r6
 800b668:	4639      	mov	r1, r7
 800b66a:	f7f5 f8f7 	bl	800085c <__aeabi_ddiv>
 800b66e:	f7f5 fa7b 	bl	8000b68 <__aeabi_d2iz>
 800b672:	4682      	mov	sl, r0
 800b674:	f7f4 ff5e 	bl	8000534 <__aeabi_i2d>
 800b678:	4642      	mov	r2, r8
 800b67a:	464b      	mov	r3, r9
 800b67c:	f7f4 ffc4 	bl	8000608 <__aeabi_dmul>
 800b680:	4602      	mov	r2, r0
 800b682:	460b      	mov	r3, r1
 800b684:	4630      	mov	r0, r6
 800b686:	4639      	mov	r1, r7
 800b688:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b68c:	f7f4 fe04 	bl	8000298 <__aeabi_dsub>
 800b690:	f805 6b01 	strb.w	r6, [r5], #1
 800b694:	9e01      	ldr	r6, [sp, #4]
 800b696:	9f03      	ldr	r7, [sp, #12]
 800b698:	1bae      	subs	r6, r5, r6
 800b69a:	42b7      	cmp	r7, r6
 800b69c:	4602      	mov	r2, r0
 800b69e:	460b      	mov	r3, r1
 800b6a0:	d135      	bne.n	800b70e <_dtoa_r+0x6e6>
 800b6a2:	f7f4 fdfb 	bl	800029c <__adddf3>
 800b6a6:	4642      	mov	r2, r8
 800b6a8:	464b      	mov	r3, r9
 800b6aa:	4606      	mov	r6, r0
 800b6ac:	460f      	mov	r7, r1
 800b6ae:	f7f5 fa3b 	bl	8000b28 <__aeabi_dcmpgt>
 800b6b2:	b9d0      	cbnz	r0, 800b6ea <_dtoa_r+0x6c2>
 800b6b4:	4642      	mov	r2, r8
 800b6b6:	464b      	mov	r3, r9
 800b6b8:	4630      	mov	r0, r6
 800b6ba:	4639      	mov	r1, r7
 800b6bc:	f7f5 fa0c 	bl	8000ad8 <__aeabi_dcmpeq>
 800b6c0:	b110      	cbz	r0, 800b6c8 <_dtoa_r+0x6a0>
 800b6c2:	f01a 0f01 	tst.w	sl, #1
 800b6c6:	d110      	bne.n	800b6ea <_dtoa_r+0x6c2>
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	ee18 1a10 	vmov	r1, s16
 800b6ce:	f001 f8af 	bl	800c830 <_Bfree>
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	9800      	ldr	r0, [sp, #0]
 800b6d6:	702b      	strb	r3, [r5, #0]
 800b6d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6da:	3001      	adds	r0, #1
 800b6dc:	6018      	str	r0, [r3, #0]
 800b6de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f43f acf1 	beq.w	800b0c8 <_dtoa_r+0xa0>
 800b6e6:	601d      	str	r5, [r3, #0]
 800b6e8:	e4ee      	b.n	800b0c8 <_dtoa_r+0xa0>
 800b6ea:	9f00      	ldr	r7, [sp, #0]
 800b6ec:	462b      	mov	r3, r5
 800b6ee:	461d      	mov	r5, r3
 800b6f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6f4:	2a39      	cmp	r2, #57	; 0x39
 800b6f6:	d106      	bne.n	800b706 <_dtoa_r+0x6de>
 800b6f8:	9a01      	ldr	r2, [sp, #4]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d1f7      	bne.n	800b6ee <_dtoa_r+0x6c6>
 800b6fe:	9901      	ldr	r1, [sp, #4]
 800b700:	2230      	movs	r2, #48	; 0x30
 800b702:	3701      	adds	r7, #1
 800b704:	700a      	strb	r2, [r1, #0]
 800b706:	781a      	ldrb	r2, [r3, #0]
 800b708:	3201      	adds	r2, #1
 800b70a:	701a      	strb	r2, [r3, #0]
 800b70c:	e790      	b.n	800b630 <_dtoa_r+0x608>
 800b70e:	4ba6      	ldr	r3, [pc, #664]	; (800b9a8 <_dtoa_r+0x980>)
 800b710:	2200      	movs	r2, #0
 800b712:	f7f4 ff79 	bl	8000608 <__aeabi_dmul>
 800b716:	2200      	movs	r2, #0
 800b718:	2300      	movs	r3, #0
 800b71a:	4606      	mov	r6, r0
 800b71c:	460f      	mov	r7, r1
 800b71e:	f7f5 f9db 	bl	8000ad8 <__aeabi_dcmpeq>
 800b722:	2800      	cmp	r0, #0
 800b724:	d09d      	beq.n	800b662 <_dtoa_r+0x63a>
 800b726:	e7cf      	b.n	800b6c8 <_dtoa_r+0x6a0>
 800b728:	9a08      	ldr	r2, [sp, #32]
 800b72a:	2a00      	cmp	r2, #0
 800b72c:	f000 80d7 	beq.w	800b8de <_dtoa_r+0x8b6>
 800b730:	9a06      	ldr	r2, [sp, #24]
 800b732:	2a01      	cmp	r2, #1
 800b734:	f300 80ba 	bgt.w	800b8ac <_dtoa_r+0x884>
 800b738:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b73a:	2a00      	cmp	r2, #0
 800b73c:	f000 80b2 	beq.w	800b8a4 <_dtoa_r+0x87c>
 800b740:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b744:	9e07      	ldr	r6, [sp, #28]
 800b746:	9d04      	ldr	r5, [sp, #16]
 800b748:	9a04      	ldr	r2, [sp, #16]
 800b74a:	441a      	add	r2, r3
 800b74c:	9204      	str	r2, [sp, #16]
 800b74e:	9a05      	ldr	r2, [sp, #20]
 800b750:	2101      	movs	r1, #1
 800b752:	441a      	add	r2, r3
 800b754:	4620      	mov	r0, r4
 800b756:	9205      	str	r2, [sp, #20]
 800b758:	f001 f96c 	bl	800ca34 <__i2b>
 800b75c:	4607      	mov	r7, r0
 800b75e:	2d00      	cmp	r5, #0
 800b760:	dd0c      	ble.n	800b77c <_dtoa_r+0x754>
 800b762:	9b05      	ldr	r3, [sp, #20]
 800b764:	2b00      	cmp	r3, #0
 800b766:	dd09      	ble.n	800b77c <_dtoa_r+0x754>
 800b768:	42ab      	cmp	r3, r5
 800b76a:	9a04      	ldr	r2, [sp, #16]
 800b76c:	bfa8      	it	ge
 800b76e:	462b      	movge	r3, r5
 800b770:	1ad2      	subs	r2, r2, r3
 800b772:	9204      	str	r2, [sp, #16]
 800b774:	9a05      	ldr	r2, [sp, #20]
 800b776:	1aed      	subs	r5, r5, r3
 800b778:	1ad3      	subs	r3, r2, r3
 800b77a:	9305      	str	r3, [sp, #20]
 800b77c:	9b07      	ldr	r3, [sp, #28]
 800b77e:	b31b      	cbz	r3, 800b7c8 <_dtoa_r+0x7a0>
 800b780:	9b08      	ldr	r3, [sp, #32]
 800b782:	2b00      	cmp	r3, #0
 800b784:	f000 80af 	beq.w	800b8e6 <_dtoa_r+0x8be>
 800b788:	2e00      	cmp	r6, #0
 800b78a:	dd13      	ble.n	800b7b4 <_dtoa_r+0x78c>
 800b78c:	4639      	mov	r1, r7
 800b78e:	4632      	mov	r2, r6
 800b790:	4620      	mov	r0, r4
 800b792:	f001 fa0f 	bl	800cbb4 <__pow5mult>
 800b796:	ee18 2a10 	vmov	r2, s16
 800b79a:	4601      	mov	r1, r0
 800b79c:	4607      	mov	r7, r0
 800b79e:	4620      	mov	r0, r4
 800b7a0:	f001 f95e 	bl	800ca60 <__multiply>
 800b7a4:	ee18 1a10 	vmov	r1, s16
 800b7a8:	4680      	mov	r8, r0
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	f001 f840 	bl	800c830 <_Bfree>
 800b7b0:	ee08 8a10 	vmov	s16, r8
 800b7b4:	9b07      	ldr	r3, [sp, #28]
 800b7b6:	1b9a      	subs	r2, r3, r6
 800b7b8:	d006      	beq.n	800b7c8 <_dtoa_r+0x7a0>
 800b7ba:	ee18 1a10 	vmov	r1, s16
 800b7be:	4620      	mov	r0, r4
 800b7c0:	f001 f9f8 	bl	800cbb4 <__pow5mult>
 800b7c4:	ee08 0a10 	vmov	s16, r0
 800b7c8:	2101      	movs	r1, #1
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f001 f932 	bl	800ca34 <__i2b>
 800b7d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	4606      	mov	r6, r0
 800b7d6:	f340 8088 	ble.w	800b8ea <_dtoa_r+0x8c2>
 800b7da:	461a      	mov	r2, r3
 800b7dc:	4601      	mov	r1, r0
 800b7de:	4620      	mov	r0, r4
 800b7e0:	f001 f9e8 	bl	800cbb4 <__pow5mult>
 800b7e4:	9b06      	ldr	r3, [sp, #24]
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	4606      	mov	r6, r0
 800b7ea:	f340 8081 	ble.w	800b8f0 <_dtoa_r+0x8c8>
 800b7ee:	f04f 0800 	mov.w	r8, #0
 800b7f2:	6933      	ldr	r3, [r6, #16]
 800b7f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b7f8:	6918      	ldr	r0, [r3, #16]
 800b7fa:	f001 f8cb 	bl	800c994 <__hi0bits>
 800b7fe:	f1c0 0020 	rsb	r0, r0, #32
 800b802:	9b05      	ldr	r3, [sp, #20]
 800b804:	4418      	add	r0, r3
 800b806:	f010 001f 	ands.w	r0, r0, #31
 800b80a:	f000 8092 	beq.w	800b932 <_dtoa_r+0x90a>
 800b80e:	f1c0 0320 	rsb	r3, r0, #32
 800b812:	2b04      	cmp	r3, #4
 800b814:	f340 808a 	ble.w	800b92c <_dtoa_r+0x904>
 800b818:	f1c0 001c 	rsb	r0, r0, #28
 800b81c:	9b04      	ldr	r3, [sp, #16]
 800b81e:	4403      	add	r3, r0
 800b820:	9304      	str	r3, [sp, #16]
 800b822:	9b05      	ldr	r3, [sp, #20]
 800b824:	4403      	add	r3, r0
 800b826:	4405      	add	r5, r0
 800b828:	9305      	str	r3, [sp, #20]
 800b82a:	9b04      	ldr	r3, [sp, #16]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	dd07      	ble.n	800b840 <_dtoa_r+0x818>
 800b830:	ee18 1a10 	vmov	r1, s16
 800b834:	461a      	mov	r2, r3
 800b836:	4620      	mov	r0, r4
 800b838:	f001 fa16 	bl	800cc68 <__lshift>
 800b83c:	ee08 0a10 	vmov	s16, r0
 800b840:	9b05      	ldr	r3, [sp, #20]
 800b842:	2b00      	cmp	r3, #0
 800b844:	dd05      	ble.n	800b852 <_dtoa_r+0x82a>
 800b846:	4631      	mov	r1, r6
 800b848:	461a      	mov	r2, r3
 800b84a:	4620      	mov	r0, r4
 800b84c:	f001 fa0c 	bl	800cc68 <__lshift>
 800b850:	4606      	mov	r6, r0
 800b852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b854:	2b00      	cmp	r3, #0
 800b856:	d06e      	beq.n	800b936 <_dtoa_r+0x90e>
 800b858:	ee18 0a10 	vmov	r0, s16
 800b85c:	4631      	mov	r1, r6
 800b85e:	f001 fa73 	bl	800cd48 <__mcmp>
 800b862:	2800      	cmp	r0, #0
 800b864:	da67      	bge.n	800b936 <_dtoa_r+0x90e>
 800b866:	9b00      	ldr	r3, [sp, #0]
 800b868:	3b01      	subs	r3, #1
 800b86a:	ee18 1a10 	vmov	r1, s16
 800b86e:	9300      	str	r3, [sp, #0]
 800b870:	220a      	movs	r2, #10
 800b872:	2300      	movs	r3, #0
 800b874:	4620      	mov	r0, r4
 800b876:	f000 fffd 	bl	800c874 <__multadd>
 800b87a:	9b08      	ldr	r3, [sp, #32]
 800b87c:	ee08 0a10 	vmov	s16, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	f000 81b1 	beq.w	800bbe8 <_dtoa_r+0xbc0>
 800b886:	2300      	movs	r3, #0
 800b888:	4639      	mov	r1, r7
 800b88a:	220a      	movs	r2, #10
 800b88c:	4620      	mov	r0, r4
 800b88e:	f000 fff1 	bl	800c874 <__multadd>
 800b892:	9b02      	ldr	r3, [sp, #8]
 800b894:	2b00      	cmp	r3, #0
 800b896:	4607      	mov	r7, r0
 800b898:	f300 808e 	bgt.w	800b9b8 <_dtoa_r+0x990>
 800b89c:	9b06      	ldr	r3, [sp, #24]
 800b89e:	2b02      	cmp	r3, #2
 800b8a0:	dc51      	bgt.n	800b946 <_dtoa_r+0x91e>
 800b8a2:	e089      	b.n	800b9b8 <_dtoa_r+0x990>
 800b8a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b8a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b8aa:	e74b      	b.n	800b744 <_dtoa_r+0x71c>
 800b8ac:	9b03      	ldr	r3, [sp, #12]
 800b8ae:	1e5e      	subs	r6, r3, #1
 800b8b0:	9b07      	ldr	r3, [sp, #28]
 800b8b2:	42b3      	cmp	r3, r6
 800b8b4:	bfbf      	itttt	lt
 800b8b6:	9b07      	ldrlt	r3, [sp, #28]
 800b8b8:	9607      	strlt	r6, [sp, #28]
 800b8ba:	1af2      	sublt	r2, r6, r3
 800b8bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b8be:	bfb6      	itet	lt
 800b8c0:	189b      	addlt	r3, r3, r2
 800b8c2:	1b9e      	subge	r6, r3, r6
 800b8c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b8c6:	9b03      	ldr	r3, [sp, #12]
 800b8c8:	bfb8      	it	lt
 800b8ca:	2600      	movlt	r6, #0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	bfb7      	itett	lt
 800b8d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b8d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b8d8:	1a9d      	sublt	r5, r3, r2
 800b8da:	2300      	movlt	r3, #0
 800b8dc:	e734      	b.n	800b748 <_dtoa_r+0x720>
 800b8de:	9e07      	ldr	r6, [sp, #28]
 800b8e0:	9d04      	ldr	r5, [sp, #16]
 800b8e2:	9f08      	ldr	r7, [sp, #32]
 800b8e4:	e73b      	b.n	800b75e <_dtoa_r+0x736>
 800b8e6:	9a07      	ldr	r2, [sp, #28]
 800b8e8:	e767      	b.n	800b7ba <_dtoa_r+0x792>
 800b8ea:	9b06      	ldr	r3, [sp, #24]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	dc18      	bgt.n	800b922 <_dtoa_r+0x8fa>
 800b8f0:	f1ba 0f00 	cmp.w	sl, #0
 800b8f4:	d115      	bne.n	800b922 <_dtoa_r+0x8fa>
 800b8f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b8fa:	b993      	cbnz	r3, 800b922 <_dtoa_r+0x8fa>
 800b8fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b900:	0d1b      	lsrs	r3, r3, #20
 800b902:	051b      	lsls	r3, r3, #20
 800b904:	b183      	cbz	r3, 800b928 <_dtoa_r+0x900>
 800b906:	9b04      	ldr	r3, [sp, #16]
 800b908:	3301      	adds	r3, #1
 800b90a:	9304      	str	r3, [sp, #16]
 800b90c:	9b05      	ldr	r3, [sp, #20]
 800b90e:	3301      	adds	r3, #1
 800b910:	9305      	str	r3, [sp, #20]
 800b912:	f04f 0801 	mov.w	r8, #1
 800b916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b918:	2b00      	cmp	r3, #0
 800b91a:	f47f af6a 	bne.w	800b7f2 <_dtoa_r+0x7ca>
 800b91e:	2001      	movs	r0, #1
 800b920:	e76f      	b.n	800b802 <_dtoa_r+0x7da>
 800b922:	f04f 0800 	mov.w	r8, #0
 800b926:	e7f6      	b.n	800b916 <_dtoa_r+0x8ee>
 800b928:	4698      	mov	r8, r3
 800b92a:	e7f4      	b.n	800b916 <_dtoa_r+0x8ee>
 800b92c:	f43f af7d 	beq.w	800b82a <_dtoa_r+0x802>
 800b930:	4618      	mov	r0, r3
 800b932:	301c      	adds	r0, #28
 800b934:	e772      	b.n	800b81c <_dtoa_r+0x7f4>
 800b936:	9b03      	ldr	r3, [sp, #12]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	dc37      	bgt.n	800b9ac <_dtoa_r+0x984>
 800b93c:	9b06      	ldr	r3, [sp, #24]
 800b93e:	2b02      	cmp	r3, #2
 800b940:	dd34      	ble.n	800b9ac <_dtoa_r+0x984>
 800b942:	9b03      	ldr	r3, [sp, #12]
 800b944:	9302      	str	r3, [sp, #8]
 800b946:	9b02      	ldr	r3, [sp, #8]
 800b948:	b96b      	cbnz	r3, 800b966 <_dtoa_r+0x93e>
 800b94a:	4631      	mov	r1, r6
 800b94c:	2205      	movs	r2, #5
 800b94e:	4620      	mov	r0, r4
 800b950:	f000 ff90 	bl	800c874 <__multadd>
 800b954:	4601      	mov	r1, r0
 800b956:	4606      	mov	r6, r0
 800b958:	ee18 0a10 	vmov	r0, s16
 800b95c:	f001 f9f4 	bl	800cd48 <__mcmp>
 800b960:	2800      	cmp	r0, #0
 800b962:	f73f adbb 	bgt.w	800b4dc <_dtoa_r+0x4b4>
 800b966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b968:	9d01      	ldr	r5, [sp, #4]
 800b96a:	43db      	mvns	r3, r3
 800b96c:	9300      	str	r3, [sp, #0]
 800b96e:	f04f 0800 	mov.w	r8, #0
 800b972:	4631      	mov	r1, r6
 800b974:	4620      	mov	r0, r4
 800b976:	f000 ff5b 	bl	800c830 <_Bfree>
 800b97a:	2f00      	cmp	r7, #0
 800b97c:	f43f aea4 	beq.w	800b6c8 <_dtoa_r+0x6a0>
 800b980:	f1b8 0f00 	cmp.w	r8, #0
 800b984:	d005      	beq.n	800b992 <_dtoa_r+0x96a>
 800b986:	45b8      	cmp	r8, r7
 800b988:	d003      	beq.n	800b992 <_dtoa_r+0x96a>
 800b98a:	4641      	mov	r1, r8
 800b98c:	4620      	mov	r0, r4
 800b98e:	f000 ff4f 	bl	800c830 <_Bfree>
 800b992:	4639      	mov	r1, r7
 800b994:	4620      	mov	r0, r4
 800b996:	f000 ff4b 	bl	800c830 <_Bfree>
 800b99a:	e695      	b.n	800b6c8 <_dtoa_r+0x6a0>
 800b99c:	2600      	movs	r6, #0
 800b99e:	4637      	mov	r7, r6
 800b9a0:	e7e1      	b.n	800b966 <_dtoa_r+0x93e>
 800b9a2:	9700      	str	r7, [sp, #0]
 800b9a4:	4637      	mov	r7, r6
 800b9a6:	e599      	b.n	800b4dc <_dtoa_r+0x4b4>
 800b9a8:	40240000 	.word	0x40240000
 800b9ac:	9b08      	ldr	r3, [sp, #32]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	f000 80ca 	beq.w	800bb48 <_dtoa_r+0xb20>
 800b9b4:	9b03      	ldr	r3, [sp, #12]
 800b9b6:	9302      	str	r3, [sp, #8]
 800b9b8:	2d00      	cmp	r5, #0
 800b9ba:	dd05      	ble.n	800b9c8 <_dtoa_r+0x9a0>
 800b9bc:	4639      	mov	r1, r7
 800b9be:	462a      	mov	r2, r5
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	f001 f951 	bl	800cc68 <__lshift>
 800b9c6:	4607      	mov	r7, r0
 800b9c8:	f1b8 0f00 	cmp.w	r8, #0
 800b9cc:	d05b      	beq.n	800ba86 <_dtoa_r+0xa5e>
 800b9ce:	6879      	ldr	r1, [r7, #4]
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f000 feed 	bl	800c7b0 <_Balloc>
 800b9d6:	4605      	mov	r5, r0
 800b9d8:	b928      	cbnz	r0, 800b9e6 <_dtoa_r+0x9be>
 800b9da:	4b87      	ldr	r3, [pc, #540]	; (800bbf8 <_dtoa_r+0xbd0>)
 800b9dc:	4602      	mov	r2, r0
 800b9de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b9e2:	f7ff bb3b 	b.w	800b05c <_dtoa_r+0x34>
 800b9e6:	693a      	ldr	r2, [r7, #16]
 800b9e8:	3202      	adds	r2, #2
 800b9ea:	0092      	lsls	r2, r2, #2
 800b9ec:	f107 010c 	add.w	r1, r7, #12
 800b9f0:	300c      	adds	r0, #12
 800b9f2:	f7fd fbf9 	bl	80091e8 <memcpy>
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	4629      	mov	r1, r5
 800b9fa:	4620      	mov	r0, r4
 800b9fc:	f001 f934 	bl	800cc68 <__lshift>
 800ba00:	9b01      	ldr	r3, [sp, #4]
 800ba02:	f103 0901 	add.w	r9, r3, #1
 800ba06:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	9305      	str	r3, [sp, #20]
 800ba0e:	f00a 0301 	and.w	r3, sl, #1
 800ba12:	46b8      	mov	r8, r7
 800ba14:	9304      	str	r3, [sp, #16]
 800ba16:	4607      	mov	r7, r0
 800ba18:	4631      	mov	r1, r6
 800ba1a:	ee18 0a10 	vmov	r0, s16
 800ba1e:	f7ff fa75 	bl	800af0c <quorem>
 800ba22:	4641      	mov	r1, r8
 800ba24:	9002      	str	r0, [sp, #8]
 800ba26:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ba2a:	ee18 0a10 	vmov	r0, s16
 800ba2e:	f001 f98b 	bl	800cd48 <__mcmp>
 800ba32:	463a      	mov	r2, r7
 800ba34:	9003      	str	r0, [sp, #12]
 800ba36:	4631      	mov	r1, r6
 800ba38:	4620      	mov	r0, r4
 800ba3a:	f001 f9a1 	bl	800cd80 <__mdiff>
 800ba3e:	68c2      	ldr	r2, [r0, #12]
 800ba40:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800ba44:	4605      	mov	r5, r0
 800ba46:	bb02      	cbnz	r2, 800ba8a <_dtoa_r+0xa62>
 800ba48:	4601      	mov	r1, r0
 800ba4a:	ee18 0a10 	vmov	r0, s16
 800ba4e:	f001 f97b 	bl	800cd48 <__mcmp>
 800ba52:	4602      	mov	r2, r0
 800ba54:	4629      	mov	r1, r5
 800ba56:	4620      	mov	r0, r4
 800ba58:	9207      	str	r2, [sp, #28]
 800ba5a:	f000 fee9 	bl	800c830 <_Bfree>
 800ba5e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ba62:	ea43 0102 	orr.w	r1, r3, r2
 800ba66:	9b04      	ldr	r3, [sp, #16]
 800ba68:	430b      	orrs	r3, r1
 800ba6a:	464d      	mov	r5, r9
 800ba6c:	d10f      	bne.n	800ba8e <_dtoa_r+0xa66>
 800ba6e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba72:	d02a      	beq.n	800baca <_dtoa_r+0xaa2>
 800ba74:	9b03      	ldr	r3, [sp, #12]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	dd02      	ble.n	800ba80 <_dtoa_r+0xa58>
 800ba7a:	9b02      	ldr	r3, [sp, #8]
 800ba7c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ba80:	f88b a000 	strb.w	sl, [fp]
 800ba84:	e775      	b.n	800b972 <_dtoa_r+0x94a>
 800ba86:	4638      	mov	r0, r7
 800ba88:	e7ba      	b.n	800ba00 <_dtoa_r+0x9d8>
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	e7e2      	b.n	800ba54 <_dtoa_r+0xa2c>
 800ba8e:	9b03      	ldr	r3, [sp, #12]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	db04      	blt.n	800ba9e <_dtoa_r+0xa76>
 800ba94:	9906      	ldr	r1, [sp, #24]
 800ba96:	430b      	orrs	r3, r1
 800ba98:	9904      	ldr	r1, [sp, #16]
 800ba9a:	430b      	orrs	r3, r1
 800ba9c:	d122      	bne.n	800bae4 <_dtoa_r+0xabc>
 800ba9e:	2a00      	cmp	r2, #0
 800baa0:	ddee      	ble.n	800ba80 <_dtoa_r+0xa58>
 800baa2:	ee18 1a10 	vmov	r1, s16
 800baa6:	2201      	movs	r2, #1
 800baa8:	4620      	mov	r0, r4
 800baaa:	f001 f8dd 	bl	800cc68 <__lshift>
 800baae:	4631      	mov	r1, r6
 800bab0:	ee08 0a10 	vmov	s16, r0
 800bab4:	f001 f948 	bl	800cd48 <__mcmp>
 800bab8:	2800      	cmp	r0, #0
 800baba:	dc03      	bgt.n	800bac4 <_dtoa_r+0xa9c>
 800babc:	d1e0      	bne.n	800ba80 <_dtoa_r+0xa58>
 800babe:	f01a 0f01 	tst.w	sl, #1
 800bac2:	d0dd      	beq.n	800ba80 <_dtoa_r+0xa58>
 800bac4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bac8:	d1d7      	bne.n	800ba7a <_dtoa_r+0xa52>
 800baca:	2339      	movs	r3, #57	; 0x39
 800bacc:	f88b 3000 	strb.w	r3, [fp]
 800bad0:	462b      	mov	r3, r5
 800bad2:	461d      	mov	r5, r3
 800bad4:	3b01      	subs	r3, #1
 800bad6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bada:	2a39      	cmp	r2, #57	; 0x39
 800badc:	d071      	beq.n	800bbc2 <_dtoa_r+0xb9a>
 800bade:	3201      	adds	r2, #1
 800bae0:	701a      	strb	r2, [r3, #0]
 800bae2:	e746      	b.n	800b972 <_dtoa_r+0x94a>
 800bae4:	2a00      	cmp	r2, #0
 800bae6:	dd07      	ble.n	800baf8 <_dtoa_r+0xad0>
 800bae8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800baec:	d0ed      	beq.n	800baca <_dtoa_r+0xaa2>
 800baee:	f10a 0301 	add.w	r3, sl, #1
 800baf2:	f88b 3000 	strb.w	r3, [fp]
 800baf6:	e73c      	b.n	800b972 <_dtoa_r+0x94a>
 800baf8:	9b05      	ldr	r3, [sp, #20]
 800bafa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bafe:	4599      	cmp	r9, r3
 800bb00:	d047      	beq.n	800bb92 <_dtoa_r+0xb6a>
 800bb02:	ee18 1a10 	vmov	r1, s16
 800bb06:	2300      	movs	r3, #0
 800bb08:	220a      	movs	r2, #10
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	f000 feb2 	bl	800c874 <__multadd>
 800bb10:	45b8      	cmp	r8, r7
 800bb12:	ee08 0a10 	vmov	s16, r0
 800bb16:	f04f 0300 	mov.w	r3, #0
 800bb1a:	f04f 020a 	mov.w	r2, #10
 800bb1e:	4641      	mov	r1, r8
 800bb20:	4620      	mov	r0, r4
 800bb22:	d106      	bne.n	800bb32 <_dtoa_r+0xb0a>
 800bb24:	f000 fea6 	bl	800c874 <__multadd>
 800bb28:	4680      	mov	r8, r0
 800bb2a:	4607      	mov	r7, r0
 800bb2c:	f109 0901 	add.w	r9, r9, #1
 800bb30:	e772      	b.n	800ba18 <_dtoa_r+0x9f0>
 800bb32:	f000 fe9f 	bl	800c874 <__multadd>
 800bb36:	4639      	mov	r1, r7
 800bb38:	4680      	mov	r8, r0
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	220a      	movs	r2, #10
 800bb3e:	4620      	mov	r0, r4
 800bb40:	f000 fe98 	bl	800c874 <__multadd>
 800bb44:	4607      	mov	r7, r0
 800bb46:	e7f1      	b.n	800bb2c <_dtoa_r+0xb04>
 800bb48:	9b03      	ldr	r3, [sp, #12]
 800bb4a:	9302      	str	r3, [sp, #8]
 800bb4c:	9d01      	ldr	r5, [sp, #4]
 800bb4e:	ee18 0a10 	vmov	r0, s16
 800bb52:	4631      	mov	r1, r6
 800bb54:	f7ff f9da 	bl	800af0c <quorem>
 800bb58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bb5c:	9b01      	ldr	r3, [sp, #4]
 800bb5e:	f805 ab01 	strb.w	sl, [r5], #1
 800bb62:	1aea      	subs	r2, r5, r3
 800bb64:	9b02      	ldr	r3, [sp, #8]
 800bb66:	4293      	cmp	r3, r2
 800bb68:	dd09      	ble.n	800bb7e <_dtoa_r+0xb56>
 800bb6a:	ee18 1a10 	vmov	r1, s16
 800bb6e:	2300      	movs	r3, #0
 800bb70:	220a      	movs	r2, #10
 800bb72:	4620      	mov	r0, r4
 800bb74:	f000 fe7e 	bl	800c874 <__multadd>
 800bb78:	ee08 0a10 	vmov	s16, r0
 800bb7c:	e7e7      	b.n	800bb4e <_dtoa_r+0xb26>
 800bb7e:	9b02      	ldr	r3, [sp, #8]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	bfc8      	it	gt
 800bb84:	461d      	movgt	r5, r3
 800bb86:	9b01      	ldr	r3, [sp, #4]
 800bb88:	bfd8      	it	le
 800bb8a:	2501      	movle	r5, #1
 800bb8c:	441d      	add	r5, r3
 800bb8e:	f04f 0800 	mov.w	r8, #0
 800bb92:	ee18 1a10 	vmov	r1, s16
 800bb96:	2201      	movs	r2, #1
 800bb98:	4620      	mov	r0, r4
 800bb9a:	f001 f865 	bl	800cc68 <__lshift>
 800bb9e:	4631      	mov	r1, r6
 800bba0:	ee08 0a10 	vmov	s16, r0
 800bba4:	f001 f8d0 	bl	800cd48 <__mcmp>
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	dc91      	bgt.n	800bad0 <_dtoa_r+0xaa8>
 800bbac:	d102      	bne.n	800bbb4 <_dtoa_r+0xb8c>
 800bbae:	f01a 0f01 	tst.w	sl, #1
 800bbb2:	d18d      	bne.n	800bad0 <_dtoa_r+0xaa8>
 800bbb4:	462b      	mov	r3, r5
 800bbb6:	461d      	mov	r5, r3
 800bbb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbbc:	2a30      	cmp	r2, #48	; 0x30
 800bbbe:	d0fa      	beq.n	800bbb6 <_dtoa_r+0xb8e>
 800bbc0:	e6d7      	b.n	800b972 <_dtoa_r+0x94a>
 800bbc2:	9a01      	ldr	r2, [sp, #4]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d184      	bne.n	800bad2 <_dtoa_r+0xaaa>
 800bbc8:	9b00      	ldr	r3, [sp, #0]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	9300      	str	r3, [sp, #0]
 800bbce:	2331      	movs	r3, #49	; 0x31
 800bbd0:	7013      	strb	r3, [r2, #0]
 800bbd2:	e6ce      	b.n	800b972 <_dtoa_r+0x94a>
 800bbd4:	4b09      	ldr	r3, [pc, #36]	; (800bbfc <_dtoa_r+0xbd4>)
 800bbd6:	f7ff ba95 	b.w	800b104 <_dtoa_r+0xdc>
 800bbda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	f47f aa6e 	bne.w	800b0be <_dtoa_r+0x96>
 800bbe2:	4b07      	ldr	r3, [pc, #28]	; (800bc00 <_dtoa_r+0xbd8>)
 800bbe4:	f7ff ba8e 	b.w	800b104 <_dtoa_r+0xdc>
 800bbe8:	9b02      	ldr	r3, [sp, #8]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	dcae      	bgt.n	800bb4c <_dtoa_r+0xb24>
 800bbee:	9b06      	ldr	r3, [sp, #24]
 800bbf0:	2b02      	cmp	r3, #2
 800bbf2:	f73f aea8 	bgt.w	800b946 <_dtoa_r+0x91e>
 800bbf6:	e7a9      	b.n	800bb4c <_dtoa_r+0xb24>
 800bbf8:	0800e1eb 	.word	0x0800e1eb
 800bbfc:	0800e0b8 	.word	0x0800e0b8
 800bc00:	0800e16c 	.word	0x0800e16c

0800bc04 <__sflush_r>:
 800bc04:	898a      	ldrh	r2, [r1, #12]
 800bc06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc0a:	4605      	mov	r5, r0
 800bc0c:	0710      	lsls	r0, r2, #28
 800bc0e:	460c      	mov	r4, r1
 800bc10:	d458      	bmi.n	800bcc4 <__sflush_r+0xc0>
 800bc12:	684b      	ldr	r3, [r1, #4]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	dc05      	bgt.n	800bc24 <__sflush_r+0x20>
 800bc18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	dc02      	bgt.n	800bc24 <__sflush_r+0x20>
 800bc1e:	2000      	movs	r0, #0
 800bc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc26:	2e00      	cmp	r6, #0
 800bc28:	d0f9      	beq.n	800bc1e <__sflush_r+0x1a>
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc30:	682f      	ldr	r7, [r5, #0]
 800bc32:	602b      	str	r3, [r5, #0]
 800bc34:	d032      	beq.n	800bc9c <__sflush_r+0x98>
 800bc36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc38:	89a3      	ldrh	r3, [r4, #12]
 800bc3a:	075a      	lsls	r2, r3, #29
 800bc3c:	d505      	bpl.n	800bc4a <__sflush_r+0x46>
 800bc3e:	6863      	ldr	r3, [r4, #4]
 800bc40:	1ac0      	subs	r0, r0, r3
 800bc42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc44:	b10b      	cbz	r3, 800bc4a <__sflush_r+0x46>
 800bc46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc48:	1ac0      	subs	r0, r0, r3
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc50:	6a21      	ldr	r1, [r4, #32]
 800bc52:	4628      	mov	r0, r5
 800bc54:	47b0      	blx	r6
 800bc56:	1c43      	adds	r3, r0, #1
 800bc58:	89a3      	ldrh	r3, [r4, #12]
 800bc5a:	d106      	bne.n	800bc6a <__sflush_r+0x66>
 800bc5c:	6829      	ldr	r1, [r5, #0]
 800bc5e:	291d      	cmp	r1, #29
 800bc60:	d82c      	bhi.n	800bcbc <__sflush_r+0xb8>
 800bc62:	4a2a      	ldr	r2, [pc, #168]	; (800bd0c <__sflush_r+0x108>)
 800bc64:	40ca      	lsrs	r2, r1
 800bc66:	07d6      	lsls	r6, r2, #31
 800bc68:	d528      	bpl.n	800bcbc <__sflush_r+0xb8>
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	6062      	str	r2, [r4, #4]
 800bc6e:	04d9      	lsls	r1, r3, #19
 800bc70:	6922      	ldr	r2, [r4, #16]
 800bc72:	6022      	str	r2, [r4, #0]
 800bc74:	d504      	bpl.n	800bc80 <__sflush_r+0x7c>
 800bc76:	1c42      	adds	r2, r0, #1
 800bc78:	d101      	bne.n	800bc7e <__sflush_r+0x7a>
 800bc7a:	682b      	ldr	r3, [r5, #0]
 800bc7c:	b903      	cbnz	r3, 800bc80 <__sflush_r+0x7c>
 800bc7e:	6560      	str	r0, [r4, #84]	; 0x54
 800bc80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc82:	602f      	str	r7, [r5, #0]
 800bc84:	2900      	cmp	r1, #0
 800bc86:	d0ca      	beq.n	800bc1e <__sflush_r+0x1a>
 800bc88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc8c:	4299      	cmp	r1, r3
 800bc8e:	d002      	beq.n	800bc96 <__sflush_r+0x92>
 800bc90:	4628      	mov	r0, r5
 800bc92:	f7fd fabf 	bl	8009214 <_free_r>
 800bc96:	2000      	movs	r0, #0
 800bc98:	6360      	str	r0, [r4, #52]	; 0x34
 800bc9a:	e7c1      	b.n	800bc20 <__sflush_r+0x1c>
 800bc9c:	6a21      	ldr	r1, [r4, #32]
 800bc9e:	2301      	movs	r3, #1
 800bca0:	4628      	mov	r0, r5
 800bca2:	47b0      	blx	r6
 800bca4:	1c41      	adds	r1, r0, #1
 800bca6:	d1c7      	bne.n	800bc38 <__sflush_r+0x34>
 800bca8:	682b      	ldr	r3, [r5, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d0c4      	beq.n	800bc38 <__sflush_r+0x34>
 800bcae:	2b1d      	cmp	r3, #29
 800bcb0:	d001      	beq.n	800bcb6 <__sflush_r+0xb2>
 800bcb2:	2b16      	cmp	r3, #22
 800bcb4:	d101      	bne.n	800bcba <__sflush_r+0xb6>
 800bcb6:	602f      	str	r7, [r5, #0]
 800bcb8:	e7b1      	b.n	800bc1e <__sflush_r+0x1a>
 800bcba:	89a3      	ldrh	r3, [r4, #12]
 800bcbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcc0:	81a3      	strh	r3, [r4, #12]
 800bcc2:	e7ad      	b.n	800bc20 <__sflush_r+0x1c>
 800bcc4:	690f      	ldr	r7, [r1, #16]
 800bcc6:	2f00      	cmp	r7, #0
 800bcc8:	d0a9      	beq.n	800bc1e <__sflush_r+0x1a>
 800bcca:	0793      	lsls	r3, r2, #30
 800bccc:	680e      	ldr	r6, [r1, #0]
 800bcce:	bf08      	it	eq
 800bcd0:	694b      	ldreq	r3, [r1, #20]
 800bcd2:	600f      	str	r7, [r1, #0]
 800bcd4:	bf18      	it	ne
 800bcd6:	2300      	movne	r3, #0
 800bcd8:	eba6 0807 	sub.w	r8, r6, r7
 800bcdc:	608b      	str	r3, [r1, #8]
 800bcde:	f1b8 0f00 	cmp.w	r8, #0
 800bce2:	dd9c      	ble.n	800bc1e <__sflush_r+0x1a>
 800bce4:	6a21      	ldr	r1, [r4, #32]
 800bce6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bce8:	4643      	mov	r3, r8
 800bcea:	463a      	mov	r2, r7
 800bcec:	4628      	mov	r0, r5
 800bcee:	47b0      	blx	r6
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	dc06      	bgt.n	800bd02 <__sflush_r+0xfe>
 800bcf4:	89a3      	ldrh	r3, [r4, #12]
 800bcf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcfa:	81a3      	strh	r3, [r4, #12]
 800bcfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd00:	e78e      	b.n	800bc20 <__sflush_r+0x1c>
 800bd02:	4407      	add	r7, r0
 800bd04:	eba8 0800 	sub.w	r8, r8, r0
 800bd08:	e7e9      	b.n	800bcde <__sflush_r+0xda>
 800bd0a:	bf00      	nop
 800bd0c:	20400001 	.word	0x20400001

0800bd10 <_fflush_r>:
 800bd10:	b538      	push	{r3, r4, r5, lr}
 800bd12:	690b      	ldr	r3, [r1, #16]
 800bd14:	4605      	mov	r5, r0
 800bd16:	460c      	mov	r4, r1
 800bd18:	b913      	cbnz	r3, 800bd20 <_fflush_r+0x10>
 800bd1a:	2500      	movs	r5, #0
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	bd38      	pop	{r3, r4, r5, pc}
 800bd20:	b118      	cbz	r0, 800bd2a <_fflush_r+0x1a>
 800bd22:	6983      	ldr	r3, [r0, #24]
 800bd24:	b90b      	cbnz	r3, 800bd2a <_fflush_r+0x1a>
 800bd26:	f000 f887 	bl	800be38 <__sinit>
 800bd2a:	4b14      	ldr	r3, [pc, #80]	; (800bd7c <_fflush_r+0x6c>)
 800bd2c:	429c      	cmp	r4, r3
 800bd2e:	d11b      	bne.n	800bd68 <_fflush_r+0x58>
 800bd30:	686c      	ldr	r4, [r5, #4]
 800bd32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d0ef      	beq.n	800bd1a <_fflush_r+0xa>
 800bd3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd3c:	07d0      	lsls	r0, r2, #31
 800bd3e:	d404      	bmi.n	800bd4a <_fflush_r+0x3a>
 800bd40:	0599      	lsls	r1, r3, #22
 800bd42:	d402      	bmi.n	800bd4a <_fflush_r+0x3a>
 800bd44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd46:	f000 fc9a 	bl	800c67e <__retarget_lock_acquire_recursive>
 800bd4a:	4628      	mov	r0, r5
 800bd4c:	4621      	mov	r1, r4
 800bd4e:	f7ff ff59 	bl	800bc04 <__sflush_r>
 800bd52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd54:	07da      	lsls	r2, r3, #31
 800bd56:	4605      	mov	r5, r0
 800bd58:	d4e0      	bmi.n	800bd1c <_fflush_r+0xc>
 800bd5a:	89a3      	ldrh	r3, [r4, #12]
 800bd5c:	059b      	lsls	r3, r3, #22
 800bd5e:	d4dd      	bmi.n	800bd1c <_fflush_r+0xc>
 800bd60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd62:	f000 fc8d 	bl	800c680 <__retarget_lock_release_recursive>
 800bd66:	e7d9      	b.n	800bd1c <_fflush_r+0xc>
 800bd68:	4b05      	ldr	r3, [pc, #20]	; (800bd80 <_fflush_r+0x70>)
 800bd6a:	429c      	cmp	r4, r3
 800bd6c:	d101      	bne.n	800bd72 <_fflush_r+0x62>
 800bd6e:	68ac      	ldr	r4, [r5, #8]
 800bd70:	e7df      	b.n	800bd32 <_fflush_r+0x22>
 800bd72:	4b04      	ldr	r3, [pc, #16]	; (800bd84 <_fflush_r+0x74>)
 800bd74:	429c      	cmp	r4, r3
 800bd76:	bf08      	it	eq
 800bd78:	68ec      	ldreq	r4, [r5, #12]
 800bd7a:	e7da      	b.n	800bd32 <_fflush_r+0x22>
 800bd7c:	0800e21c 	.word	0x0800e21c
 800bd80:	0800e23c 	.word	0x0800e23c
 800bd84:	0800e1fc 	.word	0x0800e1fc

0800bd88 <std>:
 800bd88:	2300      	movs	r3, #0
 800bd8a:	b510      	push	{r4, lr}
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	e9c0 3300 	strd	r3, r3, [r0]
 800bd92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd96:	6083      	str	r3, [r0, #8]
 800bd98:	8181      	strh	r1, [r0, #12]
 800bd9a:	6643      	str	r3, [r0, #100]	; 0x64
 800bd9c:	81c2      	strh	r2, [r0, #14]
 800bd9e:	6183      	str	r3, [r0, #24]
 800bda0:	4619      	mov	r1, r3
 800bda2:	2208      	movs	r2, #8
 800bda4:	305c      	adds	r0, #92	; 0x5c
 800bda6:	f7fd fa2d 	bl	8009204 <memset>
 800bdaa:	4b05      	ldr	r3, [pc, #20]	; (800bdc0 <std+0x38>)
 800bdac:	6263      	str	r3, [r4, #36]	; 0x24
 800bdae:	4b05      	ldr	r3, [pc, #20]	; (800bdc4 <std+0x3c>)
 800bdb0:	62a3      	str	r3, [r4, #40]	; 0x28
 800bdb2:	4b05      	ldr	r3, [pc, #20]	; (800bdc8 <std+0x40>)
 800bdb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bdb6:	4b05      	ldr	r3, [pc, #20]	; (800bdcc <std+0x44>)
 800bdb8:	6224      	str	r4, [r4, #32]
 800bdba:	6323      	str	r3, [r4, #48]	; 0x30
 800bdbc:	bd10      	pop	{r4, pc}
 800bdbe:	bf00      	nop
 800bdc0:	08009d09 	.word	0x08009d09
 800bdc4:	08009d2b 	.word	0x08009d2b
 800bdc8:	08009d63 	.word	0x08009d63
 800bdcc:	08009d87 	.word	0x08009d87

0800bdd0 <_cleanup_r>:
 800bdd0:	4901      	ldr	r1, [pc, #4]	; (800bdd8 <_cleanup_r+0x8>)
 800bdd2:	f000 b8c1 	b.w	800bf58 <_fwalk_reent>
 800bdd6:	bf00      	nop
 800bdd8:	0800bd11 	.word	0x0800bd11

0800bddc <__sfmoreglue>:
 800bddc:	b570      	push	{r4, r5, r6, lr}
 800bdde:	2268      	movs	r2, #104	; 0x68
 800bde0:	1e4d      	subs	r5, r1, #1
 800bde2:	4355      	muls	r5, r2
 800bde4:	460e      	mov	r6, r1
 800bde6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bdea:	f7fd fa7f 	bl	80092ec <_malloc_r>
 800bdee:	4604      	mov	r4, r0
 800bdf0:	b140      	cbz	r0, 800be04 <__sfmoreglue+0x28>
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	e9c0 1600 	strd	r1, r6, [r0]
 800bdf8:	300c      	adds	r0, #12
 800bdfa:	60a0      	str	r0, [r4, #8]
 800bdfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800be00:	f7fd fa00 	bl	8009204 <memset>
 800be04:	4620      	mov	r0, r4
 800be06:	bd70      	pop	{r4, r5, r6, pc}

0800be08 <__sfp_lock_acquire>:
 800be08:	4801      	ldr	r0, [pc, #4]	; (800be10 <__sfp_lock_acquire+0x8>)
 800be0a:	f000 bc38 	b.w	800c67e <__retarget_lock_acquire_recursive>
 800be0e:	bf00      	nop
 800be10:	20000fb5 	.word	0x20000fb5

0800be14 <__sfp_lock_release>:
 800be14:	4801      	ldr	r0, [pc, #4]	; (800be1c <__sfp_lock_release+0x8>)
 800be16:	f000 bc33 	b.w	800c680 <__retarget_lock_release_recursive>
 800be1a:	bf00      	nop
 800be1c:	20000fb5 	.word	0x20000fb5

0800be20 <__sinit_lock_acquire>:
 800be20:	4801      	ldr	r0, [pc, #4]	; (800be28 <__sinit_lock_acquire+0x8>)
 800be22:	f000 bc2c 	b.w	800c67e <__retarget_lock_acquire_recursive>
 800be26:	bf00      	nop
 800be28:	20000fb6 	.word	0x20000fb6

0800be2c <__sinit_lock_release>:
 800be2c:	4801      	ldr	r0, [pc, #4]	; (800be34 <__sinit_lock_release+0x8>)
 800be2e:	f000 bc27 	b.w	800c680 <__retarget_lock_release_recursive>
 800be32:	bf00      	nop
 800be34:	20000fb6 	.word	0x20000fb6

0800be38 <__sinit>:
 800be38:	b510      	push	{r4, lr}
 800be3a:	4604      	mov	r4, r0
 800be3c:	f7ff fff0 	bl	800be20 <__sinit_lock_acquire>
 800be40:	69a3      	ldr	r3, [r4, #24]
 800be42:	b11b      	cbz	r3, 800be4c <__sinit+0x14>
 800be44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be48:	f7ff bff0 	b.w	800be2c <__sinit_lock_release>
 800be4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800be50:	6523      	str	r3, [r4, #80]	; 0x50
 800be52:	4b13      	ldr	r3, [pc, #76]	; (800bea0 <__sinit+0x68>)
 800be54:	4a13      	ldr	r2, [pc, #76]	; (800bea4 <__sinit+0x6c>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	62a2      	str	r2, [r4, #40]	; 0x28
 800be5a:	42a3      	cmp	r3, r4
 800be5c:	bf04      	itt	eq
 800be5e:	2301      	moveq	r3, #1
 800be60:	61a3      	streq	r3, [r4, #24]
 800be62:	4620      	mov	r0, r4
 800be64:	f000 f820 	bl	800bea8 <__sfp>
 800be68:	6060      	str	r0, [r4, #4]
 800be6a:	4620      	mov	r0, r4
 800be6c:	f000 f81c 	bl	800bea8 <__sfp>
 800be70:	60a0      	str	r0, [r4, #8]
 800be72:	4620      	mov	r0, r4
 800be74:	f000 f818 	bl	800bea8 <__sfp>
 800be78:	2200      	movs	r2, #0
 800be7a:	60e0      	str	r0, [r4, #12]
 800be7c:	2104      	movs	r1, #4
 800be7e:	6860      	ldr	r0, [r4, #4]
 800be80:	f7ff ff82 	bl	800bd88 <std>
 800be84:	68a0      	ldr	r0, [r4, #8]
 800be86:	2201      	movs	r2, #1
 800be88:	2109      	movs	r1, #9
 800be8a:	f7ff ff7d 	bl	800bd88 <std>
 800be8e:	68e0      	ldr	r0, [r4, #12]
 800be90:	2202      	movs	r2, #2
 800be92:	2112      	movs	r1, #18
 800be94:	f7ff ff78 	bl	800bd88 <std>
 800be98:	2301      	movs	r3, #1
 800be9a:	61a3      	str	r3, [r4, #24]
 800be9c:	e7d2      	b.n	800be44 <__sinit+0xc>
 800be9e:	bf00      	nop
 800bea0:	0800e0a4 	.word	0x0800e0a4
 800bea4:	0800bdd1 	.word	0x0800bdd1

0800bea8 <__sfp>:
 800bea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beaa:	4607      	mov	r7, r0
 800beac:	f7ff ffac 	bl	800be08 <__sfp_lock_acquire>
 800beb0:	4b1e      	ldr	r3, [pc, #120]	; (800bf2c <__sfp+0x84>)
 800beb2:	681e      	ldr	r6, [r3, #0]
 800beb4:	69b3      	ldr	r3, [r6, #24]
 800beb6:	b913      	cbnz	r3, 800bebe <__sfp+0x16>
 800beb8:	4630      	mov	r0, r6
 800beba:	f7ff ffbd 	bl	800be38 <__sinit>
 800bebe:	3648      	adds	r6, #72	; 0x48
 800bec0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bec4:	3b01      	subs	r3, #1
 800bec6:	d503      	bpl.n	800bed0 <__sfp+0x28>
 800bec8:	6833      	ldr	r3, [r6, #0]
 800beca:	b30b      	cbz	r3, 800bf10 <__sfp+0x68>
 800becc:	6836      	ldr	r6, [r6, #0]
 800bece:	e7f7      	b.n	800bec0 <__sfp+0x18>
 800bed0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bed4:	b9d5      	cbnz	r5, 800bf0c <__sfp+0x64>
 800bed6:	4b16      	ldr	r3, [pc, #88]	; (800bf30 <__sfp+0x88>)
 800bed8:	60e3      	str	r3, [r4, #12]
 800beda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bede:	6665      	str	r5, [r4, #100]	; 0x64
 800bee0:	f000 fbcc 	bl	800c67c <__retarget_lock_init_recursive>
 800bee4:	f7ff ff96 	bl	800be14 <__sfp_lock_release>
 800bee8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800beec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bef0:	6025      	str	r5, [r4, #0]
 800bef2:	61a5      	str	r5, [r4, #24]
 800bef4:	2208      	movs	r2, #8
 800bef6:	4629      	mov	r1, r5
 800bef8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800befc:	f7fd f982 	bl	8009204 <memset>
 800bf00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bf04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bf08:	4620      	mov	r0, r4
 800bf0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf0c:	3468      	adds	r4, #104	; 0x68
 800bf0e:	e7d9      	b.n	800bec4 <__sfp+0x1c>
 800bf10:	2104      	movs	r1, #4
 800bf12:	4638      	mov	r0, r7
 800bf14:	f7ff ff62 	bl	800bddc <__sfmoreglue>
 800bf18:	4604      	mov	r4, r0
 800bf1a:	6030      	str	r0, [r6, #0]
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	d1d5      	bne.n	800becc <__sfp+0x24>
 800bf20:	f7ff ff78 	bl	800be14 <__sfp_lock_release>
 800bf24:	230c      	movs	r3, #12
 800bf26:	603b      	str	r3, [r7, #0]
 800bf28:	e7ee      	b.n	800bf08 <__sfp+0x60>
 800bf2a:	bf00      	nop
 800bf2c:	0800e0a4 	.word	0x0800e0a4
 800bf30:	ffff0001 	.word	0xffff0001

0800bf34 <fiprintf>:
 800bf34:	b40e      	push	{r1, r2, r3}
 800bf36:	b503      	push	{r0, r1, lr}
 800bf38:	4601      	mov	r1, r0
 800bf3a:	ab03      	add	r3, sp, #12
 800bf3c:	4805      	ldr	r0, [pc, #20]	; (800bf54 <fiprintf+0x20>)
 800bf3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf42:	6800      	ldr	r0, [r0, #0]
 800bf44:	9301      	str	r3, [sp, #4]
 800bf46:	f001 fa8f 	bl	800d468 <_vfiprintf_r>
 800bf4a:	b002      	add	sp, #8
 800bf4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf50:	b003      	add	sp, #12
 800bf52:	4770      	bx	lr
 800bf54:	200000b4 	.word	0x200000b4

0800bf58 <_fwalk_reent>:
 800bf58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf5c:	4606      	mov	r6, r0
 800bf5e:	4688      	mov	r8, r1
 800bf60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bf64:	2700      	movs	r7, #0
 800bf66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf6a:	f1b9 0901 	subs.w	r9, r9, #1
 800bf6e:	d505      	bpl.n	800bf7c <_fwalk_reent+0x24>
 800bf70:	6824      	ldr	r4, [r4, #0]
 800bf72:	2c00      	cmp	r4, #0
 800bf74:	d1f7      	bne.n	800bf66 <_fwalk_reent+0xe>
 800bf76:	4638      	mov	r0, r7
 800bf78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf7c:	89ab      	ldrh	r3, [r5, #12]
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d907      	bls.n	800bf92 <_fwalk_reent+0x3a>
 800bf82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf86:	3301      	adds	r3, #1
 800bf88:	d003      	beq.n	800bf92 <_fwalk_reent+0x3a>
 800bf8a:	4629      	mov	r1, r5
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	47c0      	blx	r8
 800bf90:	4307      	orrs	r7, r0
 800bf92:	3568      	adds	r5, #104	; 0x68
 800bf94:	e7e9      	b.n	800bf6a <_fwalk_reent+0x12>

0800bf96 <rshift>:
 800bf96:	6903      	ldr	r3, [r0, #16]
 800bf98:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bf9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfa0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bfa4:	f100 0414 	add.w	r4, r0, #20
 800bfa8:	dd45      	ble.n	800c036 <rshift+0xa0>
 800bfaa:	f011 011f 	ands.w	r1, r1, #31
 800bfae:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bfb2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bfb6:	d10c      	bne.n	800bfd2 <rshift+0x3c>
 800bfb8:	f100 0710 	add.w	r7, r0, #16
 800bfbc:	4629      	mov	r1, r5
 800bfbe:	42b1      	cmp	r1, r6
 800bfc0:	d334      	bcc.n	800c02c <rshift+0x96>
 800bfc2:	1a9b      	subs	r3, r3, r2
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	1eea      	subs	r2, r5, #3
 800bfc8:	4296      	cmp	r6, r2
 800bfca:	bf38      	it	cc
 800bfcc:	2300      	movcc	r3, #0
 800bfce:	4423      	add	r3, r4
 800bfd0:	e015      	b.n	800bffe <rshift+0x68>
 800bfd2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bfd6:	f1c1 0820 	rsb	r8, r1, #32
 800bfda:	40cf      	lsrs	r7, r1
 800bfdc:	f105 0e04 	add.w	lr, r5, #4
 800bfe0:	46a1      	mov	r9, r4
 800bfe2:	4576      	cmp	r6, lr
 800bfe4:	46f4      	mov	ip, lr
 800bfe6:	d815      	bhi.n	800c014 <rshift+0x7e>
 800bfe8:	1a9a      	subs	r2, r3, r2
 800bfea:	0092      	lsls	r2, r2, #2
 800bfec:	3a04      	subs	r2, #4
 800bfee:	3501      	adds	r5, #1
 800bff0:	42ae      	cmp	r6, r5
 800bff2:	bf38      	it	cc
 800bff4:	2200      	movcc	r2, #0
 800bff6:	18a3      	adds	r3, r4, r2
 800bff8:	50a7      	str	r7, [r4, r2]
 800bffa:	b107      	cbz	r7, 800bffe <rshift+0x68>
 800bffc:	3304      	adds	r3, #4
 800bffe:	1b1a      	subs	r2, r3, r4
 800c000:	42a3      	cmp	r3, r4
 800c002:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c006:	bf08      	it	eq
 800c008:	2300      	moveq	r3, #0
 800c00a:	6102      	str	r2, [r0, #16]
 800c00c:	bf08      	it	eq
 800c00e:	6143      	streq	r3, [r0, #20]
 800c010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c014:	f8dc c000 	ldr.w	ip, [ip]
 800c018:	fa0c fc08 	lsl.w	ip, ip, r8
 800c01c:	ea4c 0707 	orr.w	r7, ip, r7
 800c020:	f849 7b04 	str.w	r7, [r9], #4
 800c024:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c028:	40cf      	lsrs	r7, r1
 800c02a:	e7da      	b.n	800bfe2 <rshift+0x4c>
 800c02c:	f851 cb04 	ldr.w	ip, [r1], #4
 800c030:	f847 cf04 	str.w	ip, [r7, #4]!
 800c034:	e7c3      	b.n	800bfbe <rshift+0x28>
 800c036:	4623      	mov	r3, r4
 800c038:	e7e1      	b.n	800bffe <rshift+0x68>

0800c03a <__hexdig_fun>:
 800c03a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c03e:	2b09      	cmp	r3, #9
 800c040:	d802      	bhi.n	800c048 <__hexdig_fun+0xe>
 800c042:	3820      	subs	r0, #32
 800c044:	b2c0      	uxtb	r0, r0
 800c046:	4770      	bx	lr
 800c048:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c04c:	2b05      	cmp	r3, #5
 800c04e:	d801      	bhi.n	800c054 <__hexdig_fun+0x1a>
 800c050:	3847      	subs	r0, #71	; 0x47
 800c052:	e7f7      	b.n	800c044 <__hexdig_fun+0xa>
 800c054:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c058:	2b05      	cmp	r3, #5
 800c05a:	d801      	bhi.n	800c060 <__hexdig_fun+0x26>
 800c05c:	3827      	subs	r0, #39	; 0x27
 800c05e:	e7f1      	b.n	800c044 <__hexdig_fun+0xa>
 800c060:	2000      	movs	r0, #0
 800c062:	4770      	bx	lr

0800c064 <__gethex>:
 800c064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c068:	ed2d 8b02 	vpush	{d8}
 800c06c:	b089      	sub	sp, #36	; 0x24
 800c06e:	ee08 0a10 	vmov	s16, r0
 800c072:	9304      	str	r3, [sp, #16]
 800c074:	4bb4      	ldr	r3, [pc, #720]	; (800c348 <__gethex+0x2e4>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	9301      	str	r3, [sp, #4]
 800c07a:	4618      	mov	r0, r3
 800c07c:	468b      	mov	fp, r1
 800c07e:	4690      	mov	r8, r2
 800c080:	f7f4 f8ae 	bl	80001e0 <strlen>
 800c084:	9b01      	ldr	r3, [sp, #4]
 800c086:	f8db 2000 	ldr.w	r2, [fp]
 800c08a:	4403      	add	r3, r0
 800c08c:	4682      	mov	sl, r0
 800c08e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c092:	9305      	str	r3, [sp, #20]
 800c094:	1c93      	adds	r3, r2, #2
 800c096:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c09a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c09e:	32fe      	adds	r2, #254	; 0xfe
 800c0a0:	18d1      	adds	r1, r2, r3
 800c0a2:	461f      	mov	r7, r3
 800c0a4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c0a8:	9100      	str	r1, [sp, #0]
 800c0aa:	2830      	cmp	r0, #48	; 0x30
 800c0ac:	d0f8      	beq.n	800c0a0 <__gethex+0x3c>
 800c0ae:	f7ff ffc4 	bl	800c03a <__hexdig_fun>
 800c0b2:	4604      	mov	r4, r0
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	d13a      	bne.n	800c12e <__gethex+0xca>
 800c0b8:	9901      	ldr	r1, [sp, #4]
 800c0ba:	4652      	mov	r2, sl
 800c0bc:	4638      	mov	r0, r7
 800c0be:	f7fd fe66 	bl	8009d8e <strncmp>
 800c0c2:	4605      	mov	r5, r0
 800c0c4:	2800      	cmp	r0, #0
 800c0c6:	d168      	bne.n	800c19a <__gethex+0x136>
 800c0c8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c0cc:	eb07 060a 	add.w	r6, r7, sl
 800c0d0:	f7ff ffb3 	bl	800c03a <__hexdig_fun>
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	d062      	beq.n	800c19e <__gethex+0x13a>
 800c0d8:	4633      	mov	r3, r6
 800c0da:	7818      	ldrb	r0, [r3, #0]
 800c0dc:	2830      	cmp	r0, #48	; 0x30
 800c0de:	461f      	mov	r7, r3
 800c0e0:	f103 0301 	add.w	r3, r3, #1
 800c0e4:	d0f9      	beq.n	800c0da <__gethex+0x76>
 800c0e6:	f7ff ffa8 	bl	800c03a <__hexdig_fun>
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	fab0 f480 	clz	r4, r0
 800c0f0:	0964      	lsrs	r4, r4, #5
 800c0f2:	4635      	mov	r5, r6
 800c0f4:	9300      	str	r3, [sp, #0]
 800c0f6:	463a      	mov	r2, r7
 800c0f8:	4616      	mov	r6, r2
 800c0fa:	3201      	adds	r2, #1
 800c0fc:	7830      	ldrb	r0, [r6, #0]
 800c0fe:	f7ff ff9c 	bl	800c03a <__hexdig_fun>
 800c102:	2800      	cmp	r0, #0
 800c104:	d1f8      	bne.n	800c0f8 <__gethex+0x94>
 800c106:	9901      	ldr	r1, [sp, #4]
 800c108:	4652      	mov	r2, sl
 800c10a:	4630      	mov	r0, r6
 800c10c:	f7fd fe3f 	bl	8009d8e <strncmp>
 800c110:	b980      	cbnz	r0, 800c134 <__gethex+0xd0>
 800c112:	b94d      	cbnz	r5, 800c128 <__gethex+0xc4>
 800c114:	eb06 050a 	add.w	r5, r6, sl
 800c118:	462a      	mov	r2, r5
 800c11a:	4616      	mov	r6, r2
 800c11c:	3201      	adds	r2, #1
 800c11e:	7830      	ldrb	r0, [r6, #0]
 800c120:	f7ff ff8b 	bl	800c03a <__hexdig_fun>
 800c124:	2800      	cmp	r0, #0
 800c126:	d1f8      	bne.n	800c11a <__gethex+0xb6>
 800c128:	1bad      	subs	r5, r5, r6
 800c12a:	00ad      	lsls	r5, r5, #2
 800c12c:	e004      	b.n	800c138 <__gethex+0xd4>
 800c12e:	2400      	movs	r4, #0
 800c130:	4625      	mov	r5, r4
 800c132:	e7e0      	b.n	800c0f6 <__gethex+0x92>
 800c134:	2d00      	cmp	r5, #0
 800c136:	d1f7      	bne.n	800c128 <__gethex+0xc4>
 800c138:	7833      	ldrb	r3, [r6, #0]
 800c13a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c13e:	2b50      	cmp	r3, #80	; 0x50
 800c140:	d13b      	bne.n	800c1ba <__gethex+0x156>
 800c142:	7873      	ldrb	r3, [r6, #1]
 800c144:	2b2b      	cmp	r3, #43	; 0x2b
 800c146:	d02c      	beq.n	800c1a2 <__gethex+0x13e>
 800c148:	2b2d      	cmp	r3, #45	; 0x2d
 800c14a:	d02e      	beq.n	800c1aa <__gethex+0x146>
 800c14c:	1c71      	adds	r1, r6, #1
 800c14e:	f04f 0900 	mov.w	r9, #0
 800c152:	7808      	ldrb	r0, [r1, #0]
 800c154:	f7ff ff71 	bl	800c03a <__hexdig_fun>
 800c158:	1e43      	subs	r3, r0, #1
 800c15a:	b2db      	uxtb	r3, r3
 800c15c:	2b18      	cmp	r3, #24
 800c15e:	d82c      	bhi.n	800c1ba <__gethex+0x156>
 800c160:	f1a0 0210 	sub.w	r2, r0, #16
 800c164:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c168:	f7ff ff67 	bl	800c03a <__hexdig_fun>
 800c16c:	1e43      	subs	r3, r0, #1
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	2b18      	cmp	r3, #24
 800c172:	d91d      	bls.n	800c1b0 <__gethex+0x14c>
 800c174:	f1b9 0f00 	cmp.w	r9, #0
 800c178:	d000      	beq.n	800c17c <__gethex+0x118>
 800c17a:	4252      	negs	r2, r2
 800c17c:	4415      	add	r5, r2
 800c17e:	f8cb 1000 	str.w	r1, [fp]
 800c182:	b1e4      	cbz	r4, 800c1be <__gethex+0x15a>
 800c184:	9b00      	ldr	r3, [sp, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	bf14      	ite	ne
 800c18a:	2700      	movne	r7, #0
 800c18c:	2706      	moveq	r7, #6
 800c18e:	4638      	mov	r0, r7
 800c190:	b009      	add	sp, #36	; 0x24
 800c192:	ecbd 8b02 	vpop	{d8}
 800c196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c19a:	463e      	mov	r6, r7
 800c19c:	4625      	mov	r5, r4
 800c19e:	2401      	movs	r4, #1
 800c1a0:	e7ca      	b.n	800c138 <__gethex+0xd4>
 800c1a2:	f04f 0900 	mov.w	r9, #0
 800c1a6:	1cb1      	adds	r1, r6, #2
 800c1a8:	e7d3      	b.n	800c152 <__gethex+0xee>
 800c1aa:	f04f 0901 	mov.w	r9, #1
 800c1ae:	e7fa      	b.n	800c1a6 <__gethex+0x142>
 800c1b0:	230a      	movs	r3, #10
 800c1b2:	fb03 0202 	mla	r2, r3, r2, r0
 800c1b6:	3a10      	subs	r2, #16
 800c1b8:	e7d4      	b.n	800c164 <__gethex+0x100>
 800c1ba:	4631      	mov	r1, r6
 800c1bc:	e7df      	b.n	800c17e <__gethex+0x11a>
 800c1be:	1bf3      	subs	r3, r6, r7
 800c1c0:	3b01      	subs	r3, #1
 800c1c2:	4621      	mov	r1, r4
 800c1c4:	2b07      	cmp	r3, #7
 800c1c6:	dc0b      	bgt.n	800c1e0 <__gethex+0x17c>
 800c1c8:	ee18 0a10 	vmov	r0, s16
 800c1cc:	f000 faf0 	bl	800c7b0 <_Balloc>
 800c1d0:	4604      	mov	r4, r0
 800c1d2:	b940      	cbnz	r0, 800c1e6 <__gethex+0x182>
 800c1d4:	4b5d      	ldr	r3, [pc, #372]	; (800c34c <__gethex+0x2e8>)
 800c1d6:	4602      	mov	r2, r0
 800c1d8:	21de      	movs	r1, #222	; 0xde
 800c1da:	485d      	ldr	r0, [pc, #372]	; (800c350 <__gethex+0x2ec>)
 800c1dc:	f7fe fe68 	bl	800aeb0 <__assert_func>
 800c1e0:	3101      	adds	r1, #1
 800c1e2:	105b      	asrs	r3, r3, #1
 800c1e4:	e7ee      	b.n	800c1c4 <__gethex+0x160>
 800c1e6:	f100 0914 	add.w	r9, r0, #20
 800c1ea:	f04f 0b00 	mov.w	fp, #0
 800c1ee:	f1ca 0301 	rsb	r3, sl, #1
 800c1f2:	f8cd 9008 	str.w	r9, [sp, #8]
 800c1f6:	f8cd b000 	str.w	fp, [sp]
 800c1fa:	9306      	str	r3, [sp, #24]
 800c1fc:	42b7      	cmp	r7, r6
 800c1fe:	d340      	bcc.n	800c282 <__gethex+0x21e>
 800c200:	9802      	ldr	r0, [sp, #8]
 800c202:	9b00      	ldr	r3, [sp, #0]
 800c204:	f840 3b04 	str.w	r3, [r0], #4
 800c208:	eba0 0009 	sub.w	r0, r0, r9
 800c20c:	1080      	asrs	r0, r0, #2
 800c20e:	0146      	lsls	r6, r0, #5
 800c210:	6120      	str	r0, [r4, #16]
 800c212:	4618      	mov	r0, r3
 800c214:	f000 fbbe 	bl	800c994 <__hi0bits>
 800c218:	1a30      	subs	r0, r6, r0
 800c21a:	f8d8 6000 	ldr.w	r6, [r8]
 800c21e:	42b0      	cmp	r0, r6
 800c220:	dd63      	ble.n	800c2ea <__gethex+0x286>
 800c222:	1b87      	subs	r7, r0, r6
 800c224:	4639      	mov	r1, r7
 800c226:	4620      	mov	r0, r4
 800c228:	f000 ff62 	bl	800d0f0 <__any_on>
 800c22c:	4682      	mov	sl, r0
 800c22e:	b1a8      	cbz	r0, 800c25c <__gethex+0x1f8>
 800c230:	1e7b      	subs	r3, r7, #1
 800c232:	1159      	asrs	r1, r3, #5
 800c234:	f003 021f 	and.w	r2, r3, #31
 800c238:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c23c:	f04f 0a01 	mov.w	sl, #1
 800c240:	fa0a f202 	lsl.w	r2, sl, r2
 800c244:	420a      	tst	r2, r1
 800c246:	d009      	beq.n	800c25c <__gethex+0x1f8>
 800c248:	4553      	cmp	r3, sl
 800c24a:	dd05      	ble.n	800c258 <__gethex+0x1f4>
 800c24c:	1eb9      	subs	r1, r7, #2
 800c24e:	4620      	mov	r0, r4
 800c250:	f000 ff4e 	bl	800d0f0 <__any_on>
 800c254:	2800      	cmp	r0, #0
 800c256:	d145      	bne.n	800c2e4 <__gethex+0x280>
 800c258:	f04f 0a02 	mov.w	sl, #2
 800c25c:	4639      	mov	r1, r7
 800c25e:	4620      	mov	r0, r4
 800c260:	f7ff fe99 	bl	800bf96 <rshift>
 800c264:	443d      	add	r5, r7
 800c266:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c26a:	42ab      	cmp	r3, r5
 800c26c:	da4c      	bge.n	800c308 <__gethex+0x2a4>
 800c26e:	ee18 0a10 	vmov	r0, s16
 800c272:	4621      	mov	r1, r4
 800c274:	f000 fadc 	bl	800c830 <_Bfree>
 800c278:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c27a:	2300      	movs	r3, #0
 800c27c:	6013      	str	r3, [r2, #0]
 800c27e:	27a3      	movs	r7, #163	; 0xa3
 800c280:	e785      	b.n	800c18e <__gethex+0x12a>
 800c282:	1e73      	subs	r3, r6, #1
 800c284:	9a05      	ldr	r2, [sp, #20]
 800c286:	9303      	str	r3, [sp, #12]
 800c288:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d019      	beq.n	800c2c4 <__gethex+0x260>
 800c290:	f1bb 0f20 	cmp.w	fp, #32
 800c294:	d107      	bne.n	800c2a6 <__gethex+0x242>
 800c296:	9b02      	ldr	r3, [sp, #8]
 800c298:	9a00      	ldr	r2, [sp, #0]
 800c29a:	f843 2b04 	str.w	r2, [r3], #4
 800c29e:	9302      	str	r3, [sp, #8]
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	9300      	str	r3, [sp, #0]
 800c2a4:	469b      	mov	fp, r3
 800c2a6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c2aa:	f7ff fec6 	bl	800c03a <__hexdig_fun>
 800c2ae:	9b00      	ldr	r3, [sp, #0]
 800c2b0:	f000 000f 	and.w	r0, r0, #15
 800c2b4:	fa00 f00b 	lsl.w	r0, r0, fp
 800c2b8:	4303      	orrs	r3, r0
 800c2ba:	9300      	str	r3, [sp, #0]
 800c2bc:	f10b 0b04 	add.w	fp, fp, #4
 800c2c0:	9b03      	ldr	r3, [sp, #12]
 800c2c2:	e00d      	b.n	800c2e0 <__gethex+0x27c>
 800c2c4:	9b03      	ldr	r3, [sp, #12]
 800c2c6:	9a06      	ldr	r2, [sp, #24]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	42bb      	cmp	r3, r7
 800c2cc:	d3e0      	bcc.n	800c290 <__gethex+0x22c>
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	9901      	ldr	r1, [sp, #4]
 800c2d2:	9307      	str	r3, [sp, #28]
 800c2d4:	4652      	mov	r2, sl
 800c2d6:	f7fd fd5a 	bl	8009d8e <strncmp>
 800c2da:	9b07      	ldr	r3, [sp, #28]
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	d1d7      	bne.n	800c290 <__gethex+0x22c>
 800c2e0:	461e      	mov	r6, r3
 800c2e2:	e78b      	b.n	800c1fc <__gethex+0x198>
 800c2e4:	f04f 0a03 	mov.w	sl, #3
 800c2e8:	e7b8      	b.n	800c25c <__gethex+0x1f8>
 800c2ea:	da0a      	bge.n	800c302 <__gethex+0x29e>
 800c2ec:	1a37      	subs	r7, r6, r0
 800c2ee:	4621      	mov	r1, r4
 800c2f0:	ee18 0a10 	vmov	r0, s16
 800c2f4:	463a      	mov	r2, r7
 800c2f6:	f000 fcb7 	bl	800cc68 <__lshift>
 800c2fa:	1bed      	subs	r5, r5, r7
 800c2fc:	4604      	mov	r4, r0
 800c2fe:	f100 0914 	add.w	r9, r0, #20
 800c302:	f04f 0a00 	mov.w	sl, #0
 800c306:	e7ae      	b.n	800c266 <__gethex+0x202>
 800c308:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c30c:	42a8      	cmp	r0, r5
 800c30e:	dd72      	ble.n	800c3f6 <__gethex+0x392>
 800c310:	1b45      	subs	r5, r0, r5
 800c312:	42ae      	cmp	r6, r5
 800c314:	dc36      	bgt.n	800c384 <__gethex+0x320>
 800c316:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c31a:	2b02      	cmp	r3, #2
 800c31c:	d02a      	beq.n	800c374 <__gethex+0x310>
 800c31e:	2b03      	cmp	r3, #3
 800c320:	d02c      	beq.n	800c37c <__gethex+0x318>
 800c322:	2b01      	cmp	r3, #1
 800c324:	d11c      	bne.n	800c360 <__gethex+0x2fc>
 800c326:	42ae      	cmp	r6, r5
 800c328:	d11a      	bne.n	800c360 <__gethex+0x2fc>
 800c32a:	2e01      	cmp	r6, #1
 800c32c:	d112      	bne.n	800c354 <__gethex+0x2f0>
 800c32e:	9a04      	ldr	r2, [sp, #16]
 800c330:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c334:	6013      	str	r3, [r2, #0]
 800c336:	2301      	movs	r3, #1
 800c338:	6123      	str	r3, [r4, #16]
 800c33a:	f8c9 3000 	str.w	r3, [r9]
 800c33e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c340:	2762      	movs	r7, #98	; 0x62
 800c342:	601c      	str	r4, [r3, #0]
 800c344:	e723      	b.n	800c18e <__gethex+0x12a>
 800c346:	bf00      	nop
 800c348:	0800e2c4 	.word	0x0800e2c4
 800c34c:	0800e1eb 	.word	0x0800e1eb
 800c350:	0800e25c 	.word	0x0800e25c
 800c354:	1e71      	subs	r1, r6, #1
 800c356:	4620      	mov	r0, r4
 800c358:	f000 feca 	bl	800d0f0 <__any_on>
 800c35c:	2800      	cmp	r0, #0
 800c35e:	d1e6      	bne.n	800c32e <__gethex+0x2ca>
 800c360:	ee18 0a10 	vmov	r0, s16
 800c364:	4621      	mov	r1, r4
 800c366:	f000 fa63 	bl	800c830 <_Bfree>
 800c36a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c36c:	2300      	movs	r3, #0
 800c36e:	6013      	str	r3, [r2, #0]
 800c370:	2750      	movs	r7, #80	; 0x50
 800c372:	e70c      	b.n	800c18e <__gethex+0x12a>
 800c374:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c376:	2b00      	cmp	r3, #0
 800c378:	d1f2      	bne.n	800c360 <__gethex+0x2fc>
 800c37a:	e7d8      	b.n	800c32e <__gethex+0x2ca>
 800c37c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d1d5      	bne.n	800c32e <__gethex+0x2ca>
 800c382:	e7ed      	b.n	800c360 <__gethex+0x2fc>
 800c384:	1e6f      	subs	r7, r5, #1
 800c386:	f1ba 0f00 	cmp.w	sl, #0
 800c38a:	d131      	bne.n	800c3f0 <__gethex+0x38c>
 800c38c:	b127      	cbz	r7, 800c398 <__gethex+0x334>
 800c38e:	4639      	mov	r1, r7
 800c390:	4620      	mov	r0, r4
 800c392:	f000 fead 	bl	800d0f0 <__any_on>
 800c396:	4682      	mov	sl, r0
 800c398:	117b      	asrs	r3, r7, #5
 800c39a:	2101      	movs	r1, #1
 800c39c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c3a0:	f007 071f 	and.w	r7, r7, #31
 800c3a4:	fa01 f707 	lsl.w	r7, r1, r7
 800c3a8:	421f      	tst	r7, r3
 800c3aa:	4629      	mov	r1, r5
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	bf18      	it	ne
 800c3b0:	f04a 0a02 	orrne.w	sl, sl, #2
 800c3b4:	1b76      	subs	r6, r6, r5
 800c3b6:	f7ff fdee 	bl	800bf96 <rshift>
 800c3ba:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c3be:	2702      	movs	r7, #2
 800c3c0:	f1ba 0f00 	cmp.w	sl, #0
 800c3c4:	d048      	beq.n	800c458 <__gethex+0x3f4>
 800c3c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c3ca:	2b02      	cmp	r3, #2
 800c3cc:	d015      	beq.n	800c3fa <__gethex+0x396>
 800c3ce:	2b03      	cmp	r3, #3
 800c3d0:	d017      	beq.n	800c402 <__gethex+0x39e>
 800c3d2:	2b01      	cmp	r3, #1
 800c3d4:	d109      	bne.n	800c3ea <__gethex+0x386>
 800c3d6:	f01a 0f02 	tst.w	sl, #2
 800c3da:	d006      	beq.n	800c3ea <__gethex+0x386>
 800c3dc:	f8d9 0000 	ldr.w	r0, [r9]
 800c3e0:	ea4a 0a00 	orr.w	sl, sl, r0
 800c3e4:	f01a 0f01 	tst.w	sl, #1
 800c3e8:	d10e      	bne.n	800c408 <__gethex+0x3a4>
 800c3ea:	f047 0710 	orr.w	r7, r7, #16
 800c3ee:	e033      	b.n	800c458 <__gethex+0x3f4>
 800c3f0:	f04f 0a01 	mov.w	sl, #1
 800c3f4:	e7d0      	b.n	800c398 <__gethex+0x334>
 800c3f6:	2701      	movs	r7, #1
 800c3f8:	e7e2      	b.n	800c3c0 <__gethex+0x35c>
 800c3fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3fc:	f1c3 0301 	rsb	r3, r3, #1
 800c400:	9315      	str	r3, [sp, #84]	; 0x54
 800c402:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c404:	2b00      	cmp	r3, #0
 800c406:	d0f0      	beq.n	800c3ea <__gethex+0x386>
 800c408:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c40c:	f104 0314 	add.w	r3, r4, #20
 800c410:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c414:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c418:	f04f 0c00 	mov.w	ip, #0
 800c41c:	4618      	mov	r0, r3
 800c41e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c422:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800c426:	d01c      	beq.n	800c462 <__gethex+0x3fe>
 800c428:	3201      	adds	r2, #1
 800c42a:	6002      	str	r2, [r0, #0]
 800c42c:	2f02      	cmp	r7, #2
 800c42e:	f104 0314 	add.w	r3, r4, #20
 800c432:	d13f      	bne.n	800c4b4 <__gethex+0x450>
 800c434:	f8d8 2000 	ldr.w	r2, [r8]
 800c438:	3a01      	subs	r2, #1
 800c43a:	42b2      	cmp	r2, r6
 800c43c:	d10a      	bne.n	800c454 <__gethex+0x3f0>
 800c43e:	1171      	asrs	r1, r6, #5
 800c440:	2201      	movs	r2, #1
 800c442:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c446:	f006 061f 	and.w	r6, r6, #31
 800c44a:	fa02 f606 	lsl.w	r6, r2, r6
 800c44e:	421e      	tst	r6, r3
 800c450:	bf18      	it	ne
 800c452:	4617      	movne	r7, r2
 800c454:	f047 0720 	orr.w	r7, r7, #32
 800c458:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c45a:	601c      	str	r4, [r3, #0]
 800c45c:	9b04      	ldr	r3, [sp, #16]
 800c45e:	601d      	str	r5, [r3, #0]
 800c460:	e695      	b.n	800c18e <__gethex+0x12a>
 800c462:	4299      	cmp	r1, r3
 800c464:	f843 cc04 	str.w	ip, [r3, #-4]
 800c468:	d8d8      	bhi.n	800c41c <__gethex+0x3b8>
 800c46a:	68a3      	ldr	r3, [r4, #8]
 800c46c:	459b      	cmp	fp, r3
 800c46e:	db19      	blt.n	800c4a4 <__gethex+0x440>
 800c470:	6861      	ldr	r1, [r4, #4]
 800c472:	ee18 0a10 	vmov	r0, s16
 800c476:	3101      	adds	r1, #1
 800c478:	f000 f99a 	bl	800c7b0 <_Balloc>
 800c47c:	4681      	mov	r9, r0
 800c47e:	b918      	cbnz	r0, 800c488 <__gethex+0x424>
 800c480:	4b1a      	ldr	r3, [pc, #104]	; (800c4ec <__gethex+0x488>)
 800c482:	4602      	mov	r2, r0
 800c484:	2184      	movs	r1, #132	; 0x84
 800c486:	e6a8      	b.n	800c1da <__gethex+0x176>
 800c488:	6922      	ldr	r2, [r4, #16]
 800c48a:	3202      	adds	r2, #2
 800c48c:	f104 010c 	add.w	r1, r4, #12
 800c490:	0092      	lsls	r2, r2, #2
 800c492:	300c      	adds	r0, #12
 800c494:	f7fc fea8 	bl	80091e8 <memcpy>
 800c498:	4621      	mov	r1, r4
 800c49a:	ee18 0a10 	vmov	r0, s16
 800c49e:	f000 f9c7 	bl	800c830 <_Bfree>
 800c4a2:	464c      	mov	r4, r9
 800c4a4:	6923      	ldr	r3, [r4, #16]
 800c4a6:	1c5a      	adds	r2, r3, #1
 800c4a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c4ac:	6122      	str	r2, [r4, #16]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	615a      	str	r2, [r3, #20]
 800c4b2:	e7bb      	b.n	800c42c <__gethex+0x3c8>
 800c4b4:	6922      	ldr	r2, [r4, #16]
 800c4b6:	455a      	cmp	r2, fp
 800c4b8:	dd0b      	ble.n	800c4d2 <__gethex+0x46e>
 800c4ba:	2101      	movs	r1, #1
 800c4bc:	4620      	mov	r0, r4
 800c4be:	f7ff fd6a 	bl	800bf96 <rshift>
 800c4c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c4c6:	3501      	adds	r5, #1
 800c4c8:	42ab      	cmp	r3, r5
 800c4ca:	f6ff aed0 	blt.w	800c26e <__gethex+0x20a>
 800c4ce:	2701      	movs	r7, #1
 800c4d0:	e7c0      	b.n	800c454 <__gethex+0x3f0>
 800c4d2:	f016 061f 	ands.w	r6, r6, #31
 800c4d6:	d0fa      	beq.n	800c4ce <__gethex+0x46a>
 800c4d8:	4453      	add	r3, sl
 800c4da:	f1c6 0620 	rsb	r6, r6, #32
 800c4de:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c4e2:	f000 fa57 	bl	800c994 <__hi0bits>
 800c4e6:	42b0      	cmp	r0, r6
 800c4e8:	dbe7      	blt.n	800c4ba <__gethex+0x456>
 800c4ea:	e7f0      	b.n	800c4ce <__gethex+0x46a>
 800c4ec:	0800e1eb 	.word	0x0800e1eb

0800c4f0 <L_shift>:
 800c4f0:	f1c2 0208 	rsb	r2, r2, #8
 800c4f4:	0092      	lsls	r2, r2, #2
 800c4f6:	b570      	push	{r4, r5, r6, lr}
 800c4f8:	f1c2 0620 	rsb	r6, r2, #32
 800c4fc:	6843      	ldr	r3, [r0, #4]
 800c4fe:	6804      	ldr	r4, [r0, #0]
 800c500:	fa03 f506 	lsl.w	r5, r3, r6
 800c504:	432c      	orrs	r4, r5
 800c506:	40d3      	lsrs	r3, r2
 800c508:	6004      	str	r4, [r0, #0]
 800c50a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c50e:	4288      	cmp	r0, r1
 800c510:	d3f4      	bcc.n	800c4fc <L_shift+0xc>
 800c512:	bd70      	pop	{r4, r5, r6, pc}

0800c514 <__match>:
 800c514:	b530      	push	{r4, r5, lr}
 800c516:	6803      	ldr	r3, [r0, #0]
 800c518:	3301      	adds	r3, #1
 800c51a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c51e:	b914      	cbnz	r4, 800c526 <__match+0x12>
 800c520:	6003      	str	r3, [r0, #0]
 800c522:	2001      	movs	r0, #1
 800c524:	bd30      	pop	{r4, r5, pc}
 800c526:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c52a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c52e:	2d19      	cmp	r5, #25
 800c530:	bf98      	it	ls
 800c532:	3220      	addls	r2, #32
 800c534:	42a2      	cmp	r2, r4
 800c536:	d0f0      	beq.n	800c51a <__match+0x6>
 800c538:	2000      	movs	r0, #0
 800c53a:	e7f3      	b.n	800c524 <__match+0x10>

0800c53c <__hexnan>:
 800c53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c540:	680b      	ldr	r3, [r1, #0]
 800c542:	115e      	asrs	r6, r3, #5
 800c544:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c548:	f013 031f 	ands.w	r3, r3, #31
 800c54c:	b087      	sub	sp, #28
 800c54e:	bf18      	it	ne
 800c550:	3604      	addne	r6, #4
 800c552:	2500      	movs	r5, #0
 800c554:	1f37      	subs	r7, r6, #4
 800c556:	4690      	mov	r8, r2
 800c558:	6802      	ldr	r2, [r0, #0]
 800c55a:	9301      	str	r3, [sp, #4]
 800c55c:	4682      	mov	sl, r0
 800c55e:	f846 5c04 	str.w	r5, [r6, #-4]
 800c562:	46b9      	mov	r9, r7
 800c564:	463c      	mov	r4, r7
 800c566:	9502      	str	r5, [sp, #8]
 800c568:	46ab      	mov	fp, r5
 800c56a:	7851      	ldrb	r1, [r2, #1]
 800c56c:	1c53      	adds	r3, r2, #1
 800c56e:	9303      	str	r3, [sp, #12]
 800c570:	b341      	cbz	r1, 800c5c4 <__hexnan+0x88>
 800c572:	4608      	mov	r0, r1
 800c574:	9205      	str	r2, [sp, #20]
 800c576:	9104      	str	r1, [sp, #16]
 800c578:	f7ff fd5f 	bl	800c03a <__hexdig_fun>
 800c57c:	2800      	cmp	r0, #0
 800c57e:	d14f      	bne.n	800c620 <__hexnan+0xe4>
 800c580:	9904      	ldr	r1, [sp, #16]
 800c582:	9a05      	ldr	r2, [sp, #20]
 800c584:	2920      	cmp	r1, #32
 800c586:	d818      	bhi.n	800c5ba <__hexnan+0x7e>
 800c588:	9b02      	ldr	r3, [sp, #8]
 800c58a:	459b      	cmp	fp, r3
 800c58c:	dd13      	ble.n	800c5b6 <__hexnan+0x7a>
 800c58e:	454c      	cmp	r4, r9
 800c590:	d206      	bcs.n	800c5a0 <__hexnan+0x64>
 800c592:	2d07      	cmp	r5, #7
 800c594:	dc04      	bgt.n	800c5a0 <__hexnan+0x64>
 800c596:	462a      	mov	r2, r5
 800c598:	4649      	mov	r1, r9
 800c59a:	4620      	mov	r0, r4
 800c59c:	f7ff ffa8 	bl	800c4f0 <L_shift>
 800c5a0:	4544      	cmp	r4, r8
 800c5a2:	d950      	bls.n	800c646 <__hexnan+0x10a>
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	f1a4 0904 	sub.w	r9, r4, #4
 800c5aa:	f844 3c04 	str.w	r3, [r4, #-4]
 800c5ae:	f8cd b008 	str.w	fp, [sp, #8]
 800c5b2:	464c      	mov	r4, r9
 800c5b4:	461d      	mov	r5, r3
 800c5b6:	9a03      	ldr	r2, [sp, #12]
 800c5b8:	e7d7      	b.n	800c56a <__hexnan+0x2e>
 800c5ba:	2929      	cmp	r1, #41	; 0x29
 800c5bc:	d156      	bne.n	800c66c <__hexnan+0x130>
 800c5be:	3202      	adds	r2, #2
 800c5c0:	f8ca 2000 	str.w	r2, [sl]
 800c5c4:	f1bb 0f00 	cmp.w	fp, #0
 800c5c8:	d050      	beq.n	800c66c <__hexnan+0x130>
 800c5ca:	454c      	cmp	r4, r9
 800c5cc:	d206      	bcs.n	800c5dc <__hexnan+0xa0>
 800c5ce:	2d07      	cmp	r5, #7
 800c5d0:	dc04      	bgt.n	800c5dc <__hexnan+0xa0>
 800c5d2:	462a      	mov	r2, r5
 800c5d4:	4649      	mov	r1, r9
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	f7ff ff8a 	bl	800c4f0 <L_shift>
 800c5dc:	4544      	cmp	r4, r8
 800c5de:	d934      	bls.n	800c64a <__hexnan+0x10e>
 800c5e0:	f1a8 0204 	sub.w	r2, r8, #4
 800c5e4:	4623      	mov	r3, r4
 800c5e6:	f853 1b04 	ldr.w	r1, [r3], #4
 800c5ea:	f842 1f04 	str.w	r1, [r2, #4]!
 800c5ee:	429f      	cmp	r7, r3
 800c5f0:	d2f9      	bcs.n	800c5e6 <__hexnan+0xaa>
 800c5f2:	1b3b      	subs	r3, r7, r4
 800c5f4:	f023 0303 	bic.w	r3, r3, #3
 800c5f8:	3304      	adds	r3, #4
 800c5fa:	3401      	adds	r4, #1
 800c5fc:	3e03      	subs	r6, #3
 800c5fe:	42b4      	cmp	r4, r6
 800c600:	bf88      	it	hi
 800c602:	2304      	movhi	r3, #4
 800c604:	4443      	add	r3, r8
 800c606:	2200      	movs	r2, #0
 800c608:	f843 2b04 	str.w	r2, [r3], #4
 800c60c:	429f      	cmp	r7, r3
 800c60e:	d2fb      	bcs.n	800c608 <__hexnan+0xcc>
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	b91b      	cbnz	r3, 800c61c <__hexnan+0xe0>
 800c614:	4547      	cmp	r7, r8
 800c616:	d127      	bne.n	800c668 <__hexnan+0x12c>
 800c618:	2301      	movs	r3, #1
 800c61a:	603b      	str	r3, [r7, #0]
 800c61c:	2005      	movs	r0, #5
 800c61e:	e026      	b.n	800c66e <__hexnan+0x132>
 800c620:	3501      	adds	r5, #1
 800c622:	2d08      	cmp	r5, #8
 800c624:	f10b 0b01 	add.w	fp, fp, #1
 800c628:	dd06      	ble.n	800c638 <__hexnan+0xfc>
 800c62a:	4544      	cmp	r4, r8
 800c62c:	d9c3      	bls.n	800c5b6 <__hexnan+0x7a>
 800c62e:	2300      	movs	r3, #0
 800c630:	f844 3c04 	str.w	r3, [r4, #-4]
 800c634:	2501      	movs	r5, #1
 800c636:	3c04      	subs	r4, #4
 800c638:	6822      	ldr	r2, [r4, #0]
 800c63a:	f000 000f 	and.w	r0, r0, #15
 800c63e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c642:	6022      	str	r2, [r4, #0]
 800c644:	e7b7      	b.n	800c5b6 <__hexnan+0x7a>
 800c646:	2508      	movs	r5, #8
 800c648:	e7b5      	b.n	800c5b6 <__hexnan+0x7a>
 800c64a:	9b01      	ldr	r3, [sp, #4]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d0df      	beq.n	800c610 <__hexnan+0xd4>
 800c650:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c654:	f1c3 0320 	rsb	r3, r3, #32
 800c658:	fa22 f303 	lsr.w	r3, r2, r3
 800c65c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c660:	401a      	ands	r2, r3
 800c662:	f846 2c04 	str.w	r2, [r6, #-4]
 800c666:	e7d3      	b.n	800c610 <__hexnan+0xd4>
 800c668:	3f04      	subs	r7, #4
 800c66a:	e7d1      	b.n	800c610 <__hexnan+0xd4>
 800c66c:	2004      	movs	r0, #4
 800c66e:	b007      	add	sp, #28
 800c670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c674 <_localeconv_r>:
 800c674:	4800      	ldr	r0, [pc, #0]	; (800c678 <_localeconv_r+0x4>)
 800c676:	4770      	bx	lr
 800c678:	2000020c 	.word	0x2000020c

0800c67c <__retarget_lock_init_recursive>:
 800c67c:	4770      	bx	lr

0800c67e <__retarget_lock_acquire_recursive>:
 800c67e:	4770      	bx	lr

0800c680 <__retarget_lock_release_recursive>:
 800c680:	4770      	bx	lr
	...

0800c684 <_lseek_r>:
 800c684:	b538      	push	{r3, r4, r5, lr}
 800c686:	4d07      	ldr	r5, [pc, #28]	; (800c6a4 <_lseek_r+0x20>)
 800c688:	4604      	mov	r4, r0
 800c68a:	4608      	mov	r0, r1
 800c68c:	4611      	mov	r1, r2
 800c68e:	2200      	movs	r2, #0
 800c690:	602a      	str	r2, [r5, #0]
 800c692:	461a      	mov	r2, r3
 800c694:	f7f8 f85c 	bl	8004750 <_lseek>
 800c698:	1c43      	adds	r3, r0, #1
 800c69a:	d102      	bne.n	800c6a2 <_lseek_r+0x1e>
 800c69c:	682b      	ldr	r3, [r5, #0]
 800c69e:	b103      	cbz	r3, 800c6a2 <_lseek_r+0x1e>
 800c6a0:	6023      	str	r3, [r4, #0]
 800c6a2:	bd38      	pop	{r3, r4, r5, pc}
 800c6a4:	20000fb8 	.word	0x20000fb8

0800c6a8 <__swhatbuf_r>:
 800c6a8:	b570      	push	{r4, r5, r6, lr}
 800c6aa:	460e      	mov	r6, r1
 800c6ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6b0:	2900      	cmp	r1, #0
 800c6b2:	b096      	sub	sp, #88	; 0x58
 800c6b4:	4614      	mov	r4, r2
 800c6b6:	461d      	mov	r5, r3
 800c6b8:	da08      	bge.n	800c6cc <__swhatbuf_r+0x24>
 800c6ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	602a      	str	r2, [r5, #0]
 800c6c2:	061a      	lsls	r2, r3, #24
 800c6c4:	d410      	bmi.n	800c6e8 <__swhatbuf_r+0x40>
 800c6c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6ca:	e00e      	b.n	800c6ea <__swhatbuf_r+0x42>
 800c6cc:	466a      	mov	r2, sp
 800c6ce:	f001 f831 	bl	800d734 <_fstat_r>
 800c6d2:	2800      	cmp	r0, #0
 800c6d4:	dbf1      	blt.n	800c6ba <__swhatbuf_r+0x12>
 800c6d6:	9a01      	ldr	r2, [sp, #4]
 800c6d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c6dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c6e0:	425a      	negs	r2, r3
 800c6e2:	415a      	adcs	r2, r3
 800c6e4:	602a      	str	r2, [r5, #0]
 800c6e6:	e7ee      	b.n	800c6c6 <__swhatbuf_r+0x1e>
 800c6e8:	2340      	movs	r3, #64	; 0x40
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	6023      	str	r3, [r4, #0]
 800c6ee:	b016      	add	sp, #88	; 0x58
 800c6f0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c6f4 <__smakebuf_r>:
 800c6f4:	898b      	ldrh	r3, [r1, #12]
 800c6f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6f8:	079d      	lsls	r5, r3, #30
 800c6fa:	4606      	mov	r6, r0
 800c6fc:	460c      	mov	r4, r1
 800c6fe:	d507      	bpl.n	800c710 <__smakebuf_r+0x1c>
 800c700:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c704:	6023      	str	r3, [r4, #0]
 800c706:	6123      	str	r3, [r4, #16]
 800c708:	2301      	movs	r3, #1
 800c70a:	6163      	str	r3, [r4, #20]
 800c70c:	b002      	add	sp, #8
 800c70e:	bd70      	pop	{r4, r5, r6, pc}
 800c710:	ab01      	add	r3, sp, #4
 800c712:	466a      	mov	r2, sp
 800c714:	f7ff ffc8 	bl	800c6a8 <__swhatbuf_r>
 800c718:	9900      	ldr	r1, [sp, #0]
 800c71a:	4605      	mov	r5, r0
 800c71c:	4630      	mov	r0, r6
 800c71e:	f7fc fde5 	bl	80092ec <_malloc_r>
 800c722:	b948      	cbnz	r0, 800c738 <__smakebuf_r+0x44>
 800c724:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c728:	059a      	lsls	r2, r3, #22
 800c72a:	d4ef      	bmi.n	800c70c <__smakebuf_r+0x18>
 800c72c:	f023 0303 	bic.w	r3, r3, #3
 800c730:	f043 0302 	orr.w	r3, r3, #2
 800c734:	81a3      	strh	r3, [r4, #12]
 800c736:	e7e3      	b.n	800c700 <__smakebuf_r+0xc>
 800c738:	4b0d      	ldr	r3, [pc, #52]	; (800c770 <__smakebuf_r+0x7c>)
 800c73a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c73c:	89a3      	ldrh	r3, [r4, #12]
 800c73e:	6020      	str	r0, [r4, #0]
 800c740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c744:	81a3      	strh	r3, [r4, #12]
 800c746:	9b00      	ldr	r3, [sp, #0]
 800c748:	6163      	str	r3, [r4, #20]
 800c74a:	9b01      	ldr	r3, [sp, #4]
 800c74c:	6120      	str	r0, [r4, #16]
 800c74e:	b15b      	cbz	r3, 800c768 <__smakebuf_r+0x74>
 800c750:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c754:	4630      	mov	r0, r6
 800c756:	f000 ffff 	bl	800d758 <_isatty_r>
 800c75a:	b128      	cbz	r0, 800c768 <__smakebuf_r+0x74>
 800c75c:	89a3      	ldrh	r3, [r4, #12]
 800c75e:	f023 0303 	bic.w	r3, r3, #3
 800c762:	f043 0301 	orr.w	r3, r3, #1
 800c766:	81a3      	strh	r3, [r4, #12]
 800c768:	89a0      	ldrh	r0, [r4, #12]
 800c76a:	4305      	orrs	r5, r0
 800c76c:	81a5      	strh	r5, [r4, #12]
 800c76e:	e7cd      	b.n	800c70c <__smakebuf_r+0x18>
 800c770:	0800bdd1 	.word	0x0800bdd1

0800c774 <__ascii_mbtowc>:
 800c774:	b082      	sub	sp, #8
 800c776:	b901      	cbnz	r1, 800c77a <__ascii_mbtowc+0x6>
 800c778:	a901      	add	r1, sp, #4
 800c77a:	b142      	cbz	r2, 800c78e <__ascii_mbtowc+0x1a>
 800c77c:	b14b      	cbz	r3, 800c792 <__ascii_mbtowc+0x1e>
 800c77e:	7813      	ldrb	r3, [r2, #0]
 800c780:	600b      	str	r3, [r1, #0]
 800c782:	7812      	ldrb	r2, [r2, #0]
 800c784:	1e10      	subs	r0, r2, #0
 800c786:	bf18      	it	ne
 800c788:	2001      	movne	r0, #1
 800c78a:	b002      	add	sp, #8
 800c78c:	4770      	bx	lr
 800c78e:	4610      	mov	r0, r2
 800c790:	e7fb      	b.n	800c78a <__ascii_mbtowc+0x16>
 800c792:	f06f 0001 	mvn.w	r0, #1
 800c796:	e7f8      	b.n	800c78a <__ascii_mbtowc+0x16>

0800c798 <__malloc_lock>:
 800c798:	4801      	ldr	r0, [pc, #4]	; (800c7a0 <__malloc_lock+0x8>)
 800c79a:	f7ff bf70 	b.w	800c67e <__retarget_lock_acquire_recursive>
 800c79e:	bf00      	nop
 800c7a0:	20000fb4 	.word	0x20000fb4

0800c7a4 <__malloc_unlock>:
 800c7a4:	4801      	ldr	r0, [pc, #4]	; (800c7ac <__malloc_unlock+0x8>)
 800c7a6:	f7ff bf6b 	b.w	800c680 <__retarget_lock_release_recursive>
 800c7aa:	bf00      	nop
 800c7ac:	20000fb4 	.word	0x20000fb4

0800c7b0 <_Balloc>:
 800c7b0:	b570      	push	{r4, r5, r6, lr}
 800c7b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c7b4:	4604      	mov	r4, r0
 800c7b6:	460d      	mov	r5, r1
 800c7b8:	b976      	cbnz	r6, 800c7d8 <_Balloc+0x28>
 800c7ba:	2010      	movs	r0, #16
 800c7bc:	f7fc fd0c 	bl	80091d8 <malloc>
 800c7c0:	4602      	mov	r2, r0
 800c7c2:	6260      	str	r0, [r4, #36]	; 0x24
 800c7c4:	b920      	cbnz	r0, 800c7d0 <_Balloc+0x20>
 800c7c6:	4b18      	ldr	r3, [pc, #96]	; (800c828 <_Balloc+0x78>)
 800c7c8:	4818      	ldr	r0, [pc, #96]	; (800c82c <_Balloc+0x7c>)
 800c7ca:	2166      	movs	r1, #102	; 0x66
 800c7cc:	f7fe fb70 	bl	800aeb0 <__assert_func>
 800c7d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7d4:	6006      	str	r6, [r0, #0]
 800c7d6:	60c6      	str	r6, [r0, #12]
 800c7d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c7da:	68f3      	ldr	r3, [r6, #12]
 800c7dc:	b183      	cbz	r3, 800c800 <_Balloc+0x50>
 800c7de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7e0:	68db      	ldr	r3, [r3, #12]
 800c7e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c7e6:	b9b8      	cbnz	r0, 800c818 <_Balloc+0x68>
 800c7e8:	2101      	movs	r1, #1
 800c7ea:	fa01 f605 	lsl.w	r6, r1, r5
 800c7ee:	1d72      	adds	r2, r6, #5
 800c7f0:	0092      	lsls	r2, r2, #2
 800c7f2:	4620      	mov	r0, r4
 800c7f4:	f000 fc9d 	bl	800d132 <_calloc_r>
 800c7f8:	b160      	cbz	r0, 800c814 <_Balloc+0x64>
 800c7fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c7fe:	e00e      	b.n	800c81e <_Balloc+0x6e>
 800c800:	2221      	movs	r2, #33	; 0x21
 800c802:	2104      	movs	r1, #4
 800c804:	4620      	mov	r0, r4
 800c806:	f000 fc94 	bl	800d132 <_calloc_r>
 800c80a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c80c:	60f0      	str	r0, [r6, #12]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d1e4      	bne.n	800c7de <_Balloc+0x2e>
 800c814:	2000      	movs	r0, #0
 800c816:	bd70      	pop	{r4, r5, r6, pc}
 800c818:	6802      	ldr	r2, [r0, #0]
 800c81a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c81e:	2300      	movs	r3, #0
 800c820:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c824:	e7f7      	b.n	800c816 <_Balloc+0x66>
 800c826:	bf00      	nop
 800c828:	0800e179 	.word	0x0800e179
 800c82c:	0800e2d8 	.word	0x0800e2d8

0800c830 <_Bfree>:
 800c830:	b570      	push	{r4, r5, r6, lr}
 800c832:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c834:	4605      	mov	r5, r0
 800c836:	460c      	mov	r4, r1
 800c838:	b976      	cbnz	r6, 800c858 <_Bfree+0x28>
 800c83a:	2010      	movs	r0, #16
 800c83c:	f7fc fccc 	bl	80091d8 <malloc>
 800c840:	4602      	mov	r2, r0
 800c842:	6268      	str	r0, [r5, #36]	; 0x24
 800c844:	b920      	cbnz	r0, 800c850 <_Bfree+0x20>
 800c846:	4b09      	ldr	r3, [pc, #36]	; (800c86c <_Bfree+0x3c>)
 800c848:	4809      	ldr	r0, [pc, #36]	; (800c870 <_Bfree+0x40>)
 800c84a:	218a      	movs	r1, #138	; 0x8a
 800c84c:	f7fe fb30 	bl	800aeb0 <__assert_func>
 800c850:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c854:	6006      	str	r6, [r0, #0]
 800c856:	60c6      	str	r6, [r0, #12]
 800c858:	b13c      	cbz	r4, 800c86a <_Bfree+0x3a>
 800c85a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c85c:	6862      	ldr	r2, [r4, #4]
 800c85e:	68db      	ldr	r3, [r3, #12]
 800c860:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c864:	6021      	str	r1, [r4, #0]
 800c866:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c86a:	bd70      	pop	{r4, r5, r6, pc}
 800c86c:	0800e179 	.word	0x0800e179
 800c870:	0800e2d8 	.word	0x0800e2d8

0800c874 <__multadd>:
 800c874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c878:	690d      	ldr	r5, [r1, #16]
 800c87a:	4607      	mov	r7, r0
 800c87c:	460c      	mov	r4, r1
 800c87e:	461e      	mov	r6, r3
 800c880:	f101 0c14 	add.w	ip, r1, #20
 800c884:	2000      	movs	r0, #0
 800c886:	f8dc 3000 	ldr.w	r3, [ip]
 800c88a:	b299      	uxth	r1, r3
 800c88c:	fb02 6101 	mla	r1, r2, r1, r6
 800c890:	0c1e      	lsrs	r6, r3, #16
 800c892:	0c0b      	lsrs	r3, r1, #16
 800c894:	fb02 3306 	mla	r3, r2, r6, r3
 800c898:	b289      	uxth	r1, r1
 800c89a:	3001      	adds	r0, #1
 800c89c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c8a0:	4285      	cmp	r5, r0
 800c8a2:	f84c 1b04 	str.w	r1, [ip], #4
 800c8a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c8aa:	dcec      	bgt.n	800c886 <__multadd+0x12>
 800c8ac:	b30e      	cbz	r6, 800c8f2 <__multadd+0x7e>
 800c8ae:	68a3      	ldr	r3, [r4, #8]
 800c8b0:	42ab      	cmp	r3, r5
 800c8b2:	dc19      	bgt.n	800c8e8 <__multadd+0x74>
 800c8b4:	6861      	ldr	r1, [r4, #4]
 800c8b6:	4638      	mov	r0, r7
 800c8b8:	3101      	adds	r1, #1
 800c8ba:	f7ff ff79 	bl	800c7b0 <_Balloc>
 800c8be:	4680      	mov	r8, r0
 800c8c0:	b928      	cbnz	r0, 800c8ce <__multadd+0x5a>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	4b0c      	ldr	r3, [pc, #48]	; (800c8f8 <__multadd+0x84>)
 800c8c6:	480d      	ldr	r0, [pc, #52]	; (800c8fc <__multadd+0x88>)
 800c8c8:	21b5      	movs	r1, #181	; 0xb5
 800c8ca:	f7fe faf1 	bl	800aeb0 <__assert_func>
 800c8ce:	6922      	ldr	r2, [r4, #16]
 800c8d0:	3202      	adds	r2, #2
 800c8d2:	f104 010c 	add.w	r1, r4, #12
 800c8d6:	0092      	lsls	r2, r2, #2
 800c8d8:	300c      	adds	r0, #12
 800c8da:	f7fc fc85 	bl	80091e8 <memcpy>
 800c8de:	4621      	mov	r1, r4
 800c8e0:	4638      	mov	r0, r7
 800c8e2:	f7ff ffa5 	bl	800c830 <_Bfree>
 800c8e6:	4644      	mov	r4, r8
 800c8e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c8ec:	3501      	adds	r5, #1
 800c8ee:	615e      	str	r6, [r3, #20]
 800c8f0:	6125      	str	r5, [r4, #16]
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8f8:	0800e1eb 	.word	0x0800e1eb
 800c8fc:	0800e2d8 	.word	0x0800e2d8

0800c900 <__s2b>:
 800c900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c904:	460c      	mov	r4, r1
 800c906:	4615      	mov	r5, r2
 800c908:	461f      	mov	r7, r3
 800c90a:	2209      	movs	r2, #9
 800c90c:	3308      	adds	r3, #8
 800c90e:	4606      	mov	r6, r0
 800c910:	fb93 f3f2 	sdiv	r3, r3, r2
 800c914:	2100      	movs	r1, #0
 800c916:	2201      	movs	r2, #1
 800c918:	429a      	cmp	r2, r3
 800c91a:	db09      	blt.n	800c930 <__s2b+0x30>
 800c91c:	4630      	mov	r0, r6
 800c91e:	f7ff ff47 	bl	800c7b0 <_Balloc>
 800c922:	b940      	cbnz	r0, 800c936 <__s2b+0x36>
 800c924:	4602      	mov	r2, r0
 800c926:	4b19      	ldr	r3, [pc, #100]	; (800c98c <__s2b+0x8c>)
 800c928:	4819      	ldr	r0, [pc, #100]	; (800c990 <__s2b+0x90>)
 800c92a:	21ce      	movs	r1, #206	; 0xce
 800c92c:	f7fe fac0 	bl	800aeb0 <__assert_func>
 800c930:	0052      	lsls	r2, r2, #1
 800c932:	3101      	adds	r1, #1
 800c934:	e7f0      	b.n	800c918 <__s2b+0x18>
 800c936:	9b08      	ldr	r3, [sp, #32]
 800c938:	6143      	str	r3, [r0, #20]
 800c93a:	2d09      	cmp	r5, #9
 800c93c:	f04f 0301 	mov.w	r3, #1
 800c940:	6103      	str	r3, [r0, #16]
 800c942:	dd16      	ble.n	800c972 <__s2b+0x72>
 800c944:	f104 0909 	add.w	r9, r4, #9
 800c948:	46c8      	mov	r8, r9
 800c94a:	442c      	add	r4, r5
 800c94c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c950:	4601      	mov	r1, r0
 800c952:	3b30      	subs	r3, #48	; 0x30
 800c954:	220a      	movs	r2, #10
 800c956:	4630      	mov	r0, r6
 800c958:	f7ff ff8c 	bl	800c874 <__multadd>
 800c95c:	45a0      	cmp	r8, r4
 800c95e:	d1f5      	bne.n	800c94c <__s2b+0x4c>
 800c960:	f1a5 0408 	sub.w	r4, r5, #8
 800c964:	444c      	add	r4, r9
 800c966:	1b2d      	subs	r5, r5, r4
 800c968:	1963      	adds	r3, r4, r5
 800c96a:	42bb      	cmp	r3, r7
 800c96c:	db04      	blt.n	800c978 <__s2b+0x78>
 800c96e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c972:	340a      	adds	r4, #10
 800c974:	2509      	movs	r5, #9
 800c976:	e7f6      	b.n	800c966 <__s2b+0x66>
 800c978:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c97c:	4601      	mov	r1, r0
 800c97e:	3b30      	subs	r3, #48	; 0x30
 800c980:	220a      	movs	r2, #10
 800c982:	4630      	mov	r0, r6
 800c984:	f7ff ff76 	bl	800c874 <__multadd>
 800c988:	e7ee      	b.n	800c968 <__s2b+0x68>
 800c98a:	bf00      	nop
 800c98c:	0800e1eb 	.word	0x0800e1eb
 800c990:	0800e2d8 	.word	0x0800e2d8

0800c994 <__hi0bits>:
 800c994:	0c03      	lsrs	r3, r0, #16
 800c996:	041b      	lsls	r3, r3, #16
 800c998:	b9d3      	cbnz	r3, 800c9d0 <__hi0bits+0x3c>
 800c99a:	0400      	lsls	r0, r0, #16
 800c99c:	2310      	movs	r3, #16
 800c99e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c9a2:	bf04      	itt	eq
 800c9a4:	0200      	lsleq	r0, r0, #8
 800c9a6:	3308      	addeq	r3, #8
 800c9a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c9ac:	bf04      	itt	eq
 800c9ae:	0100      	lsleq	r0, r0, #4
 800c9b0:	3304      	addeq	r3, #4
 800c9b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c9b6:	bf04      	itt	eq
 800c9b8:	0080      	lsleq	r0, r0, #2
 800c9ba:	3302      	addeq	r3, #2
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	db05      	blt.n	800c9cc <__hi0bits+0x38>
 800c9c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c9c4:	f103 0301 	add.w	r3, r3, #1
 800c9c8:	bf08      	it	eq
 800c9ca:	2320      	moveq	r3, #32
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	4770      	bx	lr
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	e7e4      	b.n	800c99e <__hi0bits+0xa>

0800c9d4 <__lo0bits>:
 800c9d4:	6803      	ldr	r3, [r0, #0]
 800c9d6:	f013 0207 	ands.w	r2, r3, #7
 800c9da:	4601      	mov	r1, r0
 800c9dc:	d00b      	beq.n	800c9f6 <__lo0bits+0x22>
 800c9de:	07da      	lsls	r2, r3, #31
 800c9e0:	d423      	bmi.n	800ca2a <__lo0bits+0x56>
 800c9e2:	0798      	lsls	r0, r3, #30
 800c9e4:	bf49      	itett	mi
 800c9e6:	085b      	lsrmi	r3, r3, #1
 800c9e8:	089b      	lsrpl	r3, r3, #2
 800c9ea:	2001      	movmi	r0, #1
 800c9ec:	600b      	strmi	r3, [r1, #0]
 800c9ee:	bf5c      	itt	pl
 800c9f0:	600b      	strpl	r3, [r1, #0]
 800c9f2:	2002      	movpl	r0, #2
 800c9f4:	4770      	bx	lr
 800c9f6:	b298      	uxth	r0, r3
 800c9f8:	b9a8      	cbnz	r0, 800ca26 <__lo0bits+0x52>
 800c9fa:	0c1b      	lsrs	r3, r3, #16
 800c9fc:	2010      	movs	r0, #16
 800c9fe:	b2da      	uxtb	r2, r3
 800ca00:	b90a      	cbnz	r2, 800ca06 <__lo0bits+0x32>
 800ca02:	3008      	adds	r0, #8
 800ca04:	0a1b      	lsrs	r3, r3, #8
 800ca06:	071a      	lsls	r2, r3, #28
 800ca08:	bf04      	itt	eq
 800ca0a:	091b      	lsreq	r3, r3, #4
 800ca0c:	3004      	addeq	r0, #4
 800ca0e:	079a      	lsls	r2, r3, #30
 800ca10:	bf04      	itt	eq
 800ca12:	089b      	lsreq	r3, r3, #2
 800ca14:	3002      	addeq	r0, #2
 800ca16:	07da      	lsls	r2, r3, #31
 800ca18:	d403      	bmi.n	800ca22 <__lo0bits+0x4e>
 800ca1a:	085b      	lsrs	r3, r3, #1
 800ca1c:	f100 0001 	add.w	r0, r0, #1
 800ca20:	d005      	beq.n	800ca2e <__lo0bits+0x5a>
 800ca22:	600b      	str	r3, [r1, #0]
 800ca24:	4770      	bx	lr
 800ca26:	4610      	mov	r0, r2
 800ca28:	e7e9      	b.n	800c9fe <__lo0bits+0x2a>
 800ca2a:	2000      	movs	r0, #0
 800ca2c:	4770      	bx	lr
 800ca2e:	2020      	movs	r0, #32
 800ca30:	4770      	bx	lr
	...

0800ca34 <__i2b>:
 800ca34:	b510      	push	{r4, lr}
 800ca36:	460c      	mov	r4, r1
 800ca38:	2101      	movs	r1, #1
 800ca3a:	f7ff feb9 	bl	800c7b0 <_Balloc>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	b928      	cbnz	r0, 800ca4e <__i2b+0x1a>
 800ca42:	4b05      	ldr	r3, [pc, #20]	; (800ca58 <__i2b+0x24>)
 800ca44:	4805      	ldr	r0, [pc, #20]	; (800ca5c <__i2b+0x28>)
 800ca46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ca4a:	f7fe fa31 	bl	800aeb0 <__assert_func>
 800ca4e:	2301      	movs	r3, #1
 800ca50:	6144      	str	r4, [r0, #20]
 800ca52:	6103      	str	r3, [r0, #16]
 800ca54:	bd10      	pop	{r4, pc}
 800ca56:	bf00      	nop
 800ca58:	0800e1eb 	.word	0x0800e1eb
 800ca5c:	0800e2d8 	.word	0x0800e2d8

0800ca60 <__multiply>:
 800ca60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca64:	4691      	mov	r9, r2
 800ca66:	690a      	ldr	r2, [r1, #16]
 800ca68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	bfb8      	it	lt
 800ca70:	460b      	movlt	r3, r1
 800ca72:	460c      	mov	r4, r1
 800ca74:	bfbc      	itt	lt
 800ca76:	464c      	movlt	r4, r9
 800ca78:	4699      	movlt	r9, r3
 800ca7a:	6927      	ldr	r7, [r4, #16]
 800ca7c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ca80:	68a3      	ldr	r3, [r4, #8]
 800ca82:	6861      	ldr	r1, [r4, #4]
 800ca84:	eb07 060a 	add.w	r6, r7, sl
 800ca88:	42b3      	cmp	r3, r6
 800ca8a:	b085      	sub	sp, #20
 800ca8c:	bfb8      	it	lt
 800ca8e:	3101      	addlt	r1, #1
 800ca90:	f7ff fe8e 	bl	800c7b0 <_Balloc>
 800ca94:	b930      	cbnz	r0, 800caa4 <__multiply+0x44>
 800ca96:	4602      	mov	r2, r0
 800ca98:	4b44      	ldr	r3, [pc, #272]	; (800cbac <__multiply+0x14c>)
 800ca9a:	4845      	ldr	r0, [pc, #276]	; (800cbb0 <__multiply+0x150>)
 800ca9c:	f240 115d 	movw	r1, #349	; 0x15d
 800caa0:	f7fe fa06 	bl	800aeb0 <__assert_func>
 800caa4:	f100 0514 	add.w	r5, r0, #20
 800caa8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800caac:	462b      	mov	r3, r5
 800caae:	2200      	movs	r2, #0
 800cab0:	4543      	cmp	r3, r8
 800cab2:	d321      	bcc.n	800caf8 <__multiply+0x98>
 800cab4:	f104 0314 	add.w	r3, r4, #20
 800cab8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cabc:	f109 0314 	add.w	r3, r9, #20
 800cac0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cac4:	9202      	str	r2, [sp, #8]
 800cac6:	1b3a      	subs	r2, r7, r4
 800cac8:	3a15      	subs	r2, #21
 800caca:	f022 0203 	bic.w	r2, r2, #3
 800cace:	3204      	adds	r2, #4
 800cad0:	f104 0115 	add.w	r1, r4, #21
 800cad4:	428f      	cmp	r7, r1
 800cad6:	bf38      	it	cc
 800cad8:	2204      	movcc	r2, #4
 800cada:	9201      	str	r2, [sp, #4]
 800cadc:	9a02      	ldr	r2, [sp, #8]
 800cade:	9303      	str	r3, [sp, #12]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d80c      	bhi.n	800cafe <__multiply+0x9e>
 800cae4:	2e00      	cmp	r6, #0
 800cae6:	dd03      	ble.n	800caf0 <__multiply+0x90>
 800cae8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800caec:	2b00      	cmp	r3, #0
 800caee:	d05a      	beq.n	800cba6 <__multiply+0x146>
 800caf0:	6106      	str	r6, [r0, #16]
 800caf2:	b005      	add	sp, #20
 800caf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caf8:	f843 2b04 	str.w	r2, [r3], #4
 800cafc:	e7d8      	b.n	800cab0 <__multiply+0x50>
 800cafe:	f8b3 a000 	ldrh.w	sl, [r3]
 800cb02:	f1ba 0f00 	cmp.w	sl, #0
 800cb06:	d024      	beq.n	800cb52 <__multiply+0xf2>
 800cb08:	f104 0e14 	add.w	lr, r4, #20
 800cb0c:	46a9      	mov	r9, r5
 800cb0e:	f04f 0c00 	mov.w	ip, #0
 800cb12:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cb16:	f8d9 1000 	ldr.w	r1, [r9]
 800cb1a:	fa1f fb82 	uxth.w	fp, r2
 800cb1e:	b289      	uxth	r1, r1
 800cb20:	fb0a 110b 	mla	r1, sl, fp, r1
 800cb24:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cb28:	f8d9 2000 	ldr.w	r2, [r9]
 800cb2c:	4461      	add	r1, ip
 800cb2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cb32:	fb0a c20b 	mla	r2, sl, fp, ip
 800cb36:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cb3a:	b289      	uxth	r1, r1
 800cb3c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cb40:	4577      	cmp	r7, lr
 800cb42:	f849 1b04 	str.w	r1, [r9], #4
 800cb46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cb4a:	d8e2      	bhi.n	800cb12 <__multiply+0xb2>
 800cb4c:	9a01      	ldr	r2, [sp, #4]
 800cb4e:	f845 c002 	str.w	ip, [r5, r2]
 800cb52:	9a03      	ldr	r2, [sp, #12]
 800cb54:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cb58:	3304      	adds	r3, #4
 800cb5a:	f1b9 0f00 	cmp.w	r9, #0
 800cb5e:	d020      	beq.n	800cba2 <__multiply+0x142>
 800cb60:	6829      	ldr	r1, [r5, #0]
 800cb62:	f104 0c14 	add.w	ip, r4, #20
 800cb66:	46ae      	mov	lr, r5
 800cb68:	f04f 0a00 	mov.w	sl, #0
 800cb6c:	f8bc b000 	ldrh.w	fp, [ip]
 800cb70:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cb74:	fb09 220b 	mla	r2, r9, fp, r2
 800cb78:	4492      	add	sl, r2
 800cb7a:	b289      	uxth	r1, r1
 800cb7c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cb80:	f84e 1b04 	str.w	r1, [lr], #4
 800cb84:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cb88:	f8be 1000 	ldrh.w	r1, [lr]
 800cb8c:	0c12      	lsrs	r2, r2, #16
 800cb8e:	fb09 1102 	mla	r1, r9, r2, r1
 800cb92:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cb96:	4567      	cmp	r7, ip
 800cb98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cb9c:	d8e6      	bhi.n	800cb6c <__multiply+0x10c>
 800cb9e:	9a01      	ldr	r2, [sp, #4]
 800cba0:	50a9      	str	r1, [r5, r2]
 800cba2:	3504      	adds	r5, #4
 800cba4:	e79a      	b.n	800cadc <__multiply+0x7c>
 800cba6:	3e01      	subs	r6, #1
 800cba8:	e79c      	b.n	800cae4 <__multiply+0x84>
 800cbaa:	bf00      	nop
 800cbac:	0800e1eb 	.word	0x0800e1eb
 800cbb0:	0800e2d8 	.word	0x0800e2d8

0800cbb4 <__pow5mult>:
 800cbb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbb8:	4615      	mov	r5, r2
 800cbba:	f012 0203 	ands.w	r2, r2, #3
 800cbbe:	4606      	mov	r6, r0
 800cbc0:	460f      	mov	r7, r1
 800cbc2:	d007      	beq.n	800cbd4 <__pow5mult+0x20>
 800cbc4:	4c25      	ldr	r4, [pc, #148]	; (800cc5c <__pow5mult+0xa8>)
 800cbc6:	3a01      	subs	r2, #1
 800cbc8:	2300      	movs	r3, #0
 800cbca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cbce:	f7ff fe51 	bl	800c874 <__multadd>
 800cbd2:	4607      	mov	r7, r0
 800cbd4:	10ad      	asrs	r5, r5, #2
 800cbd6:	d03d      	beq.n	800cc54 <__pow5mult+0xa0>
 800cbd8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cbda:	b97c      	cbnz	r4, 800cbfc <__pow5mult+0x48>
 800cbdc:	2010      	movs	r0, #16
 800cbde:	f7fc fafb 	bl	80091d8 <malloc>
 800cbe2:	4602      	mov	r2, r0
 800cbe4:	6270      	str	r0, [r6, #36]	; 0x24
 800cbe6:	b928      	cbnz	r0, 800cbf4 <__pow5mult+0x40>
 800cbe8:	4b1d      	ldr	r3, [pc, #116]	; (800cc60 <__pow5mult+0xac>)
 800cbea:	481e      	ldr	r0, [pc, #120]	; (800cc64 <__pow5mult+0xb0>)
 800cbec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cbf0:	f7fe f95e 	bl	800aeb0 <__assert_func>
 800cbf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cbf8:	6004      	str	r4, [r0, #0]
 800cbfa:	60c4      	str	r4, [r0, #12]
 800cbfc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cc00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cc04:	b94c      	cbnz	r4, 800cc1a <__pow5mult+0x66>
 800cc06:	f240 2171 	movw	r1, #625	; 0x271
 800cc0a:	4630      	mov	r0, r6
 800cc0c:	f7ff ff12 	bl	800ca34 <__i2b>
 800cc10:	2300      	movs	r3, #0
 800cc12:	f8c8 0008 	str.w	r0, [r8, #8]
 800cc16:	4604      	mov	r4, r0
 800cc18:	6003      	str	r3, [r0, #0]
 800cc1a:	f04f 0900 	mov.w	r9, #0
 800cc1e:	07eb      	lsls	r3, r5, #31
 800cc20:	d50a      	bpl.n	800cc38 <__pow5mult+0x84>
 800cc22:	4639      	mov	r1, r7
 800cc24:	4622      	mov	r2, r4
 800cc26:	4630      	mov	r0, r6
 800cc28:	f7ff ff1a 	bl	800ca60 <__multiply>
 800cc2c:	4639      	mov	r1, r7
 800cc2e:	4680      	mov	r8, r0
 800cc30:	4630      	mov	r0, r6
 800cc32:	f7ff fdfd 	bl	800c830 <_Bfree>
 800cc36:	4647      	mov	r7, r8
 800cc38:	106d      	asrs	r5, r5, #1
 800cc3a:	d00b      	beq.n	800cc54 <__pow5mult+0xa0>
 800cc3c:	6820      	ldr	r0, [r4, #0]
 800cc3e:	b938      	cbnz	r0, 800cc50 <__pow5mult+0x9c>
 800cc40:	4622      	mov	r2, r4
 800cc42:	4621      	mov	r1, r4
 800cc44:	4630      	mov	r0, r6
 800cc46:	f7ff ff0b 	bl	800ca60 <__multiply>
 800cc4a:	6020      	str	r0, [r4, #0]
 800cc4c:	f8c0 9000 	str.w	r9, [r0]
 800cc50:	4604      	mov	r4, r0
 800cc52:	e7e4      	b.n	800cc1e <__pow5mult+0x6a>
 800cc54:	4638      	mov	r0, r7
 800cc56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc5a:	bf00      	nop
 800cc5c:	0800e428 	.word	0x0800e428
 800cc60:	0800e179 	.word	0x0800e179
 800cc64:	0800e2d8 	.word	0x0800e2d8

0800cc68 <__lshift>:
 800cc68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc6c:	460c      	mov	r4, r1
 800cc6e:	6849      	ldr	r1, [r1, #4]
 800cc70:	6923      	ldr	r3, [r4, #16]
 800cc72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cc76:	68a3      	ldr	r3, [r4, #8]
 800cc78:	4607      	mov	r7, r0
 800cc7a:	4691      	mov	r9, r2
 800cc7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc80:	f108 0601 	add.w	r6, r8, #1
 800cc84:	42b3      	cmp	r3, r6
 800cc86:	db0b      	blt.n	800cca0 <__lshift+0x38>
 800cc88:	4638      	mov	r0, r7
 800cc8a:	f7ff fd91 	bl	800c7b0 <_Balloc>
 800cc8e:	4605      	mov	r5, r0
 800cc90:	b948      	cbnz	r0, 800cca6 <__lshift+0x3e>
 800cc92:	4602      	mov	r2, r0
 800cc94:	4b2a      	ldr	r3, [pc, #168]	; (800cd40 <__lshift+0xd8>)
 800cc96:	482b      	ldr	r0, [pc, #172]	; (800cd44 <__lshift+0xdc>)
 800cc98:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cc9c:	f7fe f908 	bl	800aeb0 <__assert_func>
 800cca0:	3101      	adds	r1, #1
 800cca2:	005b      	lsls	r3, r3, #1
 800cca4:	e7ee      	b.n	800cc84 <__lshift+0x1c>
 800cca6:	2300      	movs	r3, #0
 800cca8:	f100 0114 	add.w	r1, r0, #20
 800ccac:	f100 0210 	add.w	r2, r0, #16
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	4553      	cmp	r3, sl
 800ccb4:	db37      	blt.n	800cd26 <__lshift+0xbe>
 800ccb6:	6920      	ldr	r0, [r4, #16]
 800ccb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ccbc:	f104 0314 	add.w	r3, r4, #20
 800ccc0:	f019 091f 	ands.w	r9, r9, #31
 800ccc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ccc8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cccc:	d02f      	beq.n	800cd2e <__lshift+0xc6>
 800ccce:	f1c9 0e20 	rsb	lr, r9, #32
 800ccd2:	468a      	mov	sl, r1
 800ccd4:	f04f 0c00 	mov.w	ip, #0
 800ccd8:	681a      	ldr	r2, [r3, #0]
 800ccda:	fa02 f209 	lsl.w	r2, r2, r9
 800ccde:	ea42 020c 	orr.w	r2, r2, ip
 800cce2:	f84a 2b04 	str.w	r2, [sl], #4
 800cce6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccea:	4298      	cmp	r0, r3
 800ccec:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ccf0:	d8f2      	bhi.n	800ccd8 <__lshift+0x70>
 800ccf2:	1b03      	subs	r3, r0, r4
 800ccf4:	3b15      	subs	r3, #21
 800ccf6:	f023 0303 	bic.w	r3, r3, #3
 800ccfa:	3304      	adds	r3, #4
 800ccfc:	f104 0215 	add.w	r2, r4, #21
 800cd00:	4290      	cmp	r0, r2
 800cd02:	bf38      	it	cc
 800cd04:	2304      	movcc	r3, #4
 800cd06:	f841 c003 	str.w	ip, [r1, r3]
 800cd0a:	f1bc 0f00 	cmp.w	ip, #0
 800cd0e:	d001      	beq.n	800cd14 <__lshift+0xac>
 800cd10:	f108 0602 	add.w	r6, r8, #2
 800cd14:	3e01      	subs	r6, #1
 800cd16:	4638      	mov	r0, r7
 800cd18:	612e      	str	r6, [r5, #16]
 800cd1a:	4621      	mov	r1, r4
 800cd1c:	f7ff fd88 	bl	800c830 <_Bfree>
 800cd20:	4628      	mov	r0, r5
 800cd22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd26:	f842 0f04 	str.w	r0, [r2, #4]!
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	e7c1      	b.n	800ccb2 <__lshift+0x4a>
 800cd2e:	3904      	subs	r1, #4
 800cd30:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd34:	f841 2f04 	str.w	r2, [r1, #4]!
 800cd38:	4298      	cmp	r0, r3
 800cd3a:	d8f9      	bhi.n	800cd30 <__lshift+0xc8>
 800cd3c:	e7ea      	b.n	800cd14 <__lshift+0xac>
 800cd3e:	bf00      	nop
 800cd40:	0800e1eb 	.word	0x0800e1eb
 800cd44:	0800e2d8 	.word	0x0800e2d8

0800cd48 <__mcmp>:
 800cd48:	b530      	push	{r4, r5, lr}
 800cd4a:	6902      	ldr	r2, [r0, #16]
 800cd4c:	690c      	ldr	r4, [r1, #16]
 800cd4e:	1b12      	subs	r2, r2, r4
 800cd50:	d10e      	bne.n	800cd70 <__mcmp+0x28>
 800cd52:	f100 0314 	add.w	r3, r0, #20
 800cd56:	3114      	adds	r1, #20
 800cd58:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cd5c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cd60:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cd64:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cd68:	42a5      	cmp	r5, r4
 800cd6a:	d003      	beq.n	800cd74 <__mcmp+0x2c>
 800cd6c:	d305      	bcc.n	800cd7a <__mcmp+0x32>
 800cd6e:	2201      	movs	r2, #1
 800cd70:	4610      	mov	r0, r2
 800cd72:	bd30      	pop	{r4, r5, pc}
 800cd74:	4283      	cmp	r3, r0
 800cd76:	d3f3      	bcc.n	800cd60 <__mcmp+0x18>
 800cd78:	e7fa      	b.n	800cd70 <__mcmp+0x28>
 800cd7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd7e:	e7f7      	b.n	800cd70 <__mcmp+0x28>

0800cd80 <__mdiff>:
 800cd80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd84:	460c      	mov	r4, r1
 800cd86:	4606      	mov	r6, r0
 800cd88:	4611      	mov	r1, r2
 800cd8a:	4620      	mov	r0, r4
 800cd8c:	4690      	mov	r8, r2
 800cd8e:	f7ff ffdb 	bl	800cd48 <__mcmp>
 800cd92:	1e05      	subs	r5, r0, #0
 800cd94:	d110      	bne.n	800cdb8 <__mdiff+0x38>
 800cd96:	4629      	mov	r1, r5
 800cd98:	4630      	mov	r0, r6
 800cd9a:	f7ff fd09 	bl	800c7b0 <_Balloc>
 800cd9e:	b930      	cbnz	r0, 800cdae <__mdiff+0x2e>
 800cda0:	4b3a      	ldr	r3, [pc, #232]	; (800ce8c <__mdiff+0x10c>)
 800cda2:	4602      	mov	r2, r0
 800cda4:	f240 2132 	movw	r1, #562	; 0x232
 800cda8:	4839      	ldr	r0, [pc, #228]	; (800ce90 <__mdiff+0x110>)
 800cdaa:	f7fe f881 	bl	800aeb0 <__assert_func>
 800cdae:	2301      	movs	r3, #1
 800cdb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cdb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdb8:	bfa4      	itt	ge
 800cdba:	4643      	movge	r3, r8
 800cdbc:	46a0      	movge	r8, r4
 800cdbe:	4630      	mov	r0, r6
 800cdc0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cdc4:	bfa6      	itte	ge
 800cdc6:	461c      	movge	r4, r3
 800cdc8:	2500      	movge	r5, #0
 800cdca:	2501      	movlt	r5, #1
 800cdcc:	f7ff fcf0 	bl	800c7b0 <_Balloc>
 800cdd0:	b920      	cbnz	r0, 800cddc <__mdiff+0x5c>
 800cdd2:	4b2e      	ldr	r3, [pc, #184]	; (800ce8c <__mdiff+0x10c>)
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cdda:	e7e5      	b.n	800cda8 <__mdiff+0x28>
 800cddc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cde0:	6926      	ldr	r6, [r4, #16]
 800cde2:	60c5      	str	r5, [r0, #12]
 800cde4:	f104 0914 	add.w	r9, r4, #20
 800cde8:	f108 0514 	add.w	r5, r8, #20
 800cdec:	f100 0e14 	add.w	lr, r0, #20
 800cdf0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cdf4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cdf8:	f108 0210 	add.w	r2, r8, #16
 800cdfc:	46f2      	mov	sl, lr
 800cdfe:	2100      	movs	r1, #0
 800ce00:	f859 3b04 	ldr.w	r3, [r9], #4
 800ce04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ce08:	fa1f f883 	uxth.w	r8, r3
 800ce0c:	fa11 f18b 	uxtah	r1, r1, fp
 800ce10:	0c1b      	lsrs	r3, r3, #16
 800ce12:	eba1 0808 	sub.w	r8, r1, r8
 800ce16:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ce1a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ce1e:	fa1f f888 	uxth.w	r8, r8
 800ce22:	1419      	asrs	r1, r3, #16
 800ce24:	454e      	cmp	r6, r9
 800ce26:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ce2a:	f84a 3b04 	str.w	r3, [sl], #4
 800ce2e:	d8e7      	bhi.n	800ce00 <__mdiff+0x80>
 800ce30:	1b33      	subs	r3, r6, r4
 800ce32:	3b15      	subs	r3, #21
 800ce34:	f023 0303 	bic.w	r3, r3, #3
 800ce38:	3304      	adds	r3, #4
 800ce3a:	3415      	adds	r4, #21
 800ce3c:	42a6      	cmp	r6, r4
 800ce3e:	bf38      	it	cc
 800ce40:	2304      	movcc	r3, #4
 800ce42:	441d      	add	r5, r3
 800ce44:	4473      	add	r3, lr
 800ce46:	469e      	mov	lr, r3
 800ce48:	462e      	mov	r6, r5
 800ce4a:	4566      	cmp	r6, ip
 800ce4c:	d30e      	bcc.n	800ce6c <__mdiff+0xec>
 800ce4e:	f10c 0203 	add.w	r2, ip, #3
 800ce52:	1b52      	subs	r2, r2, r5
 800ce54:	f022 0203 	bic.w	r2, r2, #3
 800ce58:	3d03      	subs	r5, #3
 800ce5a:	45ac      	cmp	ip, r5
 800ce5c:	bf38      	it	cc
 800ce5e:	2200      	movcc	r2, #0
 800ce60:	441a      	add	r2, r3
 800ce62:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ce66:	b17b      	cbz	r3, 800ce88 <__mdiff+0x108>
 800ce68:	6107      	str	r7, [r0, #16]
 800ce6a:	e7a3      	b.n	800cdb4 <__mdiff+0x34>
 800ce6c:	f856 8b04 	ldr.w	r8, [r6], #4
 800ce70:	fa11 f288 	uxtah	r2, r1, r8
 800ce74:	1414      	asrs	r4, r2, #16
 800ce76:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ce7a:	b292      	uxth	r2, r2
 800ce7c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ce80:	f84e 2b04 	str.w	r2, [lr], #4
 800ce84:	1421      	asrs	r1, r4, #16
 800ce86:	e7e0      	b.n	800ce4a <__mdiff+0xca>
 800ce88:	3f01      	subs	r7, #1
 800ce8a:	e7ea      	b.n	800ce62 <__mdiff+0xe2>
 800ce8c:	0800e1eb 	.word	0x0800e1eb
 800ce90:	0800e2d8 	.word	0x0800e2d8

0800ce94 <__ulp>:
 800ce94:	b082      	sub	sp, #8
 800ce96:	ed8d 0b00 	vstr	d0, [sp]
 800ce9a:	9b01      	ldr	r3, [sp, #4]
 800ce9c:	4912      	ldr	r1, [pc, #72]	; (800cee8 <__ulp+0x54>)
 800ce9e:	4019      	ands	r1, r3
 800cea0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cea4:	2900      	cmp	r1, #0
 800cea6:	dd05      	ble.n	800ceb4 <__ulp+0x20>
 800cea8:	2200      	movs	r2, #0
 800ceaa:	460b      	mov	r3, r1
 800ceac:	ec43 2b10 	vmov	d0, r2, r3
 800ceb0:	b002      	add	sp, #8
 800ceb2:	4770      	bx	lr
 800ceb4:	4249      	negs	r1, r1
 800ceb6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ceba:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cebe:	f04f 0200 	mov.w	r2, #0
 800cec2:	f04f 0300 	mov.w	r3, #0
 800cec6:	da04      	bge.n	800ced2 <__ulp+0x3e>
 800cec8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cecc:	fa41 f300 	asr.w	r3, r1, r0
 800ced0:	e7ec      	b.n	800ceac <__ulp+0x18>
 800ced2:	f1a0 0114 	sub.w	r1, r0, #20
 800ced6:	291e      	cmp	r1, #30
 800ced8:	bfda      	itte	le
 800ceda:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cede:	fa20 f101 	lsrle.w	r1, r0, r1
 800cee2:	2101      	movgt	r1, #1
 800cee4:	460a      	mov	r2, r1
 800cee6:	e7e1      	b.n	800ceac <__ulp+0x18>
 800cee8:	7ff00000 	.word	0x7ff00000

0800ceec <__b2d>:
 800ceec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceee:	6905      	ldr	r5, [r0, #16]
 800cef0:	f100 0714 	add.w	r7, r0, #20
 800cef4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cef8:	1f2e      	subs	r6, r5, #4
 800cefa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cefe:	4620      	mov	r0, r4
 800cf00:	f7ff fd48 	bl	800c994 <__hi0bits>
 800cf04:	f1c0 0320 	rsb	r3, r0, #32
 800cf08:	280a      	cmp	r0, #10
 800cf0a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cf88 <__b2d+0x9c>
 800cf0e:	600b      	str	r3, [r1, #0]
 800cf10:	dc14      	bgt.n	800cf3c <__b2d+0x50>
 800cf12:	f1c0 0e0b 	rsb	lr, r0, #11
 800cf16:	fa24 f10e 	lsr.w	r1, r4, lr
 800cf1a:	42b7      	cmp	r7, r6
 800cf1c:	ea41 030c 	orr.w	r3, r1, ip
 800cf20:	bf34      	ite	cc
 800cf22:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cf26:	2100      	movcs	r1, #0
 800cf28:	3015      	adds	r0, #21
 800cf2a:	fa04 f000 	lsl.w	r0, r4, r0
 800cf2e:	fa21 f10e 	lsr.w	r1, r1, lr
 800cf32:	ea40 0201 	orr.w	r2, r0, r1
 800cf36:	ec43 2b10 	vmov	d0, r2, r3
 800cf3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf3c:	42b7      	cmp	r7, r6
 800cf3e:	bf3a      	itte	cc
 800cf40:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cf44:	f1a5 0608 	subcc.w	r6, r5, #8
 800cf48:	2100      	movcs	r1, #0
 800cf4a:	380b      	subs	r0, #11
 800cf4c:	d017      	beq.n	800cf7e <__b2d+0x92>
 800cf4e:	f1c0 0c20 	rsb	ip, r0, #32
 800cf52:	fa04 f500 	lsl.w	r5, r4, r0
 800cf56:	42be      	cmp	r6, r7
 800cf58:	fa21 f40c 	lsr.w	r4, r1, ip
 800cf5c:	ea45 0504 	orr.w	r5, r5, r4
 800cf60:	bf8c      	ite	hi
 800cf62:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cf66:	2400      	movls	r4, #0
 800cf68:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cf6c:	fa01 f000 	lsl.w	r0, r1, r0
 800cf70:	fa24 f40c 	lsr.w	r4, r4, ip
 800cf74:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cf78:	ea40 0204 	orr.w	r2, r0, r4
 800cf7c:	e7db      	b.n	800cf36 <__b2d+0x4a>
 800cf7e:	ea44 030c 	orr.w	r3, r4, ip
 800cf82:	460a      	mov	r2, r1
 800cf84:	e7d7      	b.n	800cf36 <__b2d+0x4a>
 800cf86:	bf00      	nop
 800cf88:	3ff00000 	.word	0x3ff00000

0800cf8c <__d2b>:
 800cf8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cf90:	4689      	mov	r9, r1
 800cf92:	2101      	movs	r1, #1
 800cf94:	ec57 6b10 	vmov	r6, r7, d0
 800cf98:	4690      	mov	r8, r2
 800cf9a:	f7ff fc09 	bl	800c7b0 <_Balloc>
 800cf9e:	4604      	mov	r4, r0
 800cfa0:	b930      	cbnz	r0, 800cfb0 <__d2b+0x24>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	4b25      	ldr	r3, [pc, #148]	; (800d03c <__d2b+0xb0>)
 800cfa6:	4826      	ldr	r0, [pc, #152]	; (800d040 <__d2b+0xb4>)
 800cfa8:	f240 310a 	movw	r1, #778	; 0x30a
 800cfac:	f7fd ff80 	bl	800aeb0 <__assert_func>
 800cfb0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cfb4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cfb8:	bb35      	cbnz	r5, 800d008 <__d2b+0x7c>
 800cfba:	2e00      	cmp	r6, #0
 800cfbc:	9301      	str	r3, [sp, #4]
 800cfbe:	d028      	beq.n	800d012 <__d2b+0x86>
 800cfc0:	4668      	mov	r0, sp
 800cfc2:	9600      	str	r6, [sp, #0]
 800cfc4:	f7ff fd06 	bl	800c9d4 <__lo0bits>
 800cfc8:	9900      	ldr	r1, [sp, #0]
 800cfca:	b300      	cbz	r0, 800d00e <__d2b+0x82>
 800cfcc:	9a01      	ldr	r2, [sp, #4]
 800cfce:	f1c0 0320 	rsb	r3, r0, #32
 800cfd2:	fa02 f303 	lsl.w	r3, r2, r3
 800cfd6:	430b      	orrs	r3, r1
 800cfd8:	40c2      	lsrs	r2, r0
 800cfda:	6163      	str	r3, [r4, #20]
 800cfdc:	9201      	str	r2, [sp, #4]
 800cfde:	9b01      	ldr	r3, [sp, #4]
 800cfe0:	61a3      	str	r3, [r4, #24]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	bf14      	ite	ne
 800cfe6:	2202      	movne	r2, #2
 800cfe8:	2201      	moveq	r2, #1
 800cfea:	6122      	str	r2, [r4, #16]
 800cfec:	b1d5      	cbz	r5, 800d024 <__d2b+0x98>
 800cfee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cff2:	4405      	add	r5, r0
 800cff4:	f8c9 5000 	str.w	r5, [r9]
 800cff8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cffc:	f8c8 0000 	str.w	r0, [r8]
 800d000:	4620      	mov	r0, r4
 800d002:	b003      	add	sp, #12
 800d004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d008:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d00c:	e7d5      	b.n	800cfba <__d2b+0x2e>
 800d00e:	6161      	str	r1, [r4, #20]
 800d010:	e7e5      	b.n	800cfde <__d2b+0x52>
 800d012:	a801      	add	r0, sp, #4
 800d014:	f7ff fcde 	bl	800c9d4 <__lo0bits>
 800d018:	9b01      	ldr	r3, [sp, #4]
 800d01a:	6163      	str	r3, [r4, #20]
 800d01c:	2201      	movs	r2, #1
 800d01e:	6122      	str	r2, [r4, #16]
 800d020:	3020      	adds	r0, #32
 800d022:	e7e3      	b.n	800cfec <__d2b+0x60>
 800d024:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d028:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d02c:	f8c9 0000 	str.w	r0, [r9]
 800d030:	6918      	ldr	r0, [r3, #16]
 800d032:	f7ff fcaf 	bl	800c994 <__hi0bits>
 800d036:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d03a:	e7df      	b.n	800cffc <__d2b+0x70>
 800d03c:	0800e1eb 	.word	0x0800e1eb
 800d040:	0800e2d8 	.word	0x0800e2d8

0800d044 <__ratio>:
 800d044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d048:	4688      	mov	r8, r1
 800d04a:	4669      	mov	r1, sp
 800d04c:	4681      	mov	r9, r0
 800d04e:	f7ff ff4d 	bl	800ceec <__b2d>
 800d052:	a901      	add	r1, sp, #4
 800d054:	4640      	mov	r0, r8
 800d056:	ec55 4b10 	vmov	r4, r5, d0
 800d05a:	f7ff ff47 	bl	800ceec <__b2d>
 800d05e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d062:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d066:	eba3 0c02 	sub.w	ip, r3, r2
 800d06a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d06e:	1a9b      	subs	r3, r3, r2
 800d070:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d074:	ec51 0b10 	vmov	r0, r1, d0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	bfd6      	itet	le
 800d07c:	460a      	movle	r2, r1
 800d07e:	462a      	movgt	r2, r5
 800d080:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d084:	468b      	mov	fp, r1
 800d086:	462f      	mov	r7, r5
 800d088:	bfd4      	ite	le
 800d08a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d08e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d092:	4620      	mov	r0, r4
 800d094:	ee10 2a10 	vmov	r2, s0
 800d098:	465b      	mov	r3, fp
 800d09a:	4639      	mov	r1, r7
 800d09c:	f7f3 fbde 	bl	800085c <__aeabi_ddiv>
 800d0a0:	ec41 0b10 	vmov	d0, r0, r1
 800d0a4:	b003      	add	sp, #12
 800d0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d0aa <__copybits>:
 800d0aa:	3901      	subs	r1, #1
 800d0ac:	b570      	push	{r4, r5, r6, lr}
 800d0ae:	1149      	asrs	r1, r1, #5
 800d0b0:	6914      	ldr	r4, [r2, #16]
 800d0b2:	3101      	adds	r1, #1
 800d0b4:	f102 0314 	add.w	r3, r2, #20
 800d0b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d0bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d0c0:	1f05      	subs	r5, r0, #4
 800d0c2:	42a3      	cmp	r3, r4
 800d0c4:	d30c      	bcc.n	800d0e0 <__copybits+0x36>
 800d0c6:	1aa3      	subs	r3, r4, r2
 800d0c8:	3b11      	subs	r3, #17
 800d0ca:	f023 0303 	bic.w	r3, r3, #3
 800d0ce:	3211      	adds	r2, #17
 800d0d0:	42a2      	cmp	r2, r4
 800d0d2:	bf88      	it	hi
 800d0d4:	2300      	movhi	r3, #0
 800d0d6:	4418      	add	r0, r3
 800d0d8:	2300      	movs	r3, #0
 800d0da:	4288      	cmp	r0, r1
 800d0dc:	d305      	bcc.n	800d0ea <__copybits+0x40>
 800d0de:	bd70      	pop	{r4, r5, r6, pc}
 800d0e0:	f853 6b04 	ldr.w	r6, [r3], #4
 800d0e4:	f845 6f04 	str.w	r6, [r5, #4]!
 800d0e8:	e7eb      	b.n	800d0c2 <__copybits+0x18>
 800d0ea:	f840 3b04 	str.w	r3, [r0], #4
 800d0ee:	e7f4      	b.n	800d0da <__copybits+0x30>

0800d0f0 <__any_on>:
 800d0f0:	f100 0214 	add.w	r2, r0, #20
 800d0f4:	6900      	ldr	r0, [r0, #16]
 800d0f6:	114b      	asrs	r3, r1, #5
 800d0f8:	4298      	cmp	r0, r3
 800d0fa:	b510      	push	{r4, lr}
 800d0fc:	db11      	blt.n	800d122 <__any_on+0x32>
 800d0fe:	dd0a      	ble.n	800d116 <__any_on+0x26>
 800d100:	f011 011f 	ands.w	r1, r1, #31
 800d104:	d007      	beq.n	800d116 <__any_on+0x26>
 800d106:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d10a:	fa24 f001 	lsr.w	r0, r4, r1
 800d10e:	fa00 f101 	lsl.w	r1, r0, r1
 800d112:	428c      	cmp	r4, r1
 800d114:	d10b      	bne.n	800d12e <__any_on+0x3e>
 800d116:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d803      	bhi.n	800d126 <__any_on+0x36>
 800d11e:	2000      	movs	r0, #0
 800d120:	bd10      	pop	{r4, pc}
 800d122:	4603      	mov	r3, r0
 800d124:	e7f7      	b.n	800d116 <__any_on+0x26>
 800d126:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d12a:	2900      	cmp	r1, #0
 800d12c:	d0f5      	beq.n	800d11a <__any_on+0x2a>
 800d12e:	2001      	movs	r0, #1
 800d130:	e7f6      	b.n	800d120 <__any_on+0x30>

0800d132 <_calloc_r>:
 800d132:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d134:	fba1 2402 	umull	r2, r4, r1, r2
 800d138:	b94c      	cbnz	r4, 800d14e <_calloc_r+0x1c>
 800d13a:	4611      	mov	r1, r2
 800d13c:	9201      	str	r2, [sp, #4]
 800d13e:	f7fc f8d5 	bl	80092ec <_malloc_r>
 800d142:	9a01      	ldr	r2, [sp, #4]
 800d144:	4605      	mov	r5, r0
 800d146:	b930      	cbnz	r0, 800d156 <_calloc_r+0x24>
 800d148:	4628      	mov	r0, r5
 800d14a:	b003      	add	sp, #12
 800d14c:	bd30      	pop	{r4, r5, pc}
 800d14e:	220c      	movs	r2, #12
 800d150:	6002      	str	r2, [r0, #0]
 800d152:	2500      	movs	r5, #0
 800d154:	e7f8      	b.n	800d148 <_calloc_r+0x16>
 800d156:	4621      	mov	r1, r4
 800d158:	f7fc f854 	bl	8009204 <memset>
 800d15c:	e7f4      	b.n	800d148 <_calloc_r+0x16>

0800d15e <__ssputs_r>:
 800d15e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d162:	688e      	ldr	r6, [r1, #8]
 800d164:	429e      	cmp	r6, r3
 800d166:	4682      	mov	sl, r0
 800d168:	460c      	mov	r4, r1
 800d16a:	4690      	mov	r8, r2
 800d16c:	461f      	mov	r7, r3
 800d16e:	d838      	bhi.n	800d1e2 <__ssputs_r+0x84>
 800d170:	898a      	ldrh	r2, [r1, #12]
 800d172:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d176:	d032      	beq.n	800d1de <__ssputs_r+0x80>
 800d178:	6825      	ldr	r5, [r4, #0]
 800d17a:	6909      	ldr	r1, [r1, #16]
 800d17c:	eba5 0901 	sub.w	r9, r5, r1
 800d180:	6965      	ldr	r5, [r4, #20]
 800d182:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d186:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d18a:	3301      	adds	r3, #1
 800d18c:	444b      	add	r3, r9
 800d18e:	106d      	asrs	r5, r5, #1
 800d190:	429d      	cmp	r5, r3
 800d192:	bf38      	it	cc
 800d194:	461d      	movcc	r5, r3
 800d196:	0553      	lsls	r3, r2, #21
 800d198:	d531      	bpl.n	800d1fe <__ssputs_r+0xa0>
 800d19a:	4629      	mov	r1, r5
 800d19c:	f7fc f8a6 	bl	80092ec <_malloc_r>
 800d1a0:	4606      	mov	r6, r0
 800d1a2:	b950      	cbnz	r0, 800d1ba <__ssputs_r+0x5c>
 800d1a4:	230c      	movs	r3, #12
 800d1a6:	f8ca 3000 	str.w	r3, [sl]
 800d1aa:	89a3      	ldrh	r3, [r4, #12]
 800d1ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1b0:	81a3      	strh	r3, [r4, #12]
 800d1b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ba:	6921      	ldr	r1, [r4, #16]
 800d1bc:	464a      	mov	r2, r9
 800d1be:	f7fc f813 	bl	80091e8 <memcpy>
 800d1c2:	89a3      	ldrh	r3, [r4, #12]
 800d1c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d1c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1cc:	81a3      	strh	r3, [r4, #12]
 800d1ce:	6126      	str	r6, [r4, #16]
 800d1d0:	6165      	str	r5, [r4, #20]
 800d1d2:	444e      	add	r6, r9
 800d1d4:	eba5 0509 	sub.w	r5, r5, r9
 800d1d8:	6026      	str	r6, [r4, #0]
 800d1da:	60a5      	str	r5, [r4, #8]
 800d1dc:	463e      	mov	r6, r7
 800d1de:	42be      	cmp	r6, r7
 800d1e0:	d900      	bls.n	800d1e4 <__ssputs_r+0x86>
 800d1e2:	463e      	mov	r6, r7
 800d1e4:	6820      	ldr	r0, [r4, #0]
 800d1e6:	4632      	mov	r2, r6
 800d1e8:	4641      	mov	r1, r8
 800d1ea:	f000 fac5 	bl	800d778 <memmove>
 800d1ee:	68a3      	ldr	r3, [r4, #8]
 800d1f0:	1b9b      	subs	r3, r3, r6
 800d1f2:	60a3      	str	r3, [r4, #8]
 800d1f4:	6823      	ldr	r3, [r4, #0]
 800d1f6:	4433      	add	r3, r6
 800d1f8:	6023      	str	r3, [r4, #0]
 800d1fa:	2000      	movs	r0, #0
 800d1fc:	e7db      	b.n	800d1b6 <__ssputs_r+0x58>
 800d1fe:	462a      	mov	r2, r5
 800d200:	f000 fad4 	bl	800d7ac <_realloc_r>
 800d204:	4606      	mov	r6, r0
 800d206:	2800      	cmp	r0, #0
 800d208:	d1e1      	bne.n	800d1ce <__ssputs_r+0x70>
 800d20a:	6921      	ldr	r1, [r4, #16]
 800d20c:	4650      	mov	r0, sl
 800d20e:	f7fc f801 	bl	8009214 <_free_r>
 800d212:	e7c7      	b.n	800d1a4 <__ssputs_r+0x46>

0800d214 <_svfiprintf_r>:
 800d214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d218:	4698      	mov	r8, r3
 800d21a:	898b      	ldrh	r3, [r1, #12]
 800d21c:	061b      	lsls	r3, r3, #24
 800d21e:	b09d      	sub	sp, #116	; 0x74
 800d220:	4607      	mov	r7, r0
 800d222:	460d      	mov	r5, r1
 800d224:	4614      	mov	r4, r2
 800d226:	d50e      	bpl.n	800d246 <_svfiprintf_r+0x32>
 800d228:	690b      	ldr	r3, [r1, #16]
 800d22a:	b963      	cbnz	r3, 800d246 <_svfiprintf_r+0x32>
 800d22c:	2140      	movs	r1, #64	; 0x40
 800d22e:	f7fc f85d 	bl	80092ec <_malloc_r>
 800d232:	6028      	str	r0, [r5, #0]
 800d234:	6128      	str	r0, [r5, #16]
 800d236:	b920      	cbnz	r0, 800d242 <_svfiprintf_r+0x2e>
 800d238:	230c      	movs	r3, #12
 800d23a:	603b      	str	r3, [r7, #0]
 800d23c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d240:	e0d1      	b.n	800d3e6 <_svfiprintf_r+0x1d2>
 800d242:	2340      	movs	r3, #64	; 0x40
 800d244:	616b      	str	r3, [r5, #20]
 800d246:	2300      	movs	r3, #0
 800d248:	9309      	str	r3, [sp, #36]	; 0x24
 800d24a:	2320      	movs	r3, #32
 800d24c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d250:	f8cd 800c 	str.w	r8, [sp, #12]
 800d254:	2330      	movs	r3, #48	; 0x30
 800d256:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d400 <_svfiprintf_r+0x1ec>
 800d25a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d25e:	f04f 0901 	mov.w	r9, #1
 800d262:	4623      	mov	r3, r4
 800d264:	469a      	mov	sl, r3
 800d266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d26a:	b10a      	cbz	r2, 800d270 <_svfiprintf_r+0x5c>
 800d26c:	2a25      	cmp	r2, #37	; 0x25
 800d26e:	d1f9      	bne.n	800d264 <_svfiprintf_r+0x50>
 800d270:	ebba 0b04 	subs.w	fp, sl, r4
 800d274:	d00b      	beq.n	800d28e <_svfiprintf_r+0x7a>
 800d276:	465b      	mov	r3, fp
 800d278:	4622      	mov	r2, r4
 800d27a:	4629      	mov	r1, r5
 800d27c:	4638      	mov	r0, r7
 800d27e:	f7ff ff6e 	bl	800d15e <__ssputs_r>
 800d282:	3001      	adds	r0, #1
 800d284:	f000 80aa 	beq.w	800d3dc <_svfiprintf_r+0x1c8>
 800d288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d28a:	445a      	add	r2, fp
 800d28c:	9209      	str	r2, [sp, #36]	; 0x24
 800d28e:	f89a 3000 	ldrb.w	r3, [sl]
 800d292:	2b00      	cmp	r3, #0
 800d294:	f000 80a2 	beq.w	800d3dc <_svfiprintf_r+0x1c8>
 800d298:	2300      	movs	r3, #0
 800d29a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d29e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2a2:	f10a 0a01 	add.w	sl, sl, #1
 800d2a6:	9304      	str	r3, [sp, #16]
 800d2a8:	9307      	str	r3, [sp, #28]
 800d2aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d2ae:	931a      	str	r3, [sp, #104]	; 0x68
 800d2b0:	4654      	mov	r4, sl
 800d2b2:	2205      	movs	r2, #5
 800d2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2b8:	4851      	ldr	r0, [pc, #324]	; (800d400 <_svfiprintf_r+0x1ec>)
 800d2ba:	f7f2 ff99 	bl	80001f0 <memchr>
 800d2be:	9a04      	ldr	r2, [sp, #16]
 800d2c0:	b9d8      	cbnz	r0, 800d2fa <_svfiprintf_r+0xe6>
 800d2c2:	06d0      	lsls	r0, r2, #27
 800d2c4:	bf44      	itt	mi
 800d2c6:	2320      	movmi	r3, #32
 800d2c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2cc:	0711      	lsls	r1, r2, #28
 800d2ce:	bf44      	itt	mi
 800d2d0:	232b      	movmi	r3, #43	; 0x2b
 800d2d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2d6:	f89a 3000 	ldrb.w	r3, [sl]
 800d2da:	2b2a      	cmp	r3, #42	; 0x2a
 800d2dc:	d015      	beq.n	800d30a <_svfiprintf_r+0xf6>
 800d2de:	9a07      	ldr	r2, [sp, #28]
 800d2e0:	4654      	mov	r4, sl
 800d2e2:	2000      	movs	r0, #0
 800d2e4:	f04f 0c0a 	mov.w	ip, #10
 800d2e8:	4621      	mov	r1, r4
 800d2ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2ee:	3b30      	subs	r3, #48	; 0x30
 800d2f0:	2b09      	cmp	r3, #9
 800d2f2:	d94e      	bls.n	800d392 <_svfiprintf_r+0x17e>
 800d2f4:	b1b0      	cbz	r0, 800d324 <_svfiprintf_r+0x110>
 800d2f6:	9207      	str	r2, [sp, #28]
 800d2f8:	e014      	b.n	800d324 <_svfiprintf_r+0x110>
 800d2fa:	eba0 0308 	sub.w	r3, r0, r8
 800d2fe:	fa09 f303 	lsl.w	r3, r9, r3
 800d302:	4313      	orrs	r3, r2
 800d304:	9304      	str	r3, [sp, #16]
 800d306:	46a2      	mov	sl, r4
 800d308:	e7d2      	b.n	800d2b0 <_svfiprintf_r+0x9c>
 800d30a:	9b03      	ldr	r3, [sp, #12]
 800d30c:	1d19      	adds	r1, r3, #4
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	9103      	str	r1, [sp, #12]
 800d312:	2b00      	cmp	r3, #0
 800d314:	bfbb      	ittet	lt
 800d316:	425b      	neglt	r3, r3
 800d318:	f042 0202 	orrlt.w	r2, r2, #2
 800d31c:	9307      	strge	r3, [sp, #28]
 800d31e:	9307      	strlt	r3, [sp, #28]
 800d320:	bfb8      	it	lt
 800d322:	9204      	strlt	r2, [sp, #16]
 800d324:	7823      	ldrb	r3, [r4, #0]
 800d326:	2b2e      	cmp	r3, #46	; 0x2e
 800d328:	d10c      	bne.n	800d344 <_svfiprintf_r+0x130>
 800d32a:	7863      	ldrb	r3, [r4, #1]
 800d32c:	2b2a      	cmp	r3, #42	; 0x2a
 800d32e:	d135      	bne.n	800d39c <_svfiprintf_r+0x188>
 800d330:	9b03      	ldr	r3, [sp, #12]
 800d332:	1d1a      	adds	r2, r3, #4
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	9203      	str	r2, [sp, #12]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	bfb8      	it	lt
 800d33c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d340:	3402      	adds	r4, #2
 800d342:	9305      	str	r3, [sp, #20]
 800d344:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d410 <_svfiprintf_r+0x1fc>
 800d348:	7821      	ldrb	r1, [r4, #0]
 800d34a:	2203      	movs	r2, #3
 800d34c:	4650      	mov	r0, sl
 800d34e:	f7f2 ff4f 	bl	80001f0 <memchr>
 800d352:	b140      	cbz	r0, 800d366 <_svfiprintf_r+0x152>
 800d354:	2340      	movs	r3, #64	; 0x40
 800d356:	eba0 000a 	sub.w	r0, r0, sl
 800d35a:	fa03 f000 	lsl.w	r0, r3, r0
 800d35e:	9b04      	ldr	r3, [sp, #16]
 800d360:	4303      	orrs	r3, r0
 800d362:	3401      	adds	r4, #1
 800d364:	9304      	str	r3, [sp, #16]
 800d366:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d36a:	4826      	ldr	r0, [pc, #152]	; (800d404 <_svfiprintf_r+0x1f0>)
 800d36c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d370:	2206      	movs	r2, #6
 800d372:	f7f2 ff3d 	bl	80001f0 <memchr>
 800d376:	2800      	cmp	r0, #0
 800d378:	d038      	beq.n	800d3ec <_svfiprintf_r+0x1d8>
 800d37a:	4b23      	ldr	r3, [pc, #140]	; (800d408 <_svfiprintf_r+0x1f4>)
 800d37c:	bb1b      	cbnz	r3, 800d3c6 <_svfiprintf_r+0x1b2>
 800d37e:	9b03      	ldr	r3, [sp, #12]
 800d380:	3307      	adds	r3, #7
 800d382:	f023 0307 	bic.w	r3, r3, #7
 800d386:	3308      	adds	r3, #8
 800d388:	9303      	str	r3, [sp, #12]
 800d38a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d38c:	4433      	add	r3, r6
 800d38e:	9309      	str	r3, [sp, #36]	; 0x24
 800d390:	e767      	b.n	800d262 <_svfiprintf_r+0x4e>
 800d392:	fb0c 3202 	mla	r2, ip, r2, r3
 800d396:	460c      	mov	r4, r1
 800d398:	2001      	movs	r0, #1
 800d39a:	e7a5      	b.n	800d2e8 <_svfiprintf_r+0xd4>
 800d39c:	2300      	movs	r3, #0
 800d39e:	3401      	adds	r4, #1
 800d3a0:	9305      	str	r3, [sp, #20]
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	f04f 0c0a 	mov.w	ip, #10
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3ae:	3a30      	subs	r2, #48	; 0x30
 800d3b0:	2a09      	cmp	r2, #9
 800d3b2:	d903      	bls.n	800d3bc <_svfiprintf_r+0x1a8>
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d0c5      	beq.n	800d344 <_svfiprintf_r+0x130>
 800d3b8:	9105      	str	r1, [sp, #20]
 800d3ba:	e7c3      	b.n	800d344 <_svfiprintf_r+0x130>
 800d3bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3c0:	4604      	mov	r4, r0
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	e7f0      	b.n	800d3a8 <_svfiprintf_r+0x194>
 800d3c6:	ab03      	add	r3, sp, #12
 800d3c8:	9300      	str	r3, [sp, #0]
 800d3ca:	462a      	mov	r2, r5
 800d3cc:	4b0f      	ldr	r3, [pc, #60]	; (800d40c <_svfiprintf_r+0x1f8>)
 800d3ce:	a904      	add	r1, sp, #16
 800d3d0:	4638      	mov	r0, r7
 800d3d2:	f7fc f89f 	bl	8009514 <_printf_float>
 800d3d6:	1c42      	adds	r2, r0, #1
 800d3d8:	4606      	mov	r6, r0
 800d3da:	d1d6      	bne.n	800d38a <_svfiprintf_r+0x176>
 800d3dc:	89ab      	ldrh	r3, [r5, #12]
 800d3de:	065b      	lsls	r3, r3, #25
 800d3e0:	f53f af2c 	bmi.w	800d23c <_svfiprintf_r+0x28>
 800d3e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3e6:	b01d      	add	sp, #116	; 0x74
 800d3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ec:	ab03      	add	r3, sp, #12
 800d3ee:	9300      	str	r3, [sp, #0]
 800d3f0:	462a      	mov	r2, r5
 800d3f2:	4b06      	ldr	r3, [pc, #24]	; (800d40c <_svfiprintf_r+0x1f8>)
 800d3f4:	a904      	add	r1, sp, #16
 800d3f6:	4638      	mov	r0, r7
 800d3f8:	f7fc fb30 	bl	8009a5c <_printf_i>
 800d3fc:	e7eb      	b.n	800d3d6 <_svfiprintf_r+0x1c2>
 800d3fe:	bf00      	nop
 800d400:	0800e434 	.word	0x0800e434
 800d404:	0800e43e 	.word	0x0800e43e
 800d408:	08009515 	.word	0x08009515
 800d40c:	0800d15f 	.word	0x0800d15f
 800d410:	0800e43a 	.word	0x0800e43a

0800d414 <__sfputc_r>:
 800d414:	6893      	ldr	r3, [r2, #8]
 800d416:	3b01      	subs	r3, #1
 800d418:	2b00      	cmp	r3, #0
 800d41a:	b410      	push	{r4}
 800d41c:	6093      	str	r3, [r2, #8]
 800d41e:	da08      	bge.n	800d432 <__sfputc_r+0x1e>
 800d420:	6994      	ldr	r4, [r2, #24]
 800d422:	42a3      	cmp	r3, r4
 800d424:	db01      	blt.n	800d42a <__sfputc_r+0x16>
 800d426:	290a      	cmp	r1, #10
 800d428:	d103      	bne.n	800d432 <__sfputc_r+0x1e>
 800d42a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d42e:	f7fd bc6d 	b.w	800ad0c <__swbuf_r>
 800d432:	6813      	ldr	r3, [r2, #0]
 800d434:	1c58      	adds	r0, r3, #1
 800d436:	6010      	str	r0, [r2, #0]
 800d438:	7019      	strb	r1, [r3, #0]
 800d43a:	4608      	mov	r0, r1
 800d43c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d440:	4770      	bx	lr

0800d442 <__sfputs_r>:
 800d442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d444:	4606      	mov	r6, r0
 800d446:	460f      	mov	r7, r1
 800d448:	4614      	mov	r4, r2
 800d44a:	18d5      	adds	r5, r2, r3
 800d44c:	42ac      	cmp	r4, r5
 800d44e:	d101      	bne.n	800d454 <__sfputs_r+0x12>
 800d450:	2000      	movs	r0, #0
 800d452:	e007      	b.n	800d464 <__sfputs_r+0x22>
 800d454:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d458:	463a      	mov	r2, r7
 800d45a:	4630      	mov	r0, r6
 800d45c:	f7ff ffda 	bl	800d414 <__sfputc_r>
 800d460:	1c43      	adds	r3, r0, #1
 800d462:	d1f3      	bne.n	800d44c <__sfputs_r+0xa>
 800d464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d468 <_vfiprintf_r>:
 800d468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d46c:	460d      	mov	r5, r1
 800d46e:	b09d      	sub	sp, #116	; 0x74
 800d470:	4614      	mov	r4, r2
 800d472:	4698      	mov	r8, r3
 800d474:	4606      	mov	r6, r0
 800d476:	b118      	cbz	r0, 800d480 <_vfiprintf_r+0x18>
 800d478:	6983      	ldr	r3, [r0, #24]
 800d47a:	b90b      	cbnz	r3, 800d480 <_vfiprintf_r+0x18>
 800d47c:	f7fe fcdc 	bl	800be38 <__sinit>
 800d480:	4b89      	ldr	r3, [pc, #548]	; (800d6a8 <_vfiprintf_r+0x240>)
 800d482:	429d      	cmp	r5, r3
 800d484:	d11b      	bne.n	800d4be <_vfiprintf_r+0x56>
 800d486:	6875      	ldr	r5, [r6, #4]
 800d488:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d48a:	07d9      	lsls	r1, r3, #31
 800d48c:	d405      	bmi.n	800d49a <_vfiprintf_r+0x32>
 800d48e:	89ab      	ldrh	r3, [r5, #12]
 800d490:	059a      	lsls	r2, r3, #22
 800d492:	d402      	bmi.n	800d49a <_vfiprintf_r+0x32>
 800d494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d496:	f7ff f8f2 	bl	800c67e <__retarget_lock_acquire_recursive>
 800d49a:	89ab      	ldrh	r3, [r5, #12]
 800d49c:	071b      	lsls	r3, r3, #28
 800d49e:	d501      	bpl.n	800d4a4 <_vfiprintf_r+0x3c>
 800d4a0:	692b      	ldr	r3, [r5, #16]
 800d4a2:	b9eb      	cbnz	r3, 800d4e0 <_vfiprintf_r+0x78>
 800d4a4:	4629      	mov	r1, r5
 800d4a6:	4630      	mov	r0, r6
 800d4a8:	f7fd fc94 	bl	800add4 <__swsetup_r>
 800d4ac:	b1c0      	cbz	r0, 800d4e0 <_vfiprintf_r+0x78>
 800d4ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d4b0:	07dc      	lsls	r4, r3, #31
 800d4b2:	d50e      	bpl.n	800d4d2 <_vfiprintf_r+0x6a>
 800d4b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4b8:	b01d      	add	sp, #116	; 0x74
 800d4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4be:	4b7b      	ldr	r3, [pc, #492]	; (800d6ac <_vfiprintf_r+0x244>)
 800d4c0:	429d      	cmp	r5, r3
 800d4c2:	d101      	bne.n	800d4c8 <_vfiprintf_r+0x60>
 800d4c4:	68b5      	ldr	r5, [r6, #8]
 800d4c6:	e7df      	b.n	800d488 <_vfiprintf_r+0x20>
 800d4c8:	4b79      	ldr	r3, [pc, #484]	; (800d6b0 <_vfiprintf_r+0x248>)
 800d4ca:	429d      	cmp	r5, r3
 800d4cc:	bf08      	it	eq
 800d4ce:	68f5      	ldreq	r5, [r6, #12]
 800d4d0:	e7da      	b.n	800d488 <_vfiprintf_r+0x20>
 800d4d2:	89ab      	ldrh	r3, [r5, #12]
 800d4d4:	0598      	lsls	r0, r3, #22
 800d4d6:	d4ed      	bmi.n	800d4b4 <_vfiprintf_r+0x4c>
 800d4d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d4da:	f7ff f8d1 	bl	800c680 <__retarget_lock_release_recursive>
 800d4de:	e7e9      	b.n	800d4b4 <_vfiprintf_r+0x4c>
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	9309      	str	r3, [sp, #36]	; 0x24
 800d4e4:	2320      	movs	r3, #32
 800d4e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4ee:	2330      	movs	r3, #48	; 0x30
 800d4f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d6b4 <_vfiprintf_r+0x24c>
 800d4f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4f8:	f04f 0901 	mov.w	r9, #1
 800d4fc:	4623      	mov	r3, r4
 800d4fe:	469a      	mov	sl, r3
 800d500:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d504:	b10a      	cbz	r2, 800d50a <_vfiprintf_r+0xa2>
 800d506:	2a25      	cmp	r2, #37	; 0x25
 800d508:	d1f9      	bne.n	800d4fe <_vfiprintf_r+0x96>
 800d50a:	ebba 0b04 	subs.w	fp, sl, r4
 800d50e:	d00b      	beq.n	800d528 <_vfiprintf_r+0xc0>
 800d510:	465b      	mov	r3, fp
 800d512:	4622      	mov	r2, r4
 800d514:	4629      	mov	r1, r5
 800d516:	4630      	mov	r0, r6
 800d518:	f7ff ff93 	bl	800d442 <__sfputs_r>
 800d51c:	3001      	adds	r0, #1
 800d51e:	f000 80aa 	beq.w	800d676 <_vfiprintf_r+0x20e>
 800d522:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d524:	445a      	add	r2, fp
 800d526:	9209      	str	r2, [sp, #36]	; 0x24
 800d528:	f89a 3000 	ldrb.w	r3, [sl]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	f000 80a2 	beq.w	800d676 <_vfiprintf_r+0x20e>
 800d532:	2300      	movs	r3, #0
 800d534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d538:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d53c:	f10a 0a01 	add.w	sl, sl, #1
 800d540:	9304      	str	r3, [sp, #16]
 800d542:	9307      	str	r3, [sp, #28]
 800d544:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d548:	931a      	str	r3, [sp, #104]	; 0x68
 800d54a:	4654      	mov	r4, sl
 800d54c:	2205      	movs	r2, #5
 800d54e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d552:	4858      	ldr	r0, [pc, #352]	; (800d6b4 <_vfiprintf_r+0x24c>)
 800d554:	f7f2 fe4c 	bl	80001f0 <memchr>
 800d558:	9a04      	ldr	r2, [sp, #16]
 800d55a:	b9d8      	cbnz	r0, 800d594 <_vfiprintf_r+0x12c>
 800d55c:	06d1      	lsls	r1, r2, #27
 800d55e:	bf44      	itt	mi
 800d560:	2320      	movmi	r3, #32
 800d562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d566:	0713      	lsls	r3, r2, #28
 800d568:	bf44      	itt	mi
 800d56a:	232b      	movmi	r3, #43	; 0x2b
 800d56c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d570:	f89a 3000 	ldrb.w	r3, [sl]
 800d574:	2b2a      	cmp	r3, #42	; 0x2a
 800d576:	d015      	beq.n	800d5a4 <_vfiprintf_r+0x13c>
 800d578:	9a07      	ldr	r2, [sp, #28]
 800d57a:	4654      	mov	r4, sl
 800d57c:	2000      	movs	r0, #0
 800d57e:	f04f 0c0a 	mov.w	ip, #10
 800d582:	4621      	mov	r1, r4
 800d584:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d588:	3b30      	subs	r3, #48	; 0x30
 800d58a:	2b09      	cmp	r3, #9
 800d58c:	d94e      	bls.n	800d62c <_vfiprintf_r+0x1c4>
 800d58e:	b1b0      	cbz	r0, 800d5be <_vfiprintf_r+0x156>
 800d590:	9207      	str	r2, [sp, #28]
 800d592:	e014      	b.n	800d5be <_vfiprintf_r+0x156>
 800d594:	eba0 0308 	sub.w	r3, r0, r8
 800d598:	fa09 f303 	lsl.w	r3, r9, r3
 800d59c:	4313      	orrs	r3, r2
 800d59e:	9304      	str	r3, [sp, #16]
 800d5a0:	46a2      	mov	sl, r4
 800d5a2:	e7d2      	b.n	800d54a <_vfiprintf_r+0xe2>
 800d5a4:	9b03      	ldr	r3, [sp, #12]
 800d5a6:	1d19      	adds	r1, r3, #4
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	9103      	str	r1, [sp, #12]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	bfbb      	ittet	lt
 800d5b0:	425b      	neglt	r3, r3
 800d5b2:	f042 0202 	orrlt.w	r2, r2, #2
 800d5b6:	9307      	strge	r3, [sp, #28]
 800d5b8:	9307      	strlt	r3, [sp, #28]
 800d5ba:	bfb8      	it	lt
 800d5bc:	9204      	strlt	r2, [sp, #16]
 800d5be:	7823      	ldrb	r3, [r4, #0]
 800d5c0:	2b2e      	cmp	r3, #46	; 0x2e
 800d5c2:	d10c      	bne.n	800d5de <_vfiprintf_r+0x176>
 800d5c4:	7863      	ldrb	r3, [r4, #1]
 800d5c6:	2b2a      	cmp	r3, #42	; 0x2a
 800d5c8:	d135      	bne.n	800d636 <_vfiprintf_r+0x1ce>
 800d5ca:	9b03      	ldr	r3, [sp, #12]
 800d5cc:	1d1a      	adds	r2, r3, #4
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	9203      	str	r2, [sp, #12]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	bfb8      	it	lt
 800d5d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d5da:	3402      	adds	r4, #2
 800d5dc:	9305      	str	r3, [sp, #20]
 800d5de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d6c4 <_vfiprintf_r+0x25c>
 800d5e2:	7821      	ldrb	r1, [r4, #0]
 800d5e4:	2203      	movs	r2, #3
 800d5e6:	4650      	mov	r0, sl
 800d5e8:	f7f2 fe02 	bl	80001f0 <memchr>
 800d5ec:	b140      	cbz	r0, 800d600 <_vfiprintf_r+0x198>
 800d5ee:	2340      	movs	r3, #64	; 0x40
 800d5f0:	eba0 000a 	sub.w	r0, r0, sl
 800d5f4:	fa03 f000 	lsl.w	r0, r3, r0
 800d5f8:	9b04      	ldr	r3, [sp, #16]
 800d5fa:	4303      	orrs	r3, r0
 800d5fc:	3401      	adds	r4, #1
 800d5fe:	9304      	str	r3, [sp, #16]
 800d600:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d604:	482c      	ldr	r0, [pc, #176]	; (800d6b8 <_vfiprintf_r+0x250>)
 800d606:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d60a:	2206      	movs	r2, #6
 800d60c:	f7f2 fdf0 	bl	80001f0 <memchr>
 800d610:	2800      	cmp	r0, #0
 800d612:	d03f      	beq.n	800d694 <_vfiprintf_r+0x22c>
 800d614:	4b29      	ldr	r3, [pc, #164]	; (800d6bc <_vfiprintf_r+0x254>)
 800d616:	bb1b      	cbnz	r3, 800d660 <_vfiprintf_r+0x1f8>
 800d618:	9b03      	ldr	r3, [sp, #12]
 800d61a:	3307      	adds	r3, #7
 800d61c:	f023 0307 	bic.w	r3, r3, #7
 800d620:	3308      	adds	r3, #8
 800d622:	9303      	str	r3, [sp, #12]
 800d624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d626:	443b      	add	r3, r7
 800d628:	9309      	str	r3, [sp, #36]	; 0x24
 800d62a:	e767      	b.n	800d4fc <_vfiprintf_r+0x94>
 800d62c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d630:	460c      	mov	r4, r1
 800d632:	2001      	movs	r0, #1
 800d634:	e7a5      	b.n	800d582 <_vfiprintf_r+0x11a>
 800d636:	2300      	movs	r3, #0
 800d638:	3401      	adds	r4, #1
 800d63a:	9305      	str	r3, [sp, #20]
 800d63c:	4619      	mov	r1, r3
 800d63e:	f04f 0c0a 	mov.w	ip, #10
 800d642:	4620      	mov	r0, r4
 800d644:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d648:	3a30      	subs	r2, #48	; 0x30
 800d64a:	2a09      	cmp	r2, #9
 800d64c:	d903      	bls.n	800d656 <_vfiprintf_r+0x1ee>
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d0c5      	beq.n	800d5de <_vfiprintf_r+0x176>
 800d652:	9105      	str	r1, [sp, #20]
 800d654:	e7c3      	b.n	800d5de <_vfiprintf_r+0x176>
 800d656:	fb0c 2101 	mla	r1, ip, r1, r2
 800d65a:	4604      	mov	r4, r0
 800d65c:	2301      	movs	r3, #1
 800d65e:	e7f0      	b.n	800d642 <_vfiprintf_r+0x1da>
 800d660:	ab03      	add	r3, sp, #12
 800d662:	9300      	str	r3, [sp, #0]
 800d664:	462a      	mov	r2, r5
 800d666:	4b16      	ldr	r3, [pc, #88]	; (800d6c0 <_vfiprintf_r+0x258>)
 800d668:	a904      	add	r1, sp, #16
 800d66a:	4630      	mov	r0, r6
 800d66c:	f7fb ff52 	bl	8009514 <_printf_float>
 800d670:	4607      	mov	r7, r0
 800d672:	1c78      	adds	r0, r7, #1
 800d674:	d1d6      	bne.n	800d624 <_vfiprintf_r+0x1bc>
 800d676:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d678:	07d9      	lsls	r1, r3, #31
 800d67a:	d405      	bmi.n	800d688 <_vfiprintf_r+0x220>
 800d67c:	89ab      	ldrh	r3, [r5, #12]
 800d67e:	059a      	lsls	r2, r3, #22
 800d680:	d402      	bmi.n	800d688 <_vfiprintf_r+0x220>
 800d682:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d684:	f7fe fffc 	bl	800c680 <__retarget_lock_release_recursive>
 800d688:	89ab      	ldrh	r3, [r5, #12]
 800d68a:	065b      	lsls	r3, r3, #25
 800d68c:	f53f af12 	bmi.w	800d4b4 <_vfiprintf_r+0x4c>
 800d690:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d692:	e711      	b.n	800d4b8 <_vfiprintf_r+0x50>
 800d694:	ab03      	add	r3, sp, #12
 800d696:	9300      	str	r3, [sp, #0]
 800d698:	462a      	mov	r2, r5
 800d69a:	4b09      	ldr	r3, [pc, #36]	; (800d6c0 <_vfiprintf_r+0x258>)
 800d69c:	a904      	add	r1, sp, #16
 800d69e:	4630      	mov	r0, r6
 800d6a0:	f7fc f9dc 	bl	8009a5c <_printf_i>
 800d6a4:	e7e4      	b.n	800d670 <_vfiprintf_r+0x208>
 800d6a6:	bf00      	nop
 800d6a8:	0800e21c 	.word	0x0800e21c
 800d6ac:	0800e23c 	.word	0x0800e23c
 800d6b0:	0800e1fc 	.word	0x0800e1fc
 800d6b4:	0800e434 	.word	0x0800e434
 800d6b8:	0800e43e 	.word	0x0800e43e
 800d6bc:	08009515 	.word	0x08009515
 800d6c0:	0800d443 	.word	0x0800d443
 800d6c4:	0800e43a 	.word	0x0800e43a

0800d6c8 <_read_r>:
 800d6c8:	b538      	push	{r3, r4, r5, lr}
 800d6ca:	4d07      	ldr	r5, [pc, #28]	; (800d6e8 <_read_r+0x20>)
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	4608      	mov	r0, r1
 800d6d0:	4611      	mov	r1, r2
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	602a      	str	r2, [r5, #0]
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	f7f6 ffda 	bl	8004690 <_read>
 800d6dc:	1c43      	adds	r3, r0, #1
 800d6de:	d102      	bne.n	800d6e6 <_read_r+0x1e>
 800d6e0:	682b      	ldr	r3, [r5, #0]
 800d6e2:	b103      	cbz	r3, 800d6e6 <_read_r+0x1e>
 800d6e4:	6023      	str	r3, [r4, #0]
 800d6e6:	bd38      	pop	{r3, r4, r5, pc}
 800d6e8:	20000fb8 	.word	0x20000fb8
 800d6ec:	00000000 	.word	0x00000000

0800d6f0 <nan>:
 800d6f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d6f8 <nan+0x8>
 800d6f4:	4770      	bx	lr
 800d6f6:	bf00      	nop
 800d6f8:	00000000 	.word	0x00000000
 800d6fc:	7ff80000 	.word	0x7ff80000

0800d700 <nanf>:
 800d700:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d708 <nanf+0x8>
 800d704:	4770      	bx	lr
 800d706:	bf00      	nop
 800d708:	7fc00000 	.word	0x7fc00000

0800d70c <__ascii_wctomb>:
 800d70c:	b149      	cbz	r1, 800d722 <__ascii_wctomb+0x16>
 800d70e:	2aff      	cmp	r2, #255	; 0xff
 800d710:	bf85      	ittet	hi
 800d712:	238a      	movhi	r3, #138	; 0x8a
 800d714:	6003      	strhi	r3, [r0, #0]
 800d716:	700a      	strbls	r2, [r1, #0]
 800d718:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d71c:	bf98      	it	ls
 800d71e:	2001      	movls	r0, #1
 800d720:	4770      	bx	lr
 800d722:	4608      	mov	r0, r1
 800d724:	4770      	bx	lr

0800d726 <abort>:
 800d726:	b508      	push	{r3, lr}
 800d728:	2006      	movs	r0, #6
 800d72a:	f000 f897 	bl	800d85c <raise>
 800d72e:	2001      	movs	r0, #1
 800d730:	f7f6 ffa4 	bl	800467c <_exit>

0800d734 <_fstat_r>:
 800d734:	b538      	push	{r3, r4, r5, lr}
 800d736:	4d07      	ldr	r5, [pc, #28]	; (800d754 <_fstat_r+0x20>)
 800d738:	2300      	movs	r3, #0
 800d73a:	4604      	mov	r4, r0
 800d73c:	4608      	mov	r0, r1
 800d73e:	4611      	mov	r1, r2
 800d740:	602b      	str	r3, [r5, #0]
 800d742:	f7f6 ffea 	bl	800471a <_fstat>
 800d746:	1c43      	adds	r3, r0, #1
 800d748:	d102      	bne.n	800d750 <_fstat_r+0x1c>
 800d74a:	682b      	ldr	r3, [r5, #0]
 800d74c:	b103      	cbz	r3, 800d750 <_fstat_r+0x1c>
 800d74e:	6023      	str	r3, [r4, #0]
 800d750:	bd38      	pop	{r3, r4, r5, pc}
 800d752:	bf00      	nop
 800d754:	20000fb8 	.word	0x20000fb8

0800d758 <_isatty_r>:
 800d758:	b538      	push	{r3, r4, r5, lr}
 800d75a:	4d06      	ldr	r5, [pc, #24]	; (800d774 <_isatty_r+0x1c>)
 800d75c:	2300      	movs	r3, #0
 800d75e:	4604      	mov	r4, r0
 800d760:	4608      	mov	r0, r1
 800d762:	602b      	str	r3, [r5, #0]
 800d764:	f7f6 ffe9 	bl	800473a <_isatty>
 800d768:	1c43      	adds	r3, r0, #1
 800d76a:	d102      	bne.n	800d772 <_isatty_r+0x1a>
 800d76c:	682b      	ldr	r3, [r5, #0]
 800d76e:	b103      	cbz	r3, 800d772 <_isatty_r+0x1a>
 800d770:	6023      	str	r3, [r4, #0]
 800d772:	bd38      	pop	{r3, r4, r5, pc}
 800d774:	20000fb8 	.word	0x20000fb8

0800d778 <memmove>:
 800d778:	4288      	cmp	r0, r1
 800d77a:	b510      	push	{r4, lr}
 800d77c:	eb01 0402 	add.w	r4, r1, r2
 800d780:	d902      	bls.n	800d788 <memmove+0x10>
 800d782:	4284      	cmp	r4, r0
 800d784:	4623      	mov	r3, r4
 800d786:	d807      	bhi.n	800d798 <memmove+0x20>
 800d788:	1e43      	subs	r3, r0, #1
 800d78a:	42a1      	cmp	r1, r4
 800d78c:	d008      	beq.n	800d7a0 <memmove+0x28>
 800d78e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d792:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d796:	e7f8      	b.n	800d78a <memmove+0x12>
 800d798:	4402      	add	r2, r0
 800d79a:	4601      	mov	r1, r0
 800d79c:	428a      	cmp	r2, r1
 800d79e:	d100      	bne.n	800d7a2 <memmove+0x2a>
 800d7a0:	bd10      	pop	{r4, pc}
 800d7a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7aa:	e7f7      	b.n	800d79c <memmove+0x24>

0800d7ac <_realloc_r>:
 800d7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7b0:	4680      	mov	r8, r0
 800d7b2:	4614      	mov	r4, r2
 800d7b4:	460e      	mov	r6, r1
 800d7b6:	b921      	cbnz	r1, 800d7c2 <_realloc_r+0x16>
 800d7b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7bc:	4611      	mov	r1, r2
 800d7be:	f7fb bd95 	b.w	80092ec <_malloc_r>
 800d7c2:	b92a      	cbnz	r2, 800d7d0 <_realloc_r+0x24>
 800d7c4:	f7fb fd26 	bl	8009214 <_free_r>
 800d7c8:	4625      	mov	r5, r4
 800d7ca:	4628      	mov	r0, r5
 800d7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7d0:	f000 f860 	bl	800d894 <_malloc_usable_size_r>
 800d7d4:	4284      	cmp	r4, r0
 800d7d6:	4607      	mov	r7, r0
 800d7d8:	d802      	bhi.n	800d7e0 <_realloc_r+0x34>
 800d7da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d7de:	d812      	bhi.n	800d806 <_realloc_r+0x5a>
 800d7e0:	4621      	mov	r1, r4
 800d7e2:	4640      	mov	r0, r8
 800d7e4:	f7fb fd82 	bl	80092ec <_malloc_r>
 800d7e8:	4605      	mov	r5, r0
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	d0ed      	beq.n	800d7ca <_realloc_r+0x1e>
 800d7ee:	42bc      	cmp	r4, r7
 800d7f0:	4622      	mov	r2, r4
 800d7f2:	4631      	mov	r1, r6
 800d7f4:	bf28      	it	cs
 800d7f6:	463a      	movcs	r2, r7
 800d7f8:	f7fb fcf6 	bl	80091e8 <memcpy>
 800d7fc:	4631      	mov	r1, r6
 800d7fe:	4640      	mov	r0, r8
 800d800:	f7fb fd08 	bl	8009214 <_free_r>
 800d804:	e7e1      	b.n	800d7ca <_realloc_r+0x1e>
 800d806:	4635      	mov	r5, r6
 800d808:	e7df      	b.n	800d7ca <_realloc_r+0x1e>

0800d80a <_raise_r>:
 800d80a:	291f      	cmp	r1, #31
 800d80c:	b538      	push	{r3, r4, r5, lr}
 800d80e:	4604      	mov	r4, r0
 800d810:	460d      	mov	r5, r1
 800d812:	d904      	bls.n	800d81e <_raise_r+0x14>
 800d814:	2316      	movs	r3, #22
 800d816:	6003      	str	r3, [r0, #0]
 800d818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d81c:	bd38      	pop	{r3, r4, r5, pc}
 800d81e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d820:	b112      	cbz	r2, 800d828 <_raise_r+0x1e>
 800d822:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d826:	b94b      	cbnz	r3, 800d83c <_raise_r+0x32>
 800d828:	4620      	mov	r0, r4
 800d82a:	f000 f831 	bl	800d890 <_getpid_r>
 800d82e:	462a      	mov	r2, r5
 800d830:	4601      	mov	r1, r0
 800d832:	4620      	mov	r0, r4
 800d834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d838:	f000 b818 	b.w	800d86c <_kill_r>
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d00a      	beq.n	800d856 <_raise_r+0x4c>
 800d840:	1c59      	adds	r1, r3, #1
 800d842:	d103      	bne.n	800d84c <_raise_r+0x42>
 800d844:	2316      	movs	r3, #22
 800d846:	6003      	str	r3, [r0, #0]
 800d848:	2001      	movs	r0, #1
 800d84a:	e7e7      	b.n	800d81c <_raise_r+0x12>
 800d84c:	2400      	movs	r4, #0
 800d84e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d852:	4628      	mov	r0, r5
 800d854:	4798      	blx	r3
 800d856:	2000      	movs	r0, #0
 800d858:	e7e0      	b.n	800d81c <_raise_r+0x12>
	...

0800d85c <raise>:
 800d85c:	4b02      	ldr	r3, [pc, #8]	; (800d868 <raise+0xc>)
 800d85e:	4601      	mov	r1, r0
 800d860:	6818      	ldr	r0, [r3, #0]
 800d862:	f7ff bfd2 	b.w	800d80a <_raise_r>
 800d866:	bf00      	nop
 800d868:	200000b4 	.word	0x200000b4

0800d86c <_kill_r>:
 800d86c:	b538      	push	{r3, r4, r5, lr}
 800d86e:	4d07      	ldr	r5, [pc, #28]	; (800d88c <_kill_r+0x20>)
 800d870:	2300      	movs	r3, #0
 800d872:	4604      	mov	r4, r0
 800d874:	4608      	mov	r0, r1
 800d876:	4611      	mov	r1, r2
 800d878:	602b      	str	r3, [r5, #0]
 800d87a:	f7f6 feef 	bl	800465c <_kill>
 800d87e:	1c43      	adds	r3, r0, #1
 800d880:	d102      	bne.n	800d888 <_kill_r+0x1c>
 800d882:	682b      	ldr	r3, [r5, #0]
 800d884:	b103      	cbz	r3, 800d888 <_kill_r+0x1c>
 800d886:	6023      	str	r3, [r4, #0]
 800d888:	bd38      	pop	{r3, r4, r5, pc}
 800d88a:	bf00      	nop
 800d88c:	20000fb8 	.word	0x20000fb8

0800d890 <_getpid_r>:
 800d890:	f7f6 bedc 	b.w	800464c <_getpid>

0800d894 <_malloc_usable_size_r>:
 800d894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d898:	1f18      	subs	r0, r3, #4
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	bfbc      	itt	lt
 800d89e:	580b      	ldrlt	r3, [r1, r0]
 800d8a0:	18c0      	addlt	r0, r0, r3
 800d8a2:	4770      	bx	lr

0800d8a4 <_init>:
 800d8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8a6:	bf00      	nop
 800d8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8aa:	bc08      	pop	{r3}
 800d8ac:	469e      	mov	lr, r3
 800d8ae:	4770      	bx	lr

0800d8b0 <_fini>:
 800d8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8b2:	bf00      	nop
 800d8b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8b6:	bc08      	pop	{r3}
 800d8b8:	469e      	mov	lr, r3
 800d8ba:	4770      	bx	lr
