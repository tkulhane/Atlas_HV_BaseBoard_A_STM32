
Atlas_HV_BaseBoard_A_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d06c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b50  0800d210  0800d210  0001d210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd60  0800dd60  00020284  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd60  0800dd60  0001dd60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd68  0800dd68  00020284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd68  0800dd68  0001dd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd6c  0800dd6c  0001dd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000284  20000000  0800dd70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d48  20000284  0800dff4  00020284  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000fcc  0800dff4  00020fcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c4ea  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bfc  00000000  00000000  0003c79e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  000413a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016f8  00000000  00000000  00042c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f351  00000000  00000000  00044378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026fe2  00000000  00000000  000636c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5776  00000000  00000000  0008a6ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012fe21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b24  00000000  00000000  0012fe74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000284 	.word	0x20000284
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d1f4 	.word	0x0800d1f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000288 	.word	0x20000288
 80001dc:	0800d1f4 	.word	0x0800d1f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <application_main>:




void application_main()
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0

	  //BACKUP_SRAM_enable();
		ParamsDefaultValues();
 800100e:	f002 fa31 	bl	8003474 <ParamsDefaultValues>
		ParamsLoad();
 8001012:	f002 fad3 	bl	80035bc <ParamsLoad>



	  //hand address for ADC data store
	  p_ADC_data[0] = &ChannelsStatus[0].voltage_measurement;
 8001016:	4b4e      	ldr	r3, [pc, #312]	; (8001150 <application_main+0x148>)
 8001018:	4a4e      	ldr	r2, [pc, #312]	; (8001154 <application_main+0x14c>)
 800101a:	601a      	str	r2, [r3, #0]
	  p_ADC_data[1] = &ChannelsStatus[1].voltage_measurement;
 800101c:	4b4c      	ldr	r3, [pc, #304]	; (8001150 <application_main+0x148>)
 800101e:	4a4e      	ldr	r2, [pc, #312]	; (8001158 <application_main+0x150>)
 8001020:	605a      	str	r2, [r3, #4]
	  p_ADC_data[2] = &ChannelsStatus[2].voltage_measurement;
 8001022:	4b4b      	ldr	r3, [pc, #300]	; (8001150 <application_main+0x148>)
 8001024:	4a4d      	ldr	r2, [pc, #308]	; (800115c <application_main+0x154>)
 8001026:	609a      	str	r2, [r3, #8]
	  p_ADC_data[3] = &ChannelsStatus[0].current_measurement;
 8001028:	4b49      	ldr	r3, [pc, #292]	; (8001150 <application_main+0x148>)
 800102a:	4a4d      	ldr	r2, [pc, #308]	; (8001160 <application_main+0x158>)
 800102c:	60da      	str	r2, [r3, #12]
	  p_ADC_data[4] = &ChannelsStatus[1].current_measurement;
 800102e:	4b48      	ldr	r3, [pc, #288]	; (8001150 <application_main+0x148>)
 8001030:	4a4c      	ldr	r2, [pc, #304]	; (8001164 <application_main+0x15c>)
 8001032:	611a      	str	r2, [r3, #16]
	  p_ADC_data[5] = &ChannelsStatus[2].current_measurement;
 8001034:	4b46      	ldr	r3, [pc, #280]	; (8001150 <application_main+0x148>)
 8001036:	4a4c      	ldr	r2, [pc, #304]	; (8001168 <application_main+0x160>)
 8001038:	615a      	str	r2, [r3, #20]

	  //hand address for error signals store
	  p_ERROR_data[0] = &ChannelsStatus[0].power_good;
 800103a:	4b4c      	ldr	r3, [pc, #304]	; (800116c <application_main+0x164>)
 800103c:	4a4c      	ldr	r2, [pc, #304]	; (8001170 <application_main+0x168>)
 800103e:	601a      	str	r2, [r3, #0]
	  p_ERROR_data[1] = &ChannelsStatus[1].power_good;
 8001040:	4b4a      	ldr	r3, [pc, #296]	; (800116c <application_main+0x164>)
 8001042:	4a4c      	ldr	r2, [pc, #304]	; (8001174 <application_main+0x16c>)
 8001044:	605a      	str	r2, [r3, #4]
	  p_ERROR_data[2] = &ChannelsStatus[2].power_good;
 8001046:	4b49      	ldr	r3, [pc, #292]	; (800116c <application_main+0x164>)
 8001048:	4a4b      	ldr	r2, [pc, #300]	; (8001178 <application_main+0x170>)
 800104a:	609a      	str	r2, [r3, #8]
	  p_ERROR_data[3] = &ChannelsStatus[0].over_current;
 800104c:	4b47      	ldr	r3, [pc, #284]	; (800116c <application_main+0x164>)
 800104e:	4a4b      	ldr	r2, [pc, #300]	; (800117c <application_main+0x174>)
 8001050:	60da      	str	r2, [r3, #12]
	  p_ERROR_data[4] = &ChannelsStatus[1].over_current;
 8001052:	4b46      	ldr	r3, [pc, #280]	; (800116c <application_main+0x164>)
 8001054:	4a4a      	ldr	r2, [pc, #296]	; (8001180 <application_main+0x178>)
 8001056:	611a      	str	r2, [r3, #16]
	  p_ERROR_data[5] = &ChannelsStatus[2].over_current;
 8001058:	4b44      	ldr	r3, [pc, #272]	; (800116c <application_main+0x164>)
 800105a:	4a4a      	ldr	r2, [pc, #296]	; (8001184 <application_main+0x17c>)
 800105c:	615a      	str	r2, [r3, #20]

	  HAL_GPIO_WritePin(W55_RST_GPIO_Port, W55_RST_Pin, GPIO_PIN_SET);
 800105e:	2201      	movs	r2, #1
 8001060:	2108      	movs	r1, #8
 8001062:	4849      	ldr	r0, [pc, #292]	; (8001188 <application_main+0x180>)
 8001064:	f004 f9e8 	bl	8005438 <HAL_GPIO_WritePin>
	  ETH_udp_Init();
 8001068:	f002 fc9c 	bl	80039a4 <ETH_udp_Init>


	  __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);//enable uart3 interupt
 800106c:	4b47      	ldr	r3, [pc, #284]	; (800118c <application_main+0x184>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	4b46      	ldr	r3, [pc, #280]	; (800118c <application_main+0x184>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0220 	orr.w	r2, r2, #32
 800107a:	60da      	str	r2, [r3, #12]
	  LoadADCConstant(); //load coefficients for ADC
 800107c:	f001 f8f0 	bl	8002260 <LoadADCConstant>
	  LoadDACConstant(); //load coefficients for DAC
 8001080:	f001 fb0c 	bl	800269c <LoadDACConstant>
	  DAC_Init();
 8001084:	f002 fb46 	bl	8003714 <DAC_Init>
	  HAL_TIM_Base_Start_IT(&htim10); //start timer for ADC reading
 8001088:	4841      	ldr	r0, [pc, #260]	; (8001190 <application_main+0x188>)
 800108a:	f005 fd9d 	bl	8006bc8 <HAL_TIM_Base_Start_IT>

	  _EnableErrorExecute = false;
 800108e:	4b41      	ldr	r3, [pc, #260]	; (8001194 <application_main+0x18c>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
	  _DisableSupplyInLostConnection = true;
 8001094:	4b40      	ldr	r3, [pc, #256]	; (8001198 <application_main+0x190>)
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]

	  _ControlOutputWithChannelEnable = true;
 800109a:	4b40      	ldr	r3, [pc, #256]	; (800119c <application_main+0x194>)
 800109c:	2201      	movs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]


	  uint32_t u32LedTimer;


	  Set_Voltage(0, minimum_voltage);
 80010a0:	2119      	movs	r1, #25
 80010a2:	2000      	movs	r0, #0
 80010a4:	f001 fcc2 	bl	8002a2c <Set_Voltage>
	  Set_Voltage(1, minimum_voltage);
 80010a8:	2119      	movs	r1, #25
 80010aa:	2001      	movs	r0, #1
 80010ac:	f001 fcbe 	bl	8002a2c <Set_Voltage>
	  Set_Voltage(2, minimum_voltage);
 80010b0:	2119      	movs	r1, #25
 80010b2:	2002      	movs	r0, #2
 80010b4:	f001 fcba 	bl	8002a2c <Set_Voltage>

	  while(1)
	  {

		  ETH_udp_Receive();
 80010b8:	f002 fce2 	bl	8003a80 <ETH_udp_Receive>

		  if((HAL_GetTick() - u32LedTimer) > 500)
 80010bc:	f003 fc90 	bl	80049e0 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010ca:	d907      	bls.n	80010dc <application_main+0xd4>
		  {
			  u32LedTimer = HAL_GetTick();
 80010cc:	f003 fc88 	bl	80049e0 <HAL_GetTick>
 80010d0:	6078      	str	r0, [r7, #4]
			  HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80010d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d6:	4832      	ldr	r0, [pc, #200]	; (80011a0 <application_main+0x198>)
 80010d8:	f004 f9c7 	bl	800546a <HAL_GPIO_TogglePin>
		  }

		  if(_Found_Error && _EnableErrorExecute)
 80010dc:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <application_main+0x19c>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d00c      	beq.n	80010fe <application_main+0xf6>
 80010e4:	4b2b      	ldr	r3, [pc, #172]	; (8001194 <application_main+0x18c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d008      	beq.n	80010fe <application_main+0xf6>
		  {
			  ErrorExecute(0);
 80010ec:	2000      	movs	r0, #0
 80010ee:	f000 febb 	bl	8001e68 <ErrorExecute>
			  ErrorExecute(1);
 80010f2:	2001      	movs	r0, #1
 80010f4:	f000 feb8 	bl	8001e68 <ErrorExecute>
			  ErrorExecute(2);
 80010f8:	2002      	movs	r0, #2
 80010fa:	f000 feb5 	bl	8001e68 <ErrorExecute>
		  }

		  ChannelControl(0);
 80010fe:	2000      	movs	r0, #0
 8001100:	f001 ffdc 	bl	80030bc <ChannelControl>
		  ChannelControl(1);
 8001104:	2001      	movs	r0, #1
 8001106:	f001 ffd9 	bl	80030bc <ChannelControl>
		  ChannelControl(2);
 800110a:	2002      	movs	r0, #2
 800110c:	f001 ffd6 	bl	80030bc <ChannelControl>



		  bool NewCommand_uart = ProcessCommunication_UART(); //load command from uart buffer
 8001110:	f000 fca0 	bl	8001a54 <ProcessCommunication_UART>
 8001114:	4603      	mov	r3, r0
 8001116:	70fb      	strb	r3, [r7, #3]

		  //process command from uart
		  if(NewCommand_uart)
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d004      	beq.n	8001128 <application_main+0x120>
		  {
			  //HAL_GPIO_WritePin(LED_green_GPIO_Port, LED_green_Pin, GPIO_PIN_SET);
			  ProcessCommand(_command_id);
 800111e:	4b22      	ldr	r3, [pc, #136]	; (80011a8 <application_main+0x1a0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f8a0 	bl	8001268 <ProcessCommand>
			  //HAL_GPIO_WritePin(LED_green_GPIO_Port, LED_green_Pin, GPIO_PIN_RESET);

		  }


		  bool NewCommand_eth = ProcessCommunication_ETH(); //load command from ethernet buffer
 8001128:	f000 fd02 	bl	8001b30 <ProcessCommunication_ETH>
 800112c:	4603      	mov	r3, r0
 800112e:	70bb      	strb	r3, [r7, #2]

		  //process command from ethernet
		  if(NewCommand_eth)
 8001130:	78bb      	ldrb	r3, [r7, #2]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d004      	beq.n	8001140 <application_main+0x138>
		  {
			  //HAL_GPIO_WritePin(LED_blue_GPIO_Port, LED_blue_Pin, GPIO_PIN_SET);
			  ProcessCommand(_command_id);
 8001136:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <application_main+0x1a0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f894 	bl	8001268 <ProcessCommand>
			  //HAL_GPIO_WritePin(LED_blue_GPIO_Port, LED_blue_Pin, GPIO_PIN_RESET);
		  }

		  Communication_ConnectedTimer();
 8001140:	f000 fe7e 	bl	8001e40 <Communication_ConnectedTimer>
		  AppConnectedExecute(_AppConnected);
 8001144:	4b19      	ldr	r3, [pc, #100]	; (80011ac <application_main+0x1a4>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f000 ff9d 	bl	8002088 <AppConnectedExecute>
	  {
 800114e:	e7b3      	b.n	80010b8 <application_main+0xb0>
 8001150:	2000075c 	.word	0x2000075c
 8001154:	200007cc 	.word	0x200007cc
 8001158:	200007e0 	.word	0x200007e0
 800115c:	200007f4 	.word	0x200007f4
 8001160:	200007d0 	.word	0x200007d0
 8001164:	200007e4 	.word	0x200007e4
 8001168:	200007f8 	.word	0x200007f8
 800116c:	200002d4 	.word	0x200002d4
 8001170:	200007d5 	.word	0x200007d5
 8001174:	200007e9 	.word	0x200007e9
 8001178:	200007fd 	.word	0x200007fd
 800117c:	200007d4 	.word	0x200007d4
 8001180:	200007e8 	.word	0x200007e8
 8001184:	200007fc 	.word	0x200007fc
 8001188:	40020400 	.word	0x40020400
 800118c:	20000f50 	.word	0x20000f50
 8001190:	20000f08 	.word	0x20000f08
 8001194:	200002ed 	.word	0x200002ed
 8001198:	200002ee 	.word	0x200002ee
 800119c:	2000083c 	.word	0x2000083c
 80011a0:	40020000 	.word	0x40020000
 80011a4:	200002ec 	.word	0x200002ec
 80011a8:	200002a8 	.word	0x200002a8
 80011ac:	200002a4 	.word	0x200002a4

080011b0 <BACKUP_SRAM_read_StoreControl>:
 * @param position -> position of data register
 * @param return valid of read data
 *
 */
bool BACKUP_SRAM_read_StoreControl(int position)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

	uint32_t flag_reg = *addr_1;
	return  (flag_reg >> position) & 0x000001;
	*/

	return false;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <BACKUP_SRAM_write_StoreControl>:
 * @param position -> position of data register
 * @param flag -> valid of data register
 *
 */
void BACKUP_SRAM_write_StoreControl(int position, bool flag)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	460b      	mov	r3, r1
 80011d0:	70fb      	strb	r3, [r7, #3]
		flag_reg = flag_reg &  ~(1 << position);
	}

	*addr_1 =  flag_reg;
*/
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <BACKUP_SRAM_read>:
 * @param word_offset -> position of data register
 * @return data register
 *
 */
uint32_t BACKUP_SRAM_read(int word_offset)
{
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
	/*
	uint32_t *addr = (uint32_t *)BKPSRAM_BASE + (4 * word_offset);

	return *addr;
	*/
	return 0;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <BACKUP_SRAM_write>:
 * @param word_offset -> position of data register
 * @param value -> data for write
 *
 */
void BACKUP_SRAM_write(int word_offset, uint32_t value)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
	/*
	uint32_t *addr = (uint32_t *)BKPSRAM_BASE + (4 * word_offset);

	*addr = value;
	*/
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <BACKUP_SRAM_read_float>:
 * @param word_offset -> position of data register
 * @return data register
 *
 */
float BACKUP_SRAM_read_float(int word_offset)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
	/*
	float *addr = (float *)BKPSRAM_BASE + (4 * word_offset);

	return *addr;
	*/
	return 0;
 8001212:	f04f 0300 	mov.w	r3, #0
 8001216:	ee07 3a90 	vmov	s15, r3
}
 800121a:	eeb0 0a67 	vmov.f32	s0, s15
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <BACKUP_SRAM_write_float>:
 * @param word_offset -> position of data register
 * @param value -> data for write
 *
 */
void BACKUP_SRAM_write_float(int word_offset, float value)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	ed87 0a00 	vstr	s0, [r7]
	/*
	float *addr = (float *)BKPSRAM_BASE + (4 * word_offset);

	*addr = value;
	*/
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <HAL_TIM_PeriodElapsedCallback>:
/* @brief callback of timer period elapsed -> for ADC measure and read error signals
 *
 *
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	if(htim == &htim10)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d105      	bne.n	800125c <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		ReadADCChannels();
 8001250:	f001 f902 	bl	8002458 <ReadADCChannels>
		ADCStore();
 8001254:	f001 f922 	bl	800249c <ADCStore>
		ErrorSignalsRead();
 8001258:	f000 fe80 	bl	8001f5c <ErrorSignalsRead>
	}
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000f08 	.word	0x20000f08

08001268 <ProcessCommand>:
 * @param command_id -> number of data command
 * @param value -> value for control
 *
 */
void ProcessCommand(int command_id)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	switch(command_id)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b4d      	cmp	r3, #77	; 0x4d
 8001274:	f200 8252 	bhi.w	800171c <ProcessCommand+0x4b4>
 8001278:	a201      	add	r2, pc, #4	; (adr r2, 8001280 <ProcessCommand+0x18>)
 800127a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127e:	bf00      	nop
 8001280:	0800171d 	.word	0x0800171d
 8001284:	080013b9 	.word	0x080013b9
 8001288:	080013d7 	.word	0x080013d7
 800128c:	080013ef 	.word	0x080013ef
 8001290:	08001407 	.word	0x08001407
 8001294:	0800141f 	.word	0x0800141f
 8001298:	08001437 	.word	0x08001437
 800129c:	0800144f 	.word	0x0800144f
 80012a0:	08001467 	.word	0x08001467
 80012a4:	08001477 	.word	0x08001477
 80012a8:	08001487 	.word	0x08001487
 80012ac:	08001497 	.word	0x08001497
 80012b0:	080014bd 	.word	0x080014bd
 80012b4:	080014e3 	.word	0x080014e3
 80012b8:	0800171d 	.word	0x0800171d
 80012bc:	0800171d 	.word	0x0800171d
 80012c0:	0800171d 	.word	0x0800171d
 80012c4:	0800171d 	.word	0x0800171d
 80012c8:	0800171d 	.word	0x0800171d
 80012cc:	0800171d 	.word	0x0800171d
 80012d0:	08001521 	.word	0x08001521
 80012d4:	0800151b 	.word	0x0800151b
 80012d8:	08001509 	.word	0x08001509
 80012dc:	0800171d 	.word	0x0800171d
 80012e0:	0800150f 	.word	0x0800150f
 80012e4:	08001527 	.word	0x08001527
 80012e8:	0800152d 	.word	0x0800152d
 80012ec:	08001539 	.word	0x08001539
 80012f0:	08001545 	.word	0x08001545
 80012f4:	0800171d 	.word	0x0800171d
 80012f8:	0800171d 	.word	0x0800171d
 80012fc:	0800171d 	.word	0x0800171d
 8001300:	08001551 	.word	0x08001551
 8001304:	08001557 	.word	0x08001557
 8001308:	08001569 	.word	0x08001569
 800130c:	0800157b 	.word	0x0800157b
 8001310:	0800158d 	.word	0x0800158d
 8001314:	0800159f 	.word	0x0800159f
 8001318:	080015b1 	.word	0x080015b1
 800131c:	080015c3 	.word	0x080015c3
 8001320:	080015d5 	.word	0x080015d5
 8001324:	080015e7 	.word	0x080015e7
 8001328:	080015f9 	.word	0x080015f9
 800132c:	0800160b 	.word	0x0800160b
 8001330:	0800161d 	.word	0x0800161d
 8001334:	0800171d 	.word	0x0800171d
 8001338:	0800171d 	.word	0x0800171d
 800133c:	0800171d 	.word	0x0800171d
 8001340:	0800171d 	.word	0x0800171d
 8001344:	0800171d 	.word	0x0800171d
 8001348:	0800171d 	.word	0x0800171d
 800134c:	0800171d 	.word	0x0800171d
 8001350:	0800171d 	.word	0x0800171d
 8001354:	0800171d 	.word	0x0800171d
 8001358:	0800171d 	.word	0x0800171d
 800135c:	0800171d 	.word	0x0800171d
 8001360:	0800171d 	.word	0x0800171d
 8001364:	0800162f 	.word	0x0800162f
 8001368:	08001641 	.word	0x08001641
 800136c:	08001653 	.word	0x08001653
 8001370:	08001665 	.word	0x08001665
 8001374:	08001677 	.word	0x08001677
 8001378:	08001699 	.word	0x08001699
 800137c:	0800171d 	.word	0x0800171d
 8001380:	0800171d 	.word	0x0800171d
 8001384:	0800171d 	.word	0x0800171d
 8001388:	0800171d 	.word	0x0800171d
 800138c:	0800171d 	.word	0x0800171d
 8001390:	0800171d 	.word	0x0800171d
 8001394:	080016ab 	.word	0x080016ab
 8001398:	080016b1 	.word	0x080016b1
 800139c:	080016b7 	.word	0x080016b7
 80013a0:	080016c7 	.word	0x080016c7
 80013a4:	080016d7 	.word	0x080016d7
 80013a8:	080016e7 	.word	0x080016e7
 80013ac:	080016f7 	.word	0x080016f7
 80013b0:	08001707 	.word	0x08001707
 80013b4:	08001717 	.word	0x08001717
		case cmd_NON:

			break;
		case cmd_Connected:

			if(_command_source == csource_ETH) ETH_udp_StoreEndpoint();
 80013b8:	4bb3      	ldr	r3, [pc, #716]	; (8001688 <ProcessCommand+0x420>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d101      	bne.n	80013c4 <ProcessCommand+0x15c>
 80013c0:	f002 fb2c 	bl	8003a1c <ETH_udp_StoreEndpoint>
			Comunication_ResetConnectedTimer();
 80013c4:	f000 fd2c 	bl	8001e20 <Comunication_ResetConnectedTimer>
			SendCommunication(cmd_Connected,_command_value);
 80013c8:	4bb0      	ldr	r3, [pc, #704]	; (800168c <ProcessCommand+0x424>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	2001      	movs	r0, #1
 80013d0:	f000 fc16 	bl	8001c00 <SendCommunication>
			break;
 80013d4:	e1a9      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_enable_CH1:
			Channel_Enable(0, _command_value);
 80013d6:	4bad      	ldr	r3, [pc, #692]	; (800168c <ProcessCommand+0x424>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	bf14      	ite	ne
 80013de:	2301      	movne	r3, #1
 80013e0:	2300      	moveq	r3, #0
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	4619      	mov	r1, r3
 80013e6:	2000      	movs	r0, #0
 80013e8:	f001 fd08 	bl	8002dfc <Channel_Enable>
			break;
 80013ec:	e19d      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_enable_CH2:
			Channel_Enable(1, _command_value);
 80013ee:	4ba7      	ldr	r3, [pc, #668]	; (800168c <ProcessCommand+0x424>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	bf14      	ite	ne
 80013f6:	2301      	movne	r3, #1
 80013f8:	2300      	moveq	r3, #0
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	4619      	mov	r1, r3
 80013fe:	2001      	movs	r0, #1
 8001400:	f001 fcfc 	bl	8002dfc <Channel_Enable>
			break;
 8001404:	e191      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_enable_CH3:
			Channel_Enable(2, _command_value);
 8001406:	4ba1      	ldr	r3, [pc, #644]	; (800168c <ProcessCommand+0x424>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	bf14      	ite	ne
 800140e:	2301      	movne	r3, #1
 8001410:	2300      	moveq	r3, #0
 8001412:	b2db      	uxtb	r3, r3
 8001414:	4619      	mov	r1, r3
 8001416:	2002      	movs	r0, #2
 8001418:	f001 fcf0 	bl	8002dfc <Channel_Enable>
			break;
 800141c:	e185      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_output_CH1:
			Channel_Output(0, _command_value);
 800141e:	4b9b      	ldr	r3, [pc, #620]	; (800168c <ProcessCommand+0x424>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	bf14      	ite	ne
 8001426:	2301      	movne	r3, #1
 8001428:	2300      	moveq	r3, #0
 800142a:	b2db      	uxtb	r3, r3
 800142c:	4619      	mov	r1, r3
 800142e:	2000      	movs	r0, #0
 8001430:	f001 fde4 	bl	8002ffc <Channel_Output>
			break;
 8001434:	e179      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_output_CH2:
			Channel_Output(1, _command_value);
 8001436:	4b95      	ldr	r3, [pc, #596]	; (800168c <ProcessCommand+0x424>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	bf14      	ite	ne
 800143e:	2301      	movne	r3, #1
 8001440:	2300      	moveq	r3, #0
 8001442:	b2db      	uxtb	r3, r3
 8001444:	4619      	mov	r1, r3
 8001446:	2001      	movs	r0, #1
 8001448:	f001 fdd8 	bl	8002ffc <Channel_Output>
			break;
 800144c:	e16d      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_output_CH3:
			Channel_Output(2, _command_value);
 800144e:	4b8f      	ldr	r3, [pc, #572]	; (800168c <ProcessCommand+0x424>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	bf14      	ite	ne
 8001456:	2301      	movne	r3, #1
 8001458:	2300      	moveq	r3, #0
 800145a:	b2db      	uxtb	r3, r3
 800145c:	4619      	mov	r1, r3
 800145e:	2002      	movs	r0, #2
 8001460:	f001 fdcc 	bl	8002ffc <Channel_Output>
			break;
 8001464:	e161      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_set_voltage_CH1:
			Set_Voltage(0, _command_value);
 8001466:	4b89      	ldr	r3, [pc, #548]	; (800168c <ProcessCommand+0x424>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	b29b      	uxth	r3, r3
 800146c:	4619      	mov	r1, r3
 800146e:	2000      	movs	r0, #0
 8001470:	f001 fadc 	bl	8002a2c <Set_Voltage>
			break;
 8001474:	e159      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_set_voltage_CH2:
			Set_Voltage(1, _command_value);
 8001476:	4b85      	ldr	r3, [pc, #532]	; (800168c <ProcessCommand+0x424>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	b29b      	uxth	r3, r3
 800147c:	4619      	mov	r1, r3
 800147e:	2001      	movs	r0, #1
 8001480:	f001 fad4 	bl	8002a2c <Set_Voltage>
			break;
 8001484:	e151      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_set_voltage_CH3:
			Set_Voltage(2, _command_value);
 8001486:	4b81      	ldr	r3, [pc, #516]	; (800168c <ProcessCommand+0x424>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4619      	mov	r1, r3
 800148e:	2002      	movs	r0, #2
 8001490:	f001 facc 	bl	8002a2c <Set_Voltage>
			break;
 8001494:	e149      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_polarity_CH1:
			if(_command_value == 1)Channel_Polarity(0, polarity_positive);
 8001496:	4b7d      	ldr	r3, [pc, #500]	; (800168c <ProcessCommand+0x424>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d104      	bne.n	80014a8 <ProcessCommand+0x240>
 800149e:	2100      	movs	r1, #0
 80014a0:	2000      	movs	r0, #0
 80014a2:	f001 fd3d 	bl	8002f20 <Channel_Polarity>
			else if (_command_value == 2)Channel_Polarity(0, polarity_negative);
			break;
 80014a6:	e13b      	b.n	8001720 <ProcessCommand+0x4b8>
			else if (_command_value == 2)Channel_Polarity(0, polarity_negative);
 80014a8:	4b78      	ldr	r3, [pc, #480]	; (800168c <ProcessCommand+0x424>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	f040 8137 	bne.w	8001720 <ProcessCommand+0x4b8>
 80014b2:	2101      	movs	r1, #1
 80014b4:	2000      	movs	r0, #0
 80014b6:	f001 fd33 	bl	8002f20 <Channel_Polarity>
			break;
 80014ba:	e131      	b.n	8001720 <ProcessCommand+0x4b8>

		case cmd_polarity_CH2:
			if(_command_value == 1)Channel_Polarity(1, polarity_positive);
 80014bc:	4b73      	ldr	r3, [pc, #460]	; (800168c <ProcessCommand+0x424>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d104      	bne.n	80014ce <ProcessCommand+0x266>
 80014c4:	2100      	movs	r1, #0
 80014c6:	2001      	movs	r0, #1
 80014c8:	f001 fd2a 	bl	8002f20 <Channel_Polarity>
			else if (_command_value == 2)Channel_Polarity(1, polarity_negative);
			break;
 80014cc:	e12a      	b.n	8001724 <ProcessCommand+0x4bc>
			else if (_command_value == 2)Channel_Polarity(1, polarity_negative);
 80014ce:	4b6f      	ldr	r3, [pc, #444]	; (800168c <ProcessCommand+0x424>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	f040 8126 	bne.w	8001724 <ProcessCommand+0x4bc>
 80014d8:	2101      	movs	r1, #1
 80014da:	2001      	movs	r0, #1
 80014dc:	f001 fd20 	bl	8002f20 <Channel_Polarity>
			break;
 80014e0:	e120      	b.n	8001724 <ProcessCommand+0x4bc>

		case cmd_polarity_CH3:
			if(_command_value == 1)Channel_Polarity(2, polarity_positive);
 80014e2:	4b6a      	ldr	r3, [pc, #424]	; (800168c <ProcessCommand+0x424>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d104      	bne.n	80014f4 <ProcessCommand+0x28c>
 80014ea:	2100      	movs	r1, #0
 80014ec:	2002      	movs	r0, #2
 80014ee:	f001 fd17 	bl	8002f20 <Channel_Polarity>
			else if (_command_value == 2)Channel_Polarity(2, polarity_negative);
			break;
 80014f2:	e119      	b.n	8001728 <ProcessCommand+0x4c0>
			else if (_command_value == 2)Channel_Polarity(2, polarity_negative);
 80014f4:	4b65      	ldr	r3, [pc, #404]	; (800168c <ProcessCommand+0x424>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	f040 8115 	bne.w	8001728 <ProcessCommand+0x4c0>
 80014fe:	2101      	movs	r1, #1
 8001500:	2002      	movs	r0, #2
 8001502:	f001 fd0d 	bl	8002f20 <Channel_Polarity>
			break;
 8001506:	e10f      	b.n	8001728 <ProcessCommand+0x4c0>

		case cmd_getsetting:
			Get_Setting();
 8001508:	f001 ff3c 	bl	8003384 <Get_Setting>
			break;
 800150c:	e10d      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_LED:
			LedSwitch(_command_value);
 800150e:	4b5f      	ldr	r3, [pc, #380]	; (800168c <ProcessCommand+0x424>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f001 f83a 	bl	800258c <LedSwitch>
			break;
 8001518:	e107      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_getallvalues:
			Get_AllMeasurement();
 800151a:	f001 ff1b 	bl	8003354 <Get_AllMeasurement>
			//ErrorWatching();
			break;
 800151e:	e104      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_error_signals:
			Get_ErrorSignals();
 8001520:	f001 fed0 	bl	80032c4 <Get_ErrorSignals>
			break;
 8001524:	e101      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_ip_store_endpoint:
			ETH_udp_StoreEndpoint();
 8001526:	f002 fa79 	bl	8003a1c <ETH_udp_StoreEndpoint>
			break;
 800152a:	e0fe      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_ip_store_myip:
			ETH_StoreIP(_u32_command_value);
 800152c:	4b58      	ldr	r3, [pc, #352]	; (8001690 <ProcessCommand+0x428>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f002 f926 	bl	8003782 <ETH_StoreIP>
			break;
 8001536:	e0f8      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_ip_store_mymask:
			ETH_StoreNETMASK(_u32_command_value);
 8001538:	4b55      	ldr	r3, [pc, #340]	; (8001690 <ProcessCommand+0x428>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f002 f930 	bl	80037a2 <ETH_StoreNETMASK>
			break;
 8001542:	e0f2      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_ip_store_mygatew:
			ETH_StoreGATEWAY(_u32_command_value);
 8001544:	4b52      	ldr	r3, [pc, #328]	; (8001690 <ProcessCommand+0x428>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f002 f93a 	bl	80037c2 <ETH_StoreGATEWAY>
			break;
 800154e:	e0ec      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_ip_getsetting:
			ETH_SendSetting();
 8001550:	f002 fa0f 	bl	8003972 <ETH_SendSetting>
			break;
 8001554:	e0e9      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_adc_set_k0:
			StoreADCConstant(0, _float_command_value);
 8001556:	4b4f      	ldr	r3, [pc, #316]	; (8001694 <ProcessCommand+0x42c>)
 8001558:	edd3 7a00 	vldr	s15, [r3]
 800155c:	eeb0 0a67 	vmov.f32	s0, s15
 8001560:	2000      	movs	r0, #0
 8001562:	f000 fed7 	bl	8002314 <StoreADCConstant>
			break;
 8001566:	e0e0      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_adc_set_k1:
			StoreADCConstant(1, _float_command_value);
 8001568:	4b4a      	ldr	r3, [pc, #296]	; (8001694 <ProcessCommand+0x42c>)
 800156a:	edd3 7a00 	vldr	s15, [r3]
 800156e:	eeb0 0a67 	vmov.f32	s0, s15
 8001572:	2001      	movs	r0, #1
 8001574:	f000 fece 	bl	8002314 <StoreADCConstant>
			break;
 8001578:	e0d7      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_adc_set_k2:
			StoreADCConstant(2, _float_command_value);
 800157a:	4b46      	ldr	r3, [pc, #280]	; (8001694 <ProcessCommand+0x42c>)
 800157c:	edd3 7a00 	vldr	s15, [r3]
 8001580:	eeb0 0a67 	vmov.f32	s0, s15
 8001584:	2002      	movs	r0, #2
 8001586:	f000 fec5 	bl	8002314 <StoreADCConstant>
			break;
 800158a:	e0ce      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_adc_set_k3:
			StoreADCConstant(3, _float_command_value);
 800158c:	4b41      	ldr	r3, [pc, #260]	; (8001694 <ProcessCommand+0x42c>)
 800158e:	edd3 7a00 	vldr	s15, [r3]
 8001592:	eeb0 0a67 	vmov.f32	s0, s15
 8001596:	2003      	movs	r0, #3
 8001598:	f000 febc 	bl	8002314 <StoreADCConstant>
			break;
 800159c:	e0c5      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_adc_set_k4:
			StoreADCConstant(4, _float_command_value);
 800159e:	4b3d      	ldr	r3, [pc, #244]	; (8001694 <ProcessCommand+0x42c>)
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	eeb0 0a67 	vmov.f32	s0, s15
 80015a8:	2004      	movs	r0, #4
 80015aa:	f000 feb3 	bl	8002314 <StoreADCConstant>
			break;
 80015ae:	e0bc      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_adc_set_k5:
			StoreADCConstant(5, _float_command_value);
 80015b0:	4b38      	ldr	r3, [pc, #224]	; (8001694 <ProcessCommand+0x42c>)
 80015b2:	edd3 7a00 	vldr	s15, [r3]
 80015b6:	eeb0 0a67 	vmov.f32	s0, s15
 80015ba:	2005      	movs	r0, #5
 80015bc:	f000 feaa 	bl	8002314 <StoreADCConstant>
			break;
 80015c0:	e0b3      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_adc_set_q0:
			StoreADCConstant(6, _float_command_value);
 80015c2:	4b34      	ldr	r3, [pc, #208]	; (8001694 <ProcessCommand+0x42c>)
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	eeb0 0a67 	vmov.f32	s0, s15
 80015cc:	2006      	movs	r0, #6
 80015ce:	f000 fea1 	bl	8002314 <StoreADCConstant>
			break;
 80015d2:	e0aa      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_adc_set_q1:
			StoreADCConstant(7, _float_command_value);
 80015d4:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <ProcessCommand+0x42c>)
 80015d6:	edd3 7a00 	vldr	s15, [r3]
 80015da:	eeb0 0a67 	vmov.f32	s0, s15
 80015de:	2007      	movs	r0, #7
 80015e0:	f000 fe98 	bl	8002314 <StoreADCConstant>
			break;
 80015e4:	e0a1      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_adc_set_q2:
			StoreADCConstant(8, _float_command_value);
 80015e6:	4b2b      	ldr	r3, [pc, #172]	; (8001694 <ProcessCommand+0x42c>)
 80015e8:	edd3 7a00 	vldr	s15, [r3]
 80015ec:	eeb0 0a67 	vmov.f32	s0, s15
 80015f0:	2008      	movs	r0, #8
 80015f2:	f000 fe8f 	bl	8002314 <StoreADCConstant>
			break;
 80015f6:	e098      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_adc_set_q3:
			StoreADCConstant(9, _float_command_value);
 80015f8:	4b26      	ldr	r3, [pc, #152]	; (8001694 <ProcessCommand+0x42c>)
 80015fa:	edd3 7a00 	vldr	s15, [r3]
 80015fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001602:	2009      	movs	r0, #9
 8001604:	f000 fe86 	bl	8002314 <StoreADCConstant>
			break;
 8001608:	e08f      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_adc_set_q4:
			StoreADCConstant(10, _float_command_value);
 800160a:	4b22      	ldr	r3, [pc, #136]	; (8001694 <ProcessCommand+0x42c>)
 800160c:	edd3 7a00 	vldr	s15, [r3]
 8001610:	eeb0 0a67 	vmov.f32	s0, s15
 8001614:	200a      	movs	r0, #10
 8001616:	f000 fe7d 	bl	8002314 <StoreADCConstant>
			break;
 800161a:	e086      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_adc_set_q5:
			StoreADCConstant(11, _float_command_value);
 800161c:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <ProcessCommand+0x42c>)
 800161e:	edd3 7a00 	vldr	s15, [r3]
 8001622:	eeb0 0a67 	vmov.f32	s0, s15
 8001626:	200b      	movs	r0, #11
 8001628:	f000 fe74 	bl	8002314 <StoreADCConstant>
			break;
 800162c:	e07d      	b.n	800172a <ProcessCommand+0x4c2>


		case cmd_dac_set_k0:
			StoreDACConstant(0, _float_command_value);
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <ProcessCommand+0x42c>)
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	eeb0 0a67 	vmov.f32	s0, s15
 8001638:	2000      	movs	r0, #0
 800163a:	f001 f881 	bl	8002740 <StoreDACConstant>
			break;
 800163e:	e074      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_dac_set_k1:
			StoreDACConstant(1, _float_command_value);
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <ProcessCommand+0x42c>)
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	eeb0 0a67 	vmov.f32	s0, s15
 800164a:	2001      	movs	r0, #1
 800164c:	f001 f878 	bl	8002740 <StoreDACConstant>
			break;
 8001650:	e06b      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_dac_set_k2:
			StoreDACConstant(2, _float_command_value);
 8001652:	4b10      	ldr	r3, [pc, #64]	; (8001694 <ProcessCommand+0x42c>)
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	eeb0 0a67 	vmov.f32	s0, s15
 800165c:	2002      	movs	r0, #2
 800165e:	f001 f86f 	bl	8002740 <StoreDACConstant>
			break;
 8001662:	e062      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_dac_set_q0:
			StoreDACConstant(3, _float_command_value);
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <ProcessCommand+0x42c>)
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	eeb0 0a67 	vmov.f32	s0, s15
 800166e:	2003      	movs	r0, #3
 8001670:	f001 f866 	bl	8002740 <StoreDACConstant>
			break;
 8001674:	e059      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_dac_set_q1:
			StoreDACConstant(4, _float_command_value);
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <ProcessCommand+0x42c>)
 8001678:	edd3 7a00 	vldr	s15, [r3]
 800167c:	eeb0 0a67 	vmov.f32	s0, s15
 8001680:	2004      	movs	r0, #4
 8001682:	f001 f85d 	bl	8002740 <StoreDACConstant>
			break;
 8001686:	e050      	b.n	800172a <ProcessCommand+0x4c2>
 8001688:	200002b9 	.word	0x200002b9
 800168c:	200002ac 	.word	0x200002ac
 8001690:	200002b4 	.word	0x200002b4
 8001694:	200002b0 	.word	0x200002b0

		case cmd_dac_set_q2:
			StoreDACConstant(5, _float_command_value);
 8001698:	4b26      	ldr	r3, [pc, #152]	; (8001734 <ProcessCommand+0x4cc>)
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	eeb0 0a67 	vmov.f32	s0, s15
 80016a2:	2005      	movs	r0, #5
 80016a4:	f001 f84c 	bl	8002740 <StoreDACConstant>
			break;
 80016a8:	e03f      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_adc_getallcoef:
			SendADCCoefficients();
 80016aa:	f000 fe4b 	bl	8002344 <SendADCCoefficients>
			break;
 80016ae:	e03c      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_dac_getallcoef:
			SendDACCoefficients();
 80016b0:	f001 f896 	bl	80027e0 <SendDACCoefficients>
			break;
 80016b4:	e039      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_set_pre_reg_CH1: //debug
			Set_PreReg_Voltage(0, _command_value);
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <ProcessCommand+0x4d0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	4619      	mov	r1, r3
 80016be:	2000      	movs	r0, #0
 80016c0:	f001 f954 	bl	800296c <Set_PreReg_Voltage>
			break;
 80016c4:	e031      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_set_pre_reg_CH2: //debug
			Set_PreReg_Voltage(1, _command_value);
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <ProcessCommand+0x4d0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	4619      	mov	r1, r3
 80016ce:	2001      	movs	r0, #1
 80016d0:	f001 f94c 	bl	800296c <Set_PreReg_Voltage>
			break;
 80016d4:	e029      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_set_pre_reg_CH3: //debug
			Set_PreReg_Voltage(2, _command_value);
 80016d6:	4b18      	ldr	r3, [pc, #96]	; (8001738 <ProcessCommand+0x4d0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	4619      	mov	r1, r3
 80016de:	2002      	movs	r0, #2
 80016e0:	f001 f944 	bl	800296c <Set_PreReg_Voltage>
			break;
 80016e4:	e021      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_set_out_reg_CH1: //debug
			Set_OutReg_Voltage(0, _command_value);
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <ProcessCommand+0x4d0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	4619      	mov	r1, r3
 80016ee:	2000      	movs	r0, #0
 80016f0:	f001 f96a 	bl	80029c8 <Set_OutReg_Voltage>
			break;
 80016f4:	e019      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_set_out_reg_CH2: //debug
			Set_OutReg_Voltage(1, _command_value);
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <ProcessCommand+0x4d0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	4619      	mov	r1, r3
 80016fe:	2001      	movs	r0, #1
 8001700:	f001 f962 	bl	80029c8 <Set_OutReg_Voltage>
			break;
 8001704:	e011      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_set_out_reg_CH3: //debug
			Set_OutReg_Voltage(2, _command_value);
 8001706:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <ProcessCommand+0x4d0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	b29b      	uxth	r3, r3
 800170c:	4619      	mov	r1, r3
 800170e:	2002      	movs	r0, #2
 8001710:	f001 f95a 	bl	80029c8 <Set_OutReg_Voltage>
			break;
 8001714:	e009      	b.n	800172a <ProcessCommand+0x4c2>

		case cmd_reset:
			System_Reset();
 8001716:	f001 fe8f 	bl	8003438 <System_Reset>
			break;
 800171a:	e006      	b.n	800172a <ProcessCommand+0x4c2>

		default:
			break;
 800171c:	bf00      	nop
 800171e:	e004      	b.n	800172a <ProcessCommand+0x4c2>
			break;
 8001720:	bf00      	nop
 8001722:	e002      	b.n	800172a <ProcessCommand+0x4c2>
			break;
 8001724:	bf00      	nop
 8001726:	e000      	b.n	800172a <ProcessCommand+0x4c2>
			break;
 8001728:	bf00      	nop
	}
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200002b0 	.word	0x200002b0
 8001738:	200002ac 	.word	0x200002ac

0800173c <get_string_length>:
 * @param s -> pointer on string
 *
 * @return length of string
 */
int get_string_length(const char *s)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
    int len=0;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
    while (s[len] != 0)
 8001748:	e002      	b.n	8001750 <get_string_length+0x14>
    {
        len++;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	3301      	adds	r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
    while (s[len] != 0)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	4413      	add	r3, r2
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1f6      	bne.n	800174a <get_string_length+0xe>
    }

    return len;
 800175c:	68fb      	ldr	r3, [r7, #12]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3714      	adds	r7, #20
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <StringIsEqual>:
 *
 * @return true -> string is equal
 * @retuen false -> string is not equal
 */
bool StringIsEqual(const uint8_t *one, int one_start, int one_end, const uint8_t *two,int two_start, int two_end)
{
 800176a:	b480      	push	{r7}
 800176c:	b089      	sub	sp, #36	; 0x24
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
 8001776:	603b      	str	r3, [r7, #0]
	if(!((one_start >= 0) || (two_start >= 0) || (one_end >= 0) || (two_end >= 0))) return false; //start and stop must be equal or bigger than 0
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	da0a      	bge.n	8001794 <StringIsEqual+0x2a>
 800177e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001780:	2b00      	cmp	r3, #0
 8001782:	da07      	bge.n	8001794 <StringIsEqual+0x2a>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	da04      	bge.n	8001794 <StringIsEqual+0x2a>
 800178a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178c:	2b00      	cmp	r3, #0
 800178e:	da01      	bge.n	8001794 <StringIsEqual+0x2a>
 8001790:	2300      	movs	r3, #0
 8001792:	e02c      	b.n	80017ee <StringIsEqual+0x84>

	int one_length = one_end - one_start;
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	61bb      	str	r3, [r7, #24]
	int two_length = two_end - two_start;
 800179c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800179e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	617b      	str	r3, [r7, #20]

	if(!((one_length > 0) || (two_length > 0))) return false; //length must be bigger than 0
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	dc04      	bgt.n	80017b4 <StringIsEqual+0x4a>
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	dc01      	bgt.n	80017b4 <StringIsEqual+0x4a>
 80017b0:	2300      	movs	r3, #0
 80017b2:	e01c      	b.n	80017ee <StringIsEqual+0x84>
	if(!(one_length == two_length)) return false; //length of one and two must be equal
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d001      	beq.n	80017c0 <StringIsEqual+0x56>
 80017bc:	2300      	movs	r3, #0
 80017be:	e016      	b.n	80017ee <StringIsEqual+0x84>

	for(int i = 0;i < one_length; i++)
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
 80017c4:	e00e      	b.n	80017e4 <StringIsEqual+0x7a>
	{
		if(!(one[i] == two[i])) return false;
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	781a      	ldrb	r2, [r3, #0]
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	6839      	ldr	r1, [r7, #0]
 80017d2:	440b      	add	r3, r1
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d001      	beq.n	80017de <StringIsEqual+0x74>
 80017da:	2300      	movs	r3, #0
 80017dc:	e007      	b.n	80017ee <StringIsEqual+0x84>
	for(int i = 0;i < one_length; i++)
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3301      	adds	r3, #1
 80017e2:	61fb      	str	r3, [r7, #28]
 80017e4:	69fa      	ldr	r2, [r7, #28]
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	dbec      	blt.n	80017c6 <StringIsEqual+0x5c>
	}

	return true;
 80017ec:	2301      	movs	r3, #1
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	; 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <GetDelimiterPosition>:
 * @param character -> searched character
 *
 * @return position of searched character or -1 if character is not found
 */
int GetDelimiterPosition(const uint8_t *string, int length, uint8_t character)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b087      	sub	sp, #28
 80017fe:	af00      	add	r7, sp, #0
 8001800:	60f8      	str	r0, [r7, #12]
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	4613      	mov	r3, r2
 8001806:	71fb      	strb	r3, [r7, #7]
	for(int i = 0;i<length; i++)
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	e00b      	b.n	8001826 <GetDelimiterPosition+0x2c>
	{
		if(string[i] == character)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	79fa      	ldrb	r2, [r7, #7]
 8001818:	429a      	cmp	r2, r3
 800181a:	d101      	bne.n	8001820 <GetDelimiterPosition+0x26>
		{
			return i;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	e008      	b.n	8001832 <GetDelimiterPosition+0x38>
	for(int i = 0;i<length; i++)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	3301      	adds	r3, #1
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	429a      	cmp	r2, r3
 800182c:	dbef      	blt.n	800180e <GetDelimiterPosition+0x14>
		}
	}

	return -1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001832:	4618      	mov	r0, r3
 8001834:	371c      	adds	r7, #28
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <ProcessLine>:
 *
 * @return true -> correct processing
 * @return false -> wrong command
 */
bool ProcessLine(const uint8_t *Buffer, int legth)
{
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b08f      	sub	sp, #60	; 0x3c
 8001844:	af02      	add	r7, sp, #8
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
	int delim_position = GetDelimiterPosition(Buffer,legth,(uint8_t)'='); //position of delimiter =
 800184a:	223d      	movs	r2, #61	; 0x3d
 800184c:	6839      	ldr	r1, [r7, #0]
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ffd3 	bl	80017fa <GetDelimiterPosition>
 8001854:	6238      	str	r0, [r7, #32]
	if(delim_position == -1) return false; //delimiter not found
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800185c:	d101      	bne.n	8001862 <ProcessLine+0x22>
 800185e:	2300      	movs	r3, #0
 8001860:	e0e4      	b.n	8001a2c <ProcessLine+0x1ec>

	_command_id  = -1;
 8001862:	4b74      	ldr	r3, [pc, #464]	; (8001a34 <ProcessLine+0x1f4>)
 8001864:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001868:	601a      	str	r2, [r3, #0]

	_command_value = 0;
 800186a:	4b73      	ldr	r3, [pc, #460]	; (8001a38 <ProcessLine+0x1f8>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
	_float_command_value = 0;
 8001870:	4b72      	ldr	r3, [pc, #456]	; (8001a3c <ProcessLine+0x1fc>)
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
	_u32_command_value = 0;
 8001878:	4b71      	ldr	r3, [pc, #452]	; (8001a40 <ProcessLine+0x200>)
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]

	if(Buffer[0] == '/') //string start with "/"...command is convert from number
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b2f      	cmp	r3, #47	; 0x2f
 8001884:	d133      	bne.n	80018ee <ProcessLine+0xae>
	{
		uint8_t buffer_for_id[3] = {0}; //buffer for convert
 8001886:	4b6f      	ldr	r3, [pc, #444]	; (8001a44 <ProcessLine+0x204>)
 8001888:	881b      	ldrh	r3, [r3, #0]
 800188a:	81bb      	strh	r3, [r7, #12]
 800188c:	2300      	movs	r3, #0
 800188e:	73bb      	strb	r3, [r7, #14]

		for(int i = 1; i<(delim_position); i++ )
 8001890:	2301      	movs	r3, #1
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001894:	e019      	b.n	80018ca <ProcessLine+0x8a>
		{
			if(i > 3) break;// i bigger then buffer_for_id
 8001896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001898:	2b03      	cmp	r3, #3
 800189a:	dc1b      	bgt.n	80018d4 <ProcessLine+0x94>
			char c = Buffer[i]; //take character from Buffer
 800189c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	4413      	add	r3, r2
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	77fb      	strb	r3, [r7, #31]
			if(!(c >= '0' && c <= '9')) return false; //character is not number
 80018a6:	7ffb      	ldrb	r3, [r7, #31]
 80018a8:	2b2f      	cmp	r3, #47	; 0x2f
 80018aa:	d902      	bls.n	80018b2 <ProcessLine+0x72>
 80018ac:	7ffb      	ldrb	r3, [r7, #31]
 80018ae:	2b39      	cmp	r3, #57	; 0x39
 80018b0:	d901      	bls.n	80018b6 <ProcessLine+0x76>
 80018b2:	2300      	movs	r3, #0
 80018b4:	e0ba      	b.n	8001a2c <ProcessLine+0x1ec>
			buffer_for_id[i-1] = c;
 80018b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b8:	3b01      	subs	r3, #1
 80018ba:	3330      	adds	r3, #48	; 0x30
 80018bc:	443b      	add	r3, r7
 80018be:	7ffa      	ldrb	r2, [r7, #31]
 80018c0:	f803 2c24 	strb.w	r2, [r3, #-36]
		for(int i = 1; i<(delim_position); i++ )
 80018c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c6:	3301      	adds	r3, #1
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	dbe1      	blt.n	8001896 <ProcessLine+0x56>
 80018d2:	e000      	b.n	80018d6 <ProcessLine+0x96>
			if(i > 3) break;// i bigger then buffer_for_id
 80018d4:	bf00      	nop

		}
			_command_form = cform_short;
 80018d6:	4b5c      	ldr	r3, [pc, #368]	; (8001a48 <ProcessLine+0x208>)
 80018d8:	2201      	movs	r2, #1
 80018da:	701a      	strb	r2, [r3, #0]
			_command_id = atoi((char *)buffer_for_id); //convert string to int
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	4618      	mov	r0, r3
 80018e2:	f007 f8ee 	bl	8008ac2 <atoi>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4a52      	ldr	r2, [pc, #328]	; (8001a34 <ProcessLine+0x1f4>)
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	e02c      	b.n	8001948 <ProcessLine+0x108>
	}

	else //command not start with "/"
	{
		//search equal string in command_string table
		for(int i = 0;i<(sizeof(command_strings)/20); i++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80018f2:	e023      	b.n	800193c <ProcessLine+0xfc>
		{
			if(StringIsEqual(Buffer, 0, delim_position, (uint8_t *)command_strings[i], 0, get_string_length(command_strings[i])))
 80018f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	4a53      	ldr	r2, [pc, #332]	; (8001a4c <ProcessLine+0x20c>)
 8001900:	189c      	adds	r4, r3, r2
 8001902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4a4f      	ldr	r2, [pc, #316]	; (8001a4c <ProcessLine+0x20c>)
 800190e:	4413      	add	r3, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff13 	bl	800173c <get_string_length>
 8001916:	4603      	mov	r3, r0
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	2300      	movs	r3, #0
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	4623      	mov	r3, r4
 8001920:	6a3a      	ldr	r2, [r7, #32]
 8001922:	2100      	movs	r1, #0
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ff20 	bl	800176a <StringIsEqual>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <ProcessLine+0xf6>
			{
				_command_id  = i; //get command position
 8001930:	4a40      	ldr	r2, [pc, #256]	; (8001a34 <ProcessLine+0x1f4>)
 8001932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001934:	6013      	str	r3, [r2, #0]
		for(int i = 0;i<(sizeof(command_strings)/20); i++)
 8001936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001938:	3301      	adds	r3, #1
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
 800193c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193e:	2b4d      	cmp	r3, #77	; 0x4d
 8001940:	d9d8      	bls.n	80018f4 <ProcessLine+0xb4>
			}
		}
		_command_form = cform_full;
 8001942:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <ProcessLine+0x208>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
	}

	if(_command_id == -1) return false; //command not found
 8001948:	4b3a      	ldr	r3, [pc, #232]	; (8001a34 <ProcessLine+0x1f4>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001950:	d101      	bne.n	8001956 <ProcessLine+0x116>
 8001952:	2300      	movs	r3, #0
 8001954:	e06a      	b.n	8001a2c <ProcessLine+0x1ec>

	if(Command_parse[_command_id] == cparse_non) return true; //non parsing
 8001956:	4b37      	ldr	r3, [pc, #220]	; (8001a34 <ProcessLine+0x1f4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a3d      	ldr	r2, [pc, #244]	; (8001a50 <ProcessLine+0x210>)
 800195c:	5cd3      	ldrb	r3, [r2, r3]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <ProcessLine+0x126>
 8001962:	2301      	movs	r3, #1
 8001964:	e062      	b.n	8001a2c <ProcessLine+0x1ec>


	uint8_t buffer_for_number[12] = {0}; //buffer for convert
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]

	//take character to convert from Buffer
	for(int i = 0; i<(legth-delim_position-1); i++ )
 8001974:	2300      	movs	r3, #0
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
 8001978:	e021      	b.n	80019be <ProcessLine+0x17e>
	{
		if(i > 11) return false;// i bigger then buffer_for_int size
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	2b0b      	cmp	r3, #11
 800197e:	dd01      	ble.n	8001984 <ProcessLine+0x144>
 8001980:	2300      	movs	r3, #0
 8001982:	e053      	b.n	8001a2c <ProcessLine+0x1ec>
		char c = Buffer[delim_position+1+i]; //take character from Buffer
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	1c5a      	adds	r2, r3, #1
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	4413      	add	r3, r2
 800198c:	461a      	mov	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	77bb      	strb	r3, [r7, #30]
		if(!((c >= '0' && c <= '9') || c == '.')) return false; //character is not number
 8001996:	7fbb      	ldrb	r3, [r7, #30]
 8001998:	2b2f      	cmp	r3, #47	; 0x2f
 800199a:	d902      	bls.n	80019a2 <ProcessLine+0x162>
 800199c:	7fbb      	ldrb	r3, [r7, #30]
 800199e:	2b39      	cmp	r3, #57	; 0x39
 80019a0:	d904      	bls.n	80019ac <ProcessLine+0x16c>
 80019a2:	7fbb      	ldrb	r3, [r7, #30]
 80019a4:	2b2e      	cmp	r3, #46	; 0x2e
 80019a6:	d001      	beq.n	80019ac <ProcessLine+0x16c>
 80019a8:	2300      	movs	r3, #0
 80019aa:	e03f      	b.n	8001a2c <ProcessLine+0x1ec>
		buffer_for_number[i] = c;
 80019ac:	f107 0210 	add.w	r2, r7, #16
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	4413      	add	r3, r2
 80019b4:	7fba      	ldrb	r2, [r7, #30]
 80019b6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<(legth-delim_position-1); i++ )
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	3301      	adds	r3, #1
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	3b01      	subs	r3, #1
 80019c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c8:	429a      	cmp	r2, r3
 80019ca:	dbd6      	blt.n	800197a <ProcessLine+0x13a>
	}

	//convert buffer to number according to Command_parse
	if(Command_parse[_command_id] == cparse_int)
 80019cc:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <ProcessLine+0x1f4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1f      	ldr	r2, [pc, #124]	; (8001a50 <ProcessLine+0x210>)
 80019d2:	5cd3      	ldrb	r3, [r2, r3]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d108      	bne.n	80019ea <ProcessLine+0x1aa>
	{
		_command_value = atoi((char *)buffer_for_number); //convert string to int
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	4618      	mov	r0, r3
 80019de:	f007 f870 	bl	8008ac2 <atoi>
 80019e2:	4603      	mov	r3, r0
 80019e4:	4a14      	ldr	r2, [pc, #80]	; (8001a38 <ProcessLine+0x1f8>)
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	e01f      	b.n	8001a2a <ProcessLine+0x1ea>
	}
	else if(Command_parse[_command_id] == cparse_float)
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <ProcessLine+0x1f4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a18      	ldr	r2, [pc, #96]	; (8001a50 <ProcessLine+0x210>)
 80019f0:	5cd3      	ldrb	r3, [r2, r3]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d10a      	bne.n	8001a0c <ProcessLine+0x1cc>
	{
		_float_command_value = atoff((char *)buffer_for_number); //convert string to float
 80019f6:	f107 0310 	add.w	r3, r7, #16
 80019fa:	4618      	mov	r0, r3
 80019fc:	f007 f85e 	bl	8008abc <atoff>
 8001a00:	eef0 7a40 	vmov.f32	s15, s0
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <ProcessLine+0x1fc>)
 8001a06:	edc3 7a00 	vstr	s15, [r3]
 8001a0a:	e00e      	b.n	8001a2a <ProcessLine+0x1ea>
	}
	else if(Command_parse[_command_id] == cparse_u32t)
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <ProcessLine+0x1f4>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <ProcessLine+0x210>)
 8001a12:	5cd3      	ldrb	r3, [r2, r3]
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d108      	bne.n	8001a2a <ProcessLine+0x1ea>
	{
		_u32_command_value = (uint32_t)atoll((char *)buffer_for_number); //convert string to uint32_t
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f007 f854 	bl	8008aca <atoll>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <ProcessLine+0x200>)
 8001a28:	601a      	str	r2, [r3, #0]
	}


	return true;
 8001a2a:	2301      	movs	r3, #1
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3734      	adds	r7, #52	; 0x34
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd90      	pop	{r4, r7, pc}
 8001a34:	200002a8 	.word	0x200002a8
 8001a38:	200002ac 	.word	0x200002ac
 8001a3c:	200002b0 	.word	0x200002b0
 8001a40:	200002b4 	.word	0x200002b4
 8001a44:	0800d210 	.word	0x0800d210
 8001a48:	200002b8 	.word	0x200002b8
 8001a4c:	0800d25c 	.word	0x0800d25c
 8001a50:	20000000 	.word	0x20000000

08001a54 <ProcessCommunication_UART>:
 *
 * @return true -> correct processing
 * @return false -> wrong command or not found new line
 */
bool ProcessCommunication_UART()
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b094      	sub	sp, #80	; 0x50
 8001a58:	af00      	add	r7, sp, #0
	if(!Uart_BufferNotEmpty()) return false;
 8001a5a:	f002 f871 	bl	8003b40 <Uart_BufferNotEmpty>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f083 0301 	eor.w	r3, r3, #1
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <ProcessCommunication_UART+0x1a>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e05a      	b.n	8001b24 <ProcessCommunication_UART+0xd0>

	uint8_t line_buffer[64] = {0};
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	f107 0308 	add.w	r3, r7, #8
 8001a76:	223c      	movs	r2, #60	; 0x3c
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f007 f86a 	bl	8008b54 <memset>
	uint8_t line_counter = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	uint32_t timeout_timer = HAL_GetTick();
 8001a86:	f002 ffab 	bl	80049e0 <HAL_GetTick>
 8001a8a:	64b8      	str	r0, [r7, #72]	; 0x48

	while(true)
	{
		if((HAL_GetTick() - timeout_timer) >= 50) return false;
 8001a8c:	f002 ffa8 	bl	80049e0 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b31      	cmp	r3, #49	; 0x31
 8001a98:	d901      	bls.n	8001a9e <ProcessCommunication_UART+0x4a>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e042      	b.n	8001b24 <ProcessCommunication_UART+0xd0>
		if(!Uart_BufferNotEmpty()) continue;
 8001a9e:	f002 f84f 	bl	8003b40 <Uart_BufferNotEmpty>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f083 0301 	eor.w	r3, r3, #1
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d138      	bne.n	8001b20 <ProcessCommunication_UART+0xcc>

		uint8_t data = Uart_ReadBuffer();
 8001aae:	f002 f889 	bl	8003bc4 <Uart_ReadBuffer>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

		if(data == '\n' || data == '\r')
 8001ab8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001abc:	2b0a      	cmp	r3, #10
 8001abe:	d003      	beq.n	8001ac8 <ProcessCommunication_UART+0x74>
 8001ac0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ac4:	2b0d      	cmp	r3, #13
 8001ac6:	d118      	bne.n	8001afa <ProcessCommunication_UART+0xa6>
		{
			if(line_counter == 0) return false;
 8001ac8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <ProcessCommunication_UART+0x80>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	e027      	b.n	8001b24 <ProcessCommunication_UART+0xd0>

			bool b = ProcessLine(line_buffer, line_counter);
 8001ad4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff feaf 	bl	8001840 <ProcessLine>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

			line_counter = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			_command_source = csource_UART;
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <ProcessCommunication_UART+0xd8>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]
			return b;
 8001af4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001af8:	e014      	b.n	8001b24 <ProcessCommunication_UART+0xd0>
		}
		else
		{
			line_buffer[line_counter] = data;
 8001afa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001afe:	3350      	adds	r3, #80	; 0x50
 8001b00:	443b      	add	r3, r7
 8001b02:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001b06:	f803 2c4c 	strb.w	r2, [r3, #-76]
			line_counter++;
 8001b0a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b0e:	3301      	adds	r3, #1
 8001b10:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			if(line_counter > (sizeof(line_buffer)-1)) return false;
 8001b14:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001b18:	2b3f      	cmp	r3, #63	; 0x3f
 8001b1a:	d9b7      	bls.n	8001a8c <ProcessCommunication_UART+0x38>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	e001      	b.n	8001b24 <ProcessCommunication_UART+0xd0>
		if(!Uart_BufferNotEmpty()) continue;
 8001b20:	bf00      	nop
	{
 8001b22:	e7b3      	b.n	8001a8c <ProcessCommunication_UART+0x38>
		}
	}
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3750      	adds	r7, #80	; 0x50
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	200002b9 	.word	0x200002b9

08001b30 <ProcessCommunication_ETH>:
 *
 * @return true -> correct processing
 * @return false -> wrong command or not found new line
 */
bool ProcessCommunication_ETH()
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b094      	sub	sp, #80	; 0x50
 8001b34:	af00      	add	r7, sp, #0
	if(!ETH_BufferNotEmpty()) return false;
 8001b36:	f000 fadb 	bl	80020f0 <ETH_BufferNotEmpty>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f083 0301 	eor.w	r3, r3, #1
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <ProcessCommunication_ETH+0x1a>
 8001b46:	2300      	movs	r3, #0
 8001b48:	e054      	b.n	8001bf4 <ProcessCommunication_ETH+0xc4>

	uint8_t line_buffer[64] = {0};
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	f107 0308 	add.w	r3, r7, #8
 8001b52:	223c      	movs	r2, #60	; 0x3c
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f006 fffc 	bl	8008b54 <memset>
	uint8_t line_counter = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	uint32_t timeout_timer = HAL_GetTick();
 8001b62:	f002 ff3d 	bl	80049e0 <HAL_GetTick>
 8001b66:	64b8      	str	r0, [r7, #72]	; 0x48

	while(true)
	{
		if((HAL_GetTick()-timeout_timer) >= 50) return false;
 8001b68:	f002 ff3a 	bl	80049e0 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b31      	cmp	r3, #49	; 0x31
 8001b74:	d901      	bls.n	8001b7a <ProcessCommunication_ETH+0x4a>
 8001b76:	2300      	movs	r3, #0
 8001b78:	e03c      	b.n	8001bf4 <ProcessCommunication_ETH+0xc4>
		if(!ETH_BufferNotEmpty()) continue;
 8001b7a:	f000 fab9 	bl	80020f0 <ETH_BufferNotEmpty>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f083 0301 	eor.w	r3, r3, #1
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d132      	bne.n	8001bf0 <ProcessCommunication_ETH+0xc0>

		uint8_t data = ETH_ReadBuffer();
 8001b8a:	f000 faff 	bl	800218c <ETH_ReadBuffer>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

		if(data == '\n' || data == '\r')
 8001b94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001b98:	2b0a      	cmp	r3, #10
 8001b9a:	d003      	beq.n	8001ba4 <ProcessCommunication_ETH+0x74>
 8001b9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ba0:	2b0d      	cmp	r3, #13
 8001ba2:	d112      	bne.n	8001bca <ProcessCommunication_ETH+0x9a>
		{
			bool b = ProcessLine(line_buffer, line_counter);
 8001ba4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fe47 	bl	8001840 <ProcessLine>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

			line_counter = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			_command_source = csource_ETH;
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <ProcessCommunication_ETH+0xcc>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	701a      	strb	r2, [r3, #0]
			return b;
 8001bc4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001bc8:	e014      	b.n	8001bf4 <ProcessCommunication_ETH+0xc4>
		}
		else
		{
			line_buffer[line_counter] = data;
 8001bca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001bce:	3350      	adds	r3, #80	; 0x50
 8001bd0:	443b      	add	r3, r7
 8001bd2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001bd6:	f803 2c4c 	strb.w	r2, [r3, #-76]
			line_counter++;
 8001bda:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001bde:	3301      	adds	r3, #1
 8001be0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			if(line_counter > (sizeof(line_buffer)-1)) return false;
 8001be4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001be8:	2b3f      	cmp	r3, #63	; 0x3f
 8001bea:	d9bd      	bls.n	8001b68 <ProcessCommunication_ETH+0x38>
 8001bec:	2300      	movs	r3, #0
 8001bee:	e001      	b.n	8001bf4 <ProcessCommunication_ETH+0xc4>
		if(!ETH_BufferNotEmpty()) continue;
 8001bf0:	bf00      	nop
	{
 8001bf2:	e7b9      	b.n	8001b68 <ProcessCommunication_ETH+0x38>
		}
	}
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3750      	adds	r7, #80	; 0x50
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	200002b9 	.word	0x200002b9

08001c00 <SendCommunication>:
 * @param command_id -> number of data command
 * @param data -> data to be transmitted
 *
 */
void SendCommunication(eCommand_Id command_id, int data)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08c      	sub	sp, #48	; 0x30
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	71fb      	strb	r3, [r7, #7]
	char sprint_buffer[32];
	uint8_t size = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(_command_form == cform_full)
 8001c12:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <SendCommunication+0x98>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d110      	bne.n	8001c3c <SendCommunication+0x3c>
	{
		size = sprintf(sprint_buffer,"%s=%d\r\n",command_strings[command_id],data);
 8001c1a:	79fa      	ldrb	r2, [r7, #7]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4a1d      	ldr	r2, [pc, #116]	; (8001c9c <SendCommunication+0x9c>)
 8001c26:	441a      	add	r2, r3
 8001c28:	f107 000c 	add.w	r0, r7, #12
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	491c      	ldr	r1, [pc, #112]	; (8001ca0 <SendCommunication+0xa0>)
 8001c30:	f007 fcf2 	bl	8009618 <siprintf>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001c3a:	e00d      	b.n	8001c58 <SendCommunication+0x58>
	}
	else if(_command_form == cform_short)
 8001c3c:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <SendCommunication+0x98>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d109      	bne.n	8001c58 <SendCommunication+0x58>
	{
		size = sprintf(sprint_buffer,"/%d=%d\r\n",(int)command_id,data);
 8001c44:	79fa      	ldrb	r2, [r7, #7]
 8001c46:	f107 000c 	add.w	r0, r7, #12
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	4915      	ldr	r1, [pc, #84]	; (8001ca4 <SendCommunication+0xa4>)
 8001c4e:	f007 fce3 	bl	8009618 <siprintf>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if(_command_source == csource_UART)
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <SendCommunication+0xa8>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d109      	bne.n	8001c74 <SendCommunication+0x74>
	{
		Uart_Send(sprint_buffer, size);
 8001c60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	f107 030c 	add.w	r3, r7, #12
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f001 ffd3 	bl	8003c18 <Uart_Send>
	else if(_command_source == csource_ETH)
	{
		ETH_Send(sprint_buffer, size);
	}

}
 8001c72:	e00c      	b.n	8001c8e <SendCommunication+0x8e>
	else if(_command_source == csource_ETH)
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <SendCommunication+0xa8>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d108      	bne.n	8001c8e <SendCommunication+0x8e>
		ETH_Send(sprint_buffer, size);
 8001c7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 faa9 	bl	80021e0 <ETH_Send>
}
 8001c8e:	bf00      	nop
 8001c90:	3730      	adds	r7, #48	; 0x30
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200002b8 	.word	0x200002b8
 8001c9c:	0800d25c 	.word	0x0800d25c
 8001ca0:	0800d214 	.word	0x0800d214
 8001ca4:	0800d21c 	.word	0x0800d21c
 8001ca8:	200002b9 	.word	0x200002b9

08001cac <SendCommunication_float>:
 * @param command_id -> number of data command
 * @param data -> data to be transmitted
 *
 */
void SendCommunication_float(eCommand_Id command_id, float data)
{
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b08f      	sub	sp, #60	; 0x3c
 8001cb0:	af02      	add	r7, sp, #8
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	ed87 0a00 	vstr	s0, [r7]
 8001cb8:	71fb      	strb	r3, [r7, #7]
	char sprint_buffer[32];
	uint8_t size = 0;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(_command_form == cform_full)
 8001cc0:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <SendCommunication_float+0xb4>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d117      	bne.n	8001cf8 <SendCommunication_float+0x4c>
	{
		size = sprintf(sprint_buffer,"%s=%f\r\n",command_strings[command_id],data);
 8001cc8:	79fa      	ldrb	r2, [r7, #7]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4a24      	ldr	r2, [pc, #144]	; (8001d64 <SendCommunication_float+0xb8>)
 8001cd4:	189c      	adds	r4, r3, r2
 8001cd6:	6838      	ldr	r0, [r7, #0]
 8001cd8:	f7fe fc3e 	bl	8000558 <__aeabi_f2d>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	f107 000c 	add.w	r0, r7, #12
 8001ce4:	e9cd 2300 	strd	r2, r3, [sp]
 8001ce8:	4622      	mov	r2, r4
 8001cea:	491f      	ldr	r1, [pc, #124]	; (8001d68 <SendCommunication_float+0xbc>)
 8001cec:	f007 fc94 	bl	8009618 <siprintf>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001cf6:	e014      	b.n	8001d22 <SendCommunication_float+0x76>
	}
	else if(_command_form == cform_short)
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <SendCommunication_float+0xb4>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d110      	bne.n	8001d22 <SendCommunication_float+0x76>
	{
		size = sprintf(sprint_buffer,"/%d=%f\r\n",(int)command_id,data);
 8001d00:	79fc      	ldrb	r4, [r7, #7]
 8001d02:	6838      	ldr	r0, [r7, #0]
 8001d04:	f7fe fc28 	bl	8000558 <__aeabi_f2d>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	f107 000c 	add.w	r0, r7, #12
 8001d10:	e9cd 2300 	strd	r2, r3, [sp]
 8001d14:	4622      	mov	r2, r4
 8001d16:	4915      	ldr	r1, [pc, #84]	; (8001d6c <SendCommunication_float+0xc0>)
 8001d18:	f007 fc7e 	bl	8009618 <siprintf>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if(_command_source == csource_UART)
 8001d22:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <SendCommunication_float+0xc4>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d109      	bne.n	8001d3e <SendCommunication_float+0x92>
	{
		Uart_Send(sprint_buffer, size);
 8001d2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	f107 030c 	add.w	r3, r7, #12
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f001 ff6e 	bl	8003c18 <Uart_Send>
	else if(_command_source == csource_ETH)
	{
		ETH_Send(sprint_buffer, size);
	}

}
 8001d3c:	e00c      	b.n	8001d58 <SendCommunication_float+0xac>
	else if(_command_source == csource_ETH)
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <SendCommunication_float+0xc4>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d108      	bne.n	8001d58 <SendCommunication_float+0xac>
		ETH_Send(sprint_buffer, size);
 8001d46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f000 fa44 	bl	80021e0 <ETH_Send>
}
 8001d58:	bf00      	nop
 8001d5a:	3734      	adds	r7, #52	; 0x34
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd90      	pop	{r4, r7, pc}
 8001d60:	200002b8 	.word	0x200002b8
 8001d64:	0800d25c 	.word	0x0800d25c
 8001d68:	0800d228 	.word	0x0800d228
 8001d6c:	0800d230 	.word	0x0800d230
 8001d70:	200002b9 	.word	0x200002b9

08001d74 <SendCommunication_u32>:
 * @param command_id -> number of data command
 * @param data -> data to be transmitted
 *
 */
void SendCommunication_u32(eCommand_Id command_id, uint32_t data)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08c      	sub	sp, #48	; 0x30
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6039      	str	r1, [r7, #0]
 8001d7e:	71fb      	strb	r3, [r7, #7]
	char sprint_buffer[32];
	uint8_t size = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(_command_form == cform_full)
 8001d86:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <SendCommunication_u32+0x98>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d110      	bne.n	8001db0 <SendCommunication_u32+0x3c>
	{
		size = sprintf(sprint_buffer,"%s=%lu\r\n",command_strings[command_id],data);
 8001d8e:	79fa      	ldrb	r2, [r7, #7]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	4a1d      	ldr	r2, [pc, #116]	; (8001e10 <SendCommunication_u32+0x9c>)
 8001d9a:	441a      	add	r2, r3
 8001d9c:	f107 000c 	add.w	r0, r7, #12
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	491c      	ldr	r1, [pc, #112]	; (8001e14 <SendCommunication_u32+0xa0>)
 8001da4:	f007 fc38 	bl	8009618 <siprintf>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001dae:	e00d      	b.n	8001dcc <SendCommunication_u32+0x58>
	}
	else if(_command_form == cform_short)
 8001db0:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <SendCommunication_u32+0x98>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d109      	bne.n	8001dcc <SendCommunication_u32+0x58>
	{
		size = sprintf(sprint_buffer,"/%d=%lu\r\n",(int)command_id,data);
 8001db8:	79fa      	ldrb	r2, [r7, #7]
 8001dba:	f107 000c 	add.w	r0, r7, #12
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	4915      	ldr	r1, [pc, #84]	; (8001e18 <SendCommunication_u32+0xa4>)
 8001dc2:	f007 fc29 	bl	8009618 <siprintf>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if(_command_source == csource_UART)
 8001dcc:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <SendCommunication_u32+0xa8>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d109      	bne.n	8001de8 <SendCommunication_u32+0x74>
	{
		Uart_Send(sprint_buffer, size);
 8001dd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	f107 030c 	add.w	r3, r7, #12
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f001 ff19 	bl	8003c18 <Uart_Send>
	else if(_command_source == csource_ETH)
	{
		ETH_Send(sprint_buffer, size);
	}

}
 8001de6:	e00c      	b.n	8001e02 <SendCommunication_u32+0x8e>
	else if(_command_source == csource_ETH)
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <SendCommunication_u32+0xa8>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d108      	bne.n	8001e02 <SendCommunication_u32+0x8e>
		ETH_Send(sprint_buffer, size);
 8001df0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	f107 030c 	add.w	r3, r7, #12
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 f9ef 	bl	80021e0 <ETH_Send>
}
 8001e02:	bf00      	nop
 8001e04:	3730      	adds	r7, #48	; 0x30
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200002b8 	.word	0x200002b8
 8001e10:	0800d25c 	.word	0x0800d25c
 8001e14:	0800d23c 	.word	0x0800d23c
 8001e18:	0800d248 	.word	0x0800d248
 8001e1c:	200002b9 	.word	0x200002b9

08001e20 <Comunication_ResetConnectedTimer>:


void Comunication_ResetConnectedTimer()
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
	ConnectedTimer = HAL_GetTick();
 8001e24:	f002 fddc 	bl	80049e0 <HAL_GetTick>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	4a03      	ldr	r2, [pc, #12]	; (8001e38 <Comunication_ResetConnectedTimer+0x18>)
 8001e2c:	6013      	str	r3, [r2, #0]
	_AppConnected = true;
 8001e2e:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <Comunication_ResetConnectedTimer+0x1c>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	701a      	strb	r2, [r3, #0]
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	200002a0 	.word	0x200002a0
 8001e3c:	200002a4 	.word	0x200002a4

08001e40 <Communication_ConnectedTimer>:

void Communication_ConnectedTimer()
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0

	  if((HAL_GetTick() - ConnectedTimer) > ConnectedTimer_Value)
 8001e44:	f002 fdcc 	bl	80049e0 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <Communication_ConnectedTimer+0x20>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e54:	d902      	bls.n	8001e5c <Communication_ConnectedTimer+0x1c>
	  {
		  _AppConnected = false;
 8001e56:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <Communication_ConnectedTimer+0x24>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
	  }

}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	200002a0 	.word	0x200002a0
 8001e64:	200002a4 	.word	0x200002a4

08001e68 <ErrorExecute>:

/* @brief reaction on error signal
 *
 */
void ErrorExecute(uint8_t channel)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <ErrorExecute+0x1c>
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d002      	beq.n	8001e84 <ErrorExecute+0x1c>
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d11c      	bne.n	8001ebe <ErrorExecute+0x56>

	_Found_Error = false;
 8001e84:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <ErrorExecute+0x60>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]

	//power good execution -> channel disable
	if(*p_ERROR_data[channel])
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	4a0f      	ldr	r2, [pc, #60]	; (8001ecc <ErrorExecute+0x64>)
 8001e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d004      	beq.n	8001ea2 <ErrorExecute+0x3a>
	{
		Channel_Enable(channel, false);
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 ffad 	bl	8002dfc <Channel_Enable>
	}

	//over current execution -> output disable
	if(*p_ERROR_data[channel + 3])
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	3303      	adds	r3, #3
 8001ea6:	4a09      	ldr	r2, [pc, #36]	; (8001ecc <ErrorExecute+0x64>)
 8001ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d006      	beq.n	8001ec0 <ErrorExecute+0x58>
	{
		Channel_Output(channel, false);
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f001 f8a0 	bl	8002ffc <Channel_Output>
 8001ebc:	e000      	b.n	8001ec0 <ErrorExecute+0x58>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8001ebe:	bf00      	nop
	}
}
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200002ec 	.word	0x200002ec
 8001ecc:	200002d4 	.word	0x200002d4

08001ed0 <ErrorProcess>:
 *  write to _Found_Error:
 *  	true -> found error
 *  	false -> non error
 */
void ErrorProcess()
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0

	for(int errbit = 0; errbit < 6; errbit++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	e02f      	b.n	8001f3c <ErrorProcess+0x6c>
	{
		int ee = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < Error_Array_Size ; i++)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	e011      	b.n	8001f0a <ErrorProcess+0x3a>
		{
			if(Error_Array_Reg[i] & (1 << errbit)) ee++;
 8001ee6:	4a1a      	ldr	r2, [pc, #104]	; (8001f50 <ErrorProcess+0x80>)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	fa42 f303 	asr.w	r3, r2, r3
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d002      	beq.n	8001f04 <ErrorProcess+0x34>
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	3301      	adds	r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < Error_Array_Size ; i++)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3301      	adds	r3, #1
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b13      	cmp	r3, #19
 8001f0e:	ddea      	ble.n	8001ee6 <ErrorProcess+0x16>
		}

		if(ee >= Error_Threshold)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b0f      	cmp	r3, #15
 8001f14:	dd09      	ble.n	8001f2a <ErrorProcess+0x5a>
		{
			*p_ERROR_data[errbit] = true;
 8001f16:	4a0f      	ldr	r2, [pc, #60]	; (8001f54 <ErrorProcess+0x84>)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	701a      	strb	r2, [r3, #0]
			_Found_Error = true;
 8001f22:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <ErrorProcess+0x88>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
 8001f28:	e005      	b.n	8001f36 <ErrorProcess+0x66>
		}
		else
		{
			*p_ERROR_data[errbit] = false;
 8001f2a:	4a0a      	ldr	r2, [pc, #40]	; (8001f54 <ErrorProcess+0x84>)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f32:	2200      	movs	r2, #0
 8001f34:	701a      	strb	r2, [r3, #0]
	for(int errbit = 0; errbit < 6; errbit++)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2b05      	cmp	r3, #5
 8001f40:	ddcc      	ble.n	8001edc <ErrorProcess+0xc>
		}
	}
}
 8001f42:	bf00      	nop
 8001f44:	bf00      	nop
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr
 8001f50:	200002bc 	.word	0x200002bc
 8001f54:	200002d4 	.word	0x200002d4
 8001f58:	200002ec 	.word	0x200002ec

08001f5c <ErrorSignalsRead>:
 *
 * @return true -> found error, after process (after Error_Array_Size counts)
 * @return false -> non error
 */
void ErrorSignalsRead()
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0

	uint8_t temp_error_reg = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	71fb      	strb	r3, [r7, #7]
	
	if(ChannelsStatus[0].enable)
 8001f66:	4b43      	ldr	r3, [pc, #268]	; (8002074 <ErrorSignalsRead+0x118>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d01f      	beq.n	8001fae <ErrorSignalsRead+0x52>
	{
		temp_error_reg |= (!((bool)HAL_GPIO_ReadPin(PG_1_GPIO_Port, PG_1_Pin)))  << 0;
 8001f6e:	2110      	movs	r1, #16
 8001f70:	4841      	ldr	r0, [pc, #260]	; (8002078 <ErrorSignalsRead+0x11c>)
 8001f72:	f003 fa49 	bl	8005408 <HAL_GPIO_ReadPin>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bf0c      	ite	eq
 8001f7c:	2301      	moveq	r3, #1
 8001f7e:	2300      	movne	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	b25a      	sxtb	r2, r3
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	b25b      	sxtb	r3, r3
 8001f8c:	71fb      	strb	r3, [r7, #7]
		temp_error_reg |= ((bool)HAL_GPIO_ReadPin(OC_1_GPIO_Port, OC_1_Pin))  << 3;
 8001f8e:	2140      	movs	r1, #64	; 0x40
 8001f90:	4839      	ldr	r0, [pc, #228]	; (8002078 <ErrorSignalsRead+0x11c>)
 8001f92:	f003 fa39 	bl	8005408 <HAL_GPIO_ReadPin>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <ErrorSignalsRead+0x44>
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	e000      	b.n	8001fa2 <ErrorSignalsRead+0x46>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	b25a      	sxtb	r2, r3
 8001fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	b25b      	sxtb	r3, r3
 8001fac:	71fb      	strb	r3, [r7, #7]
	}

	if(ChannelsStatus[1].enable)
 8001fae:	4b31      	ldr	r3, [pc, #196]	; (8002074 <ErrorSignalsRead+0x118>)
 8001fb0:	7d1b      	ldrb	r3, [r3, #20]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d01f      	beq.n	8001ff6 <ErrorSignalsRead+0x9a>
	{
		temp_error_reg |= (!((bool)HAL_GPIO_ReadPin(PG_2_GPIO_Port, PG_2_Pin)))  << 1;
 8001fb6:	2120      	movs	r1, #32
 8001fb8:	482f      	ldr	r0, [pc, #188]	; (8002078 <ErrorSignalsRead+0x11c>)
 8001fba:	f003 fa25 	bl	8005408 <HAL_GPIO_ReadPin>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <ErrorSignalsRead+0x6c>
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	e000      	b.n	8001fca <ErrorSignalsRead+0x6e>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	b25a      	sxtb	r2, r3
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	b25b      	sxtb	r3, r3
 8001fd4:	71fb      	strb	r3, [r7, #7]
		temp_error_reg |= ((bool)HAL_GPIO_ReadPin(OC_3_GPIO_Port, OC_2_Pin))  << 4;
 8001fd6:	2180      	movs	r1, #128	; 0x80
 8001fd8:	4827      	ldr	r0, [pc, #156]	; (8002078 <ErrorSignalsRead+0x11c>)
 8001fda:	f003 fa15 	bl	8005408 <HAL_GPIO_ReadPin>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <ErrorSignalsRead+0x8c>
 8001fe4:	2310      	movs	r3, #16
 8001fe6:	e000      	b.n	8001fea <ErrorSignalsRead+0x8e>
 8001fe8:	2300      	movs	r3, #0
 8001fea:	b25a      	sxtb	r2, r3
 8001fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	b25b      	sxtb	r3, r3
 8001ff4:	71fb      	strb	r3, [r7, #7]
	}

	if(ChannelsStatus[2].enable)
 8001ff6:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <ErrorSignalsRead+0x118>)
 8001ff8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d020      	beq.n	8002042 <ErrorSignalsRead+0xe6>
	{
		temp_error_reg |= (!((bool)HAL_GPIO_ReadPin(PG_3_GPIO_Port, PG_3_Pin)))  << 2;
 8002000:	2104      	movs	r1, #4
 8002002:	481e      	ldr	r0, [pc, #120]	; (800207c <ErrorSignalsRead+0x120>)
 8002004:	f003 fa00 	bl	8005408 <HAL_GPIO_ReadPin>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <ErrorSignalsRead+0xb6>
 800200e:	2304      	movs	r3, #4
 8002010:	e000      	b.n	8002014 <ErrorSignalsRead+0xb8>
 8002012:	2300      	movs	r3, #0
 8002014:	b25a      	sxtb	r2, r3
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	4313      	orrs	r3, r2
 800201c:	b25b      	sxtb	r3, r3
 800201e:	71fb      	strb	r3, [r7, #7]
		temp_error_reg |= ((bool)HAL_GPIO_ReadPin(OC_3_GPIO_Port, OC_3_Pin))  << 5;
 8002020:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002024:	4814      	ldr	r0, [pc, #80]	; (8002078 <ErrorSignalsRead+0x11c>)
 8002026:	f003 f9ef 	bl	8005408 <HAL_GPIO_ReadPin>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <ErrorSignalsRead+0xd8>
 8002030:	2320      	movs	r3, #32
 8002032:	e000      	b.n	8002036 <ErrorSignalsRead+0xda>
 8002034:	2300      	movs	r3, #0
 8002036:	b25a      	sxtb	r2, r3
 8002038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203c:	4313      	orrs	r3, r2
 800203e:	b25b      	sxtb	r3, r3
 8002040:	71fb      	strb	r3, [r7, #7]
	}



	Error_Array_Reg[Error_Array_Counter] = temp_error_reg;
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <ErrorSignalsRead+0x124>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	4619      	mov	r1, r3
 8002048:	4a0e      	ldr	r2, [pc, #56]	; (8002084 <ErrorSignalsRead+0x128>)
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	5453      	strb	r3, [r2, r1]
	Error_Array_Counter++;
 800204e:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <ErrorSignalsRead+0x124>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	3301      	adds	r3, #1
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <ErrorSignalsRead+0x124>)
 8002058:	701a      	strb	r2, [r3, #0]
	if(Error_Array_Counter > (Error_Array_Size - 1))
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <ErrorSignalsRead+0x124>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b13      	cmp	r3, #19
 8002060:	d904      	bls.n	800206c <ErrorSignalsRead+0x110>
	{
		Error_Array_Counter = 0;
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <ErrorSignalsRead+0x124>)
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
		ErrorProcess();
 8002068:	f7ff ff32 	bl	8001ed0 <ErrorProcess>
	}
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	200007c4 	.word	0x200007c4
 8002078:	40020800 	.word	0x40020800
 800207c:	40020400 	.word	0x40020400
 8002080:	200002d0 	.word	0x200002d0
 8002084:	200002bc 	.word	0x200002bc

08002088 <AppConnectedExecute>:


void AppConnectedExecute(bool AppConnected)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, AppConnected);
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	461a      	mov	r2, r3
 8002096:	f44f 7100 	mov.w	r1, #512	; 0x200
 800209a:	4813      	ldr	r0, [pc, #76]	; (80020e8 <AppConnectedExecute+0x60>)
 800209c:	f003 f9cc 	bl	8005438 <HAL_GPIO_WritePin>

	if((AppConnected == false) &&_DisableSupplyInLostConnection)
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	f083 0301 	eor.w	r3, r3, #1
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d018      	beq.n	80020de <AppConnectedExecute+0x56>
 80020ac:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <AppConnectedExecute+0x64>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d014      	beq.n	80020de <AppConnectedExecute+0x56>
	{

		for(int i = 0; i< 3; i++)
 80020b4:	2300      	movs	r3, #0
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	e00e      	b.n	80020d8 <AppConnectedExecute+0x50>
		{
			Channel_Enable(i, false);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 fe9b 	bl	8002dfc <Channel_Enable>
			Channel_Output(i, false);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 ff95 	bl	8002ffc <Channel_Output>
		for(int i = 0; i< 3; i++)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	3301      	adds	r3, #1
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	dded      	ble.n	80020ba <AppConnectedExecute+0x32>
		}

	}
}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40020800 	.word	0x40020800
 80020ec:	200002ee 	.word	0x200002ee

080020f0 <ETH_BufferNotEmpty>:
 *
 * @return true -> FIFO is not empty
 * @return false -> FIFO is empty
 */
bool ETH_BufferNotEmpty()
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
	return (eth_bcounter > 0);
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <ETH_BufferNotEmpty+0x1c>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf14      	ite	ne
 80020fc:	2301      	movne	r3, #1
 80020fe:	2300      	moveq	r3, #0
 8002100:	b2db      	uxtb	r3, r3
}
 8002102:	4618      	mov	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	200006f4 	.word	0x200006f4

08002110 <ETH_WriteBuffer>:

/* @brief function add data byte to FIFO
 *
 */
void ETH_WriteBuffer(const uint8_t *Buffer, int length)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
	for(int i = 0;i<length;i++)
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	e024      	b.n	800216a <ETH_WriteBuffer+0x5a>
	{
		if(eth_bcounter >= (eth_buffer_size-1)) return;
 8002120:	4b17      	ldr	r3, [pc, #92]	; (8002180 <ETH_WriteBuffer+0x70>)
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8002128:	4293      	cmp	r3, r2
 800212a:	d823      	bhi.n	8002174 <ETH_WriteBuffer+0x64>

		eth_buffer[eth_wpointer] = Buffer[i];
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	4a14      	ldr	r2, [pc, #80]	; (8002184 <ETH_WriteBuffer+0x74>)
 8002134:	8812      	ldrh	r2, [r2, #0]
 8002136:	7819      	ldrb	r1, [r3, #0]
 8002138:	4b13      	ldr	r3, [pc, #76]	; (8002188 <ETH_WriteBuffer+0x78>)
 800213a:	5499      	strb	r1, [r3, r2]
		eth_bcounter++;
 800213c:	4b10      	ldr	r3, [pc, #64]	; (8002180 <ETH_WriteBuffer+0x70>)
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	3301      	adds	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <ETH_WriteBuffer+0x70>)
 8002146:	801a      	strh	r2, [r3, #0]
		eth_wpointer++;
 8002148:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <ETH_WriteBuffer+0x74>)
 800214a:	881b      	ldrh	r3, [r3, #0]
 800214c:	3301      	adds	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <ETH_WriteBuffer+0x74>)
 8002152:	801a      	strh	r2, [r3, #0]
		if(eth_wpointer > eth_buffer_size - 1) eth_wpointer = 0;
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <ETH_WriteBuffer+0x74>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800215c:	d302      	bcc.n	8002164 <ETH_WriteBuffer+0x54>
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <ETH_WriteBuffer+0x74>)
 8002160:	2200      	movs	r2, #0
 8002162:	801a      	strh	r2, [r3, #0]
	for(int i = 0;i<length;i++)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	3301      	adds	r3, #1
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	dbd6      	blt.n	8002120 <ETH_WriteBuffer+0x10>
 8002172:	e000      	b.n	8002176 <ETH_WriteBuffer+0x66>
		if(eth_bcounter >= (eth_buffer_size-1)) return;
 8002174:	bf00      	nop
	}
}
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	200006f4 	.word	0x200006f4
 8002184:	200006f0 	.word	0x200006f0
 8002188:	200002f0 	.word	0x200002f0

0800218c <ETH_ReadBuffer>:
/* @brief read data byty from FIFO
 *
 * @return one element uint8_t data 
 */
uint8_t ETH_ReadBuffer()
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
	uint8_t data = eth_buffer[eth_rpointer];
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <ETH_ReadBuffer+0x48>)
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <ETH_ReadBuffer+0x4c>)
 800219a:	5c9b      	ldrb	r3, [r3, r2]
 800219c:	71fb      	strb	r3, [r7, #7]
	eth_bcounter--;
 800219e:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <ETH_ReadBuffer+0x50>)
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <ETH_ReadBuffer+0x50>)
 80021a8:	801a      	strh	r2, [r3, #0]
	eth_rpointer++;
 80021aa:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <ETH_ReadBuffer+0x48>)
 80021ac:	881b      	ldrh	r3, [r3, #0]
 80021ae:	3301      	adds	r3, #1
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <ETH_ReadBuffer+0x48>)
 80021b4:	801a      	strh	r2, [r3, #0]
	if(eth_rpointer > eth_buffer_size - 1) eth_rpointer = 0;
 80021b6:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <ETH_ReadBuffer+0x48>)
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021be:	d302      	bcc.n	80021c6 <ETH_ReadBuffer+0x3a>
 80021c0:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <ETH_ReadBuffer+0x48>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	801a      	strh	r2, [r3, #0]

	return data;
 80021c6:	79fb      	ldrb	r3, [r7, #7]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	200006f2 	.word	0x200006f2
 80021d8:	200002f0 	.word	0x200002f0
 80021dc:	200006f4 	.word	0x200006f4

080021e0 <ETH_Send>:
 * @param data -> pointer on data buffer with message
 * @param size -> lenght of data buffer
 *
 */
void ETH_Send(char *data, uint16_t size)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	460b      	mov	r3, r1
 80021ea:	807b      	strh	r3, [r7, #2]
	ETH_udp_Transmit((uint8_t *)data,size);
 80021ec:	887b      	ldrh	r3, [r7, #2]
 80021ee:	4619      	mov	r1, r3
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f001 fc2f 	bl	8003a54 <ETH_udp_Transmit>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <GetCoef_k>:

};


float GetCoef_k(int channel)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
	float f;
	uint32_t val = DefaultParams.sramOffset_ReadCoef_k_0 + 4*channel;
 8002208:	4b08      	ldr	r3, [pc, #32]	; (800222c <GetCoef_k+0x2c>)
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	0092      	lsls	r2, r2, #2
 8002210:	4413      	add	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
	memcpy(&f,&val,sizeof(f));
 8002216:	60fb      	str	r3, [r7, #12]

	return  f;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	ee07 3a90 	vmov	s15, r3
}
 800221e:	eeb0 0a67 	vmov.f32	s0, s15
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	2000089c 	.word	0x2000089c

08002230 <GetCoef_q>:


float GetCoef_q(int channel)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	float f;
	uint32_t val = DefaultParams.sramOffset_ReadCoef_q_0 + 4*channel;
 8002238:	4b08      	ldr	r3, [pc, #32]	; (800225c <GetCoef_q+0x2c>)
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	0092      	lsls	r2, r2, #2
 8002240:	4413      	add	r3, r2
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
	memcpy(&f,&val,sizeof(f));
 8002246:	60fb      	str	r3, [r7, #12]

	return  f;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	ee07 3a90 	vmov	s15, r3
}
 800224e:	eeb0 0a67 	vmov.f32	s0, s15
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	2000089c 	.word	0x2000089c

08002260 <LoadADCConstant>:

/* @brief load coefficient from sram
 *
 */
void LoadADCConstant()
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
	for(int i = 0; i<6; i++)
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	e042      	b.n	80022f2 <LoadADCConstant+0x92>
	{

		if(BACKUP_SRAM_read_StoreControl(sramOffset_ReadCoef_k_0 + i))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3305      	adds	r3, #5
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe ff9d 	bl	80011b0 <BACKUP_SRAM_read_StoreControl>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00d      	beq.n	8002298 <LoadADCConstant+0x38>
		{
			ReadCoef_k[i] = BACKUP_SRAM_read_float(sramOffset_ReadCoef_k_0 + i);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3305      	adds	r3, #5
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe ffc2 	bl	800120a <BACKUP_SRAM_read_float>
 8002286:	eef0 7a40 	vmov.f32	s15, s0
 800228a:	4a1e      	ldr	r2, [pc, #120]	; (8002304 <LoadADCConstant+0xa4>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	edc3 7a00 	vstr	s15, [r3]
 8002296:	e009      	b.n	80022ac <LoadADCConstant+0x4c>
		}
		else
		{
			ReadCoef_k[i] = Default_ReadCoef_k[i];
 8002298:	4a1b      	ldr	r2, [pc, #108]	; (8002308 <LoadADCConstant+0xa8>)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	4918      	ldr	r1, [pc, #96]	; (8002304 <LoadADCConstant+0xa4>)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	601a      	str	r2, [r3, #0]
		}

		if(BACKUP_SRAM_read_StoreControl(sramOffset_ReadCoef_q_0 + i))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	330b      	adds	r3, #11
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe ff7d 	bl	80011b0 <BACKUP_SRAM_read_StoreControl>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00d      	beq.n	80022d8 <LoadADCConstant+0x78>
		{
			ReadCoef_q[i] = BACKUP_SRAM_read_float(sramOffset_ReadCoef_q_0 + i);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	330b      	adds	r3, #11
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7fe ffa2 	bl	800120a <BACKUP_SRAM_read_float>
 80022c6:	eef0 7a40 	vmov.f32	s15, s0
 80022ca:	4a10      	ldr	r2, [pc, #64]	; (800230c <LoadADCConstant+0xac>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	edc3 7a00 	vstr	s15, [r3]
 80022d6:	e009      	b.n	80022ec <LoadADCConstant+0x8c>
		}
		else
		{
			ReadCoef_q[i] = Default_ReadCoef_q[i];
 80022d8:	4a0d      	ldr	r2, [pc, #52]	; (8002310 <LoadADCConstant+0xb0>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	490a      	ldr	r1, [pc, #40]	; (800230c <LoadADCConstant+0xac>)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<6; i++)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3301      	adds	r3, #1
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b05      	cmp	r3, #5
 80022f6:	ddb9      	ble.n	800226c <LoadADCConstant+0xc>
		}

	}
}
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	2000077c 	.word	0x2000077c
 8002308:	0800d874 	.word	0x0800d874
 800230c:	20000794 	.word	0x20000794
 8002310:	0800d88c 	.word	0x0800d88c

08002314 <StoreADCConstant>:
 * @param value -> value of coefficient
 *
 *
 */
void StoreADCConstant(uint8_t coef, float value)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	ed87 0a00 	vstr	s0, [r7]
 8002320:	71fb      	strb	r3, [r7, #7]
	BACKUP_SRAM_write_float(sramOffset_ReadCoef_k_0 + coef, value);
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	3305      	adds	r3, #5
 8002326:	ed97 0a00 	vldr	s0, [r7]
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe ff7c 	bl	8001228 <BACKUP_SRAM_write_float>
	BACKUP_SRAM_write_StoreControl(sramOffset_ReadCoef_k_0 + coef, true);
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	3305      	adds	r3, #5
 8002334:	2101      	movs	r1, #1
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe ff45 	bl	80011c6 <BACKUP_SRAM_write_StoreControl>
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <SendADCCoefficients>:
/* @brief send ADC coefficients to communication
 *
 *
 */
void SendADCCoefficients()
{
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
	for(int i = 0;i<12;i++)
 800234a:	2300      	movs	r3, #0
 800234c:	607b      	str	r3, [r7, #4]
 800234e:	e010      	b.n	8002372 <SendADCCoefficients+0x2e>
	{
		SendCommunication_float(cmd_adc_get_k0 + i,GetCoef_k(i));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	b2db      	uxtb	r3, r3
 8002354:	332d      	adds	r3, #45	; 0x2d
 8002356:	b2dc      	uxtb	r4, r3
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f7ff ff51 	bl	8002200 <GetCoef_k>
 800235e:	eef0 7a40 	vmov.f32	s15, s0
 8002362:	eeb0 0a67 	vmov.f32	s0, s15
 8002366:	4620      	mov	r0, r4
 8002368:	f7ff fca0 	bl	8001cac <SendCommunication_float>
	for(int i = 0;i<12;i++)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3301      	adds	r3, #1
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b0b      	cmp	r3, #11
 8002376:	ddeb      	ble.n	8002350 <SendADCCoefficients+0xc>
	}
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	bd90      	pop	{r4, r7, pc}

08002382 <CalcAvg>:
 *
 * @return average of array
 *
 */
uint16_t CalcAvg(uint16_t *array, uint16_t length)
{
 8002382:	b480      	push	{r7}
 8002384:	b085      	sub	sp, #20
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	460b      	mov	r3, r1
 800238c:	807b      	strh	r3, [r7, #2]
	uint32_t AVG = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i<length ; i++)
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	e00b      	b.n	80023b0 <CalcAvg+0x2e>
	{
		AVG += array[i];
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<length ; i++)
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	3301      	adds	r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	887b      	ldrh	r3, [r7, #2]
 80023b2:	68ba      	ldr	r2, [r7, #8]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	dbef      	blt.n	8002398 <CalcAvg+0x16>
	}

	return (AVG/length);
 80023b8:	887b      	ldrh	r3, [r7, #2]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c0:	b29b      	uxth	r3, r3
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <CalcAdcValue>:
 * @param value -> ADC data
 *
 * @return voltage or current (float)
 */
float CalcAdcValue(uint8_t channel,uint16_t value)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	460a      	mov	r2, r1
 80023da:	71fb      	strb	r3, [r7, #7]
 80023dc:	4613      	mov	r3, r2
 80023de:	80bb      	strh	r3, [r7, #4]
	float f = (float)value/ADC_coef;
 80023e0:	88bb      	ldrh	r3, [r7, #4]
 80023e2:	ee07 3a90 	vmov	s15, r3
 80023e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ea:	ee17 0a90 	vmov	r0, s15
 80023ee:	f7fe f8b3 	bl	8000558 <__aeabi_f2d>
 80023f2:	a317      	add	r3, pc, #92	; (adr r3, 8002450 <CalcAdcValue+0x80>)
 80023f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f8:	f7fe fa30 	bl	800085c <__aeabi_ddiv>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	f7fe fbf8 	bl	8000bf8 <__aeabi_d2f>
 8002408:	4603      	mov	r3, r0
 800240a:	617b      	str	r3, [r7, #20]

	float Coef_k = GetCoef_k(channel);
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff fef6 	bl	8002200 <GetCoef_k>
 8002414:	ed87 0a04 	vstr	s0, [r7, #16]
	float Coef_q = GetCoef_q(channel);
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff ff08 	bl	8002230 <GetCoef_q>
 8002420:	ed87 0a03 	vstr	s0, [r7, #12]


	f = (f - Coef_q) / Coef_k;
 8002424:	ed97 7a05 	vldr	s14, [r7, #20]
 8002428:	edd7 7a03 	vldr	s15, [r7, #12]
 800242c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002430:	ed97 7a04 	vldr	s14, [r7, #16]
 8002434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002438:	edc7 7a05 	vstr	s15, [r7, #20]

	return f;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	ee07 3a90 	vmov	s15, r3
}
 8002442:	eeb0 0a67 	vmov.f32	s0, s15
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	f3af 8000 	nop.w
 8002450:	7b0b3919 	.word	0x7b0b3919
 8002454:	4093665a 	.word	0x4093665a

08002458 <ReadADCChannels>:
 *
 *	data save to Read_Data
 *
 */
void ReadADCChannels()
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 800245e:	2200      	movs	r2, #0
 8002460:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002464:	4809      	ldr	r0, [pc, #36]	; (800248c <ReadADCChannels+0x34>)
 8002466:	f002 ffe7 	bl	8005438 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, Adresses, Read_Data, 8,2);
 800246a:	2302      	movs	r3, #2
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	2308      	movs	r3, #8
 8002470:	4a07      	ldr	r2, [pc, #28]	; (8002490 <ReadADCChannels+0x38>)
 8002472:	4908      	ldr	r1, [pc, #32]	; (8002494 <ReadADCChannels+0x3c>)
 8002474:	4808      	ldr	r0, [pc, #32]	; (8002498 <ReadADCChannels+0x40>)
 8002476:	f004 f885 	bl	8006584 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 800247a:	2201      	movs	r2, #1
 800247c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <ReadADCChannels+0x34>)
 8002482:	f002 ffd9 	bl	8005438 <HAL_GPIO_WritePin>
}
 8002486:	bf00      	nop
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40020400 	.word	0x40020400
 8002490:	2000074c 	.word	0x2000074c
 8002494:	20000050 	.word	0x20000050
 8002498:	20000dfc 	.word	0x20000dfc

0800249c <ADCStore>:
 *
 *	processed data (measurement average) are saved on selected addresses in p_ADC_data array
 *
 */
void ADCStore()
{
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b089      	sub	sp, #36	; 0x24
 80024a0:	af00      	add	r7, sp, #0
	//save data from ADC data read buffer
	for(int i = 0;i<8;i++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
 80024a6:	e01d      	b.n	80024e4 <ADCStore+0x48>
	{
		meas_data[i][meas_counter] = 0 | Read_Data[2*i] | (Read_Data[(2*i)+1] << 8);
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	4a33      	ldr	r2, [pc, #204]	; (800257c <ADCStore+0xe0>)
 80024ae:	5cd3      	ldrb	r3, [r2, r3]
 80024b0:	b21a      	sxth	r2, r3
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	3301      	adds	r3, #1
 80024b8:	4930      	ldr	r1, [pc, #192]	; (800257c <ADCStore+0xe0>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	b21b      	sxth	r3, r3
 80024c0:	4313      	orrs	r3, r2
 80024c2:	b21a      	sxth	r2, r3
 80024c4:	4b2e      	ldr	r3, [pc, #184]	; (8002580 <ADCStore+0xe4>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	461c      	mov	r4, r3
 80024ca:	b290      	uxth	r0, r2
 80024cc:	492d      	ldr	r1, [pc, #180]	; (8002584 <ADCStore+0xe8>)
 80024ce:	69fa      	ldr	r2, [r7, #28]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	4423      	add	r3, r4
 80024d8:	4602      	mov	r2, r0
 80024da:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(int i = 0;i<8;i++)
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3301      	adds	r3, #1
 80024e2:	61fb      	str	r3, [r7, #28]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	2b07      	cmp	r3, #7
 80024e8:	ddde      	ble.n	80024a8 <ADCStore+0xc>
	}

	meas_counter++;
 80024ea:	4b25      	ldr	r3, [pc, #148]	; (8002580 <ADCStore+0xe4>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	3301      	adds	r3, #1
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	4b23      	ldr	r3, [pc, #140]	; (8002580 <ADCStore+0xe4>)
 80024f4:	701a      	strb	r2, [r3, #0]

	//all buffers full - calculate average and store on selected addresses
	if(meas_counter > (meas_size - 1))
 80024f6:	4b22      	ldr	r3, [pc, #136]	; (8002580 <ADCStore+0xe4>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d93a      	bls.n	8002574 <ADCStore+0xd8>
	{
		meas_counter = 0;
 80024fe:	4b20      	ldr	r3, [pc, #128]	; (8002580 <ADCStore+0xe4>)
 8002500:	2200      	movs	r2, #0
 8002502:	701a      	strb	r2, [r3, #0]

		uint16_t avg[8];
		for(int i = 0; i < 8 ;i++)
 8002504:	2300      	movs	r3, #0
 8002506:	61bb      	str	r3, [r7, #24]
 8002508:	e015      	b.n	8002536 <ADCStore+0x9a>
		{
			avg[i] = CalcAvg(meas_data[i], meas_size); //calculate average
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4613      	mov	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	4413      	add	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4a1b      	ldr	r2, [pc, #108]	; (8002584 <ADCStore+0xe8>)
 8002516:	4413      	add	r3, r2
 8002518:	2105      	movs	r1, #5
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff ff31 	bl	8002382 <CalcAvg>
 8002520:	4603      	mov	r3, r0
 8002522:	461a      	mov	r2, r3
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	3320      	adds	r3, #32
 800252a:	443b      	add	r3, r7
 800252c:	f823 2c1c 	strh.w	r2, [r3, #-28]
		for(int i = 0; i < 8 ;i++)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	3301      	adds	r3, #1
 8002534:	61bb      	str	r3, [r7, #24]
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	2b07      	cmp	r3, #7
 800253a:	dde6      	ble.n	800250a <ADCStore+0x6e>
		}

		for(int i = 0; i<6;i++)
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	e015      	b.n	800256e <ADCStore+0xd2>
		{
			*p_ADC_data[i] = CalcAdcValue(i,avg[i]); //calculate value(voltage or current and saved on selected addresses)
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	3320      	adds	r3, #32
 800254c:	443b      	add	r3, r7
 800254e:	f833 1c1c 	ldrh.w	r1, [r3, #-28]
 8002552:	480d      	ldr	r0, [pc, #52]	; (8002588 <ADCStore+0xec>)
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 800255a:	4610      	mov	r0, r2
 800255c:	f7ff ff38 	bl	80023d0 <CalcAdcValue>
 8002560:	eef0 7a40 	vmov.f32	s15, s0
 8002564:	edc4 7a00 	vstr	s15, [r4]
		for(int i = 0; i<6;i++)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	3301      	adds	r3, #1
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b05      	cmp	r3, #5
 8002572:	dde6      	ble.n	8002542 <ADCStore+0xa6>
		}

	}
}
 8002574:	bf00      	nop
 8002576:	3724      	adds	r7, #36	; 0x24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd90      	pop	{r4, r7, pc}
 800257c:	2000074c 	.word	0x2000074c
 8002580:	20000748 	.word	0x20000748
 8002584:	200006f8 	.word	0x200006f8
 8002588:	2000075c 	.word	0x2000075c

0800258c <LedSwitch>:

/* @brief switch red led on nucleo board
 *
 */
void LedSwitch(int value)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, value);
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <Enable_GPIO>:
 * @param channel -> channel of power supply
 * @param value   -> enable-true, disable-false
 *
 */
void Enable_GPIO(uint8_t channel, bool value)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	460a      	mov	r2, r1
 80025aa:	71fb      	strb	r3, [r7, #7]
 80025ac:	4613      	mov	r3, r2
 80025ae:	71bb      	strb	r3, [r7, #6]
	switch(channel)
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d015      	beq.n	80025e2 <Enable_GPIO+0x42>
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	dc1b      	bgt.n	80025f2 <Enable_GPIO+0x52>
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <Enable_GPIO+0x24>
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d007      	beq.n	80025d2 <Enable_GPIO+0x32>
		case 2:
			HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, value);
			break;

		default:
			break;
 80025c2:	e016      	b.n	80025f2 <Enable_GPIO+0x52>
			HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, value);
 80025c4:	79bb      	ldrb	r3, [r7, #6]
 80025c6:	461a      	mov	r2, r3
 80025c8:	2108      	movs	r1, #8
 80025ca:	480c      	ldr	r0, [pc, #48]	; (80025fc <Enable_GPIO+0x5c>)
 80025cc:	f002 ff34 	bl	8005438 <HAL_GPIO_WritePin>
			break;
 80025d0:	e010      	b.n	80025f4 <Enable_GPIO+0x54>
			HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, value);
 80025d2:	79bb      	ldrb	r3, [r7, #6]
 80025d4:	461a      	mov	r2, r3
 80025d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025da:	4809      	ldr	r0, [pc, #36]	; (8002600 <Enable_GPIO+0x60>)
 80025dc:	f002 ff2c 	bl	8005438 <HAL_GPIO_WritePin>
			break;
 80025e0:	e008      	b.n	80025f4 <Enable_GPIO+0x54>
			HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, value);
 80025e2:	79bb      	ldrb	r3, [r7, #6]
 80025e4:	461a      	mov	r2, r3
 80025e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025ea:	4805      	ldr	r0, [pc, #20]	; (8002600 <Enable_GPIO+0x60>)
 80025ec:	f002 ff24 	bl	8005438 <HAL_GPIO_WritePin>
			break;
 80025f0:	e000      	b.n	80025f4 <Enable_GPIO+0x54>
			break;
 80025f2:	bf00      	nop

	}
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40020800 	.word	0x40020800
 8002600:	40020400 	.word	0x40020400

08002604 <Output_GPIO>:
 * @param relay_p   -> relay for positive polarity (direct relay)
 * @param relay_n   -> relay for negative polarity (reverse relay)
 *
 */
void Output_GPIO(uint8_t channel, bool relay_p, bool relay_n)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
 800260e:	460b      	mov	r3, r1
 8002610:	71bb      	strb	r3, [r7, #6]
 8002612:	4613      	mov	r3, r2
 8002614:	717b      	strb	r3, [r7, #5]
	if(relay_p && relay_n) return;
 8002616:	79bb      	ldrb	r3, [r7, #6]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <Output_GPIO+0x1e>
 800261c:	797b      	ldrb	r3, [r7, #5]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d133      	bne.n	800268a <Output_GPIO+0x86>

	switch(channel)
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	2b02      	cmp	r3, #2
 8002626:	d022      	beq.n	800266e <Output_GPIO+0x6a>
 8002628:	2b02      	cmp	r3, #2
 800262a:	dc30      	bgt.n	800268e <Output_GPIO+0x8a>
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <Output_GPIO+0x32>
 8002630:	2b01      	cmp	r3, #1
 8002632:	d00e      	beq.n	8002652 <Output_GPIO+0x4e>
			HAL_GPIO_WritePin(SWDIR_3_GPIO_Port, SWDIR_3_Pin, relay_p);
			HAL_GPIO_WritePin(SWREV_3_GPIO_Port, SWREV_3_Pin, relay_n);
			break;

		default:
			break;
 8002634:	e02b      	b.n	800268e <Output_GPIO+0x8a>
			HAL_GPIO_WritePin(SWDIR_1_GPIO_Port, SWDIR_1_Pin, relay_p);
 8002636:	79bb      	ldrb	r3, [r7, #6]
 8002638:	461a      	mov	r2, r3
 800263a:	2104      	movs	r1, #4
 800263c:	4816      	ldr	r0, [pc, #88]	; (8002698 <Output_GPIO+0x94>)
 800263e:	f002 fefb 	bl	8005438 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SWREV_1_GPIO_Port, SWREV_1_Pin, relay_n);
 8002642:	797b      	ldrb	r3, [r7, #5]
 8002644:	461a      	mov	r2, r3
 8002646:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800264a:	4813      	ldr	r0, [pc, #76]	; (8002698 <Output_GPIO+0x94>)
 800264c:	f002 fef4 	bl	8005438 <HAL_GPIO_WritePin>
			break;
 8002650:	e01e      	b.n	8002690 <Output_GPIO+0x8c>
			HAL_GPIO_WritePin(SWDIR_2_GPIO_Port, SWDIR_2_Pin, relay_p);
 8002652:	79bb      	ldrb	r3, [r7, #6]
 8002654:	461a      	mov	r2, r3
 8002656:	2102      	movs	r1, #2
 8002658:	480f      	ldr	r0, [pc, #60]	; (8002698 <Output_GPIO+0x94>)
 800265a:	f002 feed 	bl	8005438 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SWREV_2_GPIO_Port, SWREV_2_Pin, relay_n);
 800265e:	797b      	ldrb	r3, [r7, #5]
 8002660:	461a      	mov	r2, r3
 8002662:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002666:	480c      	ldr	r0, [pc, #48]	; (8002698 <Output_GPIO+0x94>)
 8002668:	f002 fee6 	bl	8005438 <HAL_GPIO_WritePin>
			break;
 800266c:	e010      	b.n	8002690 <Output_GPIO+0x8c>
			HAL_GPIO_WritePin(SWDIR_3_GPIO_Port, SWDIR_3_Pin, relay_p);
 800266e:	79bb      	ldrb	r3, [r7, #6]
 8002670:	461a      	mov	r2, r3
 8002672:	2101      	movs	r1, #1
 8002674:	4808      	ldr	r0, [pc, #32]	; (8002698 <Output_GPIO+0x94>)
 8002676:	f002 fedf 	bl	8005438 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SWREV_3_GPIO_Port, SWREV_3_Pin, relay_n);
 800267a:	797b      	ldrb	r3, [r7, #5]
 800267c:	461a      	mov	r2, r3
 800267e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002682:	4805      	ldr	r0, [pc, #20]	; (8002698 <Output_GPIO+0x94>)
 8002684:	f002 fed8 	bl	8005438 <HAL_GPIO_WritePin>
			break;
 8002688:	e002      	b.n	8002690 <Output_GPIO+0x8c>
	if(relay_p && relay_n) return;
 800268a:	bf00      	nop
 800268c:	e000      	b.n	8002690 <Output_GPIO+0x8c>
			break;
 800268e:	bf00      	nop

	}
}
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40020800 	.word	0x40020800

0800269c <LoadDACConstant>:

/* @brief load coefficient from sram
 *
 */
void LoadDACConstant()
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
	for(int i = 0; i<3; i++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	607b      	str	r3, [r7, #4]
 80026a6:	e03a      	b.n	800271e <LoadDACConstant+0x82>
	{

		if(BACKUP_SRAM_read_StoreControl(sramOffset_AdjCoef_k_ch0 + i))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3311      	adds	r3, #17
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fd7f 	bl	80011b0 <BACKUP_SRAM_read_StoreControl>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00d      	beq.n	80026d4 <LoadDACConstant+0x38>
		{
			AdjCoef_k[i] = BACKUP_SRAM_read_float(sramOffset_AdjCoef_k_ch0 + i);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3311      	adds	r3, #17
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe fda4 	bl	800120a <BACKUP_SRAM_read_float>
 80026c2:	eef0 7a40 	vmov.f32	s15, s0
 80026c6:	4a1a      	ldr	r2, [pc, #104]	; (8002730 <LoadDACConstant+0x94>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	edc3 7a00 	vstr	s15, [r3]
 80026d2:	e005      	b.n	80026e0 <LoadDACConstant+0x44>
		}
		else
		{
			AdjCoef_k[i] = Default_AdjCoef_k;
 80026d4:	4a16      	ldr	r2, [pc, #88]	; (8002730 <LoadDACConstant+0x94>)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	4a15      	ldr	r2, [pc, #84]	; (8002734 <LoadDACConstant+0x98>)
 80026de:	601a      	str	r2, [r3, #0]
		}

		if(BACKUP_SRAM_read_StoreControl(sramOffset_AdjCoef_q_ch0 + i))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3314      	adds	r3, #20
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fd63 	bl	80011b0 <BACKUP_SRAM_read_StoreControl>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00d      	beq.n	800270c <LoadDACConstant+0x70>
		{
			AdjCoef_q[i] = BACKUP_SRAM_read_float(sramOffset_AdjCoef_q_ch0 + i);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3314      	adds	r3, #20
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fd88 	bl	800120a <BACKUP_SRAM_read_float>
 80026fa:	eef0 7a40 	vmov.f32	s15, s0
 80026fe:	4a0e      	ldr	r2, [pc, #56]	; (8002738 <LoadDACConstant+0x9c>)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	edc3 7a00 	vstr	s15, [r3]
 800270a:	e005      	b.n	8002718 <LoadDACConstant+0x7c>
		}
		else
		{
			AdjCoef_q[i] = Default_AdjCoef_q;
 800270c:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <LoadDACConstant+0x9c>)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	4a09      	ldr	r2, [pc, #36]	; (800273c <LoadDACConstant+0xa0>)
 8002716:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<3; i++)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3301      	adds	r3, #1
 800271c:	607b      	str	r3, [r7, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b02      	cmp	r3, #2
 8002722:	ddc1      	ble.n	80026a8 <LoadDACConstant+0xc>
		}

	}
}
 8002724:	bf00      	nop
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	200007ac 	.word	0x200007ac
 8002734:	43ffe8bc 	.word	0x43ffe8bc
 8002738:	200007b8 	.word	0x200007b8
 800273c:	4423d0f3 	.word	0x4423d0f3

08002740 <StoreDACConstant>:
 * @param value -> value of coefficient
 *
 *
 */
void StoreDACConstant(uint8_t coef, float value)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	ed87 0a00 	vstr	s0, [r7]
 800274c:	71fb      	strb	r3, [r7, #7]
	BACKUP_SRAM_write_float(sramOffset_AdjCoef_k_ch0 + coef, value);
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	3311      	adds	r3, #17
 8002752:	ed97 0a00 	vldr	s0, [r7]
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe fd66 	bl	8001228 <BACKUP_SRAM_write_float>
	BACKUP_SRAM_write_StoreControl(sramOffset_AdjCoef_k_ch0 + coef, true);
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	3311      	adds	r3, #17
 8002760:	2101      	movs	r1, #1
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe fd2f 	bl	80011c6 <BACKUP_SRAM_write_StoreControl>
}
 8002768:	bf00      	nop
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <GetDACConstant>:
 *
 * @param coef  -> coefficient order, k: 0 to 2, q: 3 to 5
 *
 */
float GetDACConstant(uint8_t coef)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
	float f;

	if(BACKUP_SRAM_read_StoreControl(sramOffset_AdjCoef_k_ch0 + coef))
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	3311      	adds	r3, #17
 800277e:	4618      	mov	r0, r3
 8002780:	f7fe fd16 	bl	80011b0 <BACKUP_SRAM_read_StoreControl>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d007      	beq.n	800279a <GetDACConstant+0x2a>
	{
		f = BACKUP_SRAM_read_float(sramOffset_AdjCoef_k_ch0 + coef);
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	3311      	adds	r3, #17
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe fd3b 	bl	800120a <BACKUP_SRAM_read_float>
 8002794:	ed87 0a03 	vstr	s0, [r7, #12]
 8002798:	e016      	b.n	80027c8 <GetDACConstant+0x58>
	}
	else
	{
		if(coef == 0 || coef == 1 || coef == 2)
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <GetDACConstant+0x3c>
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d002      	beq.n	80027ac <GetDACConstant+0x3c>
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d102      	bne.n	80027b2 <GetDACConstant+0x42>
		{
			f = Default_AdjCoef_k;
 80027ac:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <GetDACConstant+0x68>)
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	e00a      	b.n	80027c8 <GetDACConstant+0x58>
		}
		else if(coef == 3 || coef == 4 || coef == 5)
 80027b2:	79fb      	ldrb	r3, [r7, #7]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d005      	beq.n	80027c4 <GetDACConstant+0x54>
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d002      	beq.n	80027c4 <GetDACConstant+0x54>
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	2b05      	cmp	r3, #5
 80027c2:	d101      	bne.n	80027c8 <GetDACConstant+0x58>
		{
			f = Default_AdjCoef_q;
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <GetDACConstant+0x6c>)
 80027c6:	60fb      	str	r3, [r7, #12]
		}
	}

	return f;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	ee07 3a90 	vmov	s15, r3
}
 80027ce:	eeb0 0a67 	vmov.f32	s0, s15
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	43ffe8bc 	.word	0x43ffe8bc
 80027dc:	4423d0f3 	.word	0x4423d0f3

080027e0 <SendDACCoefficients>:
/* @brief send DAC coefficients to communication
 *
 *
 */
void SendDACCoefficients()
{
 80027e0:	b590      	push	{r4, r7, lr}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
	for(int i = 0;i<6;i++)
 80027e6:	2300      	movs	r3, #0
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	e012      	b.n	8002812 <SendDACCoefficients+0x32>
	{
		SendCommunication_float(cmd_dac_get_k0 + i, GetDACConstant(i));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	333f      	adds	r3, #63	; 0x3f
 80027f2:	b2dc      	uxtb	r4, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ffb9 	bl	8002770 <GetDACConstant>
 80027fe:	eef0 7a40 	vmov.f32	s15, s0
 8002802:	eeb0 0a67 	vmov.f32	s0, s15
 8002806:	4620      	mov	r0, r4
 8002808:	f7ff fa50 	bl	8001cac <SendCommunication_float>
	for(int i = 0;i<6;i++)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3301      	adds	r3, #1
 8002810:	607b      	str	r3, [r7, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b05      	cmp	r3, #5
 8002816:	dde9      	ble.n	80027ec <SendDACCoefficients+0xc>
	}

}
 8002818:	bf00      	nop
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	bd90      	pop	{r4, r7, pc}
 8002822:	0000      	movs	r0, r0
 8002824:	0000      	movs	r0, r0
	...

08002828 <Get_PreRegulatorVoltage>:
 * @param voltage -> request voltage on power supply output
 *
 * @return uint16_t value of voltage for pre regulator
 */
uint16_t Get_PreRegulatorVoltage(uint16_t voltage)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	80fb      	strh	r3, [r7, #6]
	return (0.15789 * (float)voltage) + 21.05263;
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	ee07 3a90 	vmov	s15, r3
 8002838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800283c:	ee17 0a90 	vmov	r0, s15
 8002840:	f7fd fe8a 	bl	8000558 <__aeabi_f2d>
 8002844:	a30c      	add	r3, pc, #48	; (adr r3, 8002878 <Get_PreRegulatorVoltage+0x50>)
 8002846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284a:	f7fd fedd 	bl	8000608 <__aeabi_dmul>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4610      	mov	r0, r2
 8002854:	4619      	mov	r1, r3
 8002856:	a30a      	add	r3, pc, #40	; (adr r3, 8002880 <Get_PreRegulatorVoltage+0x58>)
 8002858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285c:	f7fd fd1e 	bl	800029c <__adddf3>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4610      	mov	r0, r2
 8002866:	4619      	mov	r1, r3
 8002868:	f7fe f9a6 	bl	8000bb8 <__aeabi_d2uiz>
 800286c:	4603      	mov	r3, r0
 800286e:	b29b      	uxth	r3, r3
}
 8002870:	4618      	mov	r0, r3
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	512ec6bd 	.word	0x512ec6bd
 800287c:	3fc435bd 	.word	0x3fc435bd
 8002880:	28e0c9da 	.word	0x28e0c9da
 8002884:	40350d79 	.word	0x40350d79

08002888 <Get_DACValue>:

//Calculate DAC register value from recomended voltage
uint16_t Get_DACValue(int dac_channel, uint16_t value)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	807b      	strh	r3, [r7, #2]
	uint16_t code;

	if(dac_channel == 0 || dac_channel == 1 || dac_channel == 2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d005      	beq.n	80028a6 <Get_DACValue+0x1e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d002      	beq.n	80028a6 <Get_DACValue+0x1e>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d12a      	bne.n	80028fc <Get_DACValue+0x74>
	{
		code = (uint16_t)(((PreReg_Coef_q - (float)value) / PreReg_Coef_k) * (float)DAC_coef);
 80028a6:	887b      	ldrh	r3, [r7, #2]
 80028a8:	ee07 3a90 	vmov	s15, r3
 80028ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b0:	ee17 0a90 	vmov	r0, s15
 80028b4:	f7fd fe50 	bl	8000558 <__aeabi_f2d>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	a125      	add	r1, pc, #148	; (adr r1, 8002954 <Get_DACValue+0xcc>)
 80028be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028c2:	f7fd fce9 	bl	8000298 <__aeabi_dsub>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4610      	mov	r0, r2
 80028cc:	4619      	mov	r1, r3
 80028ce:	a323      	add	r3, pc, #140	; (adr r3, 800295c <Get_DACValue+0xd4>)
 80028d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d4:	f7fd ffc2 	bl	800085c <__aeabi_ddiv>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4610      	mov	r0, r2
 80028de:	4619      	mov	r1, r3
 80028e0:	a320      	add	r3, pc, #128	; (adr r3, 8002964 <Get_DACValue+0xdc>)
 80028e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e6:	f7fd fe8f 	bl	8000608 <__aeabi_dmul>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4610      	mov	r0, r2
 80028f0:	4619      	mov	r1, r3
 80028f2:	f7fe f961 	bl	8000bb8 <__aeabi_d2uiz>
 80028f6:	4603      	mov	r3, r0
 80028f8:	81fb      	strh	r3, [r7, #14]
 80028fa:	e01f      	b.n	800293c <Get_DACValue+0xb4>
	}
	else
	{
		code = (uint16_t)(((AdjCoef_q[dac_channel - 3] - (float)value) / AdjCoef_k[dac_channel - 3]) * (float)DAC_coef);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	3b03      	subs	r3, #3
 8002900:	4a11      	ldr	r2, [pc, #68]	; (8002948 <Get_DACValue+0xc0>)
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	ed93 7a00 	vldr	s14, [r3]
 800290a:	887b      	ldrh	r3, [r7, #2]
 800290c:	ee07 3a90 	vmov	s15, r3
 8002910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002914:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3b03      	subs	r3, #3
 800291c:	4a0b      	ldr	r2, [pc, #44]	; (800294c <Get_DACValue+0xc4>)
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	ed93 7a00 	vldr	s14, [r3]
 8002926:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800292a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002950 <Get_DACValue+0xc8>
 800292e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002936:	ee17 3a90 	vmov	r3, s15
 800293a:	81fb      	strh	r3, [r7, #14]
	}


	return code;
 800293c:	89fb      	ldrh	r3, [r7, #14]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	200007b8 	.word	0x200007b8
 800294c:	200007ac 	.word	0x200007ac
 8002950:	454ccccd 	.word	0x454ccccd
 8002954:	3dee7818 	.word	0x3dee7818
 8002958:	405ff4dc 	.word	0x405ff4dc
 800295c:	c39af4e3 	.word	0xc39af4e3
 8002960:	405537da 	.word	0x405537da
 8002964:	a0000000 	.word	0xa0000000
 8002968:	40a99999 	.word	0x40a99999

0800296c <Set_PreReg_Voltage>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param voltage -> request voltage on regulator output
 * 
 */
void Set_PreReg_Voltage(uint8_t channel, uint16_t voltage)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	460a      	mov	r2, r1
 8002976:	71fb      	strb	r3, [r7, #7]
 8002978:	4613      	mov	r3, r2
 800297a:	80bb      	strh	r3, [r7, #4]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d005      	beq.n	800298e <Set_PreReg_Voltage+0x22>
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d002      	beq.n	800298e <Set_PreReg_Voltage+0x22>
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d116      	bne.n	80029bc <Set_PreReg_Voltage+0x50>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 800298e:	88bb      	ldrh	r3, [r7, #4]
 8002990:	2b18      	cmp	r3, #24
 8002992:	d804      	bhi.n	800299e <Set_PreReg_Voltage+0x32>
 8002994:	88bb      	ldrh	r3, [r7, #4]
 8002996:	f240 2226 	movw	r2, #550	; 0x226
 800299a:	4293      	cmp	r3, r2
 800299c:	d810      	bhi.n	80029c0 <Set_PreReg_Voltage+0x54>

	uint16_t value = Get_DACValue(channel, voltage);
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	88ba      	ldrh	r2, [r7, #4]
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff6f 	bl	8002888 <Get_DACValue>
 80029aa:	4603      	mov	r3, r0
 80029ac:	81fb      	strh	r3, [r7, #14]
	SendValueToDAC(channel,value);
 80029ae:	89fa      	ldrh	r2, [r7, #14]
 80029b0:	79fb      	ldrb	r3, [r7, #7]
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 fe77 	bl	80036a8 <SendValueToDAC>
 80029ba:	e002      	b.n	80029c2 <Set_PreReg_Voltage+0x56>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 80029bc:	bf00      	nop
 80029be:	e000      	b.n	80029c2 <Set_PreReg_Voltage+0x56>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 80029c0:	bf00      	nop
}
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <Set_OutReg_Voltage>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param voltage -> request voltage on regulator output
 * 
 */
void Set_OutReg_Voltage(uint8_t channel, uint16_t voltage)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	4603      	mov	r3, r0
 80029d0:	460a      	mov	r2, r1
 80029d2:	71fb      	strb	r3, [r7, #7]
 80029d4:	4613      	mov	r3, r2
 80029d6:	80bb      	strh	r3, [r7, #4]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 80029d8:	79fb      	ldrb	r3, [r7, #7]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d005      	beq.n	80029ea <Set_OutReg_Voltage+0x22>
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d002      	beq.n	80029ea <Set_OutReg_Voltage+0x22>
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d119      	bne.n	8002a1e <Set_OutReg_Voltage+0x56>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 80029ea:	88bb      	ldrh	r3, [r7, #4]
 80029ec:	2b18      	cmp	r3, #24
 80029ee:	d804      	bhi.n	80029fa <Set_OutReg_Voltage+0x32>
 80029f0:	88bb      	ldrh	r3, [r7, #4]
 80029f2:	f240 2226 	movw	r2, #550	; 0x226
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d813      	bhi.n	8002a22 <Set_OutReg_Voltage+0x5a>

	uint16_t value = Get_DACValue(channel + 3, voltage);
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	3303      	adds	r3, #3
 80029fe:	88ba      	ldrh	r2, [r7, #4]
 8002a00:	4611      	mov	r1, r2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff ff40 	bl	8002888 <Get_DACValue>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	81fb      	strh	r3, [r7, #14]
	SendValueToDAC(channel + 3, value);
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	3303      	adds	r3, #3
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	89fa      	ldrh	r2, [r7, #14]
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 fe46 	bl	80036a8 <SendValueToDAC>
 8002a1c:	e002      	b.n	8002a24 <Set_OutReg_Voltage+0x5c>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002a1e:	bf00      	nop
 8002a20:	e000      	b.n	8002a24 <Set_OutReg_Voltage+0x5c>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 8002a22:	bf00      	nop
}
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <Set_Voltage>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param voltage -> request voltage on output of power supply channel
 * 
 */
void Set_Voltage(uint8_t channel, uint16_t voltage)
{
 8002a2c:	b590      	push	{r4, r7, lr}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	460a      	mov	r2, r1
 8002a36:	71fb      	strb	r3, [r7, #7]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	80bb      	strh	r3, [r7, #4]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d006      	beq.n	8002a50 <Set_Voltage+0x24>
 8002a42:	79fb      	ldrb	r3, [r7, #7]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d003      	beq.n	8002a50 <Set_Voltage+0x24>
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	f040 80b6 	bne.w	8002bbc <Set_Voltage+0x190>
	if((voltage < minimum_voltage) || (voltage > maximum_voltage)) return;
 8002a50:	88bb      	ldrh	r3, [r7, #4]
 8002a52:	2b18      	cmp	r3, #24
 8002a54:	f240 80b4 	bls.w	8002bc0 <Set_Voltage+0x194>
 8002a58:	88bb      	ldrh	r3, [r7, #4]
 8002a5a:	f240 2226 	movw	r2, #550	; 0x226
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	f200 80ae 	bhi.w	8002bc0 <Set_Voltage+0x194>

	ChannelsChange[channel].request_voltage = voltage; //store request voltage
 8002a64:	79fa      	ldrb	r2, [r7, #7]
 8002a66:	4958      	ldr	r1, [pc, #352]	; (8002bc8 <Set_Voltage+0x19c>)
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	3310      	adds	r3, #16
 8002a74:	88ba      	ldrh	r2, [r7, #4]
 8002a76:	801a      	strh	r2, [r3, #0]

	if(abs(voltage - ChannelsStatus[channel].set_voltage) > ramp_v_step) //voltage ramping if difference is bigger that voltage ramp step
 8002a78:	88b9      	ldrh	r1, [r7, #4]
 8002a7a:	79fa      	ldrb	r2, [r7, #7]
 8002a7c:	4853      	ldr	r0, [pc, #332]	; (8002bcc <Set_Voltage+0x1a0>)
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	4403      	add	r3, r0
 8002a88:	3302      	adds	r3, #2
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	1acb      	subs	r3, r1, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	bfb8      	it	lt
 8002a92:	425b      	neglt	r3, r3
 8002a94:	2b0a      	cmp	r3, #10
 8002a96:	dd75      	ble.n	8002b84 <Set_Voltage+0x158>
	{
		//ChannelsChange[channel].request_voltage = voltage; //store request voltage

		//calculate new voltage
		if(ChannelsStatus[channel].set_voltage < ChannelsChange[channel].request_voltage)
 8002a98:	79fa      	ldrb	r2, [r7, #7]
 8002a9a:	494c      	ldr	r1, [pc, #304]	; (8002bcc <Set_Voltage+0x1a0>)
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	3302      	adds	r3, #2
 8002aa8:	8819      	ldrh	r1, [r3, #0]
 8002aaa:	79fa      	ldrb	r2, [r7, #7]
 8002aac:	4846      	ldr	r0, [pc, #280]	; (8002bc8 <Set_Voltage+0x19c>)
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4403      	add	r3, r0
 8002ab8:	3310      	adds	r3, #16
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	4299      	cmp	r1, r3
 8002abe:	d215      	bcs.n	8002aec <Set_Voltage+0xc0>
		{
			ChannelsStatus[channel].set_voltage += ramp_v_step;
 8002ac0:	79fa      	ldrb	r2, [r7, #7]
 8002ac2:	4942      	ldr	r1, [pc, #264]	; (8002bcc <Set_Voltage+0x1a0>)
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	3302      	adds	r3, #2
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	79fa      	ldrb	r2, [r7, #7]
 8002ad4:	330a      	adds	r3, #10
 8002ad6:	b298      	uxth	r0, r3
 8002ad8:	493c      	ldr	r1, [pc, #240]	; (8002bcc <Set_Voltage+0x1a0>)
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	3302      	adds	r3, #2
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	801a      	strh	r2, [r3, #0]
 8002aea:	e014      	b.n	8002b16 <Set_Voltage+0xea>
		}
		else
		{
			ChannelsStatus[channel].set_voltage -= ramp_v_step;
 8002aec:	79fa      	ldrb	r2, [r7, #7]
 8002aee:	4937      	ldr	r1, [pc, #220]	; (8002bcc <Set_Voltage+0x1a0>)
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	3302      	adds	r3, #2
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	79fa      	ldrb	r2, [r7, #7]
 8002b00:	3b0a      	subs	r3, #10
 8002b02:	b298      	uxth	r0, r3
 8002b04:	4931      	ldr	r1, [pc, #196]	; (8002bcc <Set_Voltage+0x1a0>)
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	3302      	adds	r3, #2
 8002b12:	4602      	mov	r2, r0
 8002b14:	801a      	strh	r2, [r3, #0]
		}

		//Set voltage
		Set_OutReg_Voltage(channel, ChannelsStatus[channel].set_voltage);
 8002b16:	79fa      	ldrb	r2, [r7, #7]
 8002b18:	492c      	ldr	r1, [pc, #176]	; (8002bcc <Set_Voltage+0x1a0>)
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	440b      	add	r3, r1
 8002b24:	3302      	adds	r3, #2
 8002b26:	881a      	ldrh	r2, [r3, #0]
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff4b 	bl	80029c8 <Set_OutReg_Voltage>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(ChannelsStatus[channel].set_voltage));
 8002b32:	79fa      	ldrb	r2, [r7, #7]
 8002b34:	4925      	ldr	r1, [pc, #148]	; (8002bcc <Set_Voltage+0x1a0>)
 8002b36:	4613      	mov	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	3302      	adds	r3, #2
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fe6f 	bl	8002828 <Get_PreRegulatorVoltage>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff ff0a 	bl	800296c <Set_PreReg_Voltage>

		//Enable and set ramping timer
		ChannelsChange[channel].voltage_ramp = true;
 8002b58:	79fa      	ldrb	r2, [r7, #7]
 8002b5a:	491b      	ldr	r1, [pc, #108]	; (8002bc8 <Set_Voltage+0x19c>)
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	2201      	movs	r2, #1
 8002b68:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].voltage_ramp_timer = HAL_GetTick();
 8002b6a:	79fc      	ldrb	r4, [r7, #7]
 8002b6c:	f001 ff38 	bl	80049e0 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4915      	ldr	r1, [pc, #84]	; (8002bc8 <Set_Voltage+0x19c>)
 8002b74:	4623      	mov	r3, r4
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4423      	add	r3, r4
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	3304      	adds	r3, #4
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	e01e      	b.n	8002bc2 <Set_Voltage+0x196>
	}
	else //without voltage ramping if difference is smaller that voltage ramp step
	{
		//ChannelsChange[channel].request_voltage = voltage; //store request voltage
		ChannelsStatus[channel].set_voltage = voltage;
 8002b84:	79fa      	ldrb	r2, [r7, #7]
 8002b86:	4911      	ldr	r1, [pc, #68]	; (8002bcc <Set_Voltage+0x1a0>)
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	3302      	adds	r3, #2
 8002b94:	88ba      	ldrh	r2, [r7, #4]
 8002b96:	801a      	strh	r2, [r3, #0]
		Set_OutReg_Voltage(channel, voltage);
 8002b98:	88ba      	ldrh	r2, [r7, #4]
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff ff12 	bl	80029c8 <Set_OutReg_Voltage>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(voltage));
 8002ba4:	88bb      	ldrh	r3, [r7, #4]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fe3e 	bl	8002828 <Get_PreRegulatorVoltage>
 8002bac:	4603      	mov	r3, r0
 8002bae:	461a      	mov	r2, r3
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff fed9 	bl	800296c <Set_PreReg_Voltage>
 8002bba:	e002      	b.n	8002bc2 <Set_Voltage+0x196>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002bbc:	bf00      	nop
 8002bbe:	e000      	b.n	8002bc2 <Set_Voltage+0x196>
	if((voltage < minimum_voltage) || (voltage > maximum_voltage)) return;
 8002bc0:	bf00      	nop
	}

}
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd90      	pop	{r4, r7, pc}
 8002bc8:	20000800 	.word	0x20000800
 8002bcc:	200007c4 	.word	0x200007c4

08002bd0 <Set_VoltageInEnable>:


void Set_VoltageInEnable(uint8_t channel)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <Set_VoltageInEnable+0x1c>
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d002      	beq.n	8002bec <Set_VoltageInEnable+0x1c>
 8002be6:	79fb      	ldrb	r3, [r7, #7]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d11d      	bne.n	8002c28 <Set_VoltageInEnable+0x58>

	uint16_t voltage = minimum_voltage;
 8002bec:	2319      	movs	r3, #25
 8002bee:	81fb      	strh	r3, [r7, #14]

	Set_OutReg_Voltage(channel, voltage);
 8002bf0:	89fa      	ldrh	r2, [r7, #14]
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fee6 	bl	80029c8 <Set_OutReg_Voltage>
	Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(voltage));
 8002bfc:	89fb      	ldrh	r3, [r7, #14]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fe12 	bl	8002828 <Get_PreRegulatorVoltage>
 8002c04:	4603      	mov	r3, r0
 8002c06:	461a      	mov	r2, r3
 8002c08:	79fb      	ldrb	r3, [r7, #7]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fead 	bl	800296c <Set_PreReg_Voltage>

	ChannelsStatus[channel].set_voltage = voltage;
 8002c12:	79fa      	ldrb	r2, [r7, #7]
 8002c14:	4906      	ldr	r1, [pc, #24]	; (8002c30 <Set_VoltageInEnable+0x60>)
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	3302      	adds	r3, #2
 8002c22:	89fa      	ldrh	r2, [r7, #14]
 8002c24:	801a      	strh	r2, [r3, #0]
 8002c26:	e000      	b.n	8002c2a <Set_VoltageInEnable+0x5a>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002c28:	bf00      	nop
}
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	200007c4 	.word	0x200007c4

08002c34 <Set_Voltage_From_Ramping>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param voltage -> request voltage on output of power supply channel
 *
 */
void Set_Voltage_From_Ramping(uint8_t channel)
{
 8002c34:	b590      	push	{r4, r7, lr}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d006      	beq.n	8002c52 <Set_Voltage_From_Ramping+0x1e>
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d003      	beq.n	8002c52 <Set_Voltage_From_Ramping+0x1e>
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	f040 80cd 	bne.w	8002dec <Set_Voltage_From_Ramping+0x1b8>

	if(abs(ChannelsStatus[channel].set_voltage - ChannelsChange[channel].request_voltage) > ramp_v_step) //keep ramping
 8002c52:	79fa      	ldrb	r2, [r7, #7]
 8002c54:	4967      	ldr	r1, [pc, #412]	; (8002df4 <Set_Voltage_From_Ramping+0x1c0>)
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	3302      	adds	r3, #2
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	79fa      	ldrb	r2, [r7, #7]
 8002c68:	4963      	ldr	r1, [pc, #396]	; (8002df8 <Set_Voltage_From_Ramping+0x1c4>)
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	3310      	adds	r3, #16
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	1ac3      	subs	r3, r0, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	bfb8      	it	lt
 8002c7e:	425b      	neglt	r3, r3
 8002c80:	2b0a      	cmp	r3, #10
 8002c82:	dd75      	ble.n	8002d70 <Set_Voltage_From_Ramping+0x13c>
	{

		//calculate new voltage
		if(ChannelsStatus[channel].set_voltage < ChannelsChange[channel].request_voltage)
 8002c84:	79fa      	ldrb	r2, [r7, #7]
 8002c86:	495b      	ldr	r1, [pc, #364]	; (8002df4 <Set_Voltage_From_Ramping+0x1c0>)
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	3302      	adds	r3, #2
 8002c94:	8819      	ldrh	r1, [r3, #0]
 8002c96:	79fa      	ldrb	r2, [r7, #7]
 8002c98:	4857      	ldr	r0, [pc, #348]	; (8002df8 <Set_Voltage_From_Ramping+0x1c4>)
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4403      	add	r3, r0
 8002ca4:	3310      	adds	r3, #16
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	4299      	cmp	r1, r3
 8002caa:	d215      	bcs.n	8002cd8 <Set_Voltage_From_Ramping+0xa4>
		{
			ChannelsStatus[channel].set_voltage += ramp_v_step;
 8002cac:	79fa      	ldrb	r2, [r7, #7]
 8002cae:	4951      	ldr	r1, [pc, #324]	; (8002df4 <Set_Voltage_From_Ramping+0x1c0>)
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	3302      	adds	r3, #2
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	79fa      	ldrb	r2, [r7, #7]
 8002cc0:	330a      	adds	r3, #10
 8002cc2:	b298      	uxth	r0, r3
 8002cc4:	494b      	ldr	r1, [pc, #300]	; (8002df4 <Set_Voltage_From_Ramping+0x1c0>)
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	3302      	adds	r3, #2
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	801a      	strh	r2, [r3, #0]
 8002cd6:	e014      	b.n	8002d02 <Set_Voltage_From_Ramping+0xce>
		}
		else
		{
			ChannelsStatus[channel].set_voltage -= ramp_v_step;
 8002cd8:	79fa      	ldrb	r2, [r7, #7]
 8002cda:	4946      	ldr	r1, [pc, #280]	; (8002df4 <Set_Voltage_From_Ramping+0x1c0>)
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	3302      	adds	r3, #2
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	79fa      	ldrb	r2, [r7, #7]
 8002cec:	3b0a      	subs	r3, #10
 8002cee:	b298      	uxth	r0, r3
 8002cf0:	4940      	ldr	r1, [pc, #256]	; (8002df4 <Set_Voltage_From_Ramping+0x1c0>)
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	4602      	mov	r2, r0
 8002d00:	801a      	strh	r2, [r3, #0]
		}

		//Set out voltage
		Set_OutReg_Voltage(channel, ChannelsStatus[channel].set_voltage);
 8002d02:	79fa      	ldrb	r2, [r7, #7]
 8002d04:	493b      	ldr	r1, [pc, #236]	; (8002df4 <Set_Voltage_From_Ramping+0x1c0>)
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	3302      	adds	r3, #2
 8002d12:	881a      	ldrh	r2, [r3, #0]
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fe55 	bl	80029c8 <Set_OutReg_Voltage>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(ChannelsStatus[channel].set_voltage));
 8002d1e:	79fa      	ldrb	r2, [r7, #7]
 8002d20:	4934      	ldr	r1, [pc, #208]	; (8002df4 <Set_Voltage_From_Ramping+0x1c0>)
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fd79 	bl	8002828 <Get_PreRegulatorVoltage>
 8002d36:	4603      	mov	r3, r0
 8002d38:	461a      	mov	r2, r3
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	4611      	mov	r1, r2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff fe14 	bl	800296c <Set_PreReg_Voltage>

		//Reset ramping timer
		ChannelsChange[channel].voltage_ramp = true;
 8002d44:	79fa      	ldrb	r2, [r7, #7]
 8002d46:	492c      	ldr	r1, [pc, #176]	; (8002df8 <Set_Voltage_From_Ramping+0x1c4>)
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].voltage_ramp_timer = HAL_GetTick();
 8002d56:	79fc      	ldrb	r4, [r7, #7]
 8002d58:	f001 fe42 	bl	80049e0 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	4926      	ldr	r1, [pc, #152]	; (8002df8 <Set_Voltage_From_Ramping+0x1c4>)
 8002d60:	4623      	mov	r3, r4
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4423      	add	r3, r4
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	e03e      	b.n	8002dee <Set_Voltage_From_Ramping+0x1ba>
	}
	else
	{
		//Disable ramping timer
		ChannelsChange[channel].voltage_ramp = false;
 8002d70:	79fa      	ldrb	r2, [r7, #7]
 8002d72:	4921      	ldr	r1, [pc, #132]	; (8002df8 <Set_Voltage_From_Ramping+0x1c4>)
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]

		ChannelsStatus[channel].set_voltage = ChannelsChange[channel].request_voltage;
 8002d82:	79f9      	ldrb	r1, [r7, #7]
 8002d84:	79fa      	ldrb	r2, [r7, #7]
 8002d86:	481c      	ldr	r0, [pc, #112]	; (8002df8 <Set_Voltage_From_Ramping+0x1c4>)
 8002d88:	460b      	mov	r3, r1
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	4403      	add	r3, r0
 8002d92:	3310      	adds	r3, #16
 8002d94:	8818      	ldrh	r0, [r3, #0]
 8002d96:	4917      	ldr	r1, [pc, #92]	; (8002df4 <Set_Voltage_From_Ramping+0x1c0>)
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	3302      	adds	r3, #2
 8002da4:	4602      	mov	r2, r0
 8002da6:	801a      	strh	r2, [r3, #0]

		Set_OutReg_Voltage(channel, ChannelsStatus[channel].set_voltage);
 8002da8:	79fa      	ldrb	r2, [r7, #7]
 8002daa:	4912      	ldr	r1, [pc, #72]	; (8002df4 <Set_Voltage_From_Ramping+0x1c0>)
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	3302      	adds	r3, #2
 8002db8:	881a      	ldrh	r2, [r3, #0]
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fe02 	bl	80029c8 <Set_OutReg_Voltage>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(ChannelsStatus[channel].set_voltage));
 8002dc4:	79fa      	ldrb	r2, [r7, #7]
 8002dc6:	490b      	ldr	r1, [pc, #44]	; (8002df4 <Set_Voltage_From_Ramping+0x1c0>)
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	3302      	adds	r3, #2
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff fd26 	bl	8002828 <Get_PreRegulatorVoltage>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	461a      	mov	r2, r3
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	4611      	mov	r1, r2
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff fdc1 	bl	800296c <Set_PreReg_Voltage>
 8002dea:	e000      	b.n	8002dee <Set_Voltage_From_Ramping+0x1ba>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002dec:	bf00      	nop
	}

}
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd90      	pop	{r4, r7, pc}
 8002df4:	200007c4 	.word	0x200007c4
 8002df8:	20000800 	.word	0x20000800

08002dfc <Channel_Enable>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param enable -> true - enable, false disble 
 * 
 */
void Channel_Enable(uint8_t channel, bool enable)
{
 8002dfc:	b590      	push	{r4, r7, lr}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	460a      	mov	r2, r1
 8002e06:	71fb      	strb	r3, [r7, #7]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	71bb      	strb	r3, [r7, #6]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <Channel_Enable+0x22>
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d002      	beq.n	8002e1e <Channel_Enable+0x22>
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d174      	bne.n	8002f08 <Channel_Enable+0x10c>
	if(enable == ChannelsStatus[channel].enable) return;
 8002e1e:	79fa      	ldrb	r2, [r7, #7]
 8002e20:	493c      	ldr	r1, [pc, #240]	; (8002f14 <Channel_Enable+0x118>)
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	79ba      	ldrb	r2, [r7, #6]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d06b      	beq.n	8002f0c <Channel_Enable+0x110>


	ChannelsChange[channel].voltageBeforeEnable = ChannelsChange[channel].request_voltage;
 8002e34:	79f9      	ldrb	r1, [r7, #7]
 8002e36:	79fa      	ldrb	r2, [r7, #7]
 8002e38:	4837      	ldr	r0, [pc, #220]	; (8002f18 <Channel_Enable+0x11c>)
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4403      	add	r3, r0
 8002e44:	3310      	adds	r3, #16
 8002e46:	8818      	ldrh	r0, [r3, #0]
 8002e48:	4933      	ldr	r1, [pc, #204]	; (8002f18 <Channel_Enable+0x11c>)
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	3312      	adds	r3, #18
 8002e56:	4602      	mov	r2, r0
 8002e58:	801a      	strh	r2, [r3, #0]


	if(enable)
 8002e5a:	79bb      	ldrb	r3, [r7, #6]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d028      	beq.n	8002eb2 <Channel_Enable+0xb6>
	{
		//Set_Voltage(channel, minimum_voltage);
		Set_VoltageInEnable(channel);
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff feb4 	bl	8002bd0 <Set_VoltageInEnable>
		Enable_GPIO(channel, true);
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fb97 	bl	80025a0 <Enable_GPIO>
		ChannelsStatus[channel].enable = true;
 8002e72:	79fa      	ldrb	r2, [r7, #7]
 8002e74:	4927      	ldr	r1, [pc, #156]	; (8002f14 <Channel_Enable+0x118>)
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	2201      	movs	r2, #1
 8002e82:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].enable_request = true;
 8002e84:	79fa      	ldrb	r2, [r7, #7]
 8002e86:	4924      	ldr	r1, [pc, #144]	; (8002f18 <Channel_Enable+0x11c>)
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	3301      	adds	r3, #1
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].enable_timer = HAL_GetTick();
 8002e98:	79fc      	ldrb	r4, [r7, #7]
 8002e9a:	f001 fda1 	bl	80049e0 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	491d      	ldr	r1, [pc, #116]	; (8002f18 <Channel_Enable+0x11c>)
 8002ea2:	4623      	mov	r3, r4
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4423      	add	r3, r4
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	3308      	adds	r3, #8
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	e017      	b.n	8002ee2 <Channel_Enable+0xe6>
	}
	else
	{
		ChannelsChange[channel].enable_request = false;
 8002eb2:	79fa      	ldrb	r2, [r7, #7]
 8002eb4:	4918      	ldr	r1, [pc, #96]	; (8002f18 <Channel_Enable+0x11c>)
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	701a      	strb	r2, [r3, #0]
		ChannelsStatus[channel].enable = false;
 8002ec6:	79fa      	ldrb	r2, [r7, #7]
 8002ec8:	4912      	ldr	r1, [pc, #72]	; (8002f14 <Channel_Enable+0x118>)
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]
		Enable_GPIO(channel, false);
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	2100      	movs	r1, #0
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff fb5f 	bl	80025a0 <Enable_GPIO>
	}


	if(_ControlOutputWithChannelEnable) //je aktivni funkce ovladani vystupu s eneble
 8002ee2:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <Channel_Enable+0x120>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d011      	beq.n	8002f0e <Channel_Enable+0x112>
	{
		if(enable)
 8002eea:	79bb      	ldrb	r3, [r7, #6]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <Channel_Enable+0x100>
		{
			Channel_Output(channel, true);
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 f881 	bl	8002ffc <Channel_Output>
 8002efa:	e008      	b.n	8002f0e <Channel_Enable+0x112>
		}
		else
		{
			Channel_Output(channel, false);
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	2100      	movs	r1, #0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 f87b 	bl	8002ffc <Channel_Output>
 8002f06:	e002      	b.n	8002f0e <Channel_Enable+0x112>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002f08:	bf00      	nop
 8002f0a:	e000      	b.n	8002f0e <Channel_Enable+0x112>
	if(enable == ChannelsStatus[channel].enable) return;
 8002f0c:	bf00      	nop
		}
	}

}
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd90      	pop	{r4, r7, pc}
 8002f14:	200007c4 	.word	0x200007c4
 8002f18:	20000800 	.word	0x20000800
 8002f1c:	2000083c 	.word	0x2000083c

08002f20 <Channel_Polarity>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param polarity -> polarity of output voltage
 * 
 */
void Channel_Polarity(uint8_t channel, eOutputPolarity polarity)
{
 8002f20:	b590      	push	{r4, r7, lr}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	460a      	mov	r2, r1
 8002f2a:	71fb      	strb	r3, [r7, #7]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	71bb      	strb	r3, [r7, #6]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <Channel_Polarity+0x22>
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d002      	beq.n	8002f42 <Channel_Polarity+0x22>
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d14b      	bne.n	8002fda <Channel_Polarity+0xba>
	if(polarity == ChannelsStatus[channel].polarity) return;
 8002f42:	79fa      	ldrb	r2, [r7, #7]
 8002f44:	492a      	ldr	r1, [pc, #168]	; (8002ff0 <Channel_Polarity+0xd0>)
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	3304      	adds	r3, #4
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	79ba      	ldrb	r2, [r7, #6]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d041      	beq.n	8002fde <Channel_Polarity+0xbe>

	if(_ControlOutputWithChannelEnable && ChannelsStatus[channel].enable) return; // polarita nejde prepnout, kdyz je kanál zapnutý
 8002f5a:	4b26      	ldr	r3, [pc, #152]	; (8002ff4 <Channel_Polarity+0xd4>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d009      	beq.n	8002f76 <Channel_Polarity+0x56>
 8002f62:	79fa      	ldrb	r2, [r7, #7]
 8002f64:	4922      	ldr	r1, [pc, #136]	; (8002ff0 <Channel_Polarity+0xd0>)
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d135      	bne.n	8002fe2 <Channel_Polarity+0xc2>


	if(ChannelsChange[channel].polarity_request) return;
 8002f76:	79fa      	ldrb	r2, [r7, #7]
 8002f78:	491f      	ldr	r1, [pc, #124]	; (8002ff8 <Channel_Polarity+0xd8>)
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	3302      	adds	r3, #2
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d12c      	bne.n	8002fe6 <Channel_Polarity+0xc6>

	ChannelsStatus[channel].polarity = polarity;
 8002f8c:	79fa      	ldrb	r2, [r7, #7]
 8002f8e:	4918      	ldr	r1, [pc, #96]	; (8002ff0 <Channel_Polarity+0xd0>)
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	79ba      	ldrb	r2, [r7, #6]
 8002f9e:	701a      	strb	r2, [r3, #0]
	Output_GPIO(channel, false, false);
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff fb2c 	bl	8002604 <Output_GPIO>

	ChannelsChange[channel].polarity_request = true;
 8002fac:	79fa      	ldrb	r2, [r7, #7]
 8002fae:	4912      	ldr	r1, [pc, #72]	; (8002ff8 <Channel_Polarity+0xd8>)
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	3302      	adds	r3, #2
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	701a      	strb	r2, [r3, #0]
	ChannelsChange[channel].polarity_timer = HAL_GetTick();
 8002fc0:	79fc      	ldrb	r4, [r7, #7]
 8002fc2:	f001 fd0d 	bl	80049e0 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	490b      	ldr	r1, [pc, #44]	; (8002ff8 <Channel_Polarity+0xd8>)
 8002fca:	4623      	mov	r3, r4
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4423      	add	r3, r4
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	330c      	adds	r3, #12
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	e006      	b.n	8002fe8 <Channel_Polarity+0xc8>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002fda:	bf00      	nop
 8002fdc:	e004      	b.n	8002fe8 <Channel_Polarity+0xc8>
	if(polarity == ChannelsStatus[channel].polarity) return;
 8002fde:	bf00      	nop
 8002fe0:	e002      	b.n	8002fe8 <Channel_Polarity+0xc8>
	if(_ControlOutputWithChannelEnable && ChannelsStatus[channel].enable) return; // polarita nejde prepnout, kdyz je kanál zapnutý
 8002fe2:	bf00      	nop
 8002fe4:	e000      	b.n	8002fe8 <Channel_Polarity+0xc8>
	if(ChannelsChange[channel].polarity_request) return;
 8002fe6:	bf00      	nop

}
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd90      	pop	{r4, r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	200007c4 	.word	0x200007c4
 8002ff4:	2000083c 	.word	0x2000083c
 8002ff8:	20000800 	.word	0x20000800

08002ffc <Channel_Output>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param output -> true - output on, false - output off
 * 
 */
void Channel_Output(uint8_t channel, bool output)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	460a      	mov	r2, r1
 8003006:	71fb      	strb	r3, [r7, #7]
 8003008:	4613      	mov	r3, r2
 800300a:	71bb      	strb	r3, [r7, #6]

	if(_ControlOutputWithChannelEnable && ChannelsStatus[channel].enable && !ChannelsChange[channel].enable_request && output) return; // vystup nejde zapnout, kdyz je kanál zapnutý
 800300c:	4b28      	ldr	r3, [pc, #160]	; (80030b0 <Channel_Output+0xb4>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d01a      	beq.n	800304a <Channel_Output+0x4e>
 8003014:	79fa      	ldrb	r2, [r7, #7]
 8003016:	4927      	ldr	r1, [pc, #156]	; (80030b4 <Channel_Output+0xb8>)
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d010      	beq.n	800304a <Channel_Output+0x4e>
 8003028:	79fa      	ldrb	r2, [r7, #7]
 800302a:	4923      	ldr	r1, [pc, #140]	; (80030b8 <Channel_Output+0xbc>)
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	3301      	adds	r3, #1
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	f083 0301 	eor.w	r3, r3, #1
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <Channel_Output+0x4e>
 8003044:	79bb      	ldrb	r3, [r7, #6]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d12d      	bne.n	80030a6 <Channel_Output+0xaa>

	ChannelsStatus[channel].output = output;
 800304a:	79fa      	ldrb	r2, [r7, #7]
 800304c:	4919      	ldr	r1, [pc, #100]	; (80030b4 <Channel_Output+0xb8>)
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	3305      	adds	r3, #5
 800305a:	79ba      	ldrb	r2, [r7, #6]
 800305c:	701a      	strb	r2, [r3, #0]

	if(ChannelsStatus[channel].polarity == polarity_positive)
 800305e:	79fa      	ldrb	r2, [r7, #7]
 8003060:	4914      	ldr	r1, [pc, #80]	; (80030b4 <Channel_Output+0xb8>)
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	3304      	adds	r3, #4
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d106      	bne.n	8003082 <Channel_Output+0x86>
	{
		Output_GPIO(channel, output, false);
 8003074:	79b9      	ldrb	r1, [r7, #6]
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	2200      	movs	r2, #0
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff fac2 	bl	8002604 <Output_GPIO>
 8003080:	e012      	b.n	80030a8 <Channel_Output+0xac>
	}
	else if(ChannelsStatus[channel].polarity == polarity_negative)
 8003082:	79fa      	ldrb	r2, [r7, #7]
 8003084:	490b      	ldr	r1, [pc, #44]	; (80030b4 <Channel_Output+0xb8>)
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	3304      	adds	r3, #4
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d107      	bne.n	80030a8 <Channel_Output+0xac>
	{
		Output_GPIO(channel, false, output);
 8003098:	79ba      	ldrb	r2, [r7, #6]
 800309a:	79fb      	ldrb	r3, [r7, #7]
 800309c:	2100      	movs	r1, #0
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff fab0 	bl	8002604 <Output_GPIO>
 80030a4:	e000      	b.n	80030a8 <Channel_Output+0xac>
	if(_ControlOutputWithChannelEnable && ChannelsStatus[channel].enable && !ChannelsChange[channel].enable_request && output) return; // vystup nejde zapnout, kdyz je kanál zapnutý
 80030a6:	bf00      	nop
	}
}
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	2000083c 	.word	0x2000083c
 80030b4:	200007c4 	.word	0x200007c4
 80030b8:	20000800 	.word	0x20000800

080030bc <ChannelControl>:
 *
 * @param channel -> Channel of power supply (0,1,2)
 * 
 */
void ChannelControl(uint8_t channel)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	71fb      	strb	r3, [r7, #7]
	//voltage ramping
	if(ChannelsChange[channel].voltage_ramp)
 80030c6:	79fa      	ldrb	r2, [r7, #7]
 80030c8:	4954      	ldr	r1, [pc, #336]	; (800321c <ChannelControl+0x160>)
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d012      	beq.n	8003100 <ChannelControl+0x44>
	{
		if((HAL_GetTick()-ChannelsChange[channel].voltage_ramp_timer) >= ramp_t_step)
 80030da:	f001 fc81 	bl	80049e0 <HAL_GetTick>
 80030de:	4601      	mov	r1, r0
 80030e0:	79fa      	ldrb	r2, [r7, #7]
 80030e2:	484e      	ldr	r0, [pc, #312]	; (800321c <ChannelControl+0x160>)
 80030e4:	4613      	mov	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4403      	add	r3, r0
 80030ee:	3304      	adds	r3, #4
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	1acb      	subs	r3, r1, r3
 80030f4:	2bc7      	cmp	r3, #199	; 0xc7
 80030f6:	d903      	bls.n	8003100 <ChannelControl+0x44>
		{
			Set_Voltage_From_Ramping(channel);
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fd9a 	bl	8002c34 <Set_Voltage_From_Ramping>
		}
	}

	//enable control
	if(ChannelsChange[channel].enable_request)
 8003100:	79fa      	ldrb	r2, [r7, #7]
 8003102:	4946      	ldr	r1, [pc, #280]	; (800321c <ChannelControl+0x160>)
 8003104:	4613      	mov	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	3301      	adds	r3, #1
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d02c      	beq.n	8003170 <ChannelControl+0xb4>
	{
		if((HAL_GetTick()-ChannelsChange[channel].enable_timer) >= delay_enable)
 8003116:	f001 fc63 	bl	80049e0 <HAL_GetTick>
 800311a:	4601      	mov	r1, r0
 800311c:	79fa      	ldrb	r2, [r7, #7]
 800311e:	483f      	ldr	r0, [pc, #252]	; (800321c <ChannelControl+0x160>)
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4403      	add	r3, r0
 800312a:	3308      	adds	r3, #8
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	1acb      	subs	r3, r1, r3
 8003130:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003134:	d31c      	bcc.n	8003170 <ChannelControl+0xb4>
		{
			ChannelsChange[channel].enable_request = false;
 8003136:	79fa      	ldrb	r2, [r7, #7]
 8003138:	4938      	ldr	r1, [pc, #224]	; (800321c <ChannelControl+0x160>)
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	3301      	adds	r3, #1
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
			Enable_GPIO(channel, true);
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	2101      	movs	r1, #1
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fa26 	bl	80025a0 <Enable_GPIO>
			//nastavit napeti
			Set_Voltage(channel, ChannelsChange[channel].request_voltage );
 8003154:	79fa      	ldrb	r2, [r7, #7]
 8003156:	4931      	ldr	r1, [pc, #196]	; (800321c <ChannelControl+0x160>)
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	3310      	adds	r3, #16
 8003164:	881a      	ldrh	r2, [r3, #0]
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	4611      	mov	r1, r2
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff fc5e 	bl	8002a2c <Set_Voltage>
		}
	}

	//polarity change control
	if(ChannelsChange[channel].polarity_request)
 8003170:	79fa      	ldrb	r2, [r7, #7]
 8003172:	492a      	ldr	r1, [pc, #168]	; (800321c <ChannelControl+0x160>)
 8003174:	4613      	mov	r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	3302      	adds	r3, #2
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d045      	beq.n	8003212 <ChannelControl+0x156>
	{
		if((HAL_GetTick()-ChannelsChange[channel].polarity_timer) >= delay_polarity)
 8003186:	f001 fc2b 	bl	80049e0 <HAL_GetTick>
 800318a:	4601      	mov	r1, r0
 800318c:	79fa      	ldrb	r2, [r7, #7]
 800318e:	4823      	ldr	r0, [pc, #140]	; (800321c <ChannelControl+0x160>)
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4403      	add	r3, r0
 800319a:	330c      	adds	r3, #12
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	1acb      	subs	r3, r1, r3
 80031a0:	2bc7      	cmp	r3, #199	; 0xc7
 80031a2:	d936      	bls.n	8003212 <ChannelControl+0x156>
		{
			ChannelsChange[channel].polarity_request = false;
 80031a4:	79fa      	ldrb	r2, [r7, #7]
 80031a6:	491d      	ldr	r1, [pc, #116]	; (800321c <ChannelControl+0x160>)
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	3302      	adds	r3, #2
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]
			bool output = ChannelsStatus[channel].output;
 80031b8:	79fa      	ldrb	r2, [r7, #7]
 80031ba:	4919      	ldr	r1, [pc, #100]	; (8003220 <ChannelControl+0x164>)
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	3305      	adds	r3, #5
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	73fb      	strb	r3, [r7, #15]

			if(ChannelsStatus[channel].polarity == polarity_positive)
 80031cc:	79fa      	ldrb	r2, [r7, #7]
 80031ce:	4914      	ldr	r1, [pc, #80]	; (8003220 <ChannelControl+0x164>)
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	3304      	adds	r3, #4
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d106      	bne.n	80031f0 <ChannelControl+0x134>
			{
				Output_GPIO(channel, output, false);
 80031e2:	7bf9      	ldrb	r1, [r7, #15]
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	2200      	movs	r2, #0
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fa0b 	bl	8002604 <Output_GPIO>
				Output_GPIO(channel, false, output);
			}

		}
	}
}
 80031ee:	e010      	b.n	8003212 <ChannelControl+0x156>
			else if(ChannelsStatus[channel].polarity == polarity_negative)
 80031f0:	79fa      	ldrb	r2, [r7, #7]
 80031f2:	490b      	ldr	r1, [pc, #44]	; (8003220 <ChannelControl+0x164>)
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	3304      	adds	r3, #4
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d105      	bne.n	8003212 <ChannelControl+0x156>
				Output_GPIO(channel, false, output);
 8003206:	7bfa      	ldrb	r2, [r7, #15]
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	2100      	movs	r1, #0
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff f9f9 	bl	8002604 <Output_GPIO>
}
 8003212:	bf00      	nop
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000800 	.word	0x20000800
 8003220:	200007c4 	.word	0x200007c4

08003224 <Get_ChannelVoltage>:
 *
 * @param channel -> Channel of power supply (0,1,2)
 * 
 */
void Get_ChannelVoltage(uint8_t channel)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <Get_ChannelVoltage+0x1c>
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d002      	beq.n	8003240 <Get_ChannelVoltage+0x1c>
 800323a:	79fb      	ldrb	r3, [r7, #7]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d112      	bne.n	8003266 <Get_ChannelVoltage+0x42>

	//SendCommunication(cmd_get_voltage_CH1 + channel, ChannelsStatus[channel].voltage_measurement*100);
	SendCommunication_float(cmd_get_voltage_CH1 + channel, ChannelsStatus[channel].voltage_measurement);
 8003240:	79fb      	ldrb	r3, [r7, #7]
 8003242:	330e      	adds	r3, #14
 8003244:	b2d9      	uxtb	r1, r3
 8003246:	79fa      	ldrb	r2, [r7, #7]
 8003248:	4809      	ldr	r0, [pc, #36]	; (8003270 <Get_ChannelVoltage+0x4c>)
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4403      	add	r3, r0
 8003254:	3308      	adds	r3, #8
 8003256:	edd3 7a00 	vldr	s15, [r3]
 800325a:	eeb0 0a67 	vmov.f32	s0, s15
 800325e:	4608      	mov	r0, r1
 8003260:	f7fe fd24 	bl	8001cac <SendCommunication_float>
 8003264:	e000      	b.n	8003268 <Get_ChannelVoltage+0x44>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8003266:	bf00      	nop
}
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	200007c4 	.word	0x200007c4

08003274 <Get_ChannelCurrent>:
 *
 * @param channel -> Channel of power supply (0,1,2)
 * 
 */
void Get_ChannelCurrent(uint8_t channel)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <Get_ChannelCurrent+0x1c>
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d002      	beq.n	8003290 <Get_ChannelCurrent+0x1c>
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d112      	bne.n	80032b6 <Get_ChannelCurrent+0x42>

	//SendCommunication(cmd_get_current_CH1 + channel, ChannelsStatus[channel].current_measurement*1000);
	SendCommunication_float(cmd_get_current_CH1 + channel, ChannelsStatus[channel].current_measurement);
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	3311      	adds	r3, #17
 8003294:	b2d9      	uxtb	r1, r3
 8003296:	79fa      	ldrb	r2, [r7, #7]
 8003298:	4809      	ldr	r0, [pc, #36]	; (80032c0 <Get_ChannelCurrent+0x4c>)
 800329a:	4613      	mov	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4403      	add	r3, r0
 80032a4:	330c      	adds	r3, #12
 80032a6:	edd3 7a00 	vldr	s15, [r3]
 80032aa:	eeb0 0a67 	vmov.f32	s0, s15
 80032ae:	4608      	mov	r0, r1
 80032b0:	f7fe fcfc 	bl	8001cac <SendCommunication_float>
 80032b4:	e000      	b.n	80032b8 <Get_ChannelCurrent+0x44>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 80032b6:	bf00      	nop
}
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	200007c4 	.word	0x200007c4

080032c4 <Get_ErrorSignals>:

void Get_ErrorSignals()
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
	uint8_t error_reg = 0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	71fb      	strb	r3, [r7, #7]

	error_reg |= ChannelsStatus[0].power_good << 0;
 80032ce:	4b20      	ldr	r3, [pc, #128]	; (8003350 <Get_ErrorSignals+0x8c>)
 80032d0:	7c5b      	ldrb	r3, [r3, #17]
 80032d2:	461a      	mov	r2, r3
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	71fb      	strb	r3, [r7, #7]
	error_reg |= ChannelsStatus[1].power_good << 1;
 80032da:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <Get_ErrorSignals+0x8c>)
 80032dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	b25a      	sxtb	r2, r3
 80032e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	b25b      	sxtb	r3, r3
 80032ec:	71fb      	strb	r3, [r7, #7]
	error_reg |= ChannelsStatus[2].power_good << 2;
 80032ee:	4b18      	ldr	r3, [pc, #96]	; (8003350 <Get_ErrorSignals+0x8c>)
 80032f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	b25a      	sxtb	r2, r3
 80032f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	b25b      	sxtb	r3, r3
 8003300:	71fb      	strb	r3, [r7, #7]

	error_reg |= ChannelsStatus[0].over_current << 3;
 8003302:	4b13      	ldr	r3, [pc, #76]	; (8003350 <Get_ErrorSignals+0x8c>)
 8003304:	7c1b      	ldrb	r3, [r3, #16]
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	b25a      	sxtb	r2, r3
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	4313      	orrs	r3, r2
 8003310:	b25b      	sxtb	r3, r3
 8003312:	71fb      	strb	r3, [r7, #7]
	error_reg |= ChannelsStatus[1].over_current << 4;
 8003314:	4b0e      	ldr	r3, [pc, #56]	; (8003350 <Get_ErrorSignals+0x8c>)
 8003316:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	b25a      	sxtb	r2, r3
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	4313      	orrs	r3, r2
 8003324:	b25b      	sxtb	r3, r3
 8003326:	71fb      	strb	r3, [r7, #7]
	error_reg |= ChannelsStatus[2].over_current << 5;
 8003328:	4b09      	ldr	r3, [pc, #36]	; (8003350 <Get_ErrorSignals+0x8c>)
 800332a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800332e:	015b      	lsls	r3, r3, #5
 8003330:	b25a      	sxtb	r2, r3
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	4313      	orrs	r3, r2
 8003338:	b25b      	sxtb	r3, r3
 800333a:	71fb      	strb	r3, [r7, #7]

	SendCommunication(cmd_error_signals, error_reg);
 800333c:	79fb      	ldrb	r3, [r7, #7]
 800333e:	4619      	mov	r1, r3
 8003340:	2014      	movs	r0, #20
 8003342:	f7fe fc5d 	bl	8001c00 <SendCommunication>
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	200007c4 	.word	0x200007c4

08003354 <Get_AllMeasurement>:
/* @brief Send by communication all measured value, all voltages and currents
 *
 * 
 */
void Get_AllMeasurement()
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
	Get_ChannelVoltage(0);
 8003358:	2000      	movs	r0, #0
 800335a:	f7ff ff63 	bl	8003224 <Get_ChannelVoltage>
	Get_ChannelVoltage(1);
 800335e:	2001      	movs	r0, #1
 8003360:	f7ff ff60 	bl	8003224 <Get_ChannelVoltage>
	Get_ChannelVoltage(2);
 8003364:	2002      	movs	r0, #2
 8003366:	f7ff ff5d 	bl	8003224 <Get_ChannelVoltage>
	Get_ChannelCurrent(0);
 800336a:	2000      	movs	r0, #0
 800336c:	f7ff ff82 	bl	8003274 <Get_ChannelCurrent>
	Get_ChannelCurrent(1);
 8003370:	2001      	movs	r0, #1
 8003372:	f7ff ff7f 	bl	8003274 <Get_ChannelCurrent>
	Get_ChannelCurrent(2);
 8003376:	2002      	movs	r0, #2
 8003378:	f7ff ff7c 	bl	8003274 <Get_ChannelCurrent>

	Get_ErrorSignals();
 800337c:	f7ff ffa2 	bl	80032c4 <Get_ErrorSignals>
}
 8003380:	bf00      	nop
 8003382:	bd80      	pop	{r7, pc}

08003384 <Get_Setting>:
/* @brief Send by communication setting of power supply
 *
 * 
 */
void Get_Setting()
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
	SendCommunication(cmd_set_voltage_CH1, ChannelsChange[0].request_voltage);
 8003388:	4b29      	ldr	r3, [pc, #164]	; (8003430 <Get_Setting+0xac>)
 800338a:	8a1b      	ldrh	r3, [r3, #16]
 800338c:	4619      	mov	r1, r3
 800338e:	2008      	movs	r0, #8
 8003390:	f7fe fc36 	bl	8001c00 <SendCommunication>
	SendCommunication(cmd_set_voltage_CH2, ChannelsChange[1].request_voltage);
 8003394:	4b26      	ldr	r3, [pc, #152]	; (8003430 <Get_Setting+0xac>)
 8003396:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003398:	4619      	mov	r1, r3
 800339a:	2009      	movs	r0, #9
 800339c:	f7fe fc30 	bl	8001c00 <SendCommunication>
	SendCommunication(cmd_set_voltage_CH3, ChannelsChange[2].request_voltage);
 80033a0:	4b23      	ldr	r3, [pc, #140]	; (8003430 <Get_Setting+0xac>)
 80033a2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80033a4:	4619      	mov	r1, r3
 80033a6:	200a      	movs	r0, #10
 80033a8:	f7fe fc2a 	bl	8001c00 <SendCommunication>

	//SendCommunication(cmd_set_voltage_CH1,ChannelsStatus[0].set_voltage);
	//SendCommunication(cmd_set_voltage_CH2,ChannelsStatus[1].set_voltage);
	//SendCommunication(cmd_set_voltage_CH3,ChannelsStatus[2].set_voltage);

	SendCommunication(cmd_enable_CH1, ChannelsStatus[0].enable);
 80033ac:	4b21      	ldr	r3, [pc, #132]	; (8003434 <Get_Setting+0xb0>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	4619      	mov	r1, r3
 80033b2:	2002      	movs	r0, #2
 80033b4:	f7fe fc24 	bl	8001c00 <SendCommunication>
	SendCommunication(cmd_enable_CH2, ChannelsStatus[1].enable);
 80033b8:	4b1e      	ldr	r3, [pc, #120]	; (8003434 <Get_Setting+0xb0>)
 80033ba:	7d1b      	ldrb	r3, [r3, #20]
 80033bc:	4619      	mov	r1, r3
 80033be:	2003      	movs	r0, #3
 80033c0:	f7fe fc1e 	bl	8001c00 <SendCommunication>
	SendCommunication(cmd_enable_CH3, ChannelsStatus[2].enable);
 80033c4:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <Get_Setting+0xb0>)
 80033c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033ca:	4619      	mov	r1, r3
 80033cc:	2004      	movs	r0, #4
 80033ce:	f7fe fc17 	bl	8001c00 <SendCommunication>

	SendCommunication(cmd_polarity_CH1, ChannelsStatus[0].polarity + 1);
 80033d2:	4b18      	ldr	r3, [pc, #96]	; (8003434 <Get_Setting+0xb0>)
 80033d4:	791b      	ldrb	r3, [r3, #4]
 80033d6:	3301      	adds	r3, #1
 80033d8:	4619      	mov	r1, r3
 80033da:	200b      	movs	r0, #11
 80033dc:	f7fe fc10 	bl	8001c00 <SendCommunication>
	SendCommunication(cmd_polarity_CH2, ChannelsStatus[1].polarity + 1);
 80033e0:	4b14      	ldr	r3, [pc, #80]	; (8003434 <Get_Setting+0xb0>)
 80033e2:	7e1b      	ldrb	r3, [r3, #24]
 80033e4:	3301      	adds	r3, #1
 80033e6:	4619      	mov	r1, r3
 80033e8:	200c      	movs	r0, #12
 80033ea:	f7fe fc09 	bl	8001c00 <SendCommunication>
	SendCommunication(cmd_polarity_CH3, ChannelsStatus[2].polarity + 1);
 80033ee:	4b11      	ldr	r3, [pc, #68]	; (8003434 <Get_Setting+0xb0>)
 80033f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80033f4:	3301      	adds	r3, #1
 80033f6:	4619      	mov	r1, r3
 80033f8:	200d      	movs	r0, #13
 80033fa:	f7fe fc01 	bl	8001c00 <SendCommunication>

	SendCommunication(cmd_output_CH1, ChannelsStatus[0].output);
 80033fe:	4b0d      	ldr	r3, [pc, #52]	; (8003434 <Get_Setting+0xb0>)
 8003400:	795b      	ldrb	r3, [r3, #5]
 8003402:	4619      	mov	r1, r3
 8003404:	2005      	movs	r0, #5
 8003406:	f7fe fbfb 	bl	8001c00 <SendCommunication>
	SendCommunication(cmd_output_CH2, ChannelsStatus[1].output);
 800340a:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <Get_Setting+0xb0>)
 800340c:	7e5b      	ldrb	r3, [r3, #25]
 800340e:	4619      	mov	r1, r3
 8003410:	2006      	movs	r0, #6
 8003412:	f7fe fbf5 	bl	8001c00 <SendCommunication>
	SendCommunication(cmd_output_CH3, ChannelsStatus[2].output);
 8003416:	4b07      	ldr	r3, [pc, #28]	; (8003434 <Get_Setting+0xb0>)
 8003418:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800341c:	4619      	mov	r1, r3
 800341e:	2007      	movs	r0, #7
 8003420:	f7fe fbee 	bl	8001c00 <SendCommunication>

	SendCommunication(cmd_thats_all, 1);
 8003424:	2101      	movs	r1, #1
 8003426:	2017      	movs	r0, #23
 8003428:	f7fe fbea 	bl	8001c00 <SendCommunication>
}
 800342c:	bf00      	nop
 800342e:	bd80      	pop	{r7, pc}
 8003430:	20000800 	.word	0x20000800
 8003434:	200007c4 	.word	0x200007c4

08003438 <System_Reset>:
/* @brief reset MCU
 *
 *
 */
void System_Reset()
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800343c:	f3bf 8f4f 	dsb	sy
}
 8003440:	bf00      	nop
	__DSB();
	SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) | (SCB_AIRCR_SYSRESETREQ_Msk));
 8003442:	4b03      	ldr	r3, [pc, #12]	; (8003450 <System_Reset+0x18>)
 8003444:	4a03      	ldr	r2, [pc, #12]	; (8003454 <System_Reset+0x1c>)
 8003446:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003448:	f3bf 8f4f 	dsb	sy
}
 800344c:	bf00      	nop
	__DSB();
	while(1);
 800344e:	e7fe      	b.n	800344e <System_Reset+0x16>
 8003450:	e000ed00 	.word	0xe000ed00
 8003454:	05fa0004 	.word	0x05fa0004

08003458 <MakeUint32FromFloat>:
FlashSectorParams MainParams;
FlashSectorParams DefaultParams;


uint32_t MakeUint32FromFloat(float value)
{
 8003458:	b480      	push	{r7}
 800345a:	b085      	sub	sp, #20
 800345c:	af00      	add	r7, sp, #0
 800345e:	ed87 0a01 	vstr	s0, [r7, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
	uint32_t x;
	memcpy(&x,&value,sizeof(x));
 8003464:	60fb      	str	r3, [r7, #12]

	return x;
 8003466:	68fb      	ldr	r3, [r7, #12]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3714      	adds	r7, #20
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <ParamsDefaultValues>:

void ParamsDefaultValues()
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0

	DefaultParams.sramOffset_StoreControl_0 = 0;
 8003478:	4b47      	ldr	r3, [pc, #284]	; (8003598 <ParamsDefaultValues+0x124>)
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
	DefaultParams.sramOffset_StoreControl_1 = 0;
 800347e:	4b46      	ldr	r3, [pc, #280]	; (8003598 <ParamsDefaultValues+0x124>)
 8003480:	2200      	movs	r2, #0
 8003482:	605a      	str	r2, [r3, #4]

	DefaultParams.sramOffset_IP_ADDRESS = ip_MAKEU32(192,168,0,22);
 8003484:	4b44      	ldr	r3, [pc, #272]	; (8003598 <ParamsDefaultValues+0x124>)
 8003486:	4a45      	ldr	r2, [pc, #276]	; (800359c <ParamsDefaultValues+0x128>)
 8003488:	609a      	str	r2, [r3, #8]
	DefaultParams.sramOffset_NETMASK_ADDRESS = ip_MAKEU32(255,255,255,0);
 800348a:	4b43      	ldr	r3, [pc, #268]	; (8003598 <ParamsDefaultValues+0x124>)
 800348c:	f06f 02ff 	mvn.w	r2, #255	; 0xff
 8003490:	60da      	str	r2, [r3, #12]
	DefaultParams.sramOffset_GATEWAY_ADDRESS = ip_MAKEU32(192,168,0,1);
 8003492:	4b41      	ldr	r3, [pc, #260]	; (8003598 <ParamsDefaultValues+0x124>)
 8003494:	4a42      	ldr	r2, [pc, #264]	; (80035a0 <ParamsDefaultValues+0x12c>)
 8003496:	611a      	str	r2, [r3, #16]

	DefaultParams.sramOffset_ReadCoef_k_0 = MakeUint32FromFloat(0.00540804);
 8003498:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80035a4 <ParamsDefaultValues+0x130>
 800349c:	f7ff ffdc 	bl	8003458 <MakeUint32FromFloat>
 80034a0:	4603      	mov	r3, r0
 80034a2:	4a3d      	ldr	r2, [pc, #244]	; (8003598 <ParamsDefaultValues+0x124>)
 80034a4:	6153      	str	r3, [r2, #20]
	DefaultParams.sramOffset_ReadCoef_k_1 = MakeUint32FromFloat(0.00540804);
 80034a6:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 80035a4 <ParamsDefaultValues+0x130>
 80034aa:	f7ff ffd5 	bl	8003458 <MakeUint32FromFloat>
 80034ae:	4603      	mov	r3, r0
 80034b0:	4a39      	ldr	r2, [pc, #228]	; (8003598 <ParamsDefaultValues+0x124>)
 80034b2:	6193      	str	r3, [r2, #24]
	DefaultParams.sramOffset_ReadCoef_k_2 = MakeUint32FromFloat(0.00540804);
 80034b4:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 80035a4 <ParamsDefaultValues+0x130>
 80034b8:	f7ff ffce 	bl	8003458 <MakeUint32FromFloat>
 80034bc:	4603      	mov	r3, r0
 80034be:	4a36      	ldr	r2, [pc, #216]	; (8003598 <ParamsDefaultValues+0x124>)
 80034c0:	61d3      	str	r3, [r2, #28]
	DefaultParams.sramOffset_ReadCoef_k_3 = MakeUint32FromFloat(0.06175469);
 80034c2:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80035a8 <ParamsDefaultValues+0x134>
 80034c6:	f7ff ffc7 	bl	8003458 <MakeUint32FromFloat>
 80034ca:	4603      	mov	r3, r0
 80034cc:	4a32      	ldr	r2, [pc, #200]	; (8003598 <ParamsDefaultValues+0x124>)
 80034ce:	6213      	str	r3, [r2, #32]
	DefaultParams.sramOffset_ReadCoef_k_4 = MakeUint32FromFloat(0.06175469);
 80034d0:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80035a8 <ParamsDefaultValues+0x134>
 80034d4:	f7ff ffc0 	bl	8003458 <MakeUint32FromFloat>
 80034d8:	4603      	mov	r3, r0
 80034da:	4a2f      	ldr	r2, [pc, #188]	; (8003598 <ParamsDefaultValues+0x124>)
 80034dc:	6253      	str	r3, [r2, #36]	; 0x24
	DefaultParams.sramOffset_ReadCoef_k_5 = MakeUint32FromFloat(0.06175469);
 80034de:	ed9f 0a32 	vldr	s0, [pc, #200]	; 80035a8 <ParamsDefaultValues+0x134>
 80034e2:	f7ff ffb9 	bl	8003458 <MakeUint32FromFloat>
 80034e6:	4603      	mov	r3, r0
 80034e8:	4a2b      	ldr	r2, [pc, #172]	; (8003598 <ParamsDefaultValues+0x124>)
 80034ea:	6293      	str	r3, [r2, #40]	; 0x28

	DefaultParams.sramOffset_ReadCoef_q_0 = MakeUint32FromFloat(0.09030197);
 80034ec:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 80035ac <ParamsDefaultValues+0x138>
 80034f0:	f7ff ffb2 	bl	8003458 <MakeUint32FromFloat>
 80034f4:	4603      	mov	r3, r0
 80034f6:	4a28      	ldr	r2, [pc, #160]	; (8003598 <ParamsDefaultValues+0x124>)
 80034f8:	62d3      	str	r3, [r2, #44]	; 0x2c
	DefaultParams.sramOffset_ReadCoef_q_1 = MakeUint32FromFloat(0.09030197);
 80034fa:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80035ac <ParamsDefaultValues+0x138>
 80034fe:	f7ff ffab 	bl	8003458 <MakeUint32FromFloat>
 8003502:	4603      	mov	r3, r0
 8003504:	4a24      	ldr	r2, [pc, #144]	; (8003598 <ParamsDefaultValues+0x124>)
 8003506:	6313      	str	r3, [r2, #48]	; 0x30
	DefaultParams.sramOffset_ReadCoef_q_2 = MakeUint32FromFloat(0.09030197);
 8003508:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80035ac <ParamsDefaultValues+0x138>
 800350c:	f7ff ffa4 	bl	8003458 <MakeUint32FromFloat>
 8003510:	4603      	mov	r3, r0
 8003512:	4a21      	ldr	r2, [pc, #132]	; (8003598 <ParamsDefaultValues+0x124>)
 8003514:	6353      	str	r3, [r2, #52]	; 0x34
	DefaultParams.sramOffset_ReadCoef_q_3 = MakeUint32FromFloat(0.06370294);
 8003516:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80035b0 <ParamsDefaultValues+0x13c>
 800351a:	f7ff ff9d 	bl	8003458 <MakeUint32FromFloat>
 800351e:	4603      	mov	r3, r0
 8003520:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <ParamsDefaultValues+0x124>)
 8003522:	6393      	str	r3, [r2, #56]	; 0x38
	DefaultParams.sramOffset_ReadCoef_q_4 = MakeUint32FromFloat(0.06370294);
 8003524:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80035b0 <ParamsDefaultValues+0x13c>
 8003528:	f7ff ff96 	bl	8003458 <MakeUint32FromFloat>
 800352c:	4603      	mov	r3, r0
 800352e:	4a1a      	ldr	r2, [pc, #104]	; (8003598 <ParamsDefaultValues+0x124>)
 8003530:	63d3      	str	r3, [r2, #60]	; 0x3c
	DefaultParams.sramOffset_ReadCoef_q_5 = MakeUint32FromFloat(0.06370294);
 8003532:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80035b0 <ParamsDefaultValues+0x13c>
 8003536:	f7ff ff8f 	bl	8003458 <MakeUint32FromFloat>
 800353a:	4603      	mov	r3, r0
 800353c:	4a16      	ldr	r2, [pc, #88]	; (8003598 <ParamsDefaultValues+0x124>)
 800353e:	6413      	str	r3, [r2, #64]	; 0x40

	DefaultParams.sramOffset_AdjCoef_k_ch0 = Default_AdjCoef_k;
 8003540:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80035b4 <ParamsDefaultValues+0x140>
 8003544:	f7ff ff88 	bl	8003458 <MakeUint32FromFloat>
 8003548:	4603      	mov	r3, r0
 800354a:	4a13      	ldr	r2, [pc, #76]	; (8003598 <ParamsDefaultValues+0x124>)
 800354c:	6453      	str	r3, [r2, #68]	; 0x44
	DefaultParams.sramOffset_AdjCoef_k_ch1  = Default_AdjCoef_k;
 800354e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80035b4 <ParamsDefaultValues+0x140>
 8003552:	f7ff ff81 	bl	8003458 <MakeUint32FromFloat>
 8003556:	4603      	mov	r3, r0
 8003558:	4a0f      	ldr	r2, [pc, #60]	; (8003598 <ParamsDefaultValues+0x124>)
 800355a:	6493      	str	r3, [r2, #72]	; 0x48
	DefaultParams.sramOffset_AdjCoef_k_ch2  = Default_AdjCoef_k;
 800355c:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80035b4 <ParamsDefaultValues+0x140>
 8003560:	f7ff ff7a 	bl	8003458 <MakeUint32FromFloat>
 8003564:	4603      	mov	r3, r0
 8003566:	4a0c      	ldr	r2, [pc, #48]	; (8003598 <ParamsDefaultValues+0x124>)
 8003568:	64d3      	str	r3, [r2, #76]	; 0x4c
	DefaultParams.sramOffset_AdjCoef_q_ch0 = Default_AdjCoef_q;
 800356a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80035b8 <ParamsDefaultValues+0x144>
 800356e:	f7ff ff73 	bl	8003458 <MakeUint32FromFloat>
 8003572:	4603      	mov	r3, r0
 8003574:	4a08      	ldr	r2, [pc, #32]	; (8003598 <ParamsDefaultValues+0x124>)
 8003576:	6513      	str	r3, [r2, #80]	; 0x50
	DefaultParams.sramOffset_AdjCoef_q_ch1 = Default_AdjCoef_q;
 8003578:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80035b8 <ParamsDefaultValues+0x144>
 800357c:	f7ff ff6c 	bl	8003458 <MakeUint32FromFloat>
 8003580:	4603      	mov	r3, r0
 8003582:	4a05      	ldr	r2, [pc, #20]	; (8003598 <ParamsDefaultValues+0x124>)
 8003584:	6553      	str	r3, [r2, #84]	; 0x54
	DefaultParams.sramOffset_AdjCoef_q_ch2  = Default_AdjCoef_q;
 8003586:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80035b8 <ParamsDefaultValues+0x144>
 800358a:	f7ff ff65 	bl	8003458 <MakeUint32FromFloat>
 800358e:	4603      	mov	r3, r0
 8003590:	4a01      	ldr	r2, [pc, #4]	; (8003598 <ParamsDefaultValues+0x124>)
 8003592:	6593      	str	r3, [r2, #88]	; 0x58


}
 8003594:	bf00      	nop
 8003596:	bd80      	pop	{r7, pc}
 8003598:	2000089c 	.word	0x2000089c
 800359c:	c0a80016 	.word	0xc0a80016
 80035a0:	c0a80001 	.word	0xc0a80001
 80035a4:	3bb135ed 	.word	0x3bb135ed
 80035a8:	3d7cf27c 	.word	0x3d7cf27c
 80035ac:	3db8f03d 	.word	0x3db8f03d
 80035b0:	3d8276b0 	.word	0x3d8276b0
 80035b4:	43ffe8bc 	.word	0x43ffe8bc
 80035b8:	4423d0f3 	.word	0x4423d0f3

080035bc <ParamsLoad>:



void ParamsLoad()
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b09a      	sub	sp, #104	; 0x68
 80035c0:	af00      	add	r7, sp, #0

	FlashSectorParams LoadParams;

	Flash_ReadParamStruct(&LoadParams);
 80035c2:	463b      	mov	r3, r7
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 fbcf 	bl	8003d68 <Flash_ReadParamStruct>

	uint32_t StoreControl_0 = LoadParams.sramOffset_StoreControl_0;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	663b      	str	r3, [r7, #96]	; 0x60
	uint32_t StoreControl_1 = LoadParams.sramOffset_StoreControl_1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	65fb      	str	r3, [r7, #92]	; 0x5c


	for(int i = 2; i < NUMBER_OF_PARAMS;i++)
 80035d2:	2302      	movs	r3, #2
 80035d4:	667b      	str	r3, [r7, #100]	; 0x64
 80035d6:	e023      	b.n	8003620 <ParamsLoad+0x64>
	{
		if((StoreControl_0 == STORE_VALIDE_CODE) &&  ((StoreControl_1 >> i) & 0x000001))
 80035d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035da:	4a15      	ldr	r2, [pc, #84]	; (8003630 <ParamsLoad+0x74>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d112      	bne.n	8003606 <ParamsLoad+0x4a>
 80035e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035e4:	fa22 f303 	lsr.w	r3, r2, r3
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <ParamsLoad+0x4a>
		{
			*((uint32_t*)(&MainParams)+i) = *((uint32_t*)(&LoadParams)+i);
 80035f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	463a      	mov	r2, r7
 80035f6:	441a      	add	r2, r3
 80035f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	490d      	ldr	r1, [pc, #52]	; (8003634 <ParamsLoad+0x78>)
 80035fe:	440b      	add	r3, r1
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	e009      	b.n	800361a <ParamsLoad+0x5e>


		}
		else
		{
			*((uint32_t*)(&MainParams)+i) = *((uint32_t*)(&DefaultParams)+i);
 8003606:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4a0b      	ldr	r2, [pc, #44]	; (8003638 <ParamsLoad+0x7c>)
 800360c:	441a      	add	r2, r3
 800360e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4908      	ldr	r1, [pc, #32]	; (8003634 <ParamsLoad+0x78>)
 8003614:	440b      	add	r3, r1
 8003616:	6812      	ldr	r2, [r2, #0]
 8003618:	601a      	str	r2, [r3, #0]
	for(int i = 2; i < NUMBER_OF_PARAMS;i++)
 800361a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800361c:	3301      	adds	r3, #1
 800361e:	667b      	str	r3, [r7, #100]	; 0x64
 8003620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003622:	2b16      	cmp	r3, #22
 8003624:	d9d8      	bls.n	80035d8 <ParamsLoad+0x1c>
		}
	}

}
 8003626:	bf00      	nop
 8003628:	bf00      	nop
 800362a:	3768      	adds	r7, #104	; 0x68
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	a4b7a4b7 	.word	0xa4b7a4b7
 8003634:	20000840 	.word	0x20000840
 8003638:	2000089c 	.word	0x2000089c

0800363c <SendCommandToDAC>:
 * @param value -> value to write in DAC register
 * @param rw    -> read/write bit
 *
 */
void SendCommandToDAC(uint8_t adr, uint16_t value,  bool rw)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	71fb      	strb	r3, [r7, #7]
 8003646:	460b      	mov	r3, r1
 8003648:	80bb      	strh	r3, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	71bb      	strb	r3, [r7, #6]

	uint8_t data[3];

	data[2] = value & (0x00FF);
 800364e:	88bb      	ldrh	r3, [r7, #4]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	73bb      	strb	r3, [r7, #14]
	data[1] = value >> 8;
 8003654:	88bb      	ldrh	r3, [r7, #4]
 8003656:	0a1b      	lsrs	r3, r3, #8
 8003658:	b29b      	uxth	r3, r3
 800365a:	b2db      	uxtb	r3, r3
 800365c:	737b      	strb	r3, [r7, #13]
	data[0] = (adr & 0x0F) | (rw << 7);
 800365e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	b25a      	sxtb	r2, r3
 8003668:	79bb      	ldrb	r3, [r7, #6]
 800366a:	01db      	lsls	r3, r3, #7
 800366c:	b25b      	sxtb	r3, r3
 800366e:	4313      	orrs	r3, r2
 8003670:	b25b      	sxtb	r3, r3
 8003672:	b2db      	uxtb	r3, r3
 8003674:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8003676:	2200      	movs	r2, #0
 8003678:	2110      	movs	r1, #16
 800367a:	4809      	ldr	r0, [pc, #36]	; (80036a0 <SendCommandToDAC+0x64>)
 800367c:	f001 fedc 	bl	8005438 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, sizeof(data),10);
 8003680:	f107 010c 	add.w	r1, r7, #12
 8003684:	230a      	movs	r3, #10
 8003686:	2203      	movs	r2, #3
 8003688:	4806      	ldr	r0, [pc, #24]	; (80036a4 <SendCommandToDAC+0x68>)
 800368a:	f002 fd2e 	bl	80060ea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800368e:	2201      	movs	r2, #1
 8003690:	2110      	movs	r1, #16
 8003692:	4803      	ldr	r0, [pc, #12]	; (80036a0 <SendCommandToDAC+0x64>)
 8003694:	f001 fed0 	bl	8005438 <HAL_GPIO_WritePin>
}
 8003698:	bf00      	nop
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40020000 	.word	0x40020000
 80036a4:	20000da4 	.word	0x20000da4

080036a8 <SendValueToDAC>:
 * @param dac_channel -> DAC output channel
 * @param value       -> value to write in DAC output register
 *
 */
void SendValueToDAC(uint8_t dac_channel, uint16_t value)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	460a      	mov	r2, r1
 80036b2:	71fb      	strb	r3, [r7, #7]
 80036b4:	4613      	mov	r3, r2
 80036b6:	80bb      	strh	r3, [r7, #4]

	uint8_t data[3];

	data[2] = value & 0x000F;
 80036b8:	88bb      	ldrh	r3, [r7, #4]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	f003 030f 	and.w	r3, r3, #15
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	73bb      	strb	r3, [r7, #14]
	data[1] = value >> 4;
 80036c4:	88bb      	ldrh	r3, [r7, #4]
 80036c6:	091b      	lsrs	r3, r3, #4
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	737b      	strb	r3, [r7, #13]
	data[0] = (dac_channel & 0x07) | (1 << 3) | (0 << 7);
 80036ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	b25b      	sxtb	r3, r3
 80036d8:	f043 0308 	orr.w	r3, r3, #8
 80036dc:	b25b      	sxtb	r3, r3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80036e2:	2200      	movs	r2, #0
 80036e4:	2110      	movs	r1, #16
 80036e6:	4809      	ldr	r0, [pc, #36]	; (800370c <SendValueToDAC+0x64>)
 80036e8:	f001 fea6 	bl	8005438 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, sizeof(data),10);
 80036ec:	f107 010c 	add.w	r1, r7, #12
 80036f0:	230a      	movs	r3, #10
 80036f2:	2203      	movs	r2, #3
 80036f4:	4806      	ldr	r0, [pc, #24]	; (8003710 <SendValueToDAC+0x68>)
 80036f6:	f002 fcf8 	bl	80060ea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80036fa:	2201      	movs	r2, #1
 80036fc:	2110      	movs	r1, #16
 80036fe:	4803      	ldr	r0, [pc, #12]	; (800370c <SendValueToDAC+0x64>)
 8003700:	f001 fe9a 	bl	8005438 <HAL_GPIO_WritePin>

}
 8003704:	bf00      	nop
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	40020000 	.word	0x40020000
 8003710:	20000da4 	.word	0x20000da4

08003714 <DAC_Init>:

/* @brief DAC initialization
 *
 */
void DAC_Init()
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
	SendCommandToDAC(0, 0, 0); //dummy command
 800371a:	2200      	movs	r2, #0
 800371c:	2100      	movs	r1, #0
 800371e:	2000      	movs	r0, #0
 8003720:	f7ff ff8c 	bl	800363c <SendCommandToDAC>
	SendCommandToDAC(5, 0xA, 0); //reset up
 8003724:	2200      	movs	r2, #0
 8003726:	210a      	movs	r1, #10
 8003728:	2005      	movs	r0, #5
 800372a:	f7ff ff87 	bl	800363c <SendCommandToDAC>
	SendCommandToDAC(5, 0, 0); //reset down
 800372e:	2200      	movs	r2, #0
 8003730:	2100      	movs	r1, #0
 8003732:	2005      	movs	r0, #5
 8003734:	f7ff ff82 	bl	800363c <SendCommandToDAC>
	SendCommandToDAC(2, 0, 0); //sync register -> all 0
 8003738:	2200      	movs	r2, #0
 800373a:	2100      	movs	r1, #0
 800373c:	2002      	movs	r0, #2
 800373e:	f7ff ff7d 	bl	800363c <SendCommandToDAC>
	SendCommandToDAC(3, 0, 0); //config register -> all 0
 8003742:	2200      	movs	r2, #0
 8003744:	2100      	movs	r1, #0
 8003746:	2003      	movs	r0, #3
 8003748:	f7ff ff78 	bl	800363c <SendCommandToDAC>
	SendCommandToDAC(4, 0 | (1 << 8)  , 0); //gain register -> reference diveded by 2
 800374c:	2200      	movs	r2, #0
 800374e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003752:	2004      	movs	r0, #4
 8003754:	f7ff ff72 	bl	800363c <SendCommandToDAC>

	for(int i = 0; i < 8; i++)
 8003758:	2300      	movs	r3, #0
 800375a:	607b      	str	r3, [r7, #4]
 800375c:	e009      	b.n	8003772 <DAC_Init+0x5e>
	{
		SendValueToDAC(i, 4095); // set all DAC channels on maximum value -> minimum output voltage of power supply
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	f640 71ff 	movw	r1, #4095	; 0xfff
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff ff9e 	bl	80036a8 <SendValueToDAC>
	for(int i = 0; i < 8; i++)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3301      	adds	r3, #1
 8003770:	607b      	str	r3, [r7, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b07      	cmp	r3, #7
 8003776:	ddf2      	ble.n	800375e <DAC_Init+0x4a>
	}

}
 8003778:	bf00      	nop
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <ETH_StoreIP>:
 *
 * @param ip -> ip address
 *
 */
void ETH_StoreIP(uint32_t ip)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	b082      	sub	sp, #8
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
	BACKUP_SRAM_write(sramOffset_IP_ADDRESS, ip);
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	2002      	movs	r0, #2
 800378e:	f7fd fd31 	bl	80011f4 <BACKUP_SRAM_write>
	BACKUP_SRAM_write_StoreControl(sramOffset_IP_ADDRESS, true);
 8003792:	2101      	movs	r1, #1
 8003794:	2002      	movs	r0, #2
 8003796:	f7fd fd16 	bl	80011c6 <BACKUP_SRAM_write_StoreControl>
}
 800379a:	bf00      	nop
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <ETH_StoreNETMASK>:
 *
 * @param netmask -> netmask address
 *
 */
void ETH_StoreNETMASK(uint32_t netmask)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	b082      	sub	sp, #8
 80037a6:	af00      	add	r7, sp, #0
 80037a8:	6078      	str	r0, [r7, #4]
	BACKUP_SRAM_write(sramOffset_NETMASK_ADDRESS, netmask);
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	2003      	movs	r0, #3
 80037ae:	f7fd fd21 	bl	80011f4 <BACKUP_SRAM_write>
	BACKUP_SRAM_write_StoreControl(sramOffset_NETMASK_ADDRESS, true);
 80037b2:	2101      	movs	r1, #1
 80037b4:	2003      	movs	r0, #3
 80037b6:	f7fd fd06 	bl	80011c6 <BACKUP_SRAM_write_StoreControl>
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <ETH_StoreGATEWAY>:
 *
 * @param gateway -> gateway address
 *
 */
void ETH_StoreGATEWAY(uint32_t gateway)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b082      	sub	sp, #8
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
	BACKUP_SRAM_write(sramOffset_GATEWAY_ADDRESS, gateway);
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	2004      	movs	r0, #4
 80037ce:	f7fd fd11 	bl	80011f4 <BACKUP_SRAM_write>
	BACKUP_SRAM_write_StoreControl(sramOffset_GATEWAY_ADDRESS, true);
 80037d2:	2101      	movs	r1, #1
 80037d4:	2004      	movs	r0, #4
 80037d6:	f7fd fcf6 	bl	80011c6 <BACKUP_SRAM_write_StoreControl>
}
 80037da:	bf00      	nop
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <ETH_GetIP>:
/* @brief get ip address from sram
 *
 *
 */
uint32_t ETH_GetIP()
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
	if(BACKUP_SRAM_read_StoreControl(sramOffset_IP_ADDRESS))
 80037ea:	2002      	movs	r0, #2
 80037ec:	f7fd fce0 	bl	80011b0 <BACKUP_SRAM_read_StoreControl>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d004      	beq.n	8003800 <ETH_GetIP+0x1c>
	{
		return BACKUP_SRAM_read(sramOffset_IP_ADDRESS);
 80037f6:	2002      	movs	r0, #2
 80037f8:	f7fd fcf1 	bl	80011de <BACKUP_SRAM_read>
 80037fc:	4603      	mov	r3, r0
 80037fe:	e00f      	b.n	8003820 <ETH_GetIP+0x3c>
	}
	else
	{
		uint32_t temp = ip_MAKEU32(myNetInfo.ip[0], myNetInfo.ip[1], myNetInfo.ip[2], myNetInfo.ip[3]);
 8003800:	4b09      	ldr	r3, [pc, #36]	; (8003828 <ETH_GetIP+0x44>)
 8003802:	799b      	ldrb	r3, [r3, #6]
 8003804:	061a      	lsls	r2, r3, #24
 8003806:	4b08      	ldr	r3, [pc, #32]	; (8003828 <ETH_GetIP+0x44>)
 8003808:	79db      	ldrb	r3, [r3, #7]
 800380a:	041b      	lsls	r3, r3, #16
 800380c:	431a      	orrs	r2, r3
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <ETH_GetIP+0x44>)
 8003810:	7a1b      	ldrb	r3, [r3, #8]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	4313      	orrs	r3, r2
 8003816:	4a04      	ldr	r2, [pc, #16]	; (8003828 <ETH_GetIP+0x44>)
 8003818:	7a52      	ldrb	r2, [r2, #9]
 800381a:	4313      	orrs	r3, r2
 800381c:	607b      	str	r3, [r7, #4]
		return temp;
 800381e:	687b      	ldr	r3, [r7, #4]
	}
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	20000060 	.word	0x20000060

0800382c <ETH_GetNETMASK>:
/* @brief get netmask from sram
 *
 *
 */
uint32_t ETH_GetNETMASK()
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
	if(BACKUP_SRAM_read_StoreControl(sramOffset_NETMASK_ADDRESS))
 8003832:	2003      	movs	r0, #3
 8003834:	f7fd fcbc 	bl	80011b0 <BACKUP_SRAM_read_StoreControl>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d004      	beq.n	8003848 <ETH_GetNETMASK+0x1c>
	{
		return BACKUP_SRAM_read(sramOffset_NETMASK_ADDRESS);
 800383e:	2003      	movs	r0, #3
 8003840:	f7fd fccd 	bl	80011de <BACKUP_SRAM_read>
 8003844:	4603      	mov	r3, r0
 8003846:	e00f      	b.n	8003868 <ETH_GetNETMASK+0x3c>
	}
	else
	{
		uint32_t temp = ip_MAKEU32(myNetInfo.sn[0], myNetInfo.sn[1], myNetInfo.sn[2], myNetInfo.sn[3]);
 8003848:	4b09      	ldr	r3, [pc, #36]	; (8003870 <ETH_GetNETMASK+0x44>)
 800384a:	7a9b      	ldrb	r3, [r3, #10]
 800384c:	061a      	lsls	r2, r3, #24
 800384e:	4b08      	ldr	r3, [pc, #32]	; (8003870 <ETH_GetNETMASK+0x44>)
 8003850:	7adb      	ldrb	r3, [r3, #11]
 8003852:	041b      	lsls	r3, r3, #16
 8003854:	431a      	orrs	r2, r3
 8003856:	4b06      	ldr	r3, [pc, #24]	; (8003870 <ETH_GetNETMASK+0x44>)
 8003858:	7b1b      	ldrb	r3, [r3, #12]
 800385a:	021b      	lsls	r3, r3, #8
 800385c:	4313      	orrs	r3, r2
 800385e:	4a04      	ldr	r2, [pc, #16]	; (8003870 <ETH_GetNETMASK+0x44>)
 8003860:	7b52      	ldrb	r2, [r2, #13]
 8003862:	4313      	orrs	r3, r2
 8003864:	607b      	str	r3, [r7, #4]
		return temp;
 8003866:	687b      	ldr	r3, [r7, #4]
	}
}
 8003868:	4618      	mov	r0, r3
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20000060 	.word	0x20000060

08003874 <ETH_GetGATEWAY>:
/* @brief get gateway address from sram
 *
 *
 */
uint32_t ETH_GetGATEWAY()
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
	if(BACKUP_SRAM_read_StoreControl(sramOffset_GATEWAY_ADDRESS))
 800387a:	2004      	movs	r0, #4
 800387c:	f7fd fc98 	bl	80011b0 <BACKUP_SRAM_read_StoreControl>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d004      	beq.n	8003890 <ETH_GetGATEWAY+0x1c>
	{
		return BACKUP_SRAM_read(sramOffset_GATEWAY_ADDRESS);
 8003886:	2004      	movs	r0, #4
 8003888:	f7fd fca9 	bl	80011de <BACKUP_SRAM_read>
 800388c:	4603      	mov	r3, r0
 800388e:	e00f      	b.n	80038b0 <ETH_GetGATEWAY+0x3c>
	}
	else
	{
		uint32_t temp = ip_MAKEU32(myNetInfo.gw[0], myNetInfo.gw[1], myNetInfo.gw[2], myNetInfo.gw[3]);
 8003890:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <ETH_GetGATEWAY+0x44>)
 8003892:	7b9b      	ldrb	r3, [r3, #14]
 8003894:	061a      	lsls	r2, r3, #24
 8003896:	4b08      	ldr	r3, [pc, #32]	; (80038b8 <ETH_GetGATEWAY+0x44>)
 8003898:	7bdb      	ldrb	r3, [r3, #15]
 800389a:	041b      	lsls	r3, r3, #16
 800389c:	431a      	orrs	r2, r3
 800389e:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <ETH_GetGATEWAY+0x44>)
 80038a0:	7c1b      	ldrb	r3, [r3, #16]
 80038a2:	021b      	lsls	r3, r3, #8
 80038a4:	4313      	orrs	r3, r2
 80038a6:	4a04      	ldr	r2, [pc, #16]	; (80038b8 <ETH_GetGATEWAY+0x44>)
 80038a8:	7c52      	ldrb	r2, [r2, #17]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	607b      	str	r3, [r7, #4]
		return temp;
 80038ae:	687b      	ldr	r3, [r7, #4]
	}
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	20000060 	.word	0x20000060

080038bc <W5500_Select>:




void W5500_Select(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80038c0:	2200      	movs	r2, #0
 80038c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038c6:	4802      	ldr	r0, [pc, #8]	; (80038d0 <W5500_Select+0x14>)
 80038c8:	f001 fdb6 	bl	8005438 <HAL_GPIO_WritePin>
}
 80038cc:	bf00      	nop
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40020000 	.word	0x40020000

080038d4 <W5500_Unselect>:

void W5500_Unselect(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80038d8:	2201      	movs	r2, #1
 80038da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038de:	4802      	ldr	r0, [pc, #8]	; (80038e8 <W5500_Unselect+0x14>)
 80038e0:	f001 fdaa 	bl	8005438 <HAL_GPIO_WritePin>
}
 80038e4:	bf00      	nop
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40020000 	.word	0x40020000

080038ec <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi3, buff, len, HAL_MAX_DELAY);
 80038f8:	887a      	ldrh	r2, [r7, #2]
 80038fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4803      	ldr	r0, [pc, #12]	; (8003910 <W5500_ReadBuff+0x24>)
 8003902:	f002 fd2e 	bl	8006362 <HAL_SPI_Receive>
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	20000e54 	.word	0x20000e54

08003914 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi3, buff, len, HAL_MAX_DELAY);
 8003920:	887a      	ldrh	r2, [r7, #2]
 8003922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	4803      	ldr	r0, [pc, #12]	; (8003938 <W5500_WriteBuff+0x24>)
 800392a:	f002 fbde 	bl	80060ea <HAL_SPI_Transmit>
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000e54 	.word	0x20000e54

0800393c <W5500_ReadByte>:

uint8_t W5500_ReadByte(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 8003942:	1dfb      	adds	r3, r7, #7
 8003944:	2101      	movs	r1, #1
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff ffd0 	bl	80038ec <W5500_ReadBuff>
    return byte;
 800394c:	79fb      	ldrb	r3, [r7, #7]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	4603      	mov	r3, r0
 800395e:	71fb      	strb	r3, [r7, #7]
    W5500_WriteBuff(&byte, sizeof(byte));
 8003960:	1dfb      	adds	r3, r7, #7
 8003962:	2101      	movs	r1, #1
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff ffd5 	bl	8003914 <W5500_WriteBuff>
}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <ETH_SendSetting>:
/* @brief send setting of ethernet
 *
 *
 */
void ETH_SendSetting()
{
 8003972:	b580      	push	{r7, lr}
 8003974:	af00      	add	r7, sp, #0
	SendCommunication_u32(cmd_ip_get_myip, ETH_GetIP());
 8003976:	f7ff ff35 	bl	80037e4 <ETH_GetIP>
 800397a:	4603      	mov	r3, r0
 800397c:	4619      	mov	r1, r3
 800397e:	201d      	movs	r0, #29
 8003980:	f7fe f9f8 	bl	8001d74 <SendCommunication_u32>
	SendCommunication_u32(cmd_ip_get_mymask, ETH_GetNETMASK());
 8003984:	f7ff ff52 	bl	800382c <ETH_GetNETMASK>
 8003988:	4603      	mov	r3, r0
 800398a:	4619      	mov	r1, r3
 800398c:	201e      	movs	r0, #30
 800398e:	f7fe f9f1 	bl	8001d74 <SendCommunication_u32>
	SendCommunication_u32(cmd_ip_get_mygatew, ETH_GetGATEWAY());
 8003992:	f7ff ff6f 	bl	8003874 <ETH_GetGATEWAY>
 8003996:	4603      	mov	r3, r0
 8003998:	4619      	mov	r1, r3
 800399a:	201f      	movs	r0, #31
 800399c:	f7fe f9ea 	bl	8001d74 <SendCommunication_u32>
}
 80039a0:	bf00      	nop
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <ETH_udp_Init>:
/* @brief UDP communication init
 *
 *
 */
void ETH_udp_Init()
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
	//---------udp_connect(udp_pcb, IP46_ADDR_ANY(), UDP_PORT);
	//udp_connect(udp_pcb, &endpoint_ip, UDP_PORT);

	//---------udp_recv(udp_pcb, UDP_Receiver_handler, NULL);

    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 80039aa:	4914      	ldr	r1, [pc, #80]	; (80039fc <ETH_udp_Init+0x58>)
 80039ac:	4814      	ldr	r0, [pc, #80]	; (8003a00 <ETH_udp_Init+0x5c>)
 80039ae:	f004 feef 	bl	8008790 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 80039b2:	4914      	ldr	r1, [pc, #80]	; (8003a04 <ETH_udp_Init+0x60>)
 80039b4:	4814      	ldr	r0, [pc, #80]	; (8003a08 <ETH_udp_Init+0x64>)
 80039b6:	f004 ff11 	bl	80087dc <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 80039ba:	4914      	ldr	r1, [pc, #80]	; (8003a0c <ETH_udp_Init+0x68>)
 80039bc:	4814      	ldr	r0, [pc, #80]	; (8003a10 <ETH_udp_Init+0x6c>)
 80039be:	f004 ff39 	bl	8008834 <reg_wizchip_spiburst_cbfunc>

    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 80039c2:	4a14      	ldr	r2, [pc, #80]	; (8003a14 <ETH_udp_Init+0x70>)
 80039c4:	1d3b      	adds	r3, r7, #4
 80039c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039ca:	e883 0003 	stmia.w	r3, {r0, r1}
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 80039ce:	1d3a      	adds	r2, r7, #4
 80039d0:	1d3b      	adds	r3, r7, #4
 80039d2:	4611      	mov	r1, r2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f004 ffa5 	bl	8008924 <wizchip_init>


    //ETH_load_ip();

    wizchip_setnetinfo(&myNetInfo);
 80039da:	480f      	ldr	r0, [pc, #60]	; (8003a18 <ETH_udp_Init+0x74>)
 80039dc:	f005 f82e 	bl	8008a3c <wizchip_setnetinfo>

    int udp_socket = socket(UDP_SOCKET, Sn_MR_UDP, UDP_PORT, SF_IO_NONBLOCK);
 80039e0:	2301      	movs	r3, #1
 80039e2:	f241 328d 	movw	r2, #5005	; 0x138d
 80039e6:	2102      	movs	r1, #2
 80039e8:	2003      	movs	r0, #3
 80039ea:	f004 f9c5 	bl	8007d78 <socket>
 80039ee:	4603      	mov	r3, r0
 80039f0:	60fb      	str	r3, [r7, #12]

    if(udp_socket != UDP_SOCKET)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b03      	cmp	r3, #3
    {
    	//error
    	return;
    }

}
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	080038d5 	.word	0x080038d5
 8003a00:	080038bd 	.word	0x080038bd
 8003a04:	08003957 	.word	0x08003957
 8003a08:	0800393d 	.word	0x0800393d
 8003a0c:	08003915 	.word	0x08003915
 8003a10:	080038ed 	.word	0x080038ed
 8003a14:	0800d254 	.word	0x0800d254
 8003a18:	20000060 	.word	0x20000060

08003a1c <ETH_udp_StoreEndpoint>:
/* @brief store UDP endpoint
 *
 *
 */
void ETH_udp_StoreEndpoint()
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
	//---------endpoint_ip = last_message_ip;
	//---------udp_connect(udp_pcb, &endpoint_ip, UDP_PORT);

		//memcpy(endpoint_ip,last_message_ip,sizeof(last_message_ip));

	endpoint_ip[0] = last_message_ip[0];
 8003a20:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <ETH_udp_StoreEndpoint+0x30>)
 8003a22:	781a      	ldrb	r2, [r3, #0]
 8003a24:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <ETH_udp_StoreEndpoint+0x34>)
 8003a26:	701a      	strb	r2, [r3, #0]
	endpoint_ip[1] = last_message_ip[1];
 8003a28:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <ETH_udp_StoreEndpoint+0x30>)
 8003a2a:	785a      	ldrb	r2, [r3, #1]
 8003a2c:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <ETH_udp_StoreEndpoint+0x34>)
 8003a2e:	705a      	strb	r2, [r3, #1]
	endpoint_ip[2] = last_message_ip[2];
 8003a30:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <ETH_udp_StoreEndpoint+0x30>)
 8003a32:	789a      	ldrb	r2, [r3, #2]
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <ETH_udp_StoreEndpoint+0x34>)
 8003a36:	709a      	strb	r2, [r3, #2]
	endpoint_ip[3] = last_message_ip[3];
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <ETH_udp_StoreEndpoint+0x30>)
 8003a3a:	78da      	ldrb	r2, [r3, #3]
 8003a3c:	4b04      	ldr	r3, [pc, #16]	; (8003a50 <ETH_udp_StoreEndpoint+0x34>)
 8003a3e:	70da      	strb	r2, [r3, #3]

}
 8003a40:	bf00      	nop
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	200008f8 	.word	0x200008f8
 8003a50:	200008fc 	.word	0x200008fc

08003a54 <ETH_udp_Transmit>:
 * @param *pData -> pointer on data to send
 * @param Size -> Size od data
 *
 */
void ETH_udp_Transmit(uint8_t *pData, uint16_t Size)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af02      	add	r7, sp, #8
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	807b      	strh	r3, [r7, #2]
	uint16_t sentsize;

    //while(!(sentsize >= Size))
    //{

    	ret = sendto(UDP_SOCKET, pData, Size, endpoint_ip, UDP_PORT);
 8003a60:	887a      	ldrh	r2, [r7, #2]
 8003a62:	f241 338d 	movw	r3, #5005	; 0x138d
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	4b04      	ldr	r3, [pc, #16]	; (8003a7c <ETH_udp_Transmit+0x28>)
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	2003      	movs	r0, #3
 8003a6e:	f004 fb07 	bl	8008080 <sendto>
 8003a72:	60f8      	str	r0, [r7, #12]

    	//sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
    //}


}
 8003a74:	bf00      	nop
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	200008fc 	.word	0x200008fc

08003a80 <ETH_udp_Receive>:


void ETH_udp_Receive()
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8003a86:	b086      	sub	sp, #24
 8003a88:	af02      	add	r7, sp, #8
	int32_t  ret;
	uint8_t buf[DATA_BUF_SIZE];
	uint16_t size;
	uint16_t destport;

	size = getSn_RX_RSR(UDP_SOCKET);
 8003a8a:	2003      	movs	r0, #3
 8003a8c:	f004 f829 	bl	8007ae2 <getSn_RX_RSR>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003a96:	f102 020e 	add.w	r2, r2, #14
 8003a9a:	8013      	strh	r3, [r2, #0]

    if(size > 0)
 8003a9c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003aa0:	f103 030e 	add.w	r3, r3, #14
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d042      	beq.n	8003b30 <ETH_udp_Receive+0xb0>
    {

    	if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 8003aaa:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003aae:	f103 030e 	add.w	r3, r3, #14
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab8:	d906      	bls.n	8003ac8 <ETH_udp_Receive+0x48>
 8003aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003abe:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003ac2:	f102 020e 	add.w	r2, r2, #14
 8003ac6:	8013      	strh	r3, [r2, #0]

    	ret = recvfrom(UDP_SOCKET, buf, size, last_message_ip, (uint16_t*)&destport);
 8003ac8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003acc:	f103 030e 	add.w	r3, r3, #14
 8003ad0:	881a      	ldrh	r2, [r3, #0]
 8003ad2:	f107 0110 	add.w	r1, r7, #16
 8003ad6:	3908      	subs	r1, #8
 8003ad8:	f107 0310 	add.w	r3, r7, #16
 8003adc:	3b0a      	subs	r3, #10
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <ETH_udp_Receive+0xbc>)
 8003ae2:	2003      	movs	r0, #3
 8003ae4:	f004 fc02 	bl	80082ec <recvfrom>
 8003ae8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003aec:	f103 0308 	add.w	r3, r3, #8
 8003af0:	6018      	str	r0, [r3, #0]

    	//ETH_udp_Transmit(buf, size);

    	if(ret <= 0)
 8003af2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003af6:	f103 0308 	add.w	r3, r3, #8
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	dd16      	ble.n	8003b2e <ETH_udp_Receive+0xae>
    	{
    		return;
    	}

    	size = (uint16_t) ret;
 8003b00:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003b04:	f103 0308 	add.w	r3, r3, #8
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003b0e:	f102 020e 	add.w	r2, r2, #14
 8003b12:	8013      	strh	r3, [r2, #0]


    	ETH_WriteBuffer(buf, size);
 8003b14:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003b18:	f103 030e 	add.w	r3, r3, #14
 8003b1c:	881a      	ldrh	r2, [r3, #0]
 8003b1e:	f107 0310 	add.w	r3, r7, #16
 8003b22:	3b08      	subs	r3, #8
 8003b24:	4611      	mov	r1, r2
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe faf2 	bl	8002110 <ETH_WriteBuffer>
 8003b2c:	e000      	b.n	8003b30 <ETH_udp_Receive+0xb0>
    		return;
 8003b2e:	bf00      	nop

    	//ETH_udp_Transmit(buf, size);
    }


}
 8003b30:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	200008f8 	.word	0x200008f8

08003b40 <Uart_BufferNotEmpty>:
 *
 * @return true -> FIFO is not empty
 * @return false -> FIFO is empty
 */
bool Uart_BufferNotEmpty()
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
	return (uart_bcounter > 0);
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <Uart_BufferNotEmpty+0x1c>)
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	bf14      	ite	ne
 8003b4c:	2301      	movne	r3, #1
 8003b4e:	2300      	moveq	r3, #0
 8003b50:	b2db      	uxtb	r3, r3
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	20000d04 	.word	0x20000d04

08003b60 <Uart_WriteBuffer>:

/* @brief function add data byte to FIFO
 *
 */
void Uart_WriteBuffer(uint8_t data)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	4603      	mov	r3, r0
 8003b68:	71fb      	strb	r3, [r7, #7]
	if(uart_bcounter >= (uart_buffer_size-1)) return;
 8003b6a:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <Uart_WriteBuffer+0x58>)
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d81a      	bhi.n	8003bac <Uart_WriteBuffer+0x4c>

	uart_buffer[uart_wpointer] = data;
 8003b76:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <Uart_WriteBuffer+0x5c>)
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4a10      	ldr	r2, [pc, #64]	; (8003bc0 <Uart_WriteBuffer+0x60>)
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	5453      	strb	r3, [r2, r1]
	uart_bcounter++;
 8003b82:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <Uart_WriteBuffer+0x58>)
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	3301      	adds	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <Uart_WriteBuffer+0x58>)
 8003b8c:	801a      	strh	r2, [r3, #0]
	uart_wpointer++;
 8003b8e:	4b0b      	ldr	r3, [pc, #44]	; (8003bbc <Uart_WriteBuffer+0x5c>)
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	3301      	adds	r3, #1
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <Uart_WriteBuffer+0x5c>)
 8003b98:	801a      	strh	r2, [r3, #0]
	if(uart_wpointer > uart_buffer_size - 1) uart_wpointer = 0;
 8003b9a:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <Uart_WriteBuffer+0x5c>)
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba2:	d304      	bcc.n	8003bae <Uart_WriteBuffer+0x4e>
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <Uart_WriteBuffer+0x5c>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	801a      	strh	r2, [r3, #0]
 8003baa:	e000      	b.n	8003bae <Uart_WriteBuffer+0x4e>
	if(uart_bcounter >= (uart_buffer_size-1)) return;
 8003bac:	bf00      	nop

}
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	20000d04 	.word	0x20000d04
 8003bbc:	20000d00 	.word	0x20000d00
 8003bc0:	20000900 	.word	0x20000900

08003bc4 <Uart_ReadBuffer>:
/* @brief read data byte from FIFO
 *
 * @return one element uint8_t data 
 */
uint8_t Uart_ReadBuffer()
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
	uint8_t data = uart_buffer[uart_rpointer];
 8003bca:	4b10      	ldr	r3, [pc, #64]	; (8003c0c <Uart_ReadBuffer+0x48>)
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <Uart_ReadBuffer+0x4c>)
 8003bd2:	5c9b      	ldrb	r3, [r3, r2]
 8003bd4:	71fb      	strb	r3, [r7, #7]
	uart_bcounter--;
 8003bd6:	4b0f      	ldr	r3, [pc, #60]	; (8003c14 <Uart_ReadBuffer+0x50>)
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	4b0d      	ldr	r3, [pc, #52]	; (8003c14 <Uart_ReadBuffer+0x50>)
 8003be0:	801a      	strh	r2, [r3, #0]
	uart_rpointer++;
 8003be2:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <Uart_ReadBuffer+0x48>)
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	3301      	adds	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	4b08      	ldr	r3, [pc, #32]	; (8003c0c <Uart_ReadBuffer+0x48>)
 8003bec:	801a      	strh	r2, [r3, #0]
	if(uart_rpointer > uart_buffer_size - 1) uart_rpointer = 0;
 8003bee:	4b07      	ldr	r3, [pc, #28]	; (8003c0c <Uart_ReadBuffer+0x48>)
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf6:	d302      	bcc.n	8003bfe <Uart_ReadBuffer+0x3a>
 8003bf8:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <Uart_ReadBuffer+0x48>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	801a      	strh	r2, [r3, #0]

	return data;
 8003bfe:	79fb      	ldrb	r3, [r7, #7]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	20000d02 	.word	0x20000d02
 8003c10:	20000900 	.word	0x20000900
 8003c14:	20000d04 	.word	0x20000d04

08003c18 <Uart_Send>:
 * @param data -> pointer on data buffer with message
 * @param size -> lenght of data buffer
 *
 */
void Uart_Send(char *data, uint16_t size)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	807b      	strh	r3, [r7, #2]

	HAL_UART_Transmit(&huart2, (uint8_t *)data, size,100);
 8003c24:	887a      	ldrh	r2, [r7, #2]
 8003c26:	2364      	movs	r3, #100	; 0x64
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	4803      	ldr	r0, [pc, #12]	; (8003c38 <Uart_Send+0x20>)
 8003c2c:	f003 fa3f 	bl	80070ae <HAL_UART_Transmit>
}
 8003c30:	bf00      	nop
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000f50 	.word	0x20000f50

08003c3c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c42:	463b      	mov	r3, r7
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	605a      	str	r2, [r3, #4]
 8003c4a:	609a      	str	r2, [r3, #8]
 8003c4c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003c4e:	4b21      	ldr	r3, [pc, #132]	; (8003cd4 <MX_ADC1_Init+0x98>)
 8003c50:	4a21      	ldr	r2, [pc, #132]	; (8003cd8 <MX_ADC1_Init+0x9c>)
 8003c52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003c54:	4b1f      	ldr	r3, [pc, #124]	; (8003cd4 <MX_ADC1_Init+0x98>)
 8003c56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003c5c:	4b1d      	ldr	r3, [pc, #116]	; (8003cd4 <MX_ADC1_Init+0x98>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003c62:	4b1c      	ldr	r3, [pc, #112]	; (8003cd4 <MX_ADC1_Init+0x98>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003c68:	4b1a      	ldr	r3, [pc, #104]	; (8003cd4 <MX_ADC1_Init+0x98>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003c6e:	4b19      	ldr	r3, [pc, #100]	; (8003cd4 <MX_ADC1_Init+0x98>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c76:	4b17      	ldr	r3, [pc, #92]	; (8003cd4 <MX_ADC1_Init+0x98>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c7c:	4b15      	ldr	r3, [pc, #84]	; (8003cd4 <MX_ADC1_Init+0x98>)
 8003c7e:	4a17      	ldr	r2, [pc, #92]	; (8003cdc <MX_ADC1_Init+0xa0>)
 8003c80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c82:	4b14      	ldr	r3, [pc, #80]	; (8003cd4 <MX_ADC1_Init+0x98>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003c88:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <MX_ADC1_Init+0x98>)
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003c8e:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <MX_ADC1_Init+0x98>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c96:	4b0f      	ldr	r3, [pc, #60]	; (8003cd4 <MX_ADC1_Init+0x98>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c9c:	480d      	ldr	r0, [pc, #52]	; (8003cd4 <MX_ADC1_Init+0x98>)
 8003c9e:	f000 feab 	bl	80049f8 <HAL_ADC_Init>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003ca8:	f000 fa14 	bl	80040d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003cac:	2300      	movs	r3, #0
 8003cae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cb8:	463b      	mov	r3, r7
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4805      	ldr	r0, [pc, #20]	; (8003cd4 <MX_ADC1_Init+0x98>)
 8003cbe:	f000 fedf 	bl	8004a80 <HAL_ADC_ConfigChannel>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003cc8:	f000 fa04 	bl	80040d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003ccc:	bf00      	nop
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20000d08 	.word	0x20000d08
 8003cd8:	40012000 	.word	0x40012000
 8003cdc:	0f000001 	.word	0x0f000001

08003ce0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08a      	sub	sp, #40	; 0x28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce8:	f107 0314 	add.w	r3, r7, #20
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	605a      	str	r2, [r3, #4]
 8003cf2:	609a      	str	r2, [r3, #8]
 8003cf4:	60da      	str	r2, [r3, #12]
 8003cf6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a17      	ldr	r2, [pc, #92]	; (8003d5c <HAL_ADC_MspInit+0x7c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d127      	bne.n	8003d52 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d02:	2300      	movs	r3, #0
 8003d04:	613b      	str	r3, [r7, #16]
 8003d06:	4b16      	ldr	r3, [pc, #88]	; (8003d60 <HAL_ADC_MspInit+0x80>)
 8003d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0a:	4a15      	ldr	r2, [pc, #84]	; (8003d60 <HAL_ADC_MspInit+0x80>)
 8003d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d10:	6453      	str	r3, [r2, #68]	; 0x44
 8003d12:	4b13      	ldr	r3, [pc, #76]	; (8003d60 <HAL_ADC_MspInit+0x80>)
 8003d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <HAL_ADC_MspInit+0x80>)
 8003d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d26:	4a0e      	ldr	r2, [pc, #56]	; (8003d60 <HAL_ADC_MspInit+0x80>)
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d2e:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <HAL_ADC_MspInit+0x80>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d42:	2300      	movs	r3, #0
 8003d44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d46:	f107 0314 	add.w	r3, r7, #20
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4805      	ldr	r0, [pc, #20]	; (8003d64 <HAL_ADC_MspInit+0x84>)
 8003d4e:	f001 f9d7 	bl	8005100 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003d52:	bf00      	nop
 8003d54:	3728      	adds	r7, #40	; 0x28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40012000 	.word	0x40012000
 8003d60:	40023800 	.word	0x40023800
 8003d64:	40020000 	.word	0x40020000

08003d68 <Flash_ReadParamStruct>:
/*
 * Read Data from fixed address in sector 7 given by BASE_PARAM_ADR
 * Data are read to FlashSectorParams struct
 */
void Flash_ReadParamStruct(FlashSectorParams* s_data)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUMBER_OF_PARAMS; i++)
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	e00f      	b.n	8003d96 <Flash_ReadParamStruct+0x2e>
	{
		*((uint32_t*)(s_data)+i)=*((uint32_t*)(BASE_PARAM_ADR+4*i));
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8003d7c:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4619      	mov	r1, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	680a      	ldr	r2, [r1, #0]
 8003d8e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUMBER_OF_PARAMS; i++)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	3301      	adds	r3, #1
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b16      	cmp	r3, #22
 8003d9a:	d9ec      	bls.n	8003d76 <Flash_ReadParamStruct+0xe>
	}
}
 8003d9c:	bf00      	nop
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b088      	sub	sp, #32
 8003db0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db2:	f107 030c 	add.w	r3, r7, #12
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	605a      	str	r2, [r3, #4]
 8003dbc:	609a      	str	r2, [r3, #8]
 8003dbe:	60da      	str	r2, [r3, #12]
 8003dc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60bb      	str	r3, [r7, #8]
 8003dc6:	4b42      	ldr	r3, [pc, #264]	; (8003ed0 <MX_GPIO_Init+0x124>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	4a41      	ldr	r2, [pc, #260]	; (8003ed0 <MX_GPIO_Init+0x124>)
 8003dcc:	f043 0304 	orr.w	r3, r3, #4
 8003dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003dd2:	4b3f      	ldr	r3, [pc, #252]	; (8003ed0 <MX_GPIO_Init+0x124>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	60bb      	str	r3, [r7, #8]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	607b      	str	r3, [r7, #4]
 8003de2:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <MX_GPIO_Init+0x124>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	4a3a      	ldr	r2, [pc, #232]	; (8003ed0 <MX_GPIO_Init+0x124>)
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	6313      	str	r3, [r2, #48]	; 0x30
 8003dee:	4b38      	ldr	r3, [pc, #224]	; (8003ed0 <MX_GPIO_Init+0x124>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	607b      	str	r3, [r7, #4]
 8003df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	603b      	str	r3, [r7, #0]
 8003dfe:	4b34      	ldr	r3, [pc, #208]	; (8003ed0 <MX_GPIO_Init+0x124>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	4a33      	ldr	r2, [pc, #204]	; (8003ed0 <MX_GPIO_Init+0x124>)
 8003e04:	f043 0302 	orr.w	r3, r3, #2
 8003e08:	6313      	str	r3, [r2, #48]	; 0x30
 8003e0a:	4b31      	ldr	r3, [pc, #196]	; (8003ed0 <MX_GPIO_Init+0x124>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SWREV_3_Pin|SWREV_2_Pin|SWREV_1_Pin|SWDIR_3_Pin
 8003e16:	2200      	movs	r2, #0
 8003e18:	f24e 210f 	movw	r1, #57871	; 0xe20f
 8003e1c:	482d      	ldr	r0, [pc, #180]	; (8003ed4 <MX_GPIO_Init+0x128>)
 8003e1e:	f001 fb0b 	bl	8005438 <HAL_GPIO_WritePin>
                          |SWDIR_2_Pin|SWDIR_1_Pin|EN_1_Pin|LED_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|LED_1_Pin|EXT_0_Pin|EXT_1_Pin
 8003e22:	2200      	movs	r2, #0
 8003e24:	f648 3110 	movw	r1, #35600	; 0x8b10
 8003e28:	482b      	ldr	r0, [pc, #172]	; (8003ed8 <MX_GPIO_Init+0x12c>)
 8003e2a:	f001 fb05 	bl	8005438 <HAL_GPIO_WritePin>
                          |SPI3_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN_Pin|SPI2_CS_Pin|W55_RST_Pin|W55_INT_Pin
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f241 7138 	movw	r1, #5944	; 0x1738
 8003e34:	4829      	ldr	r0, [pc, #164]	; (8003edc <MX_GPIO_Init+0x130>)
 8003e36:	f001 faff 	bl	8005438 <HAL_GPIO_WritePin>
                          |LED_2_Pin|EN_3_Pin|EN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SWREV_3_Pin|SWREV_2_Pin|SWREV_1_Pin|SWDIR_3_Pin
 8003e3a:	f24e 230f 	movw	r3, #57871	; 0xe20f
 8003e3e:	60fb      	str	r3, [r7, #12]
                          |SWDIR_2_Pin|SWDIR_1_Pin|EN_1_Pin|LED_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e40:	2301      	movs	r3, #1
 8003e42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e4c:	f107 030c 	add.w	r3, r7, #12
 8003e50:	4619      	mov	r1, r3
 8003e52:	4820      	ldr	r0, [pc, #128]	; (8003ed4 <MX_GPIO_Init+0x128>)
 8003e54:	f001 f954 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LED_1_Pin|EXT_0_Pin|EXT_1_Pin
 8003e58:	f648 3310 	movw	r3, #35600	; 0x8b10
 8003e5c:	60fb      	str	r3, [r7, #12]
                          |SPI3_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e6a:	f107 030c 	add.w	r3, r7, #12
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4819      	ldr	r0, [pc, #100]	; (8003ed8 <MX_GPIO_Init+0x12c>)
 8003e72:	f001 f945 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = PG_1_Pin|PG_2_Pin|OC_1_Pin|OC_2_Pin
 8003e76:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8003e7a:	60fb      	str	r3, [r7, #12]
                          |OC_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e84:	f107 030c 	add.w	r3, r7, #12
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4812      	ldr	r0, [pc, #72]	; (8003ed4 <MX_GPIO_Init+0x128>)
 8003e8c:	f001 f938 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PG_3_Pin;
 8003e90:	2304      	movs	r3, #4
 8003e92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e94:	2300      	movs	r3, #0
 8003e96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PG_3_GPIO_Port, &GPIO_InitStruct);
 8003e9c:	f107 030c 	add.w	r3, r7, #12
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	480e      	ldr	r0, [pc, #56]	; (8003edc <MX_GPIO_Init+0x130>)
 8003ea4:	f001 f92c 	bl	8005100 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PWR_EN_Pin|SPI2_CS_Pin|W55_RST_Pin|W55_INT_Pin
 8003ea8:	f241 7338 	movw	r3, #5944	; 0x1738
 8003eac:	60fb      	str	r3, [r7, #12]
                          |LED_2_Pin|EN_3_Pin|EN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eba:	f107 030c 	add.w	r3, r7, #12
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4806      	ldr	r0, [pc, #24]	; (8003edc <MX_GPIO_Init+0x130>)
 8003ec2:	f001 f91d 	bl	8005100 <HAL_GPIO_Init>

}
 8003ec6:	bf00      	nop
 8003ec8:	3720      	adds	r7, #32
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	40020800 	.word	0x40020800
 8003ed8:	40020000 	.word	0x40020000
 8003edc:	40020400 	.word	0x40020400

08003ee0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003ee4:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <MX_I2C1_Init+0x50>)
 8003ee6:	4a13      	ldr	r2, [pc, #76]	; (8003f34 <MX_I2C1_Init+0x54>)
 8003ee8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003eea:	4b11      	ldr	r3, [pc, #68]	; (8003f30 <MX_I2C1_Init+0x50>)
 8003eec:	4a12      	ldr	r2, [pc, #72]	; (8003f38 <MX_I2C1_Init+0x58>)
 8003eee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ef0:	4b0f      	ldr	r3, [pc, #60]	; (8003f30 <MX_I2C1_Init+0x50>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003ef6:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <MX_I2C1_Init+0x50>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003efc:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <MX_I2C1_Init+0x50>)
 8003efe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f04:	4b0a      	ldr	r3, [pc, #40]	; (8003f30 <MX_I2C1_Init+0x50>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003f0a:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <MX_I2C1_Init+0x50>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f10:	4b07      	ldr	r3, [pc, #28]	; (8003f30 <MX_I2C1_Init+0x50>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f16:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <MX_I2C1_Init+0x50>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003f1c:	4804      	ldr	r0, [pc, #16]	; (8003f30 <MX_I2C1_Init+0x50>)
 8003f1e:	f001 fabf 	bl	80054a0 <HAL_I2C_Init>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003f28:	f000 f8d4 	bl	80040d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003f2c:	bf00      	nop
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	20000d50 	.word	0x20000d50
 8003f34:	40005400 	.word	0x40005400
 8003f38:	000186a0 	.word	0x000186a0

08003f3c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b08a      	sub	sp, #40	; 0x28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f44:	f107 0314 	add.w	r3, r7, #20
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	605a      	str	r2, [r3, #4]
 8003f4e:	609a      	str	r2, [r3, #8]
 8003f50:	60da      	str	r2, [r3, #12]
 8003f52:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a19      	ldr	r2, [pc, #100]	; (8003fc0 <HAL_I2C_MspInit+0x84>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d12b      	bne.n	8003fb6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f5e:	2300      	movs	r3, #0
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	4b18      	ldr	r3, [pc, #96]	; (8003fc4 <HAL_I2C_MspInit+0x88>)
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	4a17      	ldr	r2, [pc, #92]	; (8003fc4 <HAL_I2C_MspInit+0x88>)
 8003f68:	f043 0302 	orr.w	r3, r3, #2
 8003f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f6e:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <HAL_I2C_MspInit+0x88>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f7a:	23c0      	movs	r3, #192	; 0xc0
 8003f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f7e:	2312      	movs	r3, #18
 8003f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f86:	2303      	movs	r3, #3
 8003f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f8a:	2304      	movs	r3, #4
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f8e:	f107 0314 	add.w	r3, r7, #20
 8003f92:	4619      	mov	r1, r3
 8003f94:	480c      	ldr	r0, [pc, #48]	; (8003fc8 <HAL_I2C_MspInit+0x8c>)
 8003f96:	f001 f8b3 	bl	8005100 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
 8003f9e:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <HAL_I2C_MspInit+0x88>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	4a08      	ldr	r2, [pc, #32]	; (8003fc4 <HAL_I2C_MspInit+0x88>)
 8003fa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <HAL_I2C_MspInit+0x88>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003fb6:	bf00      	nop
 8003fb8:	3728      	adds	r7, #40	; 0x28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40005400 	.word	0x40005400
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40020400 	.word	0x40020400

08003fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fd0:	f000 fca0 	bl	8004914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003fd4:	f000 f816 	bl	8004004 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fd8:	f7ff fee8 	bl	8003dac <MX_GPIO_Init>
  MX_ADC1_Init();
 8003fdc:	f7ff fe2e 	bl	8003c3c <MX_ADC1_Init>
  MX_I2C1_Init();
 8003fe0:	f7ff ff7e 	bl	8003ee0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8003fe4:	f000 f87c 	bl	80040e0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003fe8:	f000 f8b2 	bl	8004150 <MX_SPI2_Init>
  MX_SPI3_Init();
 8003fec:	f000 f8e8 	bl	80041c0 <MX_SPI3_Init>
  MX_SPI5_Init();
 8003ff0:	f000 f91c 	bl	800422c <MX_SPI5_Init>
  MX_USART2_UART_Init();
 8003ff4:	f000 fbea 	bl	80047cc <MX_USART2_UART_Init>
  MX_TIM10_Init();
 8003ff8:	f000 fb9c 	bl	8004734 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  application_main();
 8003ffc:	f7fd f804 	bl	8001008 <application_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004000:	e7fe      	b.n	8004000 <main+0x34>
	...

08004004 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b094      	sub	sp, #80	; 0x50
 8004008:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800400a:	f107 0320 	add.w	r3, r7, #32
 800400e:	2230      	movs	r2, #48	; 0x30
 8004010:	2100      	movs	r1, #0
 8004012:	4618      	mov	r0, r3
 8004014:	f004 fd9e 	bl	8008b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004018:	f107 030c 	add.w	r3, r7, #12
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	605a      	str	r2, [r3, #4]
 8004022:	609a      	str	r2, [r3, #8]
 8004024:	60da      	str	r2, [r3, #12]
 8004026:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004028:	2300      	movs	r3, #0
 800402a:	60bb      	str	r3, [r7, #8]
 800402c:	4b27      	ldr	r3, [pc, #156]	; (80040cc <SystemClock_Config+0xc8>)
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	4a26      	ldr	r2, [pc, #152]	; (80040cc <SystemClock_Config+0xc8>)
 8004032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004036:	6413      	str	r3, [r2, #64]	; 0x40
 8004038:	4b24      	ldr	r3, [pc, #144]	; (80040cc <SystemClock_Config+0xc8>)
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004040:	60bb      	str	r3, [r7, #8]
 8004042:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004044:	2300      	movs	r3, #0
 8004046:	607b      	str	r3, [r7, #4]
 8004048:	4b21      	ldr	r3, [pc, #132]	; (80040d0 <SystemClock_Config+0xcc>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a20      	ldr	r2, [pc, #128]	; (80040d0 <SystemClock_Config+0xcc>)
 800404e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	4b1e      	ldr	r3, [pc, #120]	; (80040d0 <SystemClock_Config+0xcc>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800405c:	607b      	str	r3, [r7, #4]
 800405e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004060:	2302      	movs	r3, #2
 8004062:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004064:	2301      	movs	r3, #1
 8004066:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004068:	2310      	movs	r3, #16
 800406a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800406c:	2302      	movs	r3, #2
 800406e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004070:	2300      	movs	r3, #0
 8004072:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004074:	2308      	movs	r3, #8
 8004076:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004078:	2364      	movs	r3, #100	; 0x64
 800407a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800407c:	2302      	movs	r3, #2
 800407e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004080:	2304      	movs	r3, #4
 8004082:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004084:	f107 0320 	add.w	r3, r7, #32
 8004088:	4618      	mov	r0, r3
 800408a:	f001 fb4d 	bl	8005728 <HAL_RCC_OscConfig>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004094:	f000 f81e 	bl	80040d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004098:	230f      	movs	r3, #15
 800409a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800409c:	2302      	movs	r3, #2
 800409e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040a0:	2300      	movs	r3, #0
 80040a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80040a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80040ae:	f107 030c 	add.w	r3, r7, #12
 80040b2:	2103      	movs	r1, #3
 80040b4:	4618      	mov	r0, r3
 80040b6:	f001 fdaf 	bl	8005c18 <HAL_RCC_ClockConfig>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80040c0:	f000 f808 	bl	80040d4 <Error_Handler>
  }
}
 80040c4:	bf00      	nop
 80040c6:	3750      	adds	r7, #80	; 0x50
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40023800 	.word	0x40023800
 80040d0:	40007000 	.word	0x40007000

080040d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80040d8:	b672      	cpsid	i
}
 80040da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80040dc:	e7fe      	b.n	80040dc <Error_Handler+0x8>
	...

080040e0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi5;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80040e4:	4b18      	ldr	r3, [pc, #96]	; (8004148 <MX_SPI1_Init+0x68>)
 80040e6:	4a19      	ldr	r2, [pc, #100]	; (800414c <MX_SPI1_Init+0x6c>)
 80040e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80040ea:	4b17      	ldr	r3, [pc, #92]	; (8004148 <MX_SPI1_Init+0x68>)
 80040ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80040f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80040f2:	4b15      	ldr	r3, [pc, #84]	; (8004148 <MX_SPI1_Init+0x68>)
 80040f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80040f8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80040fa:	4b13      	ldr	r3, [pc, #76]	; (8004148 <MX_SPI1_Init+0x68>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004100:	4b11      	ldr	r3, [pc, #68]	; (8004148 <MX_SPI1_Init+0x68>)
 8004102:	2200      	movs	r2, #0
 8004104:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004106:	4b10      	ldr	r3, [pc, #64]	; (8004148 <MX_SPI1_Init+0x68>)
 8004108:	2201      	movs	r2, #1
 800410a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800410c:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <MX_SPI1_Init+0x68>)
 800410e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004112:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004114:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <MX_SPI1_Init+0x68>)
 8004116:	2238      	movs	r2, #56	; 0x38
 8004118:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800411a:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <MX_SPI1_Init+0x68>)
 800411c:	2200      	movs	r2, #0
 800411e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004120:	4b09      	ldr	r3, [pc, #36]	; (8004148 <MX_SPI1_Init+0x68>)
 8004122:	2200      	movs	r2, #0
 8004124:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004126:	4b08      	ldr	r3, [pc, #32]	; (8004148 <MX_SPI1_Init+0x68>)
 8004128:	2200      	movs	r2, #0
 800412a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800412c:	4b06      	ldr	r3, [pc, #24]	; (8004148 <MX_SPI1_Init+0x68>)
 800412e:	220a      	movs	r2, #10
 8004130:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004132:	4805      	ldr	r0, [pc, #20]	; (8004148 <MX_SPI1_Init+0x68>)
 8004134:	f001 ff50 	bl	8005fd8 <HAL_SPI_Init>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800413e:	f7ff ffc9 	bl	80040d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004142:	bf00      	nop
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000da4 	.word	0x20000da4
 800414c:	40013000 	.word	0x40013000

08004150 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004154:	4b18      	ldr	r3, [pc, #96]	; (80041b8 <MX_SPI2_Init+0x68>)
 8004156:	4a19      	ldr	r2, [pc, #100]	; (80041bc <MX_SPI2_Init+0x6c>)
 8004158:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800415a:	4b17      	ldr	r3, [pc, #92]	; (80041b8 <MX_SPI2_Init+0x68>)
 800415c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004160:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004162:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <MX_SPI2_Init+0x68>)
 8004164:	2200      	movs	r2, #0
 8004166:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8004168:	4b13      	ldr	r3, [pc, #76]	; (80041b8 <MX_SPI2_Init+0x68>)
 800416a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800416e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004170:	4b11      	ldr	r3, [pc, #68]	; (80041b8 <MX_SPI2_Init+0x68>)
 8004172:	2200      	movs	r2, #0
 8004174:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004176:	4b10      	ldr	r3, [pc, #64]	; (80041b8 <MX_SPI2_Init+0x68>)
 8004178:	2200      	movs	r2, #0
 800417a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800417c:	4b0e      	ldr	r3, [pc, #56]	; (80041b8 <MX_SPI2_Init+0x68>)
 800417e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004182:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004184:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <MX_SPI2_Init+0x68>)
 8004186:	2210      	movs	r2, #16
 8004188:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800418a:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <MX_SPI2_Init+0x68>)
 800418c:	2200      	movs	r2, #0
 800418e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004190:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <MX_SPI2_Init+0x68>)
 8004192:	2200      	movs	r2, #0
 8004194:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004196:	4b08      	ldr	r3, [pc, #32]	; (80041b8 <MX_SPI2_Init+0x68>)
 8004198:	2200      	movs	r2, #0
 800419a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800419c:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <MX_SPI2_Init+0x68>)
 800419e:	220a      	movs	r2, #10
 80041a0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80041a2:	4805      	ldr	r0, [pc, #20]	; (80041b8 <MX_SPI2_Init+0x68>)
 80041a4:	f001 ff18 	bl	8005fd8 <HAL_SPI_Init>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d001      	beq.n	80041b2 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80041ae:	f7ff ff91 	bl	80040d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80041b2:	bf00      	nop
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000dfc 	.word	0x20000dfc
 80041bc:	40003800 	.word	0x40003800

080041c0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80041c4:	4b17      	ldr	r3, [pc, #92]	; (8004224 <MX_SPI3_Init+0x64>)
 80041c6:	4a18      	ldr	r2, [pc, #96]	; (8004228 <MX_SPI3_Init+0x68>)
 80041c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80041ca:	4b16      	ldr	r3, [pc, #88]	; (8004224 <MX_SPI3_Init+0x64>)
 80041cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80041d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80041d2:	4b14      	ldr	r3, [pc, #80]	; (8004224 <MX_SPI3_Init+0x64>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80041d8:	4b12      	ldr	r3, [pc, #72]	; (8004224 <MX_SPI3_Init+0x64>)
 80041da:	2200      	movs	r2, #0
 80041dc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041de:	4b11      	ldr	r3, [pc, #68]	; (8004224 <MX_SPI3_Init+0x64>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041e4:	4b0f      	ldr	r3, [pc, #60]	; (8004224 <MX_SPI3_Init+0x64>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80041ea:	4b0e      	ldr	r3, [pc, #56]	; (8004224 <MX_SPI3_Init+0x64>)
 80041ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041f0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80041f2:	4b0c      	ldr	r3, [pc, #48]	; (8004224 <MX_SPI3_Init+0x64>)
 80041f4:	2220      	movs	r2, #32
 80041f6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80041f8:	4b0a      	ldr	r3, [pc, #40]	; (8004224 <MX_SPI3_Init+0x64>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80041fe:	4b09      	ldr	r3, [pc, #36]	; (8004224 <MX_SPI3_Init+0x64>)
 8004200:	2200      	movs	r2, #0
 8004202:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004204:	4b07      	ldr	r3, [pc, #28]	; (8004224 <MX_SPI3_Init+0x64>)
 8004206:	2200      	movs	r2, #0
 8004208:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800420a:	4b06      	ldr	r3, [pc, #24]	; (8004224 <MX_SPI3_Init+0x64>)
 800420c:	220a      	movs	r2, #10
 800420e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004210:	4804      	ldr	r0, [pc, #16]	; (8004224 <MX_SPI3_Init+0x64>)
 8004212:	f001 fee1 	bl	8005fd8 <HAL_SPI_Init>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800421c:	f7ff ff5a 	bl	80040d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004220:	bf00      	nop
 8004222:	bd80      	pop	{r7, pc}
 8004224:	20000e54 	.word	0x20000e54
 8004228:	40003c00 	.word	0x40003c00

0800422c <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8004230:	4b17      	ldr	r3, [pc, #92]	; (8004290 <MX_SPI5_Init+0x64>)
 8004232:	4a18      	ldr	r2, [pc, #96]	; (8004294 <MX_SPI5_Init+0x68>)
 8004234:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8004236:	4b16      	ldr	r3, [pc, #88]	; (8004290 <MX_SPI5_Init+0x64>)
 8004238:	f44f 7282 	mov.w	r2, #260	; 0x104
 800423c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800423e:	4b14      	ldr	r3, [pc, #80]	; (8004290 <MX_SPI5_Init+0x64>)
 8004240:	2200      	movs	r2, #0
 8004242:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004244:	4b12      	ldr	r3, [pc, #72]	; (8004290 <MX_SPI5_Init+0x64>)
 8004246:	2200      	movs	r2, #0
 8004248:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800424a:	4b11      	ldr	r3, [pc, #68]	; (8004290 <MX_SPI5_Init+0x64>)
 800424c:	2200      	movs	r2, #0
 800424e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004250:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <MX_SPI5_Init+0x64>)
 8004252:	2200      	movs	r2, #0
 8004254:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8004256:	4b0e      	ldr	r3, [pc, #56]	; (8004290 <MX_SPI5_Init+0x64>)
 8004258:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800425c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800425e:	4b0c      	ldr	r3, [pc, #48]	; (8004290 <MX_SPI5_Init+0x64>)
 8004260:	2200      	movs	r2, #0
 8004262:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004264:	4b0a      	ldr	r3, [pc, #40]	; (8004290 <MX_SPI5_Init+0x64>)
 8004266:	2200      	movs	r2, #0
 8004268:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800426a:	4b09      	ldr	r3, [pc, #36]	; (8004290 <MX_SPI5_Init+0x64>)
 800426c:	2200      	movs	r2, #0
 800426e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004270:	4b07      	ldr	r3, [pc, #28]	; (8004290 <MX_SPI5_Init+0x64>)
 8004272:	2200      	movs	r2, #0
 8004274:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8004276:	4b06      	ldr	r3, [pc, #24]	; (8004290 <MX_SPI5_Init+0x64>)
 8004278:	220a      	movs	r2, #10
 800427a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800427c:	4804      	ldr	r0, [pc, #16]	; (8004290 <MX_SPI5_Init+0x64>)
 800427e:	f001 feab 	bl	8005fd8 <HAL_SPI_Init>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8004288:	f7ff ff24 	bl	80040d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800428c:	bf00      	nop
 800428e:	bd80      	pop	{r7, pc}
 8004290:	20000eac 	.word	0x20000eac
 8004294:	40015000 	.word	0x40015000

08004298 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b090      	sub	sp, #64	; 0x40
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	605a      	str	r2, [r3, #4]
 80042aa:	609a      	str	r2, [r3, #8]
 80042ac:	60da      	str	r2, [r3, #12]
 80042ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a74      	ldr	r2, [pc, #464]	; (8004488 <HAL_SPI_MspInit+0x1f0>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d12c      	bne.n	8004314 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80042ba:	2300      	movs	r3, #0
 80042bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042be:	4b73      	ldr	r3, [pc, #460]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 80042c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c2:	4a72      	ldr	r2, [pc, #456]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 80042c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042c8:	6453      	str	r3, [r2, #68]	; 0x44
 80042ca:	4b70      	ldr	r3, [pc, #448]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 80042cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80042d4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042d6:	2300      	movs	r3, #0
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24
 80042da:	4b6c      	ldr	r3, [pc, #432]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	4a6b      	ldr	r2, [pc, #428]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	6313      	str	r3, [r2, #48]	; 0x30
 80042e6:	4b69      	ldr	r3, [pc, #420]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80042f2:	23a0      	movs	r3, #160	; 0xa0
 80042f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f6:	2302      	movs	r3, #2
 80042f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042fe:	2303      	movs	r3, #3
 8004300:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004302:	2305      	movs	r3, #5
 8004304:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004306:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800430a:	4619      	mov	r1, r3
 800430c:	4860      	ldr	r0, [pc, #384]	; (8004490 <HAL_SPI_MspInit+0x1f8>)
 800430e:	f000 fef7 	bl	8005100 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8004312:	e0b5      	b.n	8004480 <HAL_SPI_MspInit+0x1e8>
  else if(spiHandle->Instance==SPI2)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a5e      	ldr	r2, [pc, #376]	; (8004494 <HAL_SPI_MspInit+0x1fc>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d12d      	bne.n	800437a <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800431e:	2300      	movs	r3, #0
 8004320:	623b      	str	r3, [r7, #32]
 8004322:	4b5a      	ldr	r3, [pc, #360]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	4a59      	ldr	r2, [pc, #356]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 8004328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800432c:	6413      	str	r3, [r2, #64]	; 0x40
 800432e:	4b57      	ldr	r3, [pc, #348]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004336:	623b      	str	r3, [r7, #32]
 8004338:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
 800433e:	4b53      	ldr	r3, [pc, #332]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	4a52      	ldr	r2, [pc, #328]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 8004344:	f043 0302 	orr.w	r3, r3, #2
 8004348:	6313      	str	r3, [r2, #48]	; 0x30
 800434a:	4b50      	ldr	r3, [pc, #320]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 800434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	61fb      	str	r3, [r7, #28]
 8004354:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004356:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800435a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800435c:	2302      	movs	r3, #2
 800435e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004360:	2300      	movs	r3, #0
 8004362:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004364:	2303      	movs	r3, #3
 8004366:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004368:	2305      	movs	r3, #5
 800436a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800436c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004370:	4619      	mov	r1, r3
 8004372:	4849      	ldr	r0, [pc, #292]	; (8004498 <HAL_SPI_MspInit+0x200>)
 8004374:	f000 fec4 	bl	8005100 <HAL_GPIO_Init>
}
 8004378:	e082      	b.n	8004480 <HAL_SPI_MspInit+0x1e8>
  else if(spiHandle->Instance==SPI3)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a47      	ldr	r2, [pc, #284]	; (800449c <HAL_SPI_MspInit+0x204>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d12d      	bne.n	80043e0 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004384:	2300      	movs	r3, #0
 8004386:	61bb      	str	r3, [r7, #24]
 8004388:	4b40      	ldr	r3, [pc, #256]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	4a3f      	ldr	r2, [pc, #252]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 800438e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004392:	6413      	str	r3, [r2, #64]	; 0x40
 8004394:	4b3d      	ldr	r3, [pc, #244]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043a0:	2300      	movs	r3, #0
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	4b39      	ldr	r3, [pc, #228]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 80043a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a8:	4a38      	ldr	r2, [pc, #224]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 80043aa:	f043 0304 	orr.w	r3, r3, #4
 80043ae:	6313      	str	r3, [r2, #48]	; 0x30
 80043b0:	4b36      	ldr	r3, [pc, #216]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 80043b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80043bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80043c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043c2:	2302      	movs	r3, #2
 80043c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ca:	2303      	movs	r3, #3
 80043cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80043ce:	2306      	movs	r3, #6
 80043d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043d6:	4619      	mov	r1, r3
 80043d8:	4831      	ldr	r0, [pc, #196]	; (80044a0 <HAL_SPI_MspInit+0x208>)
 80043da:	f000 fe91 	bl	8005100 <HAL_GPIO_Init>
}
 80043de:	e04f      	b.n	8004480 <HAL_SPI_MspInit+0x1e8>
  else if(spiHandle->Instance==SPI5)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a2f      	ldr	r2, [pc, #188]	; (80044a4 <HAL_SPI_MspInit+0x20c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d14a      	bne.n	8004480 <HAL_SPI_MspInit+0x1e8>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80043ea:	2300      	movs	r3, #0
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	4b27      	ldr	r3, [pc, #156]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 80043f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f2:	4a26      	ldr	r2, [pc, #152]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 80043f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043f8:	6453      	str	r3, [r2, #68]	; 0x44
 80043fa:	4b24      	ldr	r3, [pc, #144]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004406:	2300      	movs	r3, #0
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	4b20      	ldr	r3, [pc, #128]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	4a1f      	ldr	r2, [pc, #124]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 8004410:	f043 0302 	orr.w	r3, r3, #2
 8004414:	6313      	str	r3, [r2, #48]	; 0x30
 8004416:	4b1d      	ldr	r3, [pc, #116]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004422:	2300      	movs	r3, #0
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	4b19      	ldr	r3, [pc, #100]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	4a18      	ldr	r2, [pc, #96]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 800442c:	f043 0301 	orr.w	r3, r3, #1
 8004430:	6313      	str	r3, [r2, #48]	; 0x30
 8004432:	4b16      	ldr	r3, [pc, #88]	; (800448c <HAL_SPI_MspInit+0x1f4>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800443e:	2303      	movs	r3, #3
 8004440:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004442:	2302      	movs	r3, #2
 8004444:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004446:	2300      	movs	r3, #0
 8004448:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800444a:	2303      	movs	r3, #3
 800444c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 800444e:	2306      	movs	r3, #6
 8004450:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004452:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004456:	4619      	mov	r1, r3
 8004458:	480f      	ldr	r0, [pc, #60]	; (8004498 <HAL_SPI_MspInit+0x200>)
 800445a:	f000 fe51 	bl	8005100 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800445e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004462:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004464:	2302      	movs	r3, #2
 8004466:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004468:	2300      	movs	r3, #0
 800446a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800446c:	2303      	movs	r3, #3
 800446e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004470:	2306      	movs	r3, #6
 8004472:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004474:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004478:	4619      	mov	r1, r3
 800447a:	4805      	ldr	r0, [pc, #20]	; (8004490 <HAL_SPI_MspInit+0x1f8>)
 800447c:	f000 fe40 	bl	8005100 <HAL_GPIO_Init>
}
 8004480:	bf00      	nop
 8004482:	3740      	adds	r7, #64	; 0x40
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40013000 	.word	0x40013000
 800448c:	40023800 	.word	0x40023800
 8004490:	40020000 	.word	0x40020000
 8004494:	40003800 	.word	0x40003800
 8004498:	40020400 	.word	0x40020400
 800449c:	40003c00 	.word	0x40003c00
 80044a0:	40020800 	.word	0x40020800
 80044a4:	40015000 	.word	0x40015000

080044a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044ae:	2300      	movs	r3, #0
 80044b0:	607b      	str	r3, [r7, #4]
 80044b2:	4b10      	ldr	r3, [pc, #64]	; (80044f4 <HAL_MspInit+0x4c>)
 80044b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b6:	4a0f      	ldr	r2, [pc, #60]	; (80044f4 <HAL_MspInit+0x4c>)
 80044b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044bc:	6453      	str	r3, [r2, #68]	; 0x44
 80044be:	4b0d      	ldr	r3, [pc, #52]	; (80044f4 <HAL_MspInit+0x4c>)
 80044c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044c6:	607b      	str	r3, [r7, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044ca:	2300      	movs	r3, #0
 80044cc:	603b      	str	r3, [r7, #0]
 80044ce:	4b09      	ldr	r3, [pc, #36]	; (80044f4 <HAL_MspInit+0x4c>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	4a08      	ldr	r2, [pc, #32]	; (80044f4 <HAL_MspInit+0x4c>)
 80044d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d8:	6413      	str	r3, [r2, #64]	; 0x40
 80044da:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <HAL_MspInit+0x4c>)
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40023800 	.word	0x40023800

080044f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044fc:	e7fe      	b.n	80044fc <NMI_Handler+0x4>

080044fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044fe:	b480      	push	{r7}
 8004500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004502:	e7fe      	b.n	8004502 <HardFault_Handler+0x4>

08004504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004508:	e7fe      	b.n	8004508 <MemManage_Handler+0x4>

0800450a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800450a:	b480      	push	{r7}
 800450c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800450e:	e7fe      	b.n	800450e <BusFault_Handler+0x4>

08004510 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004514:	e7fe      	b.n	8004514 <UsageFault_Handler+0x4>

08004516 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004516:	b480      	push	{r7}
 8004518:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800451a:	bf00      	nop
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004528:	bf00      	nop
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004532:	b480      	push	{r7}
 8004534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004536:	bf00      	nop
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004544:	f000 fa38 	bl	80049b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004548:	bf00      	nop
 800454a:	bd80      	pop	{r7, pc}

0800454c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004550:	4802      	ldr	r0, [pc, #8]	; (800455c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004552:	f002 fb9b 	bl	8006c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004556:	bf00      	nop
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	20000f08 	.word	0x20000f08

08004560 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	USART2->SR &= ~USART_SR_RXNE_Msk;
 8004564:	4b06      	ldr	r3, [pc, #24]	; (8004580 <USART2_IRQHandler+0x20>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a05      	ldr	r2, [pc, #20]	; (8004580 <USART2_IRQHandler+0x20>)
 800456a:	f023 0320 	bic.w	r3, r3, #32
 800456e:	6013      	str	r3, [r2, #0]
	Uart_WriteBuffer(USART2->DR);
 8004570:	4b03      	ldr	r3, [pc, #12]	; (8004580 <USART2_IRQHandler+0x20>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	b2db      	uxtb	r3, r3
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff faf2 	bl	8003b60 <Uart_WriteBuffer>

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800457c:	bf00      	nop
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40004400 	.word	0x40004400

08004584 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  return 1;
 8004588:	2301      	movs	r3, #1
}
 800458a:	4618      	mov	r0, r3
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <_kill>:

int _kill(int pid, int sig)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800459e:	f004 fa99 	bl	8008ad4 <__errno>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2216      	movs	r2, #22
 80045a6:	601a      	str	r2, [r3, #0]
  return -1;
 80045a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <_exit>:

void _exit (int status)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80045bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f7ff ffe7 	bl	8004594 <_kill>
  while (1) {}    /* Make sure we hang here */
 80045c6:	e7fe      	b.n	80045c6 <_exit+0x12>

080045c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045d4:	2300      	movs	r3, #0
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	e00a      	b.n	80045f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80045da:	f3af 8000 	nop.w
 80045de:	4601      	mov	r1, r0
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	60ba      	str	r2, [r7, #8]
 80045e6:	b2ca      	uxtb	r2, r1
 80045e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	3301      	adds	r3, #1
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	dbf0      	blt.n	80045da <_read+0x12>
  }

  return len;
 80045f8:	687b      	ldr	r3, [r7, #4]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b086      	sub	sp, #24
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800460e:	2300      	movs	r3, #0
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	e009      	b.n	8004628 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	60ba      	str	r2, [r7, #8]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	3301      	adds	r3, #1
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	429a      	cmp	r2, r3
 800462e:	dbf1      	blt.n	8004614 <_write+0x12>
  }
  return len;
 8004630:	687b      	ldr	r3, [r7, #4]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3718      	adds	r7, #24
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <_close>:

int _close(int file)
{
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004646:	4618      	mov	r0, r3
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
 800465a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004662:	605a      	str	r2, [r3, #4]
  return 0;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <_isatty>:

int _isatty(int file)
{
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800467a:	2301      	movs	r3, #1
}
 800467c:	4618      	mov	r0, r3
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
	...

080046a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046ac:	4a14      	ldr	r2, [pc, #80]	; (8004700 <_sbrk+0x5c>)
 80046ae:	4b15      	ldr	r3, [pc, #84]	; (8004704 <_sbrk+0x60>)
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046b8:	4b13      	ldr	r3, [pc, #76]	; (8004708 <_sbrk+0x64>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d102      	bne.n	80046c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046c0:	4b11      	ldr	r3, [pc, #68]	; (8004708 <_sbrk+0x64>)
 80046c2:	4a12      	ldr	r2, [pc, #72]	; (800470c <_sbrk+0x68>)
 80046c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046c6:	4b10      	ldr	r3, [pc, #64]	; (8004708 <_sbrk+0x64>)
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4413      	add	r3, r2
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d207      	bcs.n	80046e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80046d4:	f004 f9fe 	bl	8008ad4 <__errno>
 80046d8:	4603      	mov	r3, r0
 80046da:	220c      	movs	r2, #12
 80046dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80046de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046e2:	e009      	b.n	80046f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80046e4:	4b08      	ldr	r3, [pc, #32]	; (8004708 <_sbrk+0x64>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046ea:	4b07      	ldr	r3, [pc, #28]	; (8004708 <_sbrk+0x64>)
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4413      	add	r3, r2
 80046f2:	4a05      	ldr	r2, [pc, #20]	; (8004708 <_sbrk+0x64>)
 80046f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046f6:	68fb      	ldr	r3, [r7, #12]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	20020000 	.word	0x20020000
 8004704:	00000400 	.word	0x00000400
 8004708:	20000f04 	.word	0x20000f04
 800470c:	20000fd0 	.word	0x20000fd0

08004710 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004714:	4b06      	ldr	r3, [pc, #24]	; (8004730 <SystemInit+0x20>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471a:	4a05      	ldr	r2, [pc, #20]	; (8004730 <SystemInit+0x20>)
 800471c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004720:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004724:	bf00      	nop
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	e000ed00 	.word	0xe000ed00

08004734 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004738:	4b0e      	ldr	r3, [pc, #56]	; (8004774 <MX_TIM10_Init+0x40>)
 800473a:	4a0f      	ldr	r2, [pc, #60]	; (8004778 <MX_TIM10_Init+0x44>)
 800473c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 800473e:	4b0d      	ldr	r3, [pc, #52]	; (8004774 <MX_TIM10_Init+0x40>)
 8004740:	2263      	movs	r2, #99	; 0x63
 8004742:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004744:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <MX_TIM10_Init+0x40>)
 8004746:	2200      	movs	r2, #0
 8004748:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 17999;
 800474a:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <MX_TIM10_Init+0x40>)
 800474c:	f244 624f 	movw	r2, #17999	; 0x464f
 8004750:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004752:	4b08      	ldr	r3, [pc, #32]	; (8004774 <MX_TIM10_Init+0x40>)
 8004754:	2200      	movs	r2, #0
 8004756:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004758:	4b06      	ldr	r3, [pc, #24]	; (8004774 <MX_TIM10_Init+0x40>)
 800475a:	2200      	movs	r2, #0
 800475c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800475e:	4805      	ldr	r0, [pc, #20]	; (8004774 <MX_TIM10_Init+0x40>)
 8004760:	f002 f9e2 	bl	8006b28 <HAL_TIM_Base_Init>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800476a:	f7ff fcb3 	bl	80040d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800476e:	bf00      	nop
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000f08 	.word	0x20000f08
 8004778:	40014400 	.word	0x40014400

0800477c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a0e      	ldr	r2, [pc, #56]	; (80047c4 <HAL_TIM_Base_MspInit+0x48>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d115      	bne.n	80047ba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800478e:	2300      	movs	r3, #0
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	4b0d      	ldr	r3, [pc, #52]	; (80047c8 <HAL_TIM_Base_MspInit+0x4c>)
 8004794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004796:	4a0c      	ldr	r2, [pc, #48]	; (80047c8 <HAL_TIM_Base_MspInit+0x4c>)
 8004798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800479c:	6453      	str	r3, [r2, #68]	; 0x44
 800479e:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <HAL_TIM_Base_MspInit+0x4c>)
 80047a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80047aa:	2200      	movs	r2, #0
 80047ac:	2100      	movs	r1, #0
 80047ae:	2019      	movs	r0, #25
 80047b0:	f000 fc6f 	bl	8005092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80047b4:	2019      	movs	r0, #25
 80047b6:	f000 fc88 	bl	80050ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40014400 	.word	0x40014400
 80047c8:	40023800 	.word	0x40023800

080047cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80047d0:	4b11      	ldr	r3, [pc, #68]	; (8004818 <MX_USART2_UART_Init+0x4c>)
 80047d2:	4a12      	ldr	r2, [pc, #72]	; (800481c <MX_USART2_UART_Init+0x50>)
 80047d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80047d6:	4b10      	ldr	r3, [pc, #64]	; (8004818 <MX_USART2_UART_Init+0x4c>)
 80047d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80047dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80047de:	4b0e      	ldr	r3, [pc, #56]	; (8004818 <MX_USART2_UART_Init+0x4c>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80047e4:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <MX_USART2_UART_Init+0x4c>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80047ea:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <MX_USART2_UART_Init+0x4c>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80047f0:	4b09      	ldr	r3, [pc, #36]	; (8004818 <MX_USART2_UART_Init+0x4c>)
 80047f2:	220c      	movs	r2, #12
 80047f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047f6:	4b08      	ldr	r3, [pc, #32]	; (8004818 <MX_USART2_UART_Init+0x4c>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80047fc:	4b06      	ldr	r3, [pc, #24]	; (8004818 <MX_USART2_UART_Init+0x4c>)
 80047fe:	2200      	movs	r2, #0
 8004800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004802:	4805      	ldr	r0, [pc, #20]	; (8004818 <MX_USART2_UART_Init+0x4c>)
 8004804:	f002 fc06 	bl	8007014 <HAL_UART_Init>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800480e:	f7ff fc61 	bl	80040d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004812:	bf00      	nop
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20000f50 	.word	0x20000f50
 800481c:	40004400 	.word	0x40004400

08004820 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08a      	sub	sp, #40	; 0x28
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004828:	f107 0314 	add.w	r3, r7, #20
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	605a      	str	r2, [r3, #4]
 8004832:	609a      	str	r2, [r3, #8]
 8004834:	60da      	str	r2, [r3, #12]
 8004836:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a1d      	ldr	r2, [pc, #116]	; (80048b4 <HAL_UART_MspInit+0x94>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d133      	bne.n	80048aa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004842:	2300      	movs	r3, #0
 8004844:	613b      	str	r3, [r7, #16]
 8004846:	4b1c      	ldr	r3, [pc, #112]	; (80048b8 <HAL_UART_MspInit+0x98>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	4a1b      	ldr	r2, [pc, #108]	; (80048b8 <HAL_UART_MspInit+0x98>)
 800484c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004850:	6413      	str	r3, [r2, #64]	; 0x40
 8004852:	4b19      	ldr	r3, [pc, #100]	; (80048b8 <HAL_UART_MspInit+0x98>)
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	4b15      	ldr	r3, [pc, #84]	; (80048b8 <HAL_UART_MspInit+0x98>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	4a14      	ldr	r2, [pc, #80]	; (80048b8 <HAL_UART_MspInit+0x98>)
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	6313      	str	r3, [r2, #48]	; 0x30
 800486e:	4b12      	ldr	r3, [pc, #72]	; (80048b8 <HAL_UART_MspInit+0x98>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800487a:	230c      	movs	r3, #12
 800487c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800487e:	2302      	movs	r3, #2
 8004880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004882:	2300      	movs	r3, #0
 8004884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004886:	2303      	movs	r3, #3
 8004888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800488a:	2307      	movs	r3, #7
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800488e:	f107 0314 	add.w	r3, r7, #20
 8004892:	4619      	mov	r1, r3
 8004894:	4809      	ldr	r0, [pc, #36]	; (80048bc <HAL_UART_MspInit+0x9c>)
 8004896:	f000 fc33 	bl	8005100 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800489a:	2200      	movs	r2, #0
 800489c:	2100      	movs	r1, #0
 800489e:	2026      	movs	r0, #38	; 0x26
 80048a0:	f000 fbf7 	bl	8005092 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80048a4:	2026      	movs	r0, #38	; 0x26
 80048a6:	f000 fc10 	bl	80050ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80048aa:	bf00      	nop
 80048ac:	3728      	adds	r7, #40	; 0x28
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	40004400 	.word	0x40004400
 80048b8:	40023800 	.word	0x40023800
 80048bc:	40020000 	.word	0x40020000

080048c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80048c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80048c4:	480d      	ldr	r0, [pc, #52]	; (80048fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80048c6:	490e      	ldr	r1, [pc, #56]	; (8004900 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80048c8:	4a0e      	ldr	r2, [pc, #56]	; (8004904 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80048ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048cc:	e002      	b.n	80048d4 <LoopCopyDataInit>

080048ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048d2:	3304      	adds	r3, #4

080048d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048d8:	d3f9      	bcc.n	80048ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048da:	4a0b      	ldr	r2, [pc, #44]	; (8004908 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80048dc:	4c0b      	ldr	r4, [pc, #44]	; (800490c <LoopFillZerobss+0x26>)
  movs r3, #0
 80048de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048e0:	e001      	b.n	80048e6 <LoopFillZerobss>

080048e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048e4:	3204      	adds	r2, #4

080048e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048e8:	d3fb      	bcc.n	80048e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80048ea:	f7ff ff11 	bl	8004710 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048ee:	f004 f8f7 	bl	8008ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048f2:	f7ff fb6b 	bl	8003fcc <main>
  bx  lr    
 80048f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80048f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80048fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004900:	20000284 	.word	0x20000284
  ldr r2, =_sidata
 8004904:	0800dd70 	.word	0x0800dd70
  ldr r2, =_sbss
 8004908:	20000284 	.word	0x20000284
  ldr r4, =_ebss
 800490c:	20000fcc 	.word	0x20000fcc

08004910 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004910:	e7fe      	b.n	8004910 <ADC_IRQHandler>
	...

08004914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004918:	4b0e      	ldr	r3, [pc, #56]	; (8004954 <HAL_Init+0x40>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a0d      	ldr	r2, [pc, #52]	; (8004954 <HAL_Init+0x40>)
 800491e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004922:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004924:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <HAL_Init+0x40>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a0a      	ldr	r2, [pc, #40]	; (8004954 <HAL_Init+0x40>)
 800492a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800492e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004930:	4b08      	ldr	r3, [pc, #32]	; (8004954 <HAL_Init+0x40>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a07      	ldr	r2, [pc, #28]	; (8004954 <HAL_Init+0x40>)
 8004936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800493a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800493c:	2003      	movs	r0, #3
 800493e:	f000 fb9d 	bl	800507c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004942:	200f      	movs	r0, #15
 8004944:	f000 f808 	bl	8004958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004948:	f7ff fdae 	bl	80044a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40023c00 	.word	0x40023c00

08004958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004960:	4b12      	ldr	r3, [pc, #72]	; (80049ac <HAL_InitTick+0x54>)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	4b12      	ldr	r3, [pc, #72]	; (80049b0 <HAL_InitTick+0x58>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	4619      	mov	r1, r3
 800496a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800496e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004972:	fbb2 f3f3 	udiv	r3, r2, r3
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fbb5 	bl	80050e6 <HAL_SYSTICK_Config>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e00e      	b.n	80049a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b0f      	cmp	r3, #15
 800498a:	d80a      	bhi.n	80049a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800498c:	2200      	movs	r2, #0
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004994:	f000 fb7d 	bl	8005092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004998:	4a06      	ldr	r2, [pc, #24]	; (80049b4 <HAL_InitTick+0x5c>)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	e000      	b.n	80049a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3708      	adds	r7, #8
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	20000078 	.word	0x20000078
 80049b0:	20000080 	.word	0x20000080
 80049b4:	2000007c 	.word	0x2000007c

080049b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049b8:	b480      	push	{r7}
 80049ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049bc:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <HAL_IncTick+0x20>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	461a      	mov	r2, r3
 80049c2:	4b06      	ldr	r3, [pc, #24]	; (80049dc <HAL_IncTick+0x24>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4413      	add	r3, r2
 80049c8:	4a04      	ldr	r2, [pc, #16]	; (80049dc <HAL_IncTick+0x24>)
 80049ca:	6013      	str	r3, [r2, #0]
}
 80049cc:	bf00      	nop
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	20000080 	.word	0x20000080
 80049dc:	20000f94 	.word	0x20000f94

080049e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  return uwTick;
 80049e4:	4b03      	ldr	r3, [pc, #12]	; (80049f4 <HAL_GetTick+0x14>)
 80049e6:	681b      	ldr	r3, [r3, #0]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	20000f94 	.word	0x20000f94

080049f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e033      	b.n	8004a76 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d109      	bne.n	8004a2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7ff f962 	bl	8003ce0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	f003 0310 	and.w	r3, r3, #16
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d118      	bne.n	8004a68 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004a3e:	f023 0302 	bic.w	r3, r3, #2
 8004a42:	f043 0202 	orr.w	r2, r3, #2
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f94a 	bl	8004ce4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	f023 0303 	bic.w	r3, r3, #3
 8004a5e:	f043 0201 	orr.w	r2, r3, #1
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	641a      	str	r2, [r3, #64]	; 0x40
 8004a66:	e001      	b.n	8004a6c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_ADC_ConfigChannel+0x1c>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e113      	b.n	8004cc4 <HAL_ADC_ConfigChannel+0x244>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b09      	cmp	r3, #9
 8004aaa:	d925      	bls.n	8004af8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68d9      	ldr	r1, [r3, #12]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	4613      	mov	r3, r2
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	4413      	add	r3, r2
 8004ac0:	3b1e      	subs	r3, #30
 8004ac2:	2207      	movs	r2, #7
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	43da      	mvns	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	400a      	ands	r2, r1
 8004ad0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68d9      	ldr	r1, [r3, #12]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	005b      	lsls	r3, r3, #1
 8004ae8:	4403      	add	r3, r0
 8004aea:	3b1e      	subs	r3, #30
 8004aec:	409a      	lsls	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	60da      	str	r2, [r3, #12]
 8004af6:	e022      	b.n	8004b3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6919      	ldr	r1, [r3, #16]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	461a      	mov	r2, r3
 8004b06:	4613      	mov	r3, r2
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	4413      	add	r3, r2
 8004b0c:	2207      	movs	r2, #7
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	43da      	mvns	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	400a      	ands	r2, r1
 8004b1a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6919      	ldr	r1, [r3, #16]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	4603      	mov	r3, r0
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	4403      	add	r3, r0
 8004b34:	409a      	lsls	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b06      	cmp	r3, #6
 8004b44:	d824      	bhi.n	8004b90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	3b05      	subs	r3, #5
 8004b58:	221f      	movs	r2, #31
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	43da      	mvns	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	400a      	ands	r2, r1
 8004b66:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	4618      	mov	r0, r3
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	3b05      	subs	r3, #5
 8004b82:	fa00 f203 	lsl.w	r2, r0, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	635a      	str	r2, [r3, #52]	; 0x34
 8004b8e:	e04c      	b.n	8004c2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2b0c      	cmp	r3, #12
 8004b96:	d824      	bhi.n	8004be2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	3b23      	subs	r3, #35	; 0x23
 8004baa:	221f      	movs	r2, #31
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	43da      	mvns	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	400a      	ands	r2, r1
 8004bb8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	3b23      	subs	r3, #35	; 0x23
 8004bd4:	fa00 f203 	lsl.w	r2, r0, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
 8004be0:	e023      	b.n	8004c2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	3b41      	subs	r3, #65	; 0x41
 8004bf4:	221f      	movs	r2, #31
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	43da      	mvns	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	400a      	ands	r2, r1
 8004c02:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	4618      	mov	r0, r3
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	3b41      	subs	r3, #65	; 0x41
 8004c1e:	fa00 f203 	lsl.w	r2, r0, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c2a:	4b29      	ldr	r3, [pc, #164]	; (8004cd0 <HAL_ADC_ConfigChannel+0x250>)
 8004c2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a28      	ldr	r2, [pc, #160]	; (8004cd4 <HAL_ADC_ConfigChannel+0x254>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d10f      	bne.n	8004c58 <HAL_ADC_ConfigChannel+0x1d8>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b12      	cmp	r3, #18
 8004c3e:	d10b      	bne.n	8004c58 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a1d      	ldr	r2, [pc, #116]	; (8004cd4 <HAL_ADC_ConfigChannel+0x254>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d12b      	bne.n	8004cba <HAL_ADC_ConfigChannel+0x23a>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1c      	ldr	r2, [pc, #112]	; (8004cd8 <HAL_ADC_ConfigChannel+0x258>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d003      	beq.n	8004c74 <HAL_ADC_ConfigChannel+0x1f4>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b11      	cmp	r3, #17
 8004c72:	d122      	bne.n	8004cba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a11      	ldr	r2, [pc, #68]	; (8004cd8 <HAL_ADC_ConfigChannel+0x258>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d111      	bne.n	8004cba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004c96:	4b11      	ldr	r3, [pc, #68]	; (8004cdc <HAL_ADC_ConfigChannel+0x25c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a11      	ldr	r2, [pc, #68]	; (8004ce0 <HAL_ADC_ConfigChannel+0x260>)
 8004c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca0:	0c9a      	lsrs	r2, r3, #18
 8004ca2:	4613      	mov	r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	005b      	lsls	r3, r3, #1
 8004caa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004cac:	e002      	b.n	8004cb4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1f9      	bne.n	8004cae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3714      	adds	r7, #20
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	40012300 	.word	0x40012300
 8004cd4:	40012000 	.word	0x40012000
 8004cd8:	10000012 	.word	0x10000012
 8004cdc:	20000078 	.word	0x20000078
 8004ce0:	431bde83 	.word	0x431bde83

08004ce4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004cec:	4b79      	ldr	r3, [pc, #484]	; (8004ed4 <ADC_Init+0x1f0>)
 8004cee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	431a      	orrs	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6859      	ldr	r1, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	021a      	lsls	r2, r3, #8
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004d3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6859      	ldr	r1, [r3, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6899      	ldr	r1, [r3, #8]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68da      	ldr	r2, [r3, #12]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d76:	4a58      	ldr	r2, [pc, #352]	; (8004ed8 <ADC_Init+0x1f4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d022      	beq.n	8004dc2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6899      	ldr	r1, [r3, #8]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004dac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6899      	ldr	r1, [r3, #8]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	609a      	str	r2, [r3, #8]
 8004dc0:	e00f      	b.n	8004de2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004dd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689a      	ldr	r2, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004de0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0202 	bic.w	r2, r2, #2
 8004df0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6899      	ldr	r1, [r3, #8]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	7e1b      	ldrb	r3, [r3, #24]
 8004dfc:	005a      	lsls	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d01b      	beq.n	8004e48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004e2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6859      	ldr	r1, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	035a      	lsls	r2, r3, #13
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	605a      	str	r2, [r3, #4]
 8004e46:	e007      	b.n	8004e58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	051a      	lsls	r2, r3, #20
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004e8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6899      	ldr	r1, [r3, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e9a:	025a      	lsls	r2, r3, #9
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6899      	ldr	r1, [r3, #8]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	029a      	lsls	r2, r3, #10
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	609a      	str	r2, [r3, #8]
}
 8004ec8:	bf00      	nop
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	40012300 	.word	0x40012300
 8004ed8:	0f000001 	.word	0x0f000001

08004edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004eec:	4b0c      	ldr	r3, [pc, #48]	; (8004f20 <__NVIC_SetPriorityGrouping+0x44>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ef8:	4013      	ands	r3, r2
 8004efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f0e:	4a04      	ldr	r2, [pc, #16]	; (8004f20 <__NVIC_SetPriorityGrouping+0x44>)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	60d3      	str	r3, [r2, #12]
}
 8004f14:	bf00      	nop
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	e000ed00 	.word	0xe000ed00

08004f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f28:	4b04      	ldr	r3, [pc, #16]	; (8004f3c <__NVIC_GetPriorityGrouping+0x18>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	0a1b      	lsrs	r3, r3, #8
 8004f2e:	f003 0307 	and.w	r3, r3, #7
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	e000ed00 	.word	0xe000ed00

08004f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	4603      	mov	r3, r0
 8004f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	db0b      	blt.n	8004f6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f52:	79fb      	ldrb	r3, [r7, #7]
 8004f54:	f003 021f 	and.w	r2, r3, #31
 8004f58:	4907      	ldr	r1, [pc, #28]	; (8004f78 <__NVIC_EnableIRQ+0x38>)
 8004f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f5e:	095b      	lsrs	r3, r3, #5
 8004f60:	2001      	movs	r0, #1
 8004f62:	fa00 f202 	lsl.w	r2, r0, r2
 8004f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	e000e100 	.word	0xe000e100

08004f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	6039      	str	r1, [r7, #0]
 8004f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	db0a      	blt.n	8004fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	490c      	ldr	r1, [pc, #48]	; (8004fc8 <__NVIC_SetPriority+0x4c>)
 8004f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9a:	0112      	lsls	r2, r2, #4
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fa4:	e00a      	b.n	8004fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	4908      	ldr	r1, [pc, #32]	; (8004fcc <__NVIC_SetPriority+0x50>)
 8004fac:	79fb      	ldrb	r3, [r7, #7]
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	3b04      	subs	r3, #4
 8004fb4:	0112      	lsls	r2, r2, #4
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	440b      	add	r3, r1
 8004fba:	761a      	strb	r2, [r3, #24]
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	e000e100 	.word	0xe000e100
 8004fcc:	e000ed00 	.word	0xe000ed00

08004fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b089      	sub	sp, #36	; 0x24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f003 0307 	and.w	r3, r3, #7
 8004fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	f1c3 0307 	rsb	r3, r3, #7
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	bf28      	it	cs
 8004fee:	2304      	movcs	r3, #4
 8004ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	2b06      	cmp	r3, #6
 8004ff8:	d902      	bls.n	8005000 <NVIC_EncodePriority+0x30>
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	3b03      	subs	r3, #3
 8004ffe:	e000      	b.n	8005002 <NVIC_EncodePriority+0x32>
 8005000:	2300      	movs	r3, #0
 8005002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	fa02 f303 	lsl.w	r3, r2, r3
 800500e:	43da      	mvns	r2, r3
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	401a      	ands	r2, r3
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005018:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	fa01 f303 	lsl.w	r3, r1, r3
 8005022:	43d9      	mvns	r1, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005028:	4313      	orrs	r3, r2
         );
}
 800502a:	4618      	mov	r0, r3
 800502c:	3724      	adds	r7, #36	; 0x24
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
	...

08005038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3b01      	subs	r3, #1
 8005044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005048:	d301      	bcc.n	800504e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800504a:	2301      	movs	r3, #1
 800504c:	e00f      	b.n	800506e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800504e:	4a0a      	ldr	r2, [pc, #40]	; (8005078 <SysTick_Config+0x40>)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3b01      	subs	r3, #1
 8005054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005056:	210f      	movs	r1, #15
 8005058:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800505c:	f7ff ff8e 	bl	8004f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005060:	4b05      	ldr	r3, [pc, #20]	; (8005078 <SysTick_Config+0x40>)
 8005062:	2200      	movs	r2, #0
 8005064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005066:	4b04      	ldr	r3, [pc, #16]	; (8005078 <SysTick_Config+0x40>)
 8005068:	2207      	movs	r2, #7
 800506a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	e000e010 	.word	0xe000e010

0800507c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff ff29 	bl	8004edc <__NVIC_SetPriorityGrouping>
}
 800508a:	bf00      	nop
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005092:	b580      	push	{r7, lr}
 8005094:	b086      	sub	sp, #24
 8005096:	af00      	add	r7, sp, #0
 8005098:	4603      	mov	r3, r0
 800509a:	60b9      	str	r1, [r7, #8]
 800509c:	607a      	str	r2, [r7, #4]
 800509e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050a4:	f7ff ff3e 	bl	8004f24 <__NVIC_GetPriorityGrouping>
 80050a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	68b9      	ldr	r1, [r7, #8]
 80050ae:	6978      	ldr	r0, [r7, #20]
 80050b0:	f7ff ff8e 	bl	8004fd0 <NVIC_EncodePriority>
 80050b4:	4602      	mov	r2, r0
 80050b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050ba:	4611      	mov	r1, r2
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff ff5d 	bl	8004f7c <__NVIC_SetPriority>
}
 80050c2:	bf00      	nop
 80050c4:	3718      	adds	r7, #24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	4603      	mov	r3, r0
 80050d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff ff31 	bl	8004f40 <__NVIC_EnableIRQ>
}
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b082      	sub	sp, #8
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f7ff ffa2 	bl	8005038 <SysTick_Config>
 80050f4:	4603      	mov	r3, r0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
	...

08005100 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005100:	b480      	push	{r7}
 8005102:	b089      	sub	sp, #36	; 0x24
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800510a:	2300      	movs	r3, #0
 800510c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800510e:	2300      	movs	r3, #0
 8005110:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005112:	2300      	movs	r3, #0
 8005114:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005116:	2300      	movs	r3, #0
 8005118:	61fb      	str	r3, [r7, #28]
 800511a:	e159      	b.n	80053d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800511c:	2201      	movs	r2, #1
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4013      	ands	r3, r2
 800512e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	429a      	cmp	r2, r3
 8005136:	f040 8148 	bne.w	80053ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	2b01      	cmp	r3, #1
 8005144:	d005      	beq.n	8005152 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800514e:	2b02      	cmp	r3, #2
 8005150:	d130      	bne.n	80051b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	2203      	movs	r2, #3
 800515e:	fa02 f303 	lsl.w	r3, r2, r3
 8005162:	43db      	mvns	r3, r3
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	4013      	ands	r3, r2
 8005168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	fa02 f303 	lsl.w	r3, r2, r3
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	4313      	orrs	r3, r2
 800517a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005188:	2201      	movs	r2, #1
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	fa02 f303 	lsl.w	r3, r2, r3
 8005190:	43db      	mvns	r3, r3
 8005192:	69ba      	ldr	r2, [r7, #24]
 8005194:	4013      	ands	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	091b      	lsrs	r3, r3, #4
 800519e:	f003 0201 	and.w	r2, r3, #1
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	fa02 f303 	lsl.w	r3, r2, r3
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f003 0303 	and.w	r3, r3, #3
 80051bc:	2b03      	cmp	r3, #3
 80051be:	d017      	beq.n	80051f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	2203      	movs	r2, #3
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	43db      	mvns	r3, r3
 80051d2:	69ba      	ldr	r2, [r7, #24]
 80051d4:	4013      	ands	r3, r2
 80051d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d123      	bne.n	8005244 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	08da      	lsrs	r2, r3, #3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3208      	adds	r2, #8
 8005204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005208:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	220f      	movs	r2, #15
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	43db      	mvns	r3, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	4013      	ands	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	691a      	ldr	r2, [r3, #16]
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	69ba      	ldr	r2, [r7, #24]
 8005232:	4313      	orrs	r3, r2
 8005234:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	08da      	lsrs	r2, r3, #3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	3208      	adds	r2, #8
 800523e:	69b9      	ldr	r1, [r7, #24]
 8005240:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	2203      	movs	r2, #3
 8005250:	fa02 f303 	lsl.w	r3, r2, r3
 8005254:	43db      	mvns	r3, r3
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	4013      	ands	r3, r2
 800525a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f003 0203 	and.w	r2, r3, #3
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	005b      	lsls	r3, r3, #1
 8005268:	fa02 f303 	lsl.w	r3, r2, r3
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	4313      	orrs	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 80a2 	beq.w	80053ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005286:	2300      	movs	r3, #0
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	4b57      	ldr	r3, [pc, #348]	; (80053e8 <HAL_GPIO_Init+0x2e8>)
 800528c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528e:	4a56      	ldr	r2, [pc, #344]	; (80053e8 <HAL_GPIO_Init+0x2e8>)
 8005290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005294:	6453      	str	r3, [r2, #68]	; 0x44
 8005296:	4b54      	ldr	r3, [pc, #336]	; (80053e8 <HAL_GPIO_Init+0x2e8>)
 8005298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052a2:	4a52      	ldr	r2, [pc, #328]	; (80053ec <HAL_GPIO_Init+0x2ec>)
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	089b      	lsrs	r3, r3, #2
 80052a8:	3302      	adds	r3, #2
 80052aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f003 0303 	and.w	r3, r3, #3
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	220f      	movs	r2, #15
 80052ba:	fa02 f303 	lsl.w	r3, r2, r3
 80052be:	43db      	mvns	r3, r3
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	4013      	ands	r3, r2
 80052c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a49      	ldr	r2, [pc, #292]	; (80053f0 <HAL_GPIO_Init+0x2f0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d019      	beq.n	8005302 <HAL_GPIO_Init+0x202>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a48      	ldr	r2, [pc, #288]	; (80053f4 <HAL_GPIO_Init+0x2f4>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d013      	beq.n	80052fe <HAL_GPIO_Init+0x1fe>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a47      	ldr	r2, [pc, #284]	; (80053f8 <HAL_GPIO_Init+0x2f8>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00d      	beq.n	80052fa <HAL_GPIO_Init+0x1fa>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a46      	ldr	r2, [pc, #280]	; (80053fc <HAL_GPIO_Init+0x2fc>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d007      	beq.n	80052f6 <HAL_GPIO_Init+0x1f6>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a45      	ldr	r2, [pc, #276]	; (8005400 <HAL_GPIO_Init+0x300>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d101      	bne.n	80052f2 <HAL_GPIO_Init+0x1f2>
 80052ee:	2304      	movs	r3, #4
 80052f0:	e008      	b.n	8005304 <HAL_GPIO_Init+0x204>
 80052f2:	2307      	movs	r3, #7
 80052f4:	e006      	b.n	8005304 <HAL_GPIO_Init+0x204>
 80052f6:	2303      	movs	r3, #3
 80052f8:	e004      	b.n	8005304 <HAL_GPIO_Init+0x204>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e002      	b.n	8005304 <HAL_GPIO_Init+0x204>
 80052fe:	2301      	movs	r3, #1
 8005300:	e000      	b.n	8005304 <HAL_GPIO_Init+0x204>
 8005302:	2300      	movs	r3, #0
 8005304:	69fa      	ldr	r2, [r7, #28]
 8005306:	f002 0203 	and.w	r2, r2, #3
 800530a:	0092      	lsls	r2, r2, #2
 800530c:	4093      	lsls	r3, r2
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	4313      	orrs	r3, r2
 8005312:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005314:	4935      	ldr	r1, [pc, #212]	; (80053ec <HAL_GPIO_Init+0x2ec>)
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	089b      	lsrs	r3, r3, #2
 800531a:	3302      	adds	r3, #2
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005322:	4b38      	ldr	r3, [pc, #224]	; (8005404 <HAL_GPIO_Init+0x304>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	43db      	mvns	r3, r3
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	4013      	ands	r3, r2
 8005330:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4313      	orrs	r3, r2
 8005344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005346:	4a2f      	ldr	r2, [pc, #188]	; (8005404 <HAL_GPIO_Init+0x304>)
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800534c:	4b2d      	ldr	r3, [pc, #180]	; (8005404 <HAL_GPIO_Init+0x304>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	43db      	mvns	r3, r3
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	4013      	ands	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	4313      	orrs	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005370:	4a24      	ldr	r2, [pc, #144]	; (8005404 <HAL_GPIO_Init+0x304>)
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005376:	4b23      	ldr	r3, [pc, #140]	; (8005404 <HAL_GPIO_Init+0x304>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	43db      	mvns	r3, r3
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	4013      	ands	r3, r2
 8005384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	4313      	orrs	r3, r2
 8005398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800539a:	4a1a      	ldr	r2, [pc, #104]	; (8005404 <HAL_GPIO_Init+0x304>)
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053a0:	4b18      	ldr	r3, [pc, #96]	; (8005404 <HAL_GPIO_Init+0x304>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	43db      	mvns	r3, r3
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	4013      	ands	r3, r2
 80053ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053c4:	4a0f      	ldr	r2, [pc, #60]	; (8005404 <HAL_GPIO_Init+0x304>)
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	3301      	adds	r3, #1
 80053ce:	61fb      	str	r3, [r7, #28]
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	2b0f      	cmp	r3, #15
 80053d4:	f67f aea2 	bls.w	800511c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053d8:	bf00      	nop
 80053da:	bf00      	nop
 80053dc:	3724      	adds	r7, #36	; 0x24
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	40023800 	.word	0x40023800
 80053ec:	40013800 	.word	0x40013800
 80053f0:	40020000 	.word	0x40020000
 80053f4:	40020400 	.word	0x40020400
 80053f8:	40020800 	.word	0x40020800
 80053fc:	40020c00 	.word	0x40020c00
 8005400:	40021000 	.word	0x40021000
 8005404:	40013c00 	.word	0x40013c00

08005408 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	460b      	mov	r3, r1
 8005412:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	887b      	ldrh	r3, [r7, #2]
 800541a:	4013      	ands	r3, r2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d002      	beq.n	8005426 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005420:	2301      	movs	r3, #1
 8005422:	73fb      	strb	r3, [r7, #15]
 8005424:	e001      	b.n	800542a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005426:	2300      	movs	r3, #0
 8005428:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800542a:	7bfb      	ldrb	r3, [r7, #15]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	460b      	mov	r3, r1
 8005442:	807b      	strh	r3, [r7, #2]
 8005444:	4613      	mov	r3, r2
 8005446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005448:	787b      	ldrb	r3, [r7, #1]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800544e:	887a      	ldrh	r2, [r7, #2]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005454:	e003      	b.n	800545e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005456:	887b      	ldrh	r3, [r7, #2]
 8005458:	041a      	lsls	r2, r3, #16
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	619a      	str	r2, [r3, #24]
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800546a:	b480      	push	{r7}
 800546c:	b085      	sub	sp, #20
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	460b      	mov	r3, r1
 8005474:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800547c:	887a      	ldrh	r2, [r7, #2]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	4013      	ands	r3, r2
 8005482:	041a      	lsls	r2, r3, #16
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	43d9      	mvns	r1, r3
 8005488:	887b      	ldrh	r3, [r7, #2]
 800548a:	400b      	ands	r3, r1
 800548c:	431a      	orrs	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	619a      	str	r2, [r3, #24]
}
 8005492:	bf00      	nop
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
	...

080054a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e12b      	b.n	800570a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d106      	bne.n	80054cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fe fd38 	bl	8003f3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2224      	movs	r2, #36	; 0x24
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 0201 	bic.w	r2, r2, #1
 80054e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005502:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005504:	f000 fd40 	bl	8005f88 <HAL_RCC_GetPCLK1Freq>
 8005508:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	4a81      	ldr	r2, [pc, #516]	; (8005714 <HAL_I2C_Init+0x274>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d807      	bhi.n	8005524 <HAL_I2C_Init+0x84>
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4a80      	ldr	r2, [pc, #512]	; (8005718 <HAL_I2C_Init+0x278>)
 8005518:	4293      	cmp	r3, r2
 800551a:	bf94      	ite	ls
 800551c:	2301      	movls	r3, #1
 800551e:	2300      	movhi	r3, #0
 8005520:	b2db      	uxtb	r3, r3
 8005522:	e006      	b.n	8005532 <HAL_I2C_Init+0x92>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4a7d      	ldr	r2, [pc, #500]	; (800571c <HAL_I2C_Init+0x27c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	bf94      	ite	ls
 800552c:	2301      	movls	r3, #1
 800552e:	2300      	movhi	r3, #0
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e0e7      	b.n	800570a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4a78      	ldr	r2, [pc, #480]	; (8005720 <HAL_I2C_Init+0x280>)
 800553e:	fba2 2303 	umull	r2, r3, r2, r3
 8005542:	0c9b      	lsrs	r3, r3, #18
 8005544:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	4a6a      	ldr	r2, [pc, #424]	; (8005714 <HAL_I2C_Init+0x274>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d802      	bhi.n	8005574 <HAL_I2C_Init+0xd4>
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	3301      	adds	r3, #1
 8005572:	e009      	b.n	8005588 <HAL_I2C_Init+0xe8>
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800557a:	fb02 f303 	mul.w	r3, r2, r3
 800557e:	4a69      	ldr	r2, [pc, #420]	; (8005724 <HAL_I2C_Init+0x284>)
 8005580:	fba2 2303 	umull	r2, r3, r2, r3
 8005584:	099b      	lsrs	r3, r3, #6
 8005586:	3301      	adds	r3, #1
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6812      	ldr	r2, [r2, #0]
 800558c:	430b      	orrs	r3, r1
 800558e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800559a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	495c      	ldr	r1, [pc, #368]	; (8005714 <HAL_I2C_Init+0x274>)
 80055a4:	428b      	cmp	r3, r1
 80055a6:	d819      	bhi.n	80055dc <HAL_I2C_Init+0x13c>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	1e59      	subs	r1, r3, #1
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	005b      	lsls	r3, r3, #1
 80055b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80055b6:	1c59      	adds	r1, r3, #1
 80055b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80055bc:	400b      	ands	r3, r1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <HAL_I2C_Init+0x138>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	1e59      	subs	r1, r3, #1
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80055d0:	3301      	adds	r3, #1
 80055d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d6:	e051      	b.n	800567c <HAL_I2C_Init+0x1dc>
 80055d8:	2304      	movs	r3, #4
 80055da:	e04f      	b.n	800567c <HAL_I2C_Init+0x1dc>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d111      	bne.n	8005608 <HAL_I2C_Init+0x168>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	1e58      	subs	r0, r3, #1
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6859      	ldr	r1, [r3, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	005b      	lsls	r3, r3, #1
 80055f0:	440b      	add	r3, r1
 80055f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80055f6:	3301      	adds	r3, #1
 80055f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	bf0c      	ite	eq
 8005600:	2301      	moveq	r3, #1
 8005602:	2300      	movne	r3, #0
 8005604:	b2db      	uxtb	r3, r3
 8005606:	e012      	b.n	800562e <HAL_I2C_Init+0x18e>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	1e58      	subs	r0, r3, #1
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6859      	ldr	r1, [r3, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	440b      	add	r3, r1
 8005616:	0099      	lsls	r1, r3, #2
 8005618:	440b      	add	r3, r1
 800561a:	fbb0 f3f3 	udiv	r3, r0, r3
 800561e:	3301      	adds	r3, #1
 8005620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005624:	2b00      	cmp	r3, #0
 8005626:	bf0c      	ite	eq
 8005628:	2301      	moveq	r3, #1
 800562a:	2300      	movne	r3, #0
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <HAL_I2C_Init+0x196>
 8005632:	2301      	movs	r3, #1
 8005634:	e022      	b.n	800567c <HAL_I2C_Init+0x1dc>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10e      	bne.n	800565c <HAL_I2C_Init+0x1bc>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	1e58      	subs	r0, r3, #1
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6859      	ldr	r1, [r3, #4]
 8005646:	460b      	mov	r3, r1
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	440b      	add	r3, r1
 800564c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005650:	3301      	adds	r3, #1
 8005652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800565a:	e00f      	b.n	800567c <HAL_I2C_Init+0x1dc>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	1e58      	subs	r0, r3, #1
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6859      	ldr	r1, [r3, #4]
 8005664:	460b      	mov	r3, r1
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	440b      	add	r3, r1
 800566a:	0099      	lsls	r1, r3, #2
 800566c:	440b      	add	r3, r1
 800566e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005672:	3301      	adds	r3, #1
 8005674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005678:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	6809      	ldr	r1, [r1, #0]
 8005680:	4313      	orrs	r3, r2
 8005682:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69da      	ldr	r2, [r3, #28]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80056aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6911      	ldr	r1, [r2, #16]
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	68d2      	ldr	r2, [r2, #12]
 80056b6:	4311      	orrs	r1, r2
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6812      	ldr	r2, [r2, #0]
 80056bc:	430b      	orrs	r3, r1
 80056be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	695a      	ldr	r2, [r3, #20]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2220      	movs	r2, #32
 80056f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	000186a0 	.word	0x000186a0
 8005718:	001e847f 	.word	0x001e847f
 800571c:	003d08ff 	.word	0x003d08ff
 8005720:	431bde83 	.word	0x431bde83
 8005724:	10624dd3 	.word	0x10624dd3

08005728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b086      	sub	sp, #24
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e267      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d075      	beq.n	8005832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005746:	4b88      	ldr	r3, [pc, #544]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 030c 	and.w	r3, r3, #12
 800574e:	2b04      	cmp	r3, #4
 8005750:	d00c      	beq.n	800576c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005752:	4b85      	ldr	r3, [pc, #532]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800575a:	2b08      	cmp	r3, #8
 800575c:	d112      	bne.n	8005784 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800575e:	4b82      	ldr	r3, [pc, #520]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800576a:	d10b      	bne.n	8005784 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800576c:	4b7e      	ldr	r3, [pc, #504]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d05b      	beq.n	8005830 <HAL_RCC_OscConfig+0x108>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d157      	bne.n	8005830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e242      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800578c:	d106      	bne.n	800579c <HAL_RCC_OscConfig+0x74>
 800578e:	4b76      	ldr	r3, [pc, #472]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a75      	ldr	r2, [pc, #468]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 8005794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005798:	6013      	str	r3, [r2, #0]
 800579a:	e01d      	b.n	80057d8 <HAL_RCC_OscConfig+0xb0>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057a4:	d10c      	bne.n	80057c0 <HAL_RCC_OscConfig+0x98>
 80057a6:	4b70      	ldr	r3, [pc, #448]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a6f      	ldr	r2, [pc, #444]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 80057ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057b0:	6013      	str	r3, [r2, #0]
 80057b2:	4b6d      	ldr	r3, [pc, #436]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a6c      	ldr	r2, [pc, #432]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 80057b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	e00b      	b.n	80057d8 <HAL_RCC_OscConfig+0xb0>
 80057c0:	4b69      	ldr	r3, [pc, #420]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a68      	ldr	r2, [pc, #416]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 80057c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ca:	6013      	str	r3, [r2, #0]
 80057cc:	4b66      	ldr	r3, [pc, #408]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a65      	ldr	r2, [pc, #404]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 80057d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d013      	beq.n	8005808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e0:	f7ff f8fe 	bl	80049e0 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057e8:	f7ff f8fa 	bl	80049e0 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b64      	cmp	r3, #100	; 0x64
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e207      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057fa:	4b5b      	ldr	r3, [pc, #364]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0f0      	beq.n	80057e8 <HAL_RCC_OscConfig+0xc0>
 8005806:	e014      	b.n	8005832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005808:	f7ff f8ea 	bl	80049e0 <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005810:	f7ff f8e6 	bl	80049e0 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b64      	cmp	r3, #100	; 0x64
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e1f3      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005822:	4b51      	ldr	r3, [pc, #324]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1f0      	bne.n	8005810 <HAL_RCC_OscConfig+0xe8>
 800582e:	e000      	b.n	8005832 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d063      	beq.n	8005906 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800583e:	4b4a      	ldr	r3, [pc, #296]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f003 030c 	and.w	r3, r3, #12
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00b      	beq.n	8005862 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800584a:	4b47      	ldr	r3, [pc, #284]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005852:	2b08      	cmp	r3, #8
 8005854:	d11c      	bne.n	8005890 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005856:	4b44      	ldr	r3, [pc, #272]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d116      	bne.n	8005890 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005862:	4b41      	ldr	r3, [pc, #260]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b00      	cmp	r3, #0
 800586c:	d005      	beq.n	800587a <HAL_RCC_OscConfig+0x152>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d001      	beq.n	800587a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e1c7      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800587a:	4b3b      	ldr	r3, [pc, #236]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	4937      	ldr	r1, [pc, #220]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 800588a:	4313      	orrs	r3, r2
 800588c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800588e:	e03a      	b.n	8005906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d020      	beq.n	80058da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005898:	4b34      	ldr	r3, [pc, #208]	; (800596c <HAL_RCC_OscConfig+0x244>)
 800589a:	2201      	movs	r2, #1
 800589c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589e:	f7ff f89f 	bl	80049e0 <HAL_GetTick>
 80058a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058a6:	f7ff f89b 	bl	80049e0 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e1a8      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058b8:	4b2b      	ldr	r3, [pc, #172]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0f0      	beq.n	80058a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058c4:	4b28      	ldr	r3, [pc, #160]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	4925      	ldr	r1, [pc, #148]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	600b      	str	r3, [r1, #0]
 80058d8:	e015      	b.n	8005906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058da:	4b24      	ldr	r3, [pc, #144]	; (800596c <HAL_RCC_OscConfig+0x244>)
 80058dc:	2200      	movs	r2, #0
 80058de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e0:	f7ff f87e 	bl	80049e0 <HAL_GetTick>
 80058e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058e6:	e008      	b.n	80058fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058e8:	f7ff f87a 	bl	80049e0 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e187      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058fa:	4b1b      	ldr	r3, [pc, #108]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1f0      	bne.n	80058e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0308 	and.w	r3, r3, #8
 800590e:	2b00      	cmp	r3, #0
 8005910:	d036      	beq.n	8005980 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d016      	beq.n	8005948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800591a:	4b15      	ldr	r3, [pc, #84]	; (8005970 <HAL_RCC_OscConfig+0x248>)
 800591c:	2201      	movs	r2, #1
 800591e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005920:	f7ff f85e 	bl	80049e0 <HAL_GetTick>
 8005924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005926:	e008      	b.n	800593a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005928:	f7ff f85a 	bl	80049e0 <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e167      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800593a:	4b0b      	ldr	r3, [pc, #44]	; (8005968 <HAL_RCC_OscConfig+0x240>)
 800593c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0f0      	beq.n	8005928 <HAL_RCC_OscConfig+0x200>
 8005946:	e01b      	b.n	8005980 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005948:	4b09      	ldr	r3, [pc, #36]	; (8005970 <HAL_RCC_OscConfig+0x248>)
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800594e:	f7ff f847 	bl	80049e0 <HAL_GetTick>
 8005952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005954:	e00e      	b.n	8005974 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005956:	f7ff f843 	bl	80049e0 <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d907      	bls.n	8005974 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e150      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
 8005968:	40023800 	.word	0x40023800
 800596c:	42470000 	.word	0x42470000
 8005970:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005974:	4b88      	ldr	r3, [pc, #544]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1ea      	bne.n	8005956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0304 	and.w	r3, r3, #4
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 8097 	beq.w	8005abc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800598e:	2300      	movs	r3, #0
 8005990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005992:	4b81      	ldr	r3, [pc, #516]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10f      	bne.n	80059be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800599e:	2300      	movs	r3, #0
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	4b7d      	ldr	r3, [pc, #500]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	4a7c      	ldr	r2, [pc, #496]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 80059a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ac:	6413      	str	r3, [r2, #64]	; 0x40
 80059ae:	4b7a      	ldr	r3, [pc, #488]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 80059b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059b6:	60bb      	str	r3, [r7, #8]
 80059b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059ba:	2301      	movs	r3, #1
 80059bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059be:	4b77      	ldr	r3, [pc, #476]	; (8005b9c <HAL_RCC_OscConfig+0x474>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d118      	bne.n	80059fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059ca:	4b74      	ldr	r3, [pc, #464]	; (8005b9c <HAL_RCC_OscConfig+0x474>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a73      	ldr	r2, [pc, #460]	; (8005b9c <HAL_RCC_OscConfig+0x474>)
 80059d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059d6:	f7ff f803 	bl	80049e0 <HAL_GetTick>
 80059da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059dc:	e008      	b.n	80059f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059de:	f7fe ffff 	bl	80049e0 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e10c      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059f0:	4b6a      	ldr	r3, [pc, #424]	; (8005b9c <HAL_RCC_OscConfig+0x474>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0f0      	beq.n	80059de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d106      	bne.n	8005a12 <HAL_RCC_OscConfig+0x2ea>
 8005a04:	4b64      	ldr	r3, [pc, #400]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a08:	4a63      	ldr	r2, [pc, #396]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005a0a:	f043 0301 	orr.w	r3, r3, #1
 8005a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a10:	e01c      	b.n	8005a4c <HAL_RCC_OscConfig+0x324>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	2b05      	cmp	r3, #5
 8005a18:	d10c      	bne.n	8005a34 <HAL_RCC_OscConfig+0x30c>
 8005a1a:	4b5f      	ldr	r3, [pc, #380]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1e:	4a5e      	ldr	r2, [pc, #376]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005a20:	f043 0304 	orr.w	r3, r3, #4
 8005a24:	6713      	str	r3, [r2, #112]	; 0x70
 8005a26:	4b5c      	ldr	r3, [pc, #368]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2a:	4a5b      	ldr	r2, [pc, #364]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005a2c:	f043 0301 	orr.w	r3, r3, #1
 8005a30:	6713      	str	r3, [r2, #112]	; 0x70
 8005a32:	e00b      	b.n	8005a4c <HAL_RCC_OscConfig+0x324>
 8005a34:	4b58      	ldr	r3, [pc, #352]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a38:	4a57      	ldr	r2, [pc, #348]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005a3a:	f023 0301 	bic.w	r3, r3, #1
 8005a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a40:	4b55      	ldr	r3, [pc, #340]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a44:	4a54      	ldr	r2, [pc, #336]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005a46:	f023 0304 	bic.w	r3, r3, #4
 8005a4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d015      	beq.n	8005a80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a54:	f7fe ffc4 	bl	80049e0 <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a5a:	e00a      	b.n	8005a72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a5c:	f7fe ffc0 	bl	80049e0 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e0cb      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a72:	4b49      	ldr	r3, [pc, #292]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0ee      	beq.n	8005a5c <HAL_RCC_OscConfig+0x334>
 8005a7e:	e014      	b.n	8005aaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a80:	f7fe ffae 	bl	80049e0 <HAL_GetTick>
 8005a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a86:	e00a      	b.n	8005a9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a88:	f7fe ffaa 	bl	80049e0 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e0b5      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a9e:	4b3e      	ldr	r3, [pc, #248]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d1ee      	bne.n	8005a88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005aaa:	7dfb      	ldrb	r3, [r7, #23]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d105      	bne.n	8005abc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ab0:	4b39      	ldr	r3, [pc, #228]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab4:	4a38      	ldr	r2, [pc, #224]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 80a1 	beq.w	8005c08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ac6:	4b34      	ldr	r3, [pc, #208]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f003 030c 	and.w	r3, r3, #12
 8005ace:	2b08      	cmp	r3, #8
 8005ad0:	d05c      	beq.n	8005b8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d141      	bne.n	8005b5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ada:	4b31      	ldr	r3, [pc, #196]	; (8005ba0 <HAL_RCC_OscConfig+0x478>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ae0:	f7fe ff7e 	bl	80049e0 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ae8:	f7fe ff7a 	bl	80049e0 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e087      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005afa:	4b27      	ldr	r3, [pc, #156]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1f0      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69da      	ldr	r2, [r3, #28]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	019b      	lsls	r3, r3, #6
 8005b16:	431a      	orrs	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1c:	085b      	lsrs	r3, r3, #1
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	041b      	lsls	r3, r3, #16
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b28:	061b      	lsls	r3, r3, #24
 8005b2a:	491b      	ldr	r1, [pc, #108]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b30:	4b1b      	ldr	r3, [pc, #108]	; (8005ba0 <HAL_RCC_OscConfig+0x478>)
 8005b32:	2201      	movs	r2, #1
 8005b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b36:	f7fe ff53 	bl	80049e0 <HAL_GetTick>
 8005b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b3c:	e008      	b.n	8005b50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b3e:	f7fe ff4f 	bl	80049e0 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e05c      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b50:	4b11      	ldr	r3, [pc, #68]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d0f0      	beq.n	8005b3e <HAL_RCC_OscConfig+0x416>
 8005b5c:	e054      	b.n	8005c08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b5e:	4b10      	ldr	r3, [pc, #64]	; (8005ba0 <HAL_RCC_OscConfig+0x478>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b64:	f7fe ff3c 	bl	80049e0 <HAL_GetTick>
 8005b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b6c:	f7fe ff38 	bl	80049e0 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e045      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b7e:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <HAL_RCC_OscConfig+0x470>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1f0      	bne.n	8005b6c <HAL_RCC_OscConfig+0x444>
 8005b8a:	e03d      	b.n	8005c08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d107      	bne.n	8005ba4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e038      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
 8005b98:	40023800 	.word	0x40023800
 8005b9c:	40007000 	.word	0x40007000
 8005ba0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ba4:	4b1b      	ldr	r3, [pc, #108]	; (8005c14 <HAL_RCC_OscConfig+0x4ec>)
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d028      	beq.n	8005c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d121      	bne.n	8005c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d11a      	bne.n	8005c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005bda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d111      	bne.n	8005c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bea:	085b      	lsrs	r3, r3, #1
 8005bec:	3b01      	subs	r3, #1
 8005bee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d107      	bne.n	8005c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d001      	beq.n	8005c08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e000      	b.n	8005c0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	40023800 	.word	0x40023800

08005c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e0cc      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c2c:	4b68      	ldr	r3, [pc, #416]	; (8005dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0307 	and.w	r3, r3, #7
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d90c      	bls.n	8005c54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c3a:	4b65      	ldr	r3, [pc, #404]	; (8005dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c42:	4b63      	ldr	r3, [pc, #396]	; (8005dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d001      	beq.n	8005c54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e0b8      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0302 	and.w	r3, r3, #2
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d020      	beq.n	8005ca2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d005      	beq.n	8005c78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c6c:	4b59      	ldr	r3, [pc, #356]	; (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	4a58      	ldr	r2, [pc, #352]	; (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0308 	and.w	r3, r3, #8
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d005      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c84:	4b53      	ldr	r3, [pc, #332]	; (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	4a52      	ldr	r2, [pc, #328]	; (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005c8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c90:	4b50      	ldr	r3, [pc, #320]	; (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	494d      	ldr	r1, [pc, #308]	; (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d044      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d107      	bne.n	8005cc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cb6:	4b47      	ldr	r3, [pc, #284]	; (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d119      	bne.n	8005cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e07f      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d003      	beq.n	8005cd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cd2:	2b03      	cmp	r3, #3
 8005cd4:	d107      	bne.n	8005ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cd6:	4b3f      	ldr	r3, [pc, #252]	; (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d109      	bne.n	8005cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e06f      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ce6:	4b3b      	ldr	r3, [pc, #236]	; (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e067      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cf6:	4b37      	ldr	r3, [pc, #220]	; (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f023 0203 	bic.w	r2, r3, #3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	4934      	ldr	r1, [pc, #208]	; (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d08:	f7fe fe6a 	bl	80049e0 <HAL_GetTick>
 8005d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d0e:	e00a      	b.n	8005d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d10:	f7fe fe66 	bl	80049e0 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e04f      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d26:	4b2b      	ldr	r3, [pc, #172]	; (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f003 020c 	and.w	r2, r3, #12
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d1eb      	bne.n	8005d10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d38:	4b25      	ldr	r3, [pc, #148]	; (8005dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0307 	and.w	r3, r3, #7
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d20c      	bcs.n	8005d60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d46:	4b22      	ldr	r3, [pc, #136]	; (8005dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d4e:	4b20      	ldr	r3, [pc, #128]	; (8005dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d001      	beq.n	8005d60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e032      	b.n	8005dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d008      	beq.n	8005d7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d6c:	4b19      	ldr	r3, [pc, #100]	; (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	4916      	ldr	r1, [pc, #88]	; (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0308 	and.w	r3, r3, #8
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d8a:	4b12      	ldr	r3, [pc, #72]	; (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	490e      	ldr	r1, [pc, #56]	; (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005d9e:	f000 f821 	bl	8005de4 <HAL_RCC_GetSysClockFreq>
 8005da2:	4602      	mov	r2, r0
 8005da4:	4b0b      	ldr	r3, [pc, #44]	; (8005dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	091b      	lsrs	r3, r3, #4
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	490a      	ldr	r1, [pc, #40]	; (8005dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8005db0:	5ccb      	ldrb	r3, [r1, r3]
 8005db2:	fa22 f303 	lsr.w	r3, r2, r3
 8005db6:	4a09      	ldr	r2, [pc, #36]	; (8005ddc <HAL_RCC_ClockConfig+0x1c4>)
 8005db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005dba:	4b09      	ldr	r3, [pc, #36]	; (8005de0 <HAL_RCC_ClockConfig+0x1c8>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fe fdca 	bl	8004958 <HAL_InitTick>

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	40023c00 	.word	0x40023c00
 8005dd4:	40023800 	.word	0x40023800
 8005dd8:	0800d8a4 	.word	0x0800d8a4
 8005ddc:	20000078 	.word	0x20000078
 8005de0:	2000007c 	.word	0x2000007c

08005de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005de8:	b090      	sub	sp, #64	; 0x40
 8005dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	637b      	str	r3, [r7, #52]	; 0x34
 8005df0:	2300      	movs	r3, #0
 8005df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005df4:	2300      	movs	r3, #0
 8005df6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dfc:	4b59      	ldr	r3, [pc, #356]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f003 030c 	and.w	r3, r3, #12
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	d00d      	beq.n	8005e24 <HAL_RCC_GetSysClockFreq+0x40>
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	f200 80a1 	bhi.w	8005f50 <HAL_RCC_GetSysClockFreq+0x16c>
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d002      	beq.n	8005e18 <HAL_RCC_GetSysClockFreq+0x34>
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d003      	beq.n	8005e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8005e16:	e09b      	b.n	8005f50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e18:	4b53      	ldr	r3, [pc, #332]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x184>)
 8005e1a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005e1c:	e09b      	b.n	8005f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e1e:	4b53      	ldr	r3, [pc, #332]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8005e20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005e22:	e098      	b.n	8005f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e24:	4b4f      	ldr	r3, [pc, #316]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e2c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e2e:	4b4d      	ldr	r3, [pc, #308]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d028      	beq.n	8005e8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e3a:	4b4a      	ldr	r3, [pc, #296]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	099b      	lsrs	r3, r3, #6
 8005e40:	2200      	movs	r2, #0
 8005e42:	623b      	str	r3, [r7, #32]
 8005e44:	627a      	str	r2, [r7, #36]	; 0x24
 8005e46:	6a3b      	ldr	r3, [r7, #32]
 8005e48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	4b47      	ldr	r3, [pc, #284]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8005e50:	fb03 f201 	mul.w	r2, r3, r1
 8005e54:	2300      	movs	r3, #0
 8005e56:	fb00 f303 	mul.w	r3, r0, r3
 8005e5a:	4413      	add	r3, r2
 8005e5c:	4a43      	ldr	r2, [pc, #268]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8005e5e:	fba0 1202 	umull	r1, r2, r0, r2
 8005e62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e64:	460a      	mov	r2, r1
 8005e66:	62ba      	str	r2, [r7, #40]	; 0x28
 8005e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e6a:	4413      	add	r3, r2
 8005e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e70:	2200      	movs	r2, #0
 8005e72:	61bb      	str	r3, [r7, #24]
 8005e74:	61fa      	str	r2, [r7, #28]
 8005e76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005e7e:	f7fa ff0b 	bl	8000c98 <__aeabi_uldivmod>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4613      	mov	r3, r2
 8005e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e8a:	e053      	b.n	8005f34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e8c:	4b35      	ldr	r3, [pc, #212]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	099b      	lsrs	r3, r3, #6
 8005e92:	2200      	movs	r2, #0
 8005e94:	613b      	str	r3, [r7, #16]
 8005e96:	617a      	str	r2, [r7, #20]
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005e9e:	f04f 0b00 	mov.w	fp, #0
 8005ea2:	4652      	mov	r2, sl
 8005ea4:	465b      	mov	r3, fp
 8005ea6:	f04f 0000 	mov.w	r0, #0
 8005eaa:	f04f 0100 	mov.w	r1, #0
 8005eae:	0159      	lsls	r1, r3, #5
 8005eb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005eb4:	0150      	lsls	r0, r2, #5
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	ebb2 080a 	subs.w	r8, r2, sl
 8005ebe:	eb63 090b 	sbc.w	r9, r3, fp
 8005ec2:	f04f 0200 	mov.w	r2, #0
 8005ec6:	f04f 0300 	mov.w	r3, #0
 8005eca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005ece:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005ed2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005ed6:	ebb2 0408 	subs.w	r4, r2, r8
 8005eda:	eb63 0509 	sbc.w	r5, r3, r9
 8005ede:	f04f 0200 	mov.w	r2, #0
 8005ee2:	f04f 0300 	mov.w	r3, #0
 8005ee6:	00eb      	lsls	r3, r5, #3
 8005ee8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005eec:	00e2      	lsls	r2, r4, #3
 8005eee:	4614      	mov	r4, r2
 8005ef0:	461d      	mov	r5, r3
 8005ef2:	eb14 030a 	adds.w	r3, r4, sl
 8005ef6:	603b      	str	r3, [r7, #0]
 8005ef8:	eb45 030b 	adc.w	r3, r5, fp
 8005efc:	607b      	str	r3, [r7, #4]
 8005efe:	f04f 0200 	mov.w	r2, #0
 8005f02:	f04f 0300 	mov.w	r3, #0
 8005f06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f0a:	4629      	mov	r1, r5
 8005f0c:	028b      	lsls	r3, r1, #10
 8005f0e:	4621      	mov	r1, r4
 8005f10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f14:	4621      	mov	r1, r4
 8005f16:	028a      	lsls	r2, r1, #10
 8005f18:	4610      	mov	r0, r2
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1e:	2200      	movs	r2, #0
 8005f20:	60bb      	str	r3, [r7, #8]
 8005f22:	60fa      	str	r2, [r7, #12]
 8005f24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f28:	f7fa feb6 	bl	8000c98 <__aeabi_uldivmod>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4613      	mov	r3, r2
 8005f32:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f34:	4b0b      	ldr	r3, [pc, #44]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	0c1b      	lsrs	r3, r3, #16
 8005f3a:	f003 0303 	and.w	r3, r3, #3
 8005f3e:	3301      	adds	r3, #1
 8005f40:	005b      	lsls	r3, r3, #1
 8005f42:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005f44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005f4e:	e002      	b.n	8005f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f50:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x184>)
 8005f52:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3740      	adds	r7, #64	; 0x40
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f62:	bf00      	nop
 8005f64:	40023800 	.word	0x40023800
 8005f68:	00f42400 	.word	0x00f42400
 8005f6c:	017d7840 	.word	0x017d7840

08005f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f70:	b480      	push	{r7}
 8005f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f74:	4b03      	ldr	r3, [pc, #12]	; (8005f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f76:	681b      	ldr	r3, [r3, #0]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	20000078 	.word	0x20000078

08005f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005f8c:	f7ff fff0 	bl	8005f70 <HAL_RCC_GetHCLKFreq>
 8005f90:	4602      	mov	r2, r0
 8005f92:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	0a9b      	lsrs	r3, r3, #10
 8005f98:	f003 0307 	and.w	r3, r3, #7
 8005f9c:	4903      	ldr	r1, [pc, #12]	; (8005fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f9e:	5ccb      	ldrb	r3, [r1, r3]
 8005fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	40023800 	.word	0x40023800
 8005fac:	0800d8b4 	.word	0x0800d8b4

08005fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005fb4:	f7ff ffdc 	bl	8005f70 <HAL_RCC_GetHCLKFreq>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	4b05      	ldr	r3, [pc, #20]	; (8005fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	0b5b      	lsrs	r3, r3, #13
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	4903      	ldr	r1, [pc, #12]	; (8005fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fc6:	5ccb      	ldrb	r3, [r1, r3]
 8005fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	40023800 	.word	0x40023800
 8005fd4:	0800d8b4 	.word	0x0800d8b4

08005fd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e07b      	b.n	80060e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d108      	bne.n	8006004 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ffa:	d009      	beq.n	8006010 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	61da      	str	r2, [r3, #28]
 8006002:	e005      	b.n	8006010 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b00      	cmp	r3, #0
 8006020:	d106      	bne.n	8006030 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7fe f934 	bl	8004298 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006046:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006058:	431a      	orrs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006062:	431a      	orrs	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	431a      	orrs	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	431a      	orrs	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006080:	431a      	orrs	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800608a:	431a      	orrs	r2, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006094:	ea42 0103 	orr.w	r1, r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	699b      	ldr	r3, [r3, #24]
 80060ac:	0c1b      	lsrs	r3, r3, #16
 80060ae:	f003 0104 	and.w	r1, r3, #4
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	f003 0210 	and.w	r2, r3, #16
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	69da      	ldr	r2, [r3, #28]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3708      	adds	r7, #8
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b088      	sub	sp, #32
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	60f8      	str	r0, [r7, #12]
 80060f2:	60b9      	str	r1, [r7, #8]
 80060f4:	603b      	str	r3, [r7, #0]
 80060f6:	4613      	mov	r3, r2
 80060f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006104:	2b01      	cmp	r3, #1
 8006106:	d101      	bne.n	800610c <HAL_SPI_Transmit+0x22>
 8006108:	2302      	movs	r3, #2
 800610a:	e126      	b.n	800635a <HAL_SPI_Transmit+0x270>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006114:	f7fe fc64 	bl	80049e0 <HAL_GetTick>
 8006118:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800611a:	88fb      	ldrh	r3, [r7, #6]
 800611c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b01      	cmp	r3, #1
 8006128:	d002      	beq.n	8006130 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800612a:	2302      	movs	r3, #2
 800612c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800612e:	e10b      	b.n	8006348 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <HAL_SPI_Transmit+0x52>
 8006136:	88fb      	ldrh	r3, [r7, #6]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d102      	bne.n	8006142 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006140:	e102      	b.n	8006348 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2203      	movs	r2, #3
 8006146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	68ba      	ldr	r2, [r7, #8]
 8006154:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	88fa      	ldrh	r2, [r7, #6]
 800615a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	88fa      	ldrh	r2, [r7, #6]
 8006160:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006188:	d10f      	bne.n	80061aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006198:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b4:	2b40      	cmp	r3, #64	; 0x40
 80061b6:	d007      	beq.n	80061c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061d0:	d14b      	bne.n	800626a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d002      	beq.n	80061e0 <HAL_SPI_Transmit+0xf6>
 80061da:	8afb      	ldrh	r3, [r7, #22]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d13e      	bne.n	800625e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e4:	881a      	ldrh	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f0:	1c9a      	adds	r2, r3, #2
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	3b01      	subs	r3, #1
 80061fe:	b29a      	uxth	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006204:	e02b      	b.n	800625e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b02      	cmp	r3, #2
 8006212:	d112      	bne.n	800623a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006218:	881a      	ldrh	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006224:	1c9a      	adds	r2, r3, #2
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800622e:	b29b      	uxth	r3, r3
 8006230:	3b01      	subs	r3, #1
 8006232:	b29a      	uxth	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	86da      	strh	r2, [r3, #54]	; 0x36
 8006238:	e011      	b.n	800625e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800623a:	f7fe fbd1 	bl	80049e0 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d803      	bhi.n	8006252 <HAL_SPI_Transmit+0x168>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006250:	d102      	bne.n	8006258 <HAL_SPI_Transmit+0x16e>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d102      	bne.n	800625e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800625c:	e074      	b.n	8006348 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006262:	b29b      	uxth	r3, r3
 8006264:	2b00      	cmp	r3, #0
 8006266:	d1ce      	bne.n	8006206 <HAL_SPI_Transmit+0x11c>
 8006268:	e04c      	b.n	8006304 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <HAL_SPI_Transmit+0x18e>
 8006272:	8afb      	ldrh	r3, [r7, #22]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d140      	bne.n	80062fa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	330c      	adds	r3, #12
 8006282:	7812      	ldrb	r2, [r2, #0]
 8006284:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	b29a      	uxth	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800629e:	e02c      	b.n	80062fa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d113      	bne.n	80062d6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	330c      	adds	r3, #12
 80062b8:	7812      	ldrb	r2, [r2, #0]
 80062ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c0:	1c5a      	adds	r2, r3, #1
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80062d4:	e011      	b.n	80062fa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062d6:	f7fe fb83 	bl	80049e0 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	683a      	ldr	r2, [r7, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d803      	bhi.n	80062ee <HAL_SPI_Transmit+0x204>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062ec:	d102      	bne.n	80062f4 <HAL_SPI_Transmit+0x20a>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d102      	bne.n	80062fa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062f8:	e026      	b.n	8006348 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062fe:	b29b      	uxth	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1cd      	bne.n	80062a0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 fbcb 	bl	8006aa4 <SPI_EndRxTxTransaction>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d002      	beq.n	800631a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2220      	movs	r2, #32
 8006318:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10a      	bne.n	8006338 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006322:	2300      	movs	r3, #0
 8006324:	613b      	str	r3, [r7, #16]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	613b      	str	r3, [r7, #16]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	613b      	str	r3, [r7, #16]
 8006336:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	77fb      	strb	r3, [r7, #31]
 8006344:	e000      	b.n	8006348 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006346:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006358:	7ffb      	ldrb	r3, [r7, #31]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3720      	adds	r7, #32
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b088      	sub	sp, #32
 8006366:	af02      	add	r7, sp, #8
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	603b      	str	r3, [r7, #0]
 800636e:	4613      	mov	r3, r2
 8006370:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800637e:	d112      	bne.n	80063a6 <HAL_SPI_Receive+0x44>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10e      	bne.n	80063a6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2204      	movs	r2, #4
 800638c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006390:	88fa      	ldrh	r2, [r7, #6]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	4613      	mov	r3, r2
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	68b9      	ldr	r1, [r7, #8]
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f000 f8f1 	bl	8006584 <HAL_SPI_TransmitReceive>
 80063a2:	4603      	mov	r3, r0
 80063a4:	e0ea      	b.n	800657c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d101      	bne.n	80063b4 <HAL_SPI_Receive+0x52>
 80063b0:	2302      	movs	r3, #2
 80063b2:	e0e3      	b.n	800657c <HAL_SPI_Receive+0x21a>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063bc:	f7fe fb10 	bl	80049e0 <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d002      	beq.n	80063d4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80063ce:	2302      	movs	r3, #2
 80063d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063d2:	e0ca      	b.n	800656a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <HAL_SPI_Receive+0x7e>
 80063da:	88fb      	ldrh	r3, [r7, #6]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d102      	bne.n	80063e6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063e4:	e0c1      	b.n	800656a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2204      	movs	r2, #4
 80063ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2200      	movs	r2, #0
 80063f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	88fa      	ldrh	r2, [r7, #6]
 80063fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	88fa      	ldrh	r2, [r7, #6]
 8006404:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2200      	movs	r2, #0
 8006410:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	689b      	ldr	r3, [r3, #8]
 8006428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800642c:	d10f      	bne.n	800644e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800643c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800644c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006458:	2b40      	cmp	r3, #64	; 0x40
 800645a:	d007      	beq.n	800646c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800646a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d162      	bne.n	800653a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006474:	e02e      	b.n	80064d4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b01      	cmp	r3, #1
 8006482:	d115      	bne.n	80064b0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f103 020c 	add.w	r2, r3, #12
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006490:	7812      	ldrb	r2, [r2, #0]
 8006492:	b2d2      	uxtb	r2, r2
 8006494:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	3b01      	subs	r3, #1
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064ae:	e011      	b.n	80064d4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064b0:	f7fe fa96 	bl	80049e0 <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d803      	bhi.n	80064c8 <HAL_SPI_Receive+0x166>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064c6:	d102      	bne.n	80064ce <HAL_SPI_Receive+0x16c>
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d102      	bne.n	80064d4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80064ce:	2303      	movs	r3, #3
 80064d0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80064d2:	e04a      	b.n	800656a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1cb      	bne.n	8006476 <HAL_SPI_Receive+0x114>
 80064de:	e031      	b.n	8006544 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d113      	bne.n	8006516 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68da      	ldr	r2, [r3, #12]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f8:	b292      	uxth	r2, r2
 80064fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006500:	1c9a      	adds	r2, r3, #2
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800650a:	b29b      	uxth	r3, r3
 800650c:	3b01      	subs	r3, #1
 800650e:	b29a      	uxth	r2, r3
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006514:	e011      	b.n	800653a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006516:	f7fe fa63 	bl	80049e0 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d803      	bhi.n	800652e <HAL_SPI_Receive+0x1cc>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800652c:	d102      	bne.n	8006534 <HAL_SPI_Receive+0x1d2>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d102      	bne.n	800653a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006538:	e017      	b.n	800656a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800653e:	b29b      	uxth	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1cd      	bne.n	80064e0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 fa45 	bl	80069d8 <SPI_EndRxTransaction>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d002      	beq.n	800655a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2220      	movs	r2, #32
 8006558:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	75fb      	strb	r3, [r7, #23]
 8006566:	e000      	b.n	800656a <HAL_SPI_Receive+0x208>
  }

error :
 8006568:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2201      	movs	r2, #1
 800656e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800657a:	7dfb      	ldrb	r3, [r7, #23]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b08c      	sub	sp, #48	; 0x30
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006592:	2301      	movs	r3, #1
 8006594:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d101      	bne.n	80065aa <HAL_SPI_TransmitReceive+0x26>
 80065a6:	2302      	movs	r3, #2
 80065a8:	e18a      	b.n	80068c0 <HAL_SPI_TransmitReceive+0x33c>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065b2:	f7fe fa15 	bl	80049e0 <HAL_GetTick>
 80065b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80065c8:	887b      	ldrh	r3, [r7, #2]
 80065ca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d00f      	beq.n	80065f4 <HAL_SPI_TransmitReceive+0x70>
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065da:	d107      	bne.n	80065ec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d103      	bne.n	80065ec <HAL_SPI_TransmitReceive+0x68>
 80065e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d003      	beq.n	80065f4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80065ec:	2302      	movs	r3, #2
 80065ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065f2:	e15b      	b.n	80068ac <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d005      	beq.n	8006606 <HAL_SPI_TransmitReceive+0x82>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <HAL_SPI_TransmitReceive+0x82>
 8006600:	887b      	ldrh	r3, [r7, #2]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d103      	bne.n	800660e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800660c:	e14e      	b.n	80068ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b04      	cmp	r3, #4
 8006618:	d003      	beq.n	8006622 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2205      	movs	r2, #5
 800661e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	887a      	ldrh	r2, [r7, #2]
 8006632:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	887a      	ldrh	r2, [r7, #2]
 8006638:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	887a      	ldrh	r2, [r7, #2]
 8006644:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	887a      	ldrh	r2, [r7, #2]
 800664a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2200      	movs	r2, #0
 8006650:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006662:	2b40      	cmp	r3, #64	; 0x40
 8006664:	d007      	beq.n	8006676 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006674:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800667e:	d178      	bne.n	8006772 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <HAL_SPI_TransmitReceive+0x10a>
 8006688:	8b7b      	ldrh	r3, [r7, #26]
 800668a:	2b01      	cmp	r3, #1
 800668c:	d166      	bne.n	800675c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006692:	881a      	ldrh	r2, [r3, #0]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669e:	1c9a      	adds	r2, r3, #2
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	3b01      	subs	r3, #1
 80066ac:	b29a      	uxth	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066b2:	e053      	b.n	800675c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d11b      	bne.n	80066fa <HAL_SPI_TransmitReceive+0x176>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d016      	beq.n	80066fa <HAL_SPI_TransmitReceive+0x176>
 80066cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d113      	bne.n	80066fa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	881a      	ldrh	r2, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e2:	1c9a      	adds	r2, r3, #2
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	3b01      	subs	r3, #1
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066f6:	2300      	movs	r3, #0
 80066f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b01      	cmp	r3, #1
 8006706:	d119      	bne.n	800673c <HAL_SPI_TransmitReceive+0x1b8>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d014      	beq.n	800673c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671c:	b292      	uxth	r2, r2
 800671e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006724:	1c9a      	adds	r2, r3, #2
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800672e:	b29b      	uxth	r3, r3
 8006730:	3b01      	subs	r3, #1
 8006732:	b29a      	uxth	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006738:	2301      	movs	r3, #1
 800673a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800673c:	f7fe f950 	bl	80049e0 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006748:	429a      	cmp	r2, r3
 800674a:	d807      	bhi.n	800675c <HAL_SPI_TransmitReceive+0x1d8>
 800674c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006752:	d003      	beq.n	800675c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800675a:	e0a7      	b.n	80068ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006760:	b29b      	uxth	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1a6      	bne.n	80066b4 <HAL_SPI_TransmitReceive+0x130>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800676a:	b29b      	uxth	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1a1      	bne.n	80066b4 <HAL_SPI_TransmitReceive+0x130>
 8006770:	e07c      	b.n	800686c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d002      	beq.n	8006780 <HAL_SPI_TransmitReceive+0x1fc>
 800677a:	8b7b      	ldrh	r3, [r7, #26]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d16b      	bne.n	8006858 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	330c      	adds	r3, #12
 800678a:	7812      	ldrb	r2, [r2, #0]
 800678c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800679c:	b29b      	uxth	r3, r3
 800679e:	3b01      	subs	r3, #1
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067a6:	e057      	b.n	8006858 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 0302 	and.w	r3, r3, #2
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d11c      	bne.n	80067f0 <HAL_SPI_TransmitReceive+0x26c>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d017      	beq.n	80067f0 <HAL_SPI_TransmitReceive+0x26c>
 80067c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d114      	bne.n	80067f0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	330c      	adds	r3, #12
 80067d0:	7812      	ldrb	r2, [r2, #0]
 80067d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d8:	1c5a      	adds	r2, r3, #1
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	3b01      	subs	r3, #1
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d119      	bne.n	8006832 <HAL_SPI_TransmitReceive+0x2ae>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006802:	b29b      	uxth	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d014      	beq.n	8006832 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68da      	ldr	r2, [r3, #12]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006812:	b2d2      	uxtb	r2, r2
 8006814:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006824:	b29b      	uxth	r3, r3
 8006826:	3b01      	subs	r3, #1
 8006828:	b29a      	uxth	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800682e:	2301      	movs	r3, #1
 8006830:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006832:	f7fe f8d5 	bl	80049e0 <HAL_GetTick>
 8006836:	4602      	mov	r2, r0
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	1ad3      	subs	r3, r2, r3
 800683c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800683e:	429a      	cmp	r2, r3
 8006840:	d803      	bhi.n	800684a <HAL_SPI_TransmitReceive+0x2c6>
 8006842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006848:	d102      	bne.n	8006850 <HAL_SPI_TransmitReceive+0x2cc>
 800684a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684c:	2b00      	cmp	r3, #0
 800684e:	d103      	bne.n	8006858 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006856:	e029      	b.n	80068ac <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800685c:	b29b      	uxth	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1a2      	bne.n	80067a8 <HAL_SPI_TransmitReceive+0x224>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006866:	b29b      	uxth	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d19d      	bne.n	80067a8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800686c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800686e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 f917 	bl	8006aa4 <SPI_EndRxTxTransaction>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d006      	beq.n	800688a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2220      	movs	r2, #32
 8006886:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006888:	e010      	b.n	80068ac <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10b      	bne.n	80068aa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006892:	2300      	movs	r3, #0
 8006894:	617b      	str	r3, [r7, #20]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	617b      	str	r3, [r7, #20]
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	e000      	b.n	80068ac <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80068aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3730      	adds	r7, #48	; 0x30
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b088      	sub	sp, #32
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	4613      	mov	r3, r2
 80068d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068d8:	f7fe f882 	bl	80049e0 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e0:	1a9b      	subs	r3, r3, r2
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	4413      	add	r3, r2
 80068e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068e8:	f7fe f87a 	bl	80049e0 <HAL_GetTick>
 80068ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068ee:	4b39      	ldr	r3, [pc, #228]	; (80069d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	015b      	lsls	r3, r3, #5
 80068f4:	0d1b      	lsrs	r3, r3, #20
 80068f6:	69fa      	ldr	r2, [r7, #28]
 80068f8:	fb02 f303 	mul.w	r3, r2, r3
 80068fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068fe:	e054      	b.n	80069aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006906:	d050      	beq.n	80069aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006908:	f7fe f86a 	bl	80049e0 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	69fa      	ldr	r2, [r7, #28]
 8006914:	429a      	cmp	r2, r3
 8006916:	d902      	bls.n	800691e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d13d      	bne.n	800699a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685a      	ldr	r2, [r3, #4]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800692c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006936:	d111      	bne.n	800695c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006940:	d004      	beq.n	800694c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800694a:	d107      	bne.n	800695c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800695a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006964:	d10f      	bne.n	8006986 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006984:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e017      	b.n	80069ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d101      	bne.n	80069a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069a0:	2300      	movs	r3, #0
 80069a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	3b01      	subs	r3, #1
 80069a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	4013      	ands	r3, r2
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	bf0c      	ite	eq
 80069ba:	2301      	moveq	r3, #1
 80069bc:	2300      	movne	r3, #0
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	461a      	mov	r2, r3
 80069c2:	79fb      	ldrb	r3, [r7, #7]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d19b      	bne.n	8006900 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3720      	adds	r7, #32
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	20000078 	.word	0x20000078

080069d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af02      	add	r7, sp, #8
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069ec:	d111      	bne.n	8006a12 <SPI_EndRxTransaction+0x3a>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069f6:	d004      	beq.n	8006a02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a00:	d107      	bne.n	8006a12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a10:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a1a:	d12a      	bne.n	8006a72 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a24:	d012      	beq.n	8006a4c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	9300      	str	r3, [sp, #0]
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	2180      	movs	r1, #128	; 0x80
 8006a30:	68f8      	ldr	r0, [r7, #12]
 8006a32:	f7ff ff49 	bl	80068c8 <SPI_WaitFlagStateUntilTimeout>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d02d      	beq.n	8006a98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a40:	f043 0220 	orr.w	r2, r3, #32
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e026      	b.n	8006a9a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	2200      	movs	r2, #0
 8006a54:	2101      	movs	r1, #1
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f7ff ff36 	bl	80068c8 <SPI_WaitFlagStateUntilTimeout>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d01a      	beq.n	8006a98 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a66:	f043 0220 	orr.w	r2, r3, #32
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e013      	b.n	8006a9a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f7ff ff23 	bl	80068c8 <SPI_WaitFlagStateUntilTimeout>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d007      	beq.n	8006a98 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a8c:	f043 0220 	orr.w	r2, r3, #32
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e000      	b.n	8006a9a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
	...

08006aa4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af02      	add	r7, sp, #8
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ab0:	4b1b      	ldr	r3, [pc, #108]	; (8006b20 <SPI_EndRxTxTransaction+0x7c>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a1b      	ldr	r2, [pc, #108]	; (8006b24 <SPI_EndRxTxTransaction+0x80>)
 8006ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aba:	0d5b      	lsrs	r3, r3, #21
 8006abc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006ac0:	fb02 f303 	mul.w	r3, r2, r3
 8006ac4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ace:	d112      	bne.n	8006af6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	2180      	movs	r1, #128	; 0x80
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f7ff fef4 	bl	80068c8 <SPI_WaitFlagStateUntilTimeout>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d016      	beq.n	8006b14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aea:	f043 0220 	orr.w	r2, r3, #32
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e00f      	b.n	8006b16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00a      	beq.n	8006b12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b0c:	2b80      	cmp	r3, #128	; 0x80
 8006b0e:	d0f2      	beq.n	8006af6 <SPI_EndRxTxTransaction+0x52>
 8006b10:	e000      	b.n	8006b14 <SPI_EndRxTxTransaction+0x70>
        break;
 8006b12:	bf00      	nop
  }

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20000078 	.word	0x20000078
 8006b24:	165e9f81 	.word	0x165e9f81

08006b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e041      	b.n	8006bbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d106      	bne.n	8006b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f7fd fe14 	bl	800477c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2202      	movs	r2, #2
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3304      	adds	r3, #4
 8006b64:	4619      	mov	r1, r3
 8006b66:	4610      	mov	r0, r2
 8006b68:	f000 f9c0 	bl	8006eec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
	...

08006bc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d001      	beq.n	8006be0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e044      	b.n	8006c6a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2202      	movs	r2, #2
 8006be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68da      	ldr	r2, [r3, #12]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f042 0201 	orr.w	r2, r2, #1
 8006bf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a1e      	ldr	r2, [pc, #120]	; (8006c78 <HAL_TIM_Base_Start_IT+0xb0>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d018      	beq.n	8006c34 <HAL_TIM_Base_Start_IT+0x6c>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c0a:	d013      	beq.n	8006c34 <HAL_TIM_Base_Start_IT+0x6c>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a1a      	ldr	r2, [pc, #104]	; (8006c7c <HAL_TIM_Base_Start_IT+0xb4>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d00e      	beq.n	8006c34 <HAL_TIM_Base_Start_IT+0x6c>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a19      	ldr	r2, [pc, #100]	; (8006c80 <HAL_TIM_Base_Start_IT+0xb8>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d009      	beq.n	8006c34 <HAL_TIM_Base_Start_IT+0x6c>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a17      	ldr	r2, [pc, #92]	; (8006c84 <HAL_TIM_Base_Start_IT+0xbc>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d004      	beq.n	8006c34 <HAL_TIM_Base_Start_IT+0x6c>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a16      	ldr	r2, [pc, #88]	; (8006c88 <HAL_TIM_Base_Start_IT+0xc0>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d111      	bne.n	8006c58 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2b06      	cmp	r3, #6
 8006c44:	d010      	beq.n	8006c68 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f042 0201 	orr.w	r2, r2, #1
 8006c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c56:	e007      	b.n	8006c68 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f042 0201 	orr.w	r2, r2, #1
 8006c66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	40010000 	.word	0x40010000
 8006c7c:	40000400 	.word	0x40000400
 8006c80:	40000800 	.word	0x40000800
 8006c84:	40000c00 	.word	0x40000c00
 8006c88:	40014000 	.word	0x40014000

08006c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d122      	bne.n	8006ce8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f003 0302 	and.w	r3, r3, #2
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d11b      	bne.n	8006ce8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f06f 0202 	mvn.w	r2, #2
 8006cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	f003 0303 	and.w	r3, r3, #3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f8ee 	bl	8006eb0 <HAL_TIM_IC_CaptureCallback>
 8006cd4:	e005      	b.n	8006ce2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f8e0 	bl	8006e9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f8f1 	bl	8006ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	f003 0304 	and.w	r3, r3, #4
 8006cf2:	2b04      	cmp	r3, #4
 8006cf4:	d122      	bne.n	8006d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b04      	cmp	r3, #4
 8006d02:	d11b      	bne.n	8006d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f06f 0204 	mvn.w	r2, #4
 8006d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2202      	movs	r2, #2
 8006d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d003      	beq.n	8006d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f8c4 	bl	8006eb0 <HAL_TIM_IC_CaptureCallback>
 8006d28:	e005      	b.n	8006d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f8b6 	bl	8006e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 f8c7 	bl	8006ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	f003 0308 	and.w	r3, r3, #8
 8006d46:	2b08      	cmp	r3, #8
 8006d48:	d122      	bne.n	8006d90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	f003 0308 	and.w	r3, r3, #8
 8006d54:	2b08      	cmp	r3, #8
 8006d56:	d11b      	bne.n	8006d90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f06f 0208 	mvn.w	r2, #8
 8006d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2204      	movs	r2, #4
 8006d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	f003 0303 	and.w	r3, r3, #3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d003      	beq.n	8006d7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 f89a 	bl	8006eb0 <HAL_TIM_IC_CaptureCallback>
 8006d7c:	e005      	b.n	8006d8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f88c 	bl	8006e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f89d 	bl	8006ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	f003 0310 	and.w	r3, r3, #16
 8006d9a:	2b10      	cmp	r3, #16
 8006d9c:	d122      	bne.n	8006de4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	f003 0310 	and.w	r3, r3, #16
 8006da8:	2b10      	cmp	r3, #16
 8006daa:	d11b      	bne.n	8006de4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f06f 0210 	mvn.w	r2, #16
 8006db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2208      	movs	r2, #8
 8006dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f870 	bl	8006eb0 <HAL_TIM_IC_CaptureCallback>
 8006dd0:	e005      	b.n	8006dde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f862 	bl	8006e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f873 	bl	8006ec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d10e      	bne.n	8006e10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d107      	bne.n	8006e10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f06f 0201 	mvn.w	r2, #1
 8006e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7fa fa18 	bl	8001240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e1a:	2b80      	cmp	r3, #128	; 0x80
 8006e1c:	d10e      	bne.n	8006e3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e28:	2b80      	cmp	r3, #128	; 0x80
 8006e2a:	d107      	bne.n	8006e3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f8e2 	bl	8007000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e46:	2b40      	cmp	r3, #64	; 0x40
 8006e48:	d10e      	bne.n	8006e68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e54:	2b40      	cmp	r3, #64	; 0x40
 8006e56:	d107      	bne.n	8006e68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f838 	bl	8006ed8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	f003 0320 	and.w	r3, r3, #32
 8006e72:	2b20      	cmp	r3, #32
 8006e74:	d10e      	bne.n	8006e94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f003 0320 	and.w	r3, r3, #32
 8006e80:	2b20      	cmp	r3, #32
 8006e82:	d107      	bne.n	8006e94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f06f 0220 	mvn.w	r2, #32
 8006e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f8ac 	bl	8006fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e94:	bf00      	nop
 8006e96:	3708      	adds	r7, #8
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a34      	ldr	r2, [pc, #208]	; (8006fd0 <TIM_Base_SetConfig+0xe4>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d00f      	beq.n	8006f24 <TIM_Base_SetConfig+0x38>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f0a:	d00b      	beq.n	8006f24 <TIM_Base_SetConfig+0x38>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a31      	ldr	r2, [pc, #196]	; (8006fd4 <TIM_Base_SetConfig+0xe8>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d007      	beq.n	8006f24 <TIM_Base_SetConfig+0x38>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a30      	ldr	r2, [pc, #192]	; (8006fd8 <TIM_Base_SetConfig+0xec>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d003      	beq.n	8006f24 <TIM_Base_SetConfig+0x38>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a2f      	ldr	r2, [pc, #188]	; (8006fdc <TIM_Base_SetConfig+0xf0>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d108      	bne.n	8006f36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a25      	ldr	r2, [pc, #148]	; (8006fd0 <TIM_Base_SetConfig+0xe4>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d01b      	beq.n	8006f76 <TIM_Base_SetConfig+0x8a>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f44:	d017      	beq.n	8006f76 <TIM_Base_SetConfig+0x8a>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a22      	ldr	r2, [pc, #136]	; (8006fd4 <TIM_Base_SetConfig+0xe8>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d013      	beq.n	8006f76 <TIM_Base_SetConfig+0x8a>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a21      	ldr	r2, [pc, #132]	; (8006fd8 <TIM_Base_SetConfig+0xec>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d00f      	beq.n	8006f76 <TIM_Base_SetConfig+0x8a>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a20      	ldr	r2, [pc, #128]	; (8006fdc <TIM_Base_SetConfig+0xf0>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d00b      	beq.n	8006f76 <TIM_Base_SetConfig+0x8a>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a1f      	ldr	r2, [pc, #124]	; (8006fe0 <TIM_Base_SetConfig+0xf4>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d007      	beq.n	8006f76 <TIM_Base_SetConfig+0x8a>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a1e      	ldr	r2, [pc, #120]	; (8006fe4 <TIM_Base_SetConfig+0xf8>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d003      	beq.n	8006f76 <TIM_Base_SetConfig+0x8a>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a1d      	ldr	r2, [pc, #116]	; (8006fe8 <TIM_Base_SetConfig+0xfc>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d108      	bne.n	8006f88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a08      	ldr	r2, [pc, #32]	; (8006fd0 <TIM_Base_SetConfig+0xe4>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d103      	bne.n	8006fbc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	691a      	ldr	r2, [r3, #16]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	615a      	str	r2, [r3, #20]
}
 8006fc2:	bf00      	nop
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	40010000 	.word	0x40010000
 8006fd4:	40000400 	.word	0x40000400
 8006fd8:	40000800 	.word	0x40000800
 8006fdc:	40000c00 	.word	0x40000c00
 8006fe0:	40014000 	.word	0x40014000
 8006fe4:	40014400 	.word	0x40014400
 8006fe8:	40014800 	.word	0x40014800

08006fec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e03f      	b.n	80070a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d106      	bne.n	8007040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7fd fbf0 	bl	8004820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2224      	movs	r2, #36	; 0x24
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68da      	ldr	r2, [r3, #12]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007056:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f929 	bl	80072b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	691a      	ldr	r2, [r3, #16]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800706c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	695a      	ldr	r2, [r3, #20]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800707c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68da      	ldr	r2, [r3, #12]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800708c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2220      	movs	r2, #32
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2220      	movs	r2, #32
 80070a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b08a      	sub	sp, #40	; 0x28
 80070b2:	af02      	add	r7, sp, #8
 80070b4:	60f8      	str	r0, [r7, #12]
 80070b6:	60b9      	str	r1, [r7, #8]
 80070b8:	603b      	str	r3, [r7, #0]
 80070ba:	4613      	mov	r3, r2
 80070bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070be:	2300      	movs	r3, #0
 80070c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b20      	cmp	r3, #32
 80070cc:	d17c      	bne.n	80071c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <HAL_UART_Transmit+0x2c>
 80070d4:	88fb      	ldrh	r3, [r7, #6]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e075      	b.n	80071ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d101      	bne.n	80070ec <HAL_UART_Transmit+0x3e>
 80070e8:	2302      	movs	r3, #2
 80070ea:	e06e      	b.n	80071ca <HAL_UART_Transmit+0x11c>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2221      	movs	r2, #33	; 0x21
 80070fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007102:	f7fd fc6d 	bl	80049e0 <HAL_GetTick>
 8007106:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	88fa      	ldrh	r2, [r7, #6]
 800710c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	88fa      	ldrh	r2, [r7, #6]
 8007112:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800711c:	d108      	bne.n	8007130 <HAL_UART_Transmit+0x82>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d104      	bne.n	8007130 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007126:	2300      	movs	r3, #0
 8007128:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	61bb      	str	r3, [r7, #24]
 800712e:	e003      	b.n	8007138 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007134:	2300      	movs	r3, #0
 8007136:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007140:	e02a      	b.n	8007198 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2200      	movs	r2, #0
 800714a:	2180      	movs	r1, #128	; 0x80
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 f840 	bl	80071d2 <UART_WaitOnFlagUntilTimeout>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d001      	beq.n	800715c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e036      	b.n	80071ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10b      	bne.n	800717a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007170:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	3302      	adds	r3, #2
 8007176:	61bb      	str	r3, [r7, #24]
 8007178:	e007      	b.n	800718a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	781a      	ldrb	r2, [r3, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	3301      	adds	r3, #1
 8007188:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800718e:	b29b      	uxth	r3, r3
 8007190:	3b01      	subs	r3, #1
 8007192:	b29a      	uxth	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800719c:	b29b      	uxth	r3, r3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1cf      	bne.n	8007142 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2200      	movs	r2, #0
 80071aa:	2140      	movs	r1, #64	; 0x40
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f000 f810 	bl	80071d2 <UART_WaitOnFlagUntilTimeout>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d001      	beq.n	80071bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e006      	b.n	80071ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2220      	movs	r2, #32
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	e000      	b.n	80071ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80071c8:	2302      	movs	r3, #2
  }
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3720      	adds	r7, #32
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b090      	sub	sp, #64	; 0x40
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	60f8      	str	r0, [r7, #12]
 80071da:	60b9      	str	r1, [r7, #8]
 80071dc:	603b      	str	r3, [r7, #0]
 80071de:	4613      	mov	r3, r2
 80071e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071e2:	e050      	b.n	8007286 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071ea:	d04c      	beq.n	8007286 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80071ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d007      	beq.n	8007202 <UART_WaitOnFlagUntilTimeout+0x30>
 80071f2:	f7fd fbf5 	bl	80049e0 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071fe:	429a      	cmp	r2, r3
 8007200:	d241      	bcs.n	8007286 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	330c      	adds	r3, #12
 8007208:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720c:	e853 3f00 	ldrex	r3, [r3]
 8007210:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007218:	63fb      	str	r3, [r7, #60]	; 0x3c
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	330c      	adds	r3, #12
 8007220:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007222:	637a      	str	r2, [r7, #52]	; 0x34
 8007224:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007226:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800722a:	e841 2300 	strex	r3, r2, [r1]
 800722e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1e5      	bne.n	8007202 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	3314      	adds	r3, #20
 800723c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	e853 3f00 	ldrex	r3, [r3]
 8007244:	613b      	str	r3, [r7, #16]
   return(result);
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	f023 0301 	bic.w	r3, r3, #1
 800724c:	63bb      	str	r3, [r7, #56]	; 0x38
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	3314      	adds	r3, #20
 8007254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007256:	623a      	str	r2, [r7, #32]
 8007258:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725a:	69f9      	ldr	r1, [r7, #28]
 800725c:	6a3a      	ldr	r2, [r7, #32]
 800725e:	e841 2300 	strex	r3, r2, [r1]
 8007262:	61bb      	str	r3, [r7, #24]
   return(result);
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1e5      	bne.n	8007236 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2220      	movs	r2, #32
 800726e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2220      	movs	r2, #32
 8007276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e00f      	b.n	80072a6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	4013      	ands	r3, r2
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	429a      	cmp	r2, r3
 8007294:	bf0c      	ite	eq
 8007296:	2301      	moveq	r3, #1
 8007298:	2300      	movne	r3, #0
 800729a:	b2db      	uxtb	r3, r3
 800729c:	461a      	mov	r2, r3
 800729e:	79fb      	ldrb	r3, [r7, #7]
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d09f      	beq.n	80071e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3740      	adds	r7, #64	; 0x40
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
	...

080072b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072b4:	b0c0      	sub	sp, #256	; 0x100
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	691b      	ldr	r3, [r3, #16]
 80072c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80072c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072cc:	68d9      	ldr	r1, [r3, #12]
 80072ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	ea40 0301 	orr.w	r3, r0, r1
 80072d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80072da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	431a      	orrs	r2, r3
 80072e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	431a      	orrs	r2, r3
 80072f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80072fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007308:	f021 010c 	bic.w	r1, r1, #12
 800730c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007316:	430b      	orrs	r3, r1
 8007318:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800731a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800732a:	6999      	ldr	r1, [r3, #24]
 800732c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	ea40 0301 	orr.w	r3, r0, r1
 8007336:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	4b8f      	ldr	r3, [pc, #572]	; (800757c <UART_SetConfig+0x2cc>)
 8007340:	429a      	cmp	r2, r3
 8007342:	d005      	beq.n	8007350 <UART_SetConfig+0xa0>
 8007344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	4b8d      	ldr	r3, [pc, #564]	; (8007580 <UART_SetConfig+0x2d0>)
 800734c:	429a      	cmp	r2, r3
 800734e:	d104      	bne.n	800735a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007350:	f7fe fe2e 	bl	8005fb0 <HAL_RCC_GetPCLK2Freq>
 8007354:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007358:	e003      	b.n	8007362 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800735a:	f7fe fe15 	bl	8005f88 <HAL_RCC_GetPCLK1Freq>
 800735e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800736c:	f040 810c 	bne.w	8007588 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007370:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007374:	2200      	movs	r2, #0
 8007376:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800737a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800737e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007382:	4622      	mov	r2, r4
 8007384:	462b      	mov	r3, r5
 8007386:	1891      	adds	r1, r2, r2
 8007388:	65b9      	str	r1, [r7, #88]	; 0x58
 800738a:	415b      	adcs	r3, r3
 800738c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800738e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007392:	4621      	mov	r1, r4
 8007394:	eb12 0801 	adds.w	r8, r2, r1
 8007398:	4629      	mov	r1, r5
 800739a:	eb43 0901 	adc.w	r9, r3, r1
 800739e:	f04f 0200 	mov.w	r2, #0
 80073a2:	f04f 0300 	mov.w	r3, #0
 80073a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80073aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80073ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073b2:	4690      	mov	r8, r2
 80073b4:	4699      	mov	r9, r3
 80073b6:	4623      	mov	r3, r4
 80073b8:	eb18 0303 	adds.w	r3, r8, r3
 80073bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80073c0:	462b      	mov	r3, r5
 80073c2:	eb49 0303 	adc.w	r3, r9, r3
 80073c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80073ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ce:	685b      	ldr	r3, [r3, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80073d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80073da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80073de:	460b      	mov	r3, r1
 80073e0:	18db      	adds	r3, r3, r3
 80073e2:	653b      	str	r3, [r7, #80]	; 0x50
 80073e4:	4613      	mov	r3, r2
 80073e6:	eb42 0303 	adc.w	r3, r2, r3
 80073ea:	657b      	str	r3, [r7, #84]	; 0x54
 80073ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80073f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80073f4:	f7f9 fc50 	bl	8000c98 <__aeabi_uldivmod>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4b61      	ldr	r3, [pc, #388]	; (8007584 <UART_SetConfig+0x2d4>)
 80073fe:	fba3 2302 	umull	r2, r3, r3, r2
 8007402:	095b      	lsrs	r3, r3, #5
 8007404:	011c      	lsls	r4, r3, #4
 8007406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800740a:	2200      	movs	r2, #0
 800740c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007410:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007414:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007418:	4642      	mov	r2, r8
 800741a:	464b      	mov	r3, r9
 800741c:	1891      	adds	r1, r2, r2
 800741e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007420:	415b      	adcs	r3, r3
 8007422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007424:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007428:	4641      	mov	r1, r8
 800742a:	eb12 0a01 	adds.w	sl, r2, r1
 800742e:	4649      	mov	r1, r9
 8007430:	eb43 0b01 	adc.w	fp, r3, r1
 8007434:	f04f 0200 	mov.w	r2, #0
 8007438:	f04f 0300 	mov.w	r3, #0
 800743c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007440:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007444:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007448:	4692      	mov	sl, r2
 800744a:	469b      	mov	fp, r3
 800744c:	4643      	mov	r3, r8
 800744e:	eb1a 0303 	adds.w	r3, sl, r3
 8007452:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007456:	464b      	mov	r3, r9
 8007458:	eb4b 0303 	adc.w	r3, fp, r3
 800745c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800746c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007470:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007474:	460b      	mov	r3, r1
 8007476:	18db      	adds	r3, r3, r3
 8007478:	643b      	str	r3, [r7, #64]	; 0x40
 800747a:	4613      	mov	r3, r2
 800747c:	eb42 0303 	adc.w	r3, r2, r3
 8007480:	647b      	str	r3, [r7, #68]	; 0x44
 8007482:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007486:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800748a:	f7f9 fc05 	bl	8000c98 <__aeabi_uldivmod>
 800748e:	4602      	mov	r2, r0
 8007490:	460b      	mov	r3, r1
 8007492:	4611      	mov	r1, r2
 8007494:	4b3b      	ldr	r3, [pc, #236]	; (8007584 <UART_SetConfig+0x2d4>)
 8007496:	fba3 2301 	umull	r2, r3, r3, r1
 800749a:	095b      	lsrs	r3, r3, #5
 800749c:	2264      	movs	r2, #100	; 0x64
 800749e:	fb02 f303 	mul.w	r3, r2, r3
 80074a2:	1acb      	subs	r3, r1, r3
 80074a4:	00db      	lsls	r3, r3, #3
 80074a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80074aa:	4b36      	ldr	r3, [pc, #216]	; (8007584 <UART_SetConfig+0x2d4>)
 80074ac:	fba3 2302 	umull	r2, r3, r3, r2
 80074b0:	095b      	lsrs	r3, r3, #5
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80074b8:	441c      	add	r4, r3
 80074ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074be:	2200      	movs	r2, #0
 80074c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80074c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80074cc:	4642      	mov	r2, r8
 80074ce:	464b      	mov	r3, r9
 80074d0:	1891      	adds	r1, r2, r2
 80074d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80074d4:	415b      	adcs	r3, r3
 80074d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80074dc:	4641      	mov	r1, r8
 80074de:	1851      	adds	r1, r2, r1
 80074e0:	6339      	str	r1, [r7, #48]	; 0x30
 80074e2:	4649      	mov	r1, r9
 80074e4:	414b      	adcs	r3, r1
 80074e6:	637b      	str	r3, [r7, #52]	; 0x34
 80074e8:	f04f 0200 	mov.w	r2, #0
 80074ec:	f04f 0300 	mov.w	r3, #0
 80074f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80074f4:	4659      	mov	r1, fp
 80074f6:	00cb      	lsls	r3, r1, #3
 80074f8:	4651      	mov	r1, sl
 80074fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074fe:	4651      	mov	r1, sl
 8007500:	00ca      	lsls	r2, r1, #3
 8007502:	4610      	mov	r0, r2
 8007504:	4619      	mov	r1, r3
 8007506:	4603      	mov	r3, r0
 8007508:	4642      	mov	r2, r8
 800750a:	189b      	adds	r3, r3, r2
 800750c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007510:	464b      	mov	r3, r9
 8007512:	460a      	mov	r2, r1
 8007514:	eb42 0303 	adc.w	r3, r2, r3
 8007518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800751c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007528:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800752c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007530:	460b      	mov	r3, r1
 8007532:	18db      	adds	r3, r3, r3
 8007534:	62bb      	str	r3, [r7, #40]	; 0x28
 8007536:	4613      	mov	r3, r2
 8007538:	eb42 0303 	adc.w	r3, r2, r3
 800753c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800753e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007542:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007546:	f7f9 fba7 	bl	8000c98 <__aeabi_uldivmod>
 800754a:	4602      	mov	r2, r0
 800754c:	460b      	mov	r3, r1
 800754e:	4b0d      	ldr	r3, [pc, #52]	; (8007584 <UART_SetConfig+0x2d4>)
 8007550:	fba3 1302 	umull	r1, r3, r3, r2
 8007554:	095b      	lsrs	r3, r3, #5
 8007556:	2164      	movs	r1, #100	; 0x64
 8007558:	fb01 f303 	mul.w	r3, r1, r3
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	00db      	lsls	r3, r3, #3
 8007560:	3332      	adds	r3, #50	; 0x32
 8007562:	4a08      	ldr	r2, [pc, #32]	; (8007584 <UART_SetConfig+0x2d4>)
 8007564:	fba2 2303 	umull	r2, r3, r2, r3
 8007568:	095b      	lsrs	r3, r3, #5
 800756a:	f003 0207 	and.w	r2, r3, #7
 800756e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4422      	add	r2, r4
 8007576:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007578:	e105      	b.n	8007786 <UART_SetConfig+0x4d6>
 800757a:	bf00      	nop
 800757c:	40011000 	.word	0x40011000
 8007580:	40011400 	.word	0x40011400
 8007584:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800758c:	2200      	movs	r2, #0
 800758e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007592:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007596:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800759a:	4642      	mov	r2, r8
 800759c:	464b      	mov	r3, r9
 800759e:	1891      	adds	r1, r2, r2
 80075a0:	6239      	str	r1, [r7, #32]
 80075a2:	415b      	adcs	r3, r3
 80075a4:	627b      	str	r3, [r7, #36]	; 0x24
 80075a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80075aa:	4641      	mov	r1, r8
 80075ac:	1854      	adds	r4, r2, r1
 80075ae:	4649      	mov	r1, r9
 80075b0:	eb43 0501 	adc.w	r5, r3, r1
 80075b4:	f04f 0200 	mov.w	r2, #0
 80075b8:	f04f 0300 	mov.w	r3, #0
 80075bc:	00eb      	lsls	r3, r5, #3
 80075be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075c2:	00e2      	lsls	r2, r4, #3
 80075c4:	4614      	mov	r4, r2
 80075c6:	461d      	mov	r5, r3
 80075c8:	4643      	mov	r3, r8
 80075ca:	18e3      	adds	r3, r4, r3
 80075cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80075d0:	464b      	mov	r3, r9
 80075d2:	eb45 0303 	adc.w	r3, r5, r3
 80075d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80075da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80075ea:	f04f 0200 	mov.w	r2, #0
 80075ee:	f04f 0300 	mov.w	r3, #0
 80075f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80075f6:	4629      	mov	r1, r5
 80075f8:	008b      	lsls	r3, r1, #2
 80075fa:	4621      	mov	r1, r4
 80075fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007600:	4621      	mov	r1, r4
 8007602:	008a      	lsls	r2, r1, #2
 8007604:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007608:	f7f9 fb46 	bl	8000c98 <__aeabi_uldivmod>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	4b60      	ldr	r3, [pc, #384]	; (8007794 <UART_SetConfig+0x4e4>)
 8007612:	fba3 2302 	umull	r2, r3, r3, r2
 8007616:	095b      	lsrs	r3, r3, #5
 8007618:	011c      	lsls	r4, r3, #4
 800761a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800761e:	2200      	movs	r2, #0
 8007620:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007624:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007628:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800762c:	4642      	mov	r2, r8
 800762e:	464b      	mov	r3, r9
 8007630:	1891      	adds	r1, r2, r2
 8007632:	61b9      	str	r1, [r7, #24]
 8007634:	415b      	adcs	r3, r3
 8007636:	61fb      	str	r3, [r7, #28]
 8007638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800763c:	4641      	mov	r1, r8
 800763e:	1851      	adds	r1, r2, r1
 8007640:	6139      	str	r1, [r7, #16]
 8007642:	4649      	mov	r1, r9
 8007644:	414b      	adcs	r3, r1
 8007646:	617b      	str	r3, [r7, #20]
 8007648:	f04f 0200 	mov.w	r2, #0
 800764c:	f04f 0300 	mov.w	r3, #0
 8007650:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007654:	4659      	mov	r1, fp
 8007656:	00cb      	lsls	r3, r1, #3
 8007658:	4651      	mov	r1, sl
 800765a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800765e:	4651      	mov	r1, sl
 8007660:	00ca      	lsls	r2, r1, #3
 8007662:	4610      	mov	r0, r2
 8007664:	4619      	mov	r1, r3
 8007666:	4603      	mov	r3, r0
 8007668:	4642      	mov	r2, r8
 800766a:	189b      	adds	r3, r3, r2
 800766c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007670:	464b      	mov	r3, r9
 8007672:	460a      	mov	r2, r1
 8007674:	eb42 0303 	adc.w	r3, r2, r3
 8007678:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800767c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	67bb      	str	r3, [r7, #120]	; 0x78
 8007686:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007688:	f04f 0200 	mov.w	r2, #0
 800768c:	f04f 0300 	mov.w	r3, #0
 8007690:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007694:	4649      	mov	r1, r9
 8007696:	008b      	lsls	r3, r1, #2
 8007698:	4641      	mov	r1, r8
 800769a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800769e:	4641      	mov	r1, r8
 80076a0:	008a      	lsls	r2, r1, #2
 80076a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80076a6:	f7f9 faf7 	bl	8000c98 <__aeabi_uldivmod>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4b39      	ldr	r3, [pc, #228]	; (8007794 <UART_SetConfig+0x4e4>)
 80076b0:	fba3 1302 	umull	r1, r3, r3, r2
 80076b4:	095b      	lsrs	r3, r3, #5
 80076b6:	2164      	movs	r1, #100	; 0x64
 80076b8:	fb01 f303 	mul.w	r3, r1, r3
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	011b      	lsls	r3, r3, #4
 80076c0:	3332      	adds	r3, #50	; 0x32
 80076c2:	4a34      	ldr	r2, [pc, #208]	; (8007794 <UART_SetConfig+0x4e4>)
 80076c4:	fba2 2303 	umull	r2, r3, r2, r3
 80076c8:	095b      	lsrs	r3, r3, #5
 80076ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076ce:	441c      	add	r4, r3
 80076d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076d4:	2200      	movs	r2, #0
 80076d6:	673b      	str	r3, [r7, #112]	; 0x70
 80076d8:	677a      	str	r2, [r7, #116]	; 0x74
 80076da:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80076de:	4642      	mov	r2, r8
 80076e0:	464b      	mov	r3, r9
 80076e2:	1891      	adds	r1, r2, r2
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	415b      	adcs	r3, r3
 80076e8:	60fb      	str	r3, [r7, #12]
 80076ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076ee:	4641      	mov	r1, r8
 80076f0:	1851      	adds	r1, r2, r1
 80076f2:	6039      	str	r1, [r7, #0]
 80076f4:	4649      	mov	r1, r9
 80076f6:	414b      	adcs	r3, r1
 80076f8:	607b      	str	r3, [r7, #4]
 80076fa:	f04f 0200 	mov.w	r2, #0
 80076fe:	f04f 0300 	mov.w	r3, #0
 8007702:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007706:	4659      	mov	r1, fp
 8007708:	00cb      	lsls	r3, r1, #3
 800770a:	4651      	mov	r1, sl
 800770c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007710:	4651      	mov	r1, sl
 8007712:	00ca      	lsls	r2, r1, #3
 8007714:	4610      	mov	r0, r2
 8007716:	4619      	mov	r1, r3
 8007718:	4603      	mov	r3, r0
 800771a:	4642      	mov	r2, r8
 800771c:	189b      	adds	r3, r3, r2
 800771e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007720:	464b      	mov	r3, r9
 8007722:	460a      	mov	r2, r1
 8007724:	eb42 0303 	adc.w	r3, r2, r3
 8007728:	66fb      	str	r3, [r7, #108]	; 0x6c
 800772a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	663b      	str	r3, [r7, #96]	; 0x60
 8007734:	667a      	str	r2, [r7, #100]	; 0x64
 8007736:	f04f 0200 	mov.w	r2, #0
 800773a:	f04f 0300 	mov.w	r3, #0
 800773e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007742:	4649      	mov	r1, r9
 8007744:	008b      	lsls	r3, r1, #2
 8007746:	4641      	mov	r1, r8
 8007748:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800774c:	4641      	mov	r1, r8
 800774e:	008a      	lsls	r2, r1, #2
 8007750:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007754:	f7f9 faa0 	bl	8000c98 <__aeabi_uldivmod>
 8007758:	4602      	mov	r2, r0
 800775a:	460b      	mov	r3, r1
 800775c:	4b0d      	ldr	r3, [pc, #52]	; (8007794 <UART_SetConfig+0x4e4>)
 800775e:	fba3 1302 	umull	r1, r3, r3, r2
 8007762:	095b      	lsrs	r3, r3, #5
 8007764:	2164      	movs	r1, #100	; 0x64
 8007766:	fb01 f303 	mul.w	r3, r1, r3
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	011b      	lsls	r3, r3, #4
 800776e:	3332      	adds	r3, #50	; 0x32
 8007770:	4a08      	ldr	r2, [pc, #32]	; (8007794 <UART_SetConfig+0x4e4>)
 8007772:	fba2 2303 	umull	r2, r3, r2, r3
 8007776:	095b      	lsrs	r3, r3, #5
 8007778:	f003 020f 	and.w	r2, r3, #15
 800777c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4422      	add	r2, r4
 8007784:	609a      	str	r2, [r3, #8]
}
 8007786:	bf00      	nop
 8007788:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800778c:	46bd      	mov	sp, r7
 800778e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007792:	bf00      	nop
 8007794:	51eb851f 	.word	0x51eb851f

08007798 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80077a0:	4b22      	ldr	r3, [pc, #136]	; (800782c <WIZCHIP_READ+0x94>)
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	4798      	blx	r3
   WIZCHIP.CS._select();
 80077a6:	4b21      	ldr	r3, [pc, #132]	; (800782c <WIZCHIP_READ+0x94>)
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80077ac:	4b1f      	ldr	r3, [pc, #124]	; (800782c <WIZCHIP_READ+0x94>)
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d003      	beq.n	80077bc <WIZCHIP_READ+0x24>
 80077b4:	4b1d      	ldr	r3, [pc, #116]	; (800782c <WIZCHIP_READ+0x94>)
 80077b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d114      	bne.n	80077e6 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80077bc:	4b1b      	ldr	r3, [pc, #108]	; (800782c <WIZCHIP_READ+0x94>)
 80077be:	6a1b      	ldr	r3, [r3, #32]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	0c12      	lsrs	r2, r2, #16
 80077c4:	b2d2      	uxtb	r2, r2
 80077c6:	4610      	mov	r0, r2
 80077c8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80077ca:	4b18      	ldr	r3, [pc, #96]	; (800782c <WIZCHIP_READ+0x94>)
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	0a12      	lsrs	r2, r2, #8
 80077d2:	b2d2      	uxtb	r2, r2
 80077d4:	4610      	mov	r0, r2
 80077d6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80077d8:	4b14      	ldr	r3, [pc, #80]	; (800782c <WIZCHIP_READ+0x94>)
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	b2d2      	uxtb	r2, r2
 80077e0:	4610      	mov	r0, r2
 80077e2:	4798      	blx	r3
 80077e4:	e011      	b.n	800780a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	0c1b      	lsrs	r3, r3, #16
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	0a1b      	lsrs	r3, r3, #8
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80077fc:	4b0b      	ldr	r3, [pc, #44]	; (800782c <WIZCHIP_READ+0x94>)
 80077fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007800:	f107 020c 	add.w	r2, r7, #12
 8007804:	2103      	movs	r1, #3
 8007806:	4610      	mov	r0, r2
 8007808:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800780a:	4b08      	ldr	r3, [pc, #32]	; (800782c <WIZCHIP_READ+0x94>)
 800780c:	69db      	ldr	r3, [r3, #28]
 800780e:	4798      	blx	r3
 8007810:	4603      	mov	r3, r0
 8007812:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8007814:	4b05      	ldr	r3, [pc, #20]	; (800782c <WIZCHIP_READ+0x94>)
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800781a:	4b04      	ldr	r3, [pc, #16]	; (800782c <WIZCHIP_READ+0x94>)
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	4798      	blx	r3
   return ret;
 8007820:	7bfb      	ldrb	r3, [r7, #15]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	20000084 	.word	0x20000084

08007830 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	460b      	mov	r3, r1
 800783a:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 800783c:	4b22      	ldr	r3, [pc, #136]	; (80078c8 <WIZCHIP_WRITE+0x98>)
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	4798      	blx	r3
   WIZCHIP.CS._select();
 8007842:	4b21      	ldr	r3, [pc, #132]	; (80078c8 <WIZCHIP_WRITE+0x98>)
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f043 0304 	orr.w	r3, r3, #4
 800784e:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007850:	4b1d      	ldr	r3, [pc, #116]	; (80078c8 <WIZCHIP_WRITE+0x98>)
 8007852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007854:	2b00      	cmp	r3, #0
 8007856:	d119      	bne.n	800788c <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8007858:	4b1b      	ldr	r3, [pc, #108]	; (80078c8 <WIZCHIP_WRITE+0x98>)
 800785a:	6a1b      	ldr	r3, [r3, #32]
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	0c12      	lsrs	r2, r2, #16
 8007860:	b2d2      	uxtb	r2, r2
 8007862:	4610      	mov	r0, r2
 8007864:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8007866:	4b18      	ldr	r3, [pc, #96]	; (80078c8 <WIZCHIP_WRITE+0x98>)
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	0a12      	lsrs	r2, r2, #8
 800786e:	b2d2      	uxtb	r2, r2
 8007870:	4610      	mov	r0, r2
 8007872:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8007874:	4b14      	ldr	r3, [pc, #80]	; (80078c8 <WIZCHIP_WRITE+0x98>)
 8007876:	6a1b      	ldr	r3, [r3, #32]
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	b2d2      	uxtb	r2, r2
 800787c:	4610      	mov	r0, r2
 800787e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8007880:	4b11      	ldr	r3, [pc, #68]	; (80078c8 <WIZCHIP_WRITE+0x98>)
 8007882:	6a1b      	ldr	r3, [r3, #32]
 8007884:	78fa      	ldrb	r2, [r7, #3]
 8007886:	4610      	mov	r0, r2
 8007888:	4798      	blx	r3
 800788a:	e013      	b.n	80078b4 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	0c1b      	lsrs	r3, r3, #16
 8007890:	b2db      	uxtb	r3, r3
 8007892:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	0a1b      	lsrs	r3, r3, #8
 8007898:	b2db      	uxtb	r3, r3
 800789a:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80078a2:	78fb      	ldrb	r3, [r7, #3]
 80078a4:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80078a6:	4b08      	ldr	r3, [pc, #32]	; (80078c8 <WIZCHIP_WRITE+0x98>)
 80078a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078aa:	f107 020c 	add.w	r2, r7, #12
 80078ae:	2104      	movs	r1, #4
 80078b0:	4610      	mov	r0, r2
 80078b2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80078b4:	4b04      	ldr	r3, [pc, #16]	; (80078c8 <WIZCHIP_WRITE+0x98>)
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80078ba:	4b03      	ldr	r3, [pc, #12]	; (80078c8 <WIZCHIP_WRITE+0x98>)
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	4798      	blx	r3
}
 80078c0:	bf00      	nop
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	20000084 	.word	0x20000084

080078cc <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80078cc:	b590      	push	{r4, r7, lr}
 80078ce:	b087      	sub	sp, #28
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	4613      	mov	r3, r2
 80078d8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80078da:	4b2b      	ldr	r3, [pc, #172]	; (8007988 <WIZCHIP_READ_BUF+0xbc>)
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	4798      	blx	r3
   WIZCHIP.CS._select();
 80078e0:	4b29      	ldr	r3, [pc, #164]	; (8007988 <WIZCHIP_READ_BUF+0xbc>)
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80078e6:	4b28      	ldr	r3, [pc, #160]	; (8007988 <WIZCHIP_READ_BUF+0xbc>)
 80078e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <WIZCHIP_READ_BUF+0x2a>
 80078ee:	4b26      	ldr	r3, [pc, #152]	; (8007988 <WIZCHIP_READ_BUF+0xbc>)
 80078f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d126      	bne.n	8007944 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80078f6:	4b24      	ldr	r3, [pc, #144]	; (8007988 <WIZCHIP_READ_BUF+0xbc>)
 80078f8:	6a1b      	ldr	r3, [r3, #32]
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	0c12      	lsrs	r2, r2, #16
 80078fe:	b2d2      	uxtb	r2, r2
 8007900:	4610      	mov	r0, r2
 8007902:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8007904:	4b20      	ldr	r3, [pc, #128]	; (8007988 <WIZCHIP_READ_BUF+0xbc>)
 8007906:	6a1b      	ldr	r3, [r3, #32]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	0a12      	lsrs	r2, r2, #8
 800790c:	b2d2      	uxtb	r2, r2
 800790e:	4610      	mov	r0, r2
 8007910:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8007912:	4b1d      	ldr	r3, [pc, #116]	; (8007988 <WIZCHIP_READ_BUF+0xbc>)
 8007914:	6a1b      	ldr	r3, [r3, #32]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	b2d2      	uxtb	r2, r2
 800791a:	4610      	mov	r0, r2
 800791c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800791e:	2300      	movs	r3, #0
 8007920:	82fb      	strh	r3, [r7, #22]
 8007922:	e00a      	b.n	800793a <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8007924:	4b18      	ldr	r3, [pc, #96]	; (8007988 <WIZCHIP_READ_BUF+0xbc>)
 8007926:	69db      	ldr	r3, [r3, #28]
 8007928:	8afa      	ldrh	r2, [r7, #22]
 800792a:	68b9      	ldr	r1, [r7, #8]
 800792c:	188c      	adds	r4, r1, r2
 800792e:	4798      	blx	r3
 8007930:	4603      	mov	r3, r0
 8007932:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8007934:	8afb      	ldrh	r3, [r7, #22]
 8007936:	3301      	adds	r3, #1
 8007938:	82fb      	strh	r3, [r7, #22]
 800793a:	8afa      	ldrh	r2, [r7, #22]
 800793c:	88fb      	ldrh	r3, [r7, #6]
 800793e:	429a      	cmp	r2, r3
 8007940:	d3f0      	bcc.n	8007924 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8007942:	e017      	b.n	8007974 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	0c1b      	lsrs	r3, r3, #16
 8007948:	b2db      	uxtb	r3, r3
 800794a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	0a1b      	lsrs	r3, r3, #8
 8007950:	b2db      	uxtb	r3, r3
 8007952:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	b2db      	uxtb	r3, r3
 8007958:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800795a:	4b0b      	ldr	r3, [pc, #44]	; (8007988 <WIZCHIP_READ_BUF+0xbc>)
 800795c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795e:	f107 0210 	add.w	r2, r7, #16
 8007962:	2103      	movs	r1, #3
 8007964:	4610      	mov	r0, r2
 8007966:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8007968:	4b07      	ldr	r3, [pc, #28]	; (8007988 <WIZCHIP_READ_BUF+0xbc>)
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	88fa      	ldrh	r2, [r7, #6]
 800796e:	4611      	mov	r1, r2
 8007970:	68b8      	ldr	r0, [r7, #8]
 8007972:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8007974:	4b04      	ldr	r3, [pc, #16]	; (8007988 <WIZCHIP_READ_BUF+0xbc>)
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800797a:	4b03      	ldr	r3, [pc, #12]	; (8007988 <WIZCHIP_READ_BUF+0xbc>)
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	4798      	blx	r3
}
 8007980:	bf00      	nop
 8007982:	371c      	adds	r7, #28
 8007984:	46bd      	mov	sp, r7
 8007986:	bd90      	pop	{r4, r7, pc}
 8007988:	20000084 	.word	0x20000084

0800798c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	4613      	mov	r3, r2
 8007998:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800799a:	4b2b      	ldr	r3, [pc, #172]	; (8007a48 <WIZCHIP_WRITE_BUF+0xbc>)
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	4798      	blx	r3
   WIZCHIP.CS._select();
 80079a0:	4b29      	ldr	r3, [pc, #164]	; (8007a48 <WIZCHIP_WRITE_BUF+0xbc>)
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f043 0304 	orr.w	r3, r3, #4
 80079ac:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80079ae:	4b26      	ldr	r3, [pc, #152]	; (8007a48 <WIZCHIP_WRITE_BUF+0xbc>)
 80079b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d126      	bne.n	8007a04 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80079b6:	4b24      	ldr	r3, [pc, #144]	; (8007a48 <WIZCHIP_WRITE_BUF+0xbc>)
 80079b8:	6a1b      	ldr	r3, [r3, #32]
 80079ba:	68fa      	ldr	r2, [r7, #12]
 80079bc:	0c12      	lsrs	r2, r2, #16
 80079be:	b2d2      	uxtb	r2, r2
 80079c0:	4610      	mov	r0, r2
 80079c2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80079c4:	4b20      	ldr	r3, [pc, #128]	; (8007a48 <WIZCHIP_WRITE_BUF+0xbc>)
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	0a12      	lsrs	r2, r2, #8
 80079cc:	b2d2      	uxtb	r2, r2
 80079ce:	4610      	mov	r0, r2
 80079d0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80079d2:	4b1d      	ldr	r3, [pc, #116]	; (8007a48 <WIZCHIP_WRITE_BUF+0xbc>)
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	b2d2      	uxtb	r2, r2
 80079da:	4610      	mov	r0, r2
 80079dc:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80079de:	2300      	movs	r3, #0
 80079e0:	82fb      	strh	r3, [r7, #22]
 80079e2:	e00a      	b.n	80079fa <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80079e4:	4b18      	ldr	r3, [pc, #96]	; (8007a48 <WIZCHIP_WRITE_BUF+0xbc>)
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	8afa      	ldrh	r2, [r7, #22]
 80079ea:	68b9      	ldr	r1, [r7, #8]
 80079ec:	440a      	add	r2, r1
 80079ee:	7812      	ldrb	r2, [r2, #0]
 80079f0:	4610      	mov	r0, r2
 80079f2:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80079f4:	8afb      	ldrh	r3, [r7, #22]
 80079f6:	3301      	adds	r3, #1
 80079f8:	82fb      	strh	r3, [r7, #22]
 80079fa:	8afa      	ldrh	r2, [r7, #22]
 80079fc:	88fb      	ldrh	r3, [r7, #6]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d3f0      	bcc.n	80079e4 <WIZCHIP_WRITE_BUF+0x58>
 8007a02:	e017      	b.n	8007a34 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	0c1b      	lsrs	r3, r3, #16
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	0a1b      	lsrs	r3, r3, #8
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8007a1a:	4b0b      	ldr	r3, [pc, #44]	; (8007a48 <WIZCHIP_WRITE_BUF+0xbc>)
 8007a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1e:	f107 0210 	add.w	r2, r7, #16
 8007a22:	2103      	movs	r1, #3
 8007a24:	4610      	mov	r0, r2
 8007a26:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8007a28:	4b07      	ldr	r3, [pc, #28]	; (8007a48 <WIZCHIP_WRITE_BUF+0xbc>)
 8007a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2c:	88fa      	ldrh	r2, [r7, #6]
 8007a2e:	4611      	mov	r1, r2
 8007a30:	68b8      	ldr	r0, [r7, #8]
 8007a32:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8007a34:	4b04      	ldr	r3, [pc, #16]	; (8007a48 <WIZCHIP_WRITE_BUF+0xbc>)
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8007a3a:	4b03      	ldr	r3, [pc, #12]	; (8007a48 <WIZCHIP_WRITE_BUF+0xbc>)
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	4798      	blx	r3
}
 8007a40:	bf00      	nop
 8007a42:	3718      	adds	r7, #24
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	20000084 	.word	0x20000084

08007a4c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8007a4c:	b590      	push	{r4, r7, lr}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	4603      	mov	r3, r0
 8007a54:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8007a56:	2300      	movs	r3, #0
 8007a58:	81fb      	strh	r3, [r7, #14]
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8007a5e:	79fb      	ldrb	r3, [r7, #7]
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	3301      	adds	r3, #1
 8007a64:	00db      	lsls	r3, r3, #3
 8007a66:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7ff fe94 	bl	8007798 <WIZCHIP_READ>
 8007a70:	4603      	mov	r3, r0
 8007a72:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8007a74:	89bb      	ldrh	r3, [r7, #12]
 8007a76:	021b      	lsls	r3, r3, #8
 8007a78:	b29c      	uxth	r4, r3
 8007a7a:	79fb      	ldrb	r3, [r7, #7]
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	3301      	adds	r3, #1
 8007a80:	00db      	lsls	r3, r3, #3
 8007a82:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7ff fe86 	bl	8007798 <WIZCHIP_READ>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	4423      	add	r3, r4
 8007a92:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8007a94:	89bb      	ldrh	r3, [r7, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d01a      	beq.n	8007ad0 <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8007a9a:	79fb      	ldrb	r3, [r7, #7]
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	00db      	lsls	r3, r3, #3
 8007aa2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7ff fe76 	bl	8007798 <WIZCHIP_READ>
 8007aac:	4603      	mov	r3, r0
 8007aae:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8007ab0:	89fb      	ldrh	r3, [r7, #14]
 8007ab2:	021b      	lsls	r3, r3, #8
 8007ab4:	b29c      	uxth	r4, r3
 8007ab6:	79fb      	ldrb	r3, [r7, #7]
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	3301      	adds	r3, #1
 8007abc:	00db      	lsls	r3, r3, #3
 8007abe:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7ff fe68 	bl	8007798 <WIZCHIP_READ>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	4423      	add	r3, r4
 8007ace:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8007ad0:	89fa      	ldrh	r2, [r7, #14]
 8007ad2:	89bb      	ldrh	r3, [r7, #12]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d1c2      	bne.n	8007a5e <getSn_TX_FSR+0x12>
   return val;
 8007ad8:	89fb      	ldrh	r3, [r7, #14]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3714      	adds	r7, #20
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd90      	pop	{r4, r7, pc}

08007ae2 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8007ae2:	b590      	push	{r4, r7, lr}
 8007ae4:	b085      	sub	sp, #20
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	4603      	mov	r3, r0
 8007aea:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8007aec:	2300      	movs	r3, #0
 8007aee:	81fb      	strh	r3, [r7, #14]
 8007af0:	2300      	movs	r3, #0
 8007af2:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8007af4:	79fb      	ldrb	r3, [r7, #7]
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	3301      	adds	r3, #1
 8007afa:	00db      	lsls	r3, r3, #3
 8007afc:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7ff fe49 	bl	8007798 <WIZCHIP_READ>
 8007b06:	4603      	mov	r3, r0
 8007b08:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8007b0a:	89bb      	ldrh	r3, [r7, #12]
 8007b0c:	021b      	lsls	r3, r3, #8
 8007b0e:	b29c      	uxth	r4, r3
 8007b10:	79fb      	ldrb	r3, [r7, #7]
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	3301      	adds	r3, #1
 8007b16:	00db      	lsls	r3, r3, #3
 8007b18:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7ff fe3b 	bl	8007798 <WIZCHIP_READ>
 8007b22:	4603      	mov	r3, r0
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	4423      	add	r3, r4
 8007b28:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8007b2a:	89bb      	ldrh	r3, [r7, #12]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d01a      	beq.n	8007b66 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	3301      	adds	r3, #1
 8007b36:	00db      	lsls	r3, r3, #3
 8007b38:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7ff fe2b 	bl	8007798 <WIZCHIP_READ>
 8007b42:	4603      	mov	r3, r0
 8007b44:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8007b46:	89fb      	ldrh	r3, [r7, #14]
 8007b48:	021b      	lsls	r3, r3, #8
 8007b4a:	b29c      	uxth	r4, r3
 8007b4c:	79fb      	ldrb	r3, [r7, #7]
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	3301      	adds	r3, #1
 8007b52:	00db      	lsls	r3, r3, #3
 8007b54:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7ff fe1d 	bl	8007798 <WIZCHIP_READ>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	4423      	add	r3, r4
 8007b64:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8007b66:	89fa      	ldrh	r2, [r7, #14]
 8007b68:	89bb      	ldrh	r3, [r7, #12]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d1c2      	bne.n	8007af4 <getSn_RX_RSR+0x12>
   return val;
 8007b6e:	89fb      	ldrh	r3, [r7, #14]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3714      	adds	r7, #20
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd90      	pop	{r4, r7, pc}

08007b78 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8007b78:	b590      	push	{r4, r7, lr}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	4603      	mov	r3, r0
 8007b80:	6039      	str	r1, [r7, #0]
 8007b82:	71fb      	strb	r3, [r7, #7]
 8007b84:	4613      	mov	r3, r2
 8007b86:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8007b90:	88bb      	ldrh	r3, [r7, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d048      	beq.n	8007c28 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8007b96:	79fb      	ldrb	r3, [r7, #7]
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	00db      	lsls	r3, r3, #3
 8007b9e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7ff fdf8 	bl	8007798 <WIZCHIP_READ>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	021b      	lsls	r3, r3, #8
 8007bae:	b29c      	uxth	r4, r3
 8007bb0:	79fb      	ldrb	r3, [r7, #7]
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	00db      	lsls	r3, r3, #3
 8007bb8:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7ff fdeb 	bl	8007798 <WIZCHIP_READ>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	4423      	add	r3, r4
 8007bc8:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8007bca:	89fb      	ldrh	r3, [r7, #14]
 8007bcc:	021b      	lsls	r3, r3, #8
 8007bce:	79fa      	ldrb	r2, [r7, #7]
 8007bd0:	0092      	lsls	r2, r2, #2
 8007bd2:	3202      	adds	r2, #2
 8007bd4:	00d2      	lsls	r2, r2, #3
 8007bd6:	4413      	add	r3, r2
 8007bd8:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8007bda:	88bb      	ldrh	r3, [r7, #4]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	68b8      	ldr	r0, [r7, #8]
 8007be2:	f7ff fed3 	bl	800798c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8007be6:	89fa      	ldrh	r2, [r7, #14]
 8007be8:	88bb      	ldrh	r3, [r7, #4]
 8007bea:	4413      	add	r3, r2
 8007bec:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8007bee:	79fb      	ldrb	r3, [r7, #7]
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	00db      	lsls	r3, r3, #3
 8007bf6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	89fb      	ldrh	r3, [r7, #14]
 8007bfe:	0a1b      	lsrs	r3, r3, #8
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	4619      	mov	r1, r3
 8007c06:	4610      	mov	r0, r2
 8007c08:	f7ff fe12 	bl	8007830 <WIZCHIP_WRITE>
 8007c0c:	79fb      	ldrb	r3, [r7, #7]
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	3301      	adds	r3, #1
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8007c18:	461a      	mov	r2, r3
 8007c1a:	89fb      	ldrh	r3, [r7, #14]
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	4619      	mov	r1, r3
 8007c20:	4610      	mov	r0, r2
 8007c22:	f7ff fe05 	bl	8007830 <WIZCHIP_WRITE>
 8007c26:	e000      	b.n	8007c2a <wiz_send_data+0xb2>
   if(len == 0)  return;
 8007c28:	bf00      	nop
}
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd90      	pop	{r4, r7, pc}

08007c30 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8007c30:	b590      	push	{r4, r7, lr}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	4603      	mov	r3, r0
 8007c38:	6039      	str	r1, [r7, #0]
 8007c3a:	71fb      	strb	r3, [r7, #7]
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8007c40:	2300      	movs	r3, #0
 8007c42:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8007c44:	2300      	movs	r3, #0
 8007c46:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8007c48:	88bb      	ldrh	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d048      	beq.n	8007ce0 <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8007c4e:	79fb      	ldrb	r3, [r7, #7]
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	3301      	adds	r3, #1
 8007c54:	00db      	lsls	r3, r3, #3
 8007c56:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7ff fd9c 	bl	8007798 <WIZCHIP_READ>
 8007c60:	4603      	mov	r3, r0
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	021b      	lsls	r3, r3, #8
 8007c66:	b29c      	uxth	r4, r3
 8007c68:	79fb      	ldrb	r3, [r7, #7]
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	00db      	lsls	r3, r3, #3
 8007c70:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7ff fd8f 	bl	8007798 <WIZCHIP_READ>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	4423      	add	r3, r4
 8007c80:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8007c82:	89fb      	ldrh	r3, [r7, #14]
 8007c84:	021b      	lsls	r3, r3, #8
 8007c86:	79fa      	ldrb	r2, [r7, #7]
 8007c88:	0092      	lsls	r2, r2, #2
 8007c8a:	3203      	adds	r2, #3
 8007c8c:	00d2      	lsls	r2, r2, #3
 8007c8e:	4413      	add	r3, r2
 8007c90:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8007c92:	88bb      	ldrh	r3, [r7, #4]
 8007c94:	461a      	mov	r2, r3
 8007c96:	6839      	ldr	r1, [r7, #0]
 8007c98:	68b8      	ldr	r0, [r7, #8]
 8007c9a:	f7ff fe17 	bl	80078cc <WIZCHIP_READ_BUF>
   ptr += len;
 8007c9e:	89fa      	ldrh	r2, [r7, #14]
 8007ca0:	88bb      	ldrh	r3, [r7, #4]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8007ca6:	79fb      	ldrb	r3, [r7, #7]
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	3301      	adds	r3, #1
 8007cac:	00db      	lsls	r3, r3, #3
 8007cae:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	89fb      	ldrh	r3, [r7, #14]
 8007cb6:	0a1b      	lsrs	r3, r3, #8
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	4610      	mov	r0, r2
 8007cc0:	f7ff fdb6 	bl	8007830 <WIZCHIP_WRITE>
 8007cc4:	79fb      	ldrb	r3, [r7, #7]
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	3301      	adds	r3, #1
 8007cca:	00db      	lsls	r3, r3, #3
 8007ccc:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	89fb      	ldrh	r3, [r7, #14]
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	4610      	mov	r0, r2
 8007cda:	f7ff fda9 	bl	8007830 <WIZCHIP_WRITE>
 8007cde:	e000      	b.n	8007ce2 <wiz_recv_data+0xb2>
   if(len == 0) return;
 8007ce0:	bf00      	nop
}
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd90      	pop	{r4, r7, pc}

08007ce8 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8007ce8:	b590      	push	{r4, r7, lr}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	4603      	mov	r3, r0
 8007cf0:	460a      	mov	r2, r1
 8007cf2:	71fb      	strb	r3, [r7, #7]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8007cfc:	79fb      	ldrb	r3, [r7, #7]
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	3301      	adds	r3, #1
 8007d02:	00db      	lsls	r3, r3, #3
 8007d04:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7ff fd45 	bl	8007798 <WIZCHIP_READ>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	b29b      	uxth	r3, r3
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	b29c      	uxth	r4, r3
 8007d16:	79fb      	ldrb	r3, [r7, #7]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	00db      	lsls	r3, r3, #3
 8007d1e:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7ff fd38 	bl	8007798 <WIZCHIP_READ>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	4423      	add	r3, r4
 8007d2e:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8007d30:	89fa      	ldrh	r2, [r7, #14]
 8007d32:	88bb      	ldrh	r3, [r7, #4]
 8007d34:	4413      	add	r3, r2
 8007d36:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8007d38:	79fb      	ldrb	r3, [r7, #7]
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	00db      	lsls	r3, r3, #3
 8007d40:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8007d44:	461a      	mov	r2, r3
 8007d46:	89fb      	ldrh	r3, [r7, #14]
 8007d48:	0a1b      	lsrs	r3, r3, #8
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	4619      	mov	r1, r3
 8007d50:	4610      	mov	r0, r2
 8007d52:	f7ff fd6d 	bl	8007830 <WIZCHIP_WRITE>
 8007d56:	79fb      	ldrb	r3, [r7, #7]
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	00db      	lsls	r3, r3, #3
 8007d5e:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8007d62:	461a      	mov	r2, r3
 8007d64:	89fb      	ldrh	r3, [r7, #14]
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	4619      	mov	r1, r3
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	f7ff fd60 	bl	8007830 <WIZCHIP_WRITE>
}
 8007d70:	bf00      	nop
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd90      	pop	{r4, r7, pc}

08007d78 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8007d78:	b590      	push	{r4, r7, lr}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	4604      	mov	r4, r0
 8007d80:	4608      	mov	r0, r1
 8007d82:	4611      	mov	r1, r2
 8007d84:	461a      	mov	r2, r3
 8007d86:	4623      	mov	r3, r4
 8007d88:	71fb      	strb	r3, [r7, #7]
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	71bb      	strb	r3, [r7, #6]
 8007d8e:	460b      	mov	r3, r1
 8007d90:	80bb      	strh	r3, [r7, #4]
 8007d92:	4613      	mov	r3, r2
 8007d94:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8007d96:	79fb      	ldrb	r3, [r7, #7]
 8007d98:	2b08      	cmp	r3, #8
 8007d9a:	d902      	bls.n	8007da2 <socket+0x2a>
 8007d9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007da0:	e0f2      	b.n	8007f88 <socket+0x210>
	switch(protocol)
 8007da2:	79bb      	ldrb	r3, [r7, #6]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d005      	beq.n	8007db4 <socket+0x3c>
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	dd11      	ble.n	8007dd0 <socket+0x58>
 8007dac:	3b02      	subs	r3, #2
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d80e      	bhi.n	8007dd0 <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8007db2:	e011      	b.n	8007dd8 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8007db4:	f107 030c 	add.w	r3, r7, #12
 8007db8:	2204      	movs	r2, #4
 8007dba:	4619      	mov	r1, r3
 8007dbc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8007dc0:	f7ff fd84 	bl	80078cc <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d105      	bne.n	8007dd6 <socket+0x5e>
 8007dca:	f06f 0302 	mvn.w	r3, #2
 8007dce:	e0db      	b.n	8007f88 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8007dd0:	f06f 0304 	mvn.w	r3, #4
 8007dd4:	e0d8      	b.n	8007f88 <socket+0x210>
	    break;
 8007dd6:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8007dd8:	78fb      	ldrb	r3, [r7, #3]
 8007dda:	f003 0304 	and.w	r3, r3, #4
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d002      	beq.n	8007de8 <socket+0x70>
 8007de2:	f06f 0305 	mvn.w	r3, #5
 8007de6:	e0cf      	b.n	8007f88 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8007de8:	78fb      	ldrb	r3, [r7, #3]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d025      	beq.n	8007e3a <socket+0xc2>
	{
   	switch(protocol)
 8007dee:	79bb      	ldrb	r3, [r7, #6]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d002      	beq.n	8007dfa <socket+0x82>
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	d008      	beq.n	8007e0a <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8007df8:	e024      	b.n	8007e44 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8007dfa:	78fb      	ldrb	r3, [r7, #3]
 8007dfc:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d11c      	bne.n	8007e3e <socket+0xc6>
 8007e04:	f06f 0305 	mvn.w	r3, #5
 8007e08:	e0be      	b.n	8007f88 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8007e0a:	78fb      	ldrb	r3, [r7, #3]
 8007e0c:	f003 0320 	and.w	r3, r3, #32
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d006      	beq.n	8007e22 <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8007e14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	db02      	blt.n	8007e22 <socket+0xaa>
 8007e1c:	f06f 0305 	mvn.w	r3, #5
 8007e20:	e0b2      	b.n	8007f88 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8007e22:	78fb      	ldrb	r3, [r7, #3]
 8007e24:	f003 0310 	and.w	r3, r3, #16
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00a      	beq.n	8007e42 <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8007e2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	db06      	blt.n	8007e42 <socket+0xca>
 8007e34:	f06f 0305 	mvn.w	r3, #5
 8007e38:	e0a6      	b.n	8007f88 <socket+0x210>
   	}
   }
 8007e3a:	bf00      	nop
 8007e3c:	e002      	b.n	8007e44 <socket+0xcc>
   	      break;
 8007e3e:	bf00      	nop
 8007e40:	e000      	b.n	8007e44 <socket+0xcc>
   	      break;
 8007e42:	bf00      	nop
	close(sn);
 8007e44:	79fb      	ldrb	r3, [r7, #7]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 f8ac 	bl	8007fa4 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8007e4c:	79fb      	ldrb	r3, [r7, #7]
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	3301      	adds	r3, #1
 8007e52:	00db      	lsls	r3, r3, #3
 8007e54:	4618      	mov	r0, r3
 8007e56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e5a:	f023 030f 	bic.w	r3, r3, #15
 8007e5e:	b25a      	sxtb	r2, r3
 8007e60:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	b25b      	sxtb	r3, r3
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	f7ff fce0 	bl	8007830 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8007e70:	88bb      	ldrh	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d110      	bne.n	8007e98 <socket+0x120>
	{
	   port = sock_any_port++;
 8007e76:	4b46      	ldr	r3, [pc, #280]	; (8007f90 <socket+0x218>)
 8007e78:	881b      	ldrh	r3, [r3, #0]
 8007e7a:	1c5a      	adds	r2, r3, #1
 8007e7c:	b291      	uxth	r1, r2
 8007e7e:	4a44      	ldr	r2, [pc, #272]	; (8007f90 <socket+0x218>)
 8007e80:	8011      	strh	r1, [r2, #0]
 8007e82:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8007e84:	4b42      	ldr	r3, [pc, #264]	; (8007f90 <socket+0x218>)
 8007e86:	881b      	ldrh	r3, [r3, #0]
 8007e88:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d103      	bne.n	8007e98 <socket+0x120>
 8007e90:	4b3f      	ldr	r3, [pc, #252]	; (8007f90 <socket+0x218>)
 8007e92:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8007e96:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8007e98:	79fb      	ldrb	r3, [r7, #7]
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	00db      	lsls	r3, r3, #3
 8007ea0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	88bb      	ldrh	r3, [r7, #4]
 8007ea8:	0a1b      	lsrs	r3, r3, #8
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	4619      	mov	r1, r3
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	f7ff fcbd 	bl	8007830 <WIZCHIP_WRITE>
 8007eb6:	79fb      	ldrb	r3, [r7, #7]
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	3301      	adds	r3, #1
 8007ebc:	00db      	lsls	r3, r3, #3
 8007ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	88bb      	ldrh	r3, [r7, #4]
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	4619      	mov	r1, r3
 8007eca:	4610      	mov	r0, r2
 8007ecc:	f7ff fcb0 	bl	8007830 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8007ed0:	79fb      	ldrb	r3, [r7, #7]
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	00db      	lsls	r3, r3, #3
 8007ed8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007edc:	2101      	movs	r1, #1
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7ff fca6 	bl	8007830 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8007ee4:	bf00      	nop
 8007ee6:	79fb      	ldrb	r3, [r7, #7]
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	3301      	adds	r3, #1
 8007eec:	00db      	lsls	r3, r3, #3
 8007eee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7ff fc50 	bl	8007798 <WIZCHIP_READ>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1f3      	bne.n	8007ee6 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8007efe:	79fb      	ldrb	r3, [r7, #7]
 8007f00:	2201      	movs	r2, #1
 8007f02:	fa02 f303 	lsl.w	r3, r2, r3
 8007f06:	b21b      	sxth	r3, r3
 8007f08:	43db      	mvns	r3, r3
 8007f0a:	b21a      	sxth	r2, r3
 8007f0c:	4b21      	ldr	r3, [pc, #132]	; (8007f94 <socket+0x21c>)
 8007f0e:	881b      	ldrh	r3, [r3, #0]
 8007f10:	b21b      	sxth	r3, r3
 8007f12:	4013      	ands	r3, r2
 8007f14:	b21b      	sxth	r3, r3
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	4b1e      	ldr	r3, [pc, #120]	; (8007f94 <socket+0x21c>)
 8007f1a:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8007f1c:	78fb      	ldrb	r3, [r7, #3]
 8007f1e:	f003 0201 	and.w	r2, r3, #1
 8007f22:	79fb      	ldrb	r3, [r7, #7]
 8007f24:	fa02 f303 	lsl.w	r3, r2, r3
 8007f28:	b21a      	sxth	r2, r3
 8007f2a:	4b1a      	ldr	r3, [pc, #104]	; (8007f94 <socket+0x21c>)
 8007f2c:	881b      	ldrh	r3, [r3, #0]
 8007f2e:	b21b      	sxth	r3, r3
 8007f30:	4313      	orrs	r3, r2
 8007f32:	b21b      	sxth	r3, r3
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	4b17      	ldr	r3, [pc, #92]	; (8007f94 <socket+0x21c>)
 8007f38:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8007f3a:	79fb      	ldrb	r3, [r7, #7]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f42:	b21b      	sxth	r3, r3
 8007f44:	43db      	mvns	r3, r3
 8007f46:	b21a      	sxth	r2, r3
 8007f48:	4b13      	ldr	r3, [pc, #76]	; (8007f98 <socket+0x220>)
 8007f4a:	881b      	ldrh	r3, [r3, #0]
 8007f4c:	b21b      	sxth	r3, r3
 8007f4e:	4013      	ands	r3, r2
 8007f50:	b21b      	sxth	r3, r3
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	4b10      	ldr	r3, [pc, #64]	; (8007f98 <socket+0x220>)
 8007f56:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8007f58:	79fb      	ldrb	r3, [r7, #7]
 8007f5a:	4a10      	ldr	r2, [pc, #64]	; (8007f9c <socket+0x224>)
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8007f62:	79fb      	ldrb	r3, [r7, #7]
 8007f64:	4a0e      	ldr	r2, [pc, #56]	; (8007fa0 <socket+0x228>)
 8007f66:	2100      	movs	r1, #0
 8007f68:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8007f6a:	bf00      	nop
 8007f6c:	79fb      	ldrb	r3, [r7, #7]
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	3301      	adds	r3, #1
 8007f72:	00db      	lsls	r3, r3, #3
 8007f74:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7ff fc0d 	bl	8007798 <WIZCHIP_READ>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d0f3      	beq.n	8007f6c <socket+0x1f4>
   return (int8_t)sn;
 8007f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd90      	pop	{r4, r7, pc}
 8007f90:	20000082 	.word	0x20000082
 8007f94:	20000f98 	.word	0x20000f98
 8007f98:	20000f9a 	.word	0x20000f9a
 8007f9c:	20000f9c 	.word	0x20000f9c
 8007fa0:	20000fac 	.word	0x20000fac

08007fa4 <close>:

int8_t close(uint8_t sn)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	4603      	mov	r3, r0
 8007fac:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8007fae:	79fb      	ldrb	r3, [r7, #7]
 8007fb0:	2b08      	cmp	r3, #8
 8007fb2:	d902      	bls.n	8007fba <close+0x16>
 8007fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fb8:	e055      	b.n	8008066 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8007fba:	79fb      	ldrb	r3, [r7, #7]
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	00db      	lsls	r3, r3, #3
 8007fc2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007fc6:	2110      	movs	r1, #16
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7ff fc31 	bl	8007830 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8007fce:	bf00      	nop
 8007fd0:	79fb      	ldrb	r3, [r7, #7]
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	00db      	lsls	r3, r3, #3
 8007fd8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7ff fbdb 	bl	8007798 <WIZCHIP_READ>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d1f3      	bne.n	8007fd0 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8007fe8:	79fb      	ldrb	r3, [r7, #7]
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	3301      	adds	r3, #1
 8007fee:	00db      	lsls	r3, r3, #3
 8007ff0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007ff4:	211f      	movs	r1, #31
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f7ff fc1a 	bl	8007830 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8007ffc:	79fb      	ldrb	r3, [r7, #7]
 8007ffe:	2201      	movs	r2, #1
 8008000:	fa02 f303 	lsl.w	r3, r2, r3
 8008004:	b21b      	sxth	r3, r3
 8008006:	43db      	mvns	r3, r3
 8008008:	b21a      	sxth	r2, r3
 800800a:	4b19      	ldr	r3, [pc, #100]	; (8008070 <close+0xcc>)
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	b21b      	sxth	r3, r3
 8008010:	4013      	ands	r3, r2
 8008012:	b21b      	sxth	r3, r3
 8008014:	b29a      	uxth	r2, r3
 8008016:	4b16      	ldr	r3, [pc, #88]	; (8008070 <close+0xcc>)
 8008018:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 800801a:	79fb      	ldrb	r3, [r7, #7]
 800801c:	2201      	movs	r2, #1
 800801e:	fa02 f303 	lsl.w	r3, r2, r3
 8008022:	b21b      	sxth	r3, r3
 8008024:	43db      	mvns	r3, r3
 8008026:	b21a      	sxth	r2, r3
 8008028:	4b12      	ldr	r3, [pc, #72]	; (8008074 <close+0xd0>)
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	b21b      	sxth	r3, r3
 800802e:	4013      	ands	r3, r2
 8008030:	b21b      	sxth	r3, r3
 8008032:	b29a      	uxth	r2, r3
 8008034:	4b0f      	ldr	r3, [pc, #60]	; (8008074 <close+0xd0>)
 8008036:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8008038:	79fb      	ldrb	r3, [r7, #7]
 800803a:	4a0f      	ldr	r2, [pc, #60]	; (8008078 <close+0xd4>)
 800803c:	2100      	movs	r1, #0
 800803e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8008042:	79fb      	ldrb	r3, [r7, #7]
 8008044:	4a0d      	ldr	r2, [pc, #52]	; (800807c <close+0xd8>)
 8008046:	2100      	movs	r1, #0
 8008048:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800804a:	bf00      	nop
 800804c:	79fb      	ldrb	r3, [r7, #7]
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	3301      	adds	r3, #1
 8008052:	00db      	lsls	r3, r3, #3
 8008054:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008058:	4618      	mov	r0, r3
 800805a:	f7ff fb9d 	bl	8007798 <WIZCHIP_READ>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d1f3      	bne.n	800804c <close+0xa8>
	return SOCK_OK;
 8008064:	2301      	movs	r3, #1
}
 8008066:	4618      	mov	r0, r3
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20000f98 	.word	0x20000f98
 8008074:	20000f9a 	.word	0x20000f9a
 8008078:	20000f9c 	.word	0x20000f9c
 800807c:	20000fac 	.word	0x20000fac

08008080 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	60b9      	str	r1, [r7, #8]
 8008088:	607b      	str	r3, [r7, #4]
 800808a:	4603      	mov	r3, r0
 800808c:	73fb      	strb	r3, [r7, #15]
 800808e:	4613      	mov	r3, r2
 8008090:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8008092:	2300      	movs	r3, #0
 8008094:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8008096:	2300      	movs	r3, #0
 8008098:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800809a:	7bfb      	ldrb	r3, [r7, #15]
 800809c:	2b08      	cmp	r3, #8
 800809e:	d902      	bls.n	80080a6 <sendto+0x26>
 80080a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080a4:	e11b      	b.n	80082de <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 80080a6:	7bfb      	ldrb	r3, [r7, #15]
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	3301      	adds	r3, #1
 80080ac:	00db      	lsls	r3, r3, #3
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7ff fb72 	bl	8007798 <WIZCHIP_READ>
 80080b4:	4603      	mov	r3, r0
 80080b6:	f003 030f 	and.w	r3, r3, #15
 80080ba:	3b02      	subs	r3, #2
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d902      	bls.n	80080c6 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 80080c0:	f06f 0304 	mvn.w	r3, #4
 80080c4:	e10b      	b.n	80082de <sendto+0x25e>
         break;
 80080c6:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80080c8:	89bb      	ldrh	r3, [r7, #12]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d102      	bne.n	80080d4 <sendto+0x54>
 80080ce:	f06f 030d 	mvn.w	r3, #13
 80080d2:	e104      	b.n	80082de <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	021b      	lsls	r3, r3, #8
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	3201      	adds	r2, #1
 80080e2:	7812      	ldrb	r2, [r2, #0]
 80080e4:	4413      	add	r3, r2
 80080e6:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	021b      	lsls	r3, r3, #8
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	3202      	adds	r2, #2
 80080f0:	7812      	ldrb	r2, [r2, #0]
 80080f2:	4413      	add	r3, r2
 80080f4:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	021b      	lsls	r3, r3, #8
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	3203      	adds	r2, #3
 80080fe:	7812      	ldrb	r2, [r2, #0]
 8008100:	4413      	add	r3, r2
 8008102:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d10e      	bne.n	8008128 <sendto+0xa8>
 800810a:	7bfb      	ldrb	r3, [r7, #15]
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	3301      	adds	r3, #1
 8008110:	00db      	lsls	r3, r3, #3
 8008112:	4618      	mov	r0, r3
 8008114:	f7ff fb40 	bl	8007798 <WIZCHIP_READ>
 8008118:	4603      	mov	r3, r0
 800811a:	f003 0304 	and.w	r3, r3, #4
 800811e:	2b04      	cmp	r3, #4
 8008120:	d002      	beq.n	8008128 <sendto+0xa8>
 8008122:	f06f 030b 	mvn.w	r3, #11
 8008126:	e0da      	b.n	80082de <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8008128:	8c3b      	ldrh	r3, [r7, #32]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10e      	bne.n	800814c <sendto+0xcc>
 800812e:	7bfb      	ldrb	r3, [r7, #15]
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	3301      	adds	r3, #1
 8008134:	00db      	lsls	r3, r3, #3
 8008136:	4618      	mov	r0, r3
 8008138:	f7ff fb2e 	bl	8007798 <WIZCHIP_READ>
 800813c:	4603      	mov	r3, r0
 800813e:	f003 0304 	and.w	r3, r3, #4
 8008142:	2b04      	cmp	r3, #4
 8008144:	d002      	beq.n	800814c <sendto+0xcc>
 8008146:	f06f 030a 	mvn.w	r3, #10
 800814a:	e0c8      	b.n	80082de <sendto+0x25e>
   tmp = getSn_SR(sn);
 800814c:	7bfb      	ldrb	r3, [r7, #15]
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	3301      	adds	r3, #1
 8008152:	00db      	lsls	r3, r3, #3
 8008154:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008158:	4618      	mov	r0, r3
 800815a:	f7ff fb1d 	bl	8007798 <WIZCHIP_READ>
 800815e:	4603      	mov	r3, r0
 8008160:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8008162:	7dfb      	ldrb	r3, [r7, #23]
 8008164:	2b42      	cmp	r3, #66	; 0x42
 8008166:	d008      	beq.n	800817a <sendto+0xfa>
 8008168:	7dfb      	ldrb	r3, [r7, #23]
 800816a:	2b22      	cmp	r3, #34	; 0x22
 800816c:	d005      	beq.n	800817a <sendto+0xfa>
 800816e:	7dfb      	ldrb	r3, [r7, #23]
 8008170:	2b32      	cmp	r3, #50	; 0x32
 8008172:	d002      	beq.n	800817a <sendto+0xfa>
 8008174:	f06f 0306 	mvn.w	r3, #6
 8008178:	e0b1      	b.n	80082de <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 800817a:	7bfb      	ldrb	r3, [r7, #15]
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	3301      	adds	r3, #1
 8008180:	00db      	lsls	r3, r3, #3
 8008182:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8008186:	2204      	movs	r2, #4
 8008188:	6879      	ldr	r1, [r7, #4]
 800818a:	4618      	mov	r0, r3
 800818c:	f7ff fbfe 	bl	800798c <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8008190:	7bfb      	ldrb	r3, [r7, #15]
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	3301      	adds	r3, #1
 8008196:	00db      	lsls	r3, r3, #3
 8008198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800819c:	461a      	mov	r2, r3
 800819e:	8c3b      	ldrh	r3, [r7, #32]
 80081a0:	0a1b      	lsrs	r3, r3, #8
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	4619      	mov	r1, r3
 80081a8:	4610      	mov	r0, r2
 80081aa:	f7ff fb41 	bl	8007830 <WIZCHIP_WRITE>
 80081ae:	7bfb      	ldrb	r3, [r7, #15]
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	3301      	adds	r3, #1
 80081b4:	00db      	lsls	r3, r3, #3
 80081b6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80081ba:	461a      	mov	r2, r3
 80081bc:	8c3b      	ldrh	r3, [r7, #32]
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	4619      	mov	r1, r3
 80081c2:	4610      	mov	r0, r2
 80081c4:	f7ff fb34 	bl	8007830 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	3301      	adds	r3, #1
 80081ce:	00db      	lsls	r3, r3, #3
 80081d0:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7ff fadf 	bl	8007798 <WIZCHIP_READ>
 80081da:	4603      	mov	r3, r0
 80081dc:	b29b      	uxth	r3, r3
 80081de:	029b      	lsls	r3, r3, #10
 80081e0:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80081e2:	89ba      	ldrh	r2, [r7, #12]
 80081e4:	8abb      	ldrh	r3, [r7, #20]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d901      	bls.n	80081ee <sendto+0x16e>
 80081ea:	8abb      	ldrh	r3, [r7, #20]
 80081ec:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80081ee:	7bfb      	ldrb	r3, [r7, #15]
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7ff fc2b 	bl	8007a4c <getSn_TX_FSR>
 80081f6:	4603      	mov	r3, r0
 80081f8:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80081fa:	7bfb      	ldrb	r3, [r7, #15]
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	3301      	adds	r3, #1
 8008200:	00db      	lsls	r3, r3, #3
 8008202:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008206:	4618      	mov	r0, r3
 8008208:	f7ff fac6 	bl	8007798 <WIZCHIP_READ>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d102      	bne.n	8008218 <sendto+0x198>
 8008212:	f06f 0303 	mvn.w	r3, #3
 8008216:	e062      	b.n	80082de <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8008218:	4b33      	ldr	r3, [pc, #204]	; (80082e8 <sendto+0x268>)
 800821a:	881b      	ldrh	r3, [r3, #0]
 800821c:	461a      	mov	r2, r3
 800821e:	7bfb      	ldrb	r3, [r7, #15]
 8008220:	fa42 f303 	asr.w	r3, r2, r3
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	2b00      	cmp	r3, #0
 800822a:	d005      	beq.n	8008238 <sendto+0x1b8>
 800822c:	89ba      	ldrh	r2, [r7, #12]
 800822e:	8abb      	ldrh	r3, [r7, #20]
 8008230:	429a      	cmp	r2, r3
 8008232:	d901      	bls.n	8008238 <sendto+0x1b8>
 8008234:	2300      	movs	r3, #0
 8008236:	e052      	b.n	80082de <sendto+0x25e>
      if(len <= freesize) break;
 8008238:	89ba      	ldrh	r2, [r7, #12]
 800823a:	8abb      	ldrh	r3, [r7, #20]
 800823c:	429a      	cmp	r2, r3
 800823e:	d900      	bls.n	8008242 <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 8008240:	e7d5      	b.n	80081ee <sendto+0x16e>
      if(len <= freesize) break;
 8008242:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 8008244:	89ba      	ldrh	r2, [r7, #12]
 8008246:	7bfb      	ldrb	r3, [r7, #15]
 8008248:	68b9      	ldr	r1, [r7, #8]
 800824a:	4618      	mov	r0, r3
 800824c:	f7ff fc94 	bl	8007b78 <wiz_send_data>
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   

   setSn_CR(sn,Sn_CR_SEND);
 8008250:	7bfb      	ldrb	r3, [r7, #15]
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	3301      	adds	r3, #1
 8008256:	00db      	lsls	r3, r3, #3
 8008258:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800825c:	2120      	movs	r1, #32
 800825e:	4618      	mov	r0, r3
 8008260:	f7ff fae6 	bl	8007830 <WIZCHIP_WRITE>


	/* wait to process the command... */
	while(getSn_CR(sn));
 8008264:	bf00      	nop
 8008266:	7bfb      	ldrb	r3, [r7, #15]
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	3301      	adds	r3, #1
 800826c:	00db      	lsls	r3, r3, #3
 800826e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008272:	4618      	mov	r0, r3
 8008274:	f7ff fa90 	bl	8007798 <WIZCHIP_READ>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1f3      	bne.n	8008266 <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 800827e:	7bfb      	ldrb	r3, [r7, #15]
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	3301      	adds	r3, #1
 8008284:	00db      	lsls	r3, r3, #3
 8008286:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800828a:	4618      	mov	r0, r3
 800828c:	f7ff fa84 	bl	8007798 <WIZCHIP_READ>
 8008290:	4603      	mov	r3, r0
 8008292:	f003 031f 	and.w	r3, r3, #31
 8008296:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8008298:	7dfb      	ldrb	r3, [r7, #23]
 800829a:	f003 0310 	and.w	r3, r3, #16
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00c      	beq.n	80082bc <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	3301      	adds	r3, #1
 80082a8:	00db      	lsls	r3, r3, #3
 80082aa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80082ae:	2110      	movs	r1, #16
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7ff fabd 	bl	8007830 <WIZCHIP_WRITE>
         break;
 80082b6:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80082b8:	89bb      	ldrh	r3, [r7, #12]
 80082ba:	e010      	b.n	80082de <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 80082bc:	7dfb      	ldrb	r3, [r7, #23]
 80082be:	f003 0308 	and.w	r3, r3, #8
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d0db      	beq.n	800827e <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80082c6:	7bfb      	ldrb	r3, [r7, #15]
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	3301      	adds	r3, #1
 80082cc:	00db      	lsls	r3, r3, #3
 80082ce:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80082d2:	2108      	movs	r1, #8
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7ff faab 	bl	8007830 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80082da:	f06f 030c 	mvn.w	r3, #12
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3718      	adds	r7, #24
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	20000f98 	.word	0x20000f98

080082ec <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b088      	sub	sp, #32
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60b9      	str	r1, [r7, #8]
 80082f4:	607b      	str	r3, [r7, #4]
 80082f6:	4603      	mov	r3, r0
 80082f8:	73fb      	strb	r3, [r7, #15]
 80082fa:	4613      	mov	r3, r2
 80082fc:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 80082fe:	2300      	movs	r3, #0
 8008300:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8008302:	7bfb      	ldrb	r3, [r7, #15]
 8008304:	2b08      	cmp	r3, #8
 8008306:	d902      	bls.n	800830e <recvfrom+0x22>
 8008308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800830c:	e1d4      	b.n	80086b8 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 800830e:	7bfb      	ldrb	r3, [r7, #15]
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	3301      	adds	r3, #1
 8008314:	00db      	lsls	r3, r3, #3
 8008316:	4618      	mov	r0, r3
 8008318:	f7ff fa3e 	bl	8007798 <WIZCHIP_READ>
 800831c:	4603      	mov	r3, r0
 800831e:	777b      	strb	r3, [r7, #29]
 8008320:	7f7b      	ldrb	r3, [r7, #29]
 8008322:	f003 030f 	and.w	r3, r3, #15
 8008326:	3b02      	subs	r3, #2
 8008328:	2b02      	cmp	r3, #2
 800832a:	d902      	bls.n	8008332 <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 800832c:	f06f 0304 	mvn.w	r3, #4
 8008330:	e1c2      	b.n	80086b8 <recvfrom+0x3cc>
         break;
 8008332:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8008334:	89bb      	ldrh	r3, [r7, #12]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d102      	bne.n	8008340 <recvfrom+0x54>
 800833a:	f06f 030d 	mvn.w	r3, #13
 800833e:	e1bb      	b.n	80086b8 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 8008340:	7bfb      	ldrb	r3, [r7, #15]
 8008342:	4a88      	ldr	r2, [pc, #544]	; (8008564 <recvfrom+0x278>)
 8008344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d128      	bne.n	800839e <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 800834c:	7bfb      	ldrb	r3, [r7, #15]
 800834e:	4618      	mov	r0, r3
 8008350:	f7ff fbc7 	bl	8007ae2 <getSn_RX_RSR>
 8008354:	4603      	mov	r3, r0
 8008356:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8008358:	7bfb      	ldrb	r3, [r7, #15]
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	3301      	adds	r3, #1
 800835e:	00db      	lsls	r3, r3, #3
 8008360:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008364:	4618      	mov	r0, r3
 8008366:	f7ff fa17 	bl	8007798 <WIZCHIP_READ>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d102      	bne.n	8008376 <recvfrom+0x8a>
 8008370:	f06f 0303 	mvn.w	r3, #3
 8008374:	e1a0      	b.n	80086b8 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8008376:	4b7c      	ldr	r3, [pc, #496]	; (8008568 <recvfrom+0x27c>)
 8008378:	881b      	ldrh	r3, [r3, #0]
 800837a:	461a      	mov	r2, r3
 800837c:	7bfb      	ldrb	r3, [r7, #15]
 800837e:	fa42 f303 	asr.w	r3, r2, r3
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	2b00      	cmp	r3, #0
 8008388:	d004      	beq.n	8008394 <recvfrom+0xa8>
 800838a:	8bfb      	ldrh	r3, [r7, #30]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <recvfrom+0xa8>
 8008390:	2300      	movs	r3, #0
 8008392:	e191      	b.n	80086b8 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8008394:	8bfb      	ldrh	r3, [r7, #30]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d100      	bne.n	800839c <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 800839a:	e7d7      	b.n	800834c <recvfrom+0x60>
         if(pack_len != 0) break;
 800839c:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 800839e:	7f7b      	ldrb	r3, [r7, #29]
 80083a0:	f003 0307 	and.w	r3, r3, #7
 80083a4:	2b04      	cmp	r3, #4
 80083a6:	d079      	beq.n	800849c <recvfrom+0x1b0>
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	f300 8142 	bgt.w	8008632 <recvfrom+0x346>
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d003      	beq.n	80083ba <recvfrom+0xce>
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	f000 80dc 	beq.w	8008570 <recvfrom+0x284>
 80083b8:	e13b      	b.n	8008632 <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
 80083bc:	4a69      	ldr	r2, [pc, #420]	; (8008564 <recvfrom+0x278>)
 80083be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d152      	bne.n	800846c <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 80083c6:	f107 0114 	add.w	r1, r7, #20
 80083ca:	7bfb      	ldrb	r3, [r7, #15]
 80083cc:	2208      	movs	r2, #8
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7ff fc2e 	bl	8007c30 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80083d4:	7bfb      	ldrb	r3, [r7, #15]
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	3301      	adds	r3, #1
 80083da:	00db      	lsls	r3, r3, #3
 80083dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80083e0:	2140      	movs	r1, #64	; 0x40
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7ff fa24 	bl	8007830 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80083e8:	bf00      	nop
 80083ea:	7bfb      	ldrb	r3, [r7, #15]
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	3301      	adds	r3, #1
 80083f0:	00db      	lsls	r3, r3, #3
 80083f2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7ff f9ce 	bl	8007798 <WIZCHIP_READ>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1f3      	bne.n	80083ea <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8008402:	7d3a      	ldrb	r2, [r7, #20]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	3301      	adds	r3, #1
 800840c:	7d7a      	ldrb	r2, [r7, #21]
 800840e:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	3302      	adds	r3, #2
 8008414:	7dba      	ldrb	r2, [r7, #22]
 8008416:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	3303      	adds	r3, #3
 800841c:	7dfa      	ldrb	r2, [r7, #23]
 800841e:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8008420:	7e3b      	ldrb	r3, [r7, #24]
 8008422:	b29a      	uxth	r2, r3
 8008424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008426:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 8008428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	021b      	lsls	r3, r3, #8
 800842e:	b29a      	uxth	r2, r3
 8008430:	7e7b      	ldrb	r3, [r7, #25]
 8008432:	b29b      	uxth	r3, r3
 8008434:	4413      	add	r3, r2
 8008436:	b29a      	uxth	r2, r3
 8008438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843a:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 800843c:	7eba      	ldrb	r2, [r7, #26]
 800843e:	7bfb      	ldrb	r3, [r7, #15]
 8008440:	b291      	uxth	r1, r2
 8008442:	4a48      	ldr	r2, [pc, #288]	; (8008564 <recvfrom+0x278>)
 8008444:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8008448:	7bfb      	ldrb	r3, [r7, #15]
 800844a:	4a46      	ldr	r2, [pc, #280]	; (8008564 <recvfrom+0x278>)
 800844c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008450:	021b      	lsls	r3, r3, #8
 8008452:	b299      	uxth	r1, r3
 8008454:	7efb      	ldrb	r3, [r7, #27]
 8008456:	b29a      	uxth	r2, r3
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	440a      	add	r2, r1
 800845c:	b291      	uxth	r1, r2
 800845e:	4a41      	ldr	r2, [pc, #260]	; (8008564 <recvfrom+0x278>)
 8008460:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8008464:	7bfb      	ldrb	r3, [r7, #15]
 8008466:	4a41      	ldr	r2, [pc, #260]	; (800856c <recvfrom+0x280>)
 8008468:	2180      	movs	r1, #128	; 0x80
 800846a:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	4a3d      	ldr	r2, [pc, #244]	; (8008564 <recvfrom+0x278>)
 8008470:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008474:	89ba      	ldrh	r2, [r7, #12]
 8008476:	429a      	cmp	r2, r3
 8008478:	d202      	bcs.n	8008480 <recvfrom+0x194>
 800847a:	89bb      	ldrh	r3, [r7, #12]
 800847c:	83fb      	strh	r3, [r7, #30]
 800847e:	e004      	b.n	800848a <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 8008480:	7bfb      	ldrb	r3, [r7, #15]
 8008482:	4a38      	ldr	r2, [pc, #224]	; (8008564 <recvfrom+0x278>)
 8008484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008488:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 800848a:	8bfb      	ldrh	r3, [r7, #30]
 800848c:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800848e:	8bfa      	ldrh	r2, [r7, #30]
 8008490:	7bfb      	ldrb	r3, [r7, #15]
 8008492:	68b9      	ldr	r1, [r7, #8]
 8008494:	4618      	mov	r0, r3
 8008496:	f7ff fbcb 	bl	8007c30 <wiz_recv_data>
			break;
 800849a:	e0d6      	b.n	800864a <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 800849c:	7bfb      	ldrb	r3, [r7, #15]
 800849e:	4a31      	ldr	r2, [pc, #196]	; (8008564 <recvfrom+0x278>)
 80084a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d146      	bne.n	8008536 <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 80084a8:	f107 0114 	add.w	r1, r7, #20
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
 80084ae:	2202      	movs	r2, #2
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7ff fbbd 	bl	8007c30 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	3301      	adds	r3, #1
 80084bc:	00db      	lsls	r3, r3, #3
 80084be:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80084c2:	2140      	movs	r1, #64	; 0x40
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7ff f9b3 	bl	8007830 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80084ca:	bf00      	nop
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	3301      	adds	r3, #1
 80084d2:	00db      	lsls	r3, r3, #3
 80084d4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80084d8:	4618      	mov	r0, r3
 80084da:	f7ff f95d 	bl	8007798 <WIZCHIP_READ>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1f3      	bne.n	80084cc <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 80084e4:	7d3a      	ldrb	r2, [r7, #20]
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	b291      	uxth	r1, r2
 80084ea:	4a1e      	ldr	r2, [pc, #120]	; (8008564 <recvfrom+0x278>)
 80084ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 80084f0:	7bfb      	ldrb	r3, [r7, #15]
 80084f2:	4a1c      	ldr	r2, [pc, #112]	; (8008564 <recvfrom+0x278>)
 80084f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084f8:	021b      	lsls	r3, r3, #8
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	7d7b      	ldrb	r3, [r7, #21]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	4413      	add	r3, r2
 8008502:	b29a      	uxth	r2, r3
 8008504:	7bfb      	ldrb	r3, [r7, #15]
 8008506:	3a02      	subs	r2, #2
 8008508:	b291      	uxth	r1, r2
 800850a:	4a16      	ldr	r2, [pc, #88]	; (8008564 <recvfrom+0x278>)
 800850c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 8008510:	7bfb      	ldrb	r3, [r7, #15]
 8008512:	4a14      	ldr	r2, [pc, #80]	; (8008564 <recvfrom+0x278>)
 8008514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008518:	f240 52ea 	movw	r2, #1514	; 0x5ea
 800851c:	4293      	cmp	r3, r2
 800851e:	d906      	bls.n	800852e <recvfrom+0x242>
   			{
   			   close(sn);
 8008520:	7bfb      	ldrb	r3, [r7, #15]
 8008522:	4618      	mov	r0, r3
 8008524:	f7ff fd3e 	bl	8007fa4 <close>
   			   return SOCKFATAL_PACKLEN;
 8008528:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 800852c:	e0c4      	b.n	80086b8 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 800852e:	7bfb      	ldrb	r3, [r7, #15]
 8008530:	4a0e      	ldr	r2, [pc, #56]	; (800856c <recvfrom+0x280>)
 8008532:	2180      	movs	r1, #128	; 0x80
 8008534:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8008536:	7bfb      	ldrb	r3, [r7, #15]
 8008538:	4a0a      	ldr	r2, [pc, #40]	; (8008564 <recvfrom+0x278>)
 800853a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800853e:	89ba      	ldrh	r2, [r7, #12]
 8008540:	429a      	cmp	r2, r3
 8008542:	d202      	bcs.n	800854a <recvfrom+0x25e>
 8008544:	89bb      	ldrh	r3, [r7, #12]
 8008546:	83fb      	strh	r3, [r7, #30]
 8008548:	e004      	b.n	8008554 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 800854a:	7bfb      	ldrb	r3, [r7, #15]
 800854c:	4a05      	ldr	r2, [pc, #20]	; (8008564 <recvfrom+0x278>)
 800854e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008552:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8008554:	8bfa      	ldrh	r2, [r7, #30]
 8008556:	7bfb      	ldrb	r3, [r7, #15]
 8008558:	68b9      	ldr	r1, [r7, #8]
 800855a:	4618      	mov	r0, r3
 800855c:	f7ff fb68 	bl	8007c30 <wiz_recv_data>
		   break;
 8008560:	e073      	b.n	800864a <recvfrom+0x35e>
 8008562:	bf00      	nop
 8008564:	20000f9c 	.word	0x20000f9c
 8008568:	20000f98 	.word	0x20000f98
 800856c:	20000fac 	.word	0x20000fac
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8008570:	7bfb      	ldrb	r3, [r7, #15]
 8008572:	4a53      	ldr	r2, [pc, #332]	; (80086c0 <recvfrom+0x3d4>)
 8008574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d144      	bne.n	8008606 <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 800857c:	f107 0114 	add.w	r1, r7, #20
 8008580:	7bfb      	ldrb	r3, [r7, #15]
 8008582:	2206      	movs	r2, #6
 8008584:	4618      	mov	r0, r3
 8008586:	f7ff fb53 	bl	8007c30 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800858a:	7bfb      	ldrb	r3, [r7, #15]
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	3301      	adds	r3, #1
 8008590:	00db      	lsls	r3, r3, #3
 8008592:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008596:	2140      	movs	r1, #64	; 0x40
 8008598:	4618      	mov	r0, r3
 800859a:	f7ff f949 	bl	8007830 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800859e:	bf00      	nop
 80085a0:	7bfb      	ldrb	r3, [r7, #15]
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	3301      	adds	r3, #1
 80085a6:	00db      	lsls	r3, r3, #3
 80085a8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7ff f8f3 	bl	8007798 <WIZCHIP_READ>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1f3      	bne.n	80085a0 <recvfrom+0x2b4>
   			addr[0] = head[0];
 80085b8:	7d3a      	ldrb	r2, [r7, #20]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	3301      	adds	r3, #1
 80085c2:	7d7a      	ldrb	r2, [r7, #21]
 80085c4:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	3302      	adds	r3, #2
 80085ca:	7dba      	ldrb	r2, [r7, #22]
 80085cc:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	3303      	adds	r3, #3
 80085d2:	7dfa      	ldrb	r2, [r7, #23]
 80085d4:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 80085d6:	7e3a      	ldrb	r2, [r7, #24]
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
 80085da:	b291      	uxth	r1, r2
 80085dc:	4a38      	ldr	r2, [pc, #224]	; (80086c0 <recvfrom+0x3d4>)
 80085de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
 80085e4:	4a36      	ldr	r2, [pc, #216]	; (80086c0 <recvfrom+0x3d4>)
 80085e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085ea:	021b      	lsls	r3, r3, #8
 80085ec:	b299      	uxth	r1, r3
 80085ee:	7e7b      	ldrb	r3, [r7, #25]
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
 80085f4:	440a      	add	r2, r1
 80085f6:	b291      	uxth	r1, r2
 80085f8:	4a31      	ldr	r2, [pc, #196]	; (80086c0 <recvfrom+0x3d4>)
 80085fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 80085fe:	7bfb      	ldrb	r3, [r7, #15]
 8008600:	4a30      	ldr	r2, [pc, #192]	; (80086c4 <recvfrom+0x3d8>)
 8008602:	2180      	movs	r1, #128	; 0x80
 8008604:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8008606:	7bfb      	ldrb	r3, [r7, #15]
 8008608:	4a2d      	ldr	r2, [pc, #180]	; (80086c0 <recvfrom+0x3d4>)
 800860a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800860e:	89ba      	ldrh	r2, [r7, #12]
 8008610:	429a      	cmp	r2, r3
 8008612:	d202      	bcs.n	800861a <recvfrom+0x32e>
 8008614:	89bb      	ldrh	r3, [r7, #12]
 8008616:	83fb      	strh	r3, [r7, #30]
 8008618:	e004      	b.n	8008624 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 800861a:	7bfb      	ldrb	r3, [r7, #15]
 800861c:	4a28      	ldr	r2, [pc, #160]	; (80086c0 <recvfrom+0x3d4>)
 800861e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008622:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8008624:	8bfa      	ldrh	r2, [r7, #30]
 8008626:	7bfb      	ldrb	r3, [r7, #15]
 8008628:	68b9      	ldr	r1, [r7, #8]
 800862a:	4618      	mov	r0, r3
 800862c:	f7ff fb00 	bl	8007c30 <wiz_recv_data>
			break;
 8008630:	e00b      	b.n	800864a <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8008632:	8bfa      	ldrh	r2, [r7, #30]
 8008634:	7bfb      	ldrb	r3, [r7, #15]
 8008636:	4611      	mov	r1, r2
 8008638:	4618      	mov	r0, r3
 800863a:	f7ff fb55 	bl	8007ce8 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 800863e:	7bfb      	ldrb	r3, [r7, #15]
 8008640:	491f      	ldr	r1, [pc, #124]	; (80086c0 <recvfrom+0x3d4>)
 8008642:	8bfa      	ldrh	r2, [r7, #30]
 8008644:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8008648:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 800864a:	7bfb      	ldrb	r3, [r7, #15]
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	3301      	adds	r3, #1
 8008650:	00db      	lsls	r3, r3, #3
 8008652:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008656:	2140      	movs	r1, #64	; 0x40
 8008658:	4618      	mov	r0, r3
 800865a:	f7ff f8e9 	bl	8007830 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 800865e:	bf00      	nop
 8008660:	7bfb      	ldrb	r3, [r7, #15]
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	3301      	adds	r3, #1
 8008666:	00db      	lsls	r3, r3, #3
 8008668:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800866c:	4618      	mov	r0, r3
 800866e:	f7ff f893 	bl	8007798 <WIZCHIP_READ>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1f3      	bne.n	8008660 <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8008678:	7bfb      	ldrb	r3, [r7, #15]
 800867a:	4a11      	ldr	r2, [pc, #68]	; (80086c0 <recvfrom+0x3d4>)
 800867c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8008680:	7bfb      	ldrb	r3, [r7, #15]
 8008682:	8bfa      	ldrh	r2, [r7, #30]
 8008684:	1a8a      	subs	r2, r1, r2
 8008686:	b291      	uxth	r1, r2
 8008688:	4a0d      	ldr	r2, [pc, #52]	; (80086c0 <recvfrom+0x3d4>)
 800868a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 800868e:	7bfb      	ldrb	r3, [r7, #15]
 8008690:	4a0b      	ldr	r2, [pc, #44]	; (80086c0 <recvfrom+0x3d4>)
 8008692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d009      	beq.n	80086ae <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 800869a:	7bfb      	ldrb	r3, [r7, #15]
 800869c:	4a09      	ldr	r2, [pc, #36]	; (80086c4 <recvfrom+0x3d8>)
 800869e:	5cd2      	ldrb	r2, [r2, r3]
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
 80086a2:	f042 0201 	orr.w	r2, r2, #1
 80086a6:	b2d1      	uxtb	r1, r2
 80086a8:	4a06      	ldr	r2, [pc, #24]	; (80086c4 <recvfrom+0x3d8>)
 80086aa:	54d1      	strb	r1, [r2, r3]
 80086ac:	e003      	b.n	80086b6 <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
 80086b0:	4a04      	ldr	r2, [pc, #16]	; (80086c4 <recvfrom+0x3d8>)
 80086b2:	2100      	movs	r1, #0
 80086b4:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 80086b6:	8bfb      	ldrh	r3, [r7, #30]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3720      	adds	r7, #32
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	20000f9c 	.word	0x20000f9c
 80086c4:	20000fac 	.word	0x20000fac

080086c8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80086c8:	b480      	push	{r7}
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	bf00      	nop
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80086d6:	b480      	push	{r7}
 80086d8:	af00      	add	r7, sp, #0
 80086da:	bf00      	nop
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80086e4:	b480      	push	{r7}
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	bf00      	nop
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80086f2:	b480      	push	{r7}
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	bf00      	nop
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	b2db      	uxtb	r3, r3
 800870e:	4618      	mov	r0, r3
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800871a:	b480      	push	{r7}
 800871c:	b083      	sub	sp, #12
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	460b      	mov	r3, r1
 8008724:	70fb      	strb	r3, [r7, #3]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	78fa      	ldrb	r2, [r7, #3]
 800872a:	701a      	strb	r2, [r3, #0]
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8008738:	b480      	push	{r7}
 800873a:	af00      	add	r7, sp, #0
 800873c:	2300      	movs	r3, #0
 800873e:	4618      	mov	r0, r3
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	4603      	mov	r3, r0
 8008750:	71fb      	strb	r3, [r7, #7]
 8008752:	bf00      	nop
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	460b      	mov	r3, r1
 8008768:	807b      	strh	r3, [r7, #2]
 800876a:	bf00      	nop
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8008776:	b480      	push	{r7}
 8008778:	b083      	sub	sp, #12
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	460b      	mov	r3, r1
 8008780:	807b      	strh	r3, [r7, #2]
 8008782:	bf00      	nop
 8008784:	370c      	adds	r7, #12
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
	...

08008790 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d002      	beq.n	80087a6 <reg_wizchip_cs_cbfunc+0x16>
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d106      	bne.n	80087b4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80087a6:	4b0a      	ldr	r3, [pc, #40]	; (80087d0 <reg_wizchip_cs_cbfunc+0x40>)
 80087a8:	4a0a      	ldr	r2, [pc, #40]	; (80087d4 <reg_wizchip_cs_cbfunc+0x44>)
 80087aa:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80087ac:	4b08      	ldr	r3, [pc, #32]	; (80087d0 <reg_wizchip_cs_cbfunc+0x40>)
 80087ae:	4a0a      	ldr	r2, [pc, #40]	; (80087d8 <reg_wizchip_cs_cbfunc+0x48>)
 80087b0:	619a      	str	r2, [r3, #24]
 80087b2:	e006      	b.n	80087c2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80087b4:	4a06      	ldr	r2, [pc, #24]	; (80087d0 <reg_wizchip_cs_cbfunc+0x40>)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 80087ba:	4a05      	ldr	r2, [pc, #20]	; (80087d0 <reg_wizchip_cs_cbfunc+0x40>)
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	6193      	str	r3, [r2, #24]
   }
}
 80087c0:	bf00      	nop
 80087c2:	bf00      	nop
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	20000084 	.word	0x20000084
 80087d4:	080086e5 	.word	0x080086e5
 80087d8:	080086f3 	.word	0x080086f3

080087dc <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80087e6:	bf00      	nop
 80087e8:	4b0f      	ldr	r3, [pc, #60]	; (8008828 <reg_wizchip_spi_cbfunc+0x4c>)
 80087ea:	881b      	ldrh	r3, [r3, #0]
 80087ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d0f9      	beq.n	80087e8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d002      	beq.n	8008800 <reg_wizchip_spi_cbfunc+0x24>
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d106      	bne.n	800880e <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8008800:	4b09      	ldr	r3, [pc, #36]	; (8008828 <reg_wizchip_spi_cbfunc+0x4c>)
 8008802:	4a0a      	ldr	r2, [pc, #40]	; (800882c <reg_wizchip_spi_cbfunc+0x50>)
 8008804:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8008806:	4b08      	ldr	r3, [pc, #32]	; (8008828 <reg_wizchip_spi_cbfunc+0x4c>)
 8008808:	4a09      	ldr	r2, [pc, #36]	; (8008830 <reg_wizchip_spi_cbfunc+0x54>)
 800880a:	621a      	str	r2, [r3, #32]
 800880c:	e006      	b.n	800881c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800880e:	4a06      	ldr	r2, [pc, #24]	; (8008828 <reg_wizchip_spi_cbfunc+0x4c>)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8008814:	4a04      	ldr	r2, [pc, #16]	; (8008828 <reg_wizchip_spi_cbfunc+0x4c>)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	6213      	str	r3, [r2, #32]
   }
}
 800881a:	bf00      	nop
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	20000084 	.word	0x20000084
 800882c:	08008739 	.word	0x08008739
 8008830:	08008749 	.word	0x08008749

08008834 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800883e:	bf00      	nop
 8008840:	4b0f      	ldr	r3, [pc, #60]	; (8008880 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8008842:	881b      	ldrh	r3, [r3, #0]
 8008844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008848:	2b00      	cmp	r3, #0
 800884a:	d0f9      	beq.n	8008840 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d002      	beq.n	8008858 <reg_wizchip_spiburst_cbfunc+0x24>
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d106      	bne.n	8008866 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8008858:	4b09      	ldr	r3, [pc, #36]	; (8008880 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800885a:	4a0a      	ldr	r2, [pc, #40]	; (8008884 <reg_wizchip_spiburst_cbfunc+0x50>)
 800885c:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800885e:	4b08      	ldr	r3, [pc, #32]	; (8008880 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8008860:	4a09      	ldr	r2, [pc, #36]	; (8008888 <reg_wizchip_spiburst_cbfunc+0x54>)
 8008862:	629a      	str	r2, [r3, #40]	; 0x28
 8008864:	e006      	b.n	8008874 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8008866:	4a06      	ldr	r2, [pc, #24]	; (8008880 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 800886c:	4a04      	ldr	r2, [pc, #16]	; (8008880 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8008872:	bf00      	nop
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	20000084 	.word	0x20000084
 8008884:	0800875f 	.word	0x0800875f
 8008888:	08008777 	.word	0x08008777

0800888c <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8008892:	1d3b      	adds	r3, r7, #4
 8008894:	2206      	movs	r2, #6
 8008896:	4619      	mov	r1, r3
 8008898:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800889c:	f7ff f816 	bl	80078cc <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80088a0:	f107 0314 	add.w	r3, r7, #20
 80088a4:	2204      	movs	r2, #4
 80088a6:	4619      	mov	r1, r3
 80088a8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80088ac:	f7ff f80e 	bl	80078cc <WIZCHIP_READ_BUF>
 80088b0:	f107 0310 	add.w	r3, r7, #16
 80088b4:	2204      	movs	r2, #4
 80088b6:	4619      	mov	r1, r3
 80088b8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80088bc:	f7ff f806 	bl	80078cc <WIZCHIP_READ_BUF>
 80088c0:	f107 030c 	add.w	r3, r7, #12
 80088c4:	2204      	movs	r2, #4
 80088c6:	4619      	mov	r1, r3
 80088c8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80088cc:	f7fe fffe 	bl	80078cc <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80088d0:	2180      	movs	r1, #128	; 0x80
 80088d2:	2000      	movs	r0, #0
 80088d4:	f7fe ffac 	bl	8007830 <WIZCHIP_WRITE>
   getMR(); // for delay
 80088d8:	2000      	movs	r0, #0
 80088da:	f7fe ff5d 	bl	8007798 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80088de:	1d3b      	adds	r3, r7, #4
 80088e0:	2206      	movs	r2, #6
 80088e2:	4619      	mov	r1, r3
 80088e4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80088e8:	f7ff f850 	bl	800798c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80088ec:	f107 0314 	add.w	r3, r7, #20
 80088f0:	2204      	movs	r2, #4
 80088f2:	4619      	mov	r1, r3
 80088f4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80088f8:	f7ff f848 	bl	800798c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80088fc:	f107 0310 	add.w	r3, r7, #16
 8008900:	2204      	movs	r2, #4
 8008902:	4619      	mov	r1, r3
 8008904:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8008908:	f7ff f840 	bl	800798c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800890c:	f107 030c 	add.w	r3, r7, #12
 8008910:	2204      	movs	r2, #4
 8008912:	4619      	mov	r1, r3
 8008914:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8008918:	f7ff f838 	bl	800798c <WIZCHIP_WRITE_BUF>
}
 800891c:	bf00      	nop
 800891e:	3718      	adds	r7, #24
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800892e:	2300      	movs	r3, #0
 8008930:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8008932:	f7ff ffab 	bl	800888c <wizchip_sw_reset>
   if(txsize)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d03b      	beq.n	80089b4 <wizchip_init+0x90>
   {
      tmp = 0;
 800893c:	2300      	movs	r3, #0
 800893e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008940:	2300      	movs	r3, #0
 8008942:	73fb      	strb	r3, [r7, #15]
 8008944:	e015      	b.n	8008972 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8008946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	4413      	add	r3, r2
 800894e:	781a      	ldrb	r2, [r3, #0]
 8008950:	7bbb      	ldrb	r3, [r7, #14]
 8008952:	4413      	add	r3, r2
 8008954:	b2db      	uxtb	r3, r3
 8008956:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8008958:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800895c:	2b10      	cmp	r3, #16
 800895e:	dd02      	ble.n	8008966 <wizchip_init+0x42>
 8008960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008964:	e066      	b.n	8008a34 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800896a:	b2db      	uxtb	r3, r3
 800896c:	3301      	adds	r3, #1
 800896e:	b2db      	uxtb	r3, r3
 8008970:	73fb      	strb	r3, [r7, #15]
 8008972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008976:	2b07      	cmp	r3, #7
 8008978:	dde5      	ble.n	8008946 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800897a:	2300      	movs	r3, #0
 800897c:	73fb      	strb	r3, [r7, #15]
 800897e:	e015      	b.n	80089ac <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8008980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	3301      	adds	r3, #1
 8008988:	00db      	lsls	r3, r3, #3
 800898a:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800898e:	4618      	mov	r0, r3
 8008990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	4413      	add	r3, r2
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	4619      	mov	r1, r3
 800899c:	f7fe ff48 	bl	8007830 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80089a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	3301      	adds	r3, #1
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	73fb      	strb	r3, [r7, #15]
 80089ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089b0:	2b07      	cmp	r3, #7
 80089b2:	dde5      	ble.n	8008980 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d03b      	beq.n	8008a32 <wizchip_init+0x10e>
   {
      tmp = 0;
 80089ba:	2300      	movs	r3, #0
 80089bc:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80089be:	2300      	movs	r3, #0
 80089c0:	73fb      	strb	r3, [r7, #15]
 80089c2:	e015      	b.n	80089f0 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80089c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	4413      	add	r3, r2
 80089cc:	781a      	ldrb	r2, [r3, #0]
 80089ce:	7bbb      	ldrb	r3, [r7, #14]
 80089d0:	4413      	add	r3, r2
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80089d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089da:	2b10      	cmp	r3, #16
 80089dc:	dd02      	ble.n	80089e4 <wizchip_init+0xc0>
 80089de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089e2:	e027      	b.n	8008a34 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80089e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	3301      	adds	r3, #1
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	73fb      	strb	r3, [r7, #15]
 80089f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089f4:	2b07      	cmp	r3, #7
 80089f6:	dde5      	ble.n	80089c4 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80089f8:	2300      	movs	r3, #0
 80089fa:	73fb      	strb	r3, [r7, #15]
 80089fc:	e015      	b.n	8008a2a <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80089fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	3301      	adds	r3, #1
 8008a06:	00db      	lsls	r3, r3, #3
 8008a08:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a12:	683a      	ldr	r2, [r7, #0]
 8008a14:	4413      	add	r3, r2
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	4619      	mov	r1, r3
 8008a1a:	f7fe ff09 	bl	8007830 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8008a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	3301      	adds	r3, #1
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	73fb      	strb	r3, [r7, #15]
 8008a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a2e:	2b07      	cmp	r3, #7
 8008a30:	dde5      	ble.n	80089fe <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2206      	movs	r2, #6
 8008a48:	4619      	mov	r1, r3
 8008a4a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8008a4e:	f7fe ff9d 	bl	800798c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	330e      	adds	r3, #14
 8008a56:	2204      	movs	r2, #4
 8008a58:	4619      	mov	r1, r3
 8008a5a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008a5e:	f7fe ff95 	bl	800798c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	330a      	adds	r3, #10
 8008a66:	2204      	movs	r2, #4
 8008a68:	4619      	mov	r1, r3
 8008a6a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8008a6e:	f7fe ff8d 	bl	800798c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	3306      	adds	r3, #6
 8008a76:	2204      	movs	r2, #4
 8008a78:	4619      	mov	r1, r3
 8008a7a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8008a7e:	f7fe ff85 	bl	800798c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	7c9a      	ldrb	r2, [r3, #18]
 8008a86:	4b0b      	ldr	r3, [pc, #44]	; (8008ab4 <wizchip_setnetinfo+0x78>)
 8008a88:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	7cda      	ldrb	r2, [r3, #19]
 8008a8e:	4b09      	ldr	r3, [pc, #36]	; (8008ab4 <wizchip_setnetinfo+0x78>)
 8008a90:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	7d1a      	ldrb	r2, [r3, #20]
 8008a96:	4b07      	ldr	r3, [pc, #28]	; (8008ab4 <wizchip_setnetinfo+0x78>)
 8008a98:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	7d5a      	ldrb	r2, [r3, #21]
 8008a9e:	4b05      	ldr	r3, [pc, #20]	; (8008ab4 <wizchip_setnetinfo+0x78>)
 8008aa0:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	7d9a      	ldrb	r2, [r3, #22]
 8008aa6:	4b04      	ldr	r3, [pc, #16]	; (8008ab8 <wizchip_setnetinfo+0x7c>)
 8008aa8:	701a      	strb	r2, [r3, #0]
}
 8008aaa:	bf00      	nop
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	20000fb4 	.word	0x20000fb4
 8008ab8:	20000fb8 	.word	0x20000fb8

08008abc <atoff>:
 8008abc:	2100      	movs	r1, #0
 8008abe:	f001 bc45 	b.w	800a34c <strtof>

08008ac2 <atoi>:
 8008ac2:	220a      	movs	r2, #10
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	f001 bd1f 	b.w	800a508 <strtol>

08008aca <atoll>:
 8008aca:	220a      	movs	r2, #10
 8008acc:	2100      	movs	r1, #0
 8008ace:	f001 bdbb 	b.w	800a648 <strtoll>
	...

08008ad4 <__errno>:
 8008ad4:	4b01      	ldr	r3, [pc, #4]	; (8008adc <__errno+0x8>)
 8008ad6:	6818      	ldr	r0, [r3, #0]
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop
 8008adc:	200000b0 	.word	0x200000b0

08008ae0 <__libc_init_array>:
 8008ae0:	b570      	push	{r4, r5, r6, lr}
 8008ae2:	4d0d      	ldr	r5, [pc, #52]	; (8008b18 <__libc_init_array+0x38>)
 8008ae4:	4c0d      	ldr	r4, [pc, #52]	; (8008b1c <__libc_init_array+0x3c>)
 8008ae6:	1b64      	subs	r4, r4, r5
 8008ae8:	10a4      	asrs	r4, r4, #2
 8008aea:	2600      	movs	r6, #0
 8008aec:	42a6      	cmp	r6, r4
 8008aee:	d109      	bne.n	8008b04 <__libc_init_array+0x24>
 8008af0:	4d0b      	ldr	r5, [pc, #44]	; (8008b20 <__libc_init_array+0x40>)
 8008af2:	4c0c      	ldr	r4, [pc, #48]	; (8008b24 <__libc_init_array+0x44>)
 8008af4:	f004 fb7e 	bl	800d1f4 <_init>
 8008af8:	1b64      	subs	r4, r4, r5
 8008afa:	10a4      	asrs	r4, r4, #2
 8008afc:	2600      	movs	r6, #0
 8008afe:	42a6      	cmp	r6, r4
 8008b00:	d105      	bne.n	8008b0e <__libc_init_array+0x2e>
 8008b02:	bd70      	pop	{r4, r5, r6, pc}
 8008b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b08:	4798      	blx	r3
 8008b0a:	3601      	adds	r6, #1
 8008b0c:	e7ee      	b.n	8008aec <__libc_init_array+0xc>
 8008b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b12:	4798      	blx	r3
 8008b14:	3601      	adds	r6, #1
 8008b16:	e7f2      	b.n	8008afe <__libc_init_array+0x1e>
 8008b18:	0800dd68 	.word	0x0800dd68
 8008b1c:	0800dd68 	.word	0x0800dd68
 8008b20:	0800dd68 	.word	0x0800dd68
 8008b24:	0800dd6c 	.word	0x0800dd6c

08008b28 <malloc>:
 8008b28:	4b02      	ldr	r3, [pc, #8]	; (8008b34 <malloc+0xc>)
 8008b2a:	4601      	mov	r1, r0
 8008b2c:	6818      	ldr	r0, [r3, #0]
 8008b2e:	f000 b885 	b.w	8008c3c <_malloc_r>
 8008b32:	bf00      	nop
 8008b34:	200000b0 	.word	0x200000b0

08008b38 <memcpy>:
 8008b38:	440a      	add	r2, r1
 8008b3a:	4291      	cmp	r1, r2
 8008b3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008b40:	d100      	bne.n	8008b44 <memcpy+0xc>
 8008b42:	4770      	bx	lr
 8008b44:	b510      	push	{r4, lr}
 8008b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b4e:	4291      	cmp	r1, r2
 8008b50:	d1f9      	bne.n	8008b46 <memcpy+0xe>
 8008b52:	bd10      	pop	{r4, pc}

08008b54 <memset>:
 8008b54:	4402      	add	r2, r0
 8008b56:	4603      	mov	r3, r0
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d100      	bne.n	8008b5e <memset+0xa>
 8008b5c:	4770      	bx	lr
 8008b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b62:	e7f9      	b.n	8008b58 <memset+0x4>

08008b64 <_free_r>:
 8008b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b66:	2900      	cmp	r1, #0
 8008b68:	d044      	beq.n	8008bf4 <_free_r+0x90>
 8008b6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b6e:	9001      	str	r0, [sp, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f1a1 0404 	sub.w	r4, r1, #4
 8008b76:	bfb8      	it	lt
 8008b78:	18e4      	addlt	r4, r4, r3
 8008b7a:	f003 fab5 	bl	800c0e8 <__malloc_lock>
 8008b7e:	4a1e      	ldr	r2, [pc, #120]	; (8008bf8 <_free_r+0x94>)
 8008b80:	9801      	ldr	r0, [sp, #4]
 8008b82:	6813      	ldr	r3, [r2, #0]
 8008b84:	b933      	cbnz	r3, 8008b94 <_free_r+0x30>
 8008b86:	6063      	str	r3, [r4, #4]
 8008b88:	6014      	str	r4, [r2, #0]
 8008b8a:	b003      	add	sp, #12
 8008b8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b90:	f003 bab0 	b.w	800c0f4 <__malloc_unlock>
 8008b94:	42a3      	cmp	r3, r4
 8008b96:	d908      	bls.n	8008baa <_free_r+0x46>
 8008b98:	6825      	ldr	r5, [r4, #0]
 8008b9a:	1961      	adds	r1, r4, r5
 8008b9c:	428b      	cmp	r3, r1
 8008b9e:	bf01      	itttt	eq
 8008ba0:	6819      	ldreq	r1, [r3, #0]
 8008ba2:	685b      	ldreq	r3, [r3, #4]
 8008ba4:	1949      	addeq	r1, r1, r5
 8008ba6:	6021      	streq	r1, [r4, #0]
 8008ba8:	e7ed      	b.n	8008b86 <_free_r+0x22>
 8008baa:	461a      	mov	r2, r3
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	b10b      	cbz	r3, 8008bb4 <_free_r+0x50>
 8008bb0:	42a3      	cmp	r3, r4
 8008bb2:	d9fa      	bls.n	8008baa <_free_r+0x46>
 8008bb4:	6811      	ldr	r1, [r2, #0]
 8008bb6:	1855      	adds	r5, r2, r1
 8008bb8:	42a5      	cmp	r5, r4
 8008bba:	d10b      	bne.n	8008bd4 <_free_r+0x70>
 8008bbc:	6824      	ldr	r4, [r4, #0]
 8008bbe:	4421      	add	r1, r4
 8008bc0:	1854      	adds	r4, r2, r1
 8008bc2:	42a3      	cmp	r3, r4
 8008bc4:	6011      	str	r1, [r2, #0]
 8008bc6:	d1e0      	bne.n	8008b8a <_free_r+0x26>
 8008bc8:	681c      	ldr	r4, [r3, #0]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	6053      	str	r3, [r2, #4]
 8008bce:	4421      	add	r1, r4
 8008bd0:	6011      	str	r1, [r2, #0]
 8008bd2:	e7da      	b.n	8008b8a <_free_r+0x26>
 8008bd4:	d902      	bls.n	8008bdc <_free_r+0x78>
 8008bd6:	230c      	movs	r3, #12
 8008bd8:	6003      	str	r3, [r0, #0]
 8008bda:	e7d6      	b.n	8008b8a <_free_r+0x26>
 8008bdc:	6825      	ldr	r5, [r4, #0]
 8008bde:	1961      	adds	r1, r4, r5
 8008be0:	428b      	cmp	r3, r1
 8008be2:	bf04      	itt	eq
 8008be4:	6819      	ldreq	r1, [r3, #0]
 8008be6:	685b      	ldreq	r3, [r3, #4]
 8008be8:	6063      	str	r3, [r4, #4]
 8008bea:	bf04      	itt	eq
 8008bec:	1949      	addeq	r1, r1, r5
 8008bee:	6021      	streq	r1, [r4, #0]
 8008bf0:	6054      	str	r4, [r2, #4]
 8008bf2:	e7ca      	b.n	8008b8a <_free_r+0x26>
 8008bf4:	b003      	add	sp, #12
 8008bf6:	bd30      	pop	{r4, r5, pc}
 8008bf8:	20000fbc 	.word	0x20000fbc

08008bfc <sbrk_aligned>:
 8008bfc:	b570      	push	{r4, r5, r6, lr}
 8008bfe:	4e0e      	ldr	r6, [pc, #56]	; (8008c38 <sbrk_aligned+0x3c>)
 8008c00:	460c      	mov	r4, r1
 8008c02:	6831      	ldr	r1, [r6, #0]
 8008c04:	4605      	mov	r5, r0
 8008c06:	b911      	cbnz	r1, 8008c0e <sbrk_aligned+0x12>
 8008c08:	f000 fcf6 	bl	80095f8 <_sbrk_r>
 8008c0c:	6030      	str	r0, [r6, #0]
 8008c0e:	4621      	mov	r1, r4
 8008c10:	4628      	mov	r0, r5
 8008c12:	f000 fcf1 	bl	80095f8 <_sbrk_r>
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	d00a      	beq.n	8008c30 <sbrk_aligned+0x34>
 8008c1a:	1cc4      	adds	r4, r0, #3
 8008c1c:	f024 0403 	bic.w	r4, r4, #3
 8008c20:	42a0      	cmp	r0, r4
 8008c22:	d007      	beq.n	8008c34 <sbrk_aligned+0x38>
 8008c24:	1a21      	subs	r1, r4, r0
 8008c26:	4628      	mov	r0, r5
 8008c28:	f000 fce6 	bl	80095f8 <_sbrk_r>
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d101      	bne.n	8008c34 <sbrk_aligned+0x38>
 8008c30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008c34:	4620      	mov	r0, r4
 8008c36:	bd70      	pop	{r4, r5, r6, pc}
 8008c38:	20000fc0 	.word	0x20000fc0

08008c3c <_malloc_r>:
 8008c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c40:	1ccd      	adds	r5, r1, #3
 8008c42:	f025 0503 	bic.w	r5, r5, #3
 8008c46:	3508      	adds	r5, #8
 8008c48:	2d0c      	cmp	r5, #12
 8008c4a:	bf38      	it	cc
 8008c4c:	250c      	movcc	r5, #12
 8008c4e:	2d00      	cmp	r5, #0
 8008c50:	4607      	mov	r7, r0
 8008c52:	db01      	blt.n	8008c58 <_malloc_r+0x1c>
 8008c54:	42a9      	cmp	r1, r5
 8008c56:	d905      	bls.n	8008c64 <_malloc_r+0x28>
 8008c58:	230c      	movs	r3, #12
 8008c5a:	603b      	str	r3, [r7, #0]
 8008c5c:	2600      	movs	r6, #0
 8008c5e:	4630      	mov	r0, r6
 8008c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c64:	4e2e      	ldr	r6, [pc, #184]	; (8008d20 <_malloc_r+0xe4>)
 8008c66:	f003 fa3f 	bl	800c0e8 <__malloc_lock>
 8008c6a:	6833      	ldr	r3, [r6, #0]
 8008c6c:	461c      	mov	r4, r3
 8008c6e:	bb34      	cbnz	r4, 8008cbe <_malloc_r+0x82>
 8008c70:	4629      	mov	r1, r5
 8008c72:	4638      	mov	r0, r7
 8008c74:	f7ff ffc2 	bl	8008bfc <sbrk_aligned>
 8008c78:	1c43      	adds	r3, r0, #1
 8008c7a:	4604      	mov	r4, r0
 8008c7c:	d14d      	bne.n	8008d1a <_malloc_r+0xde>
 8008c7e:	6834      	ldr	r4, [r6, #0]
 8008c80:	4626      	mov	r6, r4
 8008c82:	2e00      	cmp	r6, #0
 8008c84:	d140      	bne.n	8008d08 <_malloc_r+0xcc>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	4631      	mov	r1, r6
 8008c8a:	4638      	mov	r0, r7
 8008c8c:	eb04 0803 	add.w	r8, r4, r3
 8008c90:	f000 fcb2 	bl	80095f8 <_sbrk_r>
 8008c94:	4580      	cmp	r8, r0
 8008c96:	d13a      	bne.n	8008d0e <_malloc_r+0xd2>
 8008c98:	6821      	ldr	r1, [r4, #0]
 8008c9a:	3503      	adds	r5, #3
 8008c9c:	1a6d      	subs	r5, r5, r1
 8008c9e:	f025 0503 	bic.w	r5, r5, #3
 8008ca2:	3508      	adds	r5, #8
 8008ca4:	2d0c      	cmp	r5, #12
 8008ca6:	bf38      	it	cc
 8008ca8:	250c      	movcc	r5, #12
 8008caa:	4629      	mov	r1, r5
 8008cac:	4638      	mov	r0, r7
 8008cae:	f7ff ffa5 	bl	8008bfc <sbrk_aligned>
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	d02b      	beq.n	8008d0e <_malloc_r+0xd2>
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	442b      	add	r3, r5
 8008cba:	6023      	str	r3, [r4, #0]
 8008cbc:	e00e      	b.n	8008cdc <_malloc_r+0xa0>
 8008cbe:	6822      	ldr	r2, [r4, #0]
 8008cc0:	1b52      	subs	r2, r2, r5
 8008cc2:	d41e      	bmi.n	8008d02 <_malloc_r+0xc6>
 8008cc4:	2a0b      	cmp	r2, #11
 8008cc6:	d916      	bls.n	8008cf6 <_malloc_r+0xba>
 8008cc8:	1961      	adds	r1, r4, r5
 8008cca:	42a3      	cmp	r3, r4
 8008ccc:	6025      	str	r5, [r4, #0]
 8008cce:	bf18      	it	ne
 8008cd0:	6059      	strne	r1, [r3, #4]
 8008cd2:	6863      	ldr	r3, [r4, #4]
 8008cd4:	bf08      	it	eq
 8008cd6:	6031      	streq	r1, [r6, #0]
 8008cd8:	5162      	str	r2, [r4, r5]
 8008cda:	604b      	str	r3, [r1, #4]
 8008cdc:	4638      	mov	r0, r7
 8008cde:	f104 060b 	add.w	r6, r4, #11
 8008ce2:	f003 fa07 	bl	800c0f4 <__malloc_unlock>
 8008ce6:	f026 0607 	bic.w	r6, r6, #7
 8008cea:	1d23      	adds	r3, r4, #4
 8008cec:	1af2      	subs	r2, r6, r3
 8008cee:	d0b6      	beq.n	8008c5e <_malloc_r+0x22>
 8008cf0:	1b9b      	subs	r3, r3, r6
 8008cf2:	50a3      	str	r3, [r4, r2]
 8008cf4:	e7b3      	b.n	8008c5e <_malloc_r+0x22>
 8008cf6:	6862      	ldr	r2, [r4, #4]
 8008cf8:	42a3      	cmp	r3, r4
 8008cfa:	bf0c      	ite	eq
 8008cfc:	6032      	streq	r2, [r6, #0]
 8008cfe:	605a      	strne	r2, [r3, #4]
 8008d00:	e7ec      	b.n	8008cdc <_malloc_r+0xa0>
 8008d02:	4623      	mov	r3, r4
 8008d04:	6864      	ldr	r4, [r4, #4]
 8008d06:	e7b2      	b.n	8008c6e <_malloc_r+0x32>
 8008d08:	4634      	mov	r4, r6
 8008d0a:	6876      	ldr	r6, [r6, #4]
 8008d0c:	e7b9      	b.n	8008c82 <_malloc_r+0x46>
 8008d0e:	230c      	movs	r3, #12
 8008d10:	603b      	str	r3, [r7, #0]
 8008d12:	4638      	mov	r0, r7
 8008d14:	f003 f9ee 	bl	800c0f4 <__malloc_unlock>
 8008d18:	e7a1      	b.n	8008c5e <_malloc_r+0x22>
 8008d1a:	6025      	str	r5, [r4, #0]
 8008d1c:	e7de      	b.n	8008cdc <_malloc_r+0xa0>
 8008d1e:	bf00      	nop
 8008d20:	20000fbc 	.word	0x20000fbc

08008d24 <__cvt>:
 8008d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d28:	ec55 4b10 	vmov	r4, r5, d0
 8008d2c:	2d00      	cmp	r5, #0
 8008d2e:	460e      	mov	r6, r1
 8008d30:	4619      	mov	r1, r3
 8008d32:	462b      	mov	r3, r5
 8008d34:	bfbb      	ittet	lt
 8008d36:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008d3a:	461d      	movlt	r5, r3
 8008d3c:	2300      	movge	r3, #0
 8008d3e:	232d      	movlt	r3, #45	; 0x2d
 8008d40:	700b      	strb	r3, [r1, #0]
 8008d42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d44:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008d48:	4691      	mov	r9, r2
 8008d4a:	f023 0820 	bic.w	r8, r3, #32
 8008d4e:	bfbc      	itt	lt
 8008d50:	4622      	movlt	r2, r4
 8008d52:	4614      	movlt	r4, r2
 8008d54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d58:	d005      	beq.n	8008d66 <__cvt+0x42>
 8008d5a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008d5e:	d100      	bne.n	8008d62 <__cvt+0x3e>
 8008d60:	3601      	adds	r6, #1
 8008d62:	2102      	movs	r1, #2
 8008d64:	e000      	b.n	8008d68 <__cvt+0x44>
 8008d66:	2103      	movs	r1, #3
 8008d68:	ab03      	add	r3, sp, #12
 8008d6a:	9301      	str	r3, [sp, #4]
 8008d6c:	ab02      	add	r3, sp, #8
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	ec45 4b10 	vmov	d0, r4, r5
 8008d74:	4653      	mov	r3, sl
 8008d76:	4632      	mov	r2, r6
 8008d78:	f001 fdfe 	bl	800a978 <_dtoa_r>
 8008d7c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d80:	4607      	mov	r7, r0
 8008d82:	d102      	bne.n	8008d8a <__cvt+0x66>
 8008d84:	f019 0f01 	tst.w	r9, #1
 8008d88:	d022      	beq.n	8008dd0 <__cvt+0xac>
 8008d8a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d8e:	eb07 0906 	add.w	r9, r7, r6
 8008d92:	d110      	bne.n	8008db6 <__cvt+0x92>
 8008d94:	783b      	ldrb	r3, [r7, #0]
 8008d96:	2b30      	cmp	r3, #48	; 0x30
 8008d98:	d10a      	bne.n	8008db0 <__cvt+0x8c>
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	4620      	mov	r0, r4
 8008da0:	4629      	mov	r1, r5
 8008da2:	f7f7 fe99 	bl	8000ad8 <__aeabi_dcmpeq>
 8008da6:	b918      	cbnz	r0, 8008db0 <__cvt+0x8c>
 8008da8:	f1c6 0601 	rsb	r6, r6, #1
 8008dac:	f8ca 6000 	str.w	r6, [sl]
 8008db0:	f8da 3000 	ldr.w	r3, [sl]
 8008db4:	4499      	add	r9, r3
 8008db6:	2200      	movs	r2, #0
 8008db8:	2300      	movs	r3, #0
 8008dba:	4620      	mov	r0, r4
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	f7f7 fe8b 	bl	8000ad8 <__aeabi_dcmpeq>
 8008dc2:	b108      	cbz	r0, 8008dc8 <__cvt+0xa4>
 8008dc4:	f8cd 900c 	str.w	r9, [sp, #12]
 8008dc8:	2230      	movs	r2, #48	; 0x30
 8008dca:	9b03      	ldr	r3, [sp, #12]
 8008dcc:	454b      	cmp	r3, r9
 8008dce:	d307      	bcc.n	8008de0 <__cvt+0xbc>
 8008dd0:	9b03      	ldr	r3, [sp, #12]
 8008dd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008dd4:	1bdb      	subs	r3, r3, r7
 8008dd6:	4638      	mov	r0, r7
 8008dd8:	6013      	str	r3, [r2, #0]
 8008dda:	b004      	add	sp, #16
 8008ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008de0:	1c59      	adds	r1, r3, #1
 8008de2:	9103      	str	r1, [sp, #12]
 8008de4:	701a      	strb	r2, [r3, #0]
 8008de6:	e7f0      	b.n	8008dca <__cvt+0xa6>

08008de8 <__exponent>:
 8008de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008dea:	4603      	mov	r3, r0
 8008dec:	2900      	cmp	r1, #0
 8008dee:	bfb8      	it	lt
 8008df0:	4249      	neglt	r1, r1
 8008df2:	f803 2b02 	strb.w	r2, [r3], #2
 8008df6:	bfb4      	ite	lt
 8008df8:	222d      	movlt	r2, #45	; 0x2d
 8008dfa:	222b      	movge	r2, #43	; 0x2b
 8008dfc:	2909      	cmp	r1, #9
 8008dfe:	7042      	strb	r2, [r0, #1]
 8008e00:	dd2a      	ble.n	8008e58 <__exponent+0x70>
 8008e02:	f10d 0407 	add.w	r4, sp, #7
 8008e06:	46a4      	mov	ip, r4
 8008e08:	270a      	movs	r7, #10
 8008e0a:	46a6      	mov	lr, r4
 8008e0c:	460a      	mov	r2, r1
 8008e0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8008e12:	fb07 1516 	mls	r5, r7, r6, r1
 8008e16:	3530      	adds	r5, #48	; 0x30
 8008e18:	2a63      	cmp	r2, #99	; 0x63
 8008e1a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008e1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008e22:	4631      	mov	r1, r6
 8008e24:	dcf1      	bgt.n	8008e0a <__exponent+0x22>
 8008e26:	3130      	adds	r1, #48	; 0x30
 8008e28:	f1ae 0502 	sub.w	r5, lr, #2
 8008e2c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008e30:	1c44      	adds	r4, r0, #1
 8008e32:	4629      	mov	r1, r5
 8008e34:	4561      	cmp	r1, ip
 8008e36:	d30a      	bcc.n	8008e4e <__exponent+0x66>
 8008e38:	f10d 0209 	add.w	r2, sp, #9
 8008e3c:	eba2 020e 	sub.w	r2, r2, lr
 8008e40:	4565      	cmp	r5, ip
 8008e42:	bf88      	it	hi
 8008e44:	2200      	movhi	r2, #0
 8008e46:	4413      	add	r3, r2
 8008e48:	1a18      	subs	r0, r3, r0
 8008e4a:	b003      	add	sp, #12
 8008e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e52:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008e56:	e7ed      	b.n	8008e34 <__exponent+0x4c>
 8008e58:	2330      	movs	r3, #48	; 0x30
 8008e5a:	3130      	adds	r1, #48	; 0x30
 8008e5c:	7083      	strb	r3, [r0, #2]
 8008e5e:	70c1      	strb	r1, [r0, #3]
 8008e60:	1d03      	adds	r3, r0, #4
 8008e62:	e7f1      	b.n	8008e48 <__exponent+0x60>

08008e64 <_printf_float>:
 8008e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e68:	ed2d 8b02 	vpush	{d8}
 8008e6c:	b08d      	sub	sp, #52	; 0x34
 8008e6e:	460c      	mov	r4, r1
 8008e70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008e74:	4616      	mov	r6, r2
 8008e76:	461f      	mov	r7, r3
 8008e78:	4605      	mov	r5, r0
 8008e7a:	f003 f8a3 	bl	800bfc4 <_localeconv_r>
 8008e7e:	f8d0 a000 	ldr.w	sl, [r0]
 8008e82:	4650      	mov	r0, sl
 8008e84:	f7f7 f9ac 	bl	80001e0 <strlen>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	930a      	str	r3, [sp, #40]	; 0x28
 8008e8c:	6823      	ldr	r3, [r4, #0]
 8008e8e:	9305      	str	r3, [sp, #20]
 8008e90:	f8d8 3000 	ldr.w	r3, [r8]
 8008e94:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008e98:	3307      	adds	r3, #7
 8008e9a:	f023 0307 	bic.w	r3, r3, #7
 8008e9e:	f103 0208 	add.w	r2, r3, #8
 8008ea2:	f8c8 2000 	str.w	r2, [r8]
 8008ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eaa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008eae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008eb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008eb6:	9307      	str	r3, [sp, #28]
 8008eb8:	f8cd 8018 	str.w	r8, [sp, #24]
 8008ebc:	ee08 0a10 	vmov	s16, r0
 8008ec0:	4b9f      	ldr	r3, [pc, #636]	; (8009140 <_printf_float+0x2dc>)
 8008ec2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ec6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008eca:	f7f7 fe37 	bl	8000b3c <__aeabi_dcmpun>
 8008ece:	bb88      	cbnz	r0, 8008f34 <_printf_float+0xd0>
 8008ed0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ed4:	4b9a      	ldr	r3, [pc, #616]	; (8009140 <_printf_float+0x2dc>)
 8008ed6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008eda:	f7f7 fe11 	bl	8000b00 <__aeabi_dcmple>
 8008ede:	bb48      	cbnz	r0, 8008f34 <_printf_float+0xd0>
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	4640      	mov	r0, r8
 8008ee6:	4649      	mov	r1, r9
 8008ee8:	f7f7 fe00 	bl	8000aec <__aeabi_dcmplt>
 8008eec:	b110      	cbz	r0, 8008ef4 <_printf_float+0x90>
 8008eee:	232d      	movs	r3, #45	; 0x2d
 8008ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ef4:	4b93      	ldr	r3, [pc, #588]	; (8009144 <_printf_float+0x2e0>)
 8008ef6:	4894      	ldr	r0, [pc, #592]	; (8009148 <_printf_float+0x2e4>)
 8008ef8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008efc:	bf94      	ite	ls
 8008efe:	4698      	movls	r8, r3
 8008f00:	4680      	movhi	r8, r0
 8008f02:	2303      	movs	r3, #3
 8008f04:	6123      	str	r3, [r4, #16]
 8008f06:	9b05      	ldr	r3, [sp, #20]
 8008f08:	f023 0204 	bic.w	r2, r3, #4
 8008f0c:	6022      	str	r2, [r4, #0]
 8008f0e:	f04f 0900 	mov.w	r9, #0
 8008f12:	9700      	str	r7, [sp, #0]
 8008f14:	4633      	mov	r3, r6
 8008f16:	aa0b      	add	r2, sp, #44	; 0x2c
 8008f18:	4621      	mov	r1, r4
 8008f1a:	4628      	mov	r0, r5
 8008f1c:	f000 f9d8 	bl	80092d0 <_printf_common>
 8008f20:	3001      	adds	r0, #1
 8008f22:	f040 8090 	bne.w	8009046 <_printf_float+0x1e2>
 8008f26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f2a:	b00d      	add	sp, #52	; 0x34
 8008f2c:	ecbd 8b02 	vpop	{d8}
 8008f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f34:	4642      	mov	r2, r8
 8008f36:	464b      	mov	r3, r9
 8008f38:	4640      	mov	r0, r8
 8008f3a:	4649      	mov	r1, r9
 8008f3c:	f7f7 fdfe 	bl	8000b3c <__aeabi_dcmpun>
 8008f40:	b140      	cbz	r0, 8008f54 <_printf_float+0xf0>
 8008f42:	464b      	mov	r3, r9
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	bfbc      	itt	lt
 8008f48:	232d      	movlt	r3, #45	; 0x2d
 8008f4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008f4e:	487f      	ldr	r0, [pc, #508]	; (800914c <_printf_float+0x2e8>)
 8008f50:	4b7f      	ldr	r3, [pc, #508]	; (8009150 <_printf_float+0x2ec>)
 8008f52:	e7d1      	b.n	8008ef8 <_printf_float+0x94>
 8008f54:	6863      	ldr	r3, [r4, #4]
 8008f56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008f5a:	9206      	str	r2, [sp, #24]
 8008f5c:	1c5a      	adds	r2, r3, #1
 8008f5e:	d13f      	bne.n	8008fe0 <_printf_float+0x17c>
 8008f60:	2306      	movs	r3, #6
 8008f62:	6063      	str	r3, [r4, #4]
 8008f64:	9b05      	ldr	r3, [sp, #20]
 8008f66:	6861      	ldr	r1, [r4, #4]
 8008f68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	9303      	str	r3, [sp, #12]
 8008f70:	ab0a      	add	r3, sp, #40	; 0x28
 8008f72:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008f76:	ab09      	add	r3, sp, #36	; 0x24
 8008f78:	ec49 8b10 	vmov	d0, r8, r9
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	6022      	str	r2, [r4, #0]
 8008f80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f84:	4628      	mov	r0, r5
 8008f86:	f7ff fecd 	bl	8008d24 <__cvt>
 8008f8a:	9b06      	ldr	r3, [sp, #24]
 8008f8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f8e:	2b47      	cmp	r3, #71	; 0x47
 8008f90:	4680      	mov	r8, r0
 8008f92:	d108      	bne.n	8008fa6 <_printf_float+0x142>
 8008f94:	1cc8      	adds	r0, r1, #3
 8008f96:	db02      	blt.n	8008f9e <_printf_float+0x13a>
 8008f98:	6863      	ldr	r3, [r4, #4]
 8008f9a:	4299      	cmp	r1, r3
 8008f9c:	dd41      	ble.n	8009022 <_printf_float+0x1be>
 8008f9e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008fa2:	fa5f fb8b 	uxtb.w	fp, fp
 8008fa6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008faa:	d820      	bhi.n	8008fee <_printf_float+0x18a>
 8008fac:	3901      	subs	r1, #1
 8008fae:	465a      	mov	r2, fp
 8008fb0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008fb4:	9109      	str	r1, [sp, #36]	; 0x24
 8008fb6:	f7ff ff17 	bl	8008de8 <__exponent>
 8008fba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fbc:	1813      	adds	r3, r2, r0
 8008fbe:	2a01      	cmp	r2, #1
 8008fc0:	4681      	mov	r9, r0
 8008fc2:	6123      	str	r3, [r4, #16]
 8008fc4:	dc02      	bgt.n	8008fcc <_printf_float+0x168>
 8008fc6:	6822      	ldr	r2, [r4, #0]
 8008fc8:	07d2      	lsls	r2, r2, #31
 8008fca:	d501      	bpl.n	8008fd0 <_printf_float+0x16c>
 8008fcc:	3301      	adds	r3, #1
 8008fce:	6123      	str	r3, [r4, #16]
 8008fd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d09c      	beq.n	8008f12 <_printf_float+0xae>
 8008fd8:	232d      	movs	r3, #45	; 0x2d
 8008fda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fde:	e798      	b.n	8008f12 <_printf_float+0xae>
 8008fe0:	9a06      	ldr	r2, [sp, #24]
 8008fe2:	2a47      	cmp	r2, #71	; 0x47
 8008fe4:	d1be      	bne.n	8008f64 <_printf_float+0x100>
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1bc      	bne.n	8008f64 <_printf_float+0x100>
 8008fea:	2301      	movs	r3, #1
 8008fec:	e7b9      	b.n	8008f62 <_printf_float+0xfe>
 8008fee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008ff2:	d118      	bne.n	8009026 <_printf_float+0x1c2>
 8008ff4:	2900      	cmp	r1, #0
 8008ff6:	6863      	ldr	r3, [r4, #4]
 8008ff8:	dd0b      	ble.n	8009012 <_printf_float+0x1ae>
 8008ffa:	6121      	str	r1, [r4, #16]
 8008ffc:	b913      	cbnz	r3, 8009004 <_printf_float+0x1a0>
 8008ffe:	6822      	ldr	r2, [r4, #0]
 8009000:	07d0      	lsls	r0, r2, #31
 8009002:	d502      	bpl.n	800900a <_printf_float+0x1a6>
 8009004:	3301      	adds	r3, #1
 8009006:	440b      	add	r3, r1
 8009008:	6123      	str	r3, [r4, #16]
 800900a:	65a1      	str	r1, [r4, #88]	; 0x58
 800900c:	f04f 0900 	mov.w	r9, #0
 8009010:	e7de      	b.n	8008fd0 <_printf_float+0x16c>
 8009012:	b913      	cbnz	r3, 800901a <_printf_float+0x1b6>
 8009014:	6822      	ldr	r2, [r4, #0]
 8009016:	07d2      	lsls	r2, r2, #31
 8009018:	d501      	bpl.n	800901e <_printf_float+0x1ba>
 800901a:	3302      	adds	r3, #2
 800901c:	e7f4      	b.n	8009008 <_printf_float+0x1a4>
 800901e:	2301      	movs	r3, #1
 8009020:	e7f2      	b.n	8009008 <_printf_float+0x1a4>
 8009022:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009028:	4299      	cmp	r1, r3
 800902a:	db05      	blt.n	8009038 <_printf_float+0x1d4>
 800902c:	6823      	ldr	r3, [r4, #0]
 800902e:	6121      	str	r1, [r4, #16]
 8009030:	07d8      	lsls	r0, r3, #31
 8009032:	d5ea      	bpl.n	800900a <_printf_float+0x1a6>
 8009034:	1c4b      	adds	r3, r1, #1
 8009036:	e7e7      	b.n	8009008 <_printf_float+0x1a4>
 8009038:	2900      	cmp	r1, #0
 800903a:	bfd4      	ite	le
 800903c:	f1c1 0202 	rsble	r2, r1, #2
 8009040:	2201      	movgt	r2, #1
 8009042:	4413      	add	r3, r2
 8009044:	e7e0      	b.n	8009008 <_printf_float+0x1a4>
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	055a      	lsls	r2, r3, #21
 800904a:	d407      	bmi.n	800905c <_printf_float+0x1f8>
 800904c:	6923      	ldr	r3, [r4, #16]
 800904e:	4642      	mov	r2, r8
 8009050:	4631      	mov	r1, r6
 8009052:	4628      	mov	r0, r5
 8009054:	47b8      	blx	r7
 8009056:	3001      	adds	r0, #1
 8009058:	d12c      	bne.n	80090b4 <_printf_float+0x250>
 800905a:	e764      	b.n	8008f26 <_printf_float+0xc2>
 800905c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009060:	f240 80e0 	bls.w	8009224 <_printf_float+0x3c0>
 8009064:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009068:	2200      	movs	r2, #0
 800906a:	2300      	movs	r3, #0
 800906c:	f7f7 fd34 	bl	8000ad8 <__aeabi_dcmpeq>
 8009070:	2800      	cmp	r0, #0
 8009072:	d034      	beq.n	80090de <_printf_float+0x27a>
 8009074:	4a37      	ldr	r2, [pc, #220]	; (8009154 <_printf_float+0x2f0>)
 8009076:	2301      	movs	r3, #1
 8009078:	4631      	mov	r1, r6
 800907a:	4628      	mov	r0, r5
 800907c:	47b8      	blx	r7
 800907e:	3001      	adds	r0, #1
 8009080:	f43f af51 	beq.w	8008f26 <_printf_float+0xc2>
 8009084:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009088:	429a      	cmp	r2, r3
 800908a:	db02      	blt.n	8009092 <_printf_float+0x22e>
 800908c:	6823      	ldr	r3, [r4, #0]
 800908e:	07d8      	lsls	r0, r3, #31
 8009090:	d510      	bpl.n	80090b4 <_printf_float+0x250>
 8009092:	ee18 3a10 	vmov	r3, s16
 8009096:	4652      	mov	r2, sl
 8009098:	4631      	mov	r1, r6
 800909a:	4628      	mov	r0, r5
 800909c:	47b8      	blx	r7
 800909e:	3001      	adds	r0, #1
 80090a0:	f43f af41 	beq.w	8008f26 <_printf_float+0xc2>
 80090a4:	f04f 0800 	mov.w	r8, #0
 80090a8:	f104 091a 	add.w	r9, r4, #26
 80090ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090ae:	3b01      	subs	r3, #1
 80090b0:	4543      	cmp	r3, r8
 80090b2:	dc09      	bgt.n	80090c8 <_printf_float+0x264>
 80090b4:	6823      	ldr	r3, [r4, #0]
 80090b6:	079b      	lsls	r3, r3, #30
 80090b8:	f100 8105 	bmi.w	80092c6 <_printf_float+0x462>
 80090bc:	68e0      	ldr	r0, [r4, #12]
 80090be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090c0:	4298      	cmp	r0, r3
 80090c2:	bfb8      	it	lt
 80090c4:	4618      	movlt	r0, r3
 80090c6:	e730      	b.n	8008f2a <_printf_float+0xc6>
 80090c8:	2301      	movs	r3, #1
 80090ca:	464a      	mov	r2, r9
 80090cc:	4631      	mov	r1, r6
 80090ce:	4628      	mov	r0, r5
 80090d0:	47b8      	blx	r7
 80090d2:	3001      	adds	r0, #1
 80090d4:	f43f af27 	beq.w	8008f26 <_printf_float+0xc2>
 80090d8:	f108 0801 	add.w	r8, r8, #1
 80090dc:	e7e6      	b.n	80090ac <_printf_float+0x248>
 80090de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	dc39      	bgt.n	8009158 <_printf_float+0x2f4>
 80090e4:	4a1b      	ldr	r2, [pc, #108]	; (8009154 <_printf_float+0x2f0>)
 80090e6:	2301      	movs	r3, #1
 80090e8:	4631      	mov	r1, r6
 80090ea:	4628      	mov	r0, r5
 80090ec:	47b8      	blx	r7
 80090ee:	3001      	adds	r0, #1
 80090f0:	f43f af19 	beq.w	8008f26 <_printf_float+0xc2>
 80090f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090f8:	4313      	orrs	r3, r2
 80090fa:	d102      	bne.n	8009102 <_printf_float+0x29e>
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	07d9      	lsls	r1, r3, #31
 8009100:	d5d8      	bpl.n	80090b4 <_printf_float+0x250>
 8009102:	ee18 3a10 	vmov	r3, s16
 8009106:	4652      	mov	r2, sl
 8009108:	4631      	mov	r1, r6
 800910a:	4628      	mov	r0, r5
 800910c:	47b8      	blx	r7
 800910e:	3001      	adds	r0, #1
 8009110:	f43f af09 	beq.w	8008f26 <_printf_float+0xc2>
 8009114:	f04f 0900 	mov.w	r9, #0
 8009118:	f104 0a1a 	add.w	sl, r4, #26
 800911c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800911e:	425b      	negs	r3, r3
 8009120:	454b      	cmp	r3, r9
 8009122:	dc01      	bgt.n	8009128 <_printf_float+0x2c4>
 8009124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009126:	e792      	b.n	800904e <_printf_float+0x1ea>
 8009128:	2301      	movs	r3, #1
 800912a:	4652      	mov	r2, sl
 800912c:	4631      	mov	r1, r6
 800912e:	4628      	mov	r0, r5
 8009130:	47b8      	blx	r7
 8009132:	3001      	adds	r0, #1
 8009134:	f43f aef7 	beq.w	8008f26 <_printf_float+0xc2>
 8009138:	f109 0901 	add.w	r9, r9, #1
 800913c:	e7ee      	b.n	800911c <_printf_float+0x2b8>
 800913e:	bf00      	nop
 8009140:	7fefffff 	.word	0x7fefffff
 8009144:	0800d9c4 	.word	0x0800d9c4
 8009148:	0800d9c8 	.word	0x0800d9c8
 800914c:	0800d9d0 	.word	0x0800d9d0
 8009150:	0800d9cc 	.word	0x0800d9cc
 8009154:	0800d9d4 	.word	0x0800d9d4
 8009158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800915a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800915c:	429a      	cmp	r2, r3
 800915e:	bfa8      	it	ge
 8009160:	461a      	movge	r2, r3
 8009162:	2a00      	cmp	r2, #0
 8009164:	4691      	mov	r9, r2
 8009166:	dc37      	bgt.n	80091d8 <_printf_float+0x374>
 8009168:	f04f 0b00 	mov.w	fp, #0
 800916c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009170:	f104 021a 	add.w	r2, r4, #26
 8009174:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009176:	9305      	str	r3, [sp, #20]
 8009178:	eba3 0309 	sub.w	r3, r3, r9
 800917c:	455b      	cmp	r3, fp
 800917e:	dc33      	bgt.n	80091e8 <_printf_float+0x384>
 8009180:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009184:	429a      	cmp	r2, r3
 8009186:	db3b      	blt.n	8009200 <_printf_float+0x39c>
 8009188:	6823      	ldr	r3, [r4, #0]
 800918a:	07da      	lsls	r2, r3, #31
 800918c:	d438      	bmi.n	8009200 <_printf_float+0x39c>
 800918e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009190:	9a05      	ldr	r2, [sp, #20]
 8009192:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009194:	1a9a      	subs	r2, r3, r2
 8009196:	eba3 0901 	sub.w	r9, r3, r1
 800919a:	4591      	cmp	r9, r2
 800919c:	bfa8      	it	ge
 800919e:	4691      	movge	r9, r2
 80091a0:	f1b9 0f00 	cmp.w	r9, #0
 80091a4:	dc35      	bgt.n	8009212 <_printf_float+0x3ae>
 80091a6:	f04f 0800 	mov.w	r8, #0
 80091aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091ae:	f104 0a1a 	add.w	sl, r4, #26
 80091b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091b6:	1a9b      	subs	r3, r3, r2
 80091b8:	eba3 0309 	sub.w	r3, r3, r9
 80091bc:	4543      	cmp	r3, r8
 80091be:	f77f af79 	ble.w	80090b4 <_printf_float+0x250>
 80091c2:	2301      	movs	r3, #1
 80091c4:	4652      	mov	r2, sl
 80091c6:	4631      	mov	r1, r6
 80091c8:	4628      	mov	r0, r5
 80091ca:	47b8      	blx	r7
 80091cc:	3001      	adds	r0, #1
 80091ce:	f43f aeaa 	beq.w	8008f26 <_printf_float+0xc2>
 80091d2:	f108 0801 	add.w	r8, r8, #1
 80091d6:	e7ec      	b.n	80091b2 <_printf_float+0x34e>
 80091d8:	4613      	mov	r3, r2
 80091da:	4631      	mov	r1, r6
 80091dc:	4642      	mov	r2, r8
 80091de:	4628      	mov	r0, r5
 80091e0:	47b8      	blx	r7
 80091e2:	3001      	adds	r0, #1
 80091e4:	d1c0      	bne.n	8009168 <_printf_float+0x304>
 80091e6:	e69e      	b.n	8008f26 <_printf_float+0xc2>
 80091e8:	2301      	movs	r3, #1
 80091ea:	4631      	mov	r1, r6
 80091ec:	4628      	mov	r0, r5
 80091ee:	9205      	str	r2, [sp, #20]
 80091f0:	47b8      	blx	r7
 80091f2:	3001      	adds	r0, #1
 80091f4:	f43f ae97 	beq.w	8008f26 <_printf_float+0xc2>
 80091f8:	9a05      	ldr	r2, [sp, #20]
 80091fa:	f10b 0b01 	add.w	fp, fp, #1
 80091fe:	e7b9      	b.n	8009174 <_printf_float+0x310>
 8009200:	ee18 3a10 	vmov	r3, s16
 8009204:	4652      	mov	r2, sl
 8009206:	4631      	mov	r1, r6
 8009208:	4628      	mov	r0, r5
 800920a:	47b8      	blx	r7
 800920c:	3001      	adds	r0, #1
 800920e:	d1be      	bne.n	800918e <_printf_float+0x32a>
 8009210:	e689      	b.n	8008f26 <_printf_float+0xc2>
 8009212:	9a05      	ldr	r2, [sp, #20]
 8009214:	464b      	mov	r3, r9
 8009216:	4442      	add	r2, r8
 8009218:	4631      	mov	r1, r6
 800921a:	4628      	mov	r0, r5
 800921c:	47b8      	blx	r7
 800921e:	3001      	adds	r0, #1
 8009220:	d1c1      	bne.n	80091a6 <_printf_float+0x342>
 8009222:	e680      	b.n	8008f26 <_printf_float+0xc2>
 8009224:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009226:	2a01      	cmp	r2, #1
 8009228:	dc01      	bgt.n	800922e <_printf_float+0x3ca>
 800922a:	07db      	lsls	r3, r3, #31
 800922c:	d538      	bpl.n	80092a0 <_printf_float+0x43c>
 800922e:	2301      	movs	r3, #1
 8009230:	4642      	mov	r2, r8
 8009232:	4631      	mov	r1, r6
 8009234:	4628      	mov	r0, r5
 8009236:	47b8      	blx	r7
 8009238:	3001      	adds	r0, #1
 800923a:	f43f ae74 	beq.w	8008f26 <_printf_float+0xc2>
 800923e:	ee18 3a10 	vmov	r3, s16
 8009242:	4652      	mov	r2, sl
 8009244:	4631      	mov	r1, r6
 8009246:	4628      	mov	r0, r5
 8009248:	47b8      	blx	r7
 800924a:	3001      	adds	r0, #1
 800924c:	f43f ae6b 	beq.w	8008f26 <_printf_float+0xc2>
 8009250:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009254:	2200      	movs	r2, #0
 8009256:	2300      	movs	r3, #0
 8009258:	f7f7 fc3e 	bl	8000ad8 <__aeabi_dcmpeq>
 800925c:	b9d8      	cbnz	r0, 8009296 <_printf_float+0x432>
 800925e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009260:	f108 0201 	add.w	r2, r8, #1
 8009264:	3b01      	subs	r3, #1
 8009266:	4631      	mov	r1, r6
 8009268:	4628      	mov	r0, r5
 800926a:	47b8      	blx	r7
 800926c:	3001      	adds	r0, #1
 800926e:	d10e      	bne.n	800928e <_printf_float+0x42a>
 8009270:	e659      	b.n	8008f26 <_printf_float+0xc2>
 8009272:	2301      	movs	r3, #1
 8009274:	4652      	mov	r2, sl
 8009276:	4631      	mov	r1, r6
 8009278:	4628      	mov	r0, r5
 800927a:	47b8      	blx	r7
 800927c:	3001      	adds	r0, #1
 800927e:	f43f ae52 	beq.w	8008f26 <_printf_float+0xc2>
 8009282:	f108 0801 	add.w	r8, r8, #1
 8009286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009288:	3b01      	subs	r3, #1
 800928a:	4543      	cmp	r3, r8
 800928c:	dcf1      	bgt.n	8009272 <_printf_float+0x40e>
 800928e:	464b      	mov	r3, r9
 8009290:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009294:	e6dc      	b.n	8009050 <_printf_float+0x1ec>
 8009296:	f04f 0800 	mov.w	r8, #0
 800929a:	f104 0a1a 	add.w	sl, r4, #26
 800929e:	e7f2      	b.n	8009286 <_printf_float+0x422>
 80092a0:	2301      	movs	r3, #1
 80092a2:	4642      	mov	r2, r8
 80092a4:	e7df      	b.n	8009266 <_printf_float+0x402>
 80092a6:	2301      	movs	r3, #1
 80092a8:	464a      	mov	r2, r9
 80092aa:	4631      	mov	r1, r6
 80092ac:	4628      	mov	r0, r5
 80092ae:	47b8      	blx	r7
 80092b0:	3001      	adds	r0, #1
 80092b2:	f43f ae38 	beq.w	8008f26 <_printf_float+0xc2>
 80092b6:	f108 0801 	add.w	r8, r8, #1
 80092ba:	68e3      	ldr	r3, [r4, #12]
 80092bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80092be:	1a5b      	subs	r3, r3, r1
 80092c0:	4543      	cmp	r3, r8
 80092c2:	dcf0      	bgt.n	80092a6 <_printf_float+0x442>
 80092c4:	e6fa      	b.n	80090bc <_printf_float+0x258>
 80092c6:	f04f 0800 	mov.w	r8, #0
 80092ca:	f104 0919 	add.w	r9, r4, #25
 80092ce:	e7f4      	b.n	80092ba <_printf_float+0x456>

080092d0 <_printf_common>:
 80092d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092d4:	4616      	mov	r6, r2
 80092d6:	4699      	mov	r9, r3
 80092d8:	688a      	ldr	r2, [r1, #8]
 80092da:	690b      	ldr	r3, [r1, #16]
 80092dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092e0:	4293      	cmp	r3, r2
 80092e2:	bfb8      	it	lt
 80092e4:	4613      	movlt	r3, r2
 80092e6:	6033      	str	r3, [r6, #0]
 80092e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092ec:	4607      	mov	r7, r0
 80092ee:	460c      	mov	r4, r1
 80092f0:	b10a      	cbz	r2, 80092f6 <_printf_common+0x26>
 80092f2:	3301      	adds	r3, #1
 80092f4:	6033      	str	r3, [r6, #0]
 80092f6:	6823      	ldr	r3, [r4, #0]
 80092f8:	0699      	lsls	r1, r3, #26
 80092fa:	bf42      	ittt	mi
 80092fc:	6833      	ldrmi	r3, [r6, #0]
 80092fe:	3302      	addmi	r3, #2
 8009300:	6033      	strmi	r3, [r6, #0]
 8009302:	6825      	ldr	r5, [r4, #0]
 8009304:	f015 0506 	ands.w	r5, r5, #6
 8009308:	d106      	bne.n	8009318 <_printf_common+0x48>
 800930a:	f104 0a19 	add.w	sl, r4, #25
 800930e:	68e3      	ldr	r3, [r4, #12]
 8009310:	6832      	ldr	r2, [r6, #0]
 8009312:	1a9b      	subs	r3, r3, r2
 8009314:	42ab      	cmp	r3, r5
 8009316:	dc26      	bgt.n	8009366 <_printf_common+0x96>
 8009318:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800931c:	1e13      	subs	r3, r2, #0
 800931e:	6822      	ldr	r2, [r4, #0]
 8009320:	bf18      	it	ne
 8009322:	2301      	movne	r3, #1
 8009324:	0692      	lsls	r2, r2, #26
 8009326:	d42b      	bmi.n	8009380 <_printf_common+0xb0>
 8009328:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800932c:	4649      	mov	r1, r9
 800932e:	4638      	mov	r0, r7
 8009330:	47c0      	blx	r8
 8009332:	3001      	adds	r0, #1
 8009334:	d01e      	beq.n	8009374 <_printf_common+0xa4>
 8009336:	6823      	ldr	r3, [r4, #0]
 8009338:	68e5      	ldr	r5, [r4, #12]
 800933a:	6832      	ldr	r2, [r6, #0]
 800933c:	f003 0306 	and.w	r3, r3, #6
 8009340:	2b04      	cmp	r3, #4
 8009342:	bf08      	it	eq
 8009344:	1aad      	subeq	r5, r5, r2
 8009346:	68a3      	ldr	r3, [r4, #8]
 8009348:	6922      	ldr	r2, [r4, #16]
 800934a:	bf0c      	ite	eq
 800934c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009350:	2500      	movne	r5, #0
 8009352:	4293      	cmp	r3, r2
 8009354:	bfc4      	itt	gt
 8009356:	1a9b      	subgt	r3, r3, r2
 8009358:	18ed      	addgt	r5, r5, r3
 800935a:	2600      	movs	r6, #0
 800935c:	341a      	adds	r4, #26
 800935e:	42b5      	cmp	r5, r6
 8009360:	d11a      	bne.n	8009398 <_printf_common+0xc8>
 8009362:	2000      	movs	r0, #0
 8009364:	e008      	b.n	8009378 <_printf_common+0xa8>
 8009366:	2301      	movs	r3, #1
 8009368:	4652      	mov	r2, sl
 800936a:	4649      	mov	r1, r9
 800936c:	4638      	mov	r0, r7
 800936e:	47c0      	blx	r8
 8009370:	3001      	adds	r0, #1
 8009372:	d103      	bne.n	800937c <_printf_common+0xac>
 8009374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800937c:	3501      	adds	r5, #1
 800937e:	e7c6      	b.n	800930e <_printf_common+0x3e>
 8009380:	18e1      	adds	r1, r4, r3
 8009382:	1c5a      	adds	r2, r3, #1
 8009384:	2030      	movs	r0, #48	; 0x30
 8009386:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800938a:	4422      	add	r2, r4
 800938c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009390:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009394:	3302      	adds	r3, #2
 8009396:	e7c7      	b.n	8009328 <_printf_common+0x58>
 8009398:	2301      	movs	r3, #1
 800939a:	4622      	mov	r2, r4
 800939c:	4649      	mov	r1, r9
 800939e:	4638      	mov	r0, r7
 80093a0:	47c0      	blx	r8
 80093a2:	3001      	adds	r0, #1
 80093a4:	d0e6      	beq.n	8009374 <_printf_common+0xa4>
 80093a6:	3601      	adds	r6, #1
 80093a8:	e7d9      	b.n	800935e <_printf_common+0x8e>
	...

080093ac <_printf_i>:
 80093ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093b0:	7e0f      	ldrb	r7, [r1, #24]
 80093b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093b4:	2f78      	cmp	r7, #120	; 0x78
 80093b6:	4691      	mov	r9, r2
 80093b8:	4680      	mov	r8, r0
 80093ba:	460c      	mov	r4, r1
 80093bc:	469a      	mov	sl, r3
 80093be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80093c2:	d807      	bhi.n	80093d4 <_printf_i+0x28>
 80093c4:	2f62      	cmp	r7, #98	; 0x62
 80093c6:	d80a      	bhi.n	80093de <_printf_i+0x32>
 80093c8:	2f00      	cmp	r7, #0
 80093ca:	f000 80d8 	beq.w	800957e <_printf_i+0x1d2>
 80093ce:	2f58      	cmp	r7, #88	; 0x58
 80093d0:	f000 80a3 	beq.w	800951a <_printf_i+0x16e>
 80093d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093dc:	e03a      	b.n	8009454 <_printf_i+0xa8>
 80093de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093e2:	2b15      	cmp	r3, #21
 80093e4:	d8f6      	bhi.n	80093d4 <_printf_i+0x28>
 80093e6:	a101      	add	r1, pc, #4	; (adr r1, 80093ec <_printf_i+0x40>)
 80093e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093ec:	08009445 	.word	0x08009445
 80093f0:	08009459 	.word	0x08009459
 80093f4:	080093d5 	.word	0x080093d5
 80093f8:	080093d5 	.word	0x080093d5
 80093fc:	080093d5 	.word	0x080093d5
 8009400:	080093d5 	.word	0x080093d5
 8009404:	08009459 	.word	0x08009459
 8009408:	080093d5 	.word	0x080093d5
 800940c:	080093d5 	.word	0x080093d5
 8009410:	080093d5 	.word	0x080093d5
 8009414:	080093d5 	.word	0x080093d5
 8009418:	08009565 	.word	0x08009565
 800941c:	08009489 	.word	0x08009489
 8009420:	08009547 	.word	0x08009547
 8009424:	080093d5 	.word	0x080093d5
 8009428:	080093d5 	.word	0x080093d5
 800942c:	08009587 	.word	0x08009587
 8009430:	080093d5 	.word	0x080093d5
 8009434:	08009489 	.word	0x08009489
 8009438:	080093d5 	.word	0x080093d5
 800943c:	080093d5 	.word	0x080093d5
 8009440:	0800954f 	.word	0x0800954f
 8009444:	682b      	ldr	r3, [r5, #0]
 8009446:	1d1a      	adds	r2, r3, #4
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	602a      	str	r2, [r5, #0]
 800944c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009450:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009454:	2301      	movs	r3, #1
 8009456:	e0a3      	b.n	80095a0 <_printf_i+0x1f4>
 8009458:	6820      	ldr	r0, [r4, #0]
 800945a:	6829      	ldr	r1, [r5, #0]
 800945c:	0606      	lsls	r6, r0, #24
 800945e:	f101 0304 	add.w	r3, r1, #4
 8009462:	d50a      	bpl.n	800947a <_printf_i+0xce>
 8009464:	680e      	ldr	r6, [r1, #0]
 8009466:	602b      	str	r3, [r5, #0]
 8009468:	2e00      	cmp	r6, #0
 800946a:	da03      	bge.n	8009474 <_printf_i+0xc8>
 800946c:	232d      	movs	r3, #45	; 0x2d
 800946e:	4276      	negs	r6, r6
 8009470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009474:	485e      	ldr	r0, [pc, #376]	; (80095f0 <_printf_i+0x244>)
 8009476:	230a      	movs	r3, #10
 8009478:	e019      	b.n	80094ae <_printf_i+0x102>
 800947a:	680e      	ldr	r6, [r1, #0]
 800947c:	602b      	str	r3, [r5, #0]
 800947e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009482:	bf18      	it	ne
 8009484:	b236      	sxthne	r6, r6
 8009486:	e7ef      	b.n	8009468 <_printf_i+0xbc>
 8009488:	682b      	ldr	r3, [r5, #0]
 800948a:	6820      	ldr	r0, [r4, #0]
 800948c:	1d19      	adds	r1, r3, #4
 800948e:	6029      	str	r1, [r5, #0]
 8009490:	0601      	lsls	r1, r0, #24
 8009492:	d501      	bpl.n	8009498 <_printf_i+0xec>
 8009494:	681e      	ldr	r6, [r3, #0]
 8009496:	e002      	b.n	800949e <_printf_i+0xf2>
 8009498:	0646      	lsls	r6, r0, #25
 800949a:	d5fb      	bpl.n	8009494 <_printf_i+0xe8>
 800949c:	881e      	ldrh	r6, [r3, #0]
 800949e:	4854      	ldr	r0, [pc, #336]	; (80095f0 <_printf_i+0x244>)
 80094a0:	2f6f      	cmp	r7, #111	; 0x6f
 80094a2:	bf0c      	ite	eq
 80094a4:	2308      	moveq	r3, #8
 80094a6:	230a      	movne	r3, #10
 80094a8:	2100      	movs	r1, #0
 80094aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094ae:	6865      	ldr	r5, [r4, #4]
 80094b0:	60a5      	str	r5, [r4, #8]
 80094b2:	2d00      	cmp	r5, #0
 80094b4:	bfa2      	ittt	ge
 80094b6:	6821      	ldrge	r1, [r4, #0]
 80094b8:	f021 0104 	bicge.w	r1, r1, #4
 80094bc:	6021      	strge	r1, [r4, #0]
 80094be:	b90e      	cbnz	r6, 80094c4 <_printf_i+0x118>
 80094c0:	2d00      	cmp	r5, #0
 80094c2:	d04d      	beq.n	8009560 <_printf_i+0x1b4>
 80094c4:	4615      	mov	r5, r2
 80094c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80094ca:	fb03 6711 	mls	r7, r3, r1, r6
 80094ce:	5dc7      	ldrb	r7, [r0, r7]
 80094d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80094d4:	4637      	mov	r7, r6
 80094d6:	42bb      	cmp	r3, r7
 80094d8:	460e      	mov	r6, r1
 80094da:	d9f4      	bls.n	80094c6 <_printf_i+0x11a>
 80094dc:	2b08      	cmp	r3, #8
 80094de:	d10b      	bne.n	80094f8 <_printf_i+0x14c>
 80094e0:	6823      	ldr	r3, [r4, #0]
 80094e2:	07de      	lsls	r6, r3, #31
 80094e4:	d508      	bpl.n	80094f8 <_printf_i+0x14c>
 80094e6:	6923      	ldr	r3, [r4, #16]
 80094e8:	6861      	ldr	r1, [r4, #4]
 80094ea:	4299      	cmp	r1, r3
 80094ec:	bfde      	ittt	le
 80094ee:	2330      	movle	r3, #48	; 0x30
 80094f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80094f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80094f8:	1b52      	subs	r2, r2, r5
 80094fa:	6122      	str	r2, [r4, #16]
 80094fc:	f8cd a000 	str.w	sl, [sp]
 8009500:	464b      	mov	r3, r9
 8009502:	aa03      	add	r2, sp, #12
 8009504:	4621      	mov	r1, r4
 8009506:	4640      	mov	r0, r8
 8009508:	f7ff fee2 	bl	80092d0 <_printf_common>
 800950c:	3001      	adds	r0, #1
 800950e:	d14c      	bne.n	80095aa <_printf_i+0x1fe>
 8009510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009514:	b004      	add	sp, #16
 8009516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800951a:	4835      	ldr	r0, [pc, #212]	; (80095f0 <_printf_i+0x244>)
 800951c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009520:	6829      	ldr	r1, [r5, #0]
 8009522:	6823      	ldr	r3, [r4, #0]
 8009524:	f851 6b04 	ldr.w	r6, [r1], #4
 8009528:	6029      	str	r1, [r5, #0]
 800952a:	061d      	lsls	r5, r3, #24
 800952c:	d514      	bpl.n	8009558 <_printf_i+0x1ac>
 800952e:	07df      	lsls	r7, r3, #31
 8009530:	bf44      	itt	mi
 8009532:	f043 0320 	orrmi.w	r3, r3, #32
 8009536:	6023      	strmi	r3, [r4, #0]
 8009538:	b91e      	cbnz	r6, 8009542 <_printf_i+0x196>
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	f023 0320 	bic.w	r3, r3, #32
 8009540:	6023      	str	r3, [r4, #0]
 8009542:	2310      	movs	r3, #16
 8009544:	e7b0      	b.n	80094a8 <_printf_i+0xfc>
 8009546:	6823      	ldr	r3, [r4, #0]
 8009548:	f043 0320 	orr.w	r3, r3, #32
 800954c:	6023      	str	r3, [r4, #0]
 800954e:	2378      	movs	r3, #120	; 0x78
 8009550:	4828      	ldr	r0, [pc, #160]	; (80095f4 <_printf_i+0x248>)
 8009552:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009556:	e7e3      	b.n	8009520 <_printf_i+0x174>
 8009558:	0659      	lsls	r1, r3, #25
 800955a:	bf48      	it	mi
 800955c:	b2b6      	uxthmi	r6, r6
 800955e:	e7e6      	b.n	800952e <_printf_i+0x182>
 8009560:	4615      	mov	r5, r2
 8009562:	e7bb      	b.n	80094dc <_printf_i+0x130>
 8009564:	682b      	ldr	r3, [r5, #0]
 8009566:	6826      	ldr	r6, [r4, #0]
 8009568:	6961      	ldr	r1, [r4, #20]
 800956a:	1d18      	adds	r0, r3, #4
 800956c:	6028      	str	r0, [r5, #0]
 800956e:	0635      	lsls	r5, r6, #24
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	d501      	bpl.n	8009578 <_printf_i+0x1cc>
 8009574:	6019      	str	r1, [r3, #0]
 8009576:	e002      	b.n	800957e <_printf_i+0x1d2>
 8009578:	0670      	lsls	r0, r6, #25
 800957a:	d5fb      	bpl.n	8009574 <_printf_i+0x1c8>
 800957c:	8019      	strh	r1, [r3, #0]
 800957e:	2300      	movs	r3, #0
 8009580:	6123      	str	r3, [r4, #16]
 8009582:	4615      	mov	r5, r2
 8009584:	e7ba      	b.n	80094fc <_printf_i+0x150>
 8009586:	682b      	ldr	r3, [r5, #0]
 8009588:	1d1a      	adds	r2, r3, #4
 800958a:	602a      	str	r2, [r5, #0]
 800958c:	681d      	ldr	r5, [r3, #0]
 800958e:	6862      	ldr	r2, [r4, #4]
 8009590:	2100      	movs	r1, #0
 8009592:	4628      	mov	r0, r5
 8009594:	f7f6 fe2c 	bl	80001f0 <memchr>
 8009598:	b108      	cbz	r0, 800959e <_printf_i+0x1f2>
 800959a:	1b40      	subs	r0, r0, r5
 800959c:	6060      	str	r0, [r4, #4]
 800959e:	6863      	ldr	r3, [r4, #4]
 80095a0:	6123      	str	r3, [r4, #16]
 80095a2:	2300      	movs	r3, #0
 80095a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095a8:	e7a8      	b.n	80094fc <_printf_i+0x150>
 80095aa:	6923      	ldr	r3, [r4, #16]
 80095ac:	462a      	mov	r2, r5
 80095ae:	4649      	mov	r1, r9
 80095b0:	4640      	mov	r0, r8
 80095b2:	47d0      	blx	sl
 80095b4:	3001      	adds	r0, #1
 80095b6:	d0ab      	beq.n	8009510 <_printf_i+0x164>
 80095b8:	6823      	ldr	r3, [r4, #0]
 80095ba:	079b      	lsls	r3, r3, #30
 80095bc:	d413      	bmi.n	80095e6 <_printf_i+0x23a>
 80095be:	68e0      	ldr	r0, [r4, #12]
 80095c0:	9b03      	ldr	r3, [sp, #12]
 80095c2:	4298      	cmp	r0, r3
 80095c4:	bfb8      	it	lt
 80095c6:	4618      	movlt	r0, r3
 80095c8:	e7a4      	b.n	8009514 <_printf_i+0x168>
 80095ca:	2301      	movs	r3, #1
 80095cc:	4632      	mov	r2, r6
 80095ce:	4649      	mov	r1, r9
 80095d0:	4640      	mov	r0, r8
 80095d2:	47d0      	blx	sl
 80095d4:	3001      	adds	r0, #1
 80095d6:	d09b      	beq.n	8009510 <_printf_i+0x164>
 80095d8:	3501      	adds	r5, #1
 80095da:	68e3      	ldr	r3, [r4, #12]
 80095dc:	9903      	ldr	r1, [sp, #12]
 80095de:	1a5b      	subs	r3, r3, r1
 80095e0:	42ab      	cmp	r3, r5
 80095e2:	dcf2      	bgt.n	80095ca <_printf_i+0x21e>
 80095e4:	e7eb      	b.n	80095be <_printf_i+0x212>
 80095e6:	2500      	movs	r5, #0
 80095e8:	f104 0619 	add.w	r6, r4, #25
 80095ec:	e7f5      	b.n	80095da <_printf_i+0x22e>
 80095ee:	bf00      	nop
 80095f0:	0800d9d6 	.word	0x0800d9d6
 80095f4:	0800d9e7 	.word	0x0800d9e7

080095f8 <_sbrk_r>:
 80095f8:	b538      	push	{r3, r4, r5, lr}
 80095fa:	4d06      	ldr	r5, [pc, #24]	; (8009614 <_sbrk_r+0x1c>)
 80095fc:	2300      	movs	r3, #0
 80095fe:	4604      	mov	r4, r0
 8009600:	4608      	mov	r0, r1
 8009602:	602b      	str	r3, [r5, #0]
 8009604:	f7fb f84e 	bl	80046a4 <_sbrk>
 8009608:	1c43      	adds	r3, r0, #1
 800960a:	d102      	bne.n	8009612 <_sbrk_r+0x1a>
 800960c:	682b      	ldr	r3, [r5, #0]
 800960e:	b103      	cbz	r3, 8009612 <_sbrk_r+0x1a>
 8009610:	6023      	str	r3, [r4, #0]
 8009612:	bd38      	pop	{r3, r4, r5, pc}
 8009614:	20000fc8 	.word	0x20000fc8

08009618 <siprintf>:
 8009618:	b40e      	push	{r1, r2, r3}
 800961a:	b500      	push	{lr}
 800961c:	b09c      	sub	sp, #112	; 0x70
 800961e:	ab1d      	add	r3, sp, #116	; 0x74
 8009620:	9002      	str	r0, [sp, #8]
 8009622:	9006      	str	r0, [sp, #24]
 8009624:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009628:	4809      	ldr	r0, [pc, #36]	; (8009650 <siprintf+0x38>)
 800962a:	9107      	str	r1, [sp, #28]
 800962c:	9104      	str	r1, [sp, #16]
 800962e:	4909      	ldr	r1, [pc, #36]	; (8009654 <siprintf+0x3c>)
 8009630:	f853 2b04 	ldr.w	r2, [r3], #4
 8009634:	9105      	str	r1, [sp, #20]
 8009636:	6800      	ldr	r0, [r0, #0]
 8009638:	9301      	str	r3, [sp, #4]
 800963a:	a902      	add	r1, sp, #8
 800963c:	f003 fa92 	bl	800cb64 <_svfiprintf_r>
 8009640:	9b02      	ldr	r3, [sp, #8]
 8009642:	2200      	movs	r2, #0
 8009644:	701a      	strb	r2, [r3, #0]
 8009646:	b01c      	add	sp, #112	; 0x70
 8009648:	f85d eb04 	ldr.w	lr, [sp], #4
 800964c:	b003      	add	sp, #12
 800964e:	4770      	bx	lr
 8009650:	200000b0 	.word	0x200000b0
 8009654:	ffff0208 	.word	0xffff0208

08009658 <__sread>:
 8009658:	b510      	push	{r4, lr}
 800965a:	460c      	mov	r4, r1
 800965c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009660:	f003 fcda 	bl	800d018 <_read_r>
 8009664:	2800      	cmp	r0, #0
 8009666:	bfab      	itete	ge
 8009668:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800966a:	89a3      	ldrhlt	r3, [r4, #12]
 800966c:	181b      	addge	r3, r3, r0
 800966e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009672:	bfac      	ite	ge
 8009674:	6563      	strge	r3, [r4, #84]	; 0x54
 8009676:	81a3      	strhlt	r3, [r4, #12]
 8009678:	bd10      	pop	{r4, pc}

0800967a <__swrite>:
 800967a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800967e:	461f      	mov	r7, r3
 8009680:	898b      	ldrh	r3, [r1, #12]
 8009682:	05db      	lsls	r3, r3, #23
 8009684:	4605      	mov	r5, r0
 8009686:	460c      	mov	r4, r1
 8009688:	4616      	mov	r6, r2
 800968a:	d505      	bpl.n	8009698 <__swrite+0x1e>
 800968c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009690:	2302      	movs	r3, #2
 8009692:	2200      	movs	r2, #0
 8009694:	f002 fc9e 	bl	800bfd4 <_lseek_r>
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800969e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096a2:	81a3      	strh	r3, [r4, #12]
 80096a4:	4632      	mov	r2, r6
 80096a6:	463b      	mov	r3, r7
 80096a8:	4628      	mov	r0, r5
 80096aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096ae:	f001 b827 	b.w	800a700 <_write_r>

080096b2 <__sseek>:
 80096b2:	b510      	push	{r4, lr}
 80096b4:	460c      	mov	r4, r1
 80096b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096ba:	f002 fc8b 	bl	800bfd4 <_lseek_r>
 80096be:	1c43      	adds	r3, r0, #1
 80096c0:	89a3      	ldrh	r3, [r4, #12]
 80096c2:	bf15      	itete	ne
 80096c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80096c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80096ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80096ce:	81a3      	strheq	r3, [r4, #12]
 80096d0:	bf18      	it	ne
 80096d2:	81a3      	strhne	r3, [r4, #12]
 80096d4:	bd10      	pop	{r4, pc}

080096d6 <__sclose>:
 80096d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096da:	f001 b8af 	b.w	800a83c <_close_r>

080096de <strncmp>:
 80096de:	b510      	push	{r4, lr}
 80096e0:	b17a      	cbz	r2, 8009702 <strncmp+0x24>
 80096e2:	4603      	mov	r3, r0
 80096e4:	3901      	subs	r1, #1
 80096e6:	1884      	adds	r4, r0, r2
 80096e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80096ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80096f0:	4290      	cmp	r0, r2
 80096f2:	d101      	bne.n	80096f8 <strncmp+0x1a>
 80096f4:	42a3      	cmp	r3, r4
 80096f6:	d101      	bne.n	80096fc <strncmp+0x1e>
 80096f8:	1a80      	subs	r0, r0, r2
 80096fa:	bd10      	pop	{r4, pc}
 80096fc:	2800      	cmp	r0, #0
 80096fe:	d1f3      	bne.n	80096e8 <strncmp+0xa>
 8009700:	e7fa      	b.n	80096f8 <strncmp+0x1a>
 8009702:	4610      	mov	r0, r2
 8009704:	e7f9      	b.n	80096fa <strncmp+0x1c>

08009706 <sulp>:
 8009706:	b570      	push	{r4, r5, r6, lr}
 8009708:	4604      	mov	r4, r0
 800970a:	460d      	mov	r5, r1
 800970c:	ec45 4b10 	vmov	d0, r4, r5
 8009710:	4616      	mov	r6, r2
 8009712:	f003 f867 	bl	800c7e4 <__ulp>
 8009716:	ec51 0b10 	vmov	r0, r1, d0
 800971a:	b17e      	cbz	r6, 800973c <sulp+0x36>
 800971c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009720:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009724:	2b00      	cmp	r3, #0
 8009726:	dd09      	ble.n	800973c <sulp+0x36>
 8009728:	051b      	lsls	r3, r3, #20
 800972a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800972e:	2400      	movs	r4, #0
 8009730:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009734:	4622      	mov	r2, r4
 8009736:	462b      	mov	r3, r5
 8009738:	f7f6 ff66 	bl	8000608 <__aeabi_dmul>
 800973c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009740 <_strtod_l>:
 8009740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009744:	ed2d 8b02 	vpush	{d8}
 8009748:	b09d      	sub	sp, #116	; 0x74
 800974a:	461f      	mov	r7, r3
 800974c:	2300      	movs	r3, #0
 800974e:	9318      	str	r3, [sp, #96]	; 0x60
 8009750:	4ba2      	ldr	r3, [pc, #648]	; (80099dc <_strtod_l+0x29c>)
 8009752:	9213      	str	r2, [sp, #76]	; 0x4c
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	9305      	str	r3, [sp, #20]
 8009758:	4604      	mov	r4, r0
 800975a:	4618      	mov	r0, r3
 800975c:	4688      	mov	r8, r1
 800975e:	f7f6 fd3f 	bl	80001e0 <strlen>
 8009762:	f04f 0a00 	mov.w	sl, #0
 8009766:	4605      	mov	r5, r0
 8009768:	f04f 0b00 	mov.w	fp, #0
 800976c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009770:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009772:	781a      	ldrb	r2, [r3, #0]
 8009774:	2a2b      	cmp	r2, #43	; 0x2b
 8009776:	d04e      	beq.n	8009816 <_strtod_l+0xd6>
 8009778:	d83b      	bhi.n	80097f2 <_strtod_l+0xb2>
 800977a:	2a0d      	cmp	r2, #13
 800977c:	d834      	bhi.n	80097e8 <_strtod_l+0xa8>
 800977e:	2a08      	cmp	r2, #8
 8009780:	d834      	bhi.n	80097ec <_strtod_l+0xac>
 8009782:	2a00      	cmp	r2, #0
 8009784:	d03e      	beq.n	8009804 <_strtod_l+0xc4>
 8009786:	2300      	movs	r3, #0
 8009788:	930a      	str	r3, [sp, #40]	; 0x28
 800978a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800978c:	7833      	ldrb	r3, [r6, #0]
 800978e:	2b30      	cmp	r3, #48	; 0x30
 8009790:	f040 80b0 	bne.w	80098f4 <_strtod_l+0x1b4>
 8009794:	7873      	ldrb	r3, [r6, #1]
 8009796:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800979a:	2b58      	cmp	r3, #88	; 0x58
 800979c:	d168      	bne.n	8009870 <_strtod_l+0x130>
 800979e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097a0:	9301      	str	r3, [sp, #4]
 80097a2:	ab18      	add	r3, sp, #96	; 0x60
 80097a4:	9702      	str	r7, [sp, #8]
 80097a6:	9300      	str	r3, [sp, #0]
 80097a8:	4a8d      	ldr	r2, [pc, #564]	; (80099e0 <_strtod_l+0x2a0>)
 80097aa:	ab19      	add	r3, sp, #100	; 0x64
 80097ac:	a917      	add	r1, sp, #92	; 0x5c
 80097ae:	4620      	mov	r0, r4
 80097b0:	f002 f900 	bl	800b9b4 <__gethex>
 80097b4:	f010 0707 	ands.w	r7, r0, #7
 80097b8:	4605      	mov	r5, r0
 80097ba:	d005      	beq.n	80097c8 <_strtod_l+0x88>
 80097bc:	2f06      	cmp	r7, #6
 80097be:	d12c      	bne.n	800981a <_strtod_l+0xda>
 80097c0:	3601      	adds	r6, #1
 80097c2:	2300      	movs	r3, #0
 80097c4:	9617      	str	r6, [sp, #92]	; 0x5c
 80097c6:	930a      	str	r3, [sp, #40]	; 0x28
 80097c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f040 8590 	bne.w	800a2f0 <_strtod_l+0xbb0>
 80097d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097d2:	b1eb      	cbz	r3, 8009810 <_strtod_l+0xd0>
 80097d4:	4652      	mov	r2, sl
 80097d6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80097da:	ec43 2b10 	vmov	d0, r2, r3
 80097de:	b01d      	add	sp, #116	; 0x74
 80097e0:	ecbd 8b02 	vpop	{d8}
 80097e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e8:	2a20      	cmp	r2, #32
 80097ea:	d1cc      	bne.n	8009786 <_strtod_l+0x46>
 80097ec:	3301      	adds	r3, #1
 80097ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80097f0:	e7be      	b.n	8009770 <_strtod_l+0x30>
 80097f2:	2a2d      	cmp	r2, #45	; 0x2d
 80097f4:	d1c7      	bne.n	8009786 <_strtod_l+0x46>
 80097f6:	2201      	movs	r2, #1
 80097f8:	920a      	str	r2, [sp, #40]	; 0x28
 80097fa:	1c5a      	adds	r2, r3, #1
 80097fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80097fe:	785b      	ldrb	r3, [r3, #1]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d1c2      	bne.n	800978a <_strtod_l+0x4a>
 8009804:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009806:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800980a:	2b00      	cmp	r3, #0
 800980c:	f040 856e 	bne.w	800a2ec <_strtod_l+0xbac>
 8009810:	4652      	mov	r2, sl
 8009812:	465b      	mov	r3, fp
 8009814:	e7e1      	b.n	80097da <_strtod_l+0x9a>
 8009816:	2200      	movs	r2, #0
 8009818:	e7ee      	b.n	80097f8 <_strtod_l+0xb8>
 800981a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800981c:	b13a      	cbz	r2, 800982e <_strtod_l+0xee>
 800981e:	2135      	movs	r1, #53	; 0x35
 8009820:	a81a      	add	r0, sp, #104	; 0x68
 8009822:	f003 f8ea 	bl	800c9fa <__copybits>
 8009826:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009828:	4620      	mov	r0, r4
 800982a:	f002 fca9 	bl	800c180 <_Bfree>
 800982e:	3f01      	subs	r7, #1
 8009830:	2f04      	cmp	r7, #4
 8009832:	d806      	bhi.n	8009842 <_strtod_l+0x102>
 8009834:	e8df f007 	tbb	[pc, r7]
 8009838:	1714030a 	.word	0x1714030a
 800983c:	0a          	.byte	0x0a
 800983d:	00          	.byte	0x00
 800983e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009842:	0728      	lsls	r0, r5, #28
 8009844:	d5c0      	bpl.n	80097c8 <_strtod_l+0x88>
 8009846:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800984a:	e7bd      	b.n	80097c8 <_strtod_l+0x88>
 800984c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009850:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009852:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009856:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800985a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800985e:	e7f0      	b.n	8009842 <_strtod_l+0x102>
 8009860:	f8df b180 	ldr.w	fp, [pc, #384]	; 80099e4 <_strtod_l+0x2a4>
 8009864:	e7ed      	b.n	8009842 <_strtod_l+0x102>
 8009866:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800986a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800986e:	e7e8      	b.n	8009842 <_strtod_l+0x102>
 8009870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009872:	1c5a      	adds	r2, r3, #1
 8009874:	9217      	str	r2, [sp, #92]	; 0x5c
 8009876:	785b      	ldrb	r3, [r3, #1]
 8009878:	2b30      	cmp	r3, #48	; 0x30
 800987a:	d0f9      	beq.n	8009870 <_strtod_l+0x130>
 800987c:	2b00      	cmp	r3, #0
 800987e:	d0a3      	beq.n	80097c8 <_strtod_l+0x88>
 8009880:	2301      	movs	r3, #1
 8009882:	f04f 0900 	mov.w	r9, #0
 8009886:	9304      	str	r3, [sp, #16]
 8009888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800988a:	9308      	str	r3, [sp, #32]
 800988c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009890:	464f      	mov	r7, r9
 8009892:	220a      	movs	r2, #10
 8009894:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009896:	7806      	ldrb	r6, [r0, #0]
 8009898:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800989c:	b2d9      	uxtb	r1, r3
 800989e:	2909      	cmp	r1, #9
 80098a0:	d92a      	bls.n	80098f8 <_strtod_l+0x1b8>
 80098a2:	9905      	ldr	r1, [sp, #20]
 80098a4:	462a      	mov	r2, r5
 80098a6:	f7ff ff1a 	bl	80096de <strncmp>
 80098aa:	b398      	cbz	r0, 8009914 <_strtod_l+0x1d4>
 80098ac:	2000      	movs	r0, #0
 80098ae:	4632      	mov	r2, r6
 80098b0:	463d      	mov	r5, r7
 80098b2:	9005      	str	r0, [sp, #20]
 80098b4:	4603      	mov	r3, r0
 80098b6:	2a65      	cmp	r2, #101	; 0x65
 80098b8:	d001      	beq.n	80098be <_strtod_l+0x17e>
 80098ba:	2a45      	cmp	r2, #69	; 0x45
 80098bc:	d118      	bne.n	80098f0 <_strtod_l+0x1b0>
 80098be:	b91d      	cbnz	r5, 80098c8 <_strtod_l+0x188>
 80098c0:	9a04      	ldr	r2, [sp, #16]
 80098c2:	4302      	orrs	r2, r0
 80098c4:	d09e      	beq.n	8009804 <_strtod_l+0xc4>
 80098c6:	2500      	movs	r5, #0
 80098c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80098cc:	f108 0201 	add.w	r2, r8, #1
 80098d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80098d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80098d6:	2a2b      	cmp	r2, #43	; 0x2b
 80098d8:	d075      	beq.n	80099c6 <_strtod_l+0x286>
 80098da:	2a2d      	cmp	r2, #45	; 0x2d
 80098dc:	d07b      	beq.n	80099d6 <_strtod_l+0x296>
 80098de:	f04f 0c00 	mov.w	ip, #0
 80098e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80098e6:	2909      	cmp	r1, #9
 80098e8:	f240 8082 	bls.w	80099f0 <_strtod_l+0x2b0>
 80098ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80098f0:	2600      	movs	r6, #0
 80098f2:	e09d      	b.n	8009a30 <_strtod_l+0x2f0>
 80098f4:	2300      	movs	r3, #0
 80098f6:	e7c4      	b.n	8009882 <_strtod_l+0x142>
 80098f8:	2f08      	cmp	r7, #8
 80098fa:	bfd8      	it	le
 80098fc:	9907      	ldrle	r1, [sp, #28]
 80098fe:	f100 0001 	add.w	r0, r0, #1
 8009902:	bfda      	itte	le
 8009904:	fb02 3301 	mlale	r3, r2, r1, r3
 8009908:	9307      	strle	r3, [sp, #28]
 800990a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800990e:	3701      	adds	r7, #1
 8009910:	9017      	str	r0, [sp, #92]	; 0x5c
 8009912:	e7bf      	b.n	8009894 <_strtod_l+0x154>
 8009914:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009916:	195a      	adds	r2, r3, r5
 8009918:	9217      	str	r2, [sp, #92]	; 0x5c
 800991a:	5d5a      	ldrb	r2, [r3, r5]
 800991c:	2f00      	cmp	r7, #0
 800991e:	d037      	beq.n	8009990 <_strtod_l+0x250>
 8009920:	9005      	str	r0, [sp, #20]
 8009922:	463d      	mov	r5, r7
 8009924:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009928:	2b09      	cmp	r3, #9
 800992a:	d912      	bls.n	8009952 <_strtod_l+0x212>
 800992c:	2301      	movs	r3, #1
 800992e:	e7c2      	b.n	80098b6 <_strtod_l+0x176>
 8009930:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009932:	1c5a      	adds	r2, r3, #1
 8009934:	9217      	str	r2, [sp, #92]	; 0x5c
 8009936:	785a      	ldrb	r2, [r3, #1]
 8009938:	3001      	adds	r0, #1
 800993a:	2a30      	cmp	r2, #48	; 0x30
 800993c:	d0f8      	beq.n	8009930 <_strtod_l+0x1f0>
 800993e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009942:	2b08      	cmp	r3, #8
 8009944:	f200 84d9 	bhi.w	800a2fa <_strtod_l+0xbba>
 8009948:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800994a:	9005      	str	r0, [sp, #20]
 800994c:	2000      	movs	r0, #0
 800994e:	9308      	str	r3, [sp, #32]
 8009950:	4605      	mov	r5, r0
 8009952:	3a30      	subs	r2, #48	; 0x30
 8009954:	f100 0301 	add.w	r3, r0, #1
 8009958:	d014      	beq.n	8009984 <_strtod_l+0x244>
 800995a:	9905      	ldr	r1, [sp, #20]
 800995c:	4419      	add	r1, r3
 800995e:	9105      	str	r1, [sp, #20]
 8009960:	462b      	mov	r3, r5
 8009962:	eb00 0e05 	add.w	lr, r0, r5
 8009966:	210a      	movs	r1, #10
 8009968:	4573      	cmp	r3, lr
 800996a:	d113      	bne.n	8009994 <_strtod_l+0x254>
 800996c:	182b      	adds	r3, r5, r0
 800996e:	2b08      	cmp	r3, #8
 8009970:	f105 0501 	add.w	r5, r5, #1
 8009974:	4405      	add	r5, r0
 8009976:	dc1c      	bgt.n	80099b2 <_strtod_l+0x272>
 8009978:	9907      	ldr	r1, [sp, #28]
 800997a:	230a      	movs	r3, #10
 800997c:	fb03 2301 	mla	r3, r3, r1, r2
 8009980:	9307      	str	r3, [sp, #28]
 8009982:	2300      	movs	r3, #0
 8009984:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009986:	1c51      	adds	r1, r2, #1
 8009988:	9117      	str	r1, [sp, #92]	; 0x5c
 800998a:	7852      	ldrb	r2, [r2, #1]
 800998c:	4618      	mov	r0, r3
 800998e:	e7c9      	b.n	8009924 <_strtod_l+0x1e4>
 8009990:	4638      	mov	r0, r7
 8009992:	e7d2      	b.n	800993a <_strtod_l+0x1fa>
 8009994:	2b08      	cmp	r3, #8
 8009996:	dc04      	bgt.n	80099a2 <_strtod_l+0x262>
 8009998:	9e07      	ldr	r6, [sp, #28]
 800999a:	434e      	muls	r6, r1
 800999c:	9607      	str	r6, [sp, #28]
 800999e:	3301      	adds	r3, #1
 80099a0:	e7e2      	b.n	8009968 <_strtod_l+0x228>
 80099a2:	f103 0c01 	add.w	ip, r3, #1
 80099a6:	f1bc 0f10 	cmp.w	ip, #16
 80099aa:	bfd8      	it	le
 80099ac:	fb01 f909 	mulle.w	r9, r1, r9
 80099b0:	e7f5      	b.n	800999e <_strtod_l+0x25e>
 80099b2:	2d10      	cmp	r5, #16
 80099b4:	bfdc      	itt	le
 80099b6:	230a      	movle	r3, #10
 80099b8:	fb03 2909 	mlale	r9, r3, r9, r2
 80099bc:	e7e1      	b.n	8009982 <_strtod_l+0x242>
 80099be:	2300      	movs	r3, #0
 80099c0:	9305      	str	r3, [sp, #20]
 80099c2:	2301      	movs	r3, #1
 80099c4:	e77c      	b.n	80098c0 <_strtod_l+0x180>
 80099c6:	f04f 0c00 	mov.w	ip, #0
 80099ca:	f108 0202 	add.w	r2, r8, #2
 80099ce:	9217      	str	r2, [sp, #92]	; 0x5c
 80099d0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80099d4:	e785      	b.n	80098e2 <_strtod_l+0x1a2>
 80099d6:	f04f 0c01 	mov.w	ip, #1
 80099da:	e7f6      	b.n	80099ca <_strtod_l+0x28a>
 80099dc:	0800dbdc 	.word	0x0800dbdc
 80099e0:	0800d9f8 	.word	0x0800d9f8
 80099e4:	7ff00000 	.word	0x7ff00000
 80099e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80099ea:	1c51      	adds	r1, r2, #1
 80099ec:	9117      	str	r1, [sp, #92]	; 0x5c
 80099ee:	7852      	ldrb	r2, [r2, #1]
 80099f0:	2a30      	cmp	r2, #48	; 0x30
 80099f2:	d0f9      	beq.n	80099e8 <_strtod_l+0x2a8>
 80099f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80099f8:	2908      	cmp	r1, #8
 80099fa:	f63f af79 	bhi.w	80098f0 <_strtod_l+0x1b0>
 80099fe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009a02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009a04:	9206      	str	r2, [sp, #24]
 8009a06:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009a08:	1c51      	adds	r1, r2, #1
 8009a0a:	9117      	str	r1, [sp, #92]	; 0x5c
 8009a0c:	7852      	ldrb	r2, [r2, #1]
 8009a0e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009a12:	2e09      	cmp	r6, #9
 8009a14:	d937      	bls.n	8009a86 <_strtod_l+0x346>
 8009a16:	9e06      	ldr	r6, [sp, #24]
 8009a18:	1b89      	subs	r1, r1, r6
 8009a1a:	2908      	cmp	r1, #8
 8009a1c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009a20:	dc02      	bgt.n	8009a28 <_strtod_l+0x2e8>
 8009a22:	4576      	cmp	r6, lr
 8009a24:	bfa8      	it	ge
 8009a26:	4676      	movge	r6, lr
 8009a28:	f1bc 0f00 	cmp.w	ip, #0
 8009a2c:	d000      	beq.n	8009a30 <_strtod_l+0x2f0>
 8009a2e:	4276      	negs	r6, r6
 8009a30:	2d00      	cmp	r5, #0
 8009a32:	d14d      	bne.n	8009ad0 <_strtod_l+0x390>
 8009a34:	9904      	ldr	r1, [sp, #16]
 8009a36:	4301      	orrs	r1, r0
 8009a38:	f47f aec6 	bne.w	80097c8 <_strtod_l+0x88>
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f47f aee1 	bne.w	8009804 <_strtod_l+0xc4>
 8009a42:	2a69      	cmp	r2, #105	; 0x69
 8009a44:	d027      	beq.n	8009a96 <_strtod_l+0x356>
 8009a46:	dc24      	bgt.n	8009a92 <_strtod_l+0x352>
 8009a48:	2a49      	cmp	r2, #73	; 0x49
 8009a4a:	d024      	beq.n	8009a96 <_strtod_l+0x356>
 8009a4c:	2a4e      	cmp	r2, #78	; 0x4e
 8009a4e:	f47f aed9 	bne.w	8009804 <_strtod_l+0xc4>
 8009a52:	499f      	ldr	r1, [pc, #636]	; (8009cd0 <_strtod_l+0x590>)
 8009a54:	a817      	add	r0, sp, #92	; 0x5c
 8009a56:	f002 fa05 	bl	800be64 <__match>
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	f43f aed2 	beq.w	8009804 <_strtod_l+0xc4>
 8009a60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	2b28      	cmp	r3, #40	; 0x28
 8009a66:	d12d      	bne.n	8009ac4 <_strtod_l+0x384>
 8009a68:	499a      	ldr	r1, [pc, #616]	; (8009cd4 <_strtod_l+0x594>)
 8009a6a:	aa1a      	add	r2, sp, #104	; 0x68
 8009a6c:	a817      	add	r0, sp, #92	; 0x5c
 8009a6e:	f002 fa0d 	bl	800be8c <__hexnan>
 8009a72:	2805      	cmp	r0, #5
 8009a74:	d126      	bne.n	8009ac4 <_strtod_l+0x384>
 8009a76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a78:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009a7c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009a80:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009a84:	e6a0      	b.n	80097c8 <_strtod_l+0x88>
 8009a86:	210a      	movs	r1, #10
 8009a88:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009a8c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009a90:	e7b9      	b.n	8009a06 <_strtod_l+0x2c6>
 8009a92:	2a6e      	cmp	r2, #110	; 0x6e
 8009a94:	e7db      	b.n	8009a4e <_strtod_l+0x30e>
 8009a96:	4990      	ldr	r1, [pc, #576]	; (8009cd8 <_strtod_l+0x598>)
 8009a98:	a817      	add	r0, sp, #92	; 0x5c
 8009a9a:	f002 f9e3 	bl	800be64 <__match>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	f43f aeb0 	beq.w	8009804 <_strtod_l+0xc4>
 8009aa4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009aa6:	498d      	ldr	r1, [pc, #564]	; (8009cdc <_strtod_l+0x59c>)
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	a817      	add	r0, sp, #92	; 0x5c
 8009aac:	9317      	str	r3, [sp, #92]	; 0x5c
 8009aae:	f002 f9d9 	bl	800be64 <__match>
 8009ab2:	b910      	cbnz	r0, 8009aba <_strtod_l+0x37a>
 8009ab4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	9317      	str	r3, [sp, #92]	; 0x5c
 8009aba:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009cec <_strtod_l+0x5ac>
 8009abe:	f04f 0a00 	mov.w	sl, #0
 8009ac2:	e681      	b.n	80097c8 <_strtod_l+0x88>
 8009ac4:	4886      	ldr	r0, [pc, #536]	; (8009ce0 <_strtod_l+0x5a0>)
 8009ac6:	f003 fabb 	bl	800d040 <nan>
 8009aca:	ec5b ab10 	vmov	sl, fp, d0
 8009ace:	e67b      	b.n	80097c8 <_strtod_l+0x88>
 8009ad0:	9b05      	ldr	r3, [sp, #20]
 8009ad2:	9807      	ldr	r0, [sp, #28]
 8009ad4:	1af3      	subs	r3, r6, r3
 8009ad6:	2f00      	cmp	r7, #0
 8009ad8:	bf08      	it	eq
 8009ada:	462f      	moveq	r7, r5
 8009adc:	2d10      	cmp	r5, #16
 8009ade:	9306      	str	r3, [sp, #24]
 8009ae0:	46a8      	mov	r8, r5
 8009ae2:	bfa8      	it	ge
 8009ae4:	f04f 0810 	movge.w	r8, #16
 8009ae8:	f7f6 fd14 	bl	8000514 <__aeabi_ui2d>
 8009aec:	2d09      	cmp	r5, #9
 8009aee:	4682      	mov	sl, r0
 8009af0:	468b      	mov	fp, r1
 8009af2:	dd13      	ble.n	8009b1c <_strtod_l+0x3dc>
 8009af4:	4b7b      	ldr	r3, [pc, #492]	; (8009ce4 <_strtod_l+0x5a4>)
 8009af6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009afa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009afe:	f7f6 fd83 	bl	8000608 <__aeabi_dmul>
 8009b02:	4682      	mov	sl, r0
 8009b04:	4648      	mov	r0, r9
 8009b06:	468b      	mov	fp, r1
 8009b08:	f7f6 fd04 	bl	8000514 <__aeabi_ui2d>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	460b      	mov	r3, r1
 8009b10:	4650      	mov	r0, sl
 8009b12:	4659      	mov	r1, fp
 8009b14:	f7f6 fbc2 	bl	800029c <__adddf3>
 8009b18:	4682      	mov	sl, r0
 8009b1a:	468b      	mov	fp, r1
 8009b1c:	2d0f      	cmp	r5, #15
 8009b1e:	dc38      	bgt.n	8009b92 <_strtod_l+0x452>
 8009b20:	9b06      	ldr	r3, [sp, #24]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	f43f ae50 	beq.w	80097c8 <_strtod_l+0x88>
 8009b28:	dd24      	ble.n	8009b74 <_strtod_l+0x434>
 8009b2a:	2b16      	cmp	r3, #22
 8009b2c:	dc0b      	bgt.n	8009b46 <_strtod_l+0x406>
 8009b2e:	496d      	ldr	r1, [pc, #436]	; (8009ce4 <_strtod_l+0x5a4>)
 8009b30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b38:	4652      	mov	r2, sl
 8009b3a:	465b      	mov	r3, fp
 8009b3c:	f7f6 fd64 	bl	8000608 <__aeabi_dmul>
 8009b40:	4682      	mov	sl, r0
 8009b42:	468b      	mov	fp, r1
 8009b44:	e640      	b.n	80097c8 <_strtod_l+0x88>
 8009b46:	9a06      	ldr	r2, [sp, #24]
 8009b48:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	db20      	blt.n	8009b92 <_strtod_l+0x452>
 8009b50:	4c64      	ldr	r4, [pc, #400]	; (8009ce4 <_strtod_l+0x5a4>)
 8009b52:	f1c5 050f 	rsb	r5, r5, #15
 8009b56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009b5a:	4652      	mov	r2, sl
 8009b5c:	465b      	mov	r3, fp
 8009b5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b62:	f7f6 fd51 	bl	8000608 <__aeabi_dmul>
 8009b66:	9b06      	ldr	r3, [sp, #24]
 8009b68:	1b5d      	subs	r5, r3, r5
 8009b6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009b6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009b72:	e7e3      	b.n	8009b3c <_strtod_l+0x3fc>
 8009b74:	9b06      	ldr	r3, [sp, #24]
 8009b76:	3316      	adds	r3, #22
 8009b78:	db0b      	blt.n	8009b92 <_strtod_l+0x452>
 8009b7a:	9b05      	ldr	r3, [sp, #20]
 8009b7c:	1b9e      	subs	r6, r3, r6
 8009b7e:	4b59      	ldr	r3, [pc, #356]	; (8009ce4 <_strtod_l+0x5a4>)
 8009b80:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009b84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b88:	4650      	mov	r0, sl
 8009b8a:	4659      	mov	r1, fp
 8009b8c:	f7f6 fe66 	bl	800085c <__aeabi_ddiv>
 8009b90:	e7d6      	b.n	8009b40 <_strtod_l+0x400>
 8009b92:	9b06      	ldr	r3, [sp, #24]
 8009b94:	eba5 0808 	sub.w	r8, r5, r8
 8009b98:	4498      	add	r8, r3
 8009b9a:	f1b8 0f00 	cmp.w	r8, #0
 8009b9e:	dd74      	ble.n	8009c8a <_strtod_l+0x54a>
 8009ba0:	f018 030f 	ands.w	r3, r8, #15
 8009ba4:	d00a      	beq.n	8009bbc <_strtod_l+0x47c>
 8009ba6:	494f      	ldr	r1, [pc, #316]	; (8009ce4 <_strtod_l+0x5a4>)
 8009ba8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009bac:	4652      	mov	r2, sl
 8009bae:	465b      	mov	r3, fp
 8009bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bb4:	f7f6 fd28 	bl	8000608 <__aeabi_dmul>
 8009bb8:	4682      	mov	sl, r0
 8009bba:	468b      	mov	fp, r1
 8009bbc:	f038 080f 	bics.w	r8, r8, #15
 8009bc0:	d04f      	beq.n	8009c62 <_strtod_l+0x522>
 8009bc2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009bc6:	dd22      	ble.n	8009c0e <_strtod_l+0x4ce>
 8009bc8:	2500      	movs	r5, #0
 8009bca:	462e      	mov	r6, r5
 8009bcc:	9507      	str	r5, [sp, #28]
 8009bce:	9505      	str	r5, [sp, #20]
 8009bd0:	2322      	movs	r3, #34	; 0x22
 8009bd2:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009cec <_strtod_l+0x5ac>
 8009bd6:	6023      	str	r3, [r4, #0]
 8009bd8:	f04f 0a00 	mov.w	sl, #0
 8009bdc:	9b07      	ldr	r3, [sp, #28]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	f43f adf2 	beq.w	80097c8 <_strtod_l+0x88>
 8009be4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009be6:	4620      	mov	r0, r4
 8009be8:	f002 faca 	bl	800c180 <_Bfree>
 8009bec:	9905      	ldr	r1, [sp, #20]
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f002 fac6 	bl	800c180 <_Bfree>
 8009bf4:	4631      	mov	r1, r6
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	f002 fac2 	bl	800c180 <_Bfree>
 8009bfc:	9907      	ldr	r1, [sp, #28]
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f002 fabe 	bl	800c180 <_Bfree>
 8009c04:	4629      	mov	r1, r5
 8009c06:	4620      	mov	r0, r4
 8009c08:	f002 faba 	bl	800c180 <_Bfree>
 8009c0c:	e5dc      	b.n	80097c8 <_strtod_l+0x88>
 8009c0e:	4b36      	ldr	r3, [pc, #216]	; (8009ce8 <_strtod_l+0x5a8>)
 8009c10:	9304      	str	r3, [sp, #16]
 8009c12:	2300      	movs	r3, #0
 8009c14:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009c18:	4650      	mov	r0, sl
 8009c1a:	4659      	mov	r1, fp
 8009c1c:	4699      	mov	r9, r3
 8009c1e:	f1b8 0f01 	cmp.w	r8, #1
 8009c22:	dc21      	bgt.n	8009c68 <_strtod_l+0x528>
 8009c24:	b10b      	cbz	r3, 8009c2a <_strtod_l+0x4ea>
 8009c26:	4682      	mov	sl, r0
 8009c28:	468b      	mov	fp, r1
 8009c2a:	4b2f      	ldr	r3, [pc, #188]	; (8009ce8 <_strtod_l+0x5a8>)
 8009c2c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009c30:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009c34:	4652      	mov	r2, sl
 8009c36:	465b      	mov	r3, fp
 8009c38:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009c3c:	f7f6 fce4 	bl	8000608 <__aeabi_dmul>
 8009c40:	4b2a      	ldr	r3, [pc, #168]	; (8009cec <_strtod_l+0x5ac>)
 8009c42:	460a      	mov	r2, r1
 8009c44:	400b      	ands	r3, r1
 8009c46:	492a      	ldr	r1, [pc, #168]	; (8009cf0 <_strtod_l+0x5b0>)
 8009c48:	428b      	cmp	r3, r1
 8009c4a:	4682      	mov	sl, r0
 8009c4c:	d8bc      	bhi.n	8009bc8 <_strtod_l+0x488>
 8009c4e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009c52:	428b      	cmp	r3, r1
 8009c54:	bf86      	itte	hi
 8009c56:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009cf4 <_strtod_l+0x5b4>
 8009c5a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8009c5e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009c62:	2300      	movs	r3, #0
 8009c64:	9304      	str	r3, [sp, #16]
 8009c66:	e084      	b.n	8009d72 <_strtod_l+0x632>
 8009c68:	f018 0f01 	tst.w	r8, #1
 8009c6c:	d005      	beq.n	8009c7a <_strtod_l+0x53a>
 8009c6e:	9b04      	ldr	r3, [sp, #16]
 8009c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c74:	f7f6 fcc8 	bl	8000608 <__aeabi_dmul>
 8009c78:	2301      	movs	r3, #1
 8009c7a:	9a04      	ldr	r2, [sp, #16]
 8009c7c:	3208      	adds	r2, #8
 8009c7e:	f109 0901 	add.w	r9, r9, #1
 8009c82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009c86:	9204      	str	r2, [sp, #16]
 8009c88:	e7c9      	b.n	8009c1e <_strtod_l+0x4de>
 8009c8a:	d0ea      	beq.n	8009c62 <_strtod_l+0x522>
 8009c8c:	f1c8 0800 	rsb	r8, r8, #0
 8009c90:	f018 020f 	ands.w	r2, r8, #15
 8009c94:	d00a      	beq.n	8009cac <_strtod_l+0x56c>
 8009c96:	4b13      	ldr	r3, [pc, #76]	; (8009ce4 <_strtod_l+0x5a4>)
 8009c98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c9c:	4650      	mov	r0, sl
 8009c9e:	4659      	mov	r1, fp
 8009ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca4:	f7f6 fdda 	bl	800085c <__aeabi_ddiv>
 8009ca8:	4682      	mov	sl, r0
 8009caa:	468b      	mov	fp, r1
 8009cac:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009cb0:	d0d7      	beq.n	8009c62 <_strtod_l+0x522>
 8009cb2:	f1b8 0f1f 	cmp.w	r8, #31
 8009cb6:	dd1f      	ble.n	8009cf8 <_strtod_l+0x5b8>
 8009cb8:	2500      	movs	r5, #0
 8009cba:	462e      	mov	r6, r5
 8009cbc:	9507      	str	r5, [sp, #28]
 8009cbe:	9505      	str	r5, [sp, #20]
 8009cc0:	2322      	movs	r3, #34	; 0x22
 8009cc2:	f04f 0a00 	mov.w	sl, #0
 8009cc6:	f04f 0b00 	mov.w	fp, #0
 8009cca:	6023      	str	r3, [r4, #0]
 8009ccc:	e786      	b.n	8009bdc <_strtod_l+0x49c>
 8009cce:	bf00      	nop
 8009cd0:	0800d9d1 	.word	0x0800d9d1
 8009cd4:	0800da0c 	.word	0x0800da0c
 8009cd8:	0800d9c9 	.word	0x0800d9c9
 8009cdc:	0800da87 	.word	0x0800da87
 8009ce0:	0800da83 	.word	0x0800da83
 8009ce4:	0800dc78 	.word	0x0800dc78
 8009ce8:	0800dc50 	.word	0x0800dc50
 8009cec:	7ff00000 	.word	0x7ff00000
 8009cf0:	7ca00000 	.word	0x7ca00000
 8009cf4:	7fefffff 	.word	0x7fefffff
 8009cf8:	f018 0310 	ands.w	r3, r8, #16
 8009cfc:	bf18      	it	ne
 8009cfe:	236a      	movne	r3, #106	; 0x6a
 8009d00:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a0b0 <_strtod_l+0x970>
 8009d04:	9304      	str	r3, [sp, #16]
 8009d06:	4650      	mov	r0, sl
 8009d08:	4659      	mov	r1, fp
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f018 0f01 	tst.w	r8, #1
 8009d10:	d004      	beq.n	8009d1c <_strtod_l+0x5dc>
 8009d12:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009d16:	f7f6 fc77 	bl	8000608 <__aeabi_dmul>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009d20:	f109 0908 	add.w	r9, r9, #8
 8009d24:	d1f2      	bne.n	8009d0c <_strtod_l+0x5cc>
 8009d26:	b10b      	cbz	r3, 8009d2c <_strtod_l+0x5ec>
 8009d28:	4682      	mov	sl, r0
 8009d2a:	468b      	mov	fp, r1
 8009d2c:	9b04      	ldr	r3, [sp, #16]
 8009d2e:	b1c3      	cbz	r3, 8009d62 <_strtod_l+0x622>
 8009d30:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009d34:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	4659      	mov	r1, fp
 8009d3c:	dd11      	ble.n	8009d62 <_strtod_l+0x622>
 8009d3e:	2b1f      	cmp	r3, #31
 8009d40:	f340 8124 	ble.w	8009f8c <_strtod_l+0x84c>
 8009d44:	2b34      	cmp	r3, #52	; 0x34
 8009d46:	bfde      	ittt	le
 8009d48:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009d4c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 8009d50:	fa03 f202 	lslle.w	r2, r3, r2
 8009d54:	f04f 0a00 	mov.w	sl, #0
 8009d58:	bfcc      	ite	gt
 8009d5a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009d5e:	ea02 0b01 	andle.w	fp, r2, r1
 8009d62:	2200      	movs	r2, #0
 8009d64:	2300      	movs	r3, #0
 8009d66:	4650      	mov	r0, sl
 8009d68:	4659      	mov	r1, fp
 8009d6a:	f7f6 feb5 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d6e:	2800      	cmp	r0, #0
 8009d70:	d1a2      	bne.n	8009cb8 <_strtod_l+0x578>
 8009d72:	9b07      	ldr	r3, [sp, #28]
 8009d74:	9300      	str	r3, [sp, #0]
 8009d76:	9908      	ldr	r1, [sp, #32]
 8009d78:	462b      	mov	r3, r5
 8009d7a:	463a      	mov	r2, r7
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	f002 fa67 	bl	800c250 <__s2b>
 8009d82:	9007      	str	r0, [sp, #28]
 8009d84:	2800      	cmp	r0, #0
 8009d86:	f43f af1f 	beq.w	8009bc8 <_strtod_l+0x488>
 8009d8a:	9b05      	ldr	r3, [sp, #20]
 8009d8c:	1b9e      	subs	r6, r3, r6
 8009d8e:	9b06      	ldr	r3, [sp, #24]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	bfb4      	ite	lt
 8009d94:	4633      	movlt	r3, r6
 8009d96:	2300      	movge	r3, #0
 8009d98:	930c      	str	r3, [sp, #48]	; 0x30
 8009d9a:	9b06      	ldr	r3, [sp, #24]
 8009d9c:	2500      	movs	r5, #0
 8009d9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009da2:	9312      	str	r3, [sp, #72]	; 0x48
 8009da4:	462e      	mov	r6, r5
 8009da6:	9b07      	ldr	r3, [sp, #28]
 8009da8:	4620      	mov	r0, r4
 8009daa:	6859      	ldr	r1, [r3, #4]
 8009dac:	f002 f9a8 	bl	800c100 <_Balloc>
 8009db0:	9005      	str	r0, [sp, #20]
 8009db2:	2800      	cmp	r0, #0
 8009db4:	f43f af0c 	beq.w	8009bd0 <_strtod_l+0x490>
 8009db8:	9b07      	ldr	r3, [sp, #28]
 8009dba:	691a      	ldr	r2, [r3, #16]
 8009dbc:	3202      	adds	r2, #2
 8009dbe:	f103 010c 	add.w	r1, r3, #12
 8009dc2:	0092      	lsls	r2, r2, #2
 8009dc4:	300c      	adds	r0, #12
 8009dc6:	f7fe feb7 	bl	8008b38 <memcpy>
 8009dca:	ec4b ab10 	vmov	d0, sl, fp
 8009dce:	aa1a      	add	r2, sp, #104	; 0x68
 8009dd0:	a919      	add	r1, sp, #100	; 0x64
 8009dd2:	4620      	mov	r0, r4
 8009dd4:	f002 fd82 	bl	800c8dc <__d2b>
 8009dd8:	ec4b ab18 	vmov	d8, sl, fp
 8009ddc:	9018      	str	r0, [sp, #96]	; 0x60
 8009dde:	2800      	cmp	r0, #0
 8009de0:	f43f aef6 	beq.w	8009bd0 <_strtod_l+0x490>
 8009de4:	2101      	movs	r1, #1
 8009de6:	4620      	mov	r0, r4
 8009de8:	f002 facc 	bl	800c384 <__i2b>
 8009dec:	4606      	mov	r6, r0
 8009dee:	2800      	cmp	r0, #0
 8009df0:	f43f aeee 	beq.w	8009bd0 <_strtod_l+0x490>
 8009df4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009df6:	9904      	ldr	r1, [sp, #16]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	bfab      	itete	ge
 8009dfc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009dfe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009e00:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009e02:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009e06:	bfac      	ite	ge
 8009e08:	eb03 0902 	addge.w	r9, r3, r2
 8009e0c:	1ad7      	sublt	r7, r2, r3
 8009e0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009e10:	eba3 0801 	sub.w	r8, r3, r1
 8009e14:	4490      	add	r8, r2
 8009e16:	4ba1      	ldr	r3, [pc, #644]	; (800a09c <_strtod_l+0x95c>)
 8009e18:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009e1c:	4598      	cmp	r8, r3
 8009e1e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009e22:	f280 80c7 	bge.w	8009fb4 <_strtod_l+0x874>
 8009e26:	eba3 0308 	sub.w	r3, r3, r8
 8009e2a:	2b1f      	cmp	r3, #31
 8009e2c:	eba2 0203 	sub.w	r2, r2, r3
 8009e30:	f04f 0101 	mov.w	r1, #1
 8009e34:	f300 80b1 	bgt.w	8009f9a <_strtod_l+0x85a>
 8009e38:	fa01 f303 	lsl.w	r3, r1, r3
 8009e3c:	930d      	str	r3, [sp, #52]	; 0x34
 8009e3e:	2300      	movs	r3, #0
 8009e40:	9308      	str	r3, [sp, #32]
 8009e42:	eb09 0802 	add.w	r8, r9, r2
 8009e46:	9b04      	ldr	r3, [sp, #16]
 8009e48:	45c1      	cmp	r9, r8
 8009e4a:	4417      	add	r7, r2
 8009e4c:	441f      	add	r7, r3
 8009e4e:	464b      	mov	r3, r9
 8009e50:	bfa8      	it	ge
 8009e52:	4643      	movge	r3, r8
 8009e54:	42bb      	cmp	r3, r7
 8009e56:	bfa8      	it	ge
 8009e58:	463b      	movge	r3, r7
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	bfc2      	ittt	gt
 8009e5e:	eba8 0803 	subgt.w	r8, r8, r3
 8009e62:	1aff      	subgt	r7, r7, r3
 8009e64:	eba9 0903 	subgt.w	r9, r9, r3
 8009e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	dd17      	ble.n	8009e9e <_strtod_l+0x75e>
 8009e6e:	4631      	mov	r1, r6
 8009e70:	461a      	mov	r2, r3
 8009e72:	4620      	mov	r0, r4
 8009e74:	f002 fb46 	bl	800c504 <__pow5mult>
 8009e78:	4606      	mov	r6, r0
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	f43f aea8 	beq.w	8009bd0 <_strtod_l+0x490>
 8009e80:	4601      	mov	r1, r0
 8009e82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009e84:	4620      	mov	r0, r4
 8009e86:	f002 fa93 	bl	800c3b0 <__multiply>
 8009e8a:	900b      	str	r0, [sp, #44]	; 0x2c
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	f43f ae9f 	beq.w	8009bd0 <_strtod_l+0x490>
 8009e92:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009e94:	4620      	mov	r0, r4
 8009e96:	f002 f973 	bl	800c180 <_Bfree>
 8009e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e9c:	9318      	str	r3, [sp, #96]	; 0x60
 8009e9e:	f1b8 0f00 	cmp.w	r8, #0
 8009ea2:	f300 808c 	bgt.w	8009fbe <_strtod_l+0x87e>
 8009ea6:	9b06      	ldr	r3, [sp, #24]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	dd08      	ble.n	8009ebe <_strtod_l+0x77e>
 8009eac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009eae:	9905      	ldr	r1, [sp, #20]
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	f002 fb27 	bl	800c504 <__pow5mult>
 8009eb6:	9005      	str	r0, [sp, #20]
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	f43f ae89 	beq.w	8009bd0 <_strtod_l+0x490>
 8009ebe:	2f00      	cmp	r7, #0
 8009ec0:	dd08      	ble.n	8009ed4 <_strtod_l+0x794>
 8009ec2:	9905      	ldr	r1, [sp, #20]
 8009ec4:	463a      	mov	r2, r7
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f002 fb76 	bl	800c5b8 <__lshift>
 8009ecc:	9005      	str	r0, [sp, #20]
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	f43f ae7e 	beq.w	8009bd0 <_strtod_l+0x490>
 8009ed4:	f1b9 0f00 	cmp.w	r9, #0
 8009ed8:	dd08      	ble.n	8009eec <_strtod_l+0x7ac>
 8009eda:	4631      	mov	r1, r6
 8009edc:	464a      	mov	r2, r9
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f002 fb6a 	bl	800c5b8 <__lshift>
 8009ee4:	4606      	mov	r6, r0
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	f43f ae72 	beq.w	8009bd0 <_strtod_l+0x490>
 8009eec:	9a05      	ldr	r2, [sp, #20]
 8009eee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ef0:	4620      	mov	r0, r4
 8009ef2:	f002 fbed 	bl	800c6d0 <__mdiff>
 8009ef6:	4605      	mov	r5, r0
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	f43f ae69 	beq.w	8009bd0 <_strtod_l+0x490>
 8009efe:	68c3      	ldr	r3, [r0, #12]
 8009f00:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f02:	2300      	movs	r3, #0
 8009f04:	60c3      	str	r3, [r0, #12]
 8009f06:	4631      	mov	r1, r6
 8009f08:	f002 fbc6 	bl	800c698 <__mcmp>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	da60      	bge.n	8009fd2 <_strtod_l+0x892>
 8009f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f12:	ea53 030a 	orrs.w	r3, r3, sl
 8009f16:	f040 8082 	bne.w	800a01e <_strtod_l+0x8de>
 8009f1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d17d      	bne.n	800a01e <_strtod_l+0x8de>
 8009f22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f26:	0d1b      	lsrs	r3, r3, #20
 8009f28:	051b      	lsls	r3, r3, #20
 8009f2a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009f2e:	d976      	bls.n	800a01e <_strtod_l+0x8de>
 8009f30:	696b      	ldr	r3, [r5, #20]
 8009f32:	b913      	cbnz	r3, 8009f3a <_strtod_l+0x7fa>
 8009f34:	692b      	ldr	r3, [r5, #16]
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	dd71      	ble.n	800a01e <_strtod_l+0x8de>
 8009f3a:	4629      	mov	r1, r5
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f002 fb3a 	bl	800c5b8 <__lshift>
 8009f44:	4631      	mov	r1, r6
 8009f46:	4605      	mov	r5, r0
 8009f48:	f002 fba6 	bl	800c698 <__mcmp>
 8009f4c:	2800      	cmp	r0, #0
 8009f4e:	dd66      	ble.n	800a01e <_strtod_l+0x8de>
 8009f50:	9904      	ldr	r1, [sp, #16]
 8009f52:	4a53      	ldr	r2, [pc, #332]	; (800a0a0 <_strtod_l+0x960>)
 8009f54:	465b      	mov	r3, fp
 8009f56:	2900      	cmp	r1, #0
 8009f58:	f000 8081 	beq.w	800a05e <_strtod_l+0x91e>
 8009f5c:	ea02 010b 	and.w	r1, r2, fp
 8009f60:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009f64:	dc7b      	bgt.n	800a05e <_strtod_l+0x91e>
 8009f66:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009f6a:	f77f aea9 	ble.w	8009cc0 <_strtod_l+0x580>
 8009f6e:	4b4d      	ldr	r3, [pc, #308]	; (800a0a4 <_strtod_l+0x964>)
 8009f70:	4650      	mov	r0, sl
 8009f72:	4659      	mov	r1, fp
 8009f74:	2200      	movs	r2, #0
 8009f76:	f7f6 fb47 	bl	8000608 <__aeabi_dmul>
 8009f7a:	460b      	mov	r3, r1
 8009f7c:	4303      	orrs	r3, r0
 8009f7e:	bf08      	it	eq
 8009f80:	2322      	moveq	r3, #34	; 0x22
 8009f82:	4682      	mov	sl, r0
 8009f84:	468b      	mov	fp, r1
 8009f86:	bf08      	it	eq
 8009f88:	6023      	streq	r3, [r4, #0]
 8009f8a:	e62b      	b.n	8009be4 <_strtod_l+0x4a4>
 8009f8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f90:	fa02 f303 	lsl.w	r3, r2, r3
 8009f94:	ea03 0a0a 	and.w	sl, r3, sl
 8009f98:	e6e3      	b.n	8009d62 <_strtod_l+0x622>
 8009f9a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009f9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009fa2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009fa6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009faa:	fa01 f308 	lsl.w	r3, r1, r8
 8009fae:	9308      	str	r3, [sp, #32]
 8009fb0:	910d      	str	r1, [sp, #52]	; 0x34
 8009fb2:	e746      	b.n	8009e42 <_strtod_l+0x702>
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	9308      	str	r3, [sp, #32]
 8009fb8:	2301      	movs	r3, #1
 8009fba:	930d      	str	r3, [sp, #52]	; 0x34
 8009fbc:	e741      	b.n	8009e42 <_strtod_l+0x702>
 8009fbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009fc0:	4642      	mov	r2, r8
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f002 faf8 	bl	800c5b8 <__lshift>
 8009fc8:	9018      	str	r0, [sp, #96]	; 0x60
 8009fca:	2800      	cmp	r0, #0
 8009fcc:	f47f af6b 	bne.w	8009ea6 <_strtod_l+0x766>
 8009fd0:	e5fe      	b.n	8009bd0 <_strtod_l+0x490>
 8009fd2:	465f      	mov	r7, fp
 8009fd4:	d16e      	bne.n	800a0b4 <_strtod_l+0x974>
 8009fd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009fdc:	b342      	cbz	r2, 800a030 <_strtod_l+0x8f0>
 8009fde:	4a32      	ldr	r2, [pc, #200]	; (800a0a8 <_strtod_l+0x968>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d128      	bne.n	800a036 <_strtod_l+0x8f6>
 8009fe4:	9b04      	ldr	r3, [sp, #16]
 8009fe6:	4651      	mov	r1, sl
 8009fe8:	b1eb      	cbz	r3, 800a026 <_strtod_l+0x8e6>
 8009fea:	4b2d      	ldr	r3, [pc, #180]	; (800a0a0 <_strtod_l+0x960>)
 8009fec:	403b      	ands	r3, r7
 8009fee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009ff2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ff6:	d819      	bhi.n	800a02c <_strtod_l+0x8ec>
 8009ff8:	0d1b      	lsrs	r3, r3, #20
 8009ffa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009ffe:	fa02 f303 	lsl.w	r3, r2, r3
 800a002:	4299      	cmp	r1, r3
 800a004:	d117      	bne.n	800a036 <_strtod_l+0x8f6>
 800a006:	4b29      	ldr	r3, [pc, #164]	; (800a0ac <_strtod_l+0x96c>)
 800a008:	429f      	cmp	r7, r3
 800a00a:	d102      	bne.n	800a012 <_strtod_l+0x8d2>
 800a00c:	3101      	adds	r1, #1
 800a00e:	f43f addf 	beq.w	8009bd0 <_strtod_l+0x490>
 800a012:	4b23      	ldr	r3, [pc, #140]	; (800a0a0 <_strtod_l+0x960>)
 800a014:	403b      	ands	r3, r7
 800a016:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a01a:	f04f 0a00 	mov.w	sl, #0
 800a01e:	9b04      	ldr	r3, [sp, #16]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d1a4      	bne.n	8009f6e <_strtod_l+0x82e>
 800a024:	e5de      	b.n	8009be4 <_strtod_l+0x4a4>
 800a026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a02a:	e7ea      	b.n	800a002 <_strtod_l+0x8c2>
 800a02c:	4613      	mov	r3, r2
 800a02e:	e7e8      	b.n	800a002 <_strtod_l+0x8c2>
 800a030:	ea53 030a 	orrs.w	r3, r3, sl
 800a034:	d08c      	beq.n	8009f50 <_strtod_l+0x810>
 800a036:	9b08      	ldr	r3, [sp, #32]
 800a038:	b1db      	cbz	r3, 800a072 <_strtod_l+0x932>
 800a03a:	423b      	tst	r3, r7
 800a03c:	d0ef      	beq.n	800a01e <_strtod_l+0x8de>
 800a03e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a040:	9a04      	ldr	r2, [sp, #16]
 800a042:	4650      	mov	r0, sl
 800a044:	4659      	mov	r1, fp
 800a046:	b1c3      	cbz	r3, 800a07a <_strtod_l+0x93a>
 800a048:	f7ff fb5d 	bl	8009706 <sulp>
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	ec51 0b18 	vmov	r0, r1, d8
 800a054:	f7f6 f922 	bl	800029c <__adddf3>
 800a058:	4682      	mov	sl, r0
 800a05a:	468b      	mov	fp, r1
 800a05c:	e7df      	b.n	800a01e <_strtod_l+0x8de>
 800a05e:	4013      	ands	r3, r2
 800a060:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a064:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a068:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a06c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a070:	e7d5      	b.n	800a01e <_strtod_l+0x8de>
 800a072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a074:	ea13 0f0a 	tst.w	r3, sl
 800a078:	e7e0      	b.n	800a03c <_strtod_l+0x8fc>
 800a07a:	f7ff fb44 	bl	8009706 <sulp>
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	ec51 0b18 	vmov	r0, r1, d8
 800a086:	f7f6 f907 	bl	8000298 <__aeabi_dsub>
 800a08a:	2200      	movs	r2, #0
 800a08c:	2300      	movs	r3, #0
 800a08e:	4682      	mov	sl, r0
 800a090:	468b      	mov	fp, r1
 800a092:	f7f6 fd21 	bl	8000ad8 <__aeabi_dcmpeq>
 800a096:	2800      	cmp	r0, #0
 800a098:	d0c1      	beq.n	800a01e <_strtod_l+0x8de>
 800a09a:	e611      	b.n	8009cc0 <_strtod_l+0x580>
 800a09c:	fffffc02 	.word	0xfffffc02
 800a0a0:	7ff00000 	.word	0x7ff00000
 800a0a4:	39500000 	.word	0x39500000
 800a0a8:	000fffff 	.word	0x000fffff
 800a0ac:	7fefffff 	.word	0x7fefffff
 800a0b0:	0800da20 	.word	0x0800da20
 800a0b4:	4631      	mov	r1, r6
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	f002 fc6c 	bl	800c994 <__ratio>
 800a0bc:	ec59 8b10 	vmov	r8, r9, d0
 800a0c0:	ee10 0a10 	vmov	r0, s0
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a0ca:	4649      	mov	r1, r9
 800a0cc:	f7f6 fd18 	bl	8000b00 <__aeabi_dcmple>
 800a0d0:	2800      	cmp	r0, #0
 800a0d2:	d07a      	beq.n	800a1ca <_strtod_l+0xa8a>
 800a0d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d04a      	beq.n	800a170 <_strtod_l+0xa30>
 800a0da:	4b95      	ldr	r3, [pc, #596]	; (800a330 <_strtod_l+0xbf0>)
 800a0dc:	2200      	movs	r2, #0
 800a0de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a0e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a330 <_strtod_l+0xbf0>
 800a0e6:	f04f 0800 	mov.w	r8, #0
 800a0ea:	4b92      	ldr	r3, [pc, #584]	; (800a334 <_strtod_l+0xbf4>)
 800a0ec:	403b      	ands	r3, r7
 800a0ee:	930d      	str	r3, [sp, #52]	; 0x34
 800a0f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0f2:	4b91      	ldr	r3, [pc, #580]	; (800a338 <_strtod_l+0xbf8>)
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	f040 80b0 	bne.w	800a25a <_strtod_l+0xb1a>
 800a0fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a0fe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a102:	ec4b ab10 	vmov	d0, sl, fp
 800a106:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a10a:	f002 fb6b 	bl	800c7e4 <__ulp>
 800a10e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a112:	ec53 2b10 	vmov	r2, r3, d0
 800a116:	f7f6 fa77 	bl	8000608 <__aeabi_dmul>
 800a11a:	4652      	mov	r2, sl
 800a11c:	465b      	mov	r3, fp
 800a11e:	f7f6 f8bd 	bl	800029c <__adddf3>
 800a122:	460b      	mov	r3, r1
 800a124:	4983      	ldr	r1, [pc, #524]	; (800a334 <_strtod_l+0xbf4>)
 800a126:	4a85      	ldr	r2, [pc, #532]	; (800a33c <_strtod_l+0xbfc>)
 800a128:	4019      	ands	r1, r3
 800a12a:	4291      	cmp	r1, r2
 800a12c:	4682      	mov	sl, r0
 800a12e:	d960      	bls.n	800a1f2 <_strtod_l+0xab2>
 800a130:	ee18 3a90 	vmov	r3, s17
 800a134:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a138:	4293      	cmp	r3, r2
 800a13a:	d104      	bne.n	800a146 <_strtod_l+0xa06>
 800a13c:	ee18 3a10 	vmov	r3, s16
 800a140:	3301      	adds	r3, #1
 800a142:	f43f ad45 	beq.w	8009bd0 <_strtod_l+0x490>
 800a146:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a348 <_strtod_l+0xc08>
 800a14a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a14e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a150:	4620      	mov	r0, r4
 800a152:	f002 f815 	bl	800c180 <_Bfree>
 800a156:	9905      	ldr	r1, [sp, #20]
 800a158:	4620      	mov	r0, r4
 800a15a:	f002 f811 	bl	800c180 <_Bfree>
 800a15e:	4631      	mov	r1, r6
 800a160:	4620      	mov	r0, r4
 800a162:	f002 f80d 	bl	800c180 <_Bfree>
 800a166:	4629      	mov	r1, r5
 800a168:	4620      	mov	r0, r4
 800a16a:	f002 f809 	bl	800c180 <_Bfree>
 800a16e:	e61a      	b.n	8009da6 <_strtod_l+0x666>
 800a170:	f1ba 0f00 	cmp.w	sl, #0
 800a174:	d11b      	bne.n	800a1ae <_strtod_l+0xa6e>
 800a176:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a17a:	b9f3      	cbnz	r3, 800a1ba <_strtod_l+0xa7a>
 800a17c:	4b6c      	ldr	r3, [pc, #432]	; (800a330 <_strtod_l+0xbf0>)
 800a17e:	2200      	movs	r2, #0
 800a180:	4640      	mov	r0, r8
 800a182:	4649      	mov	r1, r9
 800a184:	f7f6 fcb2 	bl	8000aec <__aeabi_dcmplt>
 800a188:	b9d0      	cbnz	r0, 800a1c0 <_strtod_l+0xa80>
 800a18a:	4640      	mov	r0, r8
 800a18c:	4649      	mov	r1, r9
 800a18e:	4b6c      	ldr	r3, [pc, #432]	; (800a340 <_strtod_l+0xc00>)
 800a190:	2200      	movs	r2, #0
 800a192:	f7f6 fa39 	bl	8000608 <__aeabi_dmul>
 800a196:	4680      	mov	r8, r0
 800a198:	4689      	mov	r9, r1
 800a19a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a19e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a1a2:	9315      	str	r3, [sp, #84]	; 0x54
 800a1a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a1a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a1ac:	e79d      	b.n	800a0ea <_strtod_l+0x9aa>
 800a1ae:	f1ba 0f01 	cmp.w	sl, #1
 800a1b2:	d102      	bne.n	800a1ba <_strtod_l+0xa7a>
 800a1b4:	2f00      	cmp	r7, #0
 800a1b6:	f43f ad83 	beq.w	8009cc0 <_strtod_l+0x580>
 800a1ba:	4b62      	ldr	r3, [pc, #392]	; (800a344 <_strtod_l+0xc04>)
 800a1bc:	2200      	movs	r2, #0
 800a1be:	e78e      	b.n	800a0de <_strtod_l+0x99e>
 800a1c0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a340 <_strtod_l+0xc00>
 800a1c4:	f04f 0800 	mov.w	r8, #0
 800a1c8:	e7e7      	b.n	800a19a <_strtod_l+0xa5a>
 800a1ca:	4b5d      	ldr	r3, [pc, #372]	; (800a340 <_strtod_l+0xc00>)
 800a1cc:	4640      	mov	r0, r8
 800a1ce:	4649      	mov	r1, r9
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f7f6 fa19 	bl	8000608 <__aeabi_dmul>
 800a1d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1d8:	4680      	mov	r8, r0
 800a1da:	4689      	mov	r9, r1
 800a1dc:	b933      	cbnz	r3, 800a1ec <_strtod_l+0xaac>
 800a1de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1e2:	900e      	str	r0, [sp, #56]	; 0x38
 800a1e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a1ea:	e7dd      	b.n	800a1a8 <_strtod_l+0xa68>
 800a1ec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a1f0:	e7f9      	b.n	800a1e6 <_strtod_l+0xaa6>
 800a1f2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a1f6:	9b04      	ldr	r3, [sp, #16]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d1a8      	bne.n	800a14e <_strtod_l+0xa0e>
 800a1fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a200:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a202:	0d1b      	lsrs	r3, r3, #20
 800a204:	051b      	lsls	r3, r3, #20
 800a206:	429a      	cmp	r2, r3
 800a208:	d1a1      	bne.n	800a14e <_strtod_l+0xa0e>
 800a20a:	4640      	mov	r0, r8
 800a20c:	4649      	mov	r1, r9
 800a20e:	f7f6 fd5b 	bl	8000cc8 <__aeabi_d2lz>
 800a212:	f7f6 f9cb 	bl	80005ac <__aeabi_l2d>
 800a216:	4602      	mov	r2, r0
 800a218:	460b      	mov	r3, r1
 800a21a:	4640      	mov	r0, r8
 800a21c:	4649      	mov	r1, r9
 800a21e:	f7f6 f83b 	bl	8000298 <__aeabi_dsub>
 800a222:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a224:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a228:	ea43 030a 	orr.w	r3, r3, sl
 800a22c:	4313      	orrs	r3, r2
 800a22e:	4680      	mov	r8, r0
 800a230:	4689      	mov	r9, r1
 800a232:	d055      	beq.n	800a2e0 <_strtod_l+0xba0>
 800a234:	a336      	add	r3, pc, #216	; (adr r3, 800a310 <_strtod_l+0xbd0>)
 800a236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23a:	f7f6 fc57 	bl	8000aec <__aeabi_dcmplt>
 800a23e:	2800      	cmp	r0, #0
 800a240:	f47f acd0 	bne.w	8009be4 <_strtod_l+0x4a4>
 800a244:	a334      	add	r3, pc, #208	; (adr r3, 800a318 <_strtod_l+0xbd8>)
 800a246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24a:	4640      	mov	r0, r8
 800a24c:	4649      	mov	r1, r9
 800a24e:	f7f6 fc6b 	bl	8000b28 <__aeabi_dcmpgt>
 800a252:	2800      	cmp	r0, #0
 800a254:	f43f af7b 	beq.w	800a14e <_strtod_l+0xa0e>
 800a258:	e4c4      	b.n	8009be4 <_strtod_l+0x4a4>
 800a25a:	9b04      	ldr	r3, [sp, #16]
 800a25c:	b333      	cbz	r3, 800a2ac <_strtod_l+0xb6c>
 800a25e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a260:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a264:	d822      	bhi.n	800a2ac <_strtod_l+0xb6c>
 800a266:	a32e      	add	r3, pc, #184	; (adr r3, 800a320 <_strtod_l+0xbe0>)
 800a268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26c:	4640      	mov	r0, r8
 800a26e:	4649      	mov	r1, r9
 800a270:	f7f6 fc46 	bl	8000b00 <__aeabi_dcmple>
 800a274:	b1a0      	cbz	r0, 800a2a0 <_strtod_l+0xb60>
 800a276:	4649      	mov	r1, r9
 800a278:	4640      	mov	r0, r8
 800a27a:	f7f6 fc9d 	bl	8000bb8 <__aeabi_d2uiz>
 800a27e:	2801      	cmp	r0, #1
 800a280:	bf38      	it	cc
 800a282:	2001      	movcc	r0, #1
 800a284:	f7f6 f946 	bl	8000514 <__aeabi_ui2d>
 800a288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a28a:	4680      	mov	r8, r0
 800a28c:	4689      	mov	r9, r1
 800a28e:	bb23      	cbnz	r3, 800a2da <_strtod_l+0xb9a>
 800a290:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a294:	9010      	str	r0, [sp, #64]	; 0x40
 800a296:	9311      	str	r3, [sp, #68]	; 0x44
 800a298:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a29c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2a4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a2a8:	1a9b      	subs	r3, r3, r2
 800a2aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a2b0:	eeb0 0a48 	vmov.f32	s0, s16
 800a2b4:	eef0 0a68 	vmov.f32	s1, s17
 800a2b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a2bc:	f002 fa92 	bl	800c7e4 <__ulp>
 800a2c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a2c4:	ec53 2b10 	vmov	r2, r3, d0
 800a2c8:	f7f6 f99e 	bl	8000608 <__aeabi_dmul>
 800a2cc:	ec53 2b18 	vmov	r2, r3, d8
 800a2d0:	f7f5 ffe4 	bl	800029c <__adddf3>
 800a2d4:	4682      	mov	sl, r0
 800a2d6:	468b      	mov	fp, r1
 800a2d8:	e78d      	b.n	800a1f6 <_strtod_l+0xab6>
 800a2da:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a2de:	e7db      	b.n	800a298 <_strtod_l+0xb58>
 800a2e0:	a311      	add	r3, pc, #68	; (adr r3, 800a328 <_strtod_l+0xbe8>)
 800a2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e6:	f7f6 fc01 	bl	8000aec <__aeabi_dcmplt>
 800a2ea:	e7b2      	b.n	800a252 <_strtod_l+0xb12>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	930a      	str	r3, [sp, #40]	; 0x28
 800a2f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a2f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2f4:	6013      	str	r3, [r2, #0]
 800a2f6:	f7ff ba6b 	b.w	80097d0 <_strtod_l+0x90>
 800a2fa:	2a65      	cmp	r2, #101	; 0x65
 800a2fc:	f43f ab5f 	beq.w	80099be <_strtod_l+0x27e>
 800a300:	2a45      	cmp	r2, #69	; 0x45
 800a302:	f43f ab5c 	beq.w	80099be <_strtod_l+0x27e>
 800a306:	2301      	movs	r3, #1
 800a308:	f7ff bb94 	b.w	8009a34 <_strtod_l+0x2f4>
 800a30c:	f3af 8000 	nop.w
 800a310:	94a03595 	.word	0x94a03595
 800a314:	3fdfffff 	.word	0x3fdfffff
 800a318:	35afe535 	.word	0x35afe535
 800a31c:	3fe00000 	.word	0x3fe00000
 800a320:	ffc00000 	.word	0xffc00000
 800a324:	41dfffff 	.word	0x41dfffff
 800a328:	94a03595 	.word	0x94a03595
 800a32c:	3fcfffff 	.word	0x3fcfffff
 800a330:	3ff00000 	.word	0x3ff00000
 800a334:	7ff00000 	.word	0x7ff00000
 800a338:	7fe00000 	.word	0x7fe00000
 800a33c:	7c9fffff 	.word	0x7c9fffff
 800a340:	3fe00000 	.word	0x3fe00000
 800a344:	bff00000 	.word	0xbff00000
 800a348:	7fefffff 	.word	0x7fefffff

0800a34c <strtof>:
 800a34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a350:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800a400 <strtof+0xb4>
 800a354:	4b26      	ldr	r3, [pc, #152]	; (800a3f0 <strtof+0xa4>)
 800a356:	460a      	mov	r2, r1
 800a358:	ed2d 8b02 	vpush	{d8}
 800a35c:	4601      	mov	r1, r0
 800a35e:	f8d8 0000 	ldr.w	r0, [r8]
 800a362:	f7ff f9ed 	bl	8009740 <_strtod_l>
 800a366:	ec55 4b10 	vmov	r4, r5, d0
 800a36a:	ee10 2a10 	vmov	r2, s0
 800a36e:	ee10 0a10 	vmov	r0, s0
 800a372:	462b      	mov	r3, r5
 800a374:	4629      	mov	r1, r5
 800a376:	f7f6 fbe1 	bl	8000b3c <__aeabi_dcmpun>
 800a37a:	b190      	cbz	r0, 800a3a2 <strtof+0x56>
 800a37c:	2d00      	cmp	r5, #0
 800a37e:	481d      	ldr	r0, [pc, #116]	; (800a3f4 <strtof+0xa8>)
 800a380:	da09      	bge.n	800a396 <strtof+0x4a>
 800a382:	f002 fe65 	bl	800d050 <nanf>
 800a386:	eeb1 8a40 	vneg.f32	s16, s0
 800a38a:	eeb0 0a48 	vmov.f32	s0, s16
 800a38e:	ecbd 8b02 	vpop	{d8}
 800a392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a396:	ecbd 8b02 	vpop	{d8}
 800a39a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a39e:	f002 be57 	b.w	800d050 <nanf>
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	4629      	mov	r1, r5
 800a3a6:	f7f6 fc27 	bl	8000bf8 <__aeabi_d2f>
 800a3aa:	ee08 0a10 	vmov	s16, r0
 800a3ae:	eddf 7a12 	vldr	s15, [pc, #72]	; 800a3f8 <strtof+0xac>
 800a3b2:	eeb0 7ac8 	vabs.f32	s14, s16
 800a3b6:	eeb4 7a67 	vcmp.f32	s14, s15
 800a3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3be:	dde4      	ble.n	800a38a <strtof+0x3e>
 800a3c0:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800a3c4:	4b0d      	ldr	r3, [pc, #52]	; (800a3fc <strtof+0xb0>)
 800a3c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	4639      	mov	r1, r7
 800a3ce:	f7f6 fbb5 	bl	8000b3c <__aeabi_dcmpun>
 800a3d2:	b940      	cbnz	r0, 800a3e6 <strtof+0x9a>
 800a3d4:	4b09      	ldr	r3, [pc, #36]	; (800a3fc <strtof+0xb0>)
 800a3d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3da:	4620      	mov	r0, r4
 800a3dc:	4639      	mov	r1, r7
 800a3de:	f7f6 fb8f 	bl	8000b00 <__aeabi_dcmple>
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	d0d1      	beq.n	800a38a <strtof+0x3e>
 800a3e6:	f8d8 3000 	ldr.w	r3, [r8]
 800a3ea:	2222      	movs	r2, #34	; 0x22
 800a3ec:	601a      	str	r2, [r3, #0]
 800a3ee:	e7cc      	b.n	800a38a <strtof+0x3e>
 800a3f0:	20000118 	.word	0x20000118
 800a3f4:	0800da83 	.word	0x0800da83
 800a3f8:	7f7fffff 	.word	0x7f7fffff
 800a3fc:	7fefffff 	.word	0x7fefffff
 800a400:	200000b0 	.word	0x200000b0

0800a404 <_strtol_l.constprop.0>:
 800a404:	2b01      	cmp	r3, #1
 800a406:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a40a:	d001      	beq.n	800a410 <_strtol_l.constprop.0+0xc>
 800a40c:	2b24      	cmp	r3, #36	; 0x24
 800a40e:	d906      	bls.n	800a41e <_strtol_l.constprop.0+0x1a>
 800a410:	f7fe fb60 	bl	8008ad4 <__errno>
 800a414:	2316      	movs	r3, #22
 800a416:	6003      	str	r3, [r0, #0]
 800a418:	2000      	movs	r0, #0
 800a41a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a41e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a504 <_strtol_l.constprop.0+0x100>
 800a422:	460d      	mov	r5, r1
 800a424:	462e      	mov	r6, r5
 800a426:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a42a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a42e:	f017 0708 	ands.w	r7, r7, #8
 800a432:	d1f7      	bne.n	800a424 <_strtol_l.constprop.0+0x20>
 800a434:	2c2d      	cmp	r4, #45	; 0x2d
 800a436:	d132      	bne.n	800a49e <_strtol_l.constprop.0+0x9a>
 800a438:	782c      	ldrb	r4, [r5, #0]
 800a43a:	2701      	movs	r7, #1
 800a43c:	1cb5      	adds	r5, r6, #2
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d05b      	beq.n	800a4fa <_strtol_l.constprop.0+0xf6>
 800a442:	2b10      	cmp	r3, #16
 800a444:	d109      	bne.n	800a45a <_strtol_l.constprop.0+0x56>
 800a446:	2c30      	cmp	r4, #48	; 0x30
 800a448:	d107      	bne.n	800a45a <_strtol_l.constprop.0+0x56>
 800a44a:	782c      	ldrb	r4, [r5, #0]
 800a44c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a450:	2c58      	cmp	r4, #88	; 0x58
 800a452:	d14d      	bne.n	800a4f0 <_strtol_l.constprop.0+0xec>
 800a454:	786c      	ldrb	r4, [r5, #1]
 800a456:	2310      	movs	r3, #16
 800a458:	3502      	adds	r5, #2
 800a45a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a45e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a462:	f04f 0c00 	mov.w	ip, #0
 800a466:	fbb8 f9f3 	udiv	r9, r8, r3
 800a46a:	4666      	mov	r6, ip
 800a46c:	fb03 8a19 	mls	sl, r3, r9, r8
 800a470:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a474:	f1be 0f09 	cmp.w	lr, #9
 800a478:	d816      	bhi.n	800a4a8 <_strtol_l.constprop.0+0xa4>
 800a47a:	4674      	mov	r4, lr
 800a47c:	42a3      	cmp	r3, r4
 800a47e:	dd24      	ble.n	800a4ca <_strtol_l.constprop.0+0xc6>
 800a480:	f1bc 0f00 	cmp.w	ip, #0
 800a484:	db1e      	blt.n	800a4c4 <_strtol_l.constprop.0+0xc0>
 800a486:	45b1      	cmp	r9, r6
 800a488:	d31c      	bcc.n	800a4c4 <_strtol_l.constprop.0+0xc0>
 800a48a:	d101      	bne.n	800a490 <_strtol_l.constprop.0+0x8c>
 800a48c:	45a2      	cmp	sl, r4
 800a48e:	db19      	blt.n	800a4c4 <_strtol_l.constprop.0+0xc0>
 800a490:	fb06 4603 	mla	r6, r6, r3, r4
 800a494:	f04f 0c01 	mov.w	ip, #1
 800a498:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a49c:	e7e8      	b.n	800a470 <_strtol_l.constprop.0+0x6c>
 800a49e:	2c2b      	cmp	r4, #43	; 0x2b
 800a4a0:	bf04      	itt	eq
 800a4a2:	782c      	ldrbeq	r4, [r5, #0]
 800a4a4:	1cb5      	addeq	r5, r6, #2
 800a4a6:	e7ca      	b.n	800a43e <_strtol_l.constprop.0+0x3a>
 800a4a8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a4ac:	f1be 0f19 	cmp.w	lr, #25
 800a4b0:	d801      	bhi.n	800a4b6 <_strtol_l.constprop.0+0xb2>
 800a4b2:	3c37      	subs	r4, #55	; 0x37
 800a4b4:	e7e2      	b.n	800a47c <_strtol_l.constprop.0+0x78>
 800a4b6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a4ba:	f1be 0f19 	cmp.w	lr, #25
 800a4be:	d804      	bhi.n	800a4ca <_strtol_l.constprop.0+0xc6>
 800a4c0:	3c57      	subs	r4, #87	; 0x57
 800a4c2:	e7db      	b.n	800a47c <_strtol_l.constprop.0+0x78>
 800a4c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800a4c8:	e7e6      	b.n	800a498 <_strtol_l.constprop.0+0x94>
 800a4ca:	f1bc 0f00 	cmp.w	ip, #0
 800a4ce:	da05      	bge.n	800a4dc <_strtol_l.constprop.0+0xd8>
 800a4d0:	2322      	movs	r3, #34	; 0x22
 800a4d2:	6003      	str	r3, [r0, #0]
 800a4d4:	4646      	mov	r6, r8
 800a4d6:	b942      	cbnz	r2, 800a4ea <_strtol_l.constprop.0+0xe6>
 800a4d8:	4630      	mov	r0, r6
 800a4da:	e79e      	b.n	800a41a <_strtol_l.constprop.0+0x16>
 800a4dc:	b107      	cbz	r7, 800a4e0 <_strtol_l.constprop.0+0xdc>
 800a4de:	4276      	negs	r6, r6
 800a4e0:	2a00      	cmp	r2, #0
 800a4e2:	d0f9      	beq.n	800a4d8 <_strtol_l.constprop.0+0xd4>
 800a4e4:	f1bc 0f00 	cmp.w	ip, #0
 800a4e8:	d000      	beq.n	800a4ec <_strtol_l.constprop.0+0xe8>
 800a4ea:	1e69      	subs	r1, r5, #1
 800a4ec:	6011      	str	r1, [r2, #0]
 800a4ee:	e7f3      	b.n	800a4d8 <_strtol_l.constprop.0+0xd4>
 800a4f0:	2430      	movs	r4, #48	; 0x30
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1b1      	bne.n	800a45a <_strtol_l.constprop.0+0x56>
 800a4f6:	2308      	movs	r3, #8
 800a4f8:	e7af      	b.n	800a45a <_strtol_l.constprop.0+0x56>
 800a4fa:	2c30      	cmp	r4, #48	; 0x30
 800a4fc:	d0a5      	beq.n	800a44a <_strtol_l.constprop.0+0x46>
 800a4fe:	230a      	movs	r3, #10
 800a500:	e7ab      	b.n	800a45a <_strtol_l.constprop.0+0x56>
 800a502:	bf00      	nop
 800a504:	0800d8bd 	.word	0x0800d8bd

0800a508 <strtol>:
 800a508:	4613      	mov	r3, r2
 800a50a:	460a      	mov	r2, r1
 800a50c:	4601      	mov	r1, r0
 800a50e:	4802      	ldr	r0, [pc, #8]	; (800a518 <strtol+0x10>)
 800a510:	6800      	ldr	r0, [r0, #0]
 800a512:	f7ff bf77 	b.w	800a404 <_strtol_l.constprop.0>
 800a516:	bf00      	nop
 800a518:	200000b0 	.word	0x200000b0

0800a51c <_strtoll_l.constprop.0>:
 800a51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a520:	b085      	sub	sp, #20
 800a522:	4688      	mov	r8, r1
 800a524:	9201      	str	r2, [sp, #4]
 800a526:	4a47      	ldr	r2, [pc, #284]	; (800a644 <_strtoll_l.constprop.0+0x128>)
 800a528:	9003      	str	r0, [sp, #12]
 800a52a:	461e      	mov	r6, r3
 800a52c:	460d      	mov	r5, r1
 800a52e:	462b      	mov	r3, r5
 800a530:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a534:	5ca7      	ldrb	r7, [r4, r2]
 800a536:	f017 0708 	ands.w	r7, r7, #8
 800a53a:	d1f8      	bne.n	800a52e <_strtoll_l.constprop.0+0x12>
 800a53c:	2c2d      	cmp	r4, #45	; 0x2d
 800a53e:	d147      	bne.n	800a5d0 <_strtoll_l.constprop.0+0xb4>
 800a540:	782c      	ldrb	r4, [r5, #0]
 800a542:	2701      	movs	r7, #1
 800a544:	1c9d      	adds	r5, r3, #2
 800a546:	2e00      	cmp	r6, #0
 800a548:	d077      	beq.n	800a63a <_strtoll_l.constprop.0+0x11e>
 800a54a:	2e10      	cmp	r6, #16
 800a54c:	d109      	bne.n	800a562 <_strtoll_l.constprop.0+0x46>
 800a54e:	2c30      	cmp	r4, #48	; 0x30
 800a550:	d107      	bne.n	800a562 <_strtoll_l.constprop.0+0x46>
 800a552:	782b      	ldrb	r3, [r5, #0]
 800a554:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a558:	2b58      	cmp	r3, #88	; 0x58
 800a55a:	d169      	bne.n	800a630 <_strtoll_l.constprop.0+0x114>
 800a55c:	786c      	ldrb	r4, [r5, #1]
 800a55e:	2610      	movs	r6, #16
 800a560:	3502      	adds	r5, #2
 800a562:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 800a566:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
 800a56a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a56e:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800a572:	4632      	mov	r2, r6
 800a574:	464b      	mov	r3, r9
 800a576:	4658      	mov	r0, fp
 800a578:	4651      	mov	r1, sl
 800a57a:	f7f6 fb8d 	bl	8000c98 <__aeabi_uldivmod>
 800a57e:	2300      	movs	r3, #0
 800a580:	9202      	str	r2, [sp, #8]
 800a582:	468c      	mov	ip, r1
 800a584:	4602      	mov	r2, r0
 800a586:	4619      	mov	r1, r3
 800a588:	4618      	mov	r0, r3
 800a58a:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a58e:	f1be 0f09 	cmp.w	lr, #9
 800a592:	d822      	bhi.n	800a5da <_strtoll_l.constprop.0+0xbe>
 800a594:	4674      	mov	r4, lr
 800a596:	42a6      	cmp	r6, r4
 800a598:	dd30      	ble.n	800a5fc <_strtoll_l.constprop.0+0xe0>
 800a59a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a59e:	d014      	beq.n	800a5ca <_strtoll_l.constprop.0+0xae>
 800a5a0:	4282      	cmp	r2, r0
 800a5a2:	eb7c 0301 	sbcs.w	r3, ip, r1
 800a5a6:	d326      	bcc.n	800a5f6 <_strtoll_l.constprop.0+0xda>
 800a5a8:	458c      	cmp	ip, r1
 800a5aa:	bf08      	it	eq
 800a5ac:	4282      	cmpeq	r2, r0
 800a5ae:	d102      	bne.n	800a5b6 <_strtoll_l.constprop.0+0x9a>
 800a5b0:	9b02      	ldr	r3, [sp, #8]
 800a5b2:	42a3      	cmp	r3, r4
 800a5b4:	db1f      	blt.n	800a5f6 <_strtoll_l.constprop.0+0xda>
 800a5b6:	4371      	muls	r1, r6
 800a5b8:	fb00 1109 	mla	r1, r0, r9, r1
 800a5bc:	fba6 0300 	umull	r0, r3, r6, r0
 800a5c0:	4419      	add	r1, r3
 800a5c2:	1820      	adds	r0, r4, r0
 800a5c4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5ce:	e7dc      	b.n	800a58a <_strtoll_l.constprop.0+0x6e>
 800a5d0:	2c2b      	cmp	r4, #43	; 0x2b
 800a5d2:	bf04      	itt	eq
 800a5d4:	782c      	ldrbeq	r4, [r5, #0]
 800a5d6:	1c9d      	addeq	r5, r3, #2
 800a5d8:	e7b5      	b.n	800a546 <_strtoll_l.constprop.0+0x2a>
 800a5da:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a5de:	f1be 0f19 	cmp.w	lr, #25
 800a5e2:	d801      	bhi.n	800a5e8 <_strtoll_l.constprop.0+0xcc>
 800a5e4:	3c37      	subs	r4, #55	; 0x37
 800a5e6:	e7d6      	b.n	800a596 <_strtoll_l.constprop.0+0x7a>
 800a5e8:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a5ec:	f1be 0f19 	cmp.w	lr, #25
 800a5f0:	d804      	bhi.n	800a5fc <_strtoll_l.constprop.0+0xe0>
 800a5f2:	3c57      	subs	r4, #87	; 0x57
 800a5f4:	e7cf      	b.n	800a596 <_strtoll_l.constprop.0+0x7a>
 800a5f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5fa:	e7e6      	b.n	800a5ca <_strtoll_l.constprop.0+0xae>
 800a5fc:	1c5a      	adds	r2, r3, #1
 800a5fe:	d109      	bne.n	800a614 <_strtoll_l.constprop.0+0xf8>
 800a600:	9a03      	ldr	r2, [sp, #12]
 800a602:	2322      	movs	r3, #34	; 0x22
 800a604:	6013      	str	r3, [r2, #0]
 800a606:	9b01      	ldr	r3, [sp, #4]
 800a608:	4658      	mov	r0, fp
 800a60a:	4651      	mov	r1, sl
 800a60c:	b953      	cbnz	r3, 800a624 <_strtoll_l.constprop.0+0x108>
 800a60e:	b005      	add	sp, #20
 800a610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a614:	b117      	cbz	r7, 800a61c <_strtoll_l.constprop.0+0x100>
 800a616:	4240      	negs	r0, r0
 800a618:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800a61c:	9a01      	ldr	r2, [sp, #4]
 800a61e:	2a00      	cmp	r2, #0
 800a620:	d0f5      	beq.n	800a60e <_strtoll_l.constprop.0+0xf2>
 800a622:	b10b      	cbz	r3, 800a628 <_strtoll_l.constprop.0+0x10c>
 800a624:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800a628:	9b01      	ldr	r3, [sp, #4]
 800a62a:	f8c3 8000 	str.w	r8, [r3]
 800a62e:	e7ee      	b.n	800a60e <_strtoll_l.constprop.0+0xf2>
 800a630:	2430      	movs	r4, #48	; 0x30
 800a632:	2e00      	cmp	r6, #0
 800a634:	d195      	bne.n	800a562 <_strtoll_l.constprop.0+0x46>
 800a636:	2608      	movs	r6, #8
 800a638:	e793      	b.n	800a562 <_strtoll_l.constprop.0+0x46>
 800a63a:	2c30      	cmp	r4, #48	; 0x30
 800a63c:	d089      	beq.n	800a552 <_strtoll_l.constprop.0+0x36>
 800a63e:	260a      	movs	r6, #10
 800a640:	e78f      	b.n	800a562 <_strtoll_l.constprop.0+0x46>
 800a642:	bf00      	nop
 800a644:	0800d8bd 	.word	0x0800d8bd

0800a648 <strtoll>:
 800a648:	4613      	mov	r3, r2
 800a64a:	460a      	mov	r2, r1
 800a64c:	4601      	mov	r1, r0
 800a64e:	4802      	ldr	r0, [pc, #8]	; (800a658 <strtoll+0x10>)
 800a650:	6800      	ldr	r0, [r0, #0]
 800a652:	f7ff bf63 	b.w	800a51c <_strtoll_l.constprop.0>
 800a656:	bf00      	nop
 800a658:	200000b0 	.word	0x200000b0

0800a65c <__swbuf_r>:
 800a65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a65e:	460e      	mov	r6, r1
 800a660:	4614      	mov	r4, r2
 800a662:	4605      	mov	r5, r0
 800a664:	b118      	cbz	r0, 800a66e <__swbuf_r+0x12>
 800a666:	6983      	ldr	r3, [r0, #24]
 800a668:	b90b      	cbnz	r3, 800a66e <__swbuf_r+0x12>
 800a66a:	f001 f88d 	bl	800b788 <__sinit>
 800a66e:	4b21      	ldr	r3, [pc, #132]	; (800a6f4 <__swbuf_r+0x98>)
 800a670:	429c      	cmp	r4, r3
 800a672:	d12b      	bne.n	800a6cc <__swbuf_r+0x70>
 800a674:	686c      	ldr	r4, [r5, #4]
 800a676:	69a3      	ldr	r3, [r4, #24]
 800a678:	60a3      	str	r3, [r4, #8]
 800a67a:	89a3      	ldrh	r3, [r4, #12]
 800a67c:	071a      	lsls	r2, r3, #28
 800a67e:	d52f      	bpl.n	800a6e0 <__swbuf_r+0x84>
 800a680:	6923      	ldr	r3, [r4, #16]
 800a682:	b36b      	cbz	r3, 800a6e0 <__swbuf_r+0x84>
 800a684:	6923      	ldr	r3, [r4, #16]
 800a686:	6820      	ldr	r0, [r4, #0]
 800a688:	1ac0      	subs	r0, r0, r3
 800a68a:	6963      	ldr	r3, [r4, #20]
 800a68c:	b2f6      	uxtb	r6, r6
 800a68e:	4283      	cmp	r3, r0
 800a690:	4637      	mov	r7, r6
 800a692:	dc04      	bgt.n	800a69e <__swbuf_r+0x42>
 800a694:	4621      	mov	r1, r4
 800a696:	4628      	mov	r0, r5
 800a698:	f000 ffe2 	bl	800b660 <_fflush_r>
 800a69c:	bb30      	cbnz	r0, 800a6ec <__swbuf_r+0x90>
 800a69e:	68a3      	ldr	r3, [r4, #8]
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	60a3      	str	r3, [r4, #8]
 800a6a4:	6823      	ldr	r3, [r4, #0]
 800a6a6:	1c5a      	adds	r2, r3, #1
 800a6a8:	6022      	str	r2, [r4, #0]
 800a6aa:	701e      	strb	r6, [r3, #0]
 800a6ac:	6963      	ldr	r3, [r4, #20]
 800a6ae:	3001      	adds	r0, #1
 800a6b0:	4283      	cmp	r3, r0
 800a6b2:	d004      	beq.n	800a6be <__swbuf_r+0x62>
 800a6b4:	89a3      	ldrh	r3, [r4, #12]
 800a6b6:	07db      	lsls	r3, r3, #31
 800a6b8:	d506      	bpl.n	800a6c8 <__swbuf_r+0x6c>
 800a6ba:	2e0a      	cmp	r6, #10
 800a6bc:	d104      	bne.n	800a6c8 <__swbuf_r+0x6c>
 800a6be:	4621      	mov	r1, r4
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	f000 ffcd 	bl	800b660 <_fflush_r>
 800a6c6:	b988      	cbnz	r0, 800a6ec <__swbuf_r+0x90>
 800a6c8:	4638      	mov	r0, r7
 800a6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6cc:	4b0a      	ldr	r3, [pc, #40]	; (800a6f8 <__swbuf_r+0x9c>)
 800a6ce:	429c      	cmp	r4, r3
 800a6d0:	d101      	bne.n	800a6d6 <__swbuf_r+0x7a>
 800a6d2:	68ac      	ldr	r4, [r5, #8]
 800a6d4:	e7cf      	b.n	800a676 <__swbuf_r+0x1a>
 800a6d6:	4b09      	ldr	r3, [pc, #36]	; (800a6fc <__swbuf_r+0xa0>)
 800a6d8:	429c      	cmp	r4, r3
 800a6da:	bf08      	it	eq
 800a6dc:	68ec      	ldreq	r4, [r5, #12]
 800a6de:	e7ca      	b.n	800a676 <__swbuf_r+0x1a>
 800a6e0:	4621      	mov	r1, r4
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	f000 f81e 	bl	800a724 <__swsetup_r>
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	d0cb      	beq.n	800a684 <__swbuf_r+0x28>
 800a6ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a6f0:	e7ea      	b.n	800a6c8 <__swbuf_r+0x6c>
 800a6f2:	bf00      	nop
 800a6f4:	0800db34 	.word	0x0800db34
 800a6f8:	0800db54 	.word	0x0800db54
 800a6fc:	0800db14 	.word	0x0800db14

0800a700 <_write_r>:
 800a700:	b538      	push	{r3, r4, r5, lr}
 800a702:	4d07      	ldr	r5, [pc, #28]	; (800a720 <_write_r+0x20>)
 800a704:	4604      	mov	r4, r0
 800a706:	4608      	mov	r0, r1
 800a708:	4611      	mov	r1, r2
 800a70a:	2200      	movs	r2, #0
 800a70c:	602a      	str	r2, [r5, #0]
 800a70e:	461a      	mov	r2, r3
 800a710:	f7f9 ff77 	bl	8004602 <_write>
 800a714:	1c43      	adds	r3, r0, #1
 800a716:	d102      	bne.n	800a71e <_write_r+0x1e>
 800a718:	682b      	ldr	r3, [r5, #0]
 800a71a:	b103      	cbz	r3, 800a71e <_write_r+0x1e>
 800a71c:	6023      	str	r3, [r4, #0]
 800a71e:	bd38      	pop	{r3, r4, r5, pc}
 800a720:	20000fc8 	.word	0x20000fc8

0800a724 <__swsetup_r>:
 800a724:	4b32      	ldr	r3, [pc, #200]	; (800a7f0 <__swsetup_r+0xcc>)
 800a726:	b570      	push	{r4, r5, r6, lr}
 800a728:	681d      	ldr	r5, [r3, #0]
 800a72a:	4606      	mov	r6, r0
 800a72c:	460c      	mov	r4, r1
 800a72e:	b125      	cbz	r5, 800a73a <__swsetup_r+0x16>
 800a730:	69ab      	ldr	r3, [r5, #24]
 800a732:	b913      	cbnz	r3, 800a73a <__swsetup_r+0x16>
 800a734:	4628      	mov	r0, r5
 800a736:	f001 f827 	bl	800b788 <__sinit>
 800a73a:	4b2e      	ldr	r3, [pc, #184]	; (800a7f4 <__swsetup_r+0xd0>)
 800a73c:	429c      	cmp	r4, r3
 800a73e:	d10f      	bne.n	800a760 <__swsetup_r+0x3c>
 800a740:	686c      	ldr	r4, [r5, #4]
 800a742:	89a3      	ldrh	r3, [r4, #12]
 800a744:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a748:	0719      	lsls	r1, r3, #28
 800a74a:	d42c      	bmi.n	800a7a6 <__swsetup_r+0x82>
 800a74c:	06dd      	lsls	r5, r3, #27
 800a74e:	d411      	bmi.n	800a774 <__swsetup_r+0x50>
 800a750:	2309      	movs	r3, #9
 800a752:	6033      	str	r3, [r6, #0]
 800a754:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a758:	81a3      	strh	r3, [r4, #12]
 800a75a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a75e:	e03e      	b.n	800a7de <__swsetup_r+0xba>
 800a760:	4b25      	ldr	r3, [pc, #148]	; (800a7f8 <__swsetup_r+0xd4>)
 800a762:	429c      	cmp	r4, r3
 800a764:	d101      	bne.n	800a76a <__swsetup_r+0x46>
 800a766:	68ac      	ldr	r4, [r5, #8]
 800a768:	e7eb      	b.n	800a742 <__swsetup_r+0x1e>
 800a76a:	4b24      	ldr	r3, [pc, #144]	; (800a7fc <__swsetup_r+0xd8>)
 800a76c:	429c      	cmp	r4, r3
 800a76e:	bf08      	it	eq
 800a770:	68ec      	ldreq	r4, [r5, #12]
 800a772:	e7e6      	b.n	800a742 <__swsetup_r+0x1e>
 800a774:	0758      	lsls	r0, r3, #29
 800a776:	d512      	bpl.n	800a79e <__swsetup_r+0x7a>
 800a778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a77a:	b141      	cbz	r1, 800a78e <__swsetup_r+0x6a>
 800a77c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a780:	4299      	cmp	r1, r3
 800a782:	d002      	beq.n	800a78a <__swsetup_r+0x66>
 800a784:	4630      	mov	r0, r6
 800a786:	f7fe f9ed 	bl	8008b64 <_free_r>
 800a78a:	2300      	movs	r3, #0
 800a78c:	6363      	str	r3, [r4, #52]	; 0x34
 800a78e:	89a3      	ldrh	r3, [r4, #12]
 800a790:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a794:	81a3      	strh	r3, [r4, #12]
 800a796:	2300      	movs	r3, #0
 800a798:	6063      	str	r3, [r4, #4]
 800a79a:	6923      	ldr	r3, [r4, #16]
 800a79c:	6023      	str	r3, [r4, #0]
 800a79e:	89a3      	ldrh	r3, [r4, #12]
 800a7a0:	f043 0308 	orr.w	r3, r3, #8
 800a7a4:	81a3      	strh	r3, [r4, #12]
 800a7a6:	6923      	ldr	r3, [r4, #16]
 800a7a8:	b94b      	cbnz	r3, 800a7be <__swsetup_r+0x9a>
 800a7aa:	89a3      	ldrh	r3, [r4, #12]
 800a7ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a7b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7b4:	d003      	beq.n	800a7be <__swsetup_r+0x9a>
 800a7b6:	4621      	mov	r1, r4
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	f001 fc43 	bl	800c044 <__smakebuf_r>
 800a7be:	89a0      	ldrh	r0, [r4, #12]
 800a7c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7c4:	f010 0301 	ands.w	r3, r0, #1
 800a7c8:	d00a      	beq.n	800a7e0 <__swsetup_r+0xbc>
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	60a3      	str	r3, [r4, #8]
 800a7ce:	6963      	ldr	r3, [r4, #20]
 800a7d0:	425b      	negs	r3, r3
 800a7d2:	61a3      	str	r3, [r4, #24]
 800a7d4:	6923      	ldr	r3, [r4, #16]
 800a7d6:	b943      	cbnz	r3, 800a7ea <__swsetup_r+0xc6>
 800a7d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7dc:	d1ba      	bne.n	800a754 <__swsetup_r+0x30>
 800a7de:	bd70      	pop	{r4, r5, r6, pc}
 800a7e0:	0781      	lsls	r1, r0, #30
 800a7e2:	bf58      	it	pl
 800a7e4:	6963      	ldrpl	r3, [r4, #20]
 800a7e6:	60a3      	str	r3, [r4, #8]
 800a7e8:	e7f4      	b.n	800a7d4 <__swsetup_r+0xb0>
 800a7ea:	2000      	movs	r0, #0
 800a7ec:	e7f7      	b.n	800a7de <__swsetup_r+0xba>
 800a7ee:	bf00      	nop
 800a7f0:	200000b0 	.word	0x200000b0
 800a7f4:	0800db34 	.word	0x0800db34
 800a7f8:	0800db54 	.word	0x0800db54
 800a7fc:	0800db14 	.word	0x0800db14

0800a800 <__assert_func>:
 800a800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a802:	4614      	mov	r4, r2
 800a804:	461a      	mov	r2, r3
 800a806:	4b09      	ldr	r3, [pc, #36]	; (800a82c <__assert_func+0x2c>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4605      	mov	r5, r0
 800a80c:	68d8      	ldr	r0, [r3, #12]
 800a80e:	b14c      	cbz	r4, 800a824 <__assert_func+0x24>
 800a810:	4b07      	ldr	r3, [pc, #28]	; (800a830 <__assert_func+0x30>)
 800a812:	9100      	str	r1, [sp, #0]
 800a814:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a818:	4906      	ldr	r1, [pc, #24]	; (800a834 <__assert_func+0x34>)
 800a81a:	462b      	mov	r3, r5
 800a81c:	f001 f832 	bl	800b884 <fiprintf>
 800a820:	f002 fc29 	bl	800d076 <abort>
 800a824:	4b04      	ldr	r3, [pc, #16]	; (800a838 <__assert_func+0x38>)
 800a826:	461c      	mov	r4, r3
 800a828:	e7f3      	b.n	800a812 <__assert_func+0x12>
 800a82a:	bf00      	nop
 800a82c:	200000b0 	.word	0x200000b0
 800a830:	0800da48 	.word	0x0800da48
 800a834:	0800da55 	.word	0x0800da55
 800a838:	0800da83 	.word	0x0800da83

0800a83c <_close_r>:
 800a83c:	b538      	push	{r3, r4, r5, lr}
 800a83e:	4d06      	ldr	r5, [pc, #24]	; (800a858 <_close_r+0x1c>)
 800a840:	2300      	movs	r3, #0
 800a842:	4604      	mov	r4, r0
 800a844:	4608      	mov	r0, r1
 800a846:	602b      	str	r3, [r5, #0]
 800a848:	f7f9 fef7 	bl	800463a <_close>
 800a84c:	1c43      	adds	r3, r0, #1
 800a84e:	d102      	bne.n	800a856 <_close_r+0x1a>
 800a850:	682b      	ldr	r3, [r5, #0]
 800a852:	b103      	cbz	r3, 800a856 <_close_r+0x1a>
 800a854:	6023      	str	r3, [r4, #0]
 800a856:	bd38      	pop	{r3, r4, r5, pc}
 800a858:	20000fc8 	.word	0x20000fc8

0800a85c <quorem>:
 800a85c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a860:	6903      	ldr	r3, [r0, #16]
 800a862:	690c      	ldr	r4, [r1, #16]
 800a864:	42a3      	cmp	r3, r4
 800a866:	4607      	mov	r7, r0
 800a868:	f2c0 8081 	blt.w	800a96e <quorem+0x112>
 800a86c:	3c01      	subs	r4, #1
 800a86e:	f101 0814 	add.w	r8, r1, #20
 800a872:	f100 0514 	add.w	r5, r0, #20
 800a876:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a87a:	9301      	str	r3, [sp, #4]
 800a87c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a880:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a884:	3301      	adds	r3, #1
 800a886:	429a      	cmp	r2, r3
 800a888:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a88c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a890:	fbb2 f6f3 	udiv	r6, r2, r3
 800a894:	d331      	bcc.n	800a8fa <quorem+0x9e>
 800a896:	f04f 0e00 	mov.w	lr, #0
 800a89a:	4640      	mov	r0, r8
 800a89c:	46ac      	mov	ip, r5
 800a89e:	46f2      	mov	sl, lr
 800a8a0:	f850 2b04 	ldr.w	r2, [r0], #4
 800a8a4:	b293      	uxth	r3, r2
 800a8a6:	fb06 e303 	mla	r3, r6, r3, lr
 800a8aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	ebaa 0303 	sub.w	r3, sl, r3
 800a8b4:	f8dc a000 	ldr.w	sl, [ip]
 800a8b8:	0c12      	lsrs	r2, r2, #16
 800a8ba:	fa13 f38a 	uxtah	r3, r3, sl
 800a8be:	fb06 e202 	mla	r2, r6, r2, lr
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	9b00      	ldr	r3, [sp, #0]
 800a8c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a8ca:	b292      	uxth	r2, r2
 800a8cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a8d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a8d4:	f8bd 3000 	ldrh.w	r3, [sp]
 800a8d8:	4581      	cmp	r9, r0
 800a8da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8de:	f84c 3b04 	str.w	r3, [ip], #4
 800a8e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a8e6:	d2db      	bcs.n	800a8a0 <quorem+0x44>
 800a8e8:	f855 300b 	ldr.w	r3, [r5, fp]
 800a8ec:	b92b      	cbnz	r3, 800a8fa <quorem+0x9e>
 800a8ee:	9b01      	ldr	r3, [sp, #4]
 800a8f0:	3b04      	subs	r3, #4
 800a8f2:	429d      	cmp	r5, r3
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	d32e      	bcc.n	800a956 <quorem+0xfa>
 800a8f8:	613c      	str	r4, [r7, #16]
 800a8fa:	4638      	mov	r0, r7
 800a8fc:	f001 fecc 	bl	800c698 <__mcmp>
 800a900:	2800      	cmp	r0, #0
 800a902:	db24      	blt.n	800a94e <quorem+0xf2>
 800a904:	3601      	adds	r6, #1
 800a906:	4628      	mov	r0, r5
 800a908:	f04f 0c00 	mov.w	ip, #0
 800a90c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a910:	f8d0 e000 	ldr.w	lr, [r0]
 800a914:	b293      	uxth	r3, r2
 800a916:	ebac 0303 	sub.w	r3, ip, r3
 800a91a:	0c12      	lsrs	r2, r2, #16
 800a91c:	fa13 f38e 	uxtah	r3, r3, lr
 800a920:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a924:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a928:	b29b      	uxth	r3, r3
 800a92a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a92e:	45c1      	cmp	r9, r8
 800a930:	f840 3b04 	str.w	r3, [r0], #4
 800a934:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a938:	d2e8      	bcs.n	800a90c <quorem+0xb0>
 800a93a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a93e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a942:	b922      	cbnz	r2, 800a94e <quorem+0xf2>
 800a944:	3b04      	subs	r3, #4
 800a946:	429d      	cmp	r5, r3
 800a948:	461a      	mov	r2, r3
 800a94a:	d30a      	bcc.n	800a962 <quorem+0x106>
 800a94c:	613c      	str	r4, [r7, #16]
 800a94e:	4630      	mov	r0, r6
 800a950:	b003      	add	sp, #12
 800a952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a956:	6812      	ldr	r2, [r2, #0]
 800a958:	3b04      	subs	r3, #4
 800a95a:	2a00      	cmp	r2, #0
 800a95c:	d1cc      	bne.n	800a8f8 <quorem+0x9c>
 800a95e:	3c01      	subs	r4, #1
 800a960:	e7c7      	b.n	800a8f2 <quorem+0x96>
 800a962:	6812      	ldr	r2, [r2, #0]
 800a964:	3b04      	subs	r3, #4
 800a966:	2a00      	cmp	r2, #0
 800a968:	d1f0      	bne.n	800a94c <quorem+0xf0>
 800a96a:	3c01      	subs	r4, #1
 800a96c:	e7eb      	b.n	800a946 <quorem+0xea>
 800a96e:	2000      	movs	r0, #0
 800a970:	e7ee      	b.n	800a950 <quorem+0xf4>
 800a972:	0000      	movs	r0, r0
 800a974:	0000      	movs	r0, r0
	...

0800a978 <_dtoa_r>:
 800a978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97c:	ed2d 8b04 	vpush	{d8-d9}
 800a980:	ec57 6b10 	vmov	r6, r7, d0
 800a984:	b093      	sub	sp, #76	; 0x4c
 800a986:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a988:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a98c:	9106      	str	r1, [sp, #24]
 800a98e:	ee10 aa10 	vmov	sl, s0
 800a992:	4604      	mov	r4, r0
 800a994:	9209      	str	r2, [sp, #36]	; 0x24
 800a996:	930c      	str	r3, [sp, #48]	; 0x30
 800a998:	46bb      	mov	fp, r7
 800a99a:	b975      	cbnz	r5, 800a9ba <_dtoa_r+0x42>
 800a99c:	2010      	movs	r0, #16
 800a99e:	f7fe f8c3 	bl	8008b28 <malloc>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	6260      	str	r0, [r4, #36]	; 0x24
 800a9a6:	b920      	cbnz	r0, 800a9b2 <_dtoa_r+0x3a>
 800a9a8:	4ba7      	ldr	r3, [pc, #668]	; (800ac48 <_dtoa_r+0x2d0>)
 800a9aa:	21ea      	movs	r1, #234	; 0xea
 800a9ac:	48a7      	ldr	r0, [pc, #668]	; (800ac4c <_dtoa_r+0x2d4>)
 800a9ae:	f7ff ff27 	bl	800a800 <__assert_func>
 800a9b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a9b6:	6005      	str	r5, [r0, #0]
 800a9b8:	60c5      	str	r5, [r0, #12]
 800a9ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9bc:	6819      	ldr	r1, [r3, #0]
 800a9be:	b151      	cbz	r1, 800a9d6 <_dtoa_r+0x5e>
 800a9c0:	685a      	ldr	r2, [r3, #4]
 800a9c2:	604a      	str	r2, [r1, #4]
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	4093      	lsls	r3, r2
 800a9c8:	608b      	str	r3, [r1, #8]
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	f001 fbd8 	bl	800c180 <_Bfree>
 800a9d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	601a      	str	r2, [r3, #0]
 800a9d6:	1e3b      	subs	r3, r7, #0
 800a9d8:	bfaa      	itet	ge
 800a9da:	2300      	movge	r3, #0
 800a9dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a9e0:	f8c8 3000 	strge.w	r3, [r8]
 800a9e4:	4b9a      	ldr	r3, [pc, #616]	; (800ac50 <_dtoa_r+0x2d8>)
 800a9e6:	bfbc      	itt	lt
 800a9e8:	2201      	movlt	r2, #1
 800a9ea:	f8c8 2000 	strlt.w	r2, [r8]
 800a9ee:	ea33 030b 	bics.w	r3, r3, fp
 800a9f2:	d11b      	bne.n	800aa2c <_dtoa_r+0xb4>
 800a9f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9f6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a9fa:	6013      	str	r3, [r2, #0]
 800a9fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa00:	4333      	orrs	r3, r6
 800aa02:	f000 8592 	beq.w	800b52a <_dtoa_r+0xbb2>
 800aa06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa08:	b963      	cbnz	r3, 800aa24 <_dtoa_r+0xac>
 800aa0a:	4b92      	ldr	r3, [pc, #584]	; (800ac54 <_dtoa_r+0x2dc>)
 800aa0c:	e022      	b.n	800aa54 <_dtoa_r+0xdc>
 800aa0e:	4b92      	ldr	r3, [pc, #584]	; (800ac58 <_dtoa_r+0x2e0>)
 800aa10:	9301      	str	r3, [sp, #4]
 800aa12:	3308      	adds	r3, #8
 800aa14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aa16:	6013      	str	r3, [r2, #0]
 800aa18:	9801      	ldr	r0, [sp, #4]
 800aa1a:	b013      	add	sp, #76	; 0x4c
 800aa1c:	ecbd 8b04 	vpop	{d8-d9}
 800aa20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa24:	4b8b      	ldr	r3, [pc, #556]	; (800ac54 <_dtoa_r+0x2dc>)
 800aa26:	9301      	str	r3, [sp, #4]
 800aa28:	3303      	adds	r3, #3
 800aa2a:	e7f3      	b.n	800aa14 <_dtoa_r+0x9c>
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	2300      	movs	r3, #0
 800aa30:	4650      	mov	r0, sl
 800aa32:	4659      	mov	r1, fp
 800aa34:	f7f6 f850 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa38:	ec4b ab19 	vmov	d9, sl, fp
 800aa3c:	4680      	mov	r8, r0
 800aa3e:	b158      	cbz	r0, 800aa58 <_dtoa_r+0xe0>
 800aa40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa42:	2301      	movs	r3, #1
 800aa44:	6013      	str	r3, [r2, #0]
 800aa46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f000 856b 	beq.w	800b524 <_dtoa_r+0xbac>
 800aa4e:	4883      	ldr	r0, [pc, #524]	; (800ac5c <_dtoa_r+0x2e4>)
 800aa50:	6018      	str	r0, [r3, #0]
 800aa52:	1e43      	subs	r3, r0, #1
 800aa54:	9301      	str	r3, [sp, #4]
 800aa56:	e7df      	b.n	800aa18 <_dtoa_r+0xa0>
 800aa58:	ec4b ab10 	vmov	d0, sl, fp
 800aa5c:	aa10      	add	r2, sp, #64	; 0x40
 800aa5e:	a911      	add	r1, sp, #68	; 0x44
 800aa60:	4620      	mov	r0, r4
 800aa62:	f001 ff3b 	bl	800c8dc <__d2b>
 800aa66:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800aa6a:	ee08 0a10 	vmov	s16, r0
 800aa6e:	2d00      	cmp	r5, #0
 800aa70:	f000 8084 	beq.w	800ab7c <_dtoa_r+0x204>
 800aa74:	ee19 3a90 	vmov	r3, s19
 800aa78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa7c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800aa80:	4656      	mov	r6, sl
 800aa82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800aa86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aa8a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800aa8e:	4b74      	ldr	r3, [pc, #464]	; (800ac60 <_dtoa_r+0x2e8>)
 800aa90:	2200      	movs	r2, #0
 800aa92:	4630      	mov	r0, r6
 800aa94:	4639      	mov	r1, r7
 800aa96:	f7f5 fbff 	bl	8000298 <__aeabi_dsub>
 800aa9a:	a365      	add	r3, pc, #404	; (adr r3, 800ac30 <_dtoa_r+0x2b8>)
 800aa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa0:	f7f5 fdb2 	bl	8000608 <__aeabi_dmul>
 800aaa4:	a364      	add	r3, pc, #400	; (adr r3, 800ac38 <_dtoa_r+0x2c0>)
 800aaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaaa:	f7f5 fbf7 	bl	800029c <__adddf3>
 800aaae:	4606      	mov	r6, r0
 800aab0:	4628      	mov	r0, r5
 800aab2:	460f      	mov	r7, r1
 800aab4:	f7f5 fd3e 	bl	8000534 <__aeabi_i2d>
 800aab8:	a361      	add	r3, pc, #388	; (adr r3, 800ac40 <_dtoa_r+0x2c8>)
 800aaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabe:	f7f5 fda3 	bl	8000608 <__aeabi_dmul>
 800aac2:	4602      	mov	r2, r0
 800aac4:	460b      	mov	r3, r1
 800aac6:	4630      	mov	r0, r6
 800aac8:	4639      	mov	r1, r7
 800aaca:	f7f5 fbe7 	bl	800029c <__adddf3>
 800aace:	4606      	mov	r6, r0
 800aad0:	460f      	mov	r7, r1
 800aad2:	f7f6 f849 	bl	8000b68 <__aeabi_d2iz>
 800aad6:	2200      	movs	r2, #0
 800aad8:	9000      	str	r0, [sp, #0]
 800aada:	2300      	movs	r3, #0
 800aadc:	4630      	mov	r0, r6
 800aade:	4639      	mov	r1, r7
 800aae0:	f7f6 f804 	bl	8000aec <__aeabi_dcmplt>
 800aae4:	b150      	cbz	r0, 800aafc <_dtoa_r+0x184>
 800aae6:	9800      	ldr	r0, [sp, #0]
 800aae8:	f7f5 fd24 	bl	8000534 <__aeabi_i2d>
 800aaec:	4632      	mov	r2, r6
 800aaee:	463b      	mov	r3, r7
 800aaf0:	f7f5 fff2 	bl	8000ad8 <__aeabi_dcmpeq>
 800aaf4:	b910      	cbnz	r0, 800aafc <_dtoa_r+0x184>
 800aaf6:	9b00      	ldr	r3, [sp, #0]
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	9300      	str	r3, [sp, #0]
 800aafc:	9b00      	ldr	r3, [sp, #0]
 800aafe:	2b16      	cmp	r3, #22
 800ab00:	d85a      	bhi.n	800abb8 <_dtoa_r+0x240>
 800ab02:	9a00      	ldr	r2, [sp, #0]
 800ab04:	4b57      	ldr	r3, [pc, #348]	; (800ac64 <_dtoa_r+0x2ec>)
 800ab06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0e:	ec51 0b19 	vmov	r0, r1, d9
 800ab12:	f7f5 ffeb 	bl	8000aec <__aeabi_dcmplt>
 800ab16:	2800      	cmp	r0, #0
 800ab18:	d050      	beq.n	800abbc <_dtoa_r+0x244>
 800ab1a:	9b00      	ldr	r3, [sp, #0]
 800ab1c:	3b01      	subs	r3, #1
 800ab1e:	9300      	str	r3, [sp, #0]
 800ab20:	2300      	movs	r3, #0
 800ab22:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab26:	1b5d      	subs	r5, r3, r5
 800ab28:	1e6b      	subs	r3, r5, #1
 800ab2a:	9305      	str	r3, [sp, #20]
 800ab2c:	bf45      	ittet	mi
 800ab2e:	f1c5 0301 	rsbmi	r3, r5, #1
 800ab32:	9304      	strmi	r3, [sp, #16]
 800ab34:	2300      	movpl	r3, #0
 800ab36:	2300      	movmi	r3, #0
 800ab38:	bf4c      	ite	mi
 800ab3a:	9305      	strmi	r3, [sp, #20]
 800ab3c:	9304      	strpl	r3, [sp, #16]
 800ab3e:	9b00      	ldr	r3, [sp, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	db3d      	blt.n	800abc0 <_dtoa_r+0x248>
 800ab44:	9b05      	ldr	r3, [sp, #20]
 800ab46:	9a00      	ldr	r2, [sp, #0]
 800ab48:	920a      	str	r2, [sp, #40]	; 0x28
 800ab4a:	4413      	add	r3, r2
 800ab4c:	9305      	str	r3, [sp, #20]
 800ab4e:	2300      	movs	r3, #0
 800ab50:	9307      	str	r3, [sp, #28]
 800ab52:	9b06      	ldr	r3, [sp, #24]
 800ab54:	2b09      	cmp	r3, #9
 800ab56:	f200 8089 	bhi.w	800ac6c <_dtoa_r+0x2f4>
 800ab5a:	2b05      	cmp	r3, #5
 800ab5c:	bfc4      	itt	gt
 800ab5e:	3b04      	subgt	r3, #4
 800ab60:	9306      	strgt	r3, [sp, #24]
 800ab62:	9b06      	ldr	r3, [sp, #24]
 800ab64:	f1a3 0302 	sub.w	r3, r3, #2
 800ab68:	bfcc      	ite	gt
 800ab6a:	2500      	movgt	r5, #0
 800ab6c:	2501      	movle	r5, #1
 800ab6e:	2b03      	cmp	r3, #3
 800ab70:	f200 8087 	bhi.w	800ac82 <_dtoa_r+0x30a>
 800ab74:	e8df f003 	tbb	[pc, r3]
 800ab78:	59383a2d 	.word	0x59383a2d
 800ab7c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ab80:	441d      	add	r5, r3
 800ab82:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ab86:	2b20      	cmp	r3, #32
 800ab88:	bfc1      	itttt	gt
 800ab8a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ab8e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ab92:	fa0b f303 	lslgt.w	r3, fp, r3
 800ab96:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ab9a:	bfda      	itte	le
 800ab9c:	f1c3 0320 	rsble	r3, r3, #32
 800aba0:	fa06 f003 	lslle.w	r0, r6, r3
 800aba4:	4318      	orrgt	r0, r3
 800aba6:	f7f5 fcb5 	bl	8000514 <__aeabi_ui2d>
 800abaa:	2301      	movs	r3, #1
 800abac:	4606      	mov	r6, r0
 800abae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800abb2:	3d01      	subs	r5, #1
 800abb4:	930e      	str	r3, [sp, #56]	; 0x38
 800abb6:	e76a      	b.n	800aa8e <_dtoa_r+0x116>
 800abb8:	2301      	movs	r3, #1
 800abba:	e7b2      	b.n	800ab22 <_dtoa_r+0x1aa>
 800abbc:	900b      	str	r0, [sp, #44]	; 0x2c
 800abbe:	e7b1      	b.n	800ab24 <_dtoa_r+0x1ac>
 800abc0:	9b04      	ldr	r3, [sp, #16]
 800abc2:	9a00      	ldr	r2, [sp, #0]
 800abc4:	1a9b      	subs	r3, r3, r2
 800abc6:	9304      	str	r3, [sp, #16]
 800abc8:	4253      	negs	r3, r2
 800abca:	9307      	str	r3, [sp, #28]
 800abcc:	2300      	movs	r3, #0
 800abce:	930a      	str	r3, [sp, #40]	; 0x28
 800abd0:	e7bf      	b.n	800ab52 <_dtoa_r+0x1da>
 800abd2:	2300      	movs	r3, #0
 800abd4:	9308      	str	r3, [sp, #32]
 800abd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abd8:	2b00      	cmp	r3, #0
 800abda:	dc55      	bgt.n	800ac88 <_dtoa_r+0x310>
 800abdc:	2301      	movs	r3, #1
 800abde:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800abe2:	461a      	mov	r2, r3
 800abe4:	9209      	str	r2, [sp, #36]	; 0x24
 800abe6:	e00c      	b.n	800ac02 <_dtoa_r+0x28a>
 800abe8:	2301      	movs	r3, #1
 800abea:	e7f3      	b.n	800abd4 <_dtoa_r+0x25c>
 800abec:	2300      	movs	r3, #0
 800abee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abf0:	9308      	str	r3, [sp, #32]
 800abf2:	9b00      	ldr	r3, [sp, #0]
 800abf4:	4413      	add	r3, r2
 800abf6:	9302      	str	r3, [sp, #8]
 800abf8:	3301      	adds	r3, #1
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	9303      	str	r3, [sp, #12]
 800abfe:	bfb8      	it	lt
 800ac00:	2301      	movlt	r3, #1
 800ac02:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ac04:	2200      	movs	r2, #0
 800ac06:	6042      	str	r2, [r0, #4]
 800ac08:	2204      	movs	r2, #4
 800ac0a:	f102 0614 	add.w	r6, r2, #20
 800ac0e:	429e      	cmp	r6, r3
 800ac10:	6841      	ldr	r1, [r0, #4]
 800ac12:	d93d      	bls.n	800ac90 <_dtoa_r+0x318>
 800ac14:	4620      	mov	r0, r4
 800ac16:	f001 fa73 	bl	800c100 <_Balloc>
 800ac1a:	9001      	str	r0, [sp, #4]
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	d13b      	bne.n	800ac98 <_dtoa_r+0x320>
 800ac20:	4b11      	ldr	r3, [pc, #68]	; (800ac68 <_dtoa_r+0x2f0>)
 800ac22:	4602      	mov	r2, r0
 800ac24:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ac28:	e6c0      	b.n	800a9ac <_dtoa_r+0x34>
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	e7df      	b.n	800abee <_dtoa_r+0x276>
 800ac2e:	bf00      	nop
 800ac30:	636f4361 	.word	0x636f4361
 800ac34:	3fd287a7 	.word	0x3fd287a7
 800ac38:	8b60c8b3 	.word	0x8b60c8b3
 800ac3c:	3fc68a28 	.word	0x3fc68a28
 800ac40:	509f79fb 	.word	0x509f79fb
 800ac44:	3fd34413 	.word	0x3fd34413
 800ac48:	0800da91 	.word	0x0800da91
 800ac4c:	0800daa8 	.word	0x0800daa8
 800ac50:	7ff00000 	.word	0x7ff00000
 800ac54:	0800da8d 	.word	0x0800da8d
 800ac58:	0800da84 	.word	0x0800da84
 800ac5c:	0800d9d5 	.word	0x0800d9d5
 800ac60:	3ff80000 	.word	0x3ff80000
 800ac64:	0800dc78 	.word	0x0800dc78
 800ac68:	0800db03 	.word	0x0800db03
 800ac6c:	2501      	movs	r5, #1
 800ac6e:	2300      	movs	r3, #0
 800ac70:	9306      	str	r3, [sp, #24]
 800ac72:	9508      	str	r5, [sp, #32]
 800ac74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac78:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	2312      	movs	r3, #18
 800ac80:	e7b0      	b.n	800abe4 <_dtoa_r+0x26c>
 800ac82:	2301      	movs	r3, #1
 800ac84:	9308      	str	r3, [sp, #32]
 800ac86:	e7f5      	b.n	800ac74 <_dtoa_r+0x2fc>
 800ac88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac8a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ac8e:	e7b8      	b.n	800ac02 <_dtoa_r+0x28a>
 800ac90:	3101      	adds	r1, #1
 800ac92:	6041      	str	r1, [r0, #4]
 800ac94:	0052      	lsls	r2, r2, #1
 800ac96:	e7b8      	b.n	800ac0a <_dtoa_r+0x292>
 800ac98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac9a:	9a01      	ldr	r2, [sp, #4]
 800ac9c:	601a      	str	r2, [r3, #0]
 800ac9e:	9b03      	ldr	r3, [sp, #12]
 800aca0:	2b0e      	cmp	r3, #14
 800aca2:	f200 809d 	bhi.w	800ade0 <_dtoa_r+0x468>
 800aca6:	2d00      	cmp	r5, #0
 800aca8:	f000 809a 	beq.w	800ade0 <_dtoa_r+0x468>
 800acac:	9b00      	ldr	r3, [sp, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	dd32      	ble.n	800ad18 <_dtoa_r+0x3a0>
 800acb2:	4ab7      	ldr	r2, [pc, #732]	; (800af90 <_dtoa_r+0x618>)
 800acb4:	f003 030f 	and.w	r3, r3, #15
 800acb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800acbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800acc0:	9b00      	ldr	r3, [sp, #0]
 800acc2:	05d8      	lsls	r0, r3, #23
 800acc4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800acc8:	d516      	bpl.n	800acf8 <_dtoa_r+0x380>
 800acca:	4bb2      	ldr	r3, [pc, #712]	; (800af94 <_dtoa_r+0x61c>)
 800accc:	ec51 0b19 	vmov	r0, r1, d9
 800acd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800acd4:	f7f5 fdc2 	bl	800085c <__aeabi_ddiv>
 800acd8:	f007 070f 	and.w	r7, r7, #15
 800acdc:	4682      	mov	sl, r0
 800acde:	468b      	mov	fp, r1
 800ace0:	2503      	movs	r5, #3
 800ace2:	4eac      	ldr	r6, [pc, #688]	; (800af94 <_dtoa_r+0x61c>)
 800ace4:	b957      	cbnz	r7, 800acfc <_dtoa_r+0x384>
 800ace6:	4642      	mov	r2, r8
 800ace8:	464b      	mov	r3, r9
 800acea:	4650      	mov	r0, sl
 800acec:	4659      	mov	r1, fp
 800acee:	f7f5 fdb5 	bl	800085c <__aeabi_ddiv>
 800acf2:	4682      	mov	sl, r0
 800acf4:	468b      	mov	fp, r1
 800acf6:	e028      	b.n	800ad4a <_dtoa_r+0x3d2>
 800acf8:	2502      	movs	r5, #2
 800acfa:	e7f2      	b.n	800ace2 <_dtoa_r+0x36a>
 800acfc:	07f9      	lsls	r1, r7, #31
 800acfe:	d508      	bpl.n	800ad12 <_dtoa_r+0x39a>
 800ad00:	4640      	mov	r0, r8
 800ad02:	4649      	mov	r1, r9
 800ad04:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ad08:	f7f5 fc7e 	bl	8000608 <__aeabi_dmul>
 800ad0c:	3501      	adds	r5, #1
 800ad0e:	4680      	mov	r8, r0
 800ad10:	4689      	mov	r9, r1
 800ad12:	107f      	asrs	r7, r7, #1
 800ad14:	3608      	adds	r6, #8
 800ad16:	e7e5      	b.n	800ace4 <_dtoa_r+0x36c>
 800ad18:	f000 809b 	beq.w	800ae52 <_dtoa_r+0x4da>
 800ad1c:	9b00      	ldr	r3, [sp, #0]
 800ad1e:	4f9d      	ldr	r7, [pc, #628]	; (800af94 <_dtoa_r+0x61c>)
 800ad20:	425e      	negs	r6, r3
 800ad22:	4b9b      	ldr	r3, [pc, #620]	; (800af90 <_dtoa_r+0x618>)
 800ad24:	f006 020f 	and.w	r2, r6, #15
 800ad28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad30:	ec51 0b19 	vmov	r0, r1, d9
 800ad34:	f7f5 fc68 	bl	8000608 <__aeabi_dmul>
 800ad38:	1136      	asrs	r6, r6, #4
 800ad3a:	4682      	mov	sl, r0
 800ad3c:	468b      	mov	fp, r1
 800ad3e:	2300      	movs	r3, #0
 800ad40:	2502      	movs	r5, #2
 800ad42:	2e00      	cmp	r6, #0
 800ad44:	d17a      	bne.n	800ae3c <_dtoa_r+0x4c4>
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d1d3      	bne.n	800acf2 <_dtoa_r+0x37a>
 800ad4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f000 8082 	beq.w	800ae56 <_dtoa_r+0x4de>
 800ad52:	4b91      	ldr	r3, [pc, #580]	; (800af98 <_dtoa_r+0x620>)
 800ad54:	2200      	movs	r2, #0
 800ad56:	4650      	mov	r0, sl
 800ad58:	4659      	mov	r1, fp
 800ad5a:	f7f5 fec7 	bl	8000aec <__aeabi_dcmplt>
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	d079      	beq.n	800ae56 <_dtoa_r+0x4de>
 800ad62:	9b03      	ldr	r3, [sp, #12]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d076      	beq.n	800ae56 <_dtoa_r+0x4de>
 800ad68:	9b02      	ldr	r3, [sp, #8]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	dd36      	ble.n	800addc <_dtoa_r+0x464>
 800ad6e:	9b00      	ldr	r3, [sp, #0]
 800ad70:	4650      	mov	r0, sl
 800ad72:	4659      	mov	r1, fp
 800ad74:	1e5f      	subs	r7, r3, #1
 800ad76:	2200      	movs	r2, #0
 800ad78:	4b88      	ldr	r3, [pc, #544]	; (800af9c <_dtoa_r+0x624>)
 800ad7a:	f7f5 fc45 	bl	8000608 <__aeabi_dmul>
 800ad7e:	9e02      	ldr	r6, [sp, #8]
 800ad80:	4682      	mov	sl, r0
 800ad82:	468b      	mov	fp, r1
 800ad84:	3501      	adds	r5, #1
 800ad86:	4628      	mov	r0, r5
 800ad88:	f7f5 fbd4 	bl	8000534 <__aeabi_i2d>
 800ad8c:	4652      	mov	r2, sl
 800ad8e:	465b      	mov	r3, fp
 800ad90:	f7f5 fc3a 	bl	8000608 <__aeabi_dmul>
 800ad94:	4b82      	ldr	r3, [pc, #520]	; (800afa0 <_dtoa_r+0x628>)
 800ad96:	2200      	movs	r2, #0
 800ad98:	f7f5 fa80 	bl	800029c <__adddf3>
 800ad9c:	46d0      	mov	r8, sl
 800ad9e:	46d9      	mov	r9, fp
 800ada0:	4682      	mov	sl, r0
 800ada2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ada6:	2e00      	cmp	r6, #0
 800ada8:	d158      	bne.n	800ae5c <_dtoa_r+0x4e4>
 800adaa:	4b7e      	ldr	r3, [pc, #504]	; (800afa4 <_dtoa_r+0x62c>)
 800adac:	2200      	movs	r2, #0
 800adae:	4640      	mov	r0, r8
 800adb0:	4649      	mov	r1, r9
 800adb2:	f7f5 fa71 	bl	8000298 <__aeabi_dsub>
 800adb6:	4652      	mov	r2, sl
 800adb8:	465b      	mov	r3, fp
 800adba:	4680      	mov	r8, r0
 800adbc:	4689      	mov	r9, r1
 800adbe:	f7f5 feb3 	bl	8000b28 <__aeabi_dcmpgt>
 800adc2:	2800      	cmp	r0, #0
 800adc4:	f040 8295 	bne.w	800b2f2 <_dtoa_r+0x97a>
 800adc8:	4652      	mov	r2, sl
 800adca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800adce:	4640      	mov	r0, r8
 800add0:	4649      	mov	r1, r9
 800add2:	f7f5 fe8b 	bl	8000aec <__aeabi_dcmplt>
 800add6:	2800      	cmp	r0, #0
 800add8:	f040 8289 	bne.w	800b2ee <_dtoa_r+0x976>
 800addc:	ec5b ab19 	vmov	sl, fp, d9
 800ade0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f2c0 8148 	blt.w	800b078 <_dtoa_r+0x700>
 800ade8:	9a00      	ldr	r2, [sp, #0]
 800adea:	2a0e      	cmp	r2, #14
 800adec:	f300 8144 	bgt.w	800b078 <_dtoa_r+0x700>
 800adf0:	4b67      	ldr	r3, [pc, #412]	; (800af90 <_dtoa_r+0x618>)
 800adf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adf6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800adfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	f280 80d5 	bge.w	800afac <_dtoa_r+0x634>
 800ae02:	9b03      	ldr	r3, [sp, #12]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f300 80d1 	bgt.w	800afac <_dtoa_r+0x634>
 800ae0a:	f040 826f 	bne.w	800b2ec <_dtoa_r+0x974>
 800ae0e:	4b65      	ldr	r3, [pc, #404]	; (800afa4 <_dtoa_r+0x62c>)
 800ae10:	2200      	movs	r2, #0
 800ae12:	4640      	mov	r0, r8
 800ae14:	4649      	mov	r1, r9
 800ae16:	f7f5 fbf7 	bl	8000608 <__aeabi_dmul>
 800ae1a:	4652      	mov	r2, sl
 800ae1c:	465b      	mov	r3, fp
 800ae1e:	f7f5 fe79 	bl	8000b14 <__aeabi_dcmpge>
 800ae22:	9e03      	ldr	r6, [sp, #12]
 800ae24:	4637      	mov	r7, r6
 800ae26:	2800      	cmp	r0, #0
 800ae28:	f040 8245 	bne.w	800b2b6 <_dtoa_r+0x93e>
 800ae2c:	9d01      	ldr	r5, [sp, #4]
 800ae2e:	2331      	movs	r3, #49	; 0x31
 800ae30:	f805 3b01 	strb.w	r3, [r5], #1
 800ae34:	9b00      	ldr	r3, [sp, #0]
 800ae36:	3301      	adds	r3, #1
 800ae38:	9300      	str	r3, [sp, #0]
 800ae3a:	e240      	b.n	800b2be <_dtoa_r+0x946>
 800ae3c:	07f2      	lsls	r2, r6, #31
 800ae3e:	d505      	bpl.n	800ae4c <_dtoa_r+0x4d4>
 800ae40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae44:	f7f5 fbe0 	bl	8000608 <__aeabi_dmul>
 800ae48:	3501      	adds	r5, #1
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	1076      	asrs	r6, r6, #1
 800ae4e:	3708      	adds	r7, #8
 800ae50:	e777      	b.n	800ad42 <_dtoa_r+0x3ca>
 800ae52:	2502      	movs	r5, #2
 800ae54:	e779      	b.n	800ad4a <_dtoa_r+0x3d2>
 800ae56:	9f00      	ldr	r7, [sp, #0]
 800ae58:	9e03      	ldr	r6, [sp, #12]
 800ae5a:	e794      	b.n	800ad86 <_dtoa_r+0x40e>
 800ae5c:	9901      	ldr	r1, [sp, #4]
 800ae5e:	4b4c      	ldr	r3, [pc, #304]	; (800af90 <_dtoa_r+0x618>)
 800ae60:	4431      	add	r1, r6
 800ae62:	910d      	str	r1, [sp, #52]	; 0x34
 800ae64:	9908      	ldr	r1, [sp, #32]
 800ae66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ae6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ae6e:	2900      	cmp	r1, #0
 800ae70:	d043      	beq.n	800aefa <_dtoa_r+0x582>
 800ae72:	494d      	ldr	r1, [pc, #308]	; (800afa8 <_dtoa_r+0x630>)
 800ae74:	2000      	movs	r0, #0
 800ae76:	f7f5 fcf1 	bl	800085c <__aeabi_ddiv>
 800ae7a:	4652      	mov	r2, sl
 800ae7c:	465b      	mov	r3, fp
 800ae7e:	f7f5 fa0b 	bl	8000298 <__aeabi_dsub>
 800ae82:	9d01      	ldr	r5, [sp, #4]
 800ae84:	4682      	mov	sl, r0
 800ae86:	468b      	mov	fp, r1
 800ae88:	4649      	mov	r1, r9
 800ae8a:	4640      	mov	r0, r8
 800ae8c:	f7f5 fe6c 	bl	8000b68 <__aeabi_d2iz>
 800ae90:	4606      	mov	r6, r0
 800ae92:	f7f5 fb4f 	bl	8000534 <__aeabi_i2d>
 800ae96:	4602      	mov	r2, r0
 800ae98:	460b      	mov	r3, r1
 800ae9a:	4640      	mov	r0, r8
 800ae9c:	4649      	mov	r1, r9
 800ae9e:	f7f5 f9fb 	bl	8000298 <__aeabi_dsub>
 800aea2:	3630      	adds	r6, #48	; 0x30
 800aea4:	f805 6b01 	strb.w	r6, [r5], #1
 800aea8:	4652      	mov	r2, sl
 800aeaa:	465b      	mov	r3, fp
 800aeac:	4680      	mov	r8, r0
 800aeae:	4689      	mov	r9, r1
 800aeb0:	f7f5 fe1c 	bl	8000aec <__aeabi_dcmplt>
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	d163      	bne.n	800af80 <_dtoa_r+0x608>
 800aeb8:	4642      	mov	r2, r8
 800aeba:	464b      	mov	r3, r9
 800aebc:	4936      	ldr	r1, [pc, #216]	; (800af98 <_dtoa_r+0x620>)
 800aebe:	2000      	movs	r0, #0
 800aec0:	f7f5 f9ea 	bl	8000298 <__aeabi_dsub>
 800aec4:	4652      	mov	r2, sl
 800aec6:	465b      	mov	r3, fp
 800aec8:	f7f5 fe10 	bl	8000aec <__aeabi_dcmplt>
 800aecc:	2800      	cmp	r0, #0
 800aece:	f040 80b5 	bne.w	800b03c <_dtoa_r+0x6c4>
 800aed2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aed4:	429d      	cmp	r5, r3
 800aed6:	d081      	beq.n	800addc <_dtoa_r+0x464>
 800aed8:	4b30      	ldr	r3, [pc, #192]	; (800af9c <_dtoa_r+0x624>)
 800aeda:	2200      	movs	r2, #0
 800aedc:	4650      	mov	r0, sl
 800aede:	4659      	mov	r1, fp
 800aee0:	f7f5 fb92 	bl	8000608 <__aeabi_dmul>
 800aee4:	4b2d      	ldr	r3, [pc, #180]	; (800af9c <_dtoa_r+0x624>)
 800aee6:	4682      	mov	sl, r0
 800aee8:	468b      	mov	fp, r1
 800aeea:	4640      	mov	r0, r8
 800aeec:	4649      	mov	r1, r9
 800aeee:	2200      	movs	r2, #0
 800aef0:	f7f5 fb8a 	bl	8000608 <__aeabi_dmul>
 800aef4:	4680      	mov	r8, r0
 800aef6:	4689      	mov	r9, r1
 800aef8:	e7c6      	b.n	800ae88 <_dtoa_r+0x510>
 800aefa:	4650      	mov	r0, sl
 800aefc:	4659      	mov	r1, fp
 800aefe:	f7f5 fb83 	bl	8000608 <__aeabi_dmul>
 800af02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af04:	9d01      	ldr	r5, [sp, #4]
 800af06:	930f      	str	r3, [sp, #60]	; 0x3c
 800af08:	4682      	mov	sl, r0
 800af0a:	468b      	mov	fp, r1
 800af0c:	4649      	mov	r1, r9
 800af0e:	4640      	mov	r0, r8
 800af10:	f7f5 fe2a 	bl	8000b68 <__aeabi_d2iz>
 800af14:	4606      	mov	r6, r0
 800af16:	f7f5 fb0d 	bl	8000534 <__aeabi_i2d>
 800af1a:	3630      	adds	r6, #48	; 0x30
 800af1c:	4602      	mov	r2, r0
 800af1e:	460b      	mov	r3, r1
 800af20:	4640      	mov	r0, r8
 800af22:	4649      	mov	r1, r9
 800af24:	f7f5 f9b8 	bl	8000298 <__aeabi_dsub>
 800af28:	f805 6b01 	strb.w	r6, [r5], #1
 800af2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af2e:	429d      	cmp	r5, r3
 800af30:	4680      	mov	r8, r0
 800af32:	4689      	mov	r9, r1
 800af34:	f04f 0200 	mov.w	r2, #0
 800af38:	d124      	bne.n	800af84 <_dtoa_r+0x60c>
 800af3a:	4b1b      	ldr	r3, [pc, #108]	; (800afa8 <_dtoa_r+0x630>)
 800af3c:	4650      	mov	r0, sl
 800af3e:	4659      	mov	r1, fp
 800af40:	f7f5 f9ac 	bl	800029c <__adddf3>
 800af44:	4602      	mov	r2, r0
 800af46:	460b      	mov	r3, r1
 800af48:	4640      	mov	r0, r8
 800af4a:	4649      	mov	r1, r9
 800af4c:	f7f5 fdec 	bl	8000b28 <__aeabi_dcmpgt>
 800af50:	2800      	cmp	r0, #0
 800af52:	d173      	bne.n	800b03c <_dtoa_r+0x6c4>
 800af54:	4652      	mov	r2, sl
 800af56:	465b      	mov	r3, fp
 800af58:	4913      	ldr	r1, [pc, #76]	; (800afa8 <_dtoa_r+0x630>)
 800af5a:	2000      	movs	r0, #0
 800af5c:	f7f5 f99c 	bl	8000298 <__aeabi_dsub>
 800af60:	4602      	mov	r2, r0
 800af62:	460b      	mov	r3, r1
 800af64:	4640      	mov	r0, r8
 800af66:	4649      	mov	r1, r9
 800af68:	f7f5 fdc0 	bl	8000aec <__aeabi_dcmplt>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	f43f af35 	beq.w	800addc <_dtoa_r+0x464>
 800af72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800af74:	1e6b      	subs	r3, r5, #1
 800af76:	930f      	str	r3, [sp, #60]	; 0x3c
 800af78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800af7c:	2b30      	cmp	r3, #48	; 0x30
 800af7e:	d0f8      	beq.n	800af72 <_dtoa_r+0x5fa>
 800af80:	9700      	str	r7, [sp, #0]
 800af82:	e049      	b.n	800b018 <_dtoa_r+0x6a0>
 800af84:	4b05      	ldr	r3, [pc, #20]	; (800af9c <_dtoa_r+0x624>)
 800af86:	f7f5 fb3f 	bl	8000608 <__aeabi_dmul>
 800af8a:	4680      	mov	r8, r0
 800af8c:	4689      	mov	r9, r1
 800af8e:	e7bd      	b.n	800af0c <_dtoa_r+0x594>
 800af90:	0800dc78 	.word	0x0800dc78
 800af94:	0800dc50 	.word	0x0800dc50
 800af98:	3ff00000 	.word	0x3ff00000
 800af9c:	40240000 	.word	0x40240000
 800afa0:	401c0000 	.word	0x401c0000
 800afa4:	40140000 	.word	0x40140000
 800afa8:	3fe00000 	.word	0x3fe00000
 800afac:	9d01      	ldr	r5, [sp, #4]
 800afae:	4656      	mov	r6, sl
 800afb0:	465f      	mov	r7, fp
 800afb2:	4642      	mov	r2, r8
 800afb4:	464b      	mov	r3, r9
 800afb6:	4630      	mov	r0, r6
 800afb8:	4639      	mov	r1, r7
 800afba:	f7f5 fc4f 	bl	800085c <__aeabi_ddiv>
 800afbe:	f7f5 fdd3 	bl	8000b68 <__aeabi_d2iz>
 800afc2:	4682      	mov	sl, r0
 800afc4:	f7f5 fab6 	bl	8000534 <__aeabi_i2d>
 800afc8:	4642      	mov	r2, r8
 800afca:	464b      	mov	r3, r9
 800afcc:	f7f5 fb1c 	bl	8000608 <__aeabi_dmul>
 800afd0:	4602      	mov	r2, r0
 800afd2:	460b      	mov	r3, r1
 800afd4:	4630      	mov	r0, r6
 800afd6:	4639      	mov	r1, r7
 800afd8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800afdc:	f7f5 f95c 	bl	8000298 <__aeabi_dsub>
 800afe0:	f805 6b01 	strb.w	r6, [r5], #1
 800afe4:	9e01      	ldr	r6, [sp, #4]
 800afe6:	9f03      	ldr	r7, [sp, #12]
 800afe8:	1bae      	subs	r6, r5, r6
 800afea:	42b7      	cmp	r7, r6
 800afec:	4602      	mov	r2, r0
 800afee:	460b      	mov	r3, r1
 800aff0:	d135      	bne.n	800b05e <_dtoa_r+0x6e6>
 800aff2:	f7f5 f953 	bl	800029c <__adddf3>
 800aff6:	4642      	mov	r2, r8
 800aff8:	464b      	mov	r3, r9
 800affa:	4606      	mov	r6, r0
 800affc:	460f      	mov	r7, r1
 800affe:	f7f5 fd93 	bl	8000b28 <__aeabi_dcmpgt>
 800b002:	b9d0      	cbnz	r0, 800b03a <_dtoa_r+0x6c2>
 800b004:	4642      	mov	r2, r8
 800b006:	464b      	mov	r3, r9
 800b008:	4630      	mov	r0, r6
 800b00a:	4639      	mov	r1, r7
 800b00c:	f7f5 fd64 	bl	8000ad8 <__aeabi_dcmpeq>
 800b010:	b110      	cbz	r0, 800b018 <_dtoa_r+0x6a0>
 800b012:	f01a 0f01 	tst.w	sl, #1
 800b016:	d110      	bne.n	800b03a <_dtoa_r+0x6c2>
 800b018:	4620      	mov	r0, r4
 800b01a:	ee18 1a10 	vmov	r1, s16
 800b01e:	f001 f8af 	bl	800c180 <_Bfree>
 800b022:	2300      	movs	r3, #0
 800b024:	9800      	ldr	r0, [sp, #0]
 800b026:	702b      	strb	r3, [r5, #0]
 800b028:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b02a:	3001      	adds	r0, #1
 800b02c:	6018      	str	r0, [r3, #0]
 800b02e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b030:	2b00      	cmp	r3, #0
 800b032:	f43f acf1 	beq.w	800aa18 <_dtoa_r+0xa0>
 800b036:	601d      	str	r5, [r3, #0]
 800b038:	e4ee      	b.n	800aa18 <_dtoa_r+0xa0>
 800b03a:	9f00      	ldr	r7, [sp, #0]
 800b03c:	462b      	mov	r3, r5
 800b03e:	461d      	mov	r5, r3
 800b040:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b044:	2a39      	cmp	r2, #57	; 0x39
 800b046:	d106      	bne.n	800b056 <_dtoa_r+0x6de>
 800b048:	9a01      	ldr	r2, [sp, #4]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	d1f7      	bne.n	800b03e <_dtoa_r+0x6c6>
 800b04e:	9901      	ldr	r1, [sp, #4]
 800b050:	2230      	movs	r2, #48	; 0x30
 800b052:	3701      	adds	r7, #1
 800b054:	700a      	strb	r2, [r1, #0]
 800b056:	781a      	ldrb	r2, [r3, #0]
 800b058:	3201      	adds	r2, #1
 800b05a:	701a      	strb	r2, [r3, #0]
 800b05c:	e790      	b.n	800af80 <_dtoa_r+0x608>
 800b05e:	4ba6      	ldr	r3, [pc, #664]	; (800b2f8 <_dtoa_r+0x980>)
 800b060:	2200      	movs	r2, #0
 800b062:	f7f5 fad1 	bl	8000608 <__aeabi_dmul>
 800b066:	2200      	movs	r2, #0
 800b068:	2300      	movs	r3, #0
 800b06a:	4606      	mov	r6, r0
 800b06c:	460f      	mov	r7, r1
 800b06e:	f7f5 fd33 	bl	8000ad8 <__aeabi_dcmpeq>
 800b072:	2800      	cmp	r0, #0
 800b074:	d09d      	beq.n	800afb2 <_dtoa_r+0x63a>
 800b076:	e7cf      	b.n	800b018 <_dtoa_r+0x6a0>
 800b078:	9a08      	ldr	r2, [sp, #32]
 800b07a:	2a00      	cmp	r2, #0
 800b07c:	f000 80d7 	beq.w	800b22e <_dtoa_r+0x8b6>
 800b080:	9a06      	ldr	r2, [sp, #24]
 800b082:	2a01      	cmp	r2, #1
 800b084:	f300 80ba 	bgt.w	800b1fc <_dtoa_r+0x884>
 800b088:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b08a:	2a00      	cmp	r2, #0
 800b08c:	f000 80b2 	beq.w	800b1f4 <_dtoa_r+0x87c>
 800b090:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b094:	9e07      	ldr	r6, [sp, #28]
 800b096:	9d04      	ldr	r5, [sp, #16]
 800b098:	9a04      	ldr	r2, [sp, #16]
 800b09a:	441a      	add	r2, r3
 800b09c:	9204      	str	r2, [sp, #16]
 800b09e:	9a05      	ldr	r2, [sp, #20]
 800b0a0:	2101      	movs	r1, #1
 800b0a2:	441a      	add	r2, r3
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	9205      	str	r2, [sp, #20]
 800b0a8:	f001 f96c 	bl	800c384 <__i2b>
 800b0ac:	4607      	mov	r7, r0
 800b0ae:	2d00      	cmp	r5, #0
 800b0b0:	dd0c      	ble.n	800b0cc <_dtoa_r+0x754>
 800b0b2:	9b05      	ldr	r3, [sp, #20]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	dd09      	ble.n	800b0cc <_dtoa_r+0x754>
 800b0b8:	42ab      	cmp	r3, r5
 800b0ba:	9a04      	ldr	r2, [sp, #16]
 800b0bc:	bfa8      	it	ge
 800b0be:	462b      	movge	r3, r5
 800b0c0:	1ad2      	subs	r2, r2, r3
 800b0c2:	9204      	str	r2, [sp, #16]
 800b0c4:	9a05      	ldr	r2, [sp, #20]
 800b0c6:	1aed      	subs	r5, r5, r3
 800b0c8:	1ad3      	subs	r3, r2, r3
 800b0ca:	9305      	str	r3, [sp, #20]
 800b0cc:	9b07      	ldr	r3, [sp, #28]
 800b0ce:	b31b      	cbz	r3, 800b118 <_dtoa_r+0x7a0>
 800b0d0:	9b08      	ldr	r3, [sp, #32]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	f000 80af 	beq.w	800b236 <_dtoa_r+0x8be>
 800b0d8:	2e00      	cmp	r6, #0
 800b0da:	dd13      	ble.n	800b104 <_dtoa_r+0x78c>
 800b0dc:	4639      	mov	r1, r7
 800b0de:	4632      	mov	r2, r6
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	f001 fa0f 	bl	800c504 <__pow5mult>
 800b0e6:	ee18 2a10 	vmov	r2, s16
 800b0ea:	4601      	mov	r1, r0
 800b0ec:	4607      	mov	r7, r0
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f001 f95e 	bl	800c3b0 <__multiply>
 800b0f4:	ee18 1a10 	vmov	r1, s16
 800b0f8:	4680      	mov	r8, r0
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f001 f840 	bl	800c180 <_Bfree>
 800b100:	ee08 8a10 	vmov	s16, r8
 800b104:	9b07      	ldr	r3, [sp, #28]
 800b106:	1b9a      	subs	r2, r3, r6
 800b108:	d006      	beq.n	800b118 <_dtoa_r+0x7a0>
 800b10a:	ee18 1a10 	vmov	r1, s16
 800b10e:	4620      	mov	r0, r4
 800b110:	f001 f9f8 	bl	800c504 <__pow5mult>
 800b114:	ee08 0a10 	vmov	s16, r0
 800b118:	2101      	movs	r1, #1
 800b11a:	4620      	mov	r0, r4
 800b11c:	f001 f932 	bl	800c384 <__i2b>
 800b120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b122:	2b00      	cmp	r3, #0
 800b124:	4606      	mov	r6, r0
 800b126:	f340 8088 	ble.w	800b23a <_dtoa_r+0x8c2>
 800b12a:	461a      	mov	r2, r3
 800b12c:	4601      	mov	r1, r0
 800b12e:	4620      	mov	r0, r4
 800b130:	f001 f9e8 	bl	800c504 <__pow5mult>
 800b134:	9b06      	ldr	r3, [sp, #24]
 800b136:	2b01      	cmp	r3, #1
 800b138:	4606      	mov	r6, r0
 800b13a:	f340 8081 	ble.w	800b240 <_dtoa_r+0x8c8>
 800b13e:	f04f 0800 	mov.w	r8, #0
 800b142:	6933      	ldr	r3, [r6, #16]
 800b144:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b148:	6918      	ldr	r0, [r3, #16]
 800b14a:	f001 f8cb 	bl	800c2e4 <__hi0bits>
 800b14e:	f1c0 0020 	rsb	r0, r0, #32
 800b152:	9b05      	ldr	r3, [sp, #20]
 800b154:	4418      	add	r0, r3
 800b156:	f010 001f 	ands.w	r0, r0, #31
 800b15a:	f000 8092 	beq.w	800b282 <_dtoa_r+0x90a>
 800b15e:	f1c0 0320 	rsb	r3, r0, #32
 800b162:	2b04      	cmp	r3, #4
 800b164:	f340 808a 	ble.w	800b27c <_dtoa_r+0x904>
 800b168:	f1c0 001c 	rsb	r0, r0, #28
 800b16c:	9b04      	ldr	r3, [sp, #16]
 800b16e:	4403      	add	r3, r0
 800b170:	9304      	str	r3, [sp, #16]
 800b172:	9b05      	ldr	r3, [sp, #20]
 800b174:	4403      	add	r3, r0
 800b176:	4405      	add	r5, r0
 800b178:	9305      	str	r3, [sp, #20]
 800b17a:	9b04      	ldr	r3, [sp, #16]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	dd07      	ble.n	800b190 <_dtoa_r+0x818>
 800b180:	ee18 1a10 	vmov	r1, s16
 800b184:	461a      	mov	r2, r3
 800b186:	4620      	mov	r0, r4
 800b188:	f001 fa16 	bl	800c5b8 <__lshift>
 800b18c:	ee08 0a10 	vmov	s16, r0
 800b190:	9b05      	ldr	r3, [sp, #20]
 800b192:	2b00      	cmp	r3, #0
 800b194:	dd05      	ble.n	800b1a2 <_dtoa_r+0x82a>
 800b196:	4631      	mov	r1, r6
 800b198:	461a      	mov	r2, r3
 800b19a:	4620      	mov	r0, r4
 800b19c:	f001 fa0c 	bl	800c5b8 <__lshift>
 800b1a0:	4606      	mov	r6, r0
 800b1a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d06e      	beq.n	800b286 <_dtoa_r+0x90e>
 800b1a8:	ee18 0a10 	vmov	r0, s16
 800b1ac:	4631      	mov	r1, r6
 800b1ae:	f001 fa73 	bl	800c698 <__mcmp>
 800b1b2:	2800      	cmp	r0, #0
 800b1b4:	da67      	bge.n	800b286 <_dtoa_r+0x90e>
 800b1b6:	9b00      	ldr	r3, [sp, #0]
 800b1b8:	3b01      	subs	r3, #1
 800b1ba:	ee18 1a10 	vmov	r1, s16
 800b1be:	9300      	str	r3, [sp, #0]
 800b1c0:	220a      	movs	r2, #10
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	f000 fffd 	bl	800c1c4 <__multadd>
 800b1ca:	9b08      	ldr	r3, [sp, #32]
 800b1cc:	ee08 0a10 	vmov	s16, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	f000 81b1 	beq.w	800b538 <_dtoa_r+0xbc0>
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	4639      	mov	r1, r7
 800b1da:	220a      	movs	r2, #10
 800b1dc:	4620      	mov	r0, r4
 800b1de:	f000 fff1 	bl	800c1c4 <__multadd>
 800b1e2:	9b02      	ldr	r3, [sp, #8]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	4607      	mov	r7, r0
 800b1e8:	f300 808e 	bgt.w	800b308 <_dtoa_r+0x990>
 800b1ec:	9b06      	ldr	r3, [sp, #24]
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	dc51      	bgt.n	800b296 <_dtoa_r+0x91e>
 800b1f2:	e089      	b.n	800b308 <_dtoa_r+0x990>
 800b1f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b1fa:	e74b      	b.n	800b094 <_dtoa_r+0x71c>
 800b1fc:	9b03      	ldr	r3, [sp, #12]
 800b1fe:	1e5e      	subs	r6, r3, #1
 800b200:	9b07      	ldr	r3, [sp, #28]
 800b202:	42b3      	cmp	r3, r6
 800b204:	bfbf      	itttt	lt
 800b206:	9b07      	ldrlt	r3, [sp, #28]
 800b208:	9607      	strlt	r6, [sp, #28]
 800b20a:	1af2      	sublt	r2, r6, r3
 800b20c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b20e:	bfb6      	itet	lt
 800b210:	189b      	addlt	r3, r3, r2
 800b212:	1b9e      	subge	r6, r3, r6
 800b214:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b216:	9b03      	ldr	r3, [sp, #12]
 800b218:	bfb8      	it	lt
 800b21a:	2600      	movlt	r6, #0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	bfb7      	itett	lt
 800b220:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b224:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b228:	1a9d      	sublt	r5, r3, r2
 800b22a:	2300      	movlt	r3, #0
 800b22c:	e734      	b.n	800b098 <_dtoa_r+0x720>
 800b22e:	9e07      	ldr	r6, [sp, #28]
 800b230:	9d04      	ldr	r5, [sp, #16]
 800b232:	9f08      	ldr	r7, [sp, #32]
 800b234:	e73b      	b.n	800b0ae <_dtoa_r+0x736>
 800b236:	9a07      	ldr	r2, [sp, #28]
 800b238:	e767      	b.n	800b10a <_dtoa_r+0x792>
 800b23a:	9b06      	ldr	r3, [sp, #24]
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	dc18      	bgt.n	800b272 <_dtoa_r+0x8fa>
 800b240:	f1ba 0f00 	cmp.w	sl, #0
 800b244:	d115      	bne.n	800b272 <_dtoa_r+0x8fa>
 800b246:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b24a:	b993      	cbnz	r3, 800b272 <_dtoa_r+0x8fa>
 800b24c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b250:	0d1b      	lsrs	r3, r3, #20
 800b252:	051b      	lsls	r3, r3, #20
 800b254:	b183      	cbz	r3, 800b278 <_dtoa_r+0x900>
 800b256:	9b04      	ldr	r3, [sp, #16]
 800b258:	3301      	adds	r3, #1
 800b25a:	9304      	str	r3, [sp, #16]
 800b25c:	9b05      	ldr	r3, [sp, #20]
 800b25e:	3301      	adds	r3, #1
 800b260:	9305      	str	r3, [sp, #20]
 800b262:	f04f 0801 	mov.w	r8, #1
 800b266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b268:	2b00      	cmp	r3, #0
 800b26a:	f47f af6a 	bne.w	800b142 <_dtoa_r+0x7ca>
 800b26e:	2001      	movs	r0, #1
 800b270:	e76f      	b.n	800b152 <_dtoa_r+0x7da>
 800b272:	f04f 0800 	mov.w	r8, #0
 800b276:	e7f6      	b.n	800b266 <_dtoa_r+0x8ee>
 800b278:	4698      	mov	r8, r3
 800b27a:	e7f4      	b.n	800b266 <_dtoa_r+0x8ee>
 800b27c:	f43f af7d 	beq.w	800b17a <_dtoa_r+0x802>
 800b280:	4618      	mov	r0, r3
 800b282:	301c      	adds	r0, #28
 800b284:	e772      	b.n	800b16c <_dtoa_r+0x7f4>
 800b286:	9b03      	ldr	r3, [sp, #12]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	dc37      	bgt.n	800b2fc <_dtoa_r+0x984>
 800b28c:	9b06      	ldr	r3, [sp, #24]
 800b28e:	2b02      	cmp	r3, #2
 800b290:	dd34      	ble.n	800b2fc <_dtoa_r+0x984>
 800b292:	9b03      	ldr	r3, [sp, #12]
 800b294:	9302      	str	r3, [sp, #8]
 800b296:	9b02      	ldr	r3, [sp, #8]
 800b298:	b96b      	cbnz	r3, 800b2b6 <_dtoa_r+0x93e>
 800b29a:	4631      	mov	r1, r6
 800b29c:	2205      	movs	r2, #5
 800b29e:	4620      	mov	r0, r4
 800b2a0:	f000 ff90 	bl	800c1c4 <__multadd>
 800b2a4:	4601      	mov	r1, r0
 800b2a6:	4606      	mov	r6, r0
 800b2a8:	ee18 0a10 	vmov	r0, s16
 800b2ac:	f001 f9f4 	bl	800c698 <__mcmp>
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	f73f adbb 	bgt.w	800ae2c <_dtoa_r+0x4b4>
 800b2b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2b8:	9d01      	ldr	r5, [sp, #4]
 800b2ba:	43db      	mvns	r3, r3
 800b2bc:	9300      	str	r3, [sp, #0]
 800b2be:	f04f 0800 	mov.w	r8, #0
 800b2c2:	4631      	mov	r1, r6
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	f000 ff5b 	bl	800c180 <_Bfree>
 800b2ca:	2f00      	cmp	r7, #0
 800b2cc:	f43f aea4 	beq.w	800b018 <_dtoa_r+0x6a0>
 800b2d0:	f1b8 0f00 	cmp.w	r8, #0
 800b2d4:	d005      	beq.n	800b2e2 <_dtoa_r+0x96a>
 800b2d6:	45b8      	cmp	r8, r7
 800b2d8:	d003      	beq.n	800b2e2 <_dtoa_r+0x96a>
 800b2da:	4641      	mov	r1, r8
 800b2dc:	4620      	mov	r0, r4
 800b2de:	f000 ff4f 	bl	800c180 <_Bfree>
 800b2e2:	4639      	mov	r1, r7
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f000 ff4b 	bl	800c180 <_Bfree>
 800b2ea:	e695      	b.n	800b018 <_dtoa_r+0x6a0>
 800b2ec:	2600      	movs	r6, #0
 800b2ee:	4637      	mov	r7, r6
 800b2f0:	e7e1      	b.n	800b2b6 <_dtoa_r+0x93e>
 800b2f2:	9700      	str	r7, [sp, #0]
 800b2f4:	4637      	mov	r7, r6
 800b2f6:	e599      	b.n	800ae2c <_dtoa_r+0x4b4>
 800b2f8:	40240000 	.word	0x40240000
 800b2fc:	9b08      	ldr	r3, [sp, #32]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f000 80ca 	beq.w	800b498 <_dtoa_r+0xb20>
 800b304:	9b03      	ldr	r3, [sp, #12]
 800b306:	9302      	str	r3, [sp, #8]
 800b308:	2d00      	cmp	r5, #0
 800b30a:	dd05      	ble.n	800b318 <_dtoa_r+0x9a0>
 800b30c:	4639      	mov	r1, r7
 800b30e:	462a      	mov	r2, r5
 800b310:	4620      	mov	r0, r4
 800b312:	f001 f951 	bl	800c5b8 <__lshift>
 800b316:	4607      	mov	r7, r0
 800b318:	f1b8 0f00 	cmp.w	r8, #0
 800b31c:	d05b      	beq.n	800b3d6 <_dtoa_r+0xa5e>
 800b31e:	6879      	ldr	r1, [r7, #4]
 800b320:	4620      	mov	r0, r4
 800b322:	f000 feed 	bl	800c100 <_Balloc>
 800b326:	4605      	mov	r5, r0
 800b328:	b928      	cbnz	r0, 800b336 <_dtoa_r+0x9be>
 800b32a:	4b87      	ldr	r3, [pc, #540]	; (800b548 <_dtoa_r+0xbd0>)
 800b32c:	4602      	mov	r2, r0
 800b32e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b332:	f7ff bb3b 	b.w	800a9ac <_dtoa_r+0x34>
 800b336:	693a      	ldr	r2, [r7, #16]
 800b338:	3202      	adds	r2, #2
 800b33a:	0092      	lsls	r2, r2, #2
 800b33c:	f107 010c 	add.w	r1, r7, #12
 800b340:	300c      	adds	r0, #12
 800b342:	f7fd fbf9 	bl	8008b38 <memcpy>
 800b346:	2201      	movs	r2, #1
 800b348:	4629      	mov	r1, r5
 800b34a:	4620      	mov	r0, r4
 800b34c:	f001 f934 	bl	800c5b8 <__lshift>
 800b350:	9b01      	ldr	r3, [sp, #4]
 800b352:	f103 0901 	add.w	r9, r3, #1
 800b356:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b35a:	4413      	add	r3, r2
 800b35c:	9305      	str	r3, [sp, #20]
 800b35e:	f00a 0301 	and.w	r3, sl, #1
 800b362:	46b8      	mov	r8, r7
 800b364:	9304      	str	r3, [sp, #16]
 800b366:	4607      	mov	r7, r0
 800b368:	4631      	mov	r1, r6
 800b36a:	ee18 0a10 	vmov	r0, s16
 800b36e:	f7ff fa75 	bl	800a85c <quorem>
 800b372:	4641      	mov	r1, r8
 800b374:	9002      	str	r0, [sp, #8]
 800b376:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b37a:	ee18 0a10 	vmov	r0, s16
 800b37e:	f001 f98b 	bl	800c698 <__mcmp>
 800b382:	463a      	mov	r2, r7
 800b384:	9003      	str	r0, [sp, #12]
 800b386:	4631      	mov	r1, r6
 800b388:	4620      	mov	r0, r4
 800b38a:	f001 f9a1 	bl	800c6d0 <__mdiff>
 800b38e:	68c2      	ldr	r2, [r0, #12]
 800b390:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800b394:	4605      	mov	r5, r0
 800b396:	bb02      	cbnz	r2, 800b3da <_dtoa_r+0xa62>
 800b398:	4601      	mov	r1, r0
 800b39a:	ee18 0a10 	vmov	r0, s16
 800b39e:	f001 f97b 	bl	800c698 <__mcmp>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	4629      	mov	r1, r5
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	9207      	str	r2, [sp, #28]
 800b3aa:	f000 fee9 	bl	800c180 <_Bfree>
 800b3ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b3b2:	ea43 0102 	orr.w	r1, r3, r2
 800b3b6:	9b04      	ldr	r3, [sp, #16]
 800b3b8:	430b      	orrs	r3, r1
 800b3ba:	464d      	mov	r5, r9
 800b3bc:	d10f      	bne.n	800b3de <_dtoa_r+0xa66>
 800b3be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b3c2:	d02a      	beq.n	800b41a <_dtoa_r+0xaa2>
 800b3c4:	9b03      	ldr	r3, [sp, #12]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	dd02      	ble.n	800b3d0 <_dtoa_r+0xa58>
 800b3ca:	9b02      	ldr	r3, [sp, #8]
 800b3cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b3d0:	f88b a000 	strb.w	sl, [fp]
 800b3d4:	e775      	b.n	800b2c2 <_dtoa_r+0x94a>
 800b3d6:	4638      	mov	r0, r7
 800b3d8:	e7ba      	b.n	800b350 <_dtoa_r+0x9d8>
 800b3da:	2201      	movs	r2, #1
 800b3dc:	e7e2      	b.n	800b3a4 <_dtoa_r+0xa2c>
 800b3de:	9b03      	ldr	r3, [sp, #12]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	db04      	blt.n	800b3ee <_dtoa_r+0xa76>
 800b3e4:	9906      	ldr	r1, [sp, #24]
 800b3e6:	430b      	orrs	r3, r1
 800b3e8:	9904      	ldr	r1, [sp, #16]
 800b3ea:	430b      	orrs	r3, r1
 800b3ec:	d122      	bne.n	800b434 <_dtoa_r+0xabc>
 800b3ee:	2a00      	cmp	r2, #0
 800b3f0:	ddee      	ble.n	800b3d0 <_dtoa_r+0xa58>
 800b3f2:	ee18 1a10 	vmov	r1, s16
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	f001 f8dd 	bl	800c5b8 <__lshift>
 800b3fe:	4631      	mov	r1, r6
 800b400:	ee08 0a10 	vmov	s16, r0
 800b404:	f001 f948 	bl	800c698 <__mcmp>
 800b408:	2800      	cmp	r0, #0
 800b40a:	dc03      	bgt.n	800b414 <_dtoa_r+0xa9c>
 800b40c:	d1e0      	bne.n	800b3d0 <_dtoa_r+0xa58>
 800b40e:	f01a 0f01 	tst.w	sl, #1
 800b412:	d0dd      	beq.n	800b3d0 <_dtoa_r+0xa58>
 800b414:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b418:	d1d7      	bne.n	800b3ca <_dtoa_r+0xa52>
 800b41a:	2339      	movs	r3, #57	; 0x39
 800b41c:	f88b 3000 	strb.w	r3, [fp]
 800b420:	462b      	mov	r3, r5
 800b422:	461d      	mov	r5, r3
 800b424:	3b01      	subs	r3, #1
 800b426:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b42a:	2a39      	cmp	r2, #57	; 0x39
 800b42c:	d071      	beq.n	800b512 <_dtoa_r+0xb9a>
 800b42e:	3201      	adds	r2, #1
 800b430:	701a      	strb	r2, [r3, #0]
 800b432:	e746      	b.n	800b2c2 <_dtoa_r+0x94a>
 800b434:	2a00      	cmp	r2, #0
 800b436:	dd07      	ble.n	800b448 <_dtoa_r+0xad0>
 800b438:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b43c:	d0ed      	beq.n	800b41a <_dtoa_r+0xaa2>
 800b43e:	f10a 0301 	add.w	r3, sl, #1
 800b442:	f88b 3000 	strb.w	r3, [fp]
 800b446:	e73c      	b.n	800b2c2 <_dtoa_r+0x94a>
 800b448:	9b05      	ldr	r3, [sp, #20]
 800b44a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b44e:	4599      	cmp	r9, r3
 800b450:	d047      	beq.n	800b4e2 <_dtoa_r+0xb6a>
 800b452:	ee18 1a10 	vmov	r1, s16
 800b456:	2300      	movs	r3, #0
 800b458:	220a      	movs	r2, #10
 800b45a:	4620      	mov	r0, r4
 800b45c:	f000 feb2 	bl	800c1c4 <__multadd>
 800b460:	45b8      	cmp	r8, r7
 800b462:	ee08 0a10 	vmov	s16, r0
 800b466:	f04f 0300 	mov.w	r3, #0
 800b46a:	f04f 020a 	mov.w	r2, #10
 800b46e:	4641      	mov	r1, r8
 800b470:	4620      	mov	r0, r4
 800b472:	d106      	bne.n	800b482 <_dtoa_r+0xb0a>
 800b474:	f000 fea6 	bl	800c1c4 <__multadd>
 800b478:	4680      	mov	r8, r0
 800b47a:	4607      	mov	r7, r0
 800b47c:	f109 0901 	add.w	r9, r9, #1
 800b480:	e772      	b.n	800b368 <_dtoa_r+0x9f0>
 800b482:	f000 fe9f 	bl	800c1c4 <__multadd>
 800b486:	4639      	mov	r1, r7
 800b488:	4680      	mov	r8, r0
 800b48a:	2300      	movs	r3, #0
 800b48c:	220a      	movs	r2, #10
 800b48e:	4620      	mov	r0, r4
 800b490:	f000 fe98 	bl	800c1c4 <__multadd>
 800b494:	4607      	mov	r7, r0
 800b496:	e7f1      	b.n	800b47c <_dtoa_r+0xb04>
 800b498:	9b03      	ldr	r3, [sp, #12]
 800b49a:	9302      	str	r3, [sp, #8]
 800b49c:	9d01      	ldr	r5, [sp, #4]
 800b49e:	ee18 0a10 	vmov	r0, s16
 800b4a2:	4631      	mov	r1, r6
 800b4a4:	f7ff f9da 	bl	800a85c <quorem>
 800b4a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b4ac:	9b01      	ldr	r3, [sp, #4]
 800b4ae:	f805 ab01 	strb.w	sl, [r5], #1
 800b4b2:	1aea      	subs	r2, r5, r3
 800b4b4:	9b02      	ldr	r3, [sp, #8]
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	dd09      	ble.n	800b4ce <_dtoa_r+0xb56>
 800b4ba:	ee18 1a10 	vmov	r1, s16
 800b4be:	2300      	movs	r3, #0
 800b4c0:	220a      	movs	r2, #10
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	f000 fe7e 	bl	800c1c4 <__multadd>
 800b4c8:	ee08 0a10 	vmov	s16, r0
 800b4cc:	e7e7      	b.n	800b49e <_dtoa_r+0xb26>
 800b4ce:	9b02      	ldr	r3, [sp, #8]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	bfc8      	it	gt
 800b4d4:	461d      	movgt	r5, r3
 800b4d6:	9b01      	ldr	r3, [sp, #4]
 800b4d8:	bfd8      	it	le
 800b4da:	2501      	movle	r5, #1
 800b4dc:	441d      	add	r5, r3
 800b4de:	f04f 0800 	mov.w	r8, #0
 800b4e2:	ee18 1a10 	vmov	r1, s16
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	f001 f865 	bl	800c5b8 <__lshift>
 800b4ee:	4631      	mov	r1, r6
 800b4f0:	ee08 0a10 	vmov	s16, r0
 800b4f4:	f001 f8d0 	bl	800c698 <__mcmp>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	dc91      	bgt.n	800b420 <_dtoa_r+0xaa8>
 800b4fc:	d102      	bne.n	800b504 <_dtoa_r+0xb8c>
 800b4fe:	f01a 0f01 	tst.w	sl, #1
 800b502:	d18d      	bne.n	800b420 <_dtoa_r+0xaa8>
 800b504:	462b      	mov	r3, r5
 800b506:	461d      	mov	r5, r3
 800b508:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b50c:	2a30      	cmp	r2, #48	; 0x30
 800b50e:	d0fa      	beq.n	800b506 <_dtoa_r+0xb8e>
 800b510:	e6d7      	b.n	800b2c2 <_dtoa_r+0x94a>
 800b512:	9a01      	ldr	r2, [sp, #4]
 800b514:	429a      	cmp	r2, r3
 800b516:	d184      	bne.n	800b422 <_dtoa_r+0xaaa>
 800b518:	9b00      	ldr	r3, [sp, #0]
 800b51a:	3301      	adds	r3, #1
 800b51c:	9300      	str	r3, [sp, #0]
 800b51e:	2331      	movs	r3, #49	; 0x31
 800b520:	7013      	strb	r3, [r2, #0]
 800b522:	e6ce      	b.n	800b2c2 <_dtoa_r+0x94a>
 800b524:	4b09      	ldr	r3, [pc, #36]	; (800b54c <_dtoa_r+0xbd4>)
 800b526:	f7ff ba95 	b.w	800aa54 <_dtoa_r+0xdc>
 800b52a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	f47f aa6e 	bne.w	800aa0e <_dtoa_r+0x96>
 800b532:	4b07      	ldr	r3, [pc, #28]	; (800b550 <_dtoa_r+0xbd8>)
 800b534:	f7ff ba8e 	b.w	800aa54 <_dtoa_r+0xdc>
 800b538:	9b02      	ldr	r3, [sp, #8]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	dcae      	bgt.n	800b49c <_dtoa_r+0xb24>
 800b53e:	9b06      	ldr	r3, [sp, #24]
 800b540:	2b02      	cmp	r3, #2
 800b542:	f73f aea8 	bgt.w	800b296 <_dtoa_r+0x91e>
 800b546:	e7a9      	b.n	800b49c <_dtoa_r+0xb24>
 800b548:	0800db03 	.word	0x0800db03
 800b54c:	0800d9d4 	.word	0x0800d9d4
 800b550:	0800da84 	.word	0x0800da84

0800b554 <__sflush_r>:
 800b554:	898a      	ldrh	r2, [r1, #12]
 800b556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b55a:	4605      	mov	r5, r0
 800b55c:	0710      	lsls	r0, r2, #28
 800b55e:	460c      	mov	r4, r1
 800b560:	d458      	bmi.n	800b614 <__sflush_r+0xc0>
 800b562:	684b      	ldr	r3, [r1, #4]
 800b564:	2b00      	cmp	r3, #0
 800b566:	dc05      	bgt.n	800b574 <__sflush_r+0x20>
 800b568:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	dc02      	bgt.n	800b574 <__sflush_r+0x20>
 800b56e:	2000      	movs	r0, #0
 800b570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b574:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b576:	2e00      	cmp	r6, #0
 800b578:	d0f9      	beq.n	800b56e <__sflush_r+0x1a>
 800b57a:	2300      	movs	r3, #0
 800b57c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b580:	682f      	ldr	r7, [r5, #0]
 800b582:	602b      	str	r3, [r5, #0]
 800b584:	d032      	beq.n	800b5ec <__sflush_r+0x98>
 800b586:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b588:	89a3      	ldrh	r3, [r4, #12]
 800b58a:	075a      	lsls	r2, r3, #29
 800b58c:	d505      	bpl.n	800b59a <__sflush_r+0x46>
 800b58e:	6863      	ldr	r3, [r4, #4]
 800b590:	1ac0      	subs	r0, r0, r3
 800b592:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b594:	b10b      	cbz	r3, 800b59a <__sflush_r+0x46>
 800b596:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b598:	1ac0      	subs	r0, r0, r3
 800b59a:	2300      	movs	r3, #0
 800b59c:	4602      	mov	r2, r0
 800b59e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5a0:	6a21      	ldr	r1, [r4, #32]
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	47b0      	blx	r6
 800b5a6:	1c43      	adds	r3, r0, #1
 800b5a8:	89a3      	ldrh	r3, [r4, #12]
 800b5aa:	d106      	bne.n	800b5ba <__sflush_r+0x66>
 800b5ac:	6829      	ldr	r1, [r5, #0]
 800b5ae:	291d      	cmp	r1, #29
 800b5b0:	d82c      	bhi.n	800b60c <__sflush_r+0xb8>
 800b5b2:	4a2a      	ldr	r2, [pc, #168]	; (800b65c <__sflush_r+0x108>)
 800b5b4:	40ca      	lsrs	r2, r1
 800b5b6:	07d6      	lsls	r6, r2, #31
 800b5b8:	d528      	bpl.n	800b60c <__sflush_r+0xb8>
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	6062      	str	r2, [r4, #4]
 800b5be:	04d9      	lsls	r1, r3, #19
 800b5c0:	6922      	ldr	r2, [r4, #16]
 800b5c2:	6022      	str	r2, [r4, #0]
 800b5c4:	d504      	bpl.n	800b5d0 <__sflush_r+0x7c>
 800b5c6:	1c42      	adds	r2, r0, #1
 800b5c8:	d101      	bne.n	800b5ce <__sflush_r+0x7a>
 800b5ca:	682b      	ldr	r3, [r5, #0]
 800b5cc:	b903      	cbnz	r3, 800b5d0 <__sflush_r+0x7c>
 800b5ce:	6560      	str	r0, [r4, #84]	; 0x54
 800b5d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5d2:	602f      	str	r7, [r5, #0]
 800b5d4:	2900      	cmp	r1, #0
 800b5d6:	d0ca      	beq.n	800b56e <__sflush_r+0x1a>
 800b5d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5dc:	4299      	cmp	r1, r3
 800b5de:	d002      	beq.n	800b5e6 <__sflush_r+0x92>
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	f7fd fabf 	bl	8008b64 <_free_r>
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	6360      	str	r0, [r4, #52]	; 0x34
 800b5ea:	e7c1      	b.n	800b570 <__sflush_r+0x1c>
 800b5ec:	6a21      	ldr	r1, [r4, #32]
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	4628      	mov	r0, r5
 800b5f2:	47b0      	blx	r6
 800b5f4:	1c41      	adds	r1, r0, #1
 800b5f6:	d1c7      	bne.n	800b588 <__sflush_r+0x34>
 800b5f8:	682b      	ldr	r3, [r5, #0]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d0c4      	beq.n	800b588 <__sflush_r+0x34>
 800b5fe:	2b1d      	cmp	r3, #29
 800b600:	d001      	beq.n	800b606 <__sflush_r+0xb2>
 800b602:	2b16      	cmp	r3, #22
 800b604:	d101      	bne.n	800b60a <__sflush_r+0xb6>
 800b606:	602f      	str	r7, [r5, #0]
 800b608:	e7b1      	b.n	800b56e <__sflush_r+0x1a>
 800b60a:	89a3      	ldrh	r3, [r4, #12]
 800b60c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b610:	81a3      	strh	r3, [r4, #12]
 800b612:	e7ad      	b.n	800b570 <__sflush_r+0x1c>
 800b614:	690f      	ldr	r7, [r1, #16]
 800b616:	2f00      	cmp	r7, #0
 800b618:	d0a9      	beq.n	800b56e <__sflush_r+0x1a>
 800b61a:	0793      	lsls	r3, r2, #30
 800b61c:	680e      	ldr	r6, [r1, #0]
 800b61e:	bf08      	it	eq
 800b620:	694b      	ldreq	r3, [r1, #20]
 800b622:	600f      	str	r7, [r1, #0]
 800b624:	bf18      	it	ne
 800b626:	2300      	movne	r3, #0
 800b628:	eba6 0807 	sub.w	r8, r6, r7
 800b62c:	608b      	str	r3, [r1, #8]
 800b62e:	f1b8 0f00 	cmp.w	r8, #0
 800b632:	dd9c      	ble.n	800b56e <__sflush_r+0x1a>
 800b634:	6a21      	ldr	r1, [r4, #32]
 800b636:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b638:	4643      	mov	r3, r8
 800b63a:	463a      	mov	r2, r7
 800b63c:	4628      	mov	r0, r5
 800b63e:	47b0      	blx	r6
 800b640:	2800      	cmp	r0, #0
 800b642:	dc06      	bgt.n	800b652 <__sflush_r+0xfe>
 800b644:	89a3      	ldrh	r3, [r4, #12]
 800b646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b64a:	81a3      	strh	r3, [r4, #12]
 800b64c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b650:	e78e      	b.n	800b570 <__sflush_r+0x1c>
 800b652:	4407      	add	r7, r0
 800b654:	eba8 0800 	sub.w	r8, r8, r0
 800b658:	e7e9      	b.n	800b62e <__sflush_r+0xda>
 800b65a:	bf00      	nop
 800b65c:	20400001 	.word	0x20400001

0800b660 <_fflush_r>:
 800b660:	b538      	push	{r3, r4, r5, lr}
 800b662:	690b      	ldr	r3, [r1, #16]
 800b664:	4605      	mov	r5, r0
 800b666:	460c      	mov	r4, r1
 800b668:	b913      	cbnz	r3, 800b670 <_fflush_r+0x10>
 800b66a:	2500      	movs	r5, #0
 800b66c:	4628      	mov	r0, r5
 800b66e:	bd38      	pop	{r3, r4, r5, pc}
 800b670:	b118      	cbz	r0, 800b67a <_fflush_r+0x1a>
 800b672:	6983      	ldr	r3, [r0, #24]
 800b674:	b90b      	cbnz	r3, 800b67a <_fflush_r+0x1a>
 800b676:	f000 f887 	bl	800b788 <__sinit>
 800b67a:	4b14      	ldr	r3, [pc, #80]	; (800b6cc <_fflush_r+0x6c>)
 800b67c:	429c      	cmp	r4, r3
 800b67e:	d11b      	bne.n	800b6b8 <_fflush_r+0x58>
 800b680:	686c      	ldr	r4, [r5, #4]
 800b682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d0ef      	beq.n	800b66a <_fflush_r+0xa>
 800b68a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b68c:	07d0      	lsls	r0, r2, #31
 800b68e:	d404      	bmi.n	800b69a <_fflush_r+0x3a>
 800b690:	0599      	lsls	r1, r3, #22
 800b692:	d402      	bmi.n	800b69a <_fflush_r+0x3a>
 800b694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b696:	f000 fc9a 	bl	800bfce <__retarget_lock_acquire_recursive>
 800b69a:	4628      	mov	r0, r5
 800b69c:	4621      	mov	r1, r4
 800b69e:	f7ff ff59 	bl	800b554 <__sflush_r>
 800b6a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6a4:	07da      	lsls	r2, r3, #31
 800b6a6:	4605      	mov	r5, r0
 800b6a8:	d4e0      	bmi.n	800b66c <_fflush_r+0xc>
 800b6aa:	89a3      	ldrh	r3, [r4, #12]
 800b6ac:	059b      	lsls	r3, r3, #22
 800b6ae:	d4dd      	bmi.n	800b66c <_fflush_r+0xc>
 800b6b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6b2:	f000 fc8d 	bl	800bfd0 <__retarget_lock_release_recursive>
 800b6b6:	e7d9      	b.n	800b66c <_fflush_r+0xc>
 800b6b8:	4b05      	ldr	r3, [pc, #20]	; (800b6d0 <_fflush_r+0x70>)
 800b6ba:	429c      	cmp	r4, r3
 800b6bc:	d101      	bne.n	800b6c2 <_fflush_r+0x62>
 800b6be:	68ac      	ldr	r4, [r5, #8]
 800b6c0:	e7df      	b.n	800b682 <_fflush_r+0x22>
 800b6c2:	4b04      	ldr	r3, [pc, #16]	; (800b6d4 <_fflush_r+0x74>)
 800b6c4:	429c      	cmp	r4, r3
 800b6c6:	bf08      	it	eq
 800b6c8:	68ec      	ldreq	r4, [r5, #12]
 800b6ca:	e7da      	b.n	800b682 <_fflush_r+0x22>
 800b6cc:	0800db34 	.word	0x0800db34
 800b6d0:	0800db54 	.word	0x0800db54
 800b6d4:	0800db14 	.word	0x0800db14

0800b6d8 <std>:
 800b6d8:	2300      	movs	r3, #0
 800b6da:	b510      	push	{r4, lr}
 800b6dc:	4604      	mov	r4, r0
 800b6de:	e9c0 3300 	strd	r3, r3, [r0]
 800b6e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b6e6:	6083      	str	r3, [r0, #8]
 800b6e8:	8181      	strh	r1, [r0, #12]
 800b6ea:	6643      	str	r3, [r0, #100]	; 0x64
 800b6ec:	81c2      	strh	r2, [r0, #14]
 800b6ee:	6183      	str	r3, [r0, #24]
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	2208      	movs	r2, #8
 800b6f4:	305c      	adds	r0, #92	; 0x5c
 800b6f6:	f7fd fa2d 	bl	8008b54 <memset>
 800b6fa:	4b05      	ldr	r3, [pc, #20]	; (800b710 <std+0x38>)
 800b6fc:	6263      	str	r3, [r4, #36]	; 0x24
 800b6fe:	4b05      	ldr	r3, [pc, #20]	; (800b714 <std+0x3c>)
 800b700:	62a3      	str	r3, [r4, #40]	; 0x28
 800b702:	4b05      	ldr	r3, [pc, #20]	; (800b718 <std+0x40>)
 800b704:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b706:	4b05      	ldr	r3, [pc, #20]	; (800b71c <std+0x44>)
 800b708:	6224      	str	r4, [r4, #32]
 800b70a:	6323      	str	r3, [r4, #48]	; 0x30
 800b70c:	bd10      	pop	{r4, pc}
 800b70e:	bf00      	nop
 800b710:	08009659 	.word	0x08009659
 800b714:	0800967b 	.word	0x0800967b
 800b718:	080096b3 	.word	0x080096b3
 800b71c:	080096d7 	.word	0x080096d7

0800b720 <_cleanup_r>:
 800b720:	4901      	ldr	r1, [pc, #4]	; (800b728 <_cleanup_r+0x8>)
 800b722:	f000 b8c1 	b.w	800b8a8 <_fwalk_reent>
 800b726:	bf00      	nop
 800b728:	0800b661 	.word	0x0800b661

0800b72c <__sfmoreglue>:
 800b72c:	b570      	push	{r4, r5, r6, lr}
 800b72e:	2268      	movs	r2, #104	; 0x68
 800b730:	1e4d      	subs	r5, r1, #1
 800b732:	4355      	muls	r5, r2
 800b734:	460e      	mov	r6, r1
 800b736:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b73a:	f7fd fa7f 	bl	8008c3c <_malloc_r>
 800b73e:	4604      	mov	r4, r0
 800b740:	b140      	cbz	r0, 800b754 <__sfmoreglue+0x28>
 800b742:	2100      	movs	r1, #0
 800b744:	e9c0 1600 	strd	r1, r6, [r0]
 800b748:	300c      	adds	r0, #12
 800b74a:	60a0      	str	r0, [r4, #8]
 800b74c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b750:	f7fd fa00 	bl	8008b54 <memset>
 800b754:	4620      	mov	r0, r4
 800b756:	bd70      	pop	{r4, r5, r6, pc}

0800b758 <__sfp_lock_acquire>:
 800b758:	4801      	ldr	r0, [pc, #4]	; (800b760 <__sfp_lock_acquire+0x8>)
 800b75a:	f000 bc38 	b.w	800bfce <__retarget_lock_acquire_recursive>
 800b75e:	bf00      	nop
 800b760:	20000fc5 	.word	0x20000fc5

0800b764 <__sfp_lock_release>:
 800b764:	4801      	ldr	r0, [pc, #4]	; (800b76c <__sfp_lock_release+0x8>)
 800b766:	f000 bc33 	b.w	800bfd0 <__retarget_lock_release_recursive>
 800b76a:	bf00      	nop
 800b76c:	20000fc5 	.word	0x20000fc5

0800b770 <__sinit_lock_acquire>:
 800b770:	4801      	ldr	r0, [pc, #4]	; (800b778 <__sinit_lock_acquire+0x8>)
 800b772:	f000 bc2c 	b.w	800bfce <__retarget_lock_acquire_recursive>
 800b776:	bf00      	nop
 800b778:	20000fc6 	.word	0x20000fc6

0800b77c <__sinit_lock_release>:
 800b77c:	4801      	ldr	r0, [pc, #4]	; (800b784 <__sinit_lock_release+0x8>)
 800b77e:	f000 bc27 	b.w	800bfd0 <__retarget_lock_release_recursive>
 800b782:	bf00      	nop
 800b784:	20000fc6 	.word	0x20000fc6

0800b788 <__sinit>:
 800b788:	b510      	push	{r4, lr}
 800b78a:	4604      	mov	r4, r0
 800b78c:	f7ff fff0 	bl	800b770 <__sinit_lock_acquire>
 800b790:	69a3      	ldr	r3, [r4, #24]
 800b792:	b11b      	cbz	r3, 800b79c <__sinit+0x14>
 800b794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b798:	f7ff bff0 	b.w	800b77c <__sinit_lock_release>
 800b79c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b7a0:	6523      	str	r3, [r4, #80]	; 0x50
 800b7a2:	4b13      	ldr	r3, [pc, #76]	; (800b7f0 <__sinit+0x68>)
 800b7a4:	4a13      	ldr	r2, [pc, #76]	; (800b7f4 <__sinit+0x6c>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b7aa:	42a3      	cmp	r3, r4
 800b7ac:	bf04      	itt	eq
 800b7ae:	2301      	moveq	r3, #1
 800b7b0:	61a3      	streq	r3, [r4, #24]
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f000 f820 	bl	800b7f8 <__sfp>
 800b7b8:	6060      	str	r0, [r4, #4]
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f000 f81c 	bl	800b7f8 <__sfp>
 800b7c0:	60a0      	str	r0, [r4, #8]
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	f000 f818 	bl	800b7f8 <__sfp>
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	60e0      	str	r0, [r4, #12]
 800b7cc:	2104      	movs	r1, #4
 800b7ce:	6860      	ldr	r0, [r4, #4]
 800b7d0:	f7ff ff82 	bl	800b6d8 <std>
 800b7d4:	68a0      	ldr	r0, [r4, #8]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	2109      	movs	r1, #9
 800b7da:	f7ff ff7d 	bl	800b6d8 <std>
 800b7de:	68e0      	ldr	r0, [r4, #12]
 800b7e0:	2202      	movs	r2, #2
 800b7e2:	2112      	movs	r1, #18
 800b7e4:	f7ff ff78 	bl	800b6d8 <std>
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	61a3      	str	r3, [r4, #24]
 800b7ec:	e7d2      	b.n	800b794 <__sinit+0xc>
 800b7ee:	bf00      	nop
 800b7f0:	0800d9c0 	.word	0x0800d9c0
 800b7f4:	0800b721 	.word	0x0800b721

0800b7f8 <__sfp>:
 800b7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7fa:	4607      	mov	r7, r0
 800b7fc:	f7ff ffac 	bl	800b758 <__sfp_lock_acquire>
 800b800:	4b1e      	ldr	r3, [pc, #120]	; (800b87c <__sfp+0x84>)
 800b802:	681e      	ldr	r6, [r3, #0]
 800b804:	69b3      	ldr	r3, [r6, #24]
 800b806:	b913      	cbnz	r3, 800b80e <__sfp+0x16>
 800b808:	4630      	mov	r0, r6
 800b80a:	f7ff ffbd 	bl	800b788 <__sinit>
 800b80e:	3648      	adds	r6, #72	; 0x48
 800b810:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b814:	3b01      	subs	r3, #1
 800b816:	d503      	bpl.n	800b820 <__sfp+0x28>
 800b818:	6833      	ldr	r3, [r6, #0]
 800b81a:	b30b      	cbz	r3, 800b860 <__sfp+0x68>
 800b81c:	6836      	ldr	r6, [r6, #0]
 800b81e:	e7f7      	b.n	800b810 <__sfp+0x18>
 800b820:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b824:	b9d5      	cbnz	r5, 800b85c <__sfp+0x64>
 800b826:	4b16      	ldr	r3, [pc, #88]	; (800b880 <__sfp+0x88>)
 800b828:	60e3      	str	r3, [r4, #12]
 800b82a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b82e:	6665      	str	r5, [r4, #100]	; 0x64
 800b830:	f000 fbcc 	bl	800bfcc <__retarget_lock_init_recursive>
 800b834:	f7ff ff96 	bl	800b764 <__sfp_lock_release>
 800b838:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b83c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b840:	6025      	str	r5, [r4, #0]
 800b842:	61a5      	str	r5, [r4, #24]
 800b844:	2208      	movs	r2, #8
 800b846:	4629      	mov	r1, r5
 800b848:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b84c:	f7fd f982 	bl	8008b54 <memset>
 800b850:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b854:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b858:	4620      	mov	r0, r4
 800b85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b85c:	3468      	adds	r4, #104	; 0x68
 800b85e:	e7d9      	b.n	800b814 <__sfp+0x1c>
 800b860:	2104      	movs	r1, #4
 800b862:	4638      	mov	r0, r7
 800b864:	f7ff ff62 	bl	800b72c <__sfmoreglue>
 800b868:	4604      	mov	r4, r0
 800b86a:	6030      	str	r0, [r6, #0]
 800b86c:	2800      	cmp	r0, #0
 800b86e:	d1d5      	bne.n	800b81c <__sfp+0x24>
 800b870:	f7ff ff78 	bl	800b764 <__sfp_lock_release>
 800b874:	230c      	movs	r3, #12
 800b876:	603b      	str	r3, [r7, #0]
 800b878:	e7ee      	b.n	800b858 <__sfp+0x60>
 800b87a:	bf00      	nop
 800b87c:	0800d9c0 	.word	0x0800d9c0
 800b880:	ffff0001 	.word	0xffff0001

0800b884 <fiprintf>:
 800b884:	b40e      	push	{r1, r2, r3}
 800b886:	b503      	push	{r0, r1, lr}
 800b888:	4601      	mov	r1, r0
 800b88a:	ab03      	add	r3, sp, #12
 800b88c:	4805      	ldr	r0, [pc, #20]	; (800b8a4 <fiprintf+0x20>)
 800b88e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b892:	6800      	ldr	r0, [r0, #0]
 800b894:	9301      	str	r3, [sp, #4]
 800b896:	f001 fa8f 	bl	800cdb8 <_vfiprintf_r>
 800b89a:	b002      	add	sp, #8
 800b89c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8a0:	b003      	add	sp, #12
 800b8a2:	4770      	bx	lr
 800b8a4:	200000b0 	.word	0x200000b0

0800b8a8 <_fwalk_reent>:
 800b8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8ac:	4606      	mov	r6, r0
 800b8ae:	4688      	mov	r8, r1
 800b8b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b8b4:	2700      	movs	r7, #0
 800b8b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8ba:	f1b9 0901 	subs.w	r9, r9, #1
 800b8be:	d505      	bpl.n	800b8cc <_fwalk_reent+0x24>
 800b8c0:	6824      	ldr	r4, [r4, #0]
 800b8c2:	2c00      	cmp	r4, #0
 800b8c4:	d1f7      	bne.n	800b8b6 <_fwalk_reent+0xe>
 800b8c6:	4638      	mov	r0, r7
 800b8c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8cc:	89ab      	ldrh	r3, [r5, #12]
 800b8ce:	2b01      	cmp	r3, #1
 800b8d0:	d907      	bls.n	800b8e2 <_fwalk_reent+0x3a>
 800b8d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	d003      	beq.n	800b8e2 <_fwalk_reent+0x3a>
 800b8da:	4629      	mov	r1, r5
 800b8dc:	4630      	mov	r0, r6
 800b8de:	47c0      	blx	r8
 800b8e0:	4307      	orrs	r7, r0
 800b8e2:	3568      	adds	r5, #104	; 0x68
 800b8e4:	e7e9      	b.n	800b8ba <_fwalk_reent+0x12>

0800b8e6 <rshift>:
 800b8e6:	6903      	ldr	r3, [r0, #16]
 800b8e8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b8ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8f0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b8f4:	f100 0414 	add.w	r4, r0, #20
 800b8f8:	dd45      	ble.n	800b986 <rshift+0xa0>
 800b8fa:	f011 011f 	ands.w	r1, r1, #31
 800b8fe:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b902:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b906:	d10c      	bne.n	800b922 <rshift+0x3c>
 800b908:	f100 0710 	add.w	r7, r0, #16
 800b90c:	4629      	mov	r1, r5
 800b90e:	42b1      	cmp	r1, r6
 800b910:	d334      	bcc.n	800b97c <rshift+0x96>
 800b912:	1a9b      	subs	r3, r3, r2
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	1eea      	subs	r2, r5, #3
 800b918:	4296      	cmp	r6, r2
 800b91a:	bf38      	it	cc
 800b91c:	2300      	movcc	r3, #0
 800b91e:	4423      	add	r3, r4
 800b920:	e015      	b.n	800b94e <rshift+0x68>
 800b922:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b926:	f1c1 0820 	rsb	r8, r1, #32
 800b92a:	40cf      	lsrs	r7, r1
 800b92c:	f105 0e04 	add.w	lr, r5, #4
 800b930:	46a1      	mov	r9, r4
 800b932:	4576      	cmp	r6, lr
 800b934:	46f4      	mov	ip, lr
 800b936:	d815      	bhi.n	800b964 <rshift+0x7e>
 800b938:	1a9a      	subs	r2, r3, r2
 800b93a:	0092      	lsls	r2, r2, #2
 800b93c:	3a04      	subs	r2, #4
 800b93e:	3501      	adds	r5, #1
 800b940:	42ae      	cmp	r6, r5
 800b942:	bf38      	it	cc
 800b944:	2200      	movcc	r2, #0
 800b946:	18a3      	adds	r3, r4, r2
 800b948:	50a7      	str	r7, [r4, r2]
 800b94a:	b107      	cbz	r7, 800b94e <rshift+0x68>
 800b94c:	3304      	adds	r3, #4
 800b94e:	1b1a      	subs	r2, r3, r4
 800b950:	42a3      	cmp	r3, r4
 800b952:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b956:	bf08      	it	eq
 800b958:	2300      	moveq	r3, #0
 800b95a:	6102      	str	r2, [r0, #16]
 800b95c:	bf08      	it	eq
 800b95e:	6143      	streq	r3, [r0, #20]
 800b960:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b964:	f8dc c000 	ldr.w	ip, [ip]
 800b968:	fa0c fc08 	lsl.w	ip, ip, r8
 800b96c:	ea4c 0707 	orr.w	r7, ip, r7
 800b970:	f849 7b04 	str.w	r7, [r9], #4
 800b974:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b978:	40cf      	lsrs	r7, r1
 800b97a:	e7da      	b.n	800b932 <rshift+0x4c>
 800b97c:	f851 cb04 	ldr.w	ip, [r1], #4
 800b980:	f847 cf04 	str.w	ip, [r7, #4]!
 800b984:	e7c3      	b.n	800b90e <rshift+0x28>
 800b986:	4623      	mov	r3, r4
 800b988:	e7e1      	b.n	800b94e <rshift+0x68>

0800b98a <__hexdig_fun>:
 800b98a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b98e:	2b09      	cmp	r3, #9
 800b990:	d802      	bhi.n	800b998 <__hexdig_fun+0xe>
 800b992:	3820      	subs	r0, #32
 800b994:	b2c0      	uxtb	r0, r0
 800b996:	4770      	bx	lr
 800b998:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b99c:	2b05      	cmp	r3, #5
 800b99e:	d801      	bhi.n	800b9a4 <__hexdig_fun+0x1a>
 800b9a0:	3847      	subs	r0, #71	; 0x47
 800b9a2:	e7f7      	b.n	800b994 <__hexdig_fun+0xa>
 800b9a4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b9a8:	2b05      	cmp	r3, #5
 800b9aa:	d801      	bhi.n	800b9b0 <__hexdig_fun+0x26>
 800b9ac:	3827      	subs	r0, #39	; 0x27
 800b9ae:	e7f1      	b.n	800b994 <__hexdig_fun+0xa>
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	4770      	bx	lr

0800b9b4 <__gethex>:
 800b9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b8:	ed2d 8b02 	vpush	{d8}
 800b9bc:	b089      	sub	sp, #36	; 0x24
 800b9be:	ee08 0a10 	vmov	s16, r0
 800b9c2:	9304      	str	r3, [sp, #16]
 800b9c4:	4bb4      	ldr	r3, [pc, #720]	; (800bc98 <__gethex+0x2e4>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	9301      	str	r3, [sp, #4]
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	468b      	mov	fp, r1
 800b9ce:	4690      	mov	r8, r2
 800b9d0:	f7f4 fc06 	bl	80001e0 <strlen>
 800b9d4:	9b01      	ldr	r3, [sp, #4]
 800b9d6:	f8db 2000 	ldr.w	r2, [fp]
 800b9da:	4403      	add	r3, r0
 800b9dc:	4682      	mov	sl, r0
 800b9de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b9e2:	9305      	str	r3, [sp, #20]
 800b9e4:	1c93      	adds	r3, r2, #2
 800b9e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b9ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b9ee:	32fe      	adds	r2, #254	; 0xfe
 800b9f0:	18d1      	adds	r1, r2, r3
 800b9f2:	461f      	mov	r7, r3
 800b9f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b9f8:	9100      	str	r1, [sp, #0]
 800b9fa:	2830      	cmp	r0, #48	; 0x30
 800b9fc:	d0f8      	beq.n	800b9f0 <__gethex+0x3c>
 800b9fe:	f7ff ffc4 	bl	800b98a <__hexdig_fun>
 800ba02:	4604      	mov	r4, r0
 800ba04:	2800      	cmp	r0, #0
 800ba06:	d13a      	bne.n	800ba7e <__gethex+0xca>
 800ba08:	9901      	ldr	r1, [sp, #4]
 800ba0a:	4652      	mov	r2, sl
 800ba0c:	4638      	mov	r0, r7
 800ba0e:	f7fd fe66 	bl	80096de <strncmp>
 800ba12:	4605      	mov	r5, r0
 800ba14:	2800      	cmp	r0, #0
 800ba16:	d168      	bne.n	800baea <__gethex+0x136>
 800ba18:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ba1c:	eb07 060a 	add.w	r6, r7, sl
 800ba20:	f7ff ffb3 	bl	800b98a <__hexdig_fun>
 800ba24:	2800      	cmp	r0, #0
 800ba26:	d062      	beq.n	800baee <__gethex+0x13a>
 800ba28:	4633      	mov	r3, r6
 800ba2a:	7818      	ldrb	r0, [r3, #0]
 800ba2c:	2830      	cmp	r0, #48	; 0x30
 800ba2e:	461f      	mov	r7, r3
 800ba30:	f103 0301 	add.w	r3, r3, #1
 800ba34:	d0f9      	beq.n	800ba2a <__gethex+0x76>
 800ba36:	f7ff ffa8 	bl	800b98a <__hexdig_fun>
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	fab0 f480 	clz	r4, r0
 800ba40:	0964      	lsrs	r4, r4, #5
 800ba42:	4635      	mov	r5, r6
 800ba44:	9300      	str	r3, [sp, #0]
 800ba46:	463a      	mov	r2, r7
 800ba48:	4616      	mov	r6, r2
 800ba4a:	3201      	adds	r2, #1
 800ba4c:	7830      	ldrb	r0, [r6, #0]
 800ba4e:	f7ff ff9c 	bl	800b98a <__hexdig_fun>
 800ba52:	2800      	cmp	r0, #0
 800ba54:	d1f8      	bne.n	800ba48 <__gethex+0x94>
 800ba56:	9901      	ldr	r1, [sp, #4]
 800ba58:	4652      	mov	r2, sl
 800ba5a:	4630      	mov	r0, r6
 800ba5c:	f7fd fe3f 	bl	80096de <strncmp>
 800ba60:	b980      	cbnz	r0, 800ba84 <__gethex+0xd0>
 800ba62:	b94d      	cbnz	r5, 800ba78 <__gethex+0xc4>
 800ba64:	eb06 050a 	add.w	r5, r6, sl
 800ba68:	462a      	mov	r2, r5
 800ba6a:	4616      	mov	r6, r2
 800ba6c:	3201      	adds	r2, #1
 800ba6e:	7830      	ldrb	r0, [r6, #0]
 800ba70:	f7ff ff8b 	bl	800b98a <__hexdig_fun>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	d1f8      	bne.n	800ba6a <__gethex+0xb6>
 800ba78:	1bad      	subs	r5, r5, r6
 800ba7a:	00ad      	lsls	r5, r5, #2
 800ba7c:	e004      	b.n	800ba88 <__gethex+0xd4>
 800ba7e:	2400      	movs	r4, #0
 800ba80:	4625      	mov	r5, r4
 800ba82:	e7e0      	b.n	800ba46 <__gethex+0x92>
 800ba84:	2d00      	cmp	r5, #0
 800ba86:	d1f7      	bne.n	800ba78 <__gethex+0xc4>
 800ba88:	7833      	ldrb	r3, [r6, #0]
 800ba8a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ba8e:	2b50      	cmp	r3, #80	; 0x50
 800ba90:	d13b      	bne.n	800bb0a <__gethex+0x156>
 800ba92:	7873      	ldrb	r3, [r6, #1]
 800ba94:	2b2b      	cmp	r3, #43	; 0x2b
 800ba96:	d02c      	beq.n	800baf2 <__gethex+0x13e>
 800ba98:	2b2d      	cmp	r3, #45	; 0x2d
 800ba9a:	d02e      	beq.n	800bafa <__gethex+0x146>
 800ba9c:	1c71      	adds	r1, r6, #1
 800ba9e:	f04f 0900 	mov.w	r9, #0
 800baa2:	7808      	ldrb	r0, [r1, #0]
 800baa4:	f7ff ff71 	bl	800b98a <__hexdig_fun>
 800baa8:	1e43      	subs	r3, r0, #1
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	2b18      	cmp	r3, #24
 800baae:	d82c      	bhi.n	800bb0a <__gethex+0x156>
 800bab0:	f1a0 0210 	sub.w	r2, r0, #16
 800bab4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bab8:	f7ff ff67 	bl	800b98a <__hexdig_fun>
 800babc:	1e43      	subs	r3, r0, #1
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	2b18      	cmp	r3, #24
 800bac2:	d91d      	bls.n	800bb00 <__gethex+0x14c>
 800bac4:	f1b9 0f00 	cmp.w	r9, #0
 800bac8:	d000      	beq.n	800bacc <__gethex+0x118>
 800baca:	4252      	negs	r2, r2
 800bacc:	4415      	add	r5, r2
 800bace:	f8cb 1000 	str.w	r1, [fp]
 800bad2:	b1e4      	cbz	r4, 800bb0e <__gethex+0x15a>
 800bad4:	9b00      	ldr	r3, [sp, #0]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	bf14      	ite	ne
 800bada:	2700      	movne	r7, #0
 800badc:	2706      	moveq	r7, #6
 800bade:	4638      	mov	r0, r7
 800bae0:	b009      	add	sp, #36	; 0x24
 800bae2:	ecbd 8b02 	vpop	{d8}
 800bae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baea:	463e      	mov	r6, r7
 800baec:	4625      	mov	r5, r4
 800baee:	2401      	movs	r4, #1
 800baf0:	e7ca      	b.n	800ba88 <__gethex+0xd4>
 800baf2:	f04f 0900 	mov.w	r9, #0
 800baf6:	1cb1      	adds	r1, r6, #2
 800baf8:	e7d3      	b.n	800baa2 <__gethex+0xee>
 800bafa:	f04f 0901 	mov.w	r9, #1
 800bafe:	e7fa      	b.n	800baf6 <__gethex+0x142>
 800bb00:	230a      	movs	r3, #10
 800bb02:	fb03 0202 	mla	r2, r3, r2, r0
 800bb06:	3a10      	subs	r2, #16
 800bb08:	e7d4      	b.n	800bab4 <__gethex+0x100>
 800bb0a:	4631      	mov	r1, r6
 800bb0c:	e7df      	b.n	800bace <__gethex+0x11a>
 800bb0e:	1bf3      	subs	r3, r6, r7
 800bb10:	3b01      	subs	r3, #1
 800bb12:	4621      	mov	r1, r4
 800bb14:	2b07      	cmp	r3, #7
 800bb16:	dc0b      	bgt.n	800bb30 <__gethex+0x17c>
 800bb18:	ee18 0a10 	vmov	r0, s16
 800bb1c:	f000 faf0 	bl	800c100 <_Balloc>
 800bb20:	4604      	mov	r4, r0
 800bb22:	b940      	cbnz	r0, 800bb36 <__gethex+0x182>
 800bb24:	4b5d      	ldr	r3, [pc, #372]	; (800bc9c <__gethex+0x2e8>)
 800bb26:	4602      	mov	r2, r0
 800bb28:	21de      	movs	r1, #222	; 0xde
 800bb2a:	485d      	ldr	r0, [pc, #372]	; (800bca0 <__gethex+0x2ec>)
 800bb2c:	f7fe fe68 	bl	800a800 <__assert_func>
 800bb30:	3101      	adds	r1, #1
 800bb32:	105b      	asrs	r3, r3, #1
 800bb34:	e7ee      	b.n	800bb14 <__gethex+0x160>
 800bb36:	f100 0914 	add.w	r9, r0, #20
 800bb3a:	f04f 0b00 	mov.w	fp, #0
 800bb3e:	f1ca 0301 	rsb	r3, sl, #1
 800bb42:	f8cd 9008 	str.w	r9, [sp, #8]
 800bb46:	f8cd b000 	str.w	fp, [sp]
 800bb4a:	9306      	str	r3, [sp, #24]
 800bb4c:	42b7      	cmp	r7, r6
 800bb4e:	d340      	bcc.n	800bbd2 <__gethex+0x21e>
 800bb50:	9802      	ldr	r0, [sp, #8]
 800bb52:	9b00      	ldr	r3, [sp, #0]
 800bb54:	f840 3b04 	str.w	r3, [r0], #4
 800bb58:	eba0 0009 	sub.w	r0, r0, r9
 800bb5c:	1080      	asrs	r0, r0, #2
 800bb5e:	0146      	lsls	r6, r0, #5
 800bb60:	6120      	str	r0, [r4, #16]
 800bb62:	4618      	mov	r0, r3
 800bb64:	f000 fbbe 	bl	800c2e4 <__hi0bits>
 800bb68:	1a30      	subs	r0, r6, r0
 800bb6a:	f8d8 6000 	ldr.w	r6, [r8]
 800bb6e:	42b0      	cmp	r0, r6
 800bb70:	dd63      	ble.n	800bc3a <__gethex+0x286>
 800bb72:	1b87      	subs	r7, r0, r6
 800bb74:	4639      	mov	r1, r7
 800bb76:	4620      	mov	r0, r4
 800bb78:	f000 ff62 	bl	800ca40 <__any_on>
 800bb7c:	4682      	mov	sl, r0
 800bb7e:	b1a8      	cbz	r0, 800bbac <__gethex+0x1f8>
 800bb80:	1e7b      	subs	r3, r7, #1
 800bb82:	1159      	asrs	r1, r3, #5
 800bb84:	f003 021f 	and.w	r2, r3, #31
 800bb88:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bb8c:	f04f 0a01 	mov.w	sl, #1
 800bb90:	fa0a f202 	lsl.w	r2, sl, r2
 800bb94:	420a      	tst	r2, r1
 800bb96:	d009      	beq.n	800bbac <__gethex+0x1f8>
 800bb98:	4553      	cmp	r3, sl
 800bb9a:	dd05      	ble.n	800bba8 <__gethex+0x1f4>
 800bb9c:	1eb9      	subs	r1, r7, #2
 800bb9e:	4620      	mov	r0, r4
 800bba0:	f000 ff4e 	bl	800ca40 <__any_on>
 800bba4:	2800      	cmp	r0, #0
 800bba6:	d145      	bne.n	800bc34 <__gethex+0x280>
 800bba8:	f04f 0a02 	mov.w	sl, #2
 800bbac:	4639      	mov	r1, r7
 800bbae:	4620      	mov	r0, r4
 800bbb0:	f7ff fe99 	bl	800b8e6 <rshift>
 800bbb4:	443d      	add	r5, r7
 800bbb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bbba:	42ab      	cmp	r3, r5
 800bbbc:	da4c      	bge.n	800bc58 <__gethex+0x2a4>
 800bbbe:	ee18 0a10 	vmov	r0, s16
 800bbc2:	4621      	mov	r1, r4
 800bbc4:	f000 fadc 	bl	800c180 <_Bfree>
 800bbc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bbca:	2300      	movs	r3, #0
 800bbcc:	6013      	str	r3, [r2, #0]
 800bbce:	27a3      	movs	r7, #163	; 0xa3
 800bbd0:	e785      	b.n	800bade <__gethex+0x12a>
 800bbd2:	1e73      	subs	r3, r6, #1
 800bbd4:	9a05      	ldr	r2, [sp, #20]
 800bbd6:	9303      	str	r3, [sp, #12]
 800bbd8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d019      	beq.n	800bc14 <__gethex+0x260>
 800bbe0:	f1bb 0f20 	cmp.w	fp, #32
 800bbe4:	d107      	bne.n	800bbf6 <__gethex+0x242>
 800bbe6:	9b02      	ldr	r3, [sp, #8]
 800bbe8:	9a00      	ldr	r2, [sp, #0]
 800bbea:	f843 2b04 	str.w	r2, [r3], #4
 800bbee:	9302      	str	r3, [sp, #8]
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	9300      	str	r3, [sp, #0]
 800bbf4:	469b      	mov	fp, r3
 800bbf6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bbfa:	f7ff fec6 	bl	800b98a <__hexdig_fun>
 800bbfe:	9b00      	ldr	r3, [sp, #0]
 800bc00:	f000 000f 	and.w	r0, r0, #15
 800bc04:	fa00 f00b 	lsl.w	r0, r0, fp
 800bc08:	4303      	orrs	r3, r0
 800bc0a:	9300      	str	r3, [sp, #0]
 800bc0c:	f10b 0b04 	add.w	fp, fp, #4
 800bc10:	9b03      	ldr	r3, [sp, #12]
 800bc12:	e00d      	b.n	800bc30 <__gethex+0x27c>
 800bc14:	9b03      	ldr	r3, [sp, #12]
 800bc16:	9a06      	ldr	r2, [sp, #24]
 800bc18:	4413      	add	r3, r2
 800bc1a:	42bb      	cmp	r3, r7
 800bc1c:	d3e0      	bcc.n	800bbe0 <__gethex+0x22c>
 800bc1e:	4618      	mov	r0, r3
 800bc20:	9901      	ldr	r1, [sp, #4]
 800bc22:	9307      	str	r3, [sp, #28]
 800bc24:	4652      	mov	r2, sl
 800bc26:	f7fd fd5a 	bl	80096de <strncmp>
 800bc2a:	9b07      	ldr	r3, [sp, #28]
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	d1d7      	bne.n	800bbe0 <__gethex+0x22c>
 800bc30:	461e      	mov	r6, r3
 800bc32:	e78b      	b.n	800bb4c <__gethex+0x198>
 800bc34:	f04f 0a03 	mov.w	sl, #3
 800bc38:	e7b8      	b.n	800bbac <__gethex+0x1f8>
 800bc3a:	da0a      	bge.n	800bc52 <__gethex+0x29e>
 800bc3c:	1a37      	subs	r7, r6, r0
 800bc3e:	4621      	mov	r1, r4
 800bc40:	ee18 0a10 	vmov	r0, s16
 800bc44:	463a      	mov	r2, r7
 800bc46:	f000 fcb7 	bl	800c5b8 <__lshift>
 800bc4a:	1bed      	subs	r5, r5, r7
 800bc4c:	4604      	mov	r4, r0
 800bc4e:	f100 0914 	add.w	r9, r0, #20
 800bc52:	f04f 0a00 	mov.w	sl, #0
 800bc56:	e7ae      	b.n	800bbb6 <__gethex+0x202>
 800bc58:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bc5c:	42a8      	cmp	r0, r5
 800bc5e:	dd72      	ble.n	800bd46 <__gethex+0x392>
 800bc60:	1b45      	subs	r5, r0, r5
 800bc62:	42ae      	cmp	r6, r5
 800bc64:	dc36      	bgt.n	800bcd4 <__gethex+0x320>
 800bc66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bc6a:	2b02      	cmp	r3, #2
 800bc6c:	d02a      	beq.n	800bcc4 <__gethex+0x310>
 800bc6e:	2b03      	cmp	r3, #3
 800bc70:	d02c      	beq.n	800bccc <__gethex+0x318>
 800bc72:	2b01      	cmp	r3, #1
 800bc74:	d11c      	bne.n	800bcb0 <__gethex+0x2fc>
 800bc76:	42ae      	cmp	r6, r5
 800bc78:	d11a      	bne.n	800bcb0 <__gethex+0x2fc>
 800bc7a:	2e01      	cmp	r6, #1
 800bc7c:	d112      	bne.n	800bca4 <__gethex+0x2f0>
 800bc7e:	9a04      	ldr	r2, [sp, #16]
 800bc80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bc84:	6013      	str	r3, [r2, #0]
 800bc86:	2301      	movs	r3, #1
 800bc88:	6123      	str	r3, [r4, #16]
 800bc8a:	f8c9 3000 	str.w	r3, [r9]
 800bc8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bc90:	2762      	movs	r7, #98	; 0x62
 800bc92:	601c      	str	r4, [r3, #0]
 800bc94:	e723      	b.n	800bade <__gethex+0x12a>
 800bc96:	bf00      	nop
 800bc98:	0800dbdc 	.word	0x0800dbdc
 800bc9c:	0800db03 	.word	0x0800db03
 800bca0:	0800db74 	.word	0x0800db74
 800bca4:	1e71      	subs	r1, r6, #1
 800bca6:	4620      	mov	r0, r4
 800bca8:	f000 feca 	bl	800ca40 <__any_on>
 800bcac:	2800      	cmp	r0, #0
 800bcae:	d1e6      	bne.n	800bc7e <__gethex+0x2ca>
 800bcb0:	ee18 0a10 	vmov	r0, s16
 800bcb4:	4621      	mov	r1, r4
 800bcb6:	f000 fa63 	bl	800c180 <_Bfree>
 800bcba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	6013      	str	r3, [r2, #0]
 800bcc0:	2750      	movs	r7, #80	; 0x50
 800bcc2:	e70c      	b.n	800bade <__gethex+0x12a>
 800bcc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d1f2      	bne.n	800bcb0 <__gethex+0x2fc>
 800bcca:	e7d8      	b.n	800bc7e <__gethex+0x2ca>
 800bccc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d1d5      	bne.n	800bc7e <__gethex+0x2ca>
 800bcd2:	e7ed      	b.n	800bcb0 <__gethex+0x2fc>
 800bcd4:	1e6f      	subs	r7, r5, #1
 800bcd6:	f1ba 0f00 	cmp.w	sl, #0
 800bcda:	d131      	bne.n	800bd40 <__gethex+0x38c>
 800bcdc:	b127      	cbz	r7, 800bce8 <__gethex+0x334>
 800bcde:	4639      	mov	r1, r7
 800bce0:	4620      	mov	r0, r4
 800bce2:	f000 fead 	bl	800ca40 <__any_on>
 800bce6:	4682      	mov	sl, r0
 800bce8:	117b      	asrs	r3, r7, #5
 800bcea:	2101      	movs	r1, #1
 800bcec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bcf0:	f007 071f 	and.w	r7, r7, #31
 800bcf4:	fa01 f707 	lsl.w	r7, r1, r7
 800bcf8:	421f      	tst	r7, r3
 800bcfa:	4629      	mov	r1, r5
 800bcfc:	4620      	mov	r0, r4
 800bcfe:	bf18      	it	ne
 800bd00:	f04a 0a02 	orrne.w	sl, sl, #2
 800bd04:	1b76      	subs	r6, r6, r5
 800bd06:	f7ff fdee 	bl	800b8e6 <rshift>
 800bd0a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bd0e:	2702      	movs	r7, #2
 800bd10:	f1ba 0f00 	cmp.w	sl, #0
 800bd14:	d048      	beq.n	800bda8 <__gethex+0x3f4>
 800bd16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd1a:	2b02      	cmp	r3, #2
 800bd1c:	d015      	beq.n	800bd4a <__gethex+0x396>
 800bd1e:	2b03      	cmp	r3, #3
 800bd20:	d017      	beq.n	800bd52 <__gethex+0x39e>
 800bd22:	2b01      	cmp	r3, #1
 800bd24:	d109      	bne.n	800bd3a <__gethex+0x386>
 800bd26:	f01a 0f02 	tst.w	sl, #2
 800bd2a:	d006      	beq.n	800bd3a <__gethex+0x386>
 800bd2c:	f8d9 0000 	ldr.w	r0, [r9]
 800bd30:	ea4a 0a00 	orr.w	sl, sl, r0
 800bd34:	f01a 0f01 	tst.w	sl, #1
 800bd38:	d10e      	bne.n	800bd58 <__gethex+0x3a4>
 800bd3a:	f047 0710 	orr.w	r7, r7, #16
 800bd3e:	e033      	b.n	800bda8 <__gethex+0x3f4>
 800bd40:	f04f 0a01 	mov.w	sl, #1
 800bd44:	e7d0      	b.n	800bce8 <__gethex+0x334>
 800bd46:	2701      	movs	r7, #1
 800bd48:	e7e2      	b.n	800bd10 <__gethex+0x35c>
 800bd4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd4c:	f1c3 0301 	rsb	r3, r3, #1
 800bd50:	9315      	str	r3, [sp, #84]	; 0x54
 800bd52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d0f0      	beq.n	800bd3a <__gethex+0x386>
 800bd58:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bd5c:	f104 0314 	add.w	r3, r4, #20
 800bd60:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bd64:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bd68:	f04f 0c00 	mov.w	ip, #0
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd72:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800bd76:	d01c      	beq.n	800bdb2 <__gethex+0x3fe>
 800bd78:	3201      	adds	r2, #1
 800bd7a:	6002      	str	r2, [r0, #0]
 800bd7c:	2f02      	cmp	r7, #2
 800bd7e:	f104 0314 	add.w	r3, r4, #20
 800bd82:	d13f      	bne.n	800be04 <__gethex+0x450>
 800bd84:	f8d8 2000 	ldr.w	r2, [r8]
 800bd88:	3a01      	subs	r2, #1
 800bd8a:	42b2      	cmp	r2, r6
 800bd8c:	d10a      	bne.n	800bda4 <__gethex+0x3f0>
 800bd8e:	1171      	asrs	r1, r6, #5
 800bd90:	2201      	movs	r2, #1
 800bd92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd96:	f006 061f 	and.w	r6, r6, #31
 800bd9a:	fa02 f606 	lsl.w	r6, r2, r6
 800bd9e:	421e      	tst	r6, r3
 800bda0:	bf18      	it	ne
 800bda2:	4617      	movne	r7, r2
 800bda4:	f047 0720 	orr.w	r7, r7, #32
 800bda8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bdaa:	601c      	str	r4, [r3, #0]
 800bdac:	9b04      	ldr	r3, [sp, #16]
 800bdae:	601d      	str	r5, [r3, #0]
 800bdb0:	e695      	b.n	800bade <__gethex+0x12a>
 800bdb2:	4299      	cmp	r1, r3
 800bdb4:	f843 cc04 	str.w	ip, [r3, #-4]
 800bdb8:	d8d8      	bhi.n	800bd6c <__gethex+0x3b8>
 800bdba:	68a3      	ldr	r3, [r4, #8]
 800bdbc:	459b      	cmp	fp, r3
 800bdbe:	db19      	blt.n	800bdf4 <__gethex+0x440>
 800bdc0:	6861      	ldr	r1, [r4, #4]
 800bdc2:	ee18 0a10 	vmov	r0, s16
 800bdc6:	3101      	adds	r1, #1
 800bdc8:	f000 f99a 	bl	800c100 <_Balloc>
 800bdcc:	4681      	mov	r9, r0
 800bdce:	b918      	cbnz	r0, 800bdd8 <__gethex+0x424>
 800bdd0:	4b1a      	ldr	r3, [pc, #104]	; (800be3c <__gethex+0x488>)
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	2184      	movs	r1, #132	; 0x84
 800bdd6:	e6a8      	b.n	800bb2a <__gethex+0x176>
 800bdd8:	6922      	ldr	r2, [r4, #16]
 800bdda:	3202      	adds	r2, #2
 800bddc:	f104 010c 	add.w	r1, r4, #12
 800bde0:	0092      	lsls	r2, r2, #2
 800bde2:	300c      	adds	r0, #12
 800bde4:	f7fc fea8 	bl	8008b38 <memcpy>
 800bde8:	4621      	mov	r1, r4
 800bdea:	ee18 0a10 	vmov	r0, s16
 800bdee:	f000 f9c7 	bl	800c180 <_Bfree>
 800bdf2:	464c      	mov	r4, r9
 800bdf4:	6923      	ldr	r3, [r4, #16]
 800bdf6:	1c5a      	adds	r2, r3, #1
 800bdf8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bdfc:	6122      	str	r2, [r4, #16]
 800bdfe:	2201      	movs	r2, #1
 800be00:	615a      	str	r2, [r3, #20]
 800be02:	e7bb      	b.n	800bd7c <__gethex+0x3c8>
 800be04:	6922      	ldr	r2, [r4, #16]
 800be06:	455a      	cmp	r2, fp
 800be08:	dd0b      	ble.n	800be22 <__gethex+0x46e>
 800be0a:	2101      	movs	r1, #1
 800be0c:	4620      	mov	r0, r4
 800be0e:	f7ff fd6a 	bl	800b8e6 <rshift>
 800be12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be16:	3501      	adds	r5, #1
 800be18:	42ab      	cmp	r3, r5
 800be1a:	f6ff aed0 	blt.w	800bbbe <__gethex+0x20a>
 800be1e:	2701      	movs	r7, #1
 800be20:	e7c0      	b.n	800bda4 <__gethex+0x3f0>
 800be22:	f016 061f 	ands.w	r6, r6, #31
 800be26:	d0fa      	beq.n	800be1e <__gethex+0x46a>
 800be28:	4453      	add	r3, sl
 800be2a:	f1c6 0620 	rsb	r6, r6, #32
 800be2e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800be32:	f000 fa57 	bl	800c2e4 <__hi0bits>
 800be36:	42b0      	cmp	r0, r6
 800be38:	dbe7      	blt.n	800be0a <__gethex+0x456>
 800be3a:	e7f0      	b.n	800be1e <__gethex+0x46a>
 800be3c:	0800db03 	.word	0x0800db03

0800be40 <L_shift>:
 800be40:	f1c2 0208 	rsb	r2, r2, #8
 800be44:	0092      	lsls	r2, r2, #2
 800be46:	b570      	push	{r4, r5, r6, lr}
 800be48:	f1c2 0620 	rsb	r6, r2, #32
 800be4c:	6843      	ldr	r3, [r0, #4]
 800be4e:	6804      	ldr	r4, [r0, #0]
 800be50:	fa03 f506 	lsl.w	r5, r3, r6
 800be54:	432c      	orrs	r4, r5
 800be56:	40d3      	lsrs	r3, r2
 800be58:	6004      	str	r4, [r0, #0]
 800be5a:	f840 3f04 	str.w	r3, [r0, #4]!
 800be5e:	4288      	cmp	r0, r1
 800be60:	d3f4      	bcc.n	800be4c <L_shift+0xc>
 800be62:	bd70      	pop	{r4, r5, r6, pc}

0800be64 <__match>:
 800be64:	b530      	push	{r4, r5, lr}
 800be66:	6803      	ldr	r3, [r0, #0]
 800be68:	3301      	adds	r3, #1
 800be6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be6e:	b914      	cbnz	r4, 800be76 <__match+0x12>
 800be70:	6003      	str	r3, [r0, #0]
 800be72:	2001      	movs	r0, #1
 800be74:	bd30      	pop	{r4, r5, pc}
 800be76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be7a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800be7e:	2d19      	cmp	r5, #25
 800be80:	bf98      	it	ls
 800be82:	3220      	addls	r2, #32
 800be84:	42a2      	cmp	r2, r4
 800be86:	d0f0      	beq.n	800be6a <__match+0x6>
 800be88:	2000      	movs	r0, #0
 800be8a:	e7f3      	b.n	800be74 <__match+0x10>

0800be8c <__hexnan>:
 800be8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be90:	680b      	ldr	r3, [r1, #0]
 800be92:	115e      	asrs	r6, r3, #5
 800be94:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800be98:	f013 031f 	ands.w	r3, r3, #31
 800be9c:	b087      	sub	sp, #28
 800be9e:	bf18      	it	ne
 800bea0:	3604      	addne	r6, #4
 800bea2:	2500      	movs	r5, #0
 800bea4:	1f37      	subs	r7, r6, #4
 800bea6:	4690      	mov	r8, r2
 800bea8:	6802      	ldr	r2, [r0, #0]
 800beaa:	9301      	str	r3, [sp, #4]
 800beac:	4682      	mov	sl, r0
 800beae:	f846 5c04 	str.w	r5, [r6, #-4]
 800beb2:	46b9      	mov	r9, r7
 800beb4:	463c      	mov	r4, r7
 800beb6:	9502      	str	r5, [sp, #8]
 800beb8:	46ab      	mov	fp, r5
 800beba:	7851      	ldrb	r1, [r2, #1]
 800bebc:	1c53      	adds	r3, r2, #1
 800bebe:	9303      	str	r3, [sp, #12]
 800bec0:	b341      	cbz	r1, 800bf14 <__hexnan+0x88>
 800bec2:	4608      	mov	r0, r1
 800bec4:	9205      	str	r2, [sp, #20]
 800bec6:	9104      	str	r1, [sp, #16]
 800bec8:	f7ff fd5f 	bl	800b98a <__hexdig_fun>
 800becc:	2800      	cmp	r0, #0
 800bece:	d14f      	bne.n	800bf70 <__hexnan+0xe4>
 800bed0:	9904      	ldr	r1, [sp, #16]
 800bed2:	9a05      	ldr	r2, [sp, #20]
 800bed4:	2920      	cmp	r1, #32
 800bed6:	d818      	bhi.n	800bf0a <__hexnan+0x7e>
 800bed8:	9b02      	ldr	r3, [sp, #8]
 800beda:	459b      	cmp	fp, r3
 800bedc:	dd13      	ble.n	800bf06 <__hexnan+0x7a>
 800bede:	454c      	cmp	r4, r9
 800bee0:	d206      	bcs.n	800bef0 <__hexnan+0x64>
 800bee2:	2d07      	cmp	r5, #7
 800bee4:	dc04      	bgt.n	800bef0 <__hexnan+0x64>
 800bee6:	462a      	mov	r2, r5
 800bee8:	4649      	mov	r1, r9
 800beea:	4620      	mov	r0, r4
 800beec:	f7ff ffa8 	bl	800be40 <L_shift>
 800bef0:	4544      	cmp	r4, r8
 800bef2:	d950      	bls.n	800bf96 <__hexnan+0x10a>
 800bef4:	2300      	movs	r3, #0
 800bef6:	f1a4 0904 	sub.w	r9, r4, #4
 800befa:	f844 3c04 	str.w	r3, [r4, #-4]
 800befe:	f8cd b008 	str.w	fp, [sp, #8]
 800bf02:	464c      	mov	r4, r9
 800bf04:	461d      	mov	r5, r3
 800bf06:	9a03      	ldr	r2, [sp, #12]
 800bf08:	e7d7      	b.n	800beba <__hexnan+0x2e>
 800bf0a:	2929      	cmp	r1, #41	; 0x29
 800bf0c:	d156      	bne.n	800bfbc <__hexnan+0x130>
 800bf0e:	3202      	adds	r2, #2
 800bf10:	f8ca 2000 	str.w	r2, [sl]
 800bf14:	f1bb 0f00 	cmp.w	fp, #0
 800bf18:	d050      	beq.n	800bfbc <__hexnan+0x130>
 800bf1a:	454c      	cmp	r4, r9
 800bf1c:	d206      	bcs.n	800bf2c <__hexnan+0xa0>
 800bf1e:	2d07      	cmp	r5, #7
 800bf20:	dc04      	bgt.n	800bf2c <__hexnan+0xa0>
 800bf22:	462a      	mov	r2, r5
 800bf24:	4649      	mov	r1, r9
 800bf26:	4620      	mov	r0, r4
 800bf28:	f7ff ff8a 	bl	800be40 <L_shift>
 800bf2c:	4544      	cmp	r4, r8
 800bf2e:	d934      	bls.n	800bf9a <__hexnan+0x10e>
 800bf30:	f1a8 0204 	sub.w	r2, r8, #4
 800bf34:	4623      	mov	r3, r4
 800bf36:	f853 1b04 	ldr.w	r1, [r3], #4
 800bf3a:	f842 1f04 	str.w	r1, [r2, #4]!
 800bf3e:	429f      	cmp	r7, r3
 800bf40:	d2f9      	bcs.n	800bf36 <__hexnan+0xaa>
 800bf42:	1b3b      	subs	r3, r7, r4
 800bf44:	f023 0303 	bic.w	r3, r3, #3
 800bf48:	3304      	adds	r3, #4
 800bf4a:	3401      	adds	r4, #1
 800bf4c:	3e03      	subs	r6, #3
 800bf4e:	42b4      	cmp	r4, r6
 800bf50:	bf88      	it	hi
 800bf52:	2304      	movhi	r3, #4
 800bf54:	4443      	add	r3, r8
 800bf56:	2200      	movs	r2, #0
 800bf58:	f843 2b04 	str.w	r2, [r3], #4
 800bf5c:	429f      	cmp	r7, r3
 800bf5e:	d2fb      	bcs.n	800bf58 <__hexnan+0xcc>
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	b91b      	cbnz	r3, 800bf6c <__hexnan+0xe0>
 800bf64:	4547      	cmp	r7, r8
 800bf66:	d127      	bne.n	800bfb8 <__hexnan+0x12c>
 800bf68:	2301      	movs	r3, #1
 800bf6a:	603b      	str	r3, [r7, #0]
 800bf6c:	2005      	movs	r0, #5
 800bf6e:	e026      	b.n	800bfbe <__hexnan+0x132>
 800bf70:	3501      	adds	r5, #1
 800bf72:	2d08      	cmp	r5, #8
 800bf74:	f10b 0b01 	add.w	fp, fp, #1
 800bf78:	dd06      	ble.n	800bf88 <__hexnan+0xfc>
 800bf7a:	4544      	cmp	r4, r8
 800bf7c:	d9c3      	bls.n	800bf06 <__hexnan+0x7a>
 800bf7e:	2300      	movs	r3, #0
 800bf80:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf84:	2501      	movs	r5, #1
 800bf86:	3c04      	subs	r4, #4
 800bf88:	6822      	ldr	r2, [r4, #0]
 800bf8a:	f000 000f 	and.w	r0, r0, #15
 800bf8e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bf92:	6022      	str	r2, [r4, #0]
 800bf94:	e7b7      	b.n	800bf06 <__hexnan+0x7a>
 800bf96:	2508      	movs	r5, #8
 800bf98:	e7b5      	b.n	800bf06 <__hexnan+0x7a>
 800bf9a:	9b01      	ldr	r3, [sp, #4]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d0df      	beq.n	800bf60 <__hexnan+0xd4>
 800bfa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bfa4:	f1c3 0320 	rsb	r3, r3, #32
 800bfa8:	fa22 f303 	lsr.w	r3, r2, r3
 800bfac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bfb0:	401a      	ands	r2, r3
 800bfb2:	f846 2c04 	str.w	r2, [r6, #-4]
 800bfb6:	e7d3      	b.n	800bf60 <__hexnan+0xd4>
 800bfb8:	3f04      	subs	r7, #4
 800bfba:	e7d1      	b.n	800bf60 <__hexnan+0xd4>
 800bfbc:	2004      	movs	r0, #4
 800bfbe:	b007      	add	sp, #28
 800bfc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bfc4 <_localeconv_r>:
 800bfc4:	4800      	ldr	r0, [pc, #0]	; (800bfc8 <_localeconv_r+0x4>)
 800bfc6:	4770      	bx	lr
 800bfc8:	20000208 	.word	0x20000208

0800bfcc <__retarget_lock_init_recursive>:
 800bfcc:	4770      	bx	lr

0800bfce <__retarget_lock_acquire_recursive>:
 800bfce:	4770      	bx	lr

0800bfd0 <__retarget_lock_release_recursive>:
 800bfd0:	4770      	bx	lr
	...

0800bfd4 <_lseek_r>:
 800bfd4:	b538      	push	{r3, r4, r5, lr}
 800bfd6:	4d07      	ldr	r5, [pc, #28]	; (800bff4 <_lseek_r+0x20>)
 800bfd8:	4604      	mov	r4, r0
 800bfda:	4608      	mov	r0, r1
 800bfdc:	4611      	mov	r1, r2
 800bfde:	2200      	movs	r2, #0
 800bfe0:	602a      	str	r2, [r5, #0]
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	f7f8 fb50 	bl	8004688 <_lseek>
 800bfe8:	1c43      	adds	r3, r0, #1
 800bfea:	d102      	bne.n	800bff2 <_lseek_r+0x1e>
 800bfec:	682b      	ldr	r3, [r5, #0]
 800bfee:	b103      	cbz	r3, 800bff2 <_lseek_r+0x1e>
 800bff0:	6023      	str	r3, [r4, #0]
 800bff2:	bd38      	pop	{r3, r4, r5, pc}
 800bff4:	20000fc8 	.word	0x20000fc8

0800bff8 <__swhatbuf_r>:
 800bff8:	b570      	push	{r4, r5, r6, lr}
 800bffa:	460e      	mov	r6, r1
 800bffc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c000:	2900      	cmp	r1, #0
 800c002:	b096      	sub	sp, #88	; 0x58
 800c004:	4614      	mov	r4, r2
 800c006:	461d      	mov	r5, r3
 800c008:	da08      	bge.n	800c01c <__swhatbuf_r+0x24>
 800c00a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c00e:	2200      	movs	r2, #0
 800c010:	602a      	str	r2, [r5, #0]
 800c012:	061a      	lsls	r2, r3, #24
 800c014:	d410      	bmi.n	800c038 <__swhatbuf_r+0x40>
 800c016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c01a:	e00e      	b.n	800c03a <__swhatbuf_r+0x42>
 800c01c:	466a      	mov	r2, sp
 800c01e:	f001 f831 	bl	800d084 <_fstat_r>
 800c022:	2800      	cmp	r0, #0
 800c024:	dbf1      	blt.n	800c00a <__swhatbuf_r+0x12>
 800c026:	9a01      	ldr	r2, [sp, #4]
 800c028:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c02c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c030:	425a      	negs	r2, r3
 800c032:	415a      	adcs	r2, r3
 800c034:	602a      	str	r2, [r5, #0]
 800c036:	e7ee      	b.n	800c016 <__swhatbuf_r+0x1e>
 800c038:	2340      	movs	r3, #64	; 0x40
 800c03a:	2000      	movs	r0, #0
 800c03c:	6023      	str	r3, [r4, #0]
 800c03e:	b016      	add	sp, #88	; 0x58
 800c040:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c044 <__smakebuf_r>:
 800c044:	898b      	ldrh	r3, [r1, #12]
 800c046:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c048:	079d      	lsls	r5, r3, #30
 800c04a:	4606      	mov	r6, r0
 800c04c:	460c      	mov	r4, r1
 800c04e:	d507      	bpl.n	800c060 <__smakebuf_r+0x1c>
 800c050:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c054:	6023      	str	r3, [r4, #0]
 800c056:	6123      	str	r3, [r4, #16]
 800c058:	2301      	movs	r3, #1
 800c05a:	6163      	str	r3, [r4, #20]
 800c05c:	b002      	add	sp, #8
 800c05e:	bd70      	pop	{r4, r5, r6, pc}
 800c060:	ab01      	add	r3, sp, #4
 800c062:	466a      	mov	r2, sp
 800c064:	f7ff ffc8 	bl	800bff8 <__swhatbuf_r>
 800c068:	9900      	ldr	r1, [sp, #0]
 800c06a:	4605      	mov	r5, r0
 800c06c:	4630      	mov	r0, r6
 800c06e:	f7fc fde5 	bl	8008c3c <_malloc_r>
 800c072:	b948      	cbnz	r0, 800c088 <__smakebuf_r+0x44>
 800c074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c078:	059a      	lsls	r2, r3, #22
 800c07a:	d4ef      	bmi.n	800c05c <__smakebuf_r+0x18>
 800c07c:	f023 0303 	bic.w	r3, r3, #3
 800c080:	f043 0302 	orr.w	r3, r3, #2
 800c084:	81a3      	strh	r3, [r4, #12]
 800c086:	e7e3      	b.n	800c050 <__smakebuf_r+0xc>
 800c088:	4b0d      	ldr	r3, [pc, #52]	; (800c0c0 <__smakebuf_r+0x7c>)
 800c08a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c08c:	89a3      	ldrh	r3, [r4, #12]
 800c08e:	6020      	str	r0, [r4, #0]
 800c090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c094:	81a3      	strh	r3, [r4, #12]
 800c096:	9b00      	ldr	r3, [sp, #0]
 800c098:	6163      	str	r3, [r4, #20]
 800c09a:	9b01      	ldr	r3, [sp, #4]
 800c09c:	6120      	str	r0, [r4, #16]
 800c09e:	b15b      	cbz	r3, 800c0b8 <__smakebuf_r+0x74>
 800c0a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0a4:	4630      	mov	r0, r6
 800c0a6:	f000 ffff 	bl	800d0a8 <_isatty_r>
 800c0aa:	b128      	cbz	r0, 800c0b8 <__smakebuf_r+0x74>
 800c0ac:	89a3      	ldrh	r3, [r4, #12]
 800c0ae:	f023 0303 	bic.w	r3, r3, #3
 800c0b2:	f043 0301 	orr.w	r3, r3, #1
 800c0b6:	81a3      	strh	r3, [r4, #12]
 800c0b8:	89a0      	ldrh	r0, [r4, #12]
 800c0ba:	4305      	orrs	r5, r0
 800c0bc:	81a5      	strh	r5, [r4, #12]
 800c0be:	e7cd      	b.n	800c05c <__smakebuf_r+0x18>
 800c0c0:	0800b721 	.word	0x0800b721

0800c0c4 <__ascii_mbtowc>:
 800c0c4:	b082      	sub	sp, #8
 800c0c6:	b901      	cbnz	r1, 800c0ca <__ascii_mbtowc+0x6>
 800c0c8:	a901      	add	r1, sp, #4
 800c0ca:	b142      	cbz	r2, 800c0de <__ascii_mbtowc+0x1a>
 800c0cc:	b14b      	cbz	r3, 800c0e2 <__ascii_mbtowc+0x1e>
 800c0ce:	7813      	ldrb	r3, [r2, #0]
 800c0d0:	600b      	str	r3, [r1, #0]
 800c0d2:	7812      	ldrb	r2, [r2, #0]
 800c0d4:	1e10      	subs	r0, r2, #0
 800c0d6:	bf18      	it	ne
 800c0d8:	2001      	movne	r0, #1
 800c0da:	b002      	add	sp, #8
 800c0dc:	4770      	bx	lr
 800c0de:	4610      	mov	r0, r2
 800c0e0:	e7fb      	b.n	800c0da <__ascii_mbtowc+0x16>
 800c0e2:	f06f 0001 	mvn.w	r0, #1
 800c0e6:	e7f8      	b.n	800c0da <__ascii_mbtowc+0x16>

0800c0e8 <__malloc_lock>:
 800c0e8:	4801      	ldr	r0, [pc, #4]	; (800c0f0 <__malloc_lock+0x8>)
 800c0ea:	f7ff bf70 	b.w	800bfce <__retarget_lock_acquire_recursive>
 800c0ee:	bf00      	nop
 800c0f0:	20000fc4 	.word	0x20000fc4

0800c0f4 <__malloc_unlock>:
 800c0f4:	4801      	ldr	r0, [pc, #4]	; (800c0fc <__malloc_unlock+0x8>)
 800c0f6:	f7ff bf6b 	b.w	800bfd0 <__retarget_lock_release_recursive>
 800c0fa:	bf00      	nop
 800c0fc:	20000fc4 	.word	0x20000fc4

0800c100 <_Balloc>:
 800c100:	b570      	push	{r4, r5, r6, lr}
 800c102:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c104:	4604      	mov	r4, r0
 800c106:	460d      	mov	r5, r1
 800c108:	b976      	cbnz	r6, 800c128 <_Balloc+0x28>
 800c10a:	2010      	movs	r0, #16
 800c10c:	f7fc fd0c 	bl	8008b28 <malloc>
 800c110:	4602      	mov	r2, r0
 800c112:	6260      	str	r0, [r4, #36]	; 0x24
 800c114:	b920      	cbnz	r0, 800c120 <_Balloc+0x20>
 800c116:	4b18      	ldr	r3, [pc, #96]	; (800c178 <_Balloc+0x78>)
 800c118:	4818      	ldr	r0, [pc, #96]	; (800c17c <_Balloc+0x7c>)
 800c11a:	2166      	movs	r1, #102	; 0x66
 800c11c:	f7fe fb70 	bl	800a800 <__assert_func>
 800c120:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c124:	6006      	str	r6, [r0, #0]
 800c126:	60c6      	str	r6, [r0, #12]
 800c128:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c12a:	68f3      	ldr	r3, [r6, #12]
 800c12c:	b183      	cbz	r3, 800c150 <_Balloc+0x50>
 800c12e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c130:	68db      	ldr	r3, [r3, #12]
 800c132:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c136:	b9b8      	cbnz	r0, 800c168 <_Balloc+0x68>
 800c138:	2101      	movs	r1, #1
 800c13a:	fa01 f605 	lsl.w	r6, r1, r5
 800c13e:	1d72      	adds	r2, r6, #5
 800c140:	0092      	lsls	r2, r2, #2
 800c142:	4620      	mov	r0, r4
 800c144:	f000 fc9d 	bl	800ca82 <_calloc_r>
 800c148:	b160      	cbz	r0, 800c164 <_Balloc+0x64>
 800c14a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c14e:	e00e      	b.n	800c16e <_Balloc+0x6e>
 800c150:	2221      	movs	r2, #33	; 0x21
 800c152:	2104      	movs	r1, #4
 800c154:	4620      	mov	r0, r4
 800c156:	f000 fc94 	bl	800ca82 <_calloc_r>
 800c15a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c15c:	60f0      	str	r0, [r6, #12]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d1e4      	bne.n	800c12e <_Balloc+0x2e>
 800c164:	2000      	movs	r0, #0
 800c166:	bd70      	pop	{r4, r5, r6, pc}
 800c168:	6802      	ldr	r2, [r0, #0]
 800c16a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c16e:	2300      	movs	r3, #0
 800c170:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c174:	e7f7      	b.n	800c166 <_Balloc+0x66>
 800c176:	bf00      	nop
 800c178:	0800da91 	.word	0x0800da91
 800c17c:	0800dbf0 	.word	0x0800dbf0

0800c180 <_Bfree>:
 800c180:	b570      	push	{r4, r5, r6, lr}
 800c182:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c184:	4605      	mov	r5, r0
 800c186:	460c      	mov	r4, r1
 800c188:	b976      	cbnz	r6, 800c1a8 <_Bfree+0x28>
 800c18a:	2010      	movs	r0, #16
 800c18c:	f7fc fccc 	bl	8008b28 <malloc>
 800c190:	4602      	mov	r2, r0
 800c192:	6268      	str	r0, [r5, #36]	; 0x24
 800c194:	b920      	cbnz	r0, 800c1a0 <_Bfree+0x20>
 800c196:	4b09      	ldr	r3, [pc, #36]	; (800c1bc <_Bfree+0x3c>)
 800c198:	4809      	ldr	r0, [pc, #36]	; (800c1c0 <_Bfree+0x40>)
 800c19a:	218a      	movs	r1, #138	; 0x8a
 800c19c:	f7fe fb30 	bl	800a800 <__assert_func>
 800c1a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1a4:	6006      	str	r6, [r0, #0]
 800c1a6:	60c6      	str	r6, [r0, #12]
 800c1a8:	b13c      	cbz	r4, 800c1ba <_Bfree+0x3a>
 800c1aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c1ac:	6862      	ldr	r2, [r4, #4]
 800c1ae:	68db      	ldr	r3, [r3, #12]
 800c1b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c1b4:	6021      	str	r1, [r4, #0]
 800c1b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c1ba:	bd70      	pop	{r4, r5, r6, pc}
 800c1bc:	0800da91 	.word	0x0800da91
 800c1c0:	0800dbf0 	.word	0x0800dbf0

0800c1c4 <__multadd>:
 800c1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1c8:	690d      	ldr	r5, [r1, #16]
 800c1ca:	4607      	mov	r7, r0
 800c1cc:	460c      	mov	r4, r1
 800c1ce:	461e      	mov	r6, r3
 800c1d0:	f101 0c14 	add.w	ip, r1, #20
 800c1d4:	2000      	movs	r0, #0
 800c1d6:	f8dc 3000 	ldr.w	r3, [ip]
 800c1da:	b299      	uxth	r1, r3
 800c1dc:	fb02 6101 	mla	r1, r2, r1, r6
 800c1e0:	0c1e      	lsrs	r6, r3, #16
 800c1e2:	0c0b      	lsrs	r3, r1, #16
 800c1e4:	fb02 3306 	mla	r3, r2, r6, r3
 800c1e8:	b289      	uxth	r1, r1
 800c1ea:	3001      	adds	r0, #1
 800c1ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c1f0:	4285      	cmp	r5, r0
 800c1f2:	f84c 1b04 	str.w	r1, [ip], #4
 800c1f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c1fa:	dcec      	bgt.n	800c1d6 <__multadd+0x12>
 800c1fc:	b30e      	cbz	r6, 800c242 <__multadd+0x7e>
 800c1fe:	68a3      	ldr	r3, [r4, #8]
 800c200:	42ab      	cmp	r3, r5
 800c202:	dc19      	bgt.n	800c238 <__multadd+0x74>
 800c204:	6861      	ldr	r1, [r4, #4]
 800c206:	4638      	mov	r0, r7
 800c208:	3101      	adds	r1, #1
 800c20a:	f7ff ff79 	bl	800c100 <_Balloc>
 800c20e:	4680      	mov	r8, r0
 800c210:	b928      	cbnz	r0, 800c21e <__multadd+0x5a>
 800c212:	4602      	mov	r2, r0
 800c214:	4b0c      	ldr	r3, [pc, #48]	; (800c248 <__multadd+0x84>)
 800c216:	480d      	ldr	r0, [pc, #52]	; (800c24c <__multadd+0x88>)
 800c218:	21b5      	movs	r1, #181	; 0xb5
 800c21a:	f7fe faf1 	bl	800a800 <__assert_func>
 800c21e:	6922      	ldr	r2, [r4, #16]
 800c220:	3202      	adds	r2, #2
 800c222:	f104 010c 	add.w	r1, r4, #12
 800c226:	0092      	lsls	r2, r2, #2
 800c228:	300c      	adds	r0, #12
 800c22a:	f7fc fc85 	bl	8008b38 <memcpy>
 800c22e:	4621      	mov	r1, r4
 800c230:	4638      	mov	r0, r7
 800c232:	f7ff ffa5 	bl	800c180 <_Bfree>
 800c236:	4644      	mov	r4, r8
 800c238:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c23c:	3501      	adds	r5, #1
 800c23e:	615e      	str	r6, [r3, #20]
 800c240:	6125      	str	r5, [r4, #16]
 800c242:	4620      	mov	r0, r4
 800c244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c248:	0800db03 	.word	0x0800db03
 800c24c:	0800dbf0 	.word	0x0800dbf0

0800c250 <__s2b>:
 800c250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c254:	460c      	mov	r4, r1
 800c256:	4615      	mov	r5, r2
 800c258:	461f      	mov	r7, r3
 800c25a:	2209      	movs	r2, #9
 800c25c:	3308      	adds	r3, #8
 800c25e:	4606      	mov	r6, r0
 800c260:	fb93 f3f2 	sdiv	r3, r3, r2
 800c264:	2100      	movs	r1, #0
 800c266:	2201      	movs	r2, #1
 800c268:	429a      	cmp	r2, r3
 800c26a:	db09      	blt.n	800c280 <__s2b+0x30>
 800c26c:	4630      	mov	r0, r6
 800c26e:	f7ff ff47 	bl	800c100 <_Balloc>
 800c272:	b940      	cbnz	r0, 800c286 <__s2b+0x36>
 800c274:	4602      	mov	r2, r0
 800c276:	4b19      	ldr	r3, [pc, #100]	; (800c2dc <__s2b+0x8c>)
 800c278:	4819      	ldr	r0, [pc, #100]	; (800c2e0 <__s2b+0x90>)
 800c27a:	21ce      	movs	r1, #206	; 0xce
 800c27c:	f7fe fac0 	bl	800a800 <__assert_func>
 800c280:	0052      	lsls	r2, r2, #1
 800c282:	3101      	adds	r1, #1
 800c284:	e7f0      	b.n	800c268 <__s2b+0x18>
 800c286:	9b08      	ldr	r3, [sp, #32]
 800c288:	6143      	str	r3, [r0, #20]
 800c28a:	2d09      	cmp	r5, #9
 800c28c:	f04f 0301 	mov.w	r3, #1
 800c290:	6103      	str	r3, [r0, #16]
 800c292:	dd16      	ble.n	800c2c2 <__s2b+0x72>
 800c294:	f104 0909 	add.w	r9, r4, #9
 800c298:	46c8      	mov	r8, r9
 800c29a:	442c      	add	r4, r5
 800c29c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c2a0:	4601      	mov	r1, r0
 800c2a2:	3b30      	subs	r3, #48	; 0x30
 800c2a4:	220a      	movs	r2, #10
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	f7ff ff8c 	bl	800c1c4 <__multadd>
 800c2ac:	45a0      	cmp	r8, r4
 800c2ae:	d1f5      	bne.n	800c29c <__s2b+0x4c>
 800c2b0:	f1a5 0408 	sub.w	r4, r5, #8
 800c2b4:	444c      	add	r4, r9
 800c2b6:	1b2d      	subs	r5, r5, r4
 800c2b8:	1963      	adds	r3, r4, r5
 800c2ba:	42bb      	cmp	r3, r7
 800c2bc:	db04      	blt.n	800c2c8 <__s2b+0x78>
 800c2be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2c2:	340a      	adds	r4, #10
 800c2c4:	2509      	movs	r5, #9
 800c2c6:	e7f6      	b.n	800c2b6 <__s2b+0x66>
 800c2c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c2cc:	4601      	mov	r1, r0
 800c2ce:	3b30      	subs	r3, #48	; 0x30
 800c2d0:	220a      	movs	r2, #10
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	f7ff ff76 	bl	800c1c4 <__multadd>
 800c2d8:	e7ee      	b.n	800c2b8 <__s2b+0x68>
 800c2da:	bf00      	nop
 800c2dc:	0800db03 	.word	0x0800db03
 800c2e0:	0800dbf0 	.word	0x0800dbf0

0800c2e4 <__hi0bits>:
 800c2e4:	0c03      	lsrs	r3, r0, #16
 800c2e6:	041b      	lsls	r3, r3, #16
 800c2e8:	b9d3      	cbnz	r3, 800c320 <__hi0bits+0x3c>
 800c2ea:	0400      	lsls	r0, r0, #16
 800c2ec:	2310      	movs	r3, #16
 800c2ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c2f2:	bf04      	itt	eq
 800c2f4:	0200      	lsleq	r0, r0, #8
 800c2f6:	3308      	addeq	r3, #8
 800c2f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c2fc:	bf04      	itt	eq
 800c2fe:	0100      	lsleq	r0, r0, #4
 800c300:	3304      	addeq	r3, #4
 800c302:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c306:	bf04      	itt	eq
 800c308:	0080      	lsleq	r0, r0, #2
 800c30a:	3302      	addeq	r3, #2
 800c30c:	2800      	cmp	r0, #0
 800c30e:	db05      	blt.n	800c31c <__hi0bits+0x38>
 800c310:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c314:	f103 0301 	add.w	r3, r3, #1
 800c318:	bf08      	it	eq
 800c31a:	2320      	moveq	r3, #32
 800c31c:	4618      	mov	r0, r3
 800c31e:	4770      	bx	lr
 800c320:	2300      	movs	r3, #0
 800c322:	e7e4      	b.n	800c2ee <__hi0bits+0xa>

0800c324 <__lo0bits>:
 800c324:	6803      	ldr	r3, [r0, #0]
 800c326:	f013 0207 	ands.w	r2, r3, #7
 800c32a:	4601      	mov	r1, r0
 800c32c:	d00b      	beq.n	800c346 <__lo0bits+0x22>
 800c32e:	07da      	lsls	r2, r3, #31
 800c330:	d423      	bmi.n	800c37a <__lo0bits+0x56>
 800c332:	0798      	lsls	r0, r3, #30
 800c334:	bf49      	itett	mi
 800c336:	085b      	lsrmi	r3, r3, #1
 800c338:	089b      	lsrpl	r3, r3, #2
 800c33a:	2001      	movmi	r0, #1
 800c33c:	600b      	strmi	r3, [r1, #0]
 800c33e:	bf5c      	itt	pl
 800c340:	600b      	strpl	r3, [r1, #0]
 800c342:	2002      	movpl	r0, #2
 800c344:	4770      	bx	lr
 800c346:	b298      	uxth	r0, r3
 800c348:	b9a8      	cbnz	r0, 800c376 <__lo0bits+0x52>
 800c34a:	0c1b      	lsrs	r3, r3, #16
 800c34c:	2010      	movs	r0, #16
 800c34e:	b2da      	uxtb	r2, r3
 800c350:	b90a      	cbnz	r2, 800c356 <__lo0bits+0x32>
 800c352:	3008      	adds	r0, #8
 800c354:	0a1b      	lsrs	r3, r3, #8
 800c356:	071a      	lsls	r2, r3, #28
 800c358:	bf04      	itt	eq
 800c35a:	091b      	lsreq	r3, r3, #4
 800c35c:	3004      	addeq	r0, #4
 800c35e:	079a      	lsls	r2, r3, #30
 800c360:	bf04      	itt	eq
 800c362:	089b      	lsreq	r3, r3, #2
 800c364:	3002      	addeq	r0, #2
 800c366:	07da      	lsls	r2, r3, #31
 800c368:	d403      	bmi.n	800c372 <__lo0bits+0x4e>
 800c36a:	085b      	lsrs	r3, r3, #1
 800c36c:	f100 0001 	add.w	r0, r0, #1
 800c370:	d005      	beq.n	800c37e <__lo0bits+0x5a>
 800c372:	600b      	str	r3, [r1, #0]
 800c374:	4770      	bx	lr
 800c376:	4610      	mov	r0, r2
 800c378:	e7e9      	b.n	800c34e <__lo0bits+0x2a>
 800c37a:	2000      	movs	r0, #0
 800c37c:	4770      	bx	lr
 800c37e:	2020      	movs	r0, #32
 800c380:	4770      	bx	lr
	...

0800c384 <__i2b>:
 800c384:	b510      	push	{r4, lr}
 800c386:	460c      	mov	r4, r1
 800c388:	2101      	movs	r1, #1
 800c38a:	f7ff feb9 	bl	800c100 <_Balloc>
 800c38e:	4602      	mov	r2, r0
 800c390:	b928      	cbnz	r0, 800c39e <__i2b+0x1a>
 800c392:	4b05      	ldr	r3, [pc, #20]	; (800c3a8 <__i2b+0x24>)
 800c394:	4805      	ldr	r0, [pc, #20]	; (800c3ac <__i2b+0x28>)
 800c396:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c39a:	f7fe fa31 	bl	800a800 <__assert_func>
 800c39e:	2301      	movs	r3, #1
 800c3a0:	6144      	str	r4, [r0, #20]
 800c3a2:	6103      	str	r3, [r0, #16]
 800c3a4:	bd10      	pop	{r4, pc}
 800c3a6:	bf00      	nop
 800c3a8:	0800db03 	.word	0x0800db03
 800c3ac:	0800dbf0 	.word	0x0800dbf0

0800c3b0 <__multiply>:
 800c3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b4:	4691      	mov	r9, r2
 800c3b6:	690a      	ldr	r2, [r1, #16]
 800c3b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	bfb8      	it	lt
 800c3c0:	460b      	movlt	r3, r1
 800c3c2:	460c      	mov	r4, r1
 800c3c4:	bfbc      	itt	lt
 800c3c6:	464c      	movlt	r4, r9
 800c3c8:	4699      	movlt	r9, r3
 800c3ca:	6927      	ldr	r7, [r4, #16]
 800c3cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c3d0:	68a3      	ldr	r3, [r4, #8]
 800c3d2:	6861      	ldr	r1, [r4, #4]
 800c3d4:	eb07 060a 	add.w	r6, r7, sl
 800c3d8:	42b3      	cmp	r3, r6
 800c3da:	b085      	sub	sp, #20
 800c3dc:	bfb8      	it	lt
 800c3de:	3101      	addlt	r1, #1
 800c3e0:	f7ff fe8e 	bl	800c100 <_Balloc>
 800c3e4:	b930      	cbnz	r0, 800c3f4 <__multiply+0x44>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	4b44      	ldr	r3, [pc, #272]	; (800c4fc <__multiply+0x14c>)
 800c3ea:	4845      	ldr	r0, [pc, #276]	; (800c500 <__multiply+0x150>)
 800c3ec:	f240 115d 	movw	r1, #349	; 0x15d
 800c3f0:	f7fe fa06 	bl	800a800 <__assert_func>
 800c3f4:	f100 0514 	add.w	r5, r0, #20
 800c3f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c3fc:	462b      	mov	r3, r5
 800c3fe:	2200      	movs	r2, #0
 800c400:	4543      	cmp	r3, r8
 800c402:	d321      	bcc.n	800c448 <__multiply+0x98>
 800c404:	f104 0314 	add.w	r3, r4, #20
 800c408:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c40c:	f109 0314 	add.w	r3, r9, #20
 800c410:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c414:	9202      	str	r2, [sp, #8]
 800c416:	1b3a      	subs	r2, r7, r4
 800c418:	3a15      	subs	r2, #21
 800c41a:	f022 0203 	bic.w	r2, r2, #3
 800c41e:	3204      	adds	r2, #4
 800c420:	f104 0115 	add.w	r1, r4, #21
 800c424:	428f      	cmp	r7, r1
 800c426:	bf38      	it	cc
 800c428:	2204      	movcc	r2, #4
 800c42a:	9201      	str	r2, [sp, #4]
 800c42c:	9a02      	ldr	r2, [sp, #8]
 800c42e:	9303      	str	r3, [sp, #12]
 800c430:	429a      	cmp	r2, r3
 800c432:	d80c      	bhi.n	800c44e <__multiply+0x9e>
 800c434:	2e00      	cmp	r6, #0
 800c436:	dd03      	ble.n	800c440 <__multiply+0x90>
 800c438:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d05a      	beq.n	800c4f6 <__multiply+0x146>
 800c440:	6106      	str	r6, [r0, #16]
 800c442:	b005      	add	sp, #20
 800c444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c448:	f843 2b04 	str.w	r2, [r3], #4
 800c44c:	e7d8      	b.n	800c400 <__multiply+0x50>
 800c44e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c452:	f1ba 0f00 	cmp.w	sl, #0
 800c456:	d024      	beq.n	800c4a2 <__multiply+0xf2>
 800c458:	f104 0e14 	add.w	lr, r4, #20
 800c45c:	46a9      	mov	r9, r5
 800c45e:	f04f 0c00 	mov.w	ip, #0
 800c462:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c466:	f8d9 1000 	ldr.w	r1, [r9]
 800c46a:	fa1f fb82 	uxth.w	fp, r2
 800c46e:	b289      	uxth	r1, r1
 800c470:	fb0a 110b 	mla	r1, sl, fp, r1
 800c474:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c478:	f8d9 2000 	ldr.w	r2, [r9]
 800c47c:	4461      	add	r1, ip
 800c47e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c482:	fb0a c20b 	mla	r2, sl, fp, ip
 800c486:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c48a:	b289      	uxth	r1, r1
 800c48c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c490:	4577      	cmp	r7, lr
 800c492:	f849 1b04 	str.w	r1, [r9], #4
 800c496:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c49a:	d8e2      	bhi.n	800c462 <__multiply+0xb2>
 800c49c:	9a01      	ldr	r2, [sp, #4]
 800c49e:	f845 c002 	str.w	ip, [r5, r2]
 800c4a2:	9a03      	ldr	r2, [sp, #12]
 800c4a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c4a8:	3304      	adds	r3, #4
 800c4aa:	f1b9 0f00 	cmp.w	r9, #0
 800c4ae:	d020      	beq.n	800c4f2 <__multiply+0x142>
 800c4b0:	6829      	ldr	r1, [r5, #0]
 800c4b2:	f104 0c14 	add.w	ip, r4, #20
 800c4b6:	46ae      	mov	lr, r5
 800c4b8:	f04f 0a00 	mov.w	sl, #0
 800c4bc:	f8bc b000 	ldrh.w	fp, [ip]
 800c4c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c4c4:	fb09 220b 	mla	r2, r9, fp, r2
 800c4c8:	4492      	add	sl, r2
 800c4ca:	b289      	uxth	r1, r1
 800c4cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c4d0:	f84e 1b04 	str.w	r1, [lr], #4
 800c4d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c4d8:	f8be 1000 	ldrh.w	r1, [lr]
 800c4dc:	0c12      	lsrs	r2, r2, #16
 800c4de:	fb09 1102 	mla	r1, r9, r2, r1
 800c4e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c4e6:	4567      	cmp	r7, ip
 800c4e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c4ec:	d8e6      	bhi.n	800c4bc <__multiply+0x10c>
 800c4ee:	9a01      	ldr	r2, [sp, #4]
 800c4f0:	50a9      	str	r1, [r5, r2]
 800c4f2:	3504      	adds	r5, #4
 800c4f4:	e79a      	b.n	800c42c <__multiply+0x7c>
 800c4f6:	3e01      	subs	r6, #1
 800c4f8:	e79c      	b.n	800c434 <__multiply+0x84>
 800c4fa:	bf00      	nop
 800c4fc:	0800db03 	.word	0x0800db03
 800c500:	0800dbf0 	.word	0x0800dbf0

0800c504 <__pow5mult>:
 800c504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c508:	4615      	mov	r5, r2
 800c50a:	f012 0203 	ands.w	r2, r2, #3
 800c50e:	4606      	mov	r6, r0
 800c510:	460f      	mov	r7, r1
 800c512:	d007      	beq.n	800c524 <__pow5mult+0x20>
 800c514:	4c25      	ldr	r4, [pc, #148]	; (800c5ac <__pow5mult+0xa8>)
 800c516:	3a01      	subs	r2, #1
 800c518:	2300      	movs	r3, #0
 800c51a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c51e:	f7ff fe51 	bl	800c1c4 <__multadd>
 800c522:	4607      	mov	r7, r0
 800c524:	10ad      	asrs	r5, r5, #2
 800c526:	d03d      	beq.n	800c5a4 <__pow5mult+0xa0>
 800c528:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c52a:	b97c      	cbnz	r4, 800c54c <__pow5mult+0x48>
 800c52c:	2010      	movs	r0, #16
 800c52e:	f7fc fafb 	bl	8008b28 <malloc>
 800c532:	4602      	mov	r2, r0
 800c534:	6270      	str	r0, [r6, #36]	; 0x24
 800c536:	b928      	cbnz	r0, 800c544 <__pow5mult+0x40>
 800c538:	4b1d      	ldr	r3, [pc, #116]	; (800c5b0 <__pow5mult+0xac>)
 800c53a:	481e      	ldr	r0, [pc, #120]	; (800c5b4 <__pow5mult+0xb0>)
 800c53c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c540:	f7fe f95e 	bl	800a800 <__assert_func>
 800c544:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c548:	6004      	str	r4, [r0, #0]
 800c54a:	60c4      	str	r4, [r0, #12]
 800c54c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c550:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c554:	b94c      	cbnz	r4, 800c56a <__pow5mult+0x66>
 800c556:	f240 2171 	movw	r1, #625	; 0x271
 800c55a:	4630      	mov	r0, r6
 800c55c:	f7ff ff12 	bl	800c384 <__i2b>
 800c560:	2300      	movs	r3, #0
 800c562:	f8c8 0008 	str.w	r0, [r8, #8]
 800c566:	4604      	mov	r4, r0
 800c568:	6003      	str	r3, [r0, #0]
 800c56a:	f04f 0900 	mov.w	r9, #0
 800c56e:	07eb      	lsls	r3, r5, #31
 800c570:	d50a      	bpl.n	800c588 <__pow5mult+0x84>
 800c572:	4639      	mov	r1, r7
 800c574:	4622      	mov	r2, r4
 800c576:	4630      	mov	r0, r6
 800c578:	f7ff ff1a 	bl	800c3b0 <__multiply>
 800c57c:	4639      	mov	r1, r7
 800c57e:	4680      	mov	r8, r0
 800c580:	4630      	mov	r0, r6
 800c582:	f7ff fdfd 	bl	800c180 <_Bfree>
 800c586:	4647      	mov	r7, r8
 800c588:	106d      	asrs	r5, r5, #1
 800c58a:	d00b      	beq.n	800c5a4 <__pow5mult+0xa0>
 800c58c:	6820      	ldr	r0, [r4, #0]
 800c58e:	b938      	cbnz	r0, 800c5a0 <__pow5mult+0x9c>
 800c590:	4622      	mov	r2, r4
 800c592:	4621      	mov	r1, r4
 800c594:	4630      	mov	r0, r6
 800c596:	f7ff ff0b 	bl	800c3b0 <__multiply>
 800c59a:	6020      	str	r0, [r4, #0]
 800c59c:	f8c0 9000 	str.w	r9, [r0]
 800c5a0:	4604      	mov	r4, r0
 800c5a2:	e7e4      	b.n	800c56e <__pow5mult+0x6a>
 800c5a4:	4638      	mov	r0, r7
 800c5a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5aa:	bf00      	nop
 800c5ac:	0800dd40 	.word	0x0800dd40
 800c5b0:	0800da91 	.word	0x0800da91
 800c5b4:	0800dbf0 	.word	0x0800dbf0

0800c5b8 <__lshift>:
 800c5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5bc:	460c      	mov	r4, r1
 800c5be:	6849      	ldr	r1, [r1, #4]
 800c5c0:	6923      	ldr	r3, [r4, #16]
 800c5c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c5c6:	68a3      	ldr	r3, [r4, #8]
 800c5c8:	4607      	mov	r7, r0
 800c5ca:	4691      	mov	r9, r2
 800c5cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c5d0:	f108 0601 	add.w	r6, r8, #1
 800c5d4:	42b3      	cmp	r3, r6
 800c5d6:	db0b      	blt.n	800c5f0 <__lshift+0x38>
 800c5d8:	4638      	mov	r0, r7
 800c5da:	f7ff fd91 	bl	800c100 <_Balloc>
 800c5de:	4605      	mov	r5, r0
 800c5e0:	b948      	cbnz	r0, 800c5f6 <__lshift+0x3e>
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	4b2a      	ldr	r3, [pc, #168]	; (800c690 <__lshift+0xd8>)
 800c5e6:	482b      	ldr	r0, [pc, #172]	; (800c694 <__lshift+0xdc>)
 800c5e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c5ec:	f7fe f908 	bl	800a800 <__assert_func>
 800c5f0:	3101      	adds	r1, #1
 800c5f2:	005b      	lsls	r3, r3, #1
 800c5f4:	e7ee      	b.n	800c5d4 <__lshift+0x1c>
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	f100 0114 	add.w	r1, r0, #20
 800c5fc:	f100 0210 	add.w	r2, r0, #16
 800c600:	4618      	mov	r0, r3
 800c602:	4553      	cmp	r3, sl
 800c604:	db37      	blt.n	800c676 <__lshift+0xbe>
 800c606:	6920      	ldr	r0, [r4, #16]
 800c608:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c60c:	f104 0314 	add.w	r3, r4, #20
 800c610:	f019 091f 	ands.w	r9, r9, #31
 800c614:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c618:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c61c:	d02f      	beq.n	800c67e <__lshift+0xc6>
 800c61e:	f1c9 0e20 	rsb	lr, r9, #32
 800c622:	468a      	mov	sl, r1
 800c624:	f04f 0c00 	mov.w	ip, #0
 800c628:	681a      	ldr	r2, [r3, #0]
 800c62a:	fa02 f209 	lsl.w	r2, r2, r9
 800c62e:	ea42 020c 	orr.w	r2, r2, ip
 800c632:	f84a 2b04 	str.w	r2, [sl], #4
 800c636:	f853 2b04 	ldr.w	r2, [r3], #4
 800c63a:	4298      	cmp	r0, r3
 800c63c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c640:	d8f2      	bhi.n	800c628 <__lshift+0x70>
 800c642:	1b03      	subs	r3, r0, r4
 800c644:	3b15      	subs	r3, #21
 800c646:	f023 0303 	bic.w	r3, r3, #3
 800c64a:	3304      	adds	r3, #4
 800c64c:	f104 0215 	add.w	r2, r4, #21
 800c650:	4290      	cmp	r0, r2
 800c652:	bf38      	it	cc
 800c654:	2304      	movcc	r3, #4
 800c656:	f841 c003 	str.w	ip, [r1, r3]
 800c65a:	f1bc 0f00 	cmp.w	ip, #0
 800c65e:	d001      	beq.n	800c664 <__lshift+0xac>
 800c660:	f108 0602 	add.w	r6, r8, #2
 800c664:	3e01      	subs	r6, #1
 800c666:	4638      	mov	r0, r7
 800c668:	612e      	str	r6, [r5, #16]
 800c66a:	4621      	mov	r1, r4
 800c66c:	f7ff fd88 	bl	800c180 <_Bfree>
 800c670:	4628      	mov	r0, r5
 800c672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c676:	f842 0f04 	str.w	r0, [r2, #4]!
 800c67a:	3301      	adds	r3, #1
 800c67c:	e7c1      	b.n	800c602 <__lshift+0x4a>
 800c67e:	3904      	subs	r1, #4
 800c680:	f853 2b04 	ldr.w	r2, [r3], #4
 800c684:	f841 2f04 	str.w	r2, [r1, #4]!
 800c688:	4298      	cmp	r0, r3
 800c68a:	d8f9      	bhi.n	800c680 <__lshift+0xc8>
 800c68c:	e7ea      	b.n	800c664 <__lshift+0xac>
 800c68e:	bf00      	nop
 800c690:	0800db03 	.word	0x0800db03
 800c694:	0800dbf0 	.word	0x0800dbf0

0800c698 <__mcmp>:
 800c698:	b530      	push	{r4, r5, lr}
 800c69a:	6902      	ldr	r2, [r0, #16]
 800c69c:	690c      	ldr	r4, [r1, #16]
 800c69e:	1b12      	subs	r2, r2, r4
 800c6a0:	d10e      	bne.n	800c6c0 <__mcmp+0x28>
 800c6a2:	f100 0314 	add.w	r3, r0, #20
 800c6a6:	3114      	adds	r1, #20
 800c6a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c6ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c6b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c6b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c6b8:	42a5      	cmp	r5, r4
 800c6ba:	d003      	beq.n	800c6c4 <__mcmp+0x2c>
 800c6bc:	d305      	bcc.n	800c6ca <__mcmp+0x32>
 800c6be:	2201      	movs	r2, #1
 800c6c0:	4610      	mov	r0, r2
 800c6c2:	bd30      	pop	{r4, r5, pc}
 800c6c4:	4283      	cmp	r3, r0
 800c6c6:	d3f3      	bcc.n	800c6b0 <__mcmp+0x18>
 800c6c8:	e7fa      	b.n	800c6c0 <__mcmp+0x28>
 800c6ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6ce:	e7f7      	b.n	800c6c0 <__mcmp+0x28>

0800c6d0 <__mdiff>:
 800c6d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d4:	460c      	mov	r4, r1
 800c6d6:	4606      	mov	r6, r0
 800c6d8:	4611      	mov	r1, r2
 800c6da:	4620      	mov	r0, r4
 800c6dc:	4690      	mov	r8, r2
 800c6de:	f7ff ffdb 	bl	800c698 <__mcmp>
 800c6e2:	1e05      	subs	r5, r0, #0
 800c6e4:	d110      	bne.n	800c708 <__mdiff+0x38>
 800c6e6:	4629      	mov	r1, r5
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	f7ff fd09 	bl	800c100 <_Balloc>
 800c6ee:	b930      	cbnz	r0, 800c6fe <__mdiff+0x2e>
 800c6f0:	4b3a      	ldr	r3, [pc, #232]	; (800c7dc <__mdiff+0x10c>)
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	f240 2132 	movw	r1, #562	; 0x232
 800c6f8:	4839      	ldr	r0, [pc, #228]	; (800c7e0 <__mdiff+0x110>)
 800c6fa:	f7fe f881 	bl	800a800 <__assert_func>
 800c6fe:	2301      	movs	r3, #1
 800c700:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c704:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c708:	bfa4      	itt	ge
 800c70a:	4643      	movge	r3, r8
 800c70c:	46a0      	movge	r8, r4
 800c70e:	4630      	mov	r0, r6
 800c710:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c714:	bfa6      	itte	ge
 800c716:	461c      	movge	r4, r3
 800c718:	2500      	movge	r5, #0
 800c71a:	2501      	movlt	r5, #1
 800c71c:	f7ff fcf0 	bl	800c100 <_Balloc>
 800c720:	b920      	cbnz	r0, 800c72c <__mdiff+0x5c>
 800c722:	4b2e      	ldr	r3, [pc, #184]	; (800c7dc <__mdiff+0x10c>)
 800c724:	4602      	mov	r2, r0
 800c726:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c72a:	e7e5      	b.n	800c6f8 <__mdiff+0x28>
 800c72c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c730:	6926      	ldr	r6, [r4, #16]
 800c732:	60c5      	str	r5, [r0, #12]
 800c734:	f104 0914 	add.w	r9, r4, #20
 800c738:	f108 0514 	add.w	r5, r8, #20
 800c73c:	f100 0e14 	add.w	lr, r0, #20
 800c740:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c744:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c748:	f108 0210 	add.w	r2, r8, #16
 800c74c:	46f2      	mov	sl, lr
 800c74e:	2100      	movs	r1, #0
 800c750:	f859 3b04 	ldr.w	r3, [r9], #4
 800c754:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c758:	fa1f f883 	uxth.w	r8, r3
 800c75c:	fa11 f18b 	uxtah	r1, r1, fp
 800c760:	0c1b      	lsrs	r3, r3, #16
 800c762:	eba1 0808 	sub.w	r8, r1, r8
 800c766:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c76a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c76e:	fa1f f888 	uxth.w	r8, r8
 800c772:	1419      	asrs	r1, r3, #16
 800c774:	454e      	cmp	r6, r9
 800c776:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c77a:	f84a 3b04 	str.w	r3, [sl], #4
 800c77e:	d8e7      	bhi.n	800c750 <__mdiff+0x80>
 800c780:	1b33      	subs	r3, r6, r4
 800c782:	3b15      	subs	r3, #21
 800c784:	f023 0303 	bic.w	r3, r3, #3
 800c788:	3304      	adds	r3, #4
 800c78a:	3415      	adds	r4, #21
 800c78c:	42a6      	cmp	r6, r4
 800c78e:	bf38      	it	cc
 800c790:	2304      	movcc	r3, #4
 800c792:	441d      	add	r5, r3
 800c794:	4473      	add	r3, lr
 800c796:	469e      	mov	lr, r3
 800c798:	462e      	mov	r6, r5
 800c79a:	4566      	cmp	r6, ip
 800c79c:	d30e      	bcc.n	800c7bc <__mdiff+0xec>
 800c79e:	f10c 0203 	add.w	r2, ip, #3
 800c7a2:	1b52      	subs	r2, r2, r5
 800c7a4:	f022 0203 	bic.w	r2, r2, #3
 800c7a8:	3d03      	subs	r5, #3
 800c7aa:	45ac      	cmp	ip, r5
 800c7ac:	bf38      	it	cc
 800c7ae:	2200      	movcc	r2, #0
 800c7b0:	441a      	add	r2, r3
 800c7b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c7b6:	b17b      	cbz	r3, 800c7d8 <__mdiff+0x108>
 800c7b8:	6107      	str	r7, [r0, #16]
 800c7ba:	e7a3      	b.n	800c704 <__mdiff+0x34>
 800c7bc:	f856 8b04 	ldr.w	r8, [r6], #4
 800c7c0:	fa11 f288 	uxtah	r2, r1, r8
 800c7c4:	1414      	asrs	r4, r2, #16
 800c7c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c7ca:	b292      	uxth	r2, r2
 800c7cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c7d0:	f84e 2b04 	str.w	r2, [lr], #4
 800c7d4:	1421      	asrs	r1, r4, #16
 800c7d6:	e7e0      	b.n	800c79a <__mdiff+0xca>
 800c7d8:	3f01      	subs	r7, #1
 800c7da:	e7ea      	b.n	800c7b2 <__mdiff+0xe2>
 800c7dc:	0800db03 	.word	0x0800db03
 800c7e0:	0800dbf0 	.word	0x0800dbf0

0800c7e4 <__ulp>:
 800c7e4:	b082      	sub	sp, #8
 800c7e6:	ed8d 0b00 	vstr	d0, [sp]
 800c7ea:	9b01      	ldr	r3, [sp, #4]
 800c7ec:	4912      	ldr	r1, [pc, #72]	; (800c838 <__ulp+0x54>)
 800c7ee:	4019      	ands	r1, r3
 800c7f0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c7f4:	2900      	cmp	r1, #0
 800c7f6:	dd05      	ble.n	800c804 <__ulp+0x20>
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	460b      	mov	r3, r1
 800c7fc:	ec43 2b10 	vmov	d0, r2, r3
 800c800:	b002      	add	sp, #8
 800c802:	4770      	bx	lr
 800c804:	4249      	negs	r1, r1
 800c806:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c80a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c80e:	f04f 0200 	mov.w	r2, #0
 800c812:	f04f 0300 	mov.w	r3, #0
 800c816:	da04      	bge.n	800c822 <__ulp+0x3e>
 800c818:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c81c:	fa41 f300 	asr.w	r3, r1, r0
 800c820:	e7ec      	b.n	800c7fc <__ulp+0x18>
 800c822:	f1a0 0114 	sub.w	r1, r0, #20
 800c826:	291e      	cmp	r1, #30
 800c828:	bfda      	itte	le
 800c82a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c82e:	fa20 f101 	lsrle.w	r1, r0, r1
 800c832:	2101      	movgt	r1, #1
 800c834:	460a      	mov	r2, r1
 800c836:	e7e1      	b.n	800c7fc <__ulp+0x18>
 800c838:	7ff00000 	.word	0x7ff00000

0800c83c <__b2d>:
 800c83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c83e:	6905      	ldr	r5, [r0, #16]
 800c840:	f100 0714 	add.w	r7, r0, #20
 800c844:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c848:	1f2e      	subs	r6, r5, #4
 800c84a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c84e:	4620      	mov	r0, r4
 800c850:	f7ff fd48 	bl	800c2e4 <__hi0bits>
 800c854:	f1c0 0320 	rsb	r3, r0, #32
 800c858:	280a      	cmp	r0, #10
 800c85a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c8d8 <__b2d+0x9c>
 800c85e:	600b      	str	r3, [r1, #0]
 800c860:	dc14      	bgt.n	800c88c <__b2d+0x50>
 800c862:	f1c0 0e0b 	rsb	lr, r0, #11
 800c866:	fa24 f10e 	lsr.w	r1, r4, lr
 800c86a:	42b7      	cmp	r7, r6
 800c86c:	ea41 030c 	orr.w	r3, r1, ip
 800c870:	bf34      	ite	cc
 800c872:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c876:	2100      	movcs	r1, #0
 800c878:	3015      	adds	r0, #21
 800c87a:	fa04 f000 	lsl.w	r0, r4, r0
 800c87e:	fa21 f10e 	lsr.w	r1, r1, lr
 800c882:	ea40 0201 	orr.w	r2, r0, r1
 800c886:	ec43 2b10 	vmov	d0, r2, r3
 800c88a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c88c:	42b7      	cmp	r7, r6
 800c88e:	bf3a      	itte	cc
 800c890:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c894:	f1a5 0608 	subcc.w	r6, r5, #8
 800c898:	2100      	movcs	r1, #0
 800c89a:	380b      	subs	r0, #11
 800c89c:	d017      	beq.n	800c8ce <__b2d+0x92>
 800c89e:	f1c0 0c20 	rsb	ip, r0, #32
 800c8a2:	fa04 f500 	lsl.w	r5, r4, r0
 800c8a6:	42be      	cmp	r6, r7
 800c8a8:	fa21 f40c 	lsr.w	r4, r1, ip
 800c8ac:	ea45 0504 	orr.w	r5, r5, r4
 800c8b0:	bf8c      	ite	hi
 800c8b2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c8b6:	2400      	movls	r4, #0
 800c8b8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c8bc:	fa01 f000 	lsl.w	r0, r1, r0
 800c8c0:	fa24 f40c 	lsr.w	r4, r4, ip
 800c8c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c8c8:	ea40 0204 	orr.w	r2, r0, r4
 800c8cc:	e7db      	b.n	800c886 <__b2d+0x4a>
 800c8ce:	ea44 030c 	orr.w	r3, r4, ip
 800c8d2:	460a      	mov	r2, r1
 800c8d4:	e7d7      	b.n	800c886 <__b2d+0x4a>
 800c8d6:	bf00      	nop
 800c8d8:	3ff00000 	.word	0x3ff00000

0800c8dc <__d2b>:
 800c8dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8e0:	4689      	mov	r9, r1
 800c8e2:	2101      	movs	r1, #1
 800c8e4:	ec57 6b10 	vmov	r6, r7, d0
 800c8e8:	4690      	mov	r8, r2
 800c8ea:	f7ff fc09 	bl	800c100 <_Balloc>
 800c8ee:	4604      	mov	r4, r0
 800c8f0:	b930      	cbnz	r0, 800c900 <__d2b+0x24>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	4b25      	ldr	r3, [pc, #148]	; (800c98c <__d2b+0xb0>)
 800c8f6:	4826      	ldr	r0, [pc, #152]	; (800c990 <__d2b+0xb4>)
 800c8f8:	f240 310a 	movw	r1, #778	; 0x30a
 800c8fc:	f7fd ff80 	bl	800a800 <__assert_func>
 800c900:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c904:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c908:	bb35      	cbnz	r5, 800c958 <__d2b+0x7c>
 800c90a:	2e00      	cmp	r6, #0
 800c90c:	9301      	str	r3, [sp, #4]
 800c90e:	d028      	beq.n	800c962 <__d2b+0x86>
 800c910:	4668      	mov	r0, sp
 800c912:	9600      	str	r6, [sp, #0]
 800c914:	f7ff fd06 	bl	800c324 <__lo0bits>
 800c918:	9900      	ldr	r1, [sp, #0]
 800c91a:	b300      	cbz	r0, 800c95e <__d2b+0x82>
 800c91c:	9a01      	ldr	r2, [sp, #4]
 800c91e:	f1c0 0320 	rsb	r3, r0, #32
 800c922:	fa02 f303 	lsl.w	r3, r2, r3
 800c926:	430b      	orrs	r3, r1
 800c928:	40c2      	lsrs	r2, r0
 800c92a:	6163      	str	r3, [r4, #20]
 800c92c:	9201      	str	r2, [sp, #4]
 800c92e:	9b01      	ldr	r3, [sp, #4]
 800c930:	61a3      	str	r3, [r4, #24]
 800c932:	2b00      	cmp	r3, #0
 800c934:	bf14      	ite	ne
 800c936:	2202      	movne	r2, #2
 800c938:	2201      	moveq	r2, #1
 800c93a:	6122      	str	r2, [r4, #16]
 800c93c:	b1d5      	cbz	r5, 800c974 <__d2b+0x98>
 800c93e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c942:	4405      	add	r5, r0
 800c944:	f8c9 5000 	str.w	r5, [r9]
 800c948:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c94c:	f8c8 0000 	str.w	r0, [r8]
 800c950:	4620      	mov	r0, r4
 800c952:	b003      	add	sp, #12
 800c954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c958:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c95c:	e7d5      	b.n	800c90a <__d2b+0x2e>
 800c95e:	6161      	str	r1, [r4, #20]
 800c960:	e7e5      	b.n	800c92e <__d2b+0x52>
 800c962:	a801      	add	r0, sp, #4
 800c964:	f7ff fcde 	bl	800c324 <__lo0bits>
 800c968:	9b01      	ldr	r3, [sp, #4]
 800c96a:	6163      	str	r3, [r4, #20]
 800c96c:	2201      	movs	r2, #1
 800c96e:	6122      	str	r2, [r4, #16]
 800c970:	3020      	adds	r0, #32
 800c972:	e7e3      	b.n	800c93c <__d2b+0x60>
 800c974:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c978:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c97c:	f8c9 0000 	str.w	r0, [r9]
 800c980:	6918      	ldr	r0, [r3, #16]
 800c982:	f7ff fcaf 	bl	800c2e4 <__hi0bits>
 800c986:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c98a:	e7df      	b.n	800c94c <__d2b+0x70>
 800c98c:	0800db03 	.word	0x0800db03
 800c990:	0800dbf0 	.word	0x0800dbf0

0800c994 <__ratio>:
 800c994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c998:	4688      	mov	r8, r1
 800c99a:	4669      	mov	r1, sp
 800c99c:	4681      	mov	r9, r0
 800c99e:	f7ff ff4d 	bl	800c83c <__b2d>
 800c9a2:	a901      	add	r1, sp, #4
 800c9a4:	4640      	mov	r0, r8
 800c9a6:	ec55 4b10 	vmov	r4, r5, d0
 800c9aa:	f7ff ff47 	bl	800c83c <__b2d>
 800c9ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c9b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c9b6:	eba3 0c02 	sub.w	ip, r3, r2
 800c9ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c9be:	1a9b      	subs	r3, r3, r2
 800c9c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c9c4:	ec51 0b10 	vmov	r0, r1, d0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	bfd6      	itet	le
 800c9cc:	460a      	movle	r2, r1
 800c9ce:	462a      	movgt	r2, r5
 800c9d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c9d4:	468b      	mov	fp, r1
 800c9d6:	462f      	mov	r7, r5
 800c9d8:	bfd4      	ite	le
 800c9da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c9de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c9e2:	4620      	mov	r0, r4
 800c9e4:	ee10 2a10 	vmov	r2, s0
 800c9e8:	465b      	mov	r3, fp
 800c9ea:	4639      	mov	r1, r7
 800c9ec:	f7f3 ff36 	bl	800085c <__aeabi_ddiv>
 800c9f0:	ec41 0b10 	vmov	d0, r0, r1
 800c9f4:	b003      	add	sp, #12
 800c9f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c9fa <__copybits>:
 800c9fa:	3901      	subs	r1, #1
 800c9fc:	b570      	push	{r4, r5, r6, lr}
 800c9fe:	1149      	asrs	r1, r1, #5
 800ca00:	6914      	ldr	r4, [r2, #16]
 800ca02:	3101      	adds	r1, #1
 800ca04:	f102 0314 	add.w	r3, r2, #20
 800ca08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ca0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ca10:	1f05      	subs	r5, r0, #4
 800ca12:	42a3      	cmp	r3, r4
 800ca14:	d30c      	bcc.n	800ca30 <__copybits+0x36>
 800ca16:	1aa3      	subs	r3, r4, r2
 800ca18:	3b11      	subs	r3, #17
 800ca1a:	f023 0303 	bic.w	r3, r3, #3
 800ca1e:	3211      	adds	r2, #17
 800ca20:	42a2      	cmp	r2, r4
 800ca22:	bf88      	it	hi
 800ca24:	2300      	movhi	r3, #0
 800ca26:	4418      	add	r0, r3
 800ca28:	2300      	movs	r3, #0
 800ca2a:	4288      	cmp	r0, r1
 800ca2c:	d305      	bcc.n	800ca3a <__copybits+0x40>
 800ca2e:	bd70      	pop	{r4, r5, r6, pc}
 800ca30:	f853 6b04 	ldr.w	r6, [r3], #4
 800ca34:	f845 6f04 	str.w	r6, [r5, #4]!
 800ca38:	e7eb      	b.n	800ca12 <__copybits+0x18>
 800ca3a:	f840 3b04 	str.w	r3, [r0], #4
 800ca3e:	e7f4      	b.n	800ca2a <__copybits+0x30>

0800ca40 <__any_on>:
 800ca40:	f100 0214 	add.w	r2, r0, #20
 800ca44:	6900      	ldr	r0, [r0, #16]
 800ca46:	114b      	asrs	r3, r1, #5
 800ca48:	4298      	cmp	r0, r3
 800ca4a:	b510      	push	{r4, lr}
 800ca4c:	db11      	blt.n	800ca72 <__any_on+0x32>
 800ca4e:	dd0a      	ble.n	800ca66 <__any_on+0x26>
 800ca50:	f011 011f 	ands.w	r1, r1, #31
 800ca54:	d007      	beq.n	800ca66 <__any_on+0x26>
 800ca56:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ca5a:	fa24 f001 	lsr.w	r0, r4, r1
 800ca5e:	fa00 f101 	lsl.w	r1, r0, r1
 800ca62:	428c      	cmp	r4, r1
 800ca64:	d10b      	bne.n	800ca7e <__any_on+0x3e>
 800ca66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d803      	bhi.n	800ca76 <__any_on+0x36>
 800ca6e:	2000      	movs	r0, #0
 800ca70:	bd10      	pop	{r4, pc}
 800ca72:	4603      	mov	r3, r0
 800ca74:	e7f7      	b.n	800ca66 <__any_on+0x26>
 800ca76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca7a:	2900      	cmp	r1, #0
 800ca7c:	d0f5      	beq.n	800ca6a <__any_on+0x2a>
 800ca7e:	2001      	movs	r0, #1
 800ca80:	e7f6      	b.n	800ca70 <__any_on+0x30>

0800ca82 <_calloc_r>:
 800ca82:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca84:	fba1 2402 	umull	r2, r4, r1, r2
 800ca88:	b94c      	cbnz	r4, 800ca9e <_calloc_r+0x1c>
 800ca8a:	4611      	mov	r1, r2
 800ca8c:	9201      	str	r2, [sp, #4]
 800ca8e:	f7fc f8d5 	bl	8008c3c <_malloc_r>
 800ca92:	9a01      	ldr	r2, [sp, #4]
 800ca94:	4605      	mov	r5, r0
 800ca96:	b930      	cbnz	r0, 800caa6 <_calloc_r+0x24>
 800ca98:	4628      	mov	r0, r5
 800ca9a:	b003      	add	sp, #12
 800ca9c:	bd30      	pop	{r4, r5, pc}
 800ca9e:	220c      	movs	r2, #12
 800caa0:	6002      	str	r2, [r0, #0]
 800caa2:	2500      	movs	r5, #0
 800caa4:	e7f8      	b.n	800ca98 <_calloc_r+0x16>
 800caa6:	4621      	mov	r1, r4
 800caa8:	f7fc f854 	bl	8008b54 <memset>
 800caac:	e7f4      	b.n	800ca98 <_calloc_r+0x16>

0800caae <__ssputs_r>:
 800caae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cab2:	688e      	ldr	r6, [r1, #8]
 800cab4:	429e      	cmp	r6, r3
 800cab6:	4682      	mov	sl, r0
 800cab8:	460c      	mov	r4, r1
 800caba:	4690      	mov	r8, r2
 800cabc:	461f      	mov	r7, r3
 800cabe:	d838      	bhi.n	800cb32 <__ssputs_r+0x84>
 800cac0:	898a      	ldrh	r2, [r1, #12]
 800cac2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cac6:	d032      	beq.n	800cb2e <__ssputs_r+0x80>
 800cac8:	6825      	ldr	r5, [r4, #0]
 800caca:	6909      	ldr	r1, [r1, #16]
 800cacc:	eba5 0901 	sub.w	r9, r5, r1
 800cad0:	6965      	ldr	r5, [r4, #20]
 800cad2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cad6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cada:	3301      	adds	r3, #1
 800cadc:	444b      	add	r3, r9
 800cade:	106d      	asrs	r5, r5, #1
 800cae0:	429d      	cmp	r5, r3
 800cae2:	bf38      	it	cc
 800cae4:	461d      	movcc	r5, r3
 800cae6:	0553      	lsls	r3, r2, #21
 800cae8:	d531      	bpl.n	800cb4e <__ssputs_r+0xa0>
 800caea:	4629      	mov	r1, r5
 800caec:	f7fc f8a6 	bl	8008c3c <_malloc_r>
 800caf0:	4606      	mov	r6, r0
 800caf2:	b950      	cbnz	r0, 800cb0a <__ssputs_r+0x5c>
 800caf4:	230c      	movs	r3, #12
 800caf6:	f8ca 3000 	str.w	r3, [sl]
 800cafa:	89a3      	ldrh	r3, [r4, #12]
 800cafc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb00:	81a3      	strh	r3, [r4, #12]
 800cb02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb0a:	6921      	ldr	r1, [r4, #16]
 800cb0c:	464a      	mov	r2, r9
 800cb0e:	f7fc f813 	bl	8008b38 <memcpy>
 800cb12:	89a3      	ldrh	r3, [r4, #12]
 800cb14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cb18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb1c:	81a3      	strh	r3, [r4, #12]
 800cb1e:	6126      	str	r6, [r4, #16]
 800cb20:	6165      	str	r5, [r4, #20]
 800cb22:	444e      	add	r6, r9
 800cb24:	eba5 0509 	sub.w	r5, r5, r9
 800cb28:	6026      	str	r6, [r4, #0]
 800cb2a:	60a5      	str	r5, [r4, #8]
 800cb2c:	463e      	mov	r6, r7
 800cb2e:	42be      	cmp	r6, r7
 800cb30:	d900      	bls.n	800cb34 <__ssputs_r+0x86>
 800cb32:	463e      	mov	r6, r7
 800cb34:	6820      	ldr	r0, [r4, #0]
 800cb36:	4632      	mov	r2, r6
 800cb38:	4641      	mov	r1, r8
 800cb3a:	f000 fac5 	bl	800d0c8 <memmove>
 800cb3e:	68a3      	ldr	r3, [r4, #8]
 800cb40:	1b9b      	subs	r3, r3, r6
 800cb42:	60a3      	str	r3, [r4, #8]
 800cb44:	6823      	ldr	r3, [r4, #0]
 800cb46:	4433      	add	r3, r6
 800cb48:	6023      	str	r3, [r4, #0]
 800cb4a:	2000      	movs	r0, #0
 800cb4c:	e7db      	b.n	800cb06 <__ssputs_r+0x58>
 800cb4e:	462a      	mov	r2, r5
 800cb50:	f000 fad4 	bl	800d0fc <_realloc_r>
 800cb54:	4606      	mov	r6, r0
 800cb56:	2800      	cmp	r0, #0
 800cb58:	d1e1      	bne.n	800cb1e <__ssputs_r+0x70>
 800cb5a:	6921      	ldr	r1, [r4, #16]
 800cb5c:	4650      	mov	r0, sl
 800cb5e:	f7fc f801 	bl	8008b64 <_free_r>
 800cb62:	e7c7      	b.n	800caf4 <__ssputs_r+0x46>

0800cb64 <_svfiprintf_r>:
 800cb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb68:	4698      	mov	r8, r3
 800cb6a:	898b      	ldrh	r3, [r1, #12]
 800cb6c:	061b      	lsls	r3, r3, #24
 800cb6e:	b09d      	sub	sp, #116	; 0x74
 800cb70:	4607      	mov	r7, r0
 800cb72:	460d      	mov	r5, r1
 800cb74:	4614      	mov	r4, r2
 800cb76:	d50e      	bpl.n	800cb96 <_svfiprintf_r+0x32>
 800cb78:	690b      	ldr	r3, [r1, #16]
 800cb7a:	b963      	cbnz	r3, 800cb96 <_svfiprintf_r+0x32>
 800cb7c:	2140      	movs	r1, #64	; 0x40
 800cb7e:	f7fc f85d 	bl	8008c3c <_malloc_r>
 800cb82:	6028      	str	r0, [r5, #0]
 800cb84:	6128      	str	r0, [r5, #16]
 800cb86:	b920      	cbnz	r0, 800cb92 <_svfiprintf_r+0x2e>
 800cb88:	230c      	movs	r3, #12
 800cb8a:	603b      	str	r3, [r7, #0]
 800cb8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb90:	e0d1      	b.n	800cd36 <_svfiprintf_r+0x1d2>
 800cb92:	2340      	movs	r3, #64	; 0x40
 800cb94:	616b      	str	r3, [r5, #20]
 800cb96:	2300      	movs	r3, #0
 800cb98:	9309      	str	r3, [sp, #36]	; 0x24
 800cb9a:	2320      	movs	r3, #32
 800cb9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cba0:	f8cd 800c 	str.w	r8, [sp, #12]
 800cba4:	2330      	movs	r3, #48	; 0x30
 800cba6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cd50 <_svfiprintf_r+0x1ec>
 800cbaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cbae:	f04f 0901 	mov.w	r9, #1
 800cbb2:	4623      	mov	r3, r4
 800cbb4:	469a      	mov	sl, r3
 800cbb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbba:	b10a      	cbz	r2, 800cbc0 <_svfiprintf_r+0x5c>
 800cbbc:	2a25      	cmp	r2, #37	; 0x25
 800cbbe:	d1f9      	bne.n	800cbb4 <_svfiprintf_r+0x50>
 800cbc0:	ebba 0b04 	subs.w	fp, sl, r4
 800cbc4:	d00b      	beq.n	800cbde <_svfiprintf_r+0x7a>
 800cbc6:	465b      	mov	r3, fp
 800cbc8:	4622      	mov	r2, r4
 800cbca:	4629      	mov	r1, r5
 800cbcc:	4638      	mov	r0, r7
 800cbce:	f7ff ff6e 	bl	800caae <__ssputs_r>
 800cbd2:	3001      	adds	r0, #1
 800cbd4:	f000 80aa 	beq.w	800cd2c <_svfiprintf_r+0x1c8>
 800cbd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cbda:	445a      	add	r2, fp
 800cbdc:	9209      	str	r2, [sp, #36]	; 0x24
 800cbde:	f89a 3000 	ldrb.w	r3, [sl]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	f000 80a2 	beq.w	800cd2c <_svfiprintf_r+0x1c8>
 800cbe8:	2300      	movs	r3, #0
 800cbea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbf2:	f10a 0a01 	add.w	sl, sl, #1
 800cbf6:	9304      	str	r3, [sp, #16]
 800cbf8:	9307      	str	r3, [sp, #28]
 800cbfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cbfe:	931a      	str	r3, [sp, #104]	; 0x68
 800cc00:	4654      	mov	r4, sl
 800cc02:	2205      	movs	r2, #5
 800cc04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc08:	4851      	ldr	r0, [pc, #324]	; (800cd50 <_svfiprintf_r+0x1ec>)
 800cc0a:	f7f3 faf1 	bl	80001f0 <memchr>
 800cc0e:	9a04      	ldr	r2, [sp, #16]
 800cc10:	b9d8      	cbnz	r0, 800cc4a <_svfiprintf_r+0xe6>
 800cc12:	06d0      	lsls	r0, r2, #27
 800cc14:	bf44      	itt	mi
 800cc16:	2320      	movmi	r3, #32
 800cc18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc1c:	0711      	lsls	r1, r2, #28
 800cc1e:	bf44      	itt	mi
 800cc20:	232b      	movmi	r3, #43	; 0x2b
 800cc22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc26:	f89a 3000 	ldrb.w	r3, [sl]
 800cc2a:	2b2a      	cmp	r3, #42	; 0x2a
 800cc2c:	d015      	beq.n	800cc5a <_svfiprintf_r+0xf6>
 800cc2e:	9a07      	ldr	r2, [sp, #28]
 800cc30:	4654      	mov	r4, sl
 800cc32:	2000      	movs	r0, #0
 800cc34:	f04f 0c0a 	mov.w	ip, #10
 800cc38:	4621      	mov	r1, r4
 800cc3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc3e:	3b30      	subs	r3, #48	; 0x30
 800cc40:	2b09      	cmp	r3, #9
 800cc42:	d94e      	bls.n	800cce2 <_svfiprintf_r+0x17e>
 800cc44:	b1b0      	cbz	r0, 800cc74 <_svfiprintf_r+0x110>
 800cc46:	9207      	str	r2, [sp, #28]
 800cc48:	e014      	b.n	800cc74 <_svfiprintf_r+0x110>
 800cc4a:	eba0 0308 	sub.w	r3, r0, r8
 800cc4e:	fa09 f303 	lsl.w	r3, r9, r3
 800cc52:	4313      	orrs	r3, r2
 800cc54:	9304      	str	r3, [sp, #16]
 800cc56:	46a2      	mov	sl, r4
 800cc58:	e7d2      	b.n	800cc00 <_svfiprintf_r+0x9c>
 800cc5a:	9b03      	ldr	r3, [sp, #12]
 800cc5c:	1d19      	adds	r1, r3, #4
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	9103      	str	r1, [sp, #12]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	bfbb      	ittet	lt
 800cc66:	425b      	neglt	r3, r3
 800cc68:	f042 0202 	orrlt.w	r2, r2, #2
 800cc6c:	9307      	strge	r3, [sp, #28]
 800cc6e:	9307      	strlt	r3, [sp, #28]
 800cc70:	bfb8      	it	lt
 800cc72:	9204      	strlt	r2, [sp, #16]
 800cc74:	7823      	ldrb	r3, [r4, #0]
 800cc76:	2b2e      	cmp	r3, #46	; 0x2e
 800cc78:	d10c      	bne.n	800cc94 <_svfiprintf_r+0x130>
 800cc7a:	7863      	ldrb	r3, [r4, #1]
 800cc7c:	2b2a      	cmp	r3, #42	; 0x2a
 800cc7e:	d135      	bne.n	800ccec <_svfiprintf_r+0x188>
 800cc80:	9b03      	ldr	r3, [sp, #12]
 800cc82:	1d1a      	adds	r2, r3, #4
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	9203      	str	r2, [sp, #12]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	bfb8      	it	lt
 800cc8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cc90:	3402      	adds	r4, #2
 800cc92:	9305      	str	r3, [sp, #20]
 800cc94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cd60 <_svfiprintf_r+0x1fc>
 800cc98:	7821      	ldrb	r1, [r4, #0]
 800cc9a:	2203      	movs	r2, #3
 800cc9c:	4650      	mov	r0, sl
 800cc9e:	f7f3 faa7 	bl	80001f0 <memchr>
 800cca2:	b140      	cbz	r0, 800ccb6 <_svfiprintf_r+0x152>
 800cca4:	2340      	movs	r3, #64	; 0x40
 800cca6:	eba0 000a 	sub.w	r0, r0, sl
 800ccaa:	fa03 f000 	lsl.w	r0, r3, r0
 800ccae:	9b04      	ldr	r3, [sp, #16]
 800ccb0:	4303      	orrs	r3, r0
 800ccb2:	3401      	adds	r4, #1
 800ccb4:	9304      	str	r3, [sp, #16]
 800ccb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccba:	4826      	ldr	r0, [pc, #152]	; (800cd54 <_svfiprintf_r+0x1f0>)
 800ccbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ccc0:	2206      	movs	r2, #6
 800ccc2:	f7f3 fa95 	bl	80001f0 <memchr>
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	d038      	beq.n	800cd3c <_svfiprintf_r+0x1d8>
 800ccca:	4b23      	ldr	r3, [pc, #140]	; (800cd58 <_svfiprintf_r+0x1f4>)
 800cccc:	bb1b      	cbnz	r3, 800cd16 <_svfiprintf_r+0x1b2>
 800ccce:	9b03      	ldr	r3, [sp, #12]
 800ccd0:	3307      	adds	r3, #7
 800ccd2:	f023 0307 	bic.w	r3, r3, #7
 800ccd6:	3308      	adds	r3, #8
 800ccd8:	9303      	str	r3, [sp, #12]
 800ccda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccdc:	4433      	add	r3, r6
 800ccde:	9309      	str	r3, [sp, #36]	; 0x24
 800cce0:	e767      	b.n	800cbb2 <_svfiprintf_r+0x4e>
 800cce2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cce6:	460c      	mov	r4, r1
 800cce8:	2001      	movs	r0, #1
 800ccea:	e7a5      	b.n	800cc38 <_svfiprintf_r+0xd4>
 800ccec:	2300      	movs	r3, #0
 800ccee:	3401      	adds	r4, #1
 800ccf0:	9305      	str	r3, [sp, #20]
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	f04f 0c0a 	mov.w	ip, #10
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccfe:	3a30      	subs	r2, #48	; 0x30
 800cd00:	2a09      	cmp	r2, #9
 800cd02:	d903      	bls.n	800cd0c <_svfiprintf_r+0x1a8>
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d0c5      	beq.n	800cc94 <_svfiprintf_r+0x130>
 800cd08:	9105      	str	r1, [sp, #20]
 800cd0a:	e7c3      	b.n	800cc94 <_svfiprintf_r+0x130>
 800cd0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd10:	4604      	mov	r4, r0
 800cd12:	2301      	movs	r3, #1
 800cd14:	e7f0      	b.n	800ccf8 <_svfiprintf_r+0x194>
 800cd16:	ab03      	add	r3, sp, #12
 800cd18:	9300      	str	r3, [sp, #0]
 800cd1a:	462a      	mov	r2, r5
 800cd1c:	4b0f      	ldr	r3, [pc, #60]	; (800cd5c <_svfiprintf_r+0x1f8>)
 800cd1e:	a904      	add	r1, sp, #16
 800cd20:	4638      	mov	r0, r7
 800cd22:	f7fc f89f 	bl	8008e64 <_printf_float>
 800cd26:	1c42      	adds	r2, r0, #1
 800cd28:	4606      	mov	r6, r0
 800cd2a:	d1d6      	bne.n	800ccda <_svfiprintf_r+0x176>
 800cd2c:	89ab      	ldrh	r3, [r5, #12]
 800cd2e:	065b      	lsls	r3, r3, #25
 800cd30:	f53f af2c 	bmi.w	800cb8c <_svfiprintf_r+0x28>
 800cd34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd36:	b01d      	add	sp, #116	; 0x74
 800cd38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd3c:	ab03      	add	r3, sp, #12
 800cd3e:	9300      	str	r3, [sp, #0]
 800cd40:	462a      	mov	r2, r5
 800cd42:	4b06      	ldr	r3, [pc, #24]	; (800cd5c <_svfiprintf_r+0x1f8>)
 800cd44:	a904      	add	r1, sp, #16
 800cd46:	4638      	mov	r0, r7
 800cd48:	f7fc fb30 	bl	80093ac <_printf_i>
 800cd4c:	e7eb      	b.n	800cd26 <_svfiprintf_r+0x1c2>
 800cd4e:	bf00      	nop
 800cd50:	0800dd4c 	.word	0x0800dd4c
 800cd54:	0800dd56 	.word	0x0800dd56
 800cd58:	08008e65 	.word	0x08008e65
 800cd5c:	0800caaf 	.word	0x0800caaf
 800cd60:	0800dd52 	.word	0x0800dd52

0800cd64 <__sfputc_r>:
 800cd64:	6893      	ldr	r3, [r2, #8]
 800cd66:	3b01      	subs	r3, #1
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	b410      	push	{r4}
 800cd6c:	6093      	str	r3, [r2, #8]
 800cd6e:	da08      	bge.n	800cd82 <__sfputc_r+0x1e>
 800cd70:	6994      	ldr	r4, [r2, #24]
 800cd72:	42a3      	cmp	r3, r4
 800cd74:	db01      	blt.n	800cd7a <__sfputc_r+0x16>
 800cd76:	290a      	cmp	r1, #10
 800cd78:	d103      	bne.n	800cd82 <__sfputc_r+0x1e>
 800cd7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd7e:	f7fd bc6d 	b.w	800a65c <__swbuf_r>
 800cd82:	6813      	ldr	r3, [r2, #0]
 800cd84:	1c58      	adds	r0, r3, #1
 800cd86:	6010      	str	r0, [r2, #0]
 800cd88:	7019      	strb	r1, [r3, #0]
 800cd8a:	4608      	mov	r0, r1
 800cd8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd90:	4770      	bx	lr

0800cd92 <__sfputs_r>:
 800cd92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd94:	4606      	mov	r6, r0
 800cd96:	460f      	mov	r7, r1
 800cd98:	4614      	mov	r4, r2
 800cd9a:	18d5      	adds	r5, r2, r3
 800cd9c:	42ac      	cmp	r4, r5
 800cd9e:	d101      	bne.n	800cda4 <__sfputs_r+0x12>
 800cda0:	2000      	movs	r0, #0
 800cda2:	e007      	b.n	800cdb4 <__sfputs_r+0x22>
 800cda4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cda8:	463a      	mov	r2, r7
 800cdaa:	4630      	mov	r0, r6
 800cdac:	f7ff ffda 	bl	800cd64 <__sfputc_r>
 800cdb0:	1c43      	adds	r3, r0, #1
 800cdb2:	d1f3      	bne.n	800cd9c <__sfputs_r+0xa>
 800cdb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cdb8 <_vfiprintf_r>:
 800cdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdbc:	460d      	mov	r5, r1
 800cdbe:	b09d      	sub	sp, #116	; 0x74
 800cdc0:	4614      	mov	r4, r2
 800cdc2:	4698      	mov	r8, r3
 800cdc4:	4606      	mov	r6, r0
 800cdc6:	b118      	cbz	r0, 800cdd0 <_vfiprintf_r+0x18>
 800cdc8:	6983      	ldr	r3, [r0, #24]
 800cdca:	b90b      	cbnz	r3, 800cdd0 <_vfiprintf_r+0x18>
 800cdcc:	f7fe fcdc 	bl	800b788 <__sinit>
 800cdd0:	4b89      	ldr	r3, [pc, #548]	; (800cff8 <_vfiprintf_r+0x240>)
 800cdd2:	429d      	cmp	r5, r3
 800cdd4:	d11b      	bne.n	800ce0e <_vfiprintf_r+0x56>
 800cdd6:	6875      	ldr	r5, [r6, #4]
 800cdd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cdda:	07d9      	lsls	r1, r3, #31
 800cddc:	d405      	bmi.n	800cdea <_vfiprintf_r+0x32>
 800cdde:	89ab      	ldrh	r3, [r5, #12]
 800cde0:	059a      	lsls	r2, r3, #22
 800cde2:	d402      	bmi.n	800cdea <_vfiprintf_r+0x32>
 800cde4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cde6:	f7ff f8f2 	bl	800bfce <__retarget_lock_acquire_recursive>
 800cdea:	89ab      	ldrh	r3, [r5, #12]
 800cdec:	071b      	lsls	r3, r3, #28
 800cdee:	d501      	bpl.n	800cdf4 <_vfiprintf_r+0x3c>
 800cdf0:	692b      	ldr	r3, [r5, #16]
 800cdf2:	b9eb      	cbnz	r3, 800ce30 <_vfiprintf_r+0x78>
 800cdf4:	4629      	mov	r1, r5
 800cdf6:	4630      	mov	r0, r6
 800cdf8:	f7fd fc94 	bl	800a724 <__swsetup_r>
 800cdfc:	b1c0      	cbz	r0, 800ce30 <_vfiprintf_r+0x78>
 800cdfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce00:	07dc      	lsls	r4, r3, #31
 800ce02:	d50e      	bpl.n	800ce22 <_vfiprintf_r+0x6a>
 800ce04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ce08:	b01d      	add	sp, #116	; 0x74
 800ce0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce0e:	4b7b      	ldr	r3, [pc, #492]	; (800cffc <_vfiprintf_r+0x244>)
 800ce10:	429d      	cmp	r5, r3
 800ce12:	d101      	bne.n	800ce18 <_vfiprintf_r+0x60>
 800ce14:	68b5      	ldr	r5, [r6, #8]
 800ce16:	e7df      	b.n	800cdd8 <_vfiprintf_r+0x20>
 800ce18:	4b79      	ldr	r3, [pc, #484]	; (800d000 <_vfiprintf_r+0x248>)
 800ce1a:	429d      	cmp	r5, r3
 800ce1c:	bf08      	it	eq
 800ce1e:	68f5      	ldreq	r5, [r6, #12]
 800ce20:	e7da      	b.n	800cdd8 <_vfiprintf_r+0x20>
 800ce22:	89ab      	ldrh	r3, [r5, #12]
 800ce24:	0598      	lsls	r0, r3, #22
 800ce26:	d4ed      	bmi.n	800ce04 <_vfiprintf_r+0x4c>
 800ce28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce2a:	f7ff f8d1 	bl	800bfd0 <__retarget_lock_release_recursive>
 800ce2e:	e7e9      	b.n	800ce04 <_vfiprintf_r+0x4c>
 800ce30:	2300      	movs	r3, #0
 800ce32:	9309      	str	r3, [sp, #36]	; 0x24
 800ce34:	2320      	movs	r3, #32
 800ce36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce3e:	2330      	movs	r3, #48	; 0x30
 800ce40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d004 <_vfiprintf_r+0x24c>
 800ce44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce48:	f04f 0901 	mov.w	r9, #1
 800ce4c:	4623      	mov	r3, r4
 800ce4e:	469a      	mov	sl, r3
 800ce50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce54:	b10a      	cbz	r2, 800ce5a <_vfiprintf_r+0xa2>
 800ce56:	2a25      	cmp	r2, #37	; 0x25
 800ce58:	d1f9      	bne.n	800ce4e <_vfiprintf_r+0x96>
 800ce5a:	ebba 0b04 	subs.w	fp, sl, r4
 800ce5e:	d00b      	beq.n	800ce78 <_vfiprintf_r+0xc0>
 800ce60:	465b      	mov	r3, fp
 800ce62:	4622      	mov	r2, r4
 800ce64:	4629      	mov	r1, r5
 800ce66:	4630      	mov	r0, r6
 800ce68:	f7ff ff93 	bl	800cd92 <__sfputs_r>
 800ce6c:	3001      	adds	r0, #1
 800ce6e:	f000 80aa 	beq.w	800cfc6 <_vfiprintf_r+0x20e>
 800ce72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce74:	445a      	add	r2, fp
 800ce76:	9209      	str	r2, [sp, #36]	; 0x24
 800ce78:	f89a 3000 	ldrb.w	r3, [sl]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	f000 80a2 	beq.w	800cfc6 <_vfiprintf_r+0x20e>
 800ce82:	2300      	movs	r3, #0
 800ce84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce8c:	f10a 0a01 	add.w	sl, sl, #1
 800ce90:	9304      	str	r3, [sp, #16]
 800ce92:	9307      	str	r3, [sp, #28]
 800ce94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce98:	931a      	str	r3, [sp, #104]	; 0x68
 800ce9a:	4654      	mov	r4, sl
 800ce9c:	2205      	movs	r2, #5
 800ce9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cea2:	4858      	ldr	r0, [pc, #352]	; (800d004 <_vfiprintf_r+0x24c>)
 800cea4:	f7f3 f9a4 	bl	80001f0 <memchr>
 800cea8:	9a04      	ldr	r2, [sp, #16]
 800ceaa:	b9d8      	cbnz	r0, 800cee4 <_vfiprintf_r+0x12c>
 800ceac:	06d1      	lsls	r1, r2, #27
 800ceae:	bf44      	itt	mi
 800ceb0:	2320      	movmi	r3, #32
 800ceb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ceb6:	0713      	lsls	r3, r2, #28
 800ceb8:	bf44      	itt	mi
 800ceba:	232b      	movmi	r3, #43	; 0x2b
 800cebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cec0:	f89a 3000 	ldrb.w	r3, [sl]
 800cec4:	2b2a      	cmp	r3, #42	; 0x2a
 800cec6:	d015      	beq.n	800cef4 <_vfiprintf_r+0x13c>
 800cec8:	9a07      	ldr	r2, [sp, #28]
 800ceca:	4654      	mov	r4, sl
 800cecc:	2000      	movs	r0, #0
 800cece:	f04f 0c0a 	mov.w	ip, #10
 800ced2:	4621      	mov	r1, r4
 800ced4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ced8:	3b30      	subs	r3, #48	; 0x30
 800ceda:	2b09      	cmp	r3, #9
 800cedc:	d94e      	bls.n	800cf7c <_vfiprintf_r+0x1c4>
 800cede:	b1b0      	cbz	r0, 800cf0e <_vfiprintf_r+0x156>
 800cee0:	9207      	str	r2, [sp, #28]
 800cee2:	e014      	b.n	800cf0e <_vfiprintf_r+0x156>
 800cee4:	eba0 0308 	sub.w	r3, r0, r8
 800cee8:	fa09 f303 	lsl.w	r3, r9, r3
 800ceec:	4313      	orrs	r3, r2
 800ceee:	9304      	str	r3, [sp, #16]
 800cef0:	46a2      	mov	sl, r4
 800cef2:	e7d2      	b.n	800ce9a <_vfiprintf_r+0xe2>
 800cef4:	9b03      	ldr	r3, [sp, #12]
 800cef6:	1d19      	adds	r1, r3, #4
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	9103      	str	r1, [sp, #12]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	bfbb      	ittet	lt
 800cf00:	425b      	neglt	r3, r3
 800cf02:	f042 0202 	orrlt.w	r2, r2, #2
 800cf06:	9307      	strge	r3, [sp, #28]
 800cf08:	9307      	strlt	r3, [sp, #28]
 800cf0a:	bfb8      	it	lt
 800cf0c:	9204      	strlt	r2, [sp, #16]
 800cf0e:	7823      	ldrb	r3, [r4, #0]
 800cf10:	2b2e      	cmp	r3, #46	; 0x2e
 800cf12:	d10c      	bne.n	800cf2e <_vfiprintf_r+0x176>
 800cf14:	7863      	ldrb	r3, [r4, #1]
 800cf16:	2b2a      	cmp	r3, #42	; 0x2a
 800cf18:	d135      	bne.n	800cf86 <_vfiprintf_r+0x1ce>
 800cf1a:	9b03      	ldr	r3, [sp, #12]
 800cf1c:	1d1a      	adds	r2, r3, #4
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	9203      	str	r2, [sp, #12]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	bfb8      	it	lt
 800cf26:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cf2a:	3402      	adds	r4, #2
 800cf2c:	9305      	str	r3, [sp, #20]
 800cf2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d014 <_vfiprintf_r+0x25c>
 800cf32:	7821      	ldrb	r1, [r4, #0]
 800cf34:	2203      	movs	r2, #3
 800cf36:	4650      	mov	r0, sl
 800cf38:	f7f3 f95a 	bl	80001f0 <memchr>
 800cf3c:	b140      	cbz	r0, 800cf50 <_vfiprintf_r+0x198>
 800cf3e:	2340      	movs	r3, #64	; 0x40
 800cf40:	eba0 000a 	sub.w	r0, r0, sl
 800cf44:	fa03 f000 	lsl.w	r0, r3, r0
 800cf48:	9b04      	ldr	r3, [sp, #16]
 800cf4a:	4303      	orrs	r3, r0
 800cf4c:	3401      	adds	r4, #1
 800cf4e:	9304      	str	r3, [sp, #16]
 800cf50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf54:	482c      	ldr	r0, [pc, #176]	; (800d008 <_vfiprintf_r+0x250>)
 800cf56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf5a:	2206      	movs	r2, #6
 800cf5c:	f7f3 f948 	bl	80001f0 <memchr>
 800cf60:	2800      	cmp	r0, #0
 800cf62:	d03f      	beq.n	800cfe4 <_vfiprintf_r+0x22c>
 800cf64:	4b29      	ldr	r3, [pc, #164]	; (800d00c <_vfiprintf_r+0x254>)
 800cf66:	bb1b      	cbnz	r3, 800cfb0 <_vfiprintf_r+0x1f8>
 800cf68:	9b03      	ldr	r3, [sp, #12]
 800cf6a:	3307      	adds	r3, #7
 800cf6c:	f023 0307 	bic.w	r3, r3, #7
 800cf70:	3308      	adds	r3, #8
 800cf72:	9303      	str	r3, [sp, #12]
 800cf74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf76:	443b      	add	r3, r7
 800cf78:	9309      	str	r3, [sp, #36]	; 0x24
 800cf7a:	e767      	b.n	800ce4c <_vfiprintf_r+0x94>
 800cf7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf80:	460c      	mov	r4, r1
 800cf82:	2001      	movs	r0, #1
 800cf84:	e7a5      	b.n	800ced2 <_vfiprintf_r+0x11a>
 800cf86:	2300      	movs	r3, #0
 800cf88:	3401      	adds	r4, #1
 800cf8a:	9305      	str	r3, [sp, #20]
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	f04f 0c0a 	mov.w	ip, #10
 800cf92:	4620      	mov	r0, r4
 800cf94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf98:	3a30      	subs	r2, #48	; 0x30
 800cf9a:	2a09      	cmp	r2, #9
 800cf9c:	d903      	bls.n	800cfa6 <_vfiprintf_r+0x1ee>
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d0c5      	beq.n	800cf2e <_vfiprintf_r+0x176>
 800cfa2:	9105      	str	r1, [sp, #20]
 800cfa4:	e7c3      	b.n	800cf2e <_vfiprintf_r+0x176>
 800cfa6:	fb0c 2101 	mla	r1, ip, r1, r2
 800cfaa:	4604      	mov	r4, r0
 800cfac:	2301      	movs	r3, #1
 800cfae:	e7f0      	b.n	800cf92 <_vfiprintf_r+0x1da>
 800cfb0:	ab03      	add	r3, sp, #12
 800cfb2:	9300      	str	r3, [sp, #0]
 800cfb4:	462a      	mov	r2, r5
 800cfb6:	4b16      	ldr	r3, [pc, #88]	; (800d010 <_vfiprintf_r+0x258>)
 800cfb8:	a904      	add	r1, sp, #16
 800cfba:	4630      	mov	r0, r6
 800cfbc:	f7fb ff52 	bl	8008e64 <_printf_float>
 800cfc0:	4607      	mov	r7, r0
 800cfc2:	1c78      	adds	r0, r7, #1
 800cfc4:	d1d6      	bne.n	800cf74 <_vfiprintf_r+0x1bc>
 800cfc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfc8:	07d9      	lsls	r1, r3, #31
 800cfca:	d405      	bmi.n	800cfd8 <_vfiprintf_r+0x220>
 800cfcc:	89ab      	ldrh	r3, [r5, #12]
 800cfce:	059a      	lsls	r2, r3, #22
 800cfd0:	d402      	bmi.n	800cfd8 <_vfiprintf_r+0x220>
 800cfd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfd4:	f7fe fffc 	bl	800bfd0 <__retarget_lock_release_recursive>
 800cfd8:	89ab      	ldrh	r3, [r5, #12]
 800cfda:	065b      	lsls	r3, r3, #25
 800cfdc:	f53f af12 	bmi.w	800ce04 <_vfiprintf_r+0x4c>
 800cfe0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfe2:	e711      	b.n	800ce08 <_vfiprintf_r+0x50>
 800cfe4:	ab03      	add	r3, sp, #12
 800cfe6:	9300      	str	r3, [sp, #0]
 800cfe8:	462a      	mov	r2, r5
 800cfea:	4b09      	ldr	r3, [pc, #36]	; (800d010 <_vfiprintf_r+0x258>)
 800cfec:	a904      	add	r1, sp, #16
 800cfee:	4630      	mov	r0, r6
 800cff0:	f7fc f9dc 	bl	80093ac <_printf_i>
 800cff4:	e7e4      	b.n	800cfc0 <_vfiprintf_r+0x208>
 800cff6:	bf00      	nop
 800cff8:	0800db34 	.word	0x0800db34
 800cffc:	0800db54 	.word	0x0800db54
 800d000:	0800db14 	.word	0x0800db14
 800d004:	0800dd4c 	.word	0x0800dd4c
 800d008:	0800dd56 	.word	0x0800dd56
 800d00c:	08008e65 	.word	0x08008e65
 800d010:	0800cd93 	.word	0x0800cd93
 800d014:	0800dd52 	.word	0x0800dd52

0800d018 <_read_r>:
 800d018:	b538      	push	{r3, r4, r5, lr}
 800d01a:	4d07      	ldr	r5, [pc, #28]	; (800d038 <_read_r+0x20>)
 800d01c:	4604      	mov	r4, r0
 800d01e:	4608      	mov	r0, r1
 800d020:	4611      	mov	r1, r2
 800d022:	2200      	movs	r2, #0
 800d024:	602a      	str	r2, [r5, #0]
 800d026:	461a      	mov	r2, r3
 800d028:	f7f7 face 	bl	80045c8 <_read>
 800d02c:	1c43      	adds	r3, r0, #1
 800d02e:	d102      	bne.n	800d036 <_read_r+0x1e>
 800d030:	682b      	ldr	r3, [r5, #0]
 800d032:	b103      	cbz	r3, 800d036 <_read_r+0x1e>
 800d034:	6023      	str	r3, [r4, #0]
 800d036:	bd38      	pop	{r3, r4, r5, pc}
 800d038:	20000fc8 	.word	0x20000fc8
 800d03c:	00000000 	.word	0x00000000

0800d040 <nan>:
 800d040:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d048 <nan+0x8>
 800d044:	4770      	bx	lr
 800d046:	bf00      	nop
 800d048:	00000000 	.word	0x00000000
 800d04c:	7ff80000 	.word	0x7ff80000

0800d050 <nanf>:
 800d050:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d058 <nanf+0x8>
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop
 800d058:	7fc00000 	.word	0x7fc00000

0800d05c <__ascii_wctomb>:
 800d05c:	b149      	cbz	r1, 800d072 <__ascii_wctomb+0x16>
 800d05e:	2aff      	cmp	r2, #255	; 0xff
 800d060:	bf85      	ittet	hi
 800d062:	238a      	movhi	r3, #138	; 0x8a
 800d064:	6003      	strhi	r3, [r0, #0]
 800d066:	700a      	strbls	r2, [r1, #0]
 800d068:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d06c:	bf98      	it	ls
 800d06e:	2001      	movls	r0, #1
 800d070:	4770      	bx	lr
 800d072:	4608      	mov	r0, r1
 800d074:	4770      	bx	lr

0800d076 <abort>:
 800d076:	b508      	push	{r3, lr}
 800d078:	2006      	movs	r0, #6
 800d07a:	f000 f897 	bl	800d1ac <raise>
 800d07e:	2001      	movs	r0, #1
 800d080:	f7f7 fa98 	bl	80045b4 <_exit>

0800d084 <_fstat_r>:
 800d084:	b538      	push	{r3, r4, r5, lr}
 800d086:	4d07      	ldr	r5, [pc, #28]	; (800d0a4 <_fstat_r+0x20>)
 800d088:	2300      	movs	r3, #0
 800d08a:	4604      	mov	r4, r0
 800d08c:	4608      	mov	r0, r1
 800d08e:	4611      	mov	r1, r2
 800d090:	602b      	str	r3, [r5, #0]
 800d092:	f7f7 fade 	bl	8004652 <_fstat>
 800d096:	1c43      	adds	r3, r0, #1
 800d098:	d102      	bne.n	800d0a0 <_fstat_r+0x1c>
 800d09a:	682b      	ldr	r3, [r5, #0]
 800d09c:	b103      	cbz	r3, 800d0a0 <_fstat_r+0x1c>
 800d09e:	6023      	str	r3, [r4, #0]
 800d0a0:	bd38      	pop	{r3, r4, r5, pc}
 800d0a2:	bf00      	nop
 800d0a4:	20000fc8 	.word	0x20000fc8

0800d0a8 <_isatty_r>:
 800d0a8:	b538      	push	{r3, r4, r5, lr}
 800d0aa:	4d06      	ldr	r5, [pc, #24]	; (800d0c4 <_isatty_r+0x1c>)
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	4604      	mov	r4, r0
 800d0b0:	4608      	mov	r0, r1
 800d0b2:	602b      	str	r3, [r5, #0]
 800d0b4:	f7f7 fadd 	bl	8004672 <_isatty>
 800d0b8:	1c43      	adds	r3, r0, #1
 800d0ba:	d102      	bne.n	800d0c2 <_isatty_r+0x1a>
 800d0bc:	682b      	ldr	r3, [r5, #0]
 800d0be:	b103      	cbz	r3, 800d0c2 <_isatty_r+0x1a>
 800d0c0:	6023      	str	r3, [r4, #0]
 800d0c2:	bd38      	pop	{r3, r4, r5, pc}
 800d0c4:	20000fc8 	.word	0x20000fc8

0800d0c8 <memmove>:
 800d0c8:	4288      	cmp	r0, r1
 800d0ca:	b510      	push	{r4, lr}
 800d0cc:	eb01 0402 	add.w	r4, r1, r2
 800d0d0:	d902      	bls.n	800d0d8 <memmove+0x10>
 800d0d2:	4284      	cmp	r4, r0
 800d0d4:	4623      	mov	r3, r4
 800d0d6:	d807      	bhi.n	800d0e8 <memmove+0x20>
 800d0d8:	1e43      	subs	r3, r0, #1
 800d0da:	42a1      	cmp	r1, r4
 800d0dc:	d008      	beq.n	800d0f0 <memmove+0x28>
 800d0de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0e6:	e7f8      	b.n	800d0da <memmove+0x12>
 800d0e8:	4402      	add	r2, r0
 800d0ea:	4601      	mov	r1, r0
 800d0ec:	428a      	cmp	r2, r1
 800d0ee:	d100      	bne.n	800d0f2 <memmove+0x2a>
 800d0f0:	bd10      	pop	{r4, pc}
 800d0f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d0f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d0fa:	e7f7      	b.n	800d0ec <memmove+0x24>

0800d0fc <_realloc_r>:
 800d0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d100:	4680      	mov	r8, r0
 800d102:	4614      	mov	r4, r2
 800d104:	460e      	mov	r6, r1
 800d106:	b921      	cbnz	r1, 800d112 <_realloc_r+0x16>
 800d108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d10c:	4611      	mov	r1, r2
 800d10e:	f7fb bd95 	b.w	8008c3c <_malloc_r>
 800d112:	b92a      	cbnz	r2, 800d120 <_realloc_r+0x24>
 800d114:	f7fb fd26 	bl	8008b64 <_free_r>
 800d118:	4625      	mov	r5, r4
 800d11a:	4628      	mov	r0, r5
 800d11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d120:	f000 f860 	bl	800d1e4 <_malloc_usable_size_r>
 800d124:	4284      	cmp	r4, r0
 800d126:	4607      	mov	r7, r0
 800d128:	d802      	bhi.n	800d130 <_realloc_r+0x34>
 800d12a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d12e:	d812      	bhi.n	800d156 <_realloc_r+0x5a>
 800d130:	4621      	mov	r1, r4
 800d132:	4640      	mov	r0, r8
 800d134:	f7fb fd82 	bl	8008c3c <_malloc_r>
 800d138:	4605      	mov	r5, r0
 800d13a:	2800      	cmp	r0, #0
 800d13c:	d0ed      	beq.n	800d11a <_realloc_r+0x1e>
 800d13e:	42bc      	cmp	r4, r7
 800d140:	4622      	mov	r2, r4
 800d142:	4631      	mov	r1, r6
 800d144:	bf28      	it	cs
 800d146:	463a      	movcs	r2, r7
 800d148:	f7fb fcf6 	bl	8008b38 <memcpy>
 800d14c:	4631      	mov	r1, r6
 800d14e:	4640      	mov	r0, r8
 800d150:	f7fb fd08 	bl	8008b64 <_free_r>
 800d154:	e7e1      	b.n	800d11a <_realloc_r+0x1e>
 800d156:	4635      	mov	r5, r6
 800d158:	e7df      	b.n	800d11a <_realloc_r+0x1e>

0800d15a <_raise_r>:
 800d15a:	291f      	cmp	r1, #31
 800d15c:	b538      	push	{r3, r4, r5, lr}
 800d15e:	4604      	mov	r4, r0
 800d160:	460d      	mov	r5, r1
 800d162:	d904      	bls.n	800d16e <_raise_r+0x14>
 800d164:	2316      	movs	r3, #22
 800d166:	6003      	str	r3, [r0, #0]
 800d168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d16c:	bd38      	pop	{r3, r4, r5, pc}
 800d16e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d170:	b112      	cbz	r2, 800d178 <_raise_r+0x1e>
 800d172:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d176:	b94b      	cbnz	r3, 800d18c <_raise_r+0x32>
 800d178:	4620      	mov	r0, r4
 800d17a:	f000 f831 	bl	800d1e0 <_getpid_r>
 800d17e:	462a      	mov	r2, r5
 800d180:	4601      	mov	r1, r0
 800d182:	4620      	mov	r0, r4
 800d184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d188:	f000 b818 	b.w	800d1bc <_kill_r>
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	d00a      	beq.n	800d1a6 <_raise_r+0x4c>
 800d190:	1c59      	adds	r1, r3, #1
 800d192:	d103      	bne.n	800d19c <_raise_r+0x42>
 800d194:	2316      	movs	r3, #22
 800d196:	6003      	str	r3, [r0, #0]
 800d198:	2001      	movs	r0, #1
 800d19a:	e7e7      	b.n	800d16c <_raise_r+0x12>
 800d19c:	2400      	movs	r4, #0
 800d19e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d1a2:	4628      	mov	r0, r5
 800d1a4:	4798      	blx	r3
 800d1a6:	2000      	movs	r0, #0
 800d1a8:	e7e0      	b.n	800d16c <_raise_r+0x12>
	...

0800d1ac <raise>:
 800d1ac:	4b02      	ldr	r3, [pc, #8]	; (800d1b8 <raise+0xc>)
 800d1ae:	4601      	mov	r1, r0
 800d1b0:	6818      	ldr	r0, [r3, #0]
 800d1b2:	f7ff bfd2 	b.w	800d15a <_raise_r>
 800d1b6:	bf00      	nop
 800d1b8:	200000b0 	.word	0x200000b0

0800d1bc <_kill_r>:
 800d1bc:	b538      	push	{r3, r4, r5, lr}
 800d1be:	4d07      	ldr	r5, [pc, #28]	; (800d1dc <_kill_r+0x20>)
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	4608      	mov	r0, r1
 800d1c6:	4611      	mov	r1, r2
 800d1c8:	602b      	str	r3, [r5, #0]
 800d1ca:	f7f7 f9e3 	bl	8004594 <_kill>
 800d1ce:	1c43      	adds	r3, r0, #1
 800d1d0:	d102      	bne.n	800d1d8 <_kill_r+0x1c>
 800d1d2:	682b      	ldr	r3, [r5, #0]
 800d1d4:	b103      	cbz	r3, 800d1d8 <_kill_r+0x1c>
 800d1d6:	6023      	str	r3, [r4, #0]
 800d1d8:	bd38      	pop	{r3, r4, r5, pc}
 800d1da:	bf00      	nop
 800d1dc:	20000fc8 	.word	0x20000fc8

0800d1e0 <_getpid_r>:
 800d1e0:	f7f7 b9d0 	b.w	8004584 <_getpid>

0800d1e4 <_malloc_usable_size_r>:
 800d1e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1e8:	1f18      	subs	r0, r3, #4
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	bfbc      	itt	lt
 800d1ee:	580b      	ldrlt	r3, [r1, r0]
 800d1f0:	18c0      	addlt	r0, r0, r3
 800d1f2:	4770      	bx	lr

0800d1f4 <_init>:
 800d1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1f6:	bf00      	nop
 800d1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1fa:	bc08      	pop	{r3}
 800d1fc:	469e      	mov	lr, r3
 800d1fe:	4770      	bx	lr

0800d200 <_fini>:
 800d200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d202:	bf00      	nop
 800d204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d206:	bc08      	pop	{r3}
 800d208:	469e      	mov	lr, r3
 800d20a:	4770      	bx	lr
