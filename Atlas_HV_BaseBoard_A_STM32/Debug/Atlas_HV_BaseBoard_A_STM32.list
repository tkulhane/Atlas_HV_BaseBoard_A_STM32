
Atlas_HV_BaseBoard_A_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000defc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001768  0800e0a0  0800e0a0  0001e0a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f808  0800f808  00020294  2**0
                  CONTENTS
  4 .ARM          00000008  0800f808  0800f808  0001f808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f810  0800f810  00020294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f810  0800f810  0001f810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f814  0800f814  0001f814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  0800f818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bb4  20000294  0800faac  00020294  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002e48  0800faac  00022e48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001df4e  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000528f  00000000  00000000  0003e212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a70  00000000  00000000  000434a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001840  00000000  00000000  00044f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f840  00000000  00000000  00046758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028ceb  00000000  00000000  00065f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a60aa  00000000  00000000  0008ec83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134d2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000815c  00000000  00000000  00134d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000294 	.word	0x20000294
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e084 	.word	0x0800e084

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000298 	.word	0x20000298
 80001dc:	0800e084 	.word	0x0800e084

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <application_main>:




void application_main()
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0


		ParamsDefaultValues();
 800100e:	f002 fbe5 	bl	80037dc <ParamsDefaultValues>
		ParamsLoad();
 8001012:	f002 fc93 	bl	800393c <ParamsLoad>



	  //hand address for ADC data store
	  p_ADC_data[0] = &ChannelsStatus[0].voltage_measurement;
 8001016:	4b62      	ldr	r3, [pc, #392]	; (80011a0 <application_main+0x198>)
 8001018:	4a62      	ldr	r2, [pc, #392]	; (80011a4 <application_main+0x19c>)
 800101a:	601a      	str	r2, [r3, #0]
	  p_ADC_data[1] = &ChannelsStatus[1].voltage_measurement;
 800101c:	4b60      	ldr	r3, [pc, #384]	; (80011a0 <application_main+0x198>)
 800101e:	4a62      	ldr	r2, [pc, #392]	; (80011a8 <application_main+0x1a0>)
 8001020:	605a      	str	r2, [r3, #4]
	  p_ADC_data[2] = &ChannelsStatus[2].voltage_measurement;
 8001022:	4b5f      	ldr	r3, [pc, #380]	; (80011a0 <application_main+0x198>)
 8001024:	4a61      	ldr	r2, [pc, #388]	; (80011ac <application_main+0x1a4>)
 8001026:	609a      	str	r2, [r3, #8]
	  p_ADC_data[3] = &ChannelsStatus[0].current_measurement;
 8001028:	4b5d      	ldr	r3, [pc, #372]	; (80011a0 <application_main+0x198>)
 800102a:	4a61      	ldr	r2, [pc, #388]	; (80011b0 <application_main+0x1a8>)
 800102c:	60da      	str	r2, [r3, #12]
	  p_ADC_data[4] = &ChannelsStatus[1].current_measurement;
 800102e:	4b5c      	ldr	r3, [pc, #368]	; (80011a0 <application_main+0x198>)
 8001030:	4a60      	ldr	r2, [pc, #384]	; (80011b4 <application_main+0x1ac>)
 8001032:	611a      	str	r2, [r3, #16]
	  p_ADC_data[5] = &ChannelsStatus[2].current_measurement;
 8001034:	4b5a      	ldr	r3, [pc, #360]	; (80011a0 <application_main+0x198>)
 8001036:	4a60      	ldr	r2, [pc, #384]	; (80011b8 <application_main+0x1b0>)
 8001038:	615a      	str	r2, [r3, #20]

	  //hand address for error signals store
	  p_ERROR_data[0] = &ChannelsStatus[0].power_good;
 800103a:	4b60      	ldr	r3, [pc, #384]	; (80011bc <application_main+0x1b4>)
 800103c:	4a60      	ldr	r2, [pc, #384]	; (80011c0 <application_main+0x1b8>)
 800103e:	601a      	str	r2, [r3, #0]
	  p_ERROR_data[1] = &ChannelsStatus[1].power_good;
 8001040:	4b5e      	ldr	r3, [pc, #376]	; (80011bc <application_main+0x1b4>)
 8001042:	4a60      	ldr	r2, [pc, #384]	; (80011c4 <application_main+0x1bc>)
 8001044:	605a      	str	r2, [r3, #4]
	  p_ERROR_data[2] = &ChannelsStatus[2].power_good;
 8001046:	4b5d      	ldr	r3, [pc, #372]	; (80011bc <application_main+0x1b4>)
 8001048:	4a5f      	ldr	r2, [pc, #380]	; (80011c8 <application_main+0x1c0>)
 800104a:	609a      	str	r2, [r3, #8]
	  p_ERROR_data[3] = &ChannelsStatus[0].over_current;
 800104c:	4b5b      	ldr	r3, [pc, #364]	; (80011bc <application_main+0x1b4>)
 800104e:	4a5f      	ldr	r2, [pc, #380]	; (80011cc <application_main+0x1c4>)
 8001050:	60da      	str	r2, [r3, #12]
	  p_ERROR_data[4] = &ChannelsStatus[1].over_current;
 8001052:	4b5a      	ldr	r3, [pc, #360]	; (80011bc <application_main+0x1b4>)
 8001054:	4a5e      	ldr	r2, [pc, #376]	; (80011d0 <application_main+0x1c8>)
 8001056:	611a      	str	r2, [r3, #16]
	  p_ERROR_data[5] = &ChannelsStatus[2].over_current;
 8001058:	4b58      	ldr	r3, [pc, #352]	; (80011bc <application_main+0x1b4>)
 800105a:	4a5e      	ldr	r2, [pc, #376]	; (80011d4 <application_main+0x1cc>)
 800105c:	615a      	str	r2, [r3, #20]

	  HAL_GPIO_WritePin(PWR_EN_GPIO_Port, PWR_EN_Pin, GPIO_PIN_SET);
 800105e:	2201      	movs	r2, #1
 8001060:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001064:	485c      	ldr	r0, [pc, #368]	; (80011d8 <application_main+0x1d0>)
 8001066:	f005 f947 	bl	80062f8 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(W55_RST_GPIO_Port, W55_RST_Pin, GPIO_PIN_SET);
 800106a:	2201      	movs	r2, #1
 800106c:	2108      	movs	r1, #8
 800106e:	485a      	ldr	r0, [pc, #360]	; (80011d8 <application_main+0x1d0>)
 8001070:	f005 f942 	bl	80062f8 <HAL_GPIO_WritePin>
	  ETH_udp_Init();
 8001074:	f002 fef0 	bl	8003e58 <ETH_udp_Init>

	  __HAL_UART_ENABLE_IT(&huart2, UART_IT_ERR);
 8001078:	4b58      	ldr	r3, [pc, #352]	; (80011dc <application_main+0x1d4>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	695a      	ldr	r2, [r3, #20]
 800107e:	4b57      	ldr	r3, [pc, #348]	; (80011dc <application_main+0x1d4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f042 0201 	orr.w	r2, r2, #1
 8001086:	615a      	str	r2, [r3, #20]
	  __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);//enable uart3 interupt
 8001088:	4b54      	ldr	r3, [pc, #336]	; (80011dc <application_main+0x1d4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	68da      	ldr	r2, [r3, #12]
 800108e:	4b53      	ldr	r3, [pc, #332]	; (80011dc <application_main+0x1d4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 0220 	orr.w	r2, r2, #32
 8001096:	60da      	str	r2, [r3, #12]

	  DAC_Init();
 8001098:	f002 fd5e 	bl	8003b58 <DAC_Init>
	  HAL_TIM_Base_Start_IT(&htim10); //start timer for ADC reading
 800109c:	4850      	ldr	r0, [pc, #320]	; (80011e0 <application_main+0x1d8>)
 800109e:	f006 fcd9 	bl	8007a54 <HAL_TIM_Base_Start_IT>
	 // _EnableErrorExecute = false;
	  //_DisableSupplyInLostConnection = true;

	  //_ControlOutputWithChannelEnable = true;

	  app_leds_init();
 80010a2:	f001 fb57 	bl	8002754 <app_leds_init>


	  Set_Voltage(0, minimum_voltage);
 80010a6:	2164      	movs	r1, #100	; 0x64
 80010a8:	2000      	movs	r0, #0
 80010aa:	f001 fcff 	bl	8002aac <Set_Voltage>
	  Set_Voltage(1, minimum_voltage);
 80010ae:	2164      	movs	r1, #100	; 0x64
 80010b0:	2001      	movs	r0, #1
 80010b2:	f001 fcfb 	bl	8002aac <Set_Voltage>
	  Set_Voltage(2, minimum_voltage);
 80010b6:	2164      	movs	r1, #100	; 0x64
 80010b8:	2002      	movs	r0, #2
 80010ba:	f001 fcf7 	bl	8002aac <Set_Voltage>
	  while(1)
	  {


		  //leds
		  ledsUpadateLEDState(&LEDs_GREEN_LED1, HAL_GetTick());
 80010be:	f004 f8fb 	bl	80052b8 <HAL_GetTick>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4619      	mov	r1, r3
 80010c6:	4847      	ldr	r0, [pc, #284]	; (80011e4 <application_main+0x1dc>)
 80010c8:	f003 f814 	bl	80040f4 <ledsUpadateLEDState>
		  ledsUpadateLEDState(&LEDs_GREEN_LED2, HAL_GetTick());
 80010cc:	f004 f8f4 	bl	80052b8 <HAL_GetTick>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4619      	mov	r1, r3
 80010d4:	4844      	ldr	r0, [pc, #272]	; (80011e8 <application_main+0x1e0>)
 80010d6:	f003 f80d 	bl	80040f4 <ledsUpadateLEDState>
		  ledsUpadateLEDState(&LEDs_RED_LED, HAL_GetTick());
 80010da:	f004 f8ed 	bl	80052b8 <HAL_GetTick>
 80010de:	4603      	mov	r3, r0
 80010e0:	4619      	mov	r1, r3
 80010e2:	4842      	ldr	r0, [pc, #264]	; (80011ec <application_main+0x1e4>)
 80010e4:	f003 f806 	bl	80040f4 <ledsUpadateLEDState>

		  //ethernet
		  ETH_udp_Receive();
 80010e8:	f002 ff26 	bl	8003f38 <ETH_udp_Receive>

		  ErrorSignalTime();
 80010ec:	f000 ff1c 	bl	8001f28 <ErrorSignalTime>

		  //errors
		  //if(_Found_Error && MainParams.sramOffset_EnableErrorExecute)
		  if(_Found_Error)
 80010f0:	4b3f      	ldr	r3, [pc, #252]	; (80011f0 <application_main+0x1e8>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d00b      	beq.n	8001110 <application_main+0x108>
		  {
			  ErrorExecute(0);
 80010f8:	2000      	movs	r0, #0
 80010fa:	f000 fedf 	bl	8001ebc <ErrorExecute>
			  ErrorExecute(1);
 80010fe:	2001      	movs	r0, #1
 8001100:	f000 fedc 	bl	8001ebc <ErrorExecute>
			  ErrorExecute(2);
 8001104:	2002      	movs	r0, #2
 8001106:	f000 fed9 	bl	8001ebc <ErrorExecute>

			  _Found_Error = false;
 800110a:	4b39      	ldr	r3, [pc, #228]	; (80011f0 <application_main+0x1e8>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
		  }

		  ChannelControl(0);
 8001110:	2000      	movs	r0, #0
 8001112:	f002 f917 	bl	8003344 <ChannelControl>
		  ChannelControl(1);
 8001116:	2001      	movs	r0, #1
 8001118:	f002 f914 	bl	8003344 <ChannelControl>
		  ChannelControl(2);
 800111c:	2002      	movs	r0, #2
 800111e:	f002 f911 	bl	8003344 <ChannelControl>


		  if(_FoundError_OR)
 8001122:	4b34      	ldr	r3, [pc, #208]	; (80011f4 <application_main+0x1ec>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <application_main+0x12a>
		  {
			  LEDs_RED_LED.mode = LEDS_ON;
 800112a:	4b30      	ldr	r3, [pc, #192]	; (80011ec <application_main+0x1e4>)
 800112c:	2201      	movs	r2, #1
 800112e:	725a      	strb	r2, [r3, #9]
 8001130:	e002      	b.n	8001138 <application_main+0x130>
		  }
		  else
		  {
			  LEDs_RED_LED.mode = LEDS_OFF;
 8001132:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <application_main+0x1e4>)
 8001134:	2200      	movs	r2, #0
 8001136:	725a      	strb	r2, [r3, #9]
		  }


		  bool NewCommand_uart = ProcessCommunication_UART(); //load command from uart buffer
 8001138:	f000 fcb6 	bl	8001aa8 <ProcessCommunication_UART>
 800113c:	4603      	mov	r3, r0
 800113e:	71fb      	strb	r3, [r7, #7]

		  //process command from uart
		  if(NewCommand_uart)
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d004      	beq.n	8001150 <application_main+0x148>
		  {
			  //HAL_GPIO_WritePin(LED_green_GPIO_Port, LED_green_Pin, GPIO_PIN_SET);
			  ProcessCommand(_command_id);
 8001146:	4b2c      	ldr	r3, [pc, #176]	; (80011f8 <application_main+0x1f0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f86e 	bl	800122c <ProcessCommand>
			  //HAL_GPIO_WritePin(LED_green_GPIO_Port, LED_green_Pin, GPIO_PIN_RESET);
		  }


		  bool NewCommand_eth = ProcessCommunication_ETH(); //load command from ethernet buffer
 8001150:	f000 fd1a 	bl	8001b88 <ProcessCommunication_ETH>
 8001154:	4603      	mov	r3, r0
 8001156:	71bb      	strb	r3, [r7, #6]

		  //process command from ethernet
		  if(NewCommand_eth)
 8001158:	79bb      	ldrb	r3, [r7, #6]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d004      	beq.n	8001168 <application_main+0x160>
		  {
			  //HAL_GPIO_WritePin(LED_blue_GPIO_Port, LED_blue_Pin, GPIO_PIN_SET);
			  ProcessCommand(_command_id);
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <application_main+0x1f0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f862 	bl	800122c <ProcessCommand>
			  //HAL_GPIO_WritePin(LED_blue_GPIO_Port, LED_blue_Pin, GPIO_PIN_RESET);
		  }


		  //connection control
		  Communication_ConnectedTimer();
 8001168:	f000 fe94 	bl	8001e94 <Communication_ConnectedTimer>
		  AppConnectedExecute(_AppConnected);
 800116c:	4b23      	ldr	r3, [pc, #140]	; (80011fc <application_main+0x1f4>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f001 f841 	bl	80021f8 <AppConnectedExecute>

		  //channels enable led
		  if(ChannelsStatus[0].enable || ChannelsStatus[1].enable || ChannelsStatus[1].enable)
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <application_main+0x1f8>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d107      	bne.n	800118e <application_main+0x186>
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <application_main+0x1f8>)
 8001180:	7d1b      	ldrb	r3, [r3, #20]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d103      	bne.n	800118e <application_main+0x186>
 8001186:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <application_main+0x1f8>)
 8001188:	7d1b      	ldrb	r3, [r3, #20]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <application_main+0x18e>
		  {
			  LEDs_GREEN_LED2.mode = LEDS_ON;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <application_main+0x1e0>)
 8001190:	2201      	movs	r2, #1
 8001192:	725a      	strb	r2, [r3, #9]
 8001194:	e002      	b.n	800119c <application_main+0x194>
			  //LEDs_RED_LED.mode = LEDS_FAST_BLINK;
		  }
		  else
		  {
			  LEDs_GREEN_LED2.mode = LEDS_OFF;
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <application_main+0x1e0>)
 8001198:	2200      	movs	r2, #0
 800119a:	725a      	strb	r2, [r3, #9]
	  {
 800119c:	e78f      	b.n	80010be <application_main+0xb6>
 800119e:	bf00      	nop
 80011a0:	2000197c 	.word	0x2000197c
 80011a4:	200019e0 	.word	0x200019e0
 80011a8:	200019f4 	.word	0x200019f4
 80011ac:	20001a08 	.word	0x20001a08
 80011b0:	200019e4 	.word	0x200019e4
 80011b4:	200019f8 	.word	0x200019f8
 80011b8:	20001a0c 	.word	0x20001a0c
 80011bc:	200002fc 	.word	0x200002fc
 80011c0:	200019e9 	.word	0x200019e9
 80011c4:	200019fd 	.word	0x200019fd
 80011c8:	20001a11 	.word	0x20001a11
 80011cc:	200019e8 	.word	0x200019e8
 80011d0:	200019fc 	.word	0x200019fc
 80011d4:	20001a10 	.word	0x20001a10
 80011d8:	40020400 	.word	0x40020400
 80011dc:	20002dac 	.word	0x20002dac
 80011e0:	20002d64 	.word	0x20002d64
 80011e4:	2000199c 	.word	0x2000199c
 80011e8:	200019b0 	.word	0x200019b0
 80011ec:	200019c4 	.word	0x200019c4
 80011f0:	20000314 	.word	0x20000314
 80011f4:	20000315 	.word	0x20000315
 80011f8:	200002b8 	.word	0x200002b8
 80011fc:	200002b4 	.word	0x200002b4
 8001200:	200019d8 	.word	0x200019d8

08001204 <HAL_TIM_PeriodElapsedCallback>:
/* @brief callback of timer period elapsed -> for ADC measure and read error signals
 *
 *
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	if(htim == &htim10)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a06      	ldr	r2, [pc, #24]	; (8001228 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d105      	bne.n	8001220 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		ReadADCChannels();
 8001214:	f001 f97c 	bl	8002510 <ReadADCChannels>
		ADCStore();
 8001218:	f001 f99c 	bl	8002554 <ADCStore>
		ErrorSignalsRead();
 800121c:	f000 ff3e 	bl	800209c <ErrorSignalsRead>
	}
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20002d64 	.word	0x20002d64

0800122c <ProcessCommand>:
 * @param command_id -> number of data command
 * @param value -> value for control
 *
 */
void ProcessCommand(int command_id)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	switch(command_id)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b5d      	cmp	r3, #93	; 0x5d
 8001238:	f200 829d 	bhi.w	8001776 <ProcessCommand+0x54a>
 800123c:	a201      	add	r2, pc, #4	; (adr r2, 8001244 <ProcessCommand+0x18>)
 800123e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001242:	bf00      	nop
 8001244:	08001777 	.word	0x08001777
 8001248:	080013bd 	.word	0x080013bd
 800124c:	080013db 	.word	0x080013db
 8001250:	080013f3 	.word	0x080013f3
 8001254:	0800140b 	.word	0x0800140b
 8001258:	08001423 	.word	0x08001423
 800125c:	0800143b 	.word	0x0800143b
 8001260:	08001453 	.word	0x08001453
 8001264:	0800146b 	.word	0x0800146b
 8001268:	0800147b 	.word	0x0800147b
 800126c:	0800148b 	.word	0x0800148b
 8001270:	0800149b 	.word	0x0800149b
 8001274:	080014c1 	.word	0x080014c1
 8001278:	080014e7 	.word	0x080014e7
 800127c:	08001777 	.word	0x08001777
 8001280:	08001777 	.word	0x08001777
 8001284:	08001777 	.word	0x08001777
 8001288:	08001777 	.word	0x08001777
 800128c:	08001777 	.word	0x08001777
 8001290:	08001777 	.word	0x08001777
 8001294:	08001525 	.word	0x08001525
 8001298:	0800151f 	.word	0x0800151f
 800129c:	0800150d 	.word	0x0800150d
 80012a0:	08001777 	.word	0x08001777
 80012a4:	08001513 	.word	0x08001513
 80012a8:	0800152b 	.word	0x0800152b
 80012ac:	08001531 	.word	0x08001531
 80012b0:	0800153d 	.word	0x0800153d
 80012b4:	08001549 	.word	0x08001549
 80012b8:	08001777 	.word	0x08001777
 80012bc:	08001777 	.word	0x08001777
 80012c0:	08001777 	.word	0x08001777
 80012c4:	08001555 	.word	0x08001555
 80012c8:	0800155b 	.word	0x0800155b
 80012cc:	0800156d 	.word	0x0800156d
 80012d0:	0800157f 	.word	0x0800157f
 80012d4:	08001591 	.word	0x08001591
 80012d8:	080015a3 	.word	0x080015a3
 80012dc:	080015b5 	.word	0x080015b5
 80012e0:	080015c7 	.word	0x080015c7
 80012e4:	080015d9 	.word	0x080015d9
 80012e8:	080015eb 	.word	0x080015eb
 80012ec:	080015fd 	.word	0x080015fd
 80012f0:	0800160f 	.word	0x0800160f
 80012f4:	08001621 	.word	0x08001621
 80012f8:	08001777 	.word	0x08001777
 80012fc:	08001777 	.word	0x08001777
 8001300:	08001777 	.word	0x08001777
 8001304:	08001777 	.word	0x08001777
 8001308:	08001777 	.word	0x08001777
 800130c:	08001777 	.word	0x08001777
 8001310:	08001777 	.word	0x08001777
 8001314:	08001777 	.word	0x08001777
 8001318:	08001777 	.word	0x08001777
 800131c:	08001777 	.word	0x08001777
 8001320:	08001777 	.word	0x08001777
 8001324:	08001777 	.word	0x08001777
 8001328:	08001633 	.word	0x08001633
 800132c:	08001645 	.word	0x08001645
 8001330:	08001657 	.word	0x08001657
 8001334:	08001669 	.word	0x08001669
 8001338:	0800167b 	.word	0x0800167b
 800133c:	0800169d 	.word	0x0800169d
 8001340:	08001777 	.word	0x08001777
 8001344:	08001777 	.word	0x08001777
 8001348:	08001777 	.word	0x08001777
 800134c:	08001777 	.word	0x08001777
 8001350:	08001777 	.word	0x08001777
 8001354:	08001777 	.word	0x08001777
 8001358:	080016af 	.word	0x080016af
 800135c:	080016b5 	.word	0x080016b5
 8001360:	080016bb 	.word	0x080016bb
 8001364:	080016cb 	.word	0x080016cb
 8001368:	080016db 	.word	0x080016db
 800136c:	080016eb 	.word	0x080016eb
 8001370:	080016fb 	.word	0x080016fb
 8001374:	0800170b 	.word	0x0800170b
 8001378:	08001777 	.word	0x08001777
 800137c:	08001777 	.word	0x08001777
 8001380:	08001777 	.word	0x08001777
 8001384:	0800171b 	.word	0x0800171b
 8001388:	08001721 	.word	0x08001721
 800138c:	0800172f 	.word	0x0800172f
 8001390:	0800173d 	.word	0x0800173d
 8001394:	0800174b 	.word	0x0800174b
 8001398:	08001777 	.word	0x08001777
 800139c:	08001777 	.word	0x08001777
 80013a0:	08001777 	.word	0x08001777
 80013a4:	08001777 	.word	0x08001777
 80013a8:	08001759 	.word	0x08001759
 80013ac:	0800175f 	.word	0x0800175f
 80013b0:	08001765 	.word	0x08001765
 80013b4:	08001771 	.word	0x08001771
 80013b8:	0800176b 	.word	0x0800176b
		case cmd_NON:

			break;
		case cmd_Connected:

			if(_command_source == csource_ETH) ETH_udp_StoreEndpoint();
 80013bc:	4bb3      	ldr	r3, [pc, #716]	; (800168c <ProcessCommand+0x460>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d101      	bne.n	80013c8 <ProcessCommand+0x19c>
 80013c4:	f002 fd86 	bl	8003ed4 <ETH_udp_StoreEndpoint>
			Comunication_ResetConnectedTimer();
 80013c8:	f000 fd54 	bl	8001e74 <Comunication_ResetConnectedTimer>
			SendCommunication(cmd_Connected,_command_value);
 80013cc:	4bb0      	ldr	r3, [pc, #704]	; (8001690 <ProcessCommand+0x464>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	2001      	movs	r0, #1
 80013d4:	f000 fc42 	bl	8001c5c <SendCommunication>
			break;
 80013d8:	e1d4      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_enable_CH1:
			Channel_Enable(0, _command_value);
 80013da:	4bad      	ldr	r3, [pc, #692]	; (8001690 <ProcessCommand+0x464>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	bf14      	ite	ne
 80013e2:	2301      	movne	r3, #1
 80013e4:	2300      	moveq	r3, #0
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	4619      	mov	r1, r3
 80013ea:	2000      	movs	r0, #0
 80013ec:	f001 fd46 	bl	8002e7c <Channel_Enable>
			break;
 80013f0:	e1c8      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_enable_CH2:
			Channel_Enable(1, _command_value);
 80013f2:	4ba7      	ldr	r3, [pc, #668]	; (8001690 <ProcessCommand+0x464>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	bf14      	ite	ne
 80013fa:	2301      	movne	r3, #1
 80013fc:	2300      	moveq	r3, #0
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	4619      	mov	r1, r3
 8001402:	2001      	movs	r0, #1
 8001404:	f001 fd3a 	bl	8002e7c <Channel_Enable>
			break;
 8001408:	e1bc      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_enable_CH3:
			Channel_Enable(2, _command_value);
 800140a:	4ba1      	ldr	r3, [pc, #644]	; (8001690 <ProcessCommand+0x464>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	bf14      	ite	ne
 8001412:	2301      	movne	r3, #1
 8001414:	2300      	moveq	r3, #0
 8001416:	b2db      	uxtb	r3, r3
 8001418:	4619      	mov	r1, r3
 800141a:	2002      	movs	r0, #2
 800141c:	f001 fd2e 	bl	8002e7c <Channel_Enable>
			break;
 8001420:	e1b0      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_output_CH1:
			Channel_Output(0, _command_value);
 8001422:	4b9b      	ldr	r3, [pc, #620]	; (8001690 <ProcessCommand+0x464>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	bf14      	ite	ne
 800142a:	2301      	movne	r3, #1
 800142c:	2300      	moveq	r3, #0
 800142e:	b2db      	uxtb	r3, r3
 8001430:	4619      	mov	r1, r3
 8001432:	2000      	movs	r0, #0
 8001434:	f001 ff26 	bl	8003284 <Channel_Output>
			break;
 8001438:	e1a4      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_output_CH2:
			Channel_Output(1, _command_value);
 800143a:	4b95      	ldr	r3, [pc, #596]	; (8001690 <ProcessCommand+0x464>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	bf14      	ite	ne
 8001442:	2301      	movne	r3, #1
 8001444:	2300      	moveq	r3, #0
 8001446:	b2db      	uxtb	r3, r3
 8001448:	4619      	mov	r1, r3
 800144a:	2001      	movs	r0, #1
 800144c:	f001 ff1a 	bl	8003284 <Channel_Output>
			break;
 8001450:	e198      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_output_CH3:
			Channel_Output(2, _command_value);
 8001452:	4b8f      	ldr	r3, [pc, #572]	; (8001690 <ProcessCommand+0x464>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	bf14      	ite	ne
 800145a:	2301      	movne	r3, #1
 800145c:	2300      	moveq	r3, #0
 800145e:	b2db      	uxtb	r3, r3
 8001460:	4619      	mov	r1, r3
 8001462:	2002      	movs	r0, #2
 8001464:	f001 ff0e 	bl	8003284 <Channel_Output>
			break;
 8001468:	e18c      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_set_voltage_CH1:
			Set_Voltage(0, _command_value);
 800146a:	4b89      	ldr	r3, [pc, #548]	; (8001690 <ProcessCommand+0x464>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	b29b      	uxth	r3, r3
 8001470:	4619      	mov	r1, r3
 8001472:	2000      	movs	r0, #0
 8001474:	f001 fb1a 	bl	8002aac <Set_Voltage>
			break;
 8001478:	e184      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_set_voltage_CH2:
			Set_Voltage(1, _command_value);
 800147a:	4b85      	ldr	r3, [pc, #532]	; (8001690 <ProcessCommand+0x464>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	4619      	mov	r1, r3
 8001482:	2001      	movs	r0, #1
 8001484:	f001 fb12 	bl	8002aac <Set_Voltage>
			break;
 8001488:	e17c      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_set_voltage_CH3:
			Set_Voltage(2, _command_value);
 800148a:	4b81      	ldr	r3, [pc, #516]	; (8001690 <ProcessCommand+0x464>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	b29b      	uxth	r3, r3
 8001490:	4619      	mov	r1, r3
 8001492:	2002      	movs	r0, #2
 8001494:	f001 fb0a 	bl	8002aac <Set_Voltage>
			break;
 8001498:	e174      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_polarity_CH1:
			if(_command_value == 1)Channel_Polarity(0, polarity_positive);
 800149a:	4b7d      	ldr	r3, [pc, #500]	; (8001690 <ProcessCommand+0x464>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d104      	bne.n	80014ac <ProcessCommand+0x280>
 80014a2:	2100      	movs	r1, #0
 80014a4:	2000      	movs	r0, #0
 80014a6:	f001 fe7f 	bl	80031a8 <Channel_Polarity>
			else if (_command_value == 2)Channel_Polarity(0, polarity_negative);
			break;
 80014aa:	e166      	b.n	800177a <ProcessCommand+0x54e>
			else if (_command_value == 2)Channel_Polarity(0, polarity_negative);
 80014ac:	4b78      	ldr	r3, [pc, #480]	; (8001690 <ProcessCommand+0x464>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	f040 8162 	bne.w	800177a <ProcessCommand+0x54e>
 80014b6:	2101      	movs	r1, #1
 80014b8:	2000      	movs	r0, #0
 80014ba:	f001 fe75 	bl	80031a8 <Channel_Polarity>
			break;
 80014be:	e15c      	b.n	800177a <ProcessCommand+0x54e>

		case cmd_polarity_CH2:
			if(_command_value == 1)Channel_Polarity(1, polarity_positive);
 80014c0:	4b73      	ldr	r3, [pc, #460]	; (8001690 <ProcessCommand+0x464>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d104      	bne.n	80014d2 <ProcessCommand+0x2a6>
 80014c8:	2100      	movs	r1, #0
 80014ca:	2001      	movs	r0, #1
 80014cc:	f001 fe6c 	bl	80031a8 <Channel_Polarity>
			else if (_command_value == 2)Channel_Polarity(1, polarity_negative);
			break;
 80014d0:	e155      	b.n	800177e <ProcessCommand+0x552>
			else if (_command_value == 2)Channel_Polarity(1, polarity_negative);
 80014d2:	4b6f      	ldr	r3, [pc, #444]	; (8001690 <ProcessCommand+0x464>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	f040 8151 	bne.w	800177e <ProcessCommand+0x552>
 80014dc:	2101      	movs	r1, #1
 80014de:	2001      	movs	r0, #1
 80014e0:	f001 fe62 	bl	80031a8 <Channel_Polarity>
			break;
 80014e4:	e14b      	b.n	800177e <ProcessCommand+0x552>

		case cmd_polarity_CH3:
			if(_command_value == 1)Channel_Polarity(2, polarity_positive);
 80014e6:	4b6a      	ldr	r3, [pc, #424]	; (8001690 <ProcessCommand+0x464>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d104      	bne.n	80014f8 <ProcessCommand+0x2cc>
 80014ee:	2100      	movs	r1, #0
 80014f0:	2002      	movs	r0, #2
 80014f2:	f001 fe59 	bl	80031a8 <Channel_Polarity>
			else if (_command_value == 2)Channel_Polarity(2, polarity_negative);
			break;
 80014f6:	e144      	b.n	8001782 <ProcessCommand+0x556>
			else if (_command_value == 2)Channel_Polarity(2, polarity_negative);
 80014f8:	4b65      	ldr	r3, [pc, #404]	; (8001690 <ProcessCommand+0x464>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	f040 8140 	bne.w	8001782 <ProcessCommand+0x556>
 8001502:	2101      	movs	r1, #1
 8001504:	2002      	movs	r0, #2
 8001506:	f001 fe4f 	bl	80031a8 <Channel_Polarity>
			break;
 800150a:	e13a      	b.n	8001782 <ProcessCommand+0x556>

		case cmd_getsetting:
			Get_Setting();
 800150c:	f002 f8b0 	bl	8003670 <Get_Setting>
			break;
 8001510:	e138      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_LED:
			LedSwitch(_command_value);
 8001512:	4b5f      	ldr	r3, [pc, #380]	; (8001690 <ProcessCommand+0x464>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f001 f894 	bl	8002644 <LedSwitch>
			break;
 800151c:	e132      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_getallvalues:
			Get_AllMeasurement();
 800151e:	f002 f88f 	bl	8003640 <Get_AllMeasurement>
			//ErrorWatching();
			break;
 8001522:	e12f      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_error_signals:
			Get_ErrorSignals();
 8001524:	f002 f844 	bl	80035b0 <Get_ErrorSignals>
			break;
 8001528:	e12c      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_ip_store_endpoint:
			ETH_udp_StoreEndpoint();
 800152a:	f002 fcd3 	bl	8003ed4 <ETH_udp_StoreEndpoint>
			break;
 800152e:	e129      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_ip_store_myip:
			ETH_StoreIP(_u32_command_value);
 8001530:	4b58      	ldr	r3, [pc, #352]	; (8001694 <ProcessCommand+0x468>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f002 fb47 	bl	8003bc8 <ETH_StoreIP>
			break;
 800153a:	e123      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_ip_store_mymask:
			ETH_StoreNETMASK(_u32_command_value);
 800153c:	4b55      	ldr	r3, [pc, #340]	; (8001694 <ProcessCommand+0x468>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f002 fb51 	bl	8003be8 <ETH_StoreNETMASK>
			break;
 8001546:	e11d      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_ip_store_mygatew:
			ETH_StoreGATEWAY(_u32_command_value);
 8001548:	4b52      	ldr	r3, [pc, #328]	; (8001694 <ProcessCommand+0x468>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f002 fb5b 	bl	8003c08 <ETH_StoreGATEWAY>
			break;
 8001552:	e117      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_ip_getsetting:
			ETH_SendSetting();
 8001554:	f002 fc17 	bl	8003d86 <ETH_SendSetting>
			break;
 8001558:	e114      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_adc_set_k0:
			StoreADCConstant(0, _float_command_value);
 800155a:	4b4f      	ldr	r3, [pc, #316]	; (8001698 <ProcessCommand+0x46c>)
 800155c:	edd3 7a00 	vldr	s15, [r3]
 8001560:	eeb0 0a67 	vmov.f32	s0, s15
 8001564:	2000      	movs	r0, #0
 8001566:	f000 ff31 	bl	80023cc <StoreADCConstant>
			break;
 800156a:	e10b      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_adc_set_k1:
			StoreADCConstant(1, _float_command_value);
 800156c:	4b4a      	ldr	r3, [pc, #296]	; (8001698 <ProcessCommand+0x46c>)
 800156e:	edd3 7a00 	vldr	s15, [r3]
 8001572:	eeb0 0a67 	vmov.f32	s0, s15
 8001576:	2001      	movs	r0, #1
 8001578:	f000 ff28 	bl	80023cc <StoreADCConstant>
			break;
 800157c:	e102      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_adc_set_k2:
			StoreADCConstant(2, _float_command_value);
 800157e:	4b46      	ldr	r3, [pc, #280]	; (8001698 <ProcessCommand+0x46c>)
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	eeb0 0a67 	vmov.f32	s0, s15
 8001588:	2002      	movs	r0, #2
 800158a:	f000 ff1f 	bl	80023cc <StoreADCConstant>
			break;
 800158e:	e0f9      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_adc_set_k3:
			StoreADCConstant(3, _float_command_value);
 8001590:	4b41      	ldr	r3, [pc, #260]	; (8001698 <ProcessCommand+0x46c>)
 8001592:	edd3 7a00 	vldr	s15, [r3]
 8001596:	eeb0 0a67 	vmov.f32	s0, s15
 800159a:	2003      	movs	r0, #3
 800159c:	f000 ff16 	bl	80023cc <StoreADCConstant>
			break;
 80015a0:	e0f0      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_adc_set_k4:
			StoreADCConstant(4, _float_command_value);
 80015a2:	4b3d      	ldr	r3, [pc, #244]	; (8001698 <ProcessCommand+0x46c>)
 80015a4:	edd3 7a00 	vldr	s15, [r3]
 80015a8:	eeb0 0a67 	vmov.f32	s0, s15
 80015ac:	2004      	movs	r0, #4
 80015ae:	f000 ff0d 	bl	80023cc <StoreADCConstant>
			break;
 80015b2:	e0e7      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_adc_set_k5:
			StoreADCConstant(5, _float_command_value);
 80015b4:	4b38      	ldr	r3, [pc, #224]	; (8001698 <ProcessCommand+0x46c>)
 80015b6:	edd3 7a00 	vldr	s15, [r3]
 80015ba:	eeb0 0a67 	vmov.f32	s0, s15
 80015be:	2005      	movs	r0, #5
 80015c0:	f000 ff04 	bl	80023cc <StoreADCConstant>
			break;
 80015c4:	e0de      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_adc_set_q0:
			StoreADCConstant(6, _float_command_value);
 80015c6:	4b34      	ldr	r3, [pc, #208]	; (8001698 <ProcessCommand+0x46c>)
 80015c8:	edd3 7a00 	vldr	s15, [r3]
 80015cc:	eeb0 0a67 	vmov.f32	s0, s15
 80015d0:	2006      	movs	r0, #6
 80015d2:	f000 fefb 	bl	80023cc <StoreADCConstant>
			break;
 80015d6:	e0d5      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_adc_set_q1:
			StoreADCConstant(7, _float_command_value);
 80015d8:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <ProcessCommand+0x46c>)
 80015da:	edd3 7a00 	vldr	s15, [r3]
 80015de:	eeb0 0a67 	vmov.f32	s0, s15
 80015e2:	2007      	movs	r0, #7
 80015e4:	f000 fef2 	bl	80023cc <StoreADCConstant>
			break;
 80015e8:	e0cc      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_adc_set_q2:
			StoreADCConstant(8, _float_command_value);
 80015ea:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <ProcessCommand+0x46c>)
 80015ec:	edd3 7a00 	vldr	s15, [r3]
 80015f0:	eeb0 0a67 	vmov.f32	s0, s15
 80015f4:	2008      	movs	r0, #8
 80015f6:	f000 fee9 	bl	80023cc <StoreADCConstant>
			break;
 80015fa:	e0c3      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_adc_set_q3:
			StoreADCConstant(9, _float_command_value);
 80015fc:	4b26      	ldr	r3, [pc, #152]	; (8001698 <ProcessCommand+0x46c>)
 80015fe:	edd3 7a00 	vldr	s15, [r3]
 8001602:	eeb0 0a67 	vmov.f32	s0, s15
 8001606:	2009      	movs	r0, #9
 8001608:	f000 fee0 	bl	80023cc <StoreADCConstant>
			break;
 800160c:	e0ba      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_adc_set_q4:
			StoreADCConstant(10, _float_command_value);
 800160e:	4b22      	ldr	r3, [pc, #136]	; (8001698 <ProcessCommand+0x46c>)
 8001610:	edd3 7a00 	vldr	s15, [r3]
 8001614:	eeb0 0a67 	vmov.f32	s0, s15
 8001618:	200a      	movs	r0, #10
 800161a:	f000 fed7 	bl	80023cc <StoreADCConstant>
			break;
 800161e:	e0b1      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_adc_set_q5:
			StoreADCConstant(11, _float_command_value);
 8001620:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <ProcessCommand+0x46c>)
 8001622:	edd3 7a00 	vldr	s15, [r3]
 8001626:	eeb0 0a67 	vmov.f32	s0, s15
 800162a:	200b      	movs	r0, #11
 800162c:	f000 fece 	bl	80023cc <StoreADCConstant>
			break;
 8001630:	e0a8      	b.n	8001784 <ProcessCommand+0x558>


		case cmd_dac_set_k0:
			StoreDACConstant(0, _float_command_value);
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <ProcessCommand+0x46c>)
 8001634:	edd3 7a00 	vldr	s15, [r3]
 8001638:	eeb0 0a67 	vmov.f32	s0, s15
 800163c:	2000      	movs	r0, #0
 800163e:	f001 f8fb 	bl	8002838 <StoreDACConstant>
			break;
 8001642:	e09f      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_dac_set_k1:
			StoreDACConstant(1, _float_command_value);
 8001644:	4b14      	ldr	r3, [pc, #80]	; (8001698 <ProcessCommand+0x46c>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	eeb0 0a67 	vmov.f32	s0, s15
 800164e:	2001      	movs	r0, #1
 8001650:	f001 f8f2 	bl	8002838 <StoreDACConstant>
			break;
 8001654:	e096      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_dac_set_k2:
			StoreDACConstant(2, _float_command_value);
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <ProcessCommand+0x46c>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	eeb0 0a67 	vmov.f32	s0, s15
 8001660:	2002      	movs	r0, #2
 8001662:	f001 f8e9 	bl	8002838 <StoreDACConstant>
			break;
 8001666:	e08d      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_dac_set_q0:
			StoreDACConstant(3, _float_command_value);
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <ProcessCommand+0x46c>)
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	eeb0 0a67 	vmov.f32	s0, s15
 8001672:	2003      	movs	r0, #3
 8001674:	f001 f8e0 	bl	8002838 <StoreDACConstant>
			break;
 8001678:	e084      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_dac_set_q1:
			StoreDACConstant(4, _float_command_value);
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <ProcessCommand+0x46c>)
 800167c:	edd3 7a00 	vldr	s15, [r3]
 8001680:	eeb0 0a67 	vmov.f32	s0, s15
 8001684:	2004      	movs	r0, #4
 8001686:	f001 f8d7 	bl	8002838 <StoreDACConstant>
			break;
 800168a:	e07b      	b.n	8001784 <ProcessCommand+0x558>
 800168c:	200002c9 	.word	0x200002c9
 8001690:	200002bc 	.word	0x200002bc
 8001694:	200002c4 	.word	0x200002c4
 8001698:	200002c0 	.word	0x200002c0

		case cmd_dac_set_q2:
			StoreDACConstant(5, _float_command_value);
 800169c:	4b3b      	ldr	r3, [pc, #236]	; (800178c <ProcessCommand+0x560>)
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	eeb0 0a67 	vmov.f32	s0, s15
 80016a6:	2005      	movs	r0, #5
 80016a8:	f001 f8c6 	bl	8002838 <StoreDACConstant>
			break;
 80016ac:	e06a      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_adc_getallcoef:
			SendADCCoefficients();
 80016ae:	f000 fea5 	bl	80023fc <SendADCCoefficients>
			break;
 80016b2:	e067      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_dac_getallcoef:
			SendDACCoefficients();
 80016b4:	f001 f8d8 	bl	8002868 <SendDACCoefficients>
			break;
 80016b8:	e064      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_set_pre_reg_CH1: //debug
			Set_PreReg_Voltage(0, _command_value);
 80016ba:	4b35      	ldr	r3, [pc, #212]	; (8001790 <ProcessCommand+0x564>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4619      	mov	r1, r3
 80016c2:	2000      	movs	r0, #0
 80016c4:	f001 f992 	bl	80029ec <Set_PreReg_Voltage>
			break;
 80016c8:	e05c      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_set_pre_reg_CH2: //debug
			Set_PreReg_Voltage(1, _command_value);
 80016ca:	4b31      	ldr	r3, [pc, #196]	; (8001790 <ProcessCommand+0x564>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	4619      	mov	r1, r3
 80016d2:	2001      	movs	r0, #1
 80016d4:	f001 f98a 	bl	80029ec <Set_PreReg_Voltage>
			break;
 80016d8:	e054      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_set_pre_reg_CH3: //debug
			Set_PreReg_Voltage(2, _command_value);
 80016da:	4b2d      	ldr	r3, [pc, #180]	; (8001790 <ProcessCommand+0x564>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4619      	mov	r1, r3
 80016e2:	2002      	movs	r0, #2
 80016e4:	f001 f982 	bl	80029ec <Set_PreReg_Voltage>
			break;
 80016e8:	e04c      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_set_out_reg_CH1: //debug
			Set_OutReg_Voltage(0, _command_value);
 80016ea:	4b29      	ldr	r3, [pc, #164]	; (8001790 <ProcessCommand+0x564>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4619      	mov	r1, r3
 80016f2:	2000      	movs	r0, #0
 80016f4:	f001 f9a8 	bl	8002a48 <Set_OutReg_Voltage>
			break;
 80016f8:	e044      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_set_out_reg_CH2: //debug
			Set_OutReg_Voltage(1, _command_value);
 80016fa:	4b25      	ldr	r3, [pc, #148]	; (8001790 <ProcessCommand+0x564>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	4619      	mov	r1, r3
 8001702:	2001      	movs	r0, #1
 8001704:	f001 f9a0 	bl	8002a48 <Set_OutReg_Voltage>
			break;
 8001708:	e03c      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_set_out_reg_CH3: //debug
			Set_OutReg_Voltage(2, _command_value);
 800170a:	4b21      	ldr	r3, [pc, #132]	; (8001790 <ProcessCommand+0x564>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	b29b      	uxth	r3, r3
 8001710:	4619      	mov	r1, r3
 8001712:	2002      	movs	r0, #2
 8001714:	f001 f998 	bl	8002a48 <Set_OutReg_Voltage>
			break;
 8001718:	e034      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_errState_Get:
			Get_State_err();
 800171a:	f002 f805 	bl	8003728 <Get_State_err>
			break;
 800171e:	e031      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_CfgSet_EnableErrorExecute:
			SetConfigData(0, _command_value);
 8001720:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <ProcessCommand+0x564>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	2000      	movs	r0, #0
 8001728:	f002 f976 	bl	8003a18 <SetConfigData>
			break;
 800172c:	e02a      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_CfgSet_DisableInConnLost:
			SetConfigData(1, _command_value);
 800172e:	4b18      	ldr	r3, [pc, #96]	; (8001790 <ProcessCommand+0x564>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4619      	mov	r1, r3
 8001734:	2001      	movs	r0, #1
 8001736:	f002 f96f 	bl	8003a18 <SetConfigData>
			break;
 800173a:	e023      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_CfgSet_CtrlOutWithChEnable:
			SetConfigData(2, _command_value);
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <ProcessCommand+0x564>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4619      	mov	r1, r3
 8001742:	2002      	movs	r0, #2
 8001744:	f002 f968 	bl	8003a18 <SetConfigData>
			break;
 8001748:	e01c      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_CfgSet_ErrorExecuteAutoRestart:
			SetConfigData(3, _command_value);
 800174a:	4b11      	ldr	r3, [pc, #68]	; (8001790 <ProcessCommand+0x564>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4619      	mov	r1, r3
 8001750:	2003      	movs	r0, #3
 8001752:	f002 f961 	bl	8003a18 <SetConfigData>
			break;
 8001756:	e015      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_Cfg_Get:
			SendConfigData();
 8001758:	f002 f974 	bl	8003a44 <SendConfigData>
			break;
 800175c:	e012      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_params_store:
			ParamsStore();
 800175e:	f002 f923 	bl	80039a8 <ParamsStore>
			break;
 8001762:	e00f      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_params_default:
			RestoreParamsDefault();
 8001764:	f002 f940 	bl	80039e8 <RestoreParamsDefault>
			break;
 8001768:	e00c      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_reset:
			System_Reset();
 800176a:	f002 f819 	bl	80037a0 <System_Reset>
			break;
 800176e:	e009      	b.n	8001784 <ProcessCommand+0x558>

		case cmd_Eth_ReInit:
			ETH_udp_Init();
 8001770:	f002 fb72 	bl	8003e58 <ETH_udp_Init>
			break;
 8001774:	e006      	b.n	8001784 <ProcessCommand+0x558>


		default:
			break;
 8001776:	bf00      	nop
 8001778:	e004      	b.n	8001784 <ProcessCommand+0x558>
			break;
 800177a:	bf00      	nop
 800177c:	e002      	b.n	8001784 <ProcessCommand+0x558>
			break;
 800177e:	bf00      	nop
 8001780:	e000      	b.n	8001784 <ProcessCommand+0x558>
			break;
 8001782:	bf00      	nop
	}
}
 8001784:	bf00      	nop
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200002c0 	.word	0x200002c0
 8001790:	200002bc 	.word	0x200002bc

08001794 <get_string_length>:
 * @param s -> pointer on string
 *
 * @return length of string
 */
int get_string_length(const char *s)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
    int len=0;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
    while (s[len] != 0)
 80017a0:	e002      	b.n	80017a8 <get_string_length+0x14>
    {
        len++;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	3301      	adds	r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
    while (s[len] != 0)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f6      	bne.n	80017a2 <get_string_length+0xe>
    }

    return len;
 80017b4:	68fb      	ldr	r3, [r7, #12]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <StringIsEqual>:
 *
 * @return true -> string is equal
 * @retuen false -> string is not equal
 */
bool StringIsEqual(const uint8_t *one, int one_start, int one_end, const uint8_t *two,int two_start, int two_end)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b089      	sub	sp, #36	; 0x24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
 80017ce:	603b      	str	r3, [r7, #0]
	if(!((one_start >= 0) || (two_start >= 0) || (one_end >= 0) || (two_end >= 0))) return false; //start and stop must be equal or bigger than 0
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	da0a      	bge.n	80017ec <StringIsEqual+0x2a>
 80017d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d8:	2b00      	cmp	r3, #0
 80017da:	da07      	bge.n	80017ec <StringIsEqual+0x2a>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	da04      	bge.n	80017ec <StringIsEqual+0x2a>
 80017e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	da01      	bge.n	80017ec <StringIsEqual+0x2a>
 80017e8:	2300      	movs	r3, #0
 80017ea:	e02c      	b.n	8001846 <StringIsEqual+0x84>

	int one_length = one_end - one_start;
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	61bb      	str	r3, [r7, #24]
	int two_length = two_end - two_start;
 80017f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	617b      	str	r3, [r7, #20]

	if(!((one_length > 0) || (two_length > 0))) return false; //length must be bigger than 0
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	dc04      	bgt.n	800180c <StringIsEqual+0x4a>
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2b00      	cmp	r3, #0
 8001806:	dc01      	bgt.n	800180c <StringIsEqual+0x4a>
 8001808:	2300      	movs	r3, #0
 800180a:	e01c      	b.n	8001846 <StringIsEqual+0x84>
	if(!(one_length == two_length)) return false; //length of one and two must be equal
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <StringIsEqual+0x56>
 8001814:	2300      	movs	r3, #0
 8001816:	e016      	b.n	8001846 <StringIsEqual+0x84>

	for(int i = 0;i < one_length; i++)
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	e00e      	b.n	800183c <StringIsEqual+0x7a>
	{
		if(!(one[i] == two[i])) return false;
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	4413      	add	r3, r2
 8001824:	781a      	ldrb	r2, [r3, #0]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	6839      	ldr	r1, [r7, #0]
 800182a:	440b      	add	r3, r1
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	429a      	cmp	r2, r3
 8001830:	d001      	beq.n	8001836 <StringIsEqual+0x74>
 8001832:	2300      	movs	r3, #0
 8001834:	e007      	b.n	8001846 <StringIsEqual+0x84>
	for(int i = 0;i < one_length; i++)
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	3301      	adds	r3, #1
 800183a:	61fb      	str	r3, [r7, #28]
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	429a      	cmp	r2, r3
 8001842:	dbec      	blt.n	800181e <StringIsEqual+0x5c>
	}

	return true;
 8001844:	2301      	movs	r3, #1
}
 8001846:	4618      	mov	r0, r3
 8001848:	3724      	adds	r7, #36	; 0x24
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <GetDelimiterPosition>:
 * @param character -> searched character
 *
 * @return position of searched character or -1 if character is not found
 */
int GetDelimiterPosition(const uint8_t *string, int length, uint8_t character)
{
 8001852:	b480      	push	{r7}
 8001854:	b087      	sub	sp, #28
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	4613      	mov	r3, r2
 800185e:	71fb      	strb	r3, [r7, #7]
	for(int i = 0;i<length; i++)
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	e00b      	b.n	800187e <GetDelimiterPosition+0x2c>
	{
		if(string[i] == character)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4413      	add	r3, r2
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	79fa      	ldrb	r2, [r7, #7]
 8001870:	429a      	cmp	r2, r3
 8001872:	d101      	bne.n	8001878 <GetDelimiterPosition+0x26>
		{
			return i;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	e008      	b.n	800188a <GetDelimiterPosition+0x38>
	for(int i = 0;i<length; i++)
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	3301      	adds	r3, #1
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	429a      	cmp	r2, r3
 8001884:	dbef      	blt.n	8001866 <GetDelimiterPosition+0x14>
		}
	}

	return -1;
 8001886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800188a:	4618      	mov	r0, r3
 800188c:	371c      	adds	r7, #28
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <ProcessLine>:
 *
 * @return true -> correct processing
 * @return false -> wrong command
 */
bool ProcessLine(const uint8_t *Buffer, int legth)
{
 8001898:	b590      	push	{r4, r7, lr}
 800189a:	b08f      	sub	sp, #60	; 0x3c
 800189c:	af02      	add	r7, sp, #8
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
	int delim_position = GetDelimiterPosition(Buffer,legth,(uint8_t)'='); //position of delimiter =
 80018a2:	223d      	movs	r2, #61	; 0x3d
 80018a4:	6839      	ldr	r1, [r7, #0]
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ffd3 	bl	8001852 <GetDelimiterPosition>
 80018ac:	6238      	str	r0, [r7, #32]
	if(delim_position == -1) return false; //delimiter not found
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018b4:	d101      	bne.n	80018ba <ProcessLine+0x22>
 80018b6:	2300      	movs	r3, #0
 80018b8:	e0e2      	b.n	8001a80 <ProcessLine+0x1e8>

	_command_id  = -1;
 80018ba:	4b73      	ldr	r3, [pc, #460]	; (8001a88 <ProcessLine+0x1f0>)
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018c0:	601a      	str	r2, [r3, #0]

	_command_value = 0;
 80018c2:	4b72      	ldr	r3, [pc, #456]	; (8001a8c <ProcessLine+0x1f4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
	_float_command_value = 0;
 80018c8:	4b71      	ldr	r3, [pc, #452]	; (8001a90 <ProcessLine+0x1f8>)
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
	_u32_command_value = 0;
 80018d0:	4b70      	ldr	r3, [pc, #448]	; (8001a94 <ProcessLine+0x1fc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]

	if(Buffer[0] == '/') //string start with "/"...command is convert from number
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b2f      	cmp	r3, #47	; 0x2f
 80018dc:	d133      	bne.n	8001946 <ProcessLine+0xae>
	{
		uint8_t buffer_for_id[3] = {0}; //buffer for convert
 80018de:	4b6e      	ldr	r3, [pc, #440]	; (8001a98 <ProcessLine+0x200>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	81bb      	strh	r3, [r7, #12]
 80018e4:	2300      	movs	r3, #0
 80018e6:	73bb      	strb	r3, [r7, #14]

		for(int i = 1; i<(delim_position); i++ )
 80018e8:	2301      	movs	r3, #1
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ec:	e019      	b.n	8001922 <ProcessLine+0x8a>
		{
			if(i > 3) break;// i bigger then buffer_for_id
 80018ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	dc1b      	bgt.n	800192c <ProcessLine+0x94>
			char c = Buffer[i]; //take character from Buffer
 80018f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	77fb      	strb	r3, [r7, #31]
			if(!(c >= '0' && c <= '9')) return false; //character is not number
 80018fe:	7ffb      	ldrb	r3, [r7, #31]
 8001900:	2b2f      	cmp	r3, #47	; 0x2f
 8001902:	d902      	bls.n	800190a <ProcessLine+0x72>
 8001904:	7ffb      	ldrb	r3, [r7, #31]
 8001906:	2b39      	cmp	r3, #57	; 0x39
 8001908:	d901      	bls.n	800190e <ProcessLine+0x76>
 800190a:	2300      	movs	r3, #0
 800190c:	e0b8      	b.n	8001a80 <ProcessLine+0x1e8>
			buffer_for_id[i-1] = c;
 800190e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001910:	3b01      	subs	r3, #1
 8001912:	3330      	adds	r3, #48	; 0x30
 8001914:	443b      	add	r3, r7
 8001916:	7ffa      	ldrb	r2, [r7, #31]
 8001918:	f803 2c24 	strb.w	r2, [r3, #-36]
		for(int i = 1; i<(delim_position); i++ )
 800191c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191e:	3301      	adds	r3, #1
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	429a      	cmp	r2, r3
 8001928:	dbe1      	blt.n	80018ee <ProcessLine+0x56>
 800192a:	e000      	b.n	800192e <ProcessLine+0x96>
			if(i > 3) break;// i bigger then buffer_for_id
 800192c:	bf00      	nop

		}
			_command_form = cform_short;
 800192e:	4b5b      	ldr	r3, [pc, #364]	; (8001a9c <ProcessLine+0x204>)
 8001930:	2201      	movs	r2, #1
 8001932:	701a      	strb	r2, [r3, #0]
			_command_id = atoi((char *)buffer_for_id); //convert string to int
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	4618      	mov	r0, r3
 800193a:	f008 f808 	bl	800994e <atoi>
 800193e:	4603      	mov	r3, r0
 8001940:	4a51      	ldr	r2, [pc, #324]	; (8001a88 <ProcessLine+0x1f0>)
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	e02a      	b.n	800199c <ProcessLine+0x104>
	}

	else //command not start with "/"
	{
		//search equal string in command_string table
		for(int i = 0;i<(sizeof(command_strings)/STRING_TABLE_SIZE); i++)
 8001946:	2300      	movs	r3, #0
 8001948:	62bb      	str	r3, [r7, #40]	; 0x28
 800194a:	e021      	b.n	8001990 <ProcessLine+0xf8>
		{
			if(StringIsEqual(Buffer, 0, delim_position, (uint8_t *)command_strings[i], 0, get_string_length(command_strings[i])))
 800194c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800194e:	2232      	movs	r2, #50	; 0x32
 8001950:	fb02 f303 	mul.w	r3, r2, r3
 8001954:	4a52      	ldr	r2, [pc, #328]	; (8001aa0 <ProcessLine+0x208>)
 8001956:	189c      	adds	r4, r3, r2
 8001958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195a:	2232      	movs	r2, #50	; 0x32
 800195c:	fb02 f303 	mul.w	r3, r2, r3
 8001960:	4a4f      	ldr	r2, [pc, #316]	; (8001aa0 <ProcessLine+0x208>)
 8001962:	4413      	add	r3, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff15 	bl	8001794 <get_string_length>
 800196a:	4603      	mov	r3, r0
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	2300      	movs	r3, #0
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	4623      	mov	r3, r4
 8001974:	6a3a      	ldr	r2, [r7, #32]
 8001976:	2100      	movs	r1, #0
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ff22 	bl	80017c2 <StringIsEqual>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d002      	beq.n	800198a <ProcessLine+0xf2>
			{
				_command_id  = i; //get command position
 8001984:	4a40      	ldr	r2, [pc, #256]	; (8001a88 <ProcessLine+0x1f0>)
 8001986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001988:	6013      	str	r3, [r2, #0]
		for(int i = 0;i<(sizeof(command_strings)/STRING_TABLE_SIZE); i++)
 800198a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198c:	3301      	adds	r3, #1
 800198e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001992:	2b5d      	cmp	r3, #93	; 0x5d
 8001994:	d9da      	bls.n	800194c <ProcessLine+0xb4>
			}
		}
		_command_form = cform_full;
 8001996:	4b41      	ldr	r3, [pc, #260]	; (8001a9c <ProcessLine+0x204>)
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
	}

	if(_command_id == -1) return false; //command not found
 800199c:	4b3a      	ldr	r3, [pc, #232]	; (8001a88 <ProcessLine+0x1f0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019a4:	d101      	bne.n	80019aa <ProcessLine+0x112>
 80019a6:	2300      	movs	r3, #0
 80019a8:	e06a      	b.n	8001a80 <ProcessLine+0x1e8>

	if(Command_parse[_command_id] == cparse_non) return true; //non parsing
 80019aa:	4b37      	ldr	r3, [pc, #220]	; (8001a88 <ProcessLine+0x1f0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a3d      	ldr	r2, [pc, #244]	; (8001aa4 <ProcessLine+0x20c>)
 80019b0:	5cd3      	ldrb	r3, [r2, r3]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <ProcessLine+0x122>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e062      	b.n	8001a80 <ProcessLine+0x1e8>


	uint8_t buffer_for_number[12] = {0}; //buffer for convert
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]

	//take character to convert from Buffer
	for(int i = 0; i<(legth-delim_position-1); i++ )
 80019c8:	2300      	movs	r3, #0
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
 80019cc:	e021      	b.n	8001a12 <ProcessLine+0x17a>
	{
		if(i > 11) return false;// i bigger then buffer_for_int size
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	2b0b      	cmp	r3, #11
 80019d2:	dd01      	ble.n	80019d8 <ProcessLine+0x140>
 80019d4:	2300      	movs	r3, #0
 80019d6:	e053      	b.n	8001a80 <ProcessLine+0x1e8>
		char c = Buffer[delim_position+1+i]; //take character from Buffer
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	4413      	add	r3, r2
 80019e0:	461a      	mov	r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	77bb      	strb	r3, [r7, #30]
		if(!((c >= '0' && c <= '9') || c == '.')) return false; //character is not number
 80019ea:	7fbb      	ldrb	r3, [r7, #30]
 80019ec:	2b2f      	cmp	r3, #47	; 0x2f
 80019ee:	d902      	bls.n	80019f6 <ProcessLine+0x15e>
 80019f0:	7fbb      	ldrb	r3, [r7, #30]
 80019f2:	2b39      	cmp	r3, #57	; 0x39
 80019f4:	d904      	bls.n	8001a00 <ProcessLine+0x168>
 80019f6:	7fbb      	ldrb	r3, [r7, #30]
 80019f8:	2b2e      	cmp	r3, #46	; 0x2e
 80019fa:	d001      	beq.n	8001a00 <ProcessLine+0x168>
 80019fc:	2300      	movs	r3, #0
 80019fe:	e03f      	b.n	8001a80 <ProcessLine+0x1e8>
		buffer_for_number[i] = c;
 8001a00:	f107 0210 	add.w	r2, r7, #16
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	4413      	add	r3, r2
 8001a08:	7fba      	ldrb	r2, [r7, #30]
 8001a0a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<(legth-delim_position-1); i++ )
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	3301      	adds	r3, #1
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	6a3b      	ldr	r3, [r7, #32]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	dbd6      	blt.n	80019ce <ProcessLine+0x136>
	}

	//convert buffer to number according to Command_parse
	if(Command_parse[_command_id] == cparse_int)
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <ProcessLine+0x1f0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a1f      	ldr	r2, [pc, #124]	; (8001aa4 <ProcessLine+0x20c>)
 8001a26:	5cd3      	ldrb	r3, [r2, r3]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d108      	bne.n	8001a3e <ProcessLine+0x1a6>
	{
		_command_value = atoi((char *)buffer_for_number); //convert string to int
 8001a2c:	f107 0310 	add.w	r3, r7, #16
 8001a30:	4618      	mov	r0, r3
 8001a32:	f007 ff8c 	bl	800994e <atoi>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <ProcessLine+0x1f4>)
 8001a3a:	6013      	str	r3, [r2, #0]
 8001a3c:	e01f      	b.n	8001a7e <ProcessLine+0x1e6>
	}
	else if(Command_parse[_command_id] == cparse_float)
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <ProcessLine+0x1f0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a18      	ldr	r2, [pc, #96]	; (8001aa4 <ProcessLine+0x20c>)
 8001a44:	5cd3      	ldrb	r3, [r2, r3]
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d10a      	bne.n	8001a60 <ProcessLine+0x1c8>
	{
		_float_command_value = atoff((char *)buffer_for_number); //convert string to float
 8001a4a:	f107 0310 	add.w	r3, r7, #16
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f007 ff7a 	bl	8009948 <atoff>
 8001a54:	eef0 7a40 	vmov.f32	s15, s0
 8001a58:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <ProcessLine+0x1f8>)
 8001a5a:	edc3 7a00 	vstr	s15, [r3]
 8001a5e:	e00e      	b.n	8001a7e <ProcessLine+0x1e6>
	}
	else if(Command_parse[_command_id] == cparse_u32t)
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <ProcessLine+0x1f0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a0f      	ldr	r2, [pc, #60]	; (8001aa4 <ProcessLine+0x20c>)
 8001a66:	5cd3      	ldrb	r3, [r2, r3]
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d108      	bne.n	8001a7e <ProcessLine+0x1e6>
	{
		_u32_command_value = (uint32_t)atoll((char *)buffer_for_number); //convert string to uint32_t
 8001a6c:	f107 0310 	add.w	r3, r7, #16
 8001a70:	4618      	mov	r0, r3
 8001a72:	f007 ff70 	bl	8009956 <atoll>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <ProcessLine+0x1fc>)
 8001a7c:	601a      	str	r2, [r3, #0]
	}


	return true;
 8001a7e:	2301      	movs	r3, #1
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3734      	adds	r7, #52	; 0x34
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd90      	pop	{r4, r7, pc}
 8001a88:	200002b8 	.word	0x200002b8
 8001a8c:	200002bc 	.word	0x200002bc
 8001a90:	200002c0 	.word	0x200002c0
 8001a94:	200002c4 	.word	0x200002c4
 8001a98:	0800e0a0 	.word	0x0800e0a0
 8001a9c:	200002c8 	.word	0x200002c8
 8001aa0:	0800e0ec 	.word	0x0800e0ec
 8001aa4:	20000000 	.word	0x20000000

08001aa8 <ProcessCommunication_UART>:
 *
 * @return true -> correct processing
 * @return false -> wrong command or not found new line
 */
bool ProcessCommunication_UART()
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b0a4      	sub	sp, #144	; 0x90
 8001aac:	af00      	add	r7, sp, #0
	if(!Uart_BufferNotEmpty()) return false;
 8001aae:	f002 faa3 	bl	8003ff8 <Uart_BufferNotEmpty>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f083 0301 	eor.w	r3, r3, #1
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <ProcessCommunication_UART+0x1a>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	e05c      	b.n	8001b7c <ProcessCommunication_UART+0xd4>

	uint8_t line_buffer[128] = {0};
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	f107 0308 	add.w	r3, r7, #8
 8001aca:	227c      	movs	r2, #124	; 0x7c
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f007 ff86 	bl	80099e0 <memset>
	uint8_t line_counter = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	uint32_t timeout_timer = HAL_GetTick();
 8001ada:	f003 fbed 	bl	80052b8 <HAL_GetTick>
 8001ade:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

	while(true)
	{
		if((HAL_GetTick() - timeout_timer) >= 50) return false;
 8001ae2:	f003 fbe9 	bl	80052b8 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b31      	cmp	r3, #49	; 0x31
 8001af0:	d901      	bls.n	8001af6 <ProcessCommunication_UART+0x4e>
 8001af2:	2300      	movs	r3, #0
 8001af4:	e042      	b.n	8001b7c <ProcessCommunication_UART+0xd4>
		if(!Uart_BufferNotEmpty()) continue;
 8001af6:	f002 fa7f 	bl	8003ff8 <Uart_BufferNotEmpty>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f083 0301 	eor.w	r3, r3, #1
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d138      	bne.n	8001b78 <ProcessCommunication_UART+0xd0>

		uint8_t data = Uart_ReadBuffer();
 8001b06:	f002 fab9 	bl	800407c <Uart_ReadBuffer>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

		if(data == '\n' || data == '\r')
 8001b10:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001b14:	2b0a      	cmp	r3, #10
 8001b16:	d003      	beq.n	8001b20 <ProcessCommunication_UART+0x78>
 8001b18:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001b1c:	2b0d      	cmp	r3, #13
 8001b1e:	d118      	bne.n	8001b52 <ProcessCommunication_UART+0xaa>
		{
			if(line_counter == 0) return false;
 8001b20:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <ProcessCommunication_UART+0x84>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	e027      	b.n	8001b7c <ProcessCommunication_UART+0xd4>

			bool b = ProcessLine(line_buffer, line_counter);
 8001b2c:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001b30:	1d3b      	adds	r3, r7, #4
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff feaf 	bl	8001898 <ProcessLine>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

			line_counter = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			_command_source = csource_UART;
 8001b46:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <ProcessCommunication_UART+0xdc>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
			return b;
 8001b4c:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001b50:	e014      	b.n	8001b7c <ProcessCommunication_UART+0xd4>
		}
		else
		{
			line_buffer[line_counter] = data;
 8001b52:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001b56:	3390      	adds	r3, #144	; 0x90
 8001b58:	443b      	add	r3, r7
 8001b5a:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001b5e:	f803 2c8c 	strb.w	r2, [r3, #-140]
			line_counter++;
 8001b62:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001b66:	3301      	adds	r3, #1
 8001b68:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			if(line_counter > (sizeof(line_buffer)-1)) return false;
 8001b6c:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	dab6      	bge.n	8001ae2 <ProcessCommunication_UART+0x3a>
 8001b74:	2300      	movs	r3, #0
 8001b76:	e001      	b.n	8001b7c <ProcessCommunication_UART+0xd4>
		if(!Uart_BufferNotEmpty()) continue;
 8001b78:	bf00      	nop
	{
 8001b7a:	e7b2      	b.n	8001ae2 <ProcessCommunication_UART+0x3a>
		}
	}
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3790      	adds	r7, #144	; 0x90
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200002c9 	.word	0x200002c9

08001b88 <ProcessCommunication_ETH>:
 *
 * @return true -> correct processing
 * @return false -> wrong command or not found new line
 */
bool ProcessCommunication_ETH()
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b0a4      	sub	sp, #144	; 0x90
 8001b8c:	af00      	add	r7, sp, #0
	if(!ETH_BufferNotEmpty()) return false;
 8001b8e:	f000 fb69 	bl	8002264 <ETH_BufferNotEmpty>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f083 0301 	eor.w	r3, r3, #1
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <ProcessCommunication_ETH+0x1a>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e056      	b.n	8001c50 <ProcessCommunication_ETH+0xc8>

	uint8_t line_buffer[128] = {0};
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	f107 0308 	add.w	r3, r7, #8
 8001baa:	227c      	movs	r2, #124	; 0x7c
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f007 ff16 	bl	80099e0 <memset>
	uint8_t line_counter = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	uint32_t timeout_timer = HAL_GetTick();
 8001bba:	f003 fb7d 	bl	80052b8 <HAL_GetTick>
 8001bbe:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

	while(true)
	{
		if((HAL_GetTick()-timeout_timer) >= 50) return false;
 8001bc2:	f003 fb79 	bl	80052b8 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b31      	cmp	r3, #49	; 0x31
 8001bd0:	d901      	bls.n	8001bd6 <ProcessCommunication_ETH+0x4e>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	e03c      	b.n	8001c50 <ProcessCommunication_ETH+0xc8>
		if(!ETH_BufferNotEmpty()) continue;
 8001bd6:	f000 fb45 	bl	8002264 <ETH_BufferNotEmpty>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	f083 0301 	eor.w	r3, r3, #1
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d132      	bne.n	8001c4c <ProcessCommunication_ETH+0xc4>

		uint8_t data = ETH_ReadBuffer();
 8001be6:	f000 fb8b 	bl	8002300 <ETH_ReadBuffer>
 8001bea:	4603      	mov	r3, r0
 8001bec:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

		if(data == '\n' || data == '\r')
 8001bf0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001bf4:	2b0a      	cmp	r3, #10
 8001bf6:	d003      	beq.n	8001c00 <ProcessCommunication_ETH+0x78>
 8001bf8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001bfc:	2b0d      	cmp	r3, #13
 8001bfe:	d112      	bne.n	8001c26 <ProcessCommunication_ETH+0x9e>
		{
			bool b = ProcessLine(line_buffer, line_counter);
 8001c00:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	4611      	mov	r1, r2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fe45 	bl	8001898 <ProcessLine>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

			line_counter = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			_command_source = csource_ETH;
 8001c1a:	4b0f      	ldr	r3, [pc, #60]	; (8001c58 <ProcessCommunication_ETH+0xd0>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	701a      	strb	r2, [r3, #0]
			return b;
 8001c20:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001c24:	e014      	b.n	8001c50 <ProcessCommunication_ETH+0xc8>
		}
		else
		{
			line_buffer[line_counter] = data;
 8001c26:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001c2a:	3390      	adds	r3, #144	; 0x90
 8001c2c:	443b      	add	r3, r7
 8001c2e:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001c32:	f803 2c8c 	strb.w	r2, [r3, #-140]
			line_counter++;
 8001c36:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
			if(line_counter > (sizeof(line_buffer)-1)) return false;
 8001c40:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	dabc      	bge.n	8001bc2 <ProcessCommunication_ETH+0x3a>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	e001      	b.n	8001c50 <ProcessCommunication_ETH+0xc8>
		if(!ETH_BufferNotEmpty()) continue;
 8001c4c:	bf00      	nop
	{
 8001c4e:	e7b8      	b.n	8001bc2 <ProcessCommunication_ETH+0x3a>
		}
	}
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3790      	adds	r7, #144	; 0x90
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	200002c9 	.word	0x200002c9

08001c5c <SendCommunication>:
 * @param command_id -> number of data command
 * @param data -> data to be transmitted
 *
 */
void SendCommunication(eCommand_Id command_id, int data)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b0a4      	sub	sp, #144	; 0x90
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	71fb      	strb	r3, [r7, #7]
	char sprint_buffer[128];
	uint8_t size = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	if(_command_form == cform_full)
 8001c6e:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <SendCommunication+0x94>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10f      	bne.n	8001c96 <SendCommunication+0x3a>
	{
		size = sprintf(sprint_buffer,"%s=%d\r\n",command_strings[command_id],data);
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	2232      	movs	r2, #50	; 0x32
 8001c7a:	fb02 f303 	mul.w	r3, r2, r3
 8001c7e:	4a1d      	ldr	r2, [pc, #116]	; (8001cf4 <SendCommunication+0x98>)
 8001c80:	441a      	add	r2, r3
 8001c82:	f107 000c 	add.w	r0, r7, #12
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	491b      	ldr	r1, [pc, #108]	; (8001cf8 <SendCommunication+0x9c>)
 8001c8a:	f008 fc0b 	bl	800a4a4 <siprintf>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001c94:	e00d      	b.n	8001cb2 <SendCommunication+0x56>
	}
	else if(_command_form == cform_short)
 8001c96:	4b16      	ldr	r3, [pc, #88]	; (8001cf0 <SendCommunication+0x94>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d109      	bne.n	8001cb2 <SendCommunication+0x56>
	{
		size = sprintf(sprint_buffer,"/%d=%d\r\n",(int)command_id,data);
 8001c9e:	79fa      	ldrb	r2, [r7, #7]
 8001ca0:	f107 000c 	add.w	r0, r7, #12
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	4915      	ldr	r1, [pc, #84]	; (8001cfc <SendCommunication+0xa0>)
 8001ca8:	f008 fbfc 	bl	800a4a4 <siprintf>
 8001cac:	4603      	mov	r3, r0
 8001cae:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	}

	if(_command_source == csource_UART)
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <SendCommunication+0xa4>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d109      	bne.n	8001cce <SendCommunication+0x72>
	{
		Uart_Send(sprint_buffer, size);
 8001cba:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	f107 030c 	add.w	r3, r7, #12
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f002 fa02 	bl	80040d0 <Uart_Send>
	else if(_command_source == csource_ETH)
	{
		ETH_Send(sprint_buffer, size);
	}

}
 8001ccc:	e00c      	b.n	8001ce8 <SendCommunication+0x8c>
	else if(_command_source == csource_ETH)
 8001cce:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <SendCommunication+0xa4>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d108      	bne.n	8001ce8 <SendCommunication+0x8c>
		ETH_Send(sprint_buffer, size);
 8001cd6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 fb36 	bl	8002354 <ETH_Send>
}
 8001ce8:	bf00      	nop
 8001cea:	3790      	adds	r7, #144	; 0x90
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200002c8 	.word	0x200002c8
 8001cf4:	0800e0ec 	.word	0x0800e0ec
 8001cf8:	0800e0a4 	.word	0x0800e0a4
 8001cfc:	0800e0ac 	.word	0x0800e0ac
 8001d00:	200002c9 	.word	0x200002c9

08001d04 <SendCommunication_float>:
 * @param command_id -> number of data command
 * @param data -> data to be transmitted
 *
 */
void SendCommunication_float(eCommand_Id command_id, float data)
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b09f      	sub	sp, #124	; 0x7c
 8001d08:	af02      	add	r7, sp, #8
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	ed87 0a00 	vstr	s0, [r7]
 8001d10:	71fb      	strb	r3, [r7, #7]
	char sprint_buffer[100];
	uint8_t size = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	if(_command_form == cform_full)
 8001d18:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <SendCommunication_float+0xb4>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d116      	bne.n	8001d4e <SendCommunication_float+0x4a>
	{
		size = sprintf(sprint_buffer,"%s=%f\r\n",command_strings[command_id],data);
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	2232      	movs	r2, #50	; 0x32
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	4a24      	ldr	r2, [pc, #144]	; (8001dbc <SendCommunication_float+0xb8>)
 8001d2a:	189c      	adds	r4, r3, r2
 8001d2c:	6838      	ldr	r0, [r7, #0]
 8001d2e:	f7fe fc13 	bl	8000558 <__aeabi_f2d>
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	f107 0008 	add.w	r0, r7, #8
 8001d3a:	e9cd 2300 	strd	r2, r3, [sp]
 8001d3e:	4622      	mov	r2, r4
 8001d40:	491f      	ldr	r1, [pc, #124]	; (8001dc0 <SendCommunication_float+0xbc>)
 8001d42:	f008 fbaf 	bl	800a4a4 <siprintf>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001d4c:	e014      	b.n	8001d78 <SendCommunication_float+0x74>
	}
	else if(_command_form == cform_short)
 8001d4e:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <SendCommunication_float+0xb4>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d110      	bne.n	8001d78 <SendCommunication_float+0x74>
	{
		size = sprintf(sprint_buffer,"/%d=%f\r\n",(int)command_id,data);
 8001d56:	79fc      	ldrb	r4, [r7, #7]
 8001d58:	6838      	ldr	r0, [r7, #0]
 8001d5a:	f7fe fbfd 	bl	8000558 <__aeabi_f2d>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	460b      	mov	r3, r1
 8001d62:	f107 0008 	add.w	r0, r7, #8
 8001d66:	e9cd 2300 	strd	r2, r3, [sp]
 8001d6a:	4622      	mov	r2, r4
 8001d6c:	4915      	ldr	r1, [pc, #84]	; (8001dc4 <SendCommunication_float+0xc0>)
 8001d6e:	f008 fb99 	bl	800a4a4 <siprintf>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if(_command_source == csource_UART)
 8001d78:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <SendCommunication_float+0xc4>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d109      	bne.n	8001d94 <SendCommunication_float+0x90>
	{
		Uart_Send(sprint_buffer, size);
 8001d80:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	f107 0308 	add.w	r3, r7, #8
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f002 f99f 	bl	80040d0 <Uart_Send>
	else if(_command_source == csource_ETH)
	{
		ETH_Send(sprint_buffer, size);
	}

}
 8001d92:	e00c      	b.n	8001dae <SendCommunication_float+0xaa>
	else if(_command_source == csource_ETH)
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <SendCommunication_float+0xc4>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d108      	bne.n	8001dae <SendCommunication_float+0xaa>
		ETH_Send(sprint_buffer, size);
 8001d9c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	f107 0308 	add.w	r3, r7, #8
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 fad3 	bl	8002354 <ETH_Send>
}
 8001dae:	bf00      	nop
 8001db0:	3774      	adds	r7, #116	; 0x74
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd90      	pop	{r4, r7, pc}
 8001db6:	bf00      	nop
 8001db8:	200002c8 	.word	0x200002c8
 8001dbc:	0800e0ec 	.word	0x0800e0ec
 8001dc0:	0800e0b8 	.word	0x0800e0b8
 8001dc4:	0800e0c0 	.word	0x0800e0c0
 8001dc8:	200002c9 	.word	0x200002c9

08001dcc <SendCommunication_u32>:
 * @param command_id -> number of data command
 * @param data -> data to be transmitted
 *
 */
void SendCommunication_u32(eCommand_Id command_id, uint32_t data)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b09c      	sub	sp, #112	; 0x70
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	71fb      	strb	r3, [r7, #7]
	char sprint_buffer[100];
	uint8_t size = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	if(_command_form == cform_full)
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <SendCommunication_u32+0x94>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10f      	bne.n	8001e06 <SendCommunication_u32+0x3a>
	{
		size = sprintf(sprint_buffer,"%s=%lu\r\n",command_strings[command_id],data);
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	2232      	movs	r2, #50	; 0x32
 8001dea:	fb02 f303 	mul.w	r3, r2, r3
 8001dee:	4a1d      	ldr	r2, [pc, #116]	; (8001e64 <SendCommunication_u32+0x98>)
 8001df0:	441a      	add	r2, r3
 8001df2:	f107 0008 	add.w	r0, r7, #8
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	491b      	ldr	r1, [pc, #108]	; (8001e68 <SendCommunication_u32+0x9c>)
 8001dfa:	f008 fb53 	bl	800a4a4 <siprintf>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001e04:	e00d      	b.n	8001e22 <SendCommunication_u32+0x56>
	}
	else if(_command_form == cform_short)
 8001e06:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <SendCommunication_u32+0x94>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d109      	bne.n	8001e22 <SendCommunication_u32+0x56>
	{
		size = sprintf(sprint_buffer,"/%d=%lu\r\n",(int)command_id,data);
 8001e0e:	79fa      	ldrb	r2, [r7, #7]
 8001e10:	f107 0008 	add.w	r0, r7, #8
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	4915      	ldr	r1, [pc, #84]	; (8001e6c <SendCommunication_u32+0xa0>)
 8001e18:	f008 fb44 	bl	800a4a4 <siprintf>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if(_command_source == csource_UART)
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <SendCommunication_u32+0xa4>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d109      	bne.n	8001e3e <SendCommunication_u32+0x72>
	{
		Uart_Send(sprint_buffer, size);
 8001e2a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	f107 0308 	add.w	r3, r7, #8
 8001e34:	4611      	mov	r1, r2
 8001e36:	4618      	mov	r0, r3
 8001e38:	f002 f94a 	bl	80040d0 <Uart_Send>
	else if(_command_source == csource_ETH)
	{
		ETH_Send(sprint_buffer, size);
	}

}
 8001e3c:	e00c      	b.n	8001e58 <SendCommunication_u32+0x8c>
	else if(_command_source == csource_ETH)
 8001e3e:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <SendCommunication_u32+0xa4>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d108      	bne.n	8001e58 <SendCommunication_u32+0x8c>
		ETH_Send(sprint_buffer, size);
 8001e46:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	f107 0308 	add.w	r3, r7, #8
 8001e50:	4611      	mov	r1, r2
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fa7e 	bl	8002354 <ETH_Send>
}
 8001e58:	bf00      	nop
 8001e5a:	3770      	adds	r7, #112	; 0x70
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	200002c8 	.word	0x200002c8
 8001e64:	0800e0ec 	.word	0x0800e0ec
 8001e68:	0800e0cc 	.word	0x0800e0cc
 8001e6c:	0800e0d8 	.word	0x0800e0d8
 8001e70:	200002c9 	.word	0x200002c9

08001e74 <Comunication_ResetConnectedTimer>:


void Comunication_ResetConnectedTimer()
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	ConnectedTimer = HAL_GetTick();
 8001e78:	f003 fa1e 	bl	80052b8 <HAL_GetTick>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	4a03      	ldr	r2, [pc, #12]	; (8001e8c <Comunication_ResetConnectedTimer+0x18>)
 8001e80:	6013      	str	r3, [r2, #0]
	_AppConnected = true;
 8001e82:	4b03      	ldr	r3, [pc, #12]	; (8001e90 <Comunication_ResetConnectedTimer+0x1c>)
 8001e84:	2201      	movs	r2, #1
 8001e86:	701a      	strb	r2, [r3, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	200002b0 	.word	0x200002b0
 8001e90:	200002b4 	.word	0x200002b4

08001e94 <Communication_ConnectedTimer>:

void Communication_ConnectedTimer()
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0

	  if((HAL_GetTick() - ConnectedTimer) > ConnectedTimer_Value)
 8001e98:	f003 fa0e 	bl	80052b8 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <Communication_ConnectedTimer+0x20>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ea8:	d902      	bls.n	8001eb0 <Communication_ConnectedTimer+0x1c>
	  {
		  _AppConnected = false;
 8001eaa:	4b03      	ldr	r3, [pc, #12]	; (8001eb8 <Communication_ConnectedTimer+0x24>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	701a      	strb	r2, [r3, #0]
	  }

}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	200002b0 	.word	0x200002b0
 8001eb8:	200002b4 	.word	0x200002b4

08001ebc <ErrorExecute>:

/* @brief reaction on error signal
 *
 */
void ErrorExecute(uint8_t channel)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d005      	beq.n	8001ed8 <ErrorExecute+0x1c>
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d002      	beq.n	8001ed8 <ErrorExecute+0x1c>
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d11d      	bne.n	8001f14 <ErrorExecute+0x58>

	//_Found_Error = false;

	//power good execution -> channel disable
	if(_FoundErrorforEach[channel])
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	4a10      	ldr	r2, [pc, #64]	; (8001f1c <ErrorExecute+0x60>)
 8001edc:	5cd3      	ldrb	r3, [r2, r3]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d019      	beq.n	8001f16 <ErrorExecute+0x5a>
	{
		//Channel_Enable(channel, false);

		if(MainParams.sramOffset_ErrorExecuteAutoRestore)
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <ErrorExecute+0x64>)
 8001ee4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d004      	beq.n	8001ef4 <ErrorExecute+0x38>
		{
			Channel_Restart(channel);
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f001 f881 	bl	8002ff4 <Channel_Restart>
 8001ef2:	e010      	b.n	8001f16 <ErrorExecute+0x5a>
		}
		else
		{
			ChannelsStatus[channel].disableInError = true;
 8001ef4:	79fa      	ldrb	r2, [r7, #7]
 8001ef6:	490b      	ldr	r1, [pc, #44]	; (8001f24 <ErrorExecute+0x68>)
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	440b      	add	r3, r1
 8001f02:	3312      	adds	r3, #18
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]
			Channel_Enable(channel, false);
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f000 ffb5 	bl	8002e7c <Channel_Enable>
 8001f12:	e000      	b.n	8001f16 <ErrorExecute+0x5a>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8001f14:	bf00      	nop
		else
			Channel_Enable(channel, false);
			*/
	}

}
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20000318 	.word	0x20000318
 8001f20:	20001a68 	.word	0x20001a68
 8001f24:	200019d8 	.word	0x200019d8

08001f28 <ErrorSignalTime>:


void ErrorSignalTime()
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0

	_FoundError_OR = false;
 8001f2e:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <ErrorSignalTime+0xa8>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < 6; i++)
 8001f34:	2300      	movs	r3, #0
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	e042      	b.n	8001fc0 <ErrorSignalTime+0x98>
	{
		if(*p_ERROR_data[i]) //error je 1
 8001f3a:	4a26      	ldr	r2, [pc, #152]	; (8001fd4 <ErrorSignalTime+0xac>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d014      	beq.n	8001f72 <ErrorSignalTime+0x4a>
		{
			if((HAL_GetTick() - ErrorTimer[i]) > Error_Time)
 8001f48:	f003 f9b6 	bl	80052b8 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	4922      	ldr	r1, [pc, #136]	; (8001fd8 <ErrorSignalTime+0xb0>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d914      	bls.n	8001f8a <ErrorSignalTime+0x62>
			{
				_Found_Error = true;
 8001f60:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <ErrorSignalTime+0xb4>)
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
				_FoundErrorforEach[i] = true;
 8001f66:	4a1e      	ldr	r2, [pc, #120]	; (8001fe0 <ErrorSignalTime+0xb8>)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
 8001f70:	e00b      	b.n	8001f8a <ErrorSignalTime+0x62>
			}
		}
		else
		{
			ErrorTimer[i] = HAL_GetTick();
 8001f72:	f003 f9a1 	bl	80052b8 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	4917      	ldr	r1, [pc, #92]	; (8001fd8 <ErrorSignalTime+0xb0>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			_FoundErrorforEach[i] = false;
 8001f80:	4a17      	ldr	r2, [pc, #92]	; (8001fe0 <ErrorSignalTime+0xb8>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
		}


		if(_FoundErrorforEach[i])
 8001f8a:	4a15      	ldr	r2, [pc, #84]	; (8001fe0 <ErrorSignalTime+0xb8>)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4413      	add	r3, r2
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <ErrorSignalTime+0x74>
		{
			_Found_Error = true;
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <ErrorSignalTime+0xb4>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
		}

		_FoundError_OR = _FoundError_OR | _FoundErrorforEach[i];
 8001f9c:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <ErrorSignalTime+0xb8>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <ErrorSignalTime+0xa8>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	bf14      	ite	ne
 8001fb0:	2301      	movne	r3, #1
 8001fb2:	2300      	moveq	r3, #0
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <ErrorSignalTime+0xa8>)
 8001fb8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 6; i++)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b05      	cmp	r3, #5
 8001fc4:	ddb9      	ble.n	8001f3a <ErrorSignalTime+0x12>

	}

	//_FoundError_OR = _FoundErrorforEach[0] || _FoundErrorforEach[1] || _FoundErrorforEach[2];

}
 8001fc6:	bf00      	nop
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000315 	.word	0x20000315
 8001fd4:	200002fc 	.word	0x200002fc
 8001fd8:	200002e4 	.word	0x200002e4
 8001fdc:	20000314 	.word	0x20000314
 8001fe0:	20000318 	.word	0x20000318

08001fe4 <ErrorTimerReset>:

void ErrorTimerReset(int channel)
{
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	ErrorTimer[channel] = HAL_GetTick();
 8001fec:	f003 f964 	bl	80052b8 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	4908      	ldr	r1, [pc, #32]	; (8002014 <ErrorTimerReset+0x30>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	ErrorTimer[channel+3 ] = HAL_GetTick();
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	1cdc      	adds	r4, r3, #3
 8001ffe:	f003 f95b 	bl	80052b8 <HAL_GetTick>
 8002002:	4603      	mov	r3, r0
 8002004:	4a03      	ldr	r2, [pc, #12]	; (8002014 <ErrorTimerReset+0x30>)
 8002006:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	bd90      	pop	{r4, r7, pc}
 8002012:	bf00      	nop
 8002014:	200002e4 	.word	0x200002e4

08002018 <ErrorProcess>:
 *  write to _Found_Error:
 *  	true -> found error
 *  	false -> non error
 */
void ErrorProcess()
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0

	for(int errbit = 0; errbit < 6; errbit++)
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	e02c      	b.n	800207e <ErrorProcess+0x66>
	{
		int ee = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < Error_Array_Size ; i++)
 8002028:	2300      	movs	r3, #0
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	e011      	b.n	8002052 <ErrorProcess+0x3a>
		{
			if(Error_Array_Reg[i] & (1 << errbit)) ee++;
 800202e:	4a19      	ldr	r2, [pc, #100]	; (8002094 <ErrorProcess+0x7c>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4413      	add	r3, r2
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	fa42 f303 	asr.w	r3, r2, r3
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <ErrorProcess+0x34>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	3301      	adds	r3, #1
 800204a:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < Error_Array_Size ; i++)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3301      	adds	r3, #1
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b13      	cmp	r3, #19
 8002056:	ddea      	ble.n	800202e <ErrorProcess+0x16>
		}

		if(ee >= Error_Threshold)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b0f      	cmp	r3, #15
 800205c:	dd06      	ble.n	800206c <ErrorProcess+0x54>
		{
			*p_ERROR_data[errbit] = true;
 800205e:	4a0e      	ldr	r2, [pc, #56]	; (8002098 <ErrorProcess+0x80>)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
 800206a:	e005      	b.n	8002078 <ErrorProcess+0x60>
			//_Found_Error = true;
		}
		else
		{
			*p_ERROR_data[errbit] = false;
 800206c:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <ErrorProcess+0x80>)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
	for(int errbit = 0; errbit < 6; errbit++)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3301      	adds	r3, #1
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b05      	cmp	r3, #5
 8002082:	ddcf      	ble.n	8002024 <ErrorProcess+0xc>
		}

	}
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	200002cc 	.word	0x200002cc
 8002098:	200002fc 	.word	0x200002fc

0800209c <ErrorSignalsRead>:
 *
 * @return true -> found error, after process (after Error_Array_Size counts)
 * @return false -> non error
 */
void ErrorSignalsRead()
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0

	uint8_t temp_error_reg = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	71fb      	strb	r3, [r7, #7]
	
	if(ChannelsStatus[0].enable && !ChannelsChange[0].restart_request)
 80020a6:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <ErrorSignalsRead+0x144>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d026      	beq.n	80020fc <ErrorSignalsRead+0x60>
 80020ae:	4b4d      	ldr	r3, [pc, #308]	; (80021e4 <ErrorSignalsRead+0x148>)
 80020b0:	78db      	ldrb	r3, [r3, #3]
 80020b2:	f083 0301 	eor.w	r3, r3, #1
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01f      	beq.n	80020fc <ErrorSignalsRead+0x60>
	{
		temp_error_reg |= (!((bool)HAL_GPIO_ReadPin(PG_1_GPIO_Port, PG_1_Pin)))  << 0;
 80020bc:	2110      	movs	r1, #16
 80020be:	484a      	ldr	r0, [pc, #296]	; (80021e8 <ErrorSignalsRead+0x14c>)
 80020c0:	f004 f902 	bl	80062c8 <HAL_GPIO_ReadPin>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	bf0c      	ite	eq
 80020ca:	2301      	moveq	r3, #1
 80020cc:	2300      	movne	r3, #0
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	b25a      	sxtb	r2, r3
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	b25b      	sxtb	r3, r3
 80020da:	71fb      	strb	r3, [r7, #7]
		temp_error_reg |= ((bool)HAL_GPIO_ReadPin(OC_1_GPIO_Port, OC_1_Pin))  << 3;
 80020dc:	2140      	movs	r1, #64	; 0x40
 80020de:	4842      	ldr	r0, [pc, #264]	; (80021e8 <ErrorSignalsRead+0x14c>)
 80020e0:	f004 f8f2 	bl	80062c8 <HAL_GPIO_ReadPin>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <ErrorSignalsRead+0x52>
 80020ea:	2308      	movs	r3, #8
 80020ec:	e000      	b.n	80020f0 <ErrorSignalsRead+0x54>
 80020ee:	2300      	movs	r3, #0
 80020f0:	b25a      	sxtb	r2, r3
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	b25b      	sxtb	r3, r3
 80020fa:	71fb      	strb	r3, [r7, #7]
	}

	if(ChannelsStatus[1].enable && !ChannelsChange[1].restart_request)
 80020fc:	4b38      	ldr	r3, [pc, #224]	; (80021e0 <ErrorSignalsRead+0x144>)
 80020fe:	7d1b      	ldrb	r3, [r3, #20]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d026      	beq.n	8002152 <ErrorSignalsRead+0xb6>
 8002104:	4b37      	ldr	r3, [pc, #220]	; (80021e4 <ErrorSignalsRead+0x148>)
 8002106:	7fdb      	ldrb	r3, [r3, #31]
 8002108:	f083 0301 	eor.w	r3, r3, #1
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d01f      	beq.n	8002152 <ErrorSignalsRead+0xb6>
	{
		temp_error_reg |= (!((bool)HAL_GPIO_ReadPin(PG_2_GPIO_Port, PG_2_Pin)))  << 1;
 8002112:	2120      	movs	r1, #32
 8002114:	4834      	ldr	r0, [pc, #208]	; (80021e8 <ErrorSignalsRead+0x14c>)
 8002116:	f004 f8d7 	bl	80062c8 <HAL_GPIO_ReadPin>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <ErrorSignalsRead+0x88>
 8002120:	2302      	movs	r3, #2
 8002122:	e000      	b.n	8002126 <ErrorSignalsRead+0x8a>
 8002124:	2300      	movs	r3, #0
 8002126:	b25a      	sxtb	r2, r3
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	4313      	orrs	r3, r2
 800212e:	b25b      	sxtb	r3, r3
 8002130:	71fb      	strb	r3, [r7, #7]
		temp_error_reg |= ((bool)HAL_GPIO_ReadPin(OC_3_GPIO_Port, OC_2_Pin))  << 4;
 8002132:	2180      	movs	r1, #128	; 0x80
 8002134:	482c      	ldr	r0, [pc, #176]	; (80021e8 <ErrorSignalsRead+0x14c>)
 8002136:	f004 f8c7 	bl	80062c8 <HAL_GPIO_ReadPin>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <ErrorSignalsRead+0xa8>
 8002140:	2310      	movs	r3, #16
 8002142:	e000      	b.n	8002146 <ErrorSignalsRead+0xaa>
 8002144:	2300      	movs	r3, #0
 8002146:	b25a      	sxtb	r2, r3
 8002148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214c:	4313      	orrs	r3, r2
 800214e:	b25b      	sxtb	r3, r3
 8002150:	71fb      	strb	r3, [r7, #7]
	}

	if(ChannelsStatus[2].enable && !ChannelsChange[2].restart_request)
 8002152:	4b23      	ldr	r3, [pc, #140]	; (80021e0 <ErrorSignalsRead+0x144>)
 8002154:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002158:	2b00      	cmp	r3, #0
 800215a:	d028      	beq.n	80021ae <ErrorSignalsRead+0x112>
 800215c:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <ErrorSignalsRead+0x148>)
 800215e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8002162:	f083 0301 	eor.w	r3, r3, #1
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d020      	beq.n	80021ae <ErrorSignalsRead+0x112>
	{
		temp_error_reg |= (!((bool)HAL_GPIO_ReadPin(PG_3_GPIO_Port, PG_3_Pin)))  << 2;
 800216c:	2104      	movs	r1, #4
 800216e:	481f      	ldr	r0, [pc, #124]	; (80021ec <ErrorSignalsRead+0x150>)
 8002170:	f004 f8aa 	bl	80062c8 <HAL_GPIO_ReadPin>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <ErrorSignalsRead+0xe2>
 800217a:	2304      	movs	r3, #4
 800217c:	e000      	b.n	8002180 <ErrorSignalsRead+0xe4>
 800217e:	2300      	movs	r3, #0
 8002180:	b25a      	sxtb	r2, r3
 8002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002186:	4313      	orrs	r3, r2
 8002188:	b25b      	sxtb	r3, r3
 800218a:	71fb      	strb	r3, [r7, #7]
		temp_error_reg |= ((bool)HAL_GPIO_ReadPin(OC_3_GPIO_Port, OC_3_Pin))  << 5;
 800218c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002190:	4815      	ldr	r0, [pc, #84]	; (80021e8 <ErrorSignalsRead+0x14c>)
 8002192:	f004 f899 	bl	80062c8 <HAL_GPIO_ReadPin>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <ErrorSignalsRead+0x104>
 800219c:	2320      	movs	r3, #32
 800219e:	e000      	b.n	80021a2 <ErrorSignalsRead+0x106>
 80021a0:	2300      	movs	r3, #0
 80021a2:	b25a      	sxtb	r2, r3
 80021a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	b25b      	sxtb	r3, r3
 80021ac:	71fb      	strb	r3, [r7, #7]
	}



	Error_Array_Reg[Error_Array_Counter] = temp_error_reg;
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <ErrorSignalsRead+0x154>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	4619      	mov	r1, r3
 80021b4:	4a0f      	ldr	r2, [pc, #60]	; (80021f4 <ErrorSignalsRead+0x158>)
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	5453      	strb	r3, [r2, r1]
	Error_Array_Counter++;
 80021ba:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <ErrorSignalsRead+0x154>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	3301      	adds	r3, #1
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <ErrorSignalsRead+0x154>)
 80021c4:	701a      	strb	r2, [r3, #0]
	if(Error_Array_Counter > (Error_Array_Size - 1))
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <ErrorSignalsRead+0x154>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b13      	cmp	r3, #19
 80021cc:	d904      	bls.n	80021d8 <ErrorSignalsRead+0x13c>
	{
		Error_Array_Counter = 0;
 80021ce:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <ErrorSignalsRead+0x154>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	701a      	strb	r2, [r3, #0]
		ErrorProcess();
 80021d4:	f7ff ff20 	bl	8002018 <ErrorProcess>
	}
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	200019d8 	.word	0x200019d8
 80021e4:	20001a14 	.word	0x20001a14
 80021e8:	40020800 	.word	0x40020800
 80021ec:	40020400 	.word	0x40020400
 80021f0:	200002e0 	.word	0x200002e0
 80021f4:	200002cc 	.word	0x200002cc

080021f8 <AppConnectedExecute>:


void AppConnectedExecute(bool AppConnected)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, AppConnected);

	if(AppConnected)
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <AppConnectedExecute+0x18>
	{
		 LEDs_GREEN_LED1.mode = LEDS_FAST_FLASH;
 8002208:	4b14      	ldr	r3, [pc, #80]	; (800225c <AppConnectedExecute+0x64>)
 800220a:	2203      	movs	r2, #3
 800220c:	725a      	strb	r2, [r3, #9]
 800220e:	e002      	b.n	8002216 <AppConnectedExecute+0x1e>
	}
	else
	{
		 LEDs_GREEN_LED1.mode = LEDS_SLOW_BLINK;
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <AppConnectedExecute+0x64>)
 8002212:	2206      	movs	r2, #6
 8002214:	725a      	strb	r2, [r3, #9]
	}

	if((AppConnected == false) && MainParams.sramOffset_DisableSupplyInLostConnection)
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	f083 0301 	eor.w	r3, r3, #1
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d018      	beq.n	8002254 <AppConnectedExecute+0x5c>
 8002222:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <AppConnectedExecute+0x68>)
 8002224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002226:	2b00      	cmp	r3, #0
 8002228:	d014      	beq.n	8002254 <AppConnectedExecute+0x5c>
	{

		for(int i = 0; i< 3; i++)
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	e00e      	b.n	800224e <AppConnectedExecute+0x56>
		{
			Channel_Enable(i, false);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2100      	movs	r1, #0
 8002236:	4618      	mov	r0, r3
 8002238:	f000 fe20 	bl	8002e7c <Channel_Enable>
			Channel_Output(i, false);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f001 f81e 	bl	8003284 <Channel_Output>
		for(int i = 0; i< 3; i++)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	3301      	adds	r3, #1
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2b02      	cmp	r3, #2
 8002252:	dded      	ble.n	8002230 <AppConnectedExecute+0x38>
		}

	}
}
 8002254:	bf00      	nop
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	2000199c 	.word	0x2000199c
 8002260:	20001a68 	.word	0x20001a68

08002264 <ETH_BufferNotEmpty>:
 *
 * @return true -> FIFO is not empty
 * @return false -> FIFO is empty
 */
bool ETH_BufferNotEmpty()
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
	return (eth_bcounter > 0);
 8002268:	4b05      	ldr	r3, [pc, #20]	; (8002280 <ETH_BufferNotEmpty+0x1c>)
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	bf14      	ite	ne
 8002270:	2301      	movne	r3, #1
 8002272:	2300      	moveq	r3, #0
 8002274:	b2db      	uxtb	r3, r3
}
 8002276:	4618      	mov	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	20001324 	.word	0x20001324

08002284 <ETH_WriteBuffer>:

/* @brief function add data byte to FIFO
 *
 */
void ETH_WriteBuffer(const uint8_t *Buffer, int length)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
	for(int i = 0;i<length;i++)
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	e024      	b.n	80022de <ETH_WriteBuffer+0x5a>
	{
		if(eth_bcounter >= (eth_buffer_size-1)) return;
 8002294:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <ETH_WriteBuffer+0x70>)
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	f640 72fe 	movw	r2, #4094	; 0xffe
 800229c:	4293      	cmp	r3, r2
 800229e:	d823      	bhi.n	80022e8 <ETH_WriteBuffer+0x64>

		eth_buffer[eth_wpointer] = Buffer[i];
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <ETH_WriteBuffer+0x74>)
 80022a8:	8812      	ldrh	r2, [r2, #0]
 80022aa:	7819      	ldrb	r1, [r3, #0]
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <ETH_WriteBuffer+0x78>)
 80022ae:	5499      	strb	r1, [r3, r2]
		eth_bcounter++;
 80022b0:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <ETH_WriteBuffer+0x70>)
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	4b0e      	ldr	r3, [pc, #56]	; (80022f4 <ETH_WriteBuffer+0x70>)
 80022ba:	801a      	strh	r2, [r3, #0]
		eth_wpointer++;
 80022bc:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <ETH_WriteBuffer+0x74>)
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	3301      	adds	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <ETH_WriteBuffer+0x74>)
 80022c6:	801a      	strh	r2, [r3, #0]
		if(eth_wpointer > eth_buffer_size - 1) eth_wpointer = 0;
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <ETH_WriteBuffer+0x74>)
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022d0:	d302      	bcc.n	80022d8 <ETH_WriteBuffer+0x54>
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <ETH_WriteBuffer+0x74>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	801a      	strh	r2, [r3, #0]
	for(int i = 0;i<length;i++)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	3301      	adds	r3, #1
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	dbd6      	blt.n	8002294 <ETH_WriteBuffer+0x10>
 80022e6:	e000      	b.n	80022ea <ETH_WriteBuffer+0x66>
		if(eth_bcounter >= (eth_buffer_size-1)) return;
 80022e8:	bf00      	nop
	}
}
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	20001324 	.word	0x20001324
 80022f8:	20001320 	.word	0x20001320
 80022fc:	20000320 	.word	0x20000320

08002300 <ETH_ReadBuffer>:
/* @brief read data byty from FIFO
 *
 * @return one element uint8_t data 
 */
uint8_t ETH_ReadBuffer()
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
	uint8_t data = eth_buffer[eth_rpointer];
 8002306:	4b10      	ldr	r3, [pc, #64]	; (8002348 <ETH_ReadBuffer+0x48>)
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <ETH_ReadBuffer+0x4c>)
 800230e:	5c9b      	ldrb	r3, [r3, r2]
 8002310:	71fb      	strb	r3, [r7, #7]
	eth_bcounter--;
 8002312:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <ETH_ReadBuffer+0x50>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	3b01      	subs	r3, #1
 8002318:	b29a      	uxth	r2, r3
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <ETH_ReadBuffer+0x50>)
 800231c:	801a      	strh	r2, [r3, #0]
	eth_rpointer++;
 800231e:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <ETH_ReadBuffer+0x48>)
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	3301      	adds	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	4b08      	ldr	r3, [pc, #32]	; (8002348 <ETH_ReadBuffer+0x48>)
 8002328:	801a      	strh	r2, [r3, #0]
	if(eth_rpointer > eth_buffer_size - 1) eth_rpointer = 0;
 800232a:	4b07      	ldr	r3, [pc, #28]	; (8002348 <ETH_ReadBuffer+0x48>)
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002332:	d302      	bcc.n	800233a <ETH_ReadBuffer+0x3a>
 8002334:	4b04      	ldr	r3, [pc, #16]	; (8002348 <ETH_ReadBuffer+0x48>)
 8002336:	2200      	movs	r2, #0
 8002338:	801a      	strh	r2, [r3, #0]

	return data;
 800233a:	79fb      	ldrb	r3, [r7, #7]
}
 800233c:	4618      	mov	r0, r3
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	20001322 	.word	0x20001322
 800234c:	20000320 	.word	0x20000320
 8002350:	20001324 	.word	0x20001324

08002354 <ETH_Send>:
 * @param data -> pointer on data buffer with message
 * @param size -> lenght of data buffer
 *
 */
void ETH_Send(char *data, uint16_t size)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	807b      	strh	r3, [r7, #2]
	ETH_udp_Transmit((uint8_t *)data,size);
 8002360:	887b      	ldrh	r3, [r7, #2]
 8002362:	4619      	mov	r1, r3
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f001 fdd1 	bl	8003f0c <ETH_udp_Transmit>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <GetCoef_k>:
/* @brief get K coeficient for ADC
 *
 *	@channel -> adc channel
 */
float GetCoef_k(int channel)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	float *addr = ((float *)&MainParams.sramOffset_ReadCoef_k_0) + channel;//  + (4 * channel);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4a06      	ldr	r2, [pc, #24]	; (800239c <GetCoef_k+0x28>)
 8002382:	4413      	add	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
	return *addr;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	ee07 3a90 	vmov	s15, r3
}
 800238e:	eeb0 0a67 	vmov.f32	s0, s15
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	20001a7c 	.word	0x20001a7c

080023a0 <GetCoef_q>:
/* @brief get Q coeficient for ADC
 *
 *	@channel -> adc channel
 */
float GetCoef_q(int channel)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
	float *addr =((float *)&MainParams.sramOffset_ReadCoef_q_0) + channel;//  + (4 * channel);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	4a06      	ldr	r2, [pc, #24]	; (80023c8 <GetCoef_q+0x28>)
 80023ae:	4413      	add	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
	return *addr;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	ee07 3a90 	vmov	s15, r3
}
 80023ba:	eeb0 0a67 	vmov.f32	s0, s15
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	20001a94 	.word	0x20001a94

080023cc <StoreADCConstant>:
 * @param value -> value of coefficient
 *
 *
 */
void StoreADCConstant(uint8_t coef, float value)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	ed87 0a00 	vstr	s0, [r7]
 80023d8:	71fb      	strb	r3, [r7, #7]
	float *addr = ((float *)&MainParams.sramOffset_ReadCoef_k_0) + coef;//  + (4 * channel);
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <StoreADCConstant+0x2c>)
 80023e0:	4413      	add	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]
	*addr = value;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	601a      	str	r2, [r3, #0]
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20001a7c 	.word	0x20001a7c

080023fc <SendADCCoefficients>:
/* @brief send ADC coefficients to communication
 *
 *
 */
void SendADCCoefficients()
{
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
	for(int i = 0;i<12;i++)
 8002402:	2300      	movs	r3, #0
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	e010      	b.n	800242a <SendADCCoefficients+0x2e>
	{
		SendCommunication_float(cmd_adc_get_k0 + i,GetCoef_k(i));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	332d      	adds	r3, #45	; 0x2d
 800240e:	b2dc      	uxtb	r4, r3
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ffaf 	bl	8002374 <GetCoef_k>
 8002416:	eef0 7a40 	vmov.f32	s15, s0
 800241a:	eeb0 0a67 	vmov.f32	s0, s15
 800241e:	4620      	mov	r0, r4
 8002420:	f7ff fc70 	bl	8001d04 <SendCommunication_float>
	for(int i = 0;i<12;i++)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3301      	adds	r3, #1
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b0b      	cmp	r3, #11
 800242e:	ddeb      	ble.n	8002408 <SendADCCoefficients+0xc>
	}
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	bd90      	pop	{r4, r7, pc}

0800243a <CalcAvg>:
 *
 * @return average of array
 *
 */
uint16_t CalcAvg(uint16_t *array, uint16_t length)
{
 800243a:	b480      	push	{r7}
 800243c:	b085      	sub	sp, #20
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	807b      	strh	r3, [r7, #2]
	uint32_t AVG = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]

	for(int i = 0; i<length ; i++)
 800244a:	2300      	movs	r3, #0
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	e00b      	b.n	8002468 <CalcAvg+0x2e>
	{
		AVG += array[i];
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	4413      	add	r3, r2
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4413      	add	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i<length ; i++)
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	3301      	adds	r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	887b      	ldrh	r3, [r7, #2]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	429a      	cmp	r2, r3
 800246e:	dbef      	blt.n	8002450 <CalcAvg+0x16>
	}

	return (AVG/length);
 8002470:	887b      	ldrh	r3, [r7, #2]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	fbb2 f3f3 	udiv	r3, r2, r3
 8002478:	b29b      	uxth	r3, r3
}
 800247a:	4618      	mov	r0, r3
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <CalcAdcValue>:
 * @param value -> ADC data
 *
 * @return voltage or current (float)
 */
float CalcAdcValue(uint8_t channel,uint16_t value)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	460a      	mov	r2, r1
 8002492:	71fb      	strb	r3, [r7, #7]
 8002494:	4613      	mov	r3, r2
 8002496:	80bb      	strh	r3, [r7, #4]
	float f = (float)value/ADC_coef;
 8002498:	88bb      	ldrh	r3, [r7, #4]
 800249a:	ee07 3a90 	vmov	s15, r3
 800249e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a2:	ee17 0a90 	vmov	r0, s15
 80024a6:	f7fe f857 	bl	8000558 <__aeabi_f2d>
 80024aa:	a317      	add	r3, pc, #92	; (adr r3, 8002508 <CalcAdcValue+0x80>)
 80024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b0:	f7fe f9d4 	bl	800085c <__aeabi_ddiv>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	f7fe fb9c 	bl	8000bf8 <__aeabi_d2f>
 80024c0:	4603      	mov	r3, r0
 80024c2:	617b      	str	r3, [r7, #20]

	float Coef_k = GetCoef_k(channel);
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff ff54 	bl	8002374 <GetCoef_k>
 80024cc:	ed87 0a04 	vstr	s0, [r7, #16]
	float Coef_q = GetCoef_q(channel);
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff ff64 	bl	80023a0 <GetCoef_q>
 80024d8:	ed87 0a03 	vstr	s0, [r7, #12]


	f = (f - Coef_q) / Coef_k;
 80024dc:	ed97 7a05 	vldr	s14, [r7, #20]
 80024e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80024e4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80024ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024f0:	edc7 7a05 	vstr	s15, [r7, #20]

	return f;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	ee07 3a90 	vmov	s15, r3
}
 80024fa:	eeb0 0a67 	vmov.f32	s0, s15
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	f3af 8000 	nop.w
 8002508:	7b0b3919 	.word	0x7b0b3919
 800250c:	4093665a 	.word	0x4093665a

08002510 <ReadADCChannels>:
 *
 *	data save to Read_Data
 *
 */
void ReadADCChannels()
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8002516:	2200      	movs	r2, #0
 8002518:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800251c:	4809      	ldr	r0, [pc, #36]	; (8002544 <ReadADCChannels+0x34>)
 800251e:	f003 feeb 	bl	80062f8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, Adresses, Read_Data, 8,2);
 8002522:	2302      	movs	r3, #2
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	2308      	movs	r3, #8
 8002528:	4a07      	ldr	r2, [pc, #28]	; (8002548 <ReadADCChannels+0x38>)
 800252a:	4908      	ldr	r1, [pc, #32]	; (800254c <ReadADCChannels+0x3c>)
 800252c:	4808      	ldr	r0, [pc, #32]	; (8002550 <ReadADCChannels+0x40>)
 800252e:	f004 ff6f 	bl	8007410 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8002532:	2201      	movs	r2, #1
 8002534:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <ReadADCChannels+0x34>)
 800253a:	f003 fedd 	bl	80062f8 <HAL_GPIO_WritePin>
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40020400 	.word	0x40020400
 8002548:	2000196c 	.word	0x2000196c
 800254c:	20000060 	.word	0x20000060
 8002550:	20002c58 	.word	0x20002c58

08002554 <ADCStore>:
 *
 *	processed data (measurement average) are saved on selected addresses in p_ADC_data array
 *
 */
void ADCStore()
{
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af00      	add	r7, sp, #0
	//save data from ADC data read buffer
	for(int i = 0;i<8;i++)
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
 800255e:	e01d      	b.n	800259c <ADCStore+0x48>
	{
		meas_data[i][meas_counter] = 0 | Read_Data[2*i] | (Read_Data[(2*i)+1] << 8);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	4a33      	ldr	r2, [pc, #204]	; (8002634 <ADCStore+0xe0>)
 8002566:	5cd3      	ldrb	r3, [r2, r3]
 8002568:	b21a      	sxth	r2, r3
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	3301      	adds	r3, #1
 8002570:	4930      	ldr	r1, [pc, #192]	; (8002634 <ADCStore+0xe0>)
 8002572:	5ccb      	ldrb	r3, [r1, r3]
 8002574:	021b      	lsls	r3, r3, #8
 8002576:	b21b      	sxth	r3, r3
 8002578:	4313      	orrs	r3, r2
 800257a:	b21a      	sxth	r2, r3
 800257c:	4b2e      	ldr	r3, [pc, #184]	; (8002638 <ADCStore+0xe4>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	461c      	mov	r4, r3
 8002582:	b290      	uxth	r0, r2
 8002584:	4a2d      	ldr	r2, [pc, #180]	; (800263c <ADCStore+0xe8>)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	2164      	movs	r1, #100	; 0x64
 800258a:	fb01 f303 	mul.w	r3, r1, r3
 800258e:	4423      	add	r3, r4
 8002590:	4601      	mov	r1, r0
 8002592:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0;i<8;i++)
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3301      	adds	r3, #1
 800259a:	61fb      	str	r3, [r7, #28]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	2b07      	cmp	r3, #7
 80025a0:	ddde      	ble.n	8002560 <ADCStore+0xc>
	}

	meas_counter++;
 80025a2:	4b25      	ldr	r3, [pc, #148]	; (8002638 <ADCStore+0xe4>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	3301      	adds	r3, #1
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4b23      	ldr	r3, [pc, #140]	; (8002638 <ADCStore+0xe4>)
 80025ac:	701a      	strb	r2, [r3, #0]

	//all buffers full - calculate average and store on selected addresses
	if(meas_counter > (meas_size - 1))
 80025ae:	4b22      	ldr	r3, [pc, #136]	; (8002638 <ADCStore+0xe4>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b63      	cmp	r3, #99	; 0x63
 80025b4:	d939      	bls.n	800262a <ADCStore+0xd6>
	{
		meas_counter = 0;
 80025b6:	4b20      	ldr	r3, [pc, #128]	; (8002638 <ADCStore+0xe4>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]

		uint16_t avg[8];
		for(int i = 0; i < 8 ;i++)
 80025bc:	2300      	movs	r3, #0
 80025be:	61bb      	str	r3, [r7, #24]
 80025c0:	e014      	b.n	80025ec <ADCStore+0x98>
		{
			avg[i] = CalcAvg(meas_data[i], meas_size); //calculate average
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	22c8      	movs	r2, #200	; 0xc8
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	4a1c      	ldr	r2, [pc, #112]	; (800263c <ADCStore+0xe8>)
 80025cc:	4413      	add	r3, r2
 80025ce:	2164      	movs	r1, #100	; 0x64
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff32 	bl	800243a <CalcAvg>
 80025d6:	4603      	mov	r3, r0
 80025d8:	461a      	mov	r2, r3
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	3320      	adds	r3, #32
 80025e0:	443b      	add	r3, r7
 80025e2:	f823 2c1c 	strh.w	r2, [r3, #-28]
		for(int i = 0; i < 8 ;i++)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	3301      	adds	r3, #1
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	2b07      	cmp	r3, #7
 80025f0:	dde7      	ble.n	80025c2 <ADCStore+0x6e>
		}

		for(int i = 0; i<6;i++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	e015      	b.n	8002624 <ADCStore+0xd0>
		{
			*p_ADC_data[i] = CalcAdcValue(i,avg[i]); //calculate value(voltage or current and saved on selected addresses)
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	3320      	adds	r3, #32
 8002602:	443b      	add	r3, r7
 8002604:	f833 1c1c 	ldrh.w	r1, [r3, #-28]
 8002608:	480d      	ldr	r0, [pc, #52]	; (8002640 <ADCStore+0xec>)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
 8002610:	4610      	mov	r0, r2
 8002612:	f7ff ff39 	bl	8002488 <CalcAdcValue>
 8002616:	eef0 7a40 	vmov.f32	s15, s0
 800261a:	edc4 7a00 	vstr	s15, [r4]
		for(int i = 0; i<6;i++)
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	3301      	adds	r3, #1
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2b05      	cmp	r3, #5
 8002628:	dde6      	ble.n	80025f8 <ADCStore+0xa4>
		}

	}
}
 800262a:	bf00      	nop
 800262c:	3724      	adds	r7, #36	; 0x24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd90      	pop	{r4, r7, pc}
 8002632:	bf00      	nop
 8002634:	2000196c 	.word	0x2000196c
 8002638:	20001968 	.word	0x20001968
 800263c:	20001328 	.word	0x20001328
 8002640:	2000197c 	.word	0x2000197c

08002644 <LedSwitch>:

/* @brief switch red led on nucleo board
 *
 */
void LedSwitch(int value)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, value);
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <Enable_GPIO>:
 * @param channel -> channel of power supply
 * @param value   -> enable-true, disable-false
 *
 */
void Enable_GPIO(uint8_t channel, bool value)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	460a      	mov	r2, r1
 8002662:	71fb      	strb	r3, [r7, #7]
 8002664:	4613      	mov	r3, r2
 8002666:	71bb      	strb	r3, [r7, #6]
	switch(channel)
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d015      	beq.n	800269a <Enable_GPIO+0x42>
 800266e:	2b02      	cmp	r3, #2
 8002670:	dc1b      	bgt.n	80026aa <Enable_GPIO+0x52>
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <Enable_GPIO+0x24>
 8002676:	2b01      	cmp	r3, #1
 8002678:	d007      	beq.n	800268a <Enable_GPIO+0x32>
		case 2:
			HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, value);
			break;

		default:
			break;
 800267a:	e016      	b.n	80026aa <Enable_GPIO+0x52>
			HAL_GPIO_WritePin(EN_1_GPIO_Port, EN_1_Pin, value);
 800267c:	79bb      	ldrb	r3, [r7, #6]
 800267e:	461a      	mov	r2, r3
 8002680:	2108      	movs	r1, #8
 8002682:	480c      	ldr	r0, [pc, #48]	; (80026b4 <Enable_GPIO+0x5c>)
 8002684:	f003 fe38 	bl	80062f8 <HAL_GPIO_WritePin>
			break;
 8002688:	e010      	b.n	80026ac <Enable_GPIO+0x54>
			HAL_GPIO_WritePin(EN_2_GPIO_Port, EN_2_Pin, value);
 800268a:	79bb      	ldrb	r3, [r7, #6]
 800268c:	461a      	mov	r2, r3
 800268e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002692:	4809      	ldr	r0, [pc, #36]	; (80026b8 <Enable_GPIO+0x60>)
 8002694:	f003 fe30 	bl	80062f8 <HAL_GPIO_WritePin>
			break;
 8002698:	e008      	b.n	80026ac <Enable_GPIO+0x54>
			HAL_GPIO_WritePin(EN_3_GPIO_Port, EN_3_Pin, value);
 800269a:	79bb      	ldrb	r3, [r7, #6]
 800269c:	461a      	mov	r2, r3
 800269e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026a2:	4805      	ldr	r0, [pc, #20]	; (80026b8 <Enable_GPIO+0x60>)
 80026a4:	f003 fe28 	bl	80062f8 <HAL_GPIO_WritePin>
			break;
 80026a8:	e000      	b.n	80026ac <Enable_GPIO+0x54>
			break;
 80026aa:	bf00      	nop

	}
}
 80026ac:	bf00      	nop
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40020800 	.word	0x40020800
 80026b8:	40020400 	.word	0x40020400

080026bc <Output_GPIO>:
 * @param relay_p   -> relay for positive polarity (direct relay)
 * @param relay_n   -> relay for negative polarity (reverse relay)
 *
 */
void Output_GPIO(uint8_t channel, bool relay_p, bool relay_n)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	4603      	mov	r3, r0
 80026c4:	71fb      	strb	r3, [r7, #7]
 80026c6:	460b      	mov	r3, r1
 80026c8:	71bb      	strb	r3, [r7, #6]
 80026ca:	4613      	mov	r3, r2
 80026cc:	717b      	strb	r3, [r7, #5]
	if(relay_p && relay_n) return;
 80026ce:	79bb      	ldrb	r3, [r7, #6]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <Output_GPIO+0x1e>
 80026d4:	797b      	ldrb	r3, [r7, #5]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d133      	bne.n	8002742 <Output_GPIO+0x86>

	switch(channel)
 80026da:	79fb      	ldrb	r3, [r7, #7]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d022      	beq.n	8002726 <Output_GPIO+0x6a>
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	dc30      	bgt.n	8002746 <Output_GPIO+0x8a>
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d002      	beq.n	80026ee <Output_GPIO+0x32>
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d00e      	beq.n	800270a <Output_GPIO+0x4e>
			HAL_GPIO_WritePin(SWDIR_3_GPIO_Port, SWDIR_3_Pin, relay_p);
			HAL_GPIO_WritePin(SWREV_3_GPIO_Port, SWREV_3_Pin, relay_n);
			break;

		default:
			break;
 80026ec:	e02b      	b.n	8002746 <Output_GPIO+0x8a>
			HAL_GPIO_WritePin(SWDIR_1_GPIO_Port, SWDIR_1_Pin, relay_p);
 80026ee:	79bb      	ldrb	r3, [r7, #6]
 80026f0:	461a      	mov	r2, r3
 80026f2:	2104      	movs	r1, #4
 80026f4:	4816      	ldr	r0, [pc, #88]	; (8002750 <Output_GPIO+0x94>)
 80026f6:	f003 fdff 	bl	80062f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SWREV_1_GPIO_Port, SWREV_1_Pin, relay_n);
 80026fa:	797b      	ldrb	r3, [r7, #5]
 80026fc:	461a      	mov	r2, r3
 80026fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002702:	4813      	ldr	r0, [pc, #76]	; (8002750 <Output_GPIO+0x94>)
 8002704:	f003 fdf8 	bl	80062f8 <HAL_GPIO_WritePin>
			break;
 8002708:	e01e      	b.n	8002748 <Output_GPIO+0x8c>
			HAL_GPIO_WritePin(SWDIR_2_GPIO_Port, SWDIR_2_Pin, relay_p);
 800270a:	79bb      	ldrb	r3, [r7, #6]
 800270c:	461a      	mov	r2, r3
 800270e:	2102      	movs	r1, #2
 8002710:	480f      	ldr	r0, [pc, #60]	; (8002750 <Output_GPIO+0x94>)
 8002712:	f003 fdf1 	bl	80062f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SWREV_2_GPIO_Port, SWREV_2_Pin, relay_n);
 8002716:	797b      	ldrb	r3, [r7, #5]
 8002718:	461a      	mov	r2, r3
 800271a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800271e:	480c      	ldr	r0, [pc, #48]	; (8002750 <Output_GPIO+0x94>)
 8002720:	f003 fdea 	bl	80062f8 <HAL_GPIO_WritePin>
			break;
 8002724:	e010      	b.n	8002748 <Output_GPIO+0x8c>
			HAL_GPIO_WritePin(SWDIR_3_GPIO_Port, SWDIR_3_Pin, relay_p);
 8002726:	79bb      	ldrb	r3, [r7, #6]
 8002728:	461a      	mov	r2, r3
 800272a:	2101      	movs	r1, #1
 800272c:	4808      	ldr	r0, [pc, #32]	; (8002750 <Output_GPIO+0x94>)
 800272e:	f003 fde3 	bl	80062f8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SWREV_3_GPIO_Port, SWREV_3_Pin, relay_n);
 8002732:	797b      	ldrb	r3, [r7, #5]
 8002734:	461a      	mov	r2, r3
 8002736:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800273a:	4805      	ldr	r0, [pc, #20]	; (8002750 <Output_GPIO+0x94>)
 800273c:	f003 fddc 	bl	80062f8 <HAL_GPIO_WritePin>
			break;
 8002740:	e002      	b.n	8002748 <Output_GPIO+0x8c>
	if(relay_p && relay_n) return;
 8002742:	bf00      	nop
 8002744:	e000      	b.n	8002748 <Output_GPIO+0x8c>
			break;
 8002746:	bf00      	nop

	}
}
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40020800 	.word	0x40020800

08002754 <app_leds_init>:

LEDs_struct LEDs_GREEN_LED1, LEDs_GREEN_LED2, LEDs_RED_LED;


void app_leds_init(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
	/* init of LEDs structures */
	LEDs_GREEN_LED1.port_address = (uint32_t*) LED_0_GPIO_Port;
 8002758:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <app_leds_init+0x74>)
 800275a:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <app_leds_init+0x78>)
 800275c:	601a      	str	r2, [r3, #0]
	LEDs_GREEN_LED1.channel_mask = LED_0_Pin;
 800275e:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <app_leds_init+0x74>)
 8002760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002764:	605a      	str	r2, [r3, #4]
	LEDs_GREEN_LED1.polarity = 0;
 8002766:	4b18      	ldr	r3, [pc, #96]	; (80027c8 <app_leds_init+0x74>)
 8002768:	2200      	movs	r2, #0
 800276a:	721a      	strb	r2, [r3, #8]
	LEDs_GREEN_LED1.led_time = 0;
 800276c:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <app_leds_init+0x74>)
 800276e:	2200      	movs	r2, #0
 8002770:	60da      	str	r2, [r3, #12]
	LEDs_GREEN_LED1.mode = LEDS_OFF;
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <app_leds_init+0x74>)
 8002774:	2200      	movs	r2, #0
 8002776:	725a      	strb	r2, [r3, #9]

	LEDs_GREEN_LED2.port_address = (uint32_t*) LED_1_GPIO_Port;
 8002778:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <app_leds_init+0x7c>)
 800277a:	4a16      	ldr	r2, [pc, #88]	; (80027d4 <app_leds_init+0x80>)
 800277c:	601a      	str	r2, [r3, #0]
	LEDs_GREEN_LED2.channel_mask = LED_1_Pin;
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <app_leds_init+0x7c>)
 8002780:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002784:	605a      	str	r2, [r3, #4]
	LEDs_GREEN_LED2.polarity = 0;
 8002786:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <app_leds_init+0x7c>)
 8002788:	2200      	movs	r2, #0
 800278a:	721a      	strb	r2, [r3, #8]
	LEDs_GREEN_LED2.led_time = 0;
 800278c:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <app_leds_init+0x7c>)
 800278e:	2200      	movs	r2, #0
 8002790:	60da      	str	r2, [r3, #12]
	LEDs_GREEN_LED2.mode = LEDS_OFF;
 8002792:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <app_leds_init+0x7c>)
 8002794:	2200      	movs	r2, #0
 8002796:	725a      	strb	r2, [r3, #9]

	LEDs_RED_LED.port_address = (uint32_t*) LED_2_GPIO_Port;
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <app_leds_init+0x84>)
 800279a:	4a10      	ldr	r2, [pc, #64]	; (80027dc <app_leds_init+0x88>)
 800279c:	601a      	str	r2, [r3, #0]
	LEDs_RED_LED.channel_mask = LED_2_Pin;
 800279e:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <app_leds_init+0x84>)
 80027a0:	2220      	movs	r2, #32
 80027a2:	605a      	str	r2, [r3, #4]
	LEDs_RED_LED.polarity = 0;
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <app_leds_init+0x84>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	721a      	strb	r2, [r3, #8]
	LEDs_RED_LED.led_time = 0;
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <app_leds_init+0x84>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	60da      	str	r2, [r3, #12]
	LEDs_RED_LED. blink_state = 0;
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <app_leds_init+0x84>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	741a      	strb	r2, [r3, #16]
	LEDs_RED_LED.mode = LEDS_OFF;
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <app_leds_init+0x84>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	725a      	strb	r2, [r3, #9]



}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	2000199c 	.word	0x2000199c
 80027cc:	40020800 	.word	0x40020800
 80027d0:	200019b0 	.word	0x200019b0
 80027d4:	40020000 	.word	0x40020000
 80027d8:	200019c4 	.word	0x200019c4
 80027dc:	40020400 	.word	0x40020400

080027e0 <GetDacCoef_k>:
/* @brief get K coeficient for DAC
 *
 *	@channel -> adc channel
 */
float GetDacCoef_k(int channel)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
	float *addr = ((float *)&MainParams.sramOffset_AdjCoef_k_ch0) + channel;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4a06      	ldr	r2, [pc, #24]	; (8002808 <GetDacCoef_k+0x28>)
 80027ee:	4413      	add	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
	return *addr;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	ee07 3a90 	vmov	s15, r3
}
 80027fa:	eeb0 0a67 	vmov.f32	s0, s15
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	20001aac 	.word	0x20001aac

0800280c <GetDacCoef_q>:
/* @brief get Q coeficient for DAC
 *
 *	@channel -> adc channel
 */
float GetDacCoef_q(int channel)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	float *addr = ((float *)&MainParams.sramOffset_AdjCoef_q_ch0) + channel;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4a06      	ldr	r2, [pc, #24]	; (8002834 <GetDacCoef_q+0x28>)
 800281a:	4413      	add	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]
	return *addr;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	ee07 3a90 	vmov	s15, r3
}
 8002826:	eeb0 0a67 	vmov.f32	s0, s15
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	20001ab8 	.word	0x20001ab8

08002838 <StoreDACConstant>:
 * @param value -> value of coefficient
 *
 *
 */
void StoreDACConstant(uint8_t coef, float value)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	ed87 0a00 	vstr	s0, [r7]
 8002844:	71fb      	strb	r3, [r7, #7]
	float *addr = ((float *)&MainParams.sramOffset_AdjCoef_k_ch0) + coef;//  + (4 * channel);
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4a06      	ldr	r2, [pc, #24]	; (8002864 <StoreDACConstant+0x2c>)
 800284c:	4413      	add	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]
	*addr = value;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	601a      	str	r2, [r3, #0]
}
 8002856:	bf00      	nop
 8002858:	3714      	adds	r7, #20
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20001aac 	.word	0x20001aac

08002868 <SendDACCoefficients>:
/* @brief send DAC coefficients to communication
 *
 *
 */
void SendDACCoefficients()
{
 8002868:	b590      	push	{r4, r7, lr}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
	for(int i = 0;i<6;i++)
 800286e:	2300      	movs	r3, #0
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	e010      	b.n	8002896 <SendDACCoefficients+0x2e>
	{
		SendCommunication_float(cmd_dac_get_k0 + i, GetDacCoef_k(i));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	333f      	adds	r3, #63	; 0x3f
 800287a:	b2dc      	uxtb	r4, r3
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7ff ffaf 	bl	80027e0 <GetDacCoef_k>
 8002882:	eef0 7a40 	vmov.f32	s15, s0
 8002886:	eeb0 0a67 	vmov.f32	s0, s15
 800288a:	4620      	mov	r0, r4
 800288c:	f7ff fa3a 	bl	8001d04 <SendCommunication_float>
	for(int i = 0;i<6;i++)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3301      	adds	r3, #1
 8002894:	607b      	str	r3, [r7, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2b05      	cmp	r3, #5
 800289a:	ddeb      	ble.n	8002874 <SendDACCoefficients+0xc>
	}

}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd90      	pop	{r4, r7, pc}
	...

080028a8 <Get_PreRegulatorVoltage>:
 * @param voltage -> request voltage on power supply output
 *
 * @return uint16_t value of voltage for pre regulator
 */
uint16_t Get_PreRegulatorVoltage(uint16_t voltage)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	80fb      	strh	r3, [r7, #6]
	return (0.15789 * (float)voltage) + 21.05263;
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	ee07 3a90 	vmov	s15, r3
 80028b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028bc:	ee17 0a90 	vmov	r0, s15
 80028c0:	f7fd fe4a 	bl	8000558 <__aeabi_f2d>
 80028c4:	a30c      	add	r3, pc, #48	; (adr r3, 80028f8 <Get_PreRegulatorVoltage+0x50>)
 80028c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ca:	f7fd fe9d 	bl	8000608 <__aeabi_dmul>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	4610      	mov	r0, r2
 80028d4:	4619      	mov	r1, r3
 80028d6:	a30a      	add	r3, pc, #40	; (adr r3, 8002900 <Get_PreRegulatorVoltage+0x58>)
 80028d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028dc:	f7fd fcde 	bl	800029c <__adddf3>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	f7fe f966 	bl	8000bb8 <__aeabi_d2uiz>
 80028ec:	4603      	mov	r3, r0
 80028ee:	b29b      	uxth	r3, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	512ec6bd 	.word	0x512ec6bd
 80028fc:	3fc435bd 	.word	0x3fc435bd
 8002900:	28e0c9da 	.word	0x28e0c9da
 8002904:	40350d79 	.word	0x40350d79

08002908 <Get_DACValue>:

//Calculate DAC register value from recomended voltage
uint16_t Get_DACValue(int dac_channel, uint16_t value)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]
	uint16_t code;


	if(dac_channel == 0 || dac_channel == 1 || dac_channel == 2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d005      	beq.n	8002926 <Get_DACValue+0x1e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d002      	beq.n	8002926 <Get_DACValue+0x1e>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d12a      	bne.n	800297c <Get_DACValue+0x74>
	{
		code = (uint16_t)(((PreReg_Coef_q - (float)value) / PreReg_Coef_k) * (float)DAC_coef);
 8002926:	887b      	ldrh	r3, [r7, #2]
 8002928:	ee07 3a90 	vmov	s15, r3
 800292c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002930:	ee17 0a90 	vmov	r0, s15
 8002934:	f7fd fe10 	bl	8000558 <__aeabi_f2d>
 8002938:	4602      	mov	r2, r0
 800293a:	460b      	mov	r3, r1
 800293c:	a125      	add	r1, pc, #148	; (adr r1, 80029d4 <Get_DACValue+0xcc>)
 800293e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002942:	f7fd fca9 	bl	8000298 <__aeabi_dsub>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4610      	mov	r0, r2
 800294c:	4619      	mov	r1, r3
 800294e:	a323      	add	r3, pc, #140	; (adr r3, 80029dc <Get_DACValue+0xd4>)
 8002950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002954:	f7fd ff82 	bl	800085c <__aeabi_ddiv>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4610      	mov	r0, r2
 800295e:	4619      	mov	r1, r3
 8002960:	a320      	add	r3, pc, #128	; (adr r3, 80029e4 <Get_DACValue+0xdc>)
 8002962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002966:	f7fd fe4f 	bl	8000608 <__aeabi_dmul>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4610      	mov	r0, r2
 8002970:	4619      	mov	r1, r3
 8002972:	f7fe f921 	bl	8000bb8 <__aeabi_d2uiz>
 8002976:	4603      	mov	r3, r0
 8002978:	82fb      	strh	r3, [r7, #22]
 800297a:	e023      	b.n	80029c4 <Get_DACValue+0xbc>
	}
	else
	{
		float coef_k = GetDacCoef_k(dac_channel - 3);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3b03      	subs	r3, #3
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff2d 	bl	80027e0 <GetDacCoef_k>
 8002986:	ed87 0a04 	vstr	s0, [r7, #16]
		float coef_q = GetDacCoef_q(dac_channel - 3);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3b03      	subs	r3, #3
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff ff3c 	bl	800280c <GetDacCoef_q>
 8002994:	ed87 0a03 	vstr	s0, [r7, #12]

		code = (uint16_t)(((coef_q - (float)value) / coef_k) * (float)DAC_coef);
 8002998:	887b      	ldrh	r3, [r7, #2]
 800299a:	ee07 3a90 	vmov	s15, r3
 800299e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80029a6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80029aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80029ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029b2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80029d0 <Get_DACValue+0xc8>
 80029b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029be:	ee17 3a90 	vmov	r3, s15
 80029c2:	82fb      	strh	r3, [r7, #22]
	}


	return code;
 80029c4:	8afb      	ldrh	r3, [r7, #22]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3718      	adds	r7, #24
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	454ccccd 	.word	0x454ccccd
 80029d4:	3dee7818 	.word	0x3dee7818
 80029d8:	405ff4dc 	.word	0x405ff4dc
 80029dc:	c39af4e3 	.word	0xc39af4e3
 80029e0:	405537da 	.word	0x405537da
 80029e4:	a0000000 	.word	0xa0000000
 80029e8:	40a99999 	.word	0x40a99999

080029ec <Set_PreReg_Voltage>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param voltage -> request voltage on regulator output
 * 
 */
void Set_PreReg_Voltage(uint8_t channel, uint16_t voltage)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	460a      	mov	r2, r1
 80029f6:	71fb      	strb	r3, [r7, #7]
 80029f8:	4613      	mov	r3, r2
 80029fa:	80bb      	strh	r3, [r7, #4]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d005      	beq.n	8002a0e <Set_PreReg_Voltage+0x22>
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d002      	beq.n	8002a0e <Set_PreReg_Voltage+0x22>
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d116      	bne.n	8002a3c <Set_PreReg_Voltage+0x50>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 8002a0e:	88bb      	ldrh	r3, [r7, #4]
 8002a10:	2b63      	cmp	r3, #99	; 0x63
 8002a12:	d804      	bhi.n	8002a1e <Set_PreReg_Voltage+0x32>
 8002a14:	88bb      	ldrh	r3, [r7, #4]
 8002a16:	f240 2226 	movw	r2, #550	; 0x226
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d810      	bhi.n	8002a40 <Set_PreReg_Voltage+0x54>

	uint16_t value = Get_DACValue(channel, voltage);
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	88ba      	ldrh	r2, [r7, #4]
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff6f 	bl	8002908 <Get_DACValue>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	81fb      	strh	r3, [r7, #14]
	SendValueToDAC(channel,value);
 8002a2e:	89fa      	ldrh	r2, [r7, #14]
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f001 f859 	bl	8003aec <SendValueToDAC>
 8002a3a:	e002      	b.n	8002a42 <Set_PreReg_Voltage+0x56>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002a3c:	bf00      	nop
 8002a3e:	e000      	b.n	8002a42 <Set_PreReg_Voltage+0x56>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 8002a40:	bf00      	nop
}
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <Set_OutReg_Voltage>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param voltage -> request voltage on regulator output
 * 
 */
void Set_OutReg_Voltage(uint8_t channel, uint16_t voltage)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	460a      	mov	r2, r1
 8002a52:	71fb      	strb	r3, [r7, #7]
 8002a54:	4613      	mov	r3, r2
 8002a56:	80bb      	strh	r3, [r7, #4]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d005      	beq.n	8002a6a <Set_OutReg_Voltage+0x22>
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d002      	beq.n	8002a6a <Set_OutReg_Voltage+0x22>
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d119      	bne.n	8002a9e <Set_OutReg_Voltage+0x56>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 8002a6a:	88bb      	ldrh	r3, [r7, #4]
 8002a6c:	2b63      	cmp	r3, #99	; 0x63
 8002a6e:	d804      	bhi.n	8002a7a <Set_OutReg_Voltage+0x32>
 8002a70:	88bb      	ldrh	r3, [r7, #4]
 8002a72:	f240 2226 	movw	r2, #550	; 0x226
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d813      	bhi.n	8002aa2 <Set_OutReg_Voltage+0x5a>

	uint16_t value = Get_DACValue(channel + 3, voltage);
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	3303      	adds	r3, #3
 8002a7e:	88ba      	ldrh	r2, [r7, #4]
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff ff40 	bl	8002908 <Get_DACValue>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	81fb      	strh	r3, [r7, #14]
	SendValueToDAC(channel + 3, value);
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	3303      	adds	r3, #3
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	89fa      	ldrh	r2, [r7, #14]
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f001 f828 	bl	8003aec <SendValueToDAC>
 8002a9c:	e002      	b.n	8002aa4 <Set_OutReg_Voltage+0x5c>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002a9e:	bf00      	nop
 8002aa0:	e000      	b.n	8002aa4 <Set_OutReg_Voltage+0x5c>
	if((voltage < minimum_voltage) && (voltage > maximum_voltage)) return;
 8002aa2:	bf00      	nop
}
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <Set_Voltage>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param voltage -> request voltage on output of power supply channel
 * 
 */
void Set_Voltage(uint8_t channel, uint16_t voltage)
{
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	460a      	mov	r2, r1
 8002ab6:	71fb      	strb	r3, [r7, #7]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	80bb      	strh	r3, [r7, #4]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002abc:	79fb      	ldrb	r3, [r7, #7]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d006      	beq.n	8002ad0 <Set_Voltage+0x24>
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d003      	beq.n	8002ad0 <Set_Voltage+0x24>
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	f040 80b6 	bne.w	8002c3c <Set_Voltage+0x190>
	if((voltage < minimum_voltage) || (voltage > maximum_voltage)) return;
 8002ad0:	88bb      	ldrh	r3, [r7, #4]
 8002ad2:	2b63      	cmp	r3, #99	; 0x63
 8002ad4:	f240 80b4 	bls.w	8002c40 <Set_Voltage+0x194>
 8002ad8:	88bb      	ldrh	r3, [r7, #4]
 8002ada:	f240 2226 	movw	r2, #550	; 0x226
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	f200 80ae 	bhi.w	8002c40 <Set_Voltage+0x194>

	ChannelsChange[channel].request_voltage = voltage; //store request voltage
 8002ae4:	79fa      	ldrb	r2, [r7, #7]
 8002ae6:	4958      	ldr	r1, [pc, #352]	; (8002c48 <Set_Voltage+0x19c>)
 8002ae8:	4613      	mov	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	3316      	adds	r3, #22
 8002af4:	88ba      	ldrh	r2, [r7, #4]
 8002af6:	801a      	strh	r2, [r3, #0]

	if(abs(voltage - ChannelsStatus[channel].set_voltage) > ramp_v_step) //voltage ramping if difference is bigger that voltage ramp step
 8002af8:	88b9      	ldrh	r1, [r7, #4]
 8002afa:	79fa      	ldrb	r2, [r7, #7]
 8002afc:	4853      	ldr	r0, [pc, #332]	; (8002c4c <Set_Voltage+0x1a0>)
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4403      	add	r3, r0
 8002b08:	3302      	adds	r3, #2
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	1acb      	subs	r3, r1, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	bfb8      	it	lt
 8002b12:	425b      	neglt	r3, r3
 8002b14:	2b05      	cmp	r3, #5
 8002b16:	dd75      	ble.n	8002c04 <Set_Voltage+0x158>
	{
		//ChannelsChange[channel].request_voltage = voltage; //store request voltage

		//calculate new voltage
		if(ChannelsStatus[channel].set_voltage < ChannelsChange[channel].request_voltage)
 8002b18:	79fa      	ldrb	r2, [r7, #7]
 8002b1a:	494c      	ldr	r1, [pc, #304]	; (8002c4c <Set_Voltage+0x1a0>)
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	3302      	adds	r3, #2
 8002b28:	8819      	ldrh	r1, [r3, #0]
 8002b2a:	79fa      	ldrb	r2, [r7, #7]
 8002b2c:	4846      	ldr	r0, [pc, #280]	; (8002c48 <Set_Voltage+0x19c>)
 8002b2e:	4613      	mov	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	1a9b      	subs	r3, r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4403      	add	r3, r0
 8002b38:	3316      	adds	r3, #22
 8002b3a:	881b      	ldrh	r3, [r3, #0]
 8002b3c:	4299      	cmp	r1, r3
 8002b3e:	d215      	bcs.n	8002b6c <Set_Voltage+0xc0>
		{
			ChannelsStatus[channel].set_voltage += ramp_v_step;
 8002b40:	79fa      	ldrb	r2, [r7, #7]
 8002b42:	4942      	ldr	r1, [pc, #264]	; (8002c4c <Set_Voltage+0x1a0>)
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3302      	adds	r3, #2
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	79fa      	ldrb	r2, [r7, #7]
 8002b54:	3305      	adds	r3, #5
 8002b56:	b298      	uxth	r0, r3
 8002b58:	493c      	ldr	r1, [pc, #240]	; (8002c4c <Set_Voltage+0x1a0>)
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	3302      	adds	r3, #2
 8002b66:	4602      	mov	r2, r0
 8002b68:	801a      	strh	r2, [r3, #0]
 8002b6a:	e014      	b.n	8002b96 <Set_Voltage+0xea>
		}
		else
		{
			ChannelsStatus[channel].set_voltage -= ramp_v_step;
 8002b6c:	79fa      	ldrb	r2, [r7, #7]
 8002b6e:	4937      	ldr	r1, [pc, #220]	; (8002c4c <Set_Voltage+0x1a0>)
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	79fa      	ldrb	r2, [r7, #7]
 8002b80:	3b05      	subs	r3, #5
 8002b82:	b298      	uxth	r0, r3
 8002b84:	4931      	ldr	r1, [pc, #196]	; (8002c4c <Set_Voltage+0x1a0>)
 8002b86:	4613      	mov	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	4413      	add	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	3302      	adds	r3, #2
 8002b92:	4602      	mov	r2, r0
 8002b94:	801a      	strh	r2, [r3, #0]
		}

		//Set voltage
		Set_OutReg_Voltage(channel, ChannelsStatus[channel].set_voltage);
 8002b96:	79fa      	ldrb	r2, [r7, #7]
 8002b98:	492c      	ldr	r1, [pc, #176]	; (8002c4c <Set_Voltage+0x1a0>)
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	3302      	adds	r3, #2
 8002ba6:	881a      	ldrh	r2, [r3, #0]
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	4611      	mov	r1, r2
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff4b 	bl	8002a48 <Set_OutReg_Voltage>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(ChannelsStatus[channel].set_voltage));
 8002bb2:	79fa      	ldrb	r2, [r7, #7]
 8002bb4:	4925      	ldr	r1, [pc, #148]	; (8002c4c <Set_Voltage+0x1a0>)
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fe6f 	bl	80028a8 <Get_PreRegulatorVoltage>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	461a      	mov	r2, r3
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff ff0a 	bl	80029ec <Set_PreReg_Voltage>

		//Enable and set ramping timer
		ChannelsChange[channel].voltage_ramp = true;
 8002bd8:	79fa      	ldrb	r2, [r7, #7]
 8002bda:	491b      	ldr	r1, [pc, #108]	; (8002c48 <Set_Voltage+0x19c>)
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	2201      	movs	r2, #1
 8002be8:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].voltage_ramp_timer = HAL_GetTick();
 8002bea:	79fc      	ldrb	r4, [r7, #7]
 8002bec:	f002 fb64 	bl	80052b8 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4915      	ldr	r1, [pc, #84]	; (8002c48 <Set_Voltage+0x19c>)
 8002bf4:	4623      	mov	r3, r4
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	1b1b      	subs	r3, r3, r4
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	3304      	adds	r3, #4
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	e01e      	b.n	8002c42 <Set_Voltage+0x196>
	}
	else //without voltage ramping if difference is smaller that voltage ramp step
	{
		//ChannelsChange[channel].request_voltage = voltage; //store request voltage
		ChannelsStatus[channel].set_voltage = voltage;
 8002c04:	79fa      	ldrb	r2, [r7, #7]
 8002c06:	4911      	ldr	r1, [pc, #68]	; (8002c4c <Set_Voltage+0x1a0>)
 8002c08:	4613      	mov	r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	3302      	adds	r3, #2
 8002c14:	88ba      	ldrh	r2, [r7, #4]
 8002c16:	801a      	strh	r2, [r3, #0]
		Set_OutReg_Voltage(channel, voltage);
 8002c18:	88ba      	ldrh	r2, [r7, #4]
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff ff12 	bl	8002a48 <Set_OutReg_Voltage>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(voltage));
 8002c24:	88bb      	ldrh	r3, [r7, #4]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fe3e 	bl	80028a8 <Get_PreRegulatorVoltage>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	461a      	mov	r2, r3
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	4611      	mov	r1, r2
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff fed9 	bl	80029ec <Set_PreReg_Voltage>
 8002c3a:	e002      	b.n	8002c42 <Set_Voltage+0x196>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002c3c:	bf00      	nop
 8002c3e:	e000      	b.n	8002c42 <Set_Voltage+0x196>
	if((voltage < minimum_voltage) || (voltage > maximum_voltage)) return;
 8002c40:	bf00      	nop
	}

}
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd90      	pop	{r4, r7, pc}
 8002c48:	20001a14 	.word	0x20001a14
 8002c4c:	200019d8 	.word	0x200019d8

08002c50 <Set_VoltageInEnable>:


void Set_VoltageInEnable(uint8_t channel)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002c5a:	79fb      	ldrb	r3, [r7, #7]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <Set_VoltageInEnable+0x1c>
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d002      	beq.n	8002c6c <Set_VoltageInEnable+0x1c>
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d11d      	bne.n	8002ca8 <Set_VoltageInEnable+0x58>

	uint16_t voltage = minimum_voltage;
 8002c6c:	2364      	movs	r3, #100	; 0x64
 8002c6e:	81fb      	strh	r3, [r7, #14]

	Set_OutReg_Voltage(channel, voltage);
 8002c70:	89fa      	ldrh	r2, [r7, #14]
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	4611      	mov	r1, r2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fee6 	bl	8002a48 <Set_OutReg_Voltage>
	Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(voltage));
 8002c7c:	89fb      	ldrh	r3, [r7, #14]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fe12 	bl	80028a8 <Get_PreRegulatorVoltage>
 8002c84:	4603      	mov	r3, r0
 8002c86:	461a      	mov	r2, r3
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fead 	bl	80029ec <Set_PreReg_Voltage>

	ChannelsStatus[channel].set_voltage = voltage;
 8002c92:	79fa      	ldrb	r2, [r7, #7]
 8002c94:	4906      	ldr	r1, [pc, #24]	; (8002cb0 <Set_VoltageInEnable+0x60>)
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	89fa      	ldrh	r2, [r7, #14]
 8002ca4:	801a      	strh	r2, [r3, #0]
 8002ca6:	e000      	b.n	8002caa <Set_VoltageInEnable+0x5a>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002ca8:	bf00      	nop
}
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	200019d8 	.word	0x200019d8

08002cb4 <Set_Voltage_From_Ramping>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param voltage -> request voltage on output of power supply channel
 *
 */
void Set_Voltage_From_Ramping(uint8_t channel)
{
 8002cb4:	b590      	push	{r4, r7, lr}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d006      	beq.n	8002cd2 <Set_Voltage_From_Ramping+0x1e>
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d003      	beq.n	8002cd2 <Set_Voltage_From_Ramping+0x1e>
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	f040 80cd 	bne.w	8002e6c <Set_Voltage_From_Ramping+0x1b8>

	if(abs(ChannelsStatus[channel].set_voltage - ChannelsChange[channel].request_voltage) > ramp_v_step) //keep ramping
 8002cd2:	79fa      	ldrb	r2, [r7, #7]
 8002cd4:	4967      	ldr	r1, [pc, #412]	; (8002e74 <Set_Voltage_From_Ramping+0x1c0>)
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4413      	add	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	3302      	adds	r3, #2
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	79fa      	ldrb	r2, [r7, #7]
 8002ce8:	4963      	ldr	r1, [pc, #396]	; (8002e78 <Set_Voltage_From_Ramping+0x1c4>)
 8002cea:	4613      	mov	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3316      	adds	r3, #22
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	1ac3      	subs	r3, r0, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bfb8      	it	lt
 8002cfe:	425b      	neglt	r3, r3
 8002d00:	2b05      	cmp	r3, #5
 8002d02:	dd75      	ble.n	8002df0 <Set_Voltage_From_Ramping+0x13c>
	{

		//calculate new voltage
		if(ChannelsStatus[channel].set_voltage < ChannelsChange[channel].request_voltage)
 8002d04:	79fa      	ldrb	r2, [r7, #7]
 8002d06:	495b      	ldr	r1, [pc, #364]	; (8002e74 <Set_Voltage_From_Ramping+0x1c0>)
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	440b      	add	r3, r1
 8002d12:	3302      	adds	r3, #2
 8002d14:	8819      	ldrh	r1, [r3, #0]
 8002d16:	79fa      	ldrb	r2, [r7, #7]
 8002d18:	4857      	ldr	r0, [pc, #348]	; (8002e78 <Set_Voltage_From_Ramping+0x1c4>)
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	00db      	lsls	r3, r3, #3
 8002d1e:	1a9b      	subs	r3, r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4403      	add	r3, r0
 8002d24:	3316      	adds	r3, #22
 8002d26:	881b      	ldrh	r3, [r3, #0]
 8002d28:	4299      	cmp	r1, r3
 8002d2a:	d215      	bcs.n	8002d58 <Set_Voltage_From_Ramping+0xa4>
		{
			ChannelsStatus[channel].set_voltage += ramp_v_step;
 8002d2c:	79fa      	ldrb	r2, [r7, #7]
 8002d2e:	4951      	ldr	r1, [pc, #324]	; (8002e74 <Set_Voltage_From_Ramping+0x1c0>)
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	3302      	adds	r3, #2
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	79fa      	ldrb	r2, [r7, #7]
 8002d40:	3305      	adds	r3, #5
 8002d42:	b298      	uxth	r0, r3
 8002d44:	494b      	ldr	r1, [pc, #300]	; (8002e74 <Set_Voltage_From_Ramping+0x1c0>)
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	3302      	adds	r3, #2
 8002d52:	4602      	mov	r2, r0
 8002d54:	801a      	strh	r2, [r3, #0]
 8002d56:	e014      	b.n	8002d82 <Set_Voltage_From_Ramping+0xce>
		}
		else
		{
			ChannelsStatus[channel].set_voltage -= ramp_v_step;
 8002d58:	79fa      	ldrb	r2, [r7, #7]
 8002d5a:	4946      	ldr	r1, [pc, #280]	; (8002e74 <Set_Voltage_From_Ramping+0x1c0>)
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	3302      	adds	r3, #2
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	79fa      	ldrb	r2, [r7, #7]
 8002d6c:	3b05      	subs	r3, #5
 8002d6e:	b298      	uxth	r0, r3
 8002d70:	4940      	ldr	r1, [pc, #256]	; (8002e74 <Set_Voltage_From_Ramping+0x1c0>)
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	4602      	mov	r2, r0
 8002d80:	801a      	strh	r2, [r3, #0]
		}

		//Set out voltage
		Set_OutReg_Voltage(channel, ChannelsStatus[channel].set_voltage);
 8002d82:	79fa      	ldrb	r2, [r7, #7]
 8002d84:	493b      	ldr	r1, [pc, #236]	; (8002e74 <Set_Voltage_From_Ramping+0x1c0>)
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	3302      	adds	r3, #2
 8002d92:	881a      	ldrh	r2, [r3, #0]
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fe55 	bl	8002a48 <Set_OutReg_Voltage>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(ChannelsStatus[channel].set_voltage));
 8002d9e:	79fa      	ldrb	r2, [r7, #7]
 8002da0:	4934      	ldr	r1, [pc, #208]	; (8002e74 <Set_Voltage_From_Ramping+0x1c0>)
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	3302      	adds	r3, #2
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fd79 	bl	80028a8 <Get_PreRegulatorVoltage>
 8002db6:	4603      	mov	r3, r0
 8002db8:	461a      	mov	r2, r3
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	4611      	mov	r1, r2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fe14 	bl	80029ec <Set_PreReg_Voltage>

		//Reset ramping timer
		ChannelsChange[channel].voltage_ramp = true;
 8002dc4:	79fa      	ldrb	r2, [r7, #7]
 8002dc6:	492c      	ldr	r1, [pc, #176]	; (8002e78 <Set_Voltage_From_Ramping+0x1c4>)
 8002dc8:	4613      	mov	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].voltage_ramp_timer = HAL_GetTick();
 8002dd6:	79fc      	ldrb	r4, [r7, #7]
 8002dd8:	f002 fa6e 	bl	80052b8 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	4926      	ldr	r1, [pc, #152]	; (8002e78 <Set_Voltage_From_Ramping+0x1c4>)
 8002de0:	4623      	mov	r3, r4
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	1b1b      	subs	r3, r3, r4
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	3304      	adds	r3, #4
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	e03e      	b.n	8002e6e <Set_Voltage_From_Ramping+0x1ba>
	}
	else
	{
		//Disable ramping timer
		ChannelsChange[channel].voltage_ramp = false;
 8002df0:	79fa      	ldrb	r2, [r7, #7]
 8002df2:	4921      	ldr	r1, [pc, #132]	; (8002e78 <Set_Voltage_From_Ramping+0x1c4>)
 8002df4:	4613      	mov	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]

		ChannelsStatus[channel].set_voltage = ChannelsChange[channel].request_voltage;
 8002e02:	79f9      	ldrb	r1, [r7, #7]
 8002e04:	79fa      	ldrb	r2, [r7, #7]
 8002e06:	481c      	ldr	r0, [pc, #112]	; (8002e78 <Set_Voltage_From_Ramping+0x1c4>)
 8002e08:	460b      	mov	r3, r1
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	1a5b      	subs	r3, r3, r1
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4403      	add	r3, r0
 8002e12:	3316      	adds	r3, #22
 8002e14:	8818      	ldrh	r0, [r3, #0]
 8002e16:	4917      	ldr	r1, [pc, #92]	; (8002e74 <Set_Voltage_From_Ramping+0x1c0>)
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	3302      	adds	r3, #2
 8002e24:	4602      	mov	r2, r0
 8002e26:	801a      	strh	r2, [r3, #0]

		Set_OutReg_Voltage(channel, ChannelsStatus[channel].set_voltage);
 8002e28:	79fa      	ldrb	r2, [r7, #7]
 8002e2a:	4912      	ldr	r1, [pc, #72]	; (8002e74 <Set_Voltage_From_Ramping+0x1c0>)
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	3302      	adds	r3, #2
 8002e38:	881a      	ldrh	r2, [r3, #0]
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7ff fe02 	bl	8002a48 <Set_OutReg_Voltage>
		Set_PreReg_Voltage(channel, Get_PreRegulatorVoltage(ChannelsStatus[channel].set_voltage));
 8002e44:	79fa      	ldrb	r2, [r7, #7]
 8002e46:	490b      	ldr	r1, [pc, #44]	; (8002e74 <Set_Voltage_From_Ramping+0x1c0>)
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	3302      	adds	r3, #2
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fd26 	bl	80028a8 <Get_PreRegulatorVoltage>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	461a      	mov	r2, r3
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	4611      	mov	r1, r2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fdc1 	bl	80029ec <Set_PreReg_Voltage>
 8002e6a:	e000      	b.n	8002e6e <Set_Voltage_From_Ramping+0x1ba>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002e6c:	bf00      	nop
	}

}
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd90      	pop	{r4, r7, pc}
 8002e74:	200019d8 	.word	0x200019d8
 8002e78:	20001a14 	.word	0x20001a14

08002e7c <Channel_Enable>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param enable -> true - enable, false disble 
 * 
 */
void Channel_Enable(uint8_t channel, bool enable)
{
 8002e7c:	b590      	push	{r4, r7, lr}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	460a      	mov	r2, r1
 8002e86:	71fb      	strb	r3, [r7, #7]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	71bb      	strb	r3, [r7, #6]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d006      	beq.n	8002ea0 <Channel_Enable+0x24>
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d003      	beq.n	8002ea0 <Channel_Enable+0x24>
 8002e98:	79fb      	ldrb	r3, [r7, #7]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	f040 809e 	bne.w	8002fdc <Channel_Enable+0x160>
	if(enable == ChannelsStatus[channel].enable) return;
 8002ea0:	79fa      	ldrb	r2, [r7, #7]
 8002ea2:	4951      	ldr	r1, [pc, #324]	; (8002fe8 <Channel_Enable+0x16c>)
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	79ba      	ldrb	r2, [r7, #6]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	f000 8094 	beq.w	8002fe0 <Channel_Enable+0x164>


	ChannelsChange[channel].voltageBeforeEnable = ChannelsChange[channel].request_voltage;
 8002eb8:	79f9      	ldrb	r1, [r7, #7]
 8002eba:	79fa      	ldrb	r2, [r7, #7]
 8002ebc:	484b      	ldr	r0, [pc, #300]	; (8002fec <Channel_Enable+0x170>)
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	1a5b      	subs	r3, r3, r1
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4403      	add	r3, r0
 8002ec8:	3316      	adds	r3, #22
 8002eca:	8818      	ldrh	r0, [r3, #0]
 8002ecc:	4947      	ldr	r1, [pc, #284]	; (8002fec <Channel_Enable+0x170>)
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	3318      	adds	r3, #24
 8002eda:	4602      	mov	r2, r0
 8002edc:	801a      	strh	r2, [r3, #0]

	ChannelsChange[channel].restarts_counter = 0;
 8002ede:	79fa      	ldrb	r2, [r7, #7]
 8002ee0:	4942      	ldr	r1, [pc, #264]	; (8002fec <Channel_Enable+0x170>)
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	3314      	adds	r3, #20
 8002eee:	2200      	movs	r2, #0
 8002ef0:	701a      	strb	r2, [r3, #0]
	ChannelsStatus[channel].disableInError = false;
 8002ef2:	79fa      	ldrb	r2, [r7, #7]
 8002ef4:	493c      	ldr	r1, [pc, #240]	; (8002fe8 <Channel_Enable+0x16c>)
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	3312      	adds	r3, #18
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]

	if(enable)
 8002f06:	79bb      	ldrb	r3, [r7, #6]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d032      	beq.n	8002f72 <Channel_Enable+0xf6>
	{
		//Set_Voltage(channel, minimum_voltage);
		Set_VoltageInEnable(channel);
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff fe9e 	bl	8002c50 <Set_VoltageInEnable>
		Enable_GPIO(channel, true);
 8002f14:	79fb      	ldrb	r3, [r7, #7]
 8002f16:	2101      	movs	r1, #1
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fb9d 	bl	8002658 <Enable_GPIO>
		ChannelsStatus[channel].enable = true;
 8002f1e:	79fa      	ldrb	r2, [r7, #7]
 8002f20:	4931      	ldr	r1, [pc, #196]	; (8002fe8 <Channel_Enable+0x16c>)
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].restart_request = false;
 8002f30:	79fa      	ldrb	r2, [r7, #7]
 8002f32:	492e      	ldr	r1, [pc, #184]	; (8002fec <Channel_Enable+0x170>)
 8002f34:	4613      	mov	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	1a9b      	subs	r3, r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	3303      	adds	r3, #3
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].enable_request = true;
 8002f44:	79fa      	ldrb	r2, [r7, #7]
 8002f46:	4929      	ldr	r1, [pc, #164]	; (8002fec <Channel_Enable+0x170>)
 8002f48:	4613      	mov	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	3301      	adds	r3, #1
 8002f54:	2201      	movs	r2, #1
 8002f56:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].enable_timer = HAL_GetTick();
 8002f58:	79fc      	ldrb	r4, [r7, #7]
 8002f5a:	f002 f9ad 	bl	80052b8 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	4922      	ldr	r1, [pc, #136]	; (8002fec <Channel_Enable+0x170>)
 8002f62:	4623      	mov	r3, r4
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	1b1b      	subs	r3, r3, r4
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	e021      	b.n	8002fb6 <Channel_Enable+0x13a>
	}
	else
	{
		ChannelsChange[channel].enable_request = false;
 8002f72:	79fa      	ldrb	r2, [r7, #7]
 8002f74:	491d      	ldr	r1, [pc, #116]	; (8002fec <Channel_Enable+0x170>)
 8002f76:	4613      	mov	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	3301      	adds	r3, #1
 8002f82:	2200      	movs	r2, #0
 8002f84:	701a      	strb	r2, [r3, #0]
		ChannelsStatus[channel].enable = false;
 8002f86:	79fa      	ldrb	r2, [r7, #7]
 8002f88:	4917      	ldr	r1, [pc, #92]	; (8002fe8 <Channel_Enable+0x16c>)
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	2200      	movs	r2, #0
 8002f96:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].restart_request = false;
 8002f98:	79fa      	ldrb	r2, [r7, #7]
 8002f9a:	4914      	ldr	r1, [pc, #80]	; (8002fec <Channel_Enable+0x170>)
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3303      	adds	r3, #3
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
		Enable_GPIO(channel, false);
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff fb51 	bl	8002658 <Enable_GPIO>
	}


	if(MainParams.sramOffset_ControlOutputWithChannelEnable) //je aktivni funkce ovladani vystupu s eneble
 8002fb6:	4b0e      	ldr	r3, [pc, #56]	; (8002ff0 <Channel_Enable+0x174>)
 8002fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d011      	beq.n	8002fe2 <Channel_Enable+0x166>
	{
		if(enable)
 8002fbe:	79bb      	ldrb	r3, [r7, #6]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <Channel_Enable+0x154>
		{
			Channel_Output(channel, true);
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 f95b 	bl	8003284 <Channel_Output>
 8002fce:	e008      	b.n	8002fe2 <Channel_Enable+0x166>
		}
		else
		{
			Channel_Output(channel, false);
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 f955 	bl	8003284 <Channel_Output>
 8002fda:	e002      	b.n	8002fe2 <Channel_Enable+0x166>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002fdc:	bf00      	nop
 8002fde:	e000      	b.n	8002fe2 <Channel_Enable+0x166>
	if(enable == ChannelsStatus[channel].enable) return;
 8002fe0:	bf00      	nop
		}
	}

}
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd90      	pop	{r4, r7, pc}
 8002fe8:	200019d8 	.word	0x200019d8
 8002fec:	20001a14 	.word	0x20001a14
 8002ff0:	20001a68 	.word	0x20001a68

08002ff4 <Channel_Restart>:

void Channel_Restart(uint8_t channel)
{
 8002ff4:	b590      	push	{r4, r7, lr}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <Channel_Restart+0x1c>
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d002      	beq.n	8003010 <Channel_Restart+0x1c>
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d161      	bne.n	80030d4 <Channel_Restart+0xe0>

	if(ChannelsStatus[channel].enable == false)
 8003010:	79fa      	ldrb	r2, [r7, #7]
 8003012:	4932      	ldr	r1, [pc, #200]	; (80030dc <Channel_Restart+0xe8>)
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	f083 0301 	eor.w	r3, r3, #1
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <Channel_Restart+0x4c>
	{
		ChannelsChange[channel].restart_request = false;
 800302a:	79fa      	ldrb	r2, [r7, #7]
 800302c:	492c      	ldr	r1, [pc, #176]	; (80030e0 <Channel_Restart+0xec>)
 800302e:	4613      	mov	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	3303      	adds	r3, #3
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]
		return;
 800303e:	e04a      	b.n	80030d6 <Channel_Restart+0xe2>
	}

	//ChannelsChange[channel].restarts_counter++;

	ErrorTimerReset(channel);
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	4618      	mov	r0, r3
 8003044:	f7fe ffce 	bl	8001fe4 <ErrorTimerReset>

	if(ChannelsChange[channel].restarts_counter >= max_restart_count)
 8003048:	79fa      	ldrb	r2, [r7, #7]
 800304a:	4925      	ldr	r1, [pc, #148]	; (80030e0 <Channel_Restart+0xec>)
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	3314      	adds	r3, #20
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d919      	bls.n	8003092 <Channel_Restart+0x9e>
	{
		Channel_Enable(channel, false);
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	2100      	movs	r1, #0
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff ff0a 	bl	8002e7c <Channel_Enable>
		ChannelsStatus[channel].disableInError = true;
 8003068:	79fa      	ldrb	r2, [r7, #7]
 800306a:	491c      	ldr	r1, [pc, #112]	; (80030dc <Channel_Restart+0xe8>)
 800306c:	4613      	mov	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	3312      	adds	r3, #18
 8003078:	2201      	movs	r2, #1
 800307a:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].restart_request = false;
 800307c:	79fa      	ldrb	r2, [r7, #7]
 800307e:	4918      	ldr	r1, [pc, #96]	; (80030e0 <Channel_Restart+0xec>)
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	3303      	adds	r3, #3
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
 8003090:	e021      	b.n	80030d6 <Channel_Restart+0xe2>
	}
	else
	{
		ChannelsChange[channel].restart_request = true;
 8003092:	79fa      	ldrb	r2, [r7, #7]
 8003094:	4912      	ldr	r1, [pc, #72]	; (80030e0 <Channel_Restart+0xec>)
 8003096:	4613      	mov	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	1a9b      	subs	r3, r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	3303      	adds	r3, #3
 80030a2:	2201      	movs	r2, #1
 80030a4:	701a      	strb	r2, [r3, #0]
		ChannelsChange[channel].restart_timer = HAL_GetTick();
 80030a6:	79fc      	ldrb	r4, [r7, #7]
 80030a8:	f002 f906 	bl	80052b8 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	490c      	ldr	r1, [pc, #48]	; (80030e0 <Channel_Restart+0xec>)
 80030b0:	4623      	mov	r3, r4
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	1b1b      	subs	r3, r3, r4
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	3310      	adds	r3, #16
 80030bc:	601a      	str	r2, [r3, #0]

		Enable_GPIO(channel, false);
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	2100      	movs	r1, #0
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fac8 	bl	8002658 <Enable_GPIO>
		Channel_Output(channel, false);
 80030c8:	79fb      	ldrb	r3, [r7, #7]
 80030ca:	2100      	movs	r1, #0
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 f8d9 	bl	8003284 <Channel_Output>
 80030d2:	e000      	b.n	80030d6 <Channel_Restart+0xe2>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 80030d4:	bf00      	nop

	}


}
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd90      	pop	{r4, r7, pc}
 80030dc:	200019d8 	.word	0x200019d8
 80030e0:	20001a14 	.word	0x20001a14

080030e4 <Channel_Enable_fromRestart>:

void Channel_Enable_fromRestart(uint8_t channel)
{
 80030e4:	b590      	push	{r4, r7, lr}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	71fb      	strb	r3, [r7, #7]
	ChannelsChange[channel].voltageBeforeEnable = ChannelsChange[channel].request_voltage;
 80030ee:	79f9      	ldrb	r1, [r7, #7]
 80030f0:	79fa      	ldrb	r2, [r7, #7]
 80030f2:	482a      	ldr	r0, [pc, #168]	; (800319c <Channel_Enable_fromRestart+0xb8>)
 80030f4:	460b      	mov	r3, r1
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	1a5b      	subs	r3, r3, r1
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4403      	add	r3, r0
 80030fe:	3316      	adds	r3, #22
 8003100:	8818      	ldrh	r0, [r3, #0]
 8003102:	4926      	ldr	r1, [pc, #152]	; (800319c <Channel_Enable_fromRestart+0xb8>)
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	1a9b      	subs	r3, r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	3318      	adds	r3, #24
 8003110:	4602      	mov	r2, r0
 8003112:	801a      	strh	r2, [r3, #0]

	Set_VoltageInEnable(channel);
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fd9a 	bl	8002c50 <Set_VoltageInEnable>
	Enable_GPIO(channel, true);
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	2101      	movs	r1, #1
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fa99 	bl	8002658 <Enable_GPIO>
	ChannelsStatus[channel].enable = true;
 8003126:	79fa      	ldrb	r2, [r7, #7]
 8003128:	491d      	ldr	r1, [pc, #116]	; (80031a0 <Channel_Enable_fromRestart+0xbc>)
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
	ChannelsChange[channel].restart_request = false;
 8003138:	79fa      	ldrb	r2, [r7, #7]
 800313a:	4918      	ldr	r1, [pc, #96]	; (800319c <Channel_Enable_fromRestart+0xb8>)
 800313c:	4613      	mov	r3, r2
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	3303      	adds	r3, #3
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
	ChannelsChange[channel].enable_request = true;
 800314c:	79fa      	ldrb	r2, [r7, #7]
 800314e:	4913      	ldr	r1, [pc, #76]	; (800319c <Channel_Enable_fromRestart+0xb8>)
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	3301      	adds	r3, #1
 800315c:	2201      	movs	r2, #1
 800315e:	701a      	strb	r2, [r3, #0]
	ChannelsChange[channel].enable_timer = HAL_GetTick();
 8003160:	79fc      	ldrb	r4, [r7, #7]
 8003162:	f002 f8a9 	bl	80052b8 <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	490c      	ldr	r1, [pc, #48]	; (800319c <Channel_Enable_fromRestart+0xb8>)
 800316a:	4623      	mov	r3, r4
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	1b1b      	subs	r3, r3, r4
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	3308      	adds	r3, #8
 8003176:	601a      	str	r2, [r3, #0]

	Channel_Output(channel, true);
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	2101      	movs	r1, #1
 800317c:	4618      	mov	r0, r3
 800317e:	f000 f881 	bl	8003284 <Channel_Output>

	if(MainParams.sramOffset_ControlOutputWithChannelEnable) //je aktivni funkce ovladani vystupu s eneble
 8003182:	4b08      	ldr	r3, [pc, #32]	; (80031a4 <Channel_Enable_fromRestart+0xc0>)
 8003184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003186:	2b00      	cmp	r3, #0
 8003188:	d004      	beq.n	8003194 <Channel_Enable_fromRestart+0xb0>
	{
		Channel_Output(channel, true);
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	2101      	movs	r1, #1
 800318e:	4618      	mov	r0, r3
 8003190:	f000 f878 	bl	8003284 <Channel_Output>
	}


}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	bd90      	pop	{r4, r7, pc}
 800319c:	20001a14 	.word	0x20001a14
 80031a0:	200019d8 	.word	0x200019d8
 80031a4:	20001a68 	.word	0x20001a68

080031a8 <Channel_Polarity>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param polarity -> polarity of output voltage
 * 
 */
void Channel_Polarity(uint8_t channel, eOutputPolarity polarity)
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	460a      	mov	r2, r1
 80031b2:	71fb      	strb	r3, [r7, #7]
 80031b4:	4613      	mov	r3, r2
 80031b6:	71bb      	strb	r3, [r7, #6]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <Channel_Polarity+0x22>
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d002      	beq.n	80031ca <Channel_Polarity+0x22>
 80031c4:	79fb      	ldrb	r3, [r7, #7]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d14b      	bne.n	8003262 <Channel_Polarity+0xba>
	if(polarity == ChannelsStatus[channel].polarity) return;
 80031ca:	79fa      	ldrb	r2, [r7, #7]
 80031cc:	492a      	ldr	r1, [pc, #168]	; (8003278 <Channel_Polarity+0xd0>)
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	3304      	adds	r3, #4
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	79ba      	ldrb	r2, [r7, #6]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d041      	beq.n	8003266 <Channel_Polarity+0xbe>

	if(MainParams.sramOffset_ControlOutputWithChannelEnable && ChannelsStatus[channel].enable) return; // polarita nejde prepnout, kdyz je kanál zapnutý
 80031e2:	4b26      	ldr	r3, [pc, #152]	; (800327c <Channel_Polarity+0xd4>)
 80031e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <Channel_Polarity+0x56>
 80031ea:	79fa      	ldrb	r2, [r7, #7]
 80031ec:	4922      	ldr	r1, [pc, #136]	; (8003278 <Channel_Polarity+0xd0>)
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d135      	bne.n	800326a <Channel_Polarity+0xc2>


	if(ChannelsChange[channel].polarity_request) return;
 80031fe:	79fa      	ldrb	r2, [r7, #7]
 8003200:	491f      	ldr	r1, [pc, #124]	; (8003280 <Channel_Polarity+0xd8>)
 8003202:	4613      	mov	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	3302      	adds	r3, #2
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d12c      	bne.n	800326e <Channel_Polarity+0xc6>

	ChannelsStatus[channel].polarity = polarity;
 8003214:	79fa      	ldrb	r2, [r7, #7]
 8003216:	4918      	ldr	r1, [pc, #96]	; (8003278 <Channel_Polarity+0xd0>)
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	440b      	add	r3, r1
 8003222:	3304      	adds	r3, #4
 8003224:	79ba      	ldrb	r2, [r7, #6]
 8003226:	701a      	strb	r2, [r3, #0]
	Output_GPIO(channel, false, false);
 8003228:	79fb      	ldrb	r3, [r7, #7]
 800322a:	2200      	movs	r2, #0
 800322c:	2100      	movs	r1, #0
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fa44 	bl	80026bc <Output_GPIO>

	ChannelsChange[channel].polarity_request = true;
 8003234:	79fa      	ldrb	r2, [r7, #7]
 8003236:	4912      	ldr	r1, [pc, #72]	; (8003280 <Channel_Polarity+0xd8>)
 8003238:	4613      	mov	r3, r2
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	1a9b      	subs	r3, r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	3302      	adds	r3, #2
 8003244:	2201      	movs	r2, #1
 8003246:	701a      	strb	r2, [r3, #0]
	ChannelsChange[channel].polarity_timer = HAL_GetTick();
 8003248:	79fc      	ldrb	r4, [r7, #7]
 800324a:	f002 f835 	bl	80052b8 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	490b      	ldr	r1, [pc, #44]	; (8003280 <Channel_Polarity+0xd8>)
 8003252:	4623      	mov	r3, r4
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	1b1b      	subs	r3, r3, r4
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	330c      	adds	r3, #12
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	e006      	b.n	8003270 <Channel_Polarity+0xc8>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8003262:	bf00      	nop
 8003264:	e004      	b.n	8003270 <Channel_Polarity+0xc8>
	if(polarity == ChannelsStatus[channel].polarity) return;
 8003266:	bf00      	nop
 8003268:	e002      	b.n	8003270 <Channel_Polarity+0xc8>
	if(MainParams.sramOffset_ControlOutputWithChannelEnable && ChannelsStatus[channel].enable) return; // polarita nejde prepnout, kdyz je kanál zapnutý
 800326a:	bf00      	nop
 800326c:	e000      	b.n	8003270 <Channel_Polarity+0xc8>
	if(ChannelsChange[channel].polarity_request) return;
 800326e:	bf00      	nop

}
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	bd90      	pop	{r4, r7, pc}
 8003276:	bf00      	nop
 8003278:	200019d8 	.word	0x200019d8
 800327c:	20001a68 	.word	0x20001a68
 8003280:	20001a14 	.word	0x20001a14

08003284 <Channel_Output>:
 * @param channel -> Channel of power supply (0,1,2)
 * @param output -> true - output on, false - output off
 * 
 */
void Channel_Output(uint8_t channel, bool output)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	460a      	mov	r2, r1
 800328e:	71fb      	strb	r3, [r7, #7]
 8003290:	4613      	mov	r3, r2
 8003292:	71bb      	strb	r3, [r7, #6]

	if(MainParams.sramOffset_ControlOutputWithChannelEnable && ChannelsStatus[channel].enable && !ChannelsChange[channel].enable_request && output) return; // vystup nejde zapnout, kdyz je kanál zapnutý
 8003294:	4b28      	ldr	r3, [pc, #160]	; (8003338 <Channel_Output+0xb4>)
 8003296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003298:	2b00      	cmp	r3, #0
 800329a:	d01a      	beq.n	80032d2 <Channel_Output+0x4e>
 800329c:	79fa      	ldrb	r2, [r7, #7]
 800329e:	4927      	ldr	r1, [pc, #156]	; (800333c <Channel_Output+0xb8>)
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	440b      	add	r3, r1
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d010      	beq.n	80032d2 <Channel_Output+0x4e>
 80032b0:	79fa      	ldrb	r2, [r7, #7]
 80032b2:	4923      	ldr	r1, [pc, #140]	; (8003340 <Channel_Output+0xbc>)
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	3301      	adds	r3, #1
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	f083 0301 	eor.w	r3, r3, #1
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d002      	beq.n	80032d2 <Channel_Output+0x4e>
 80032cc:	79bb      	ldrb	r3, [r7, #6]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d12d      	bne.n	800332e <Channel_Output+0xaa>

	ChannelsStatus[channel].output = output;
 80032d2:	79fa      	ldrb	r2, [r7, #7]
 80032d4:	4919      	ldr	r1, [pc, #100]	; (800333c <Channel_Output+0xb8>)
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	3305      	adds	r3, #5
 80032e2:	79ba      	ldrb	r2, [r7, #6]
 80032e4:	701a      	strb	r2, [r3, #0]

	if(ChannelsStatus[channel].polarity == polarity_positive)
 80032e6:	79fa      	ldrb	r2, [r7, #7]
 80032e8:	4914      	ldr	r1, [pc, #80]	; (800333c <Channel_Output+0xb8>)
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	3304      	adds	r3, #4
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d106      	bne.n	800330a <Channel_Output+0x86>
	{
		Output_GPIO(channel, output, false);
 80032fc:	79b9      	ldrb	r1, [r7, #6]
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	2200      	movs	r2, #0
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff f9da 	bl	80026bc <Output_GPIO>
 8003308:	e012      	b.n	8003330 <Channel_Output+0xac>
	}
	else if(ChannelsStatus[channel].polarity == polarity_negative)
 800330a:	79fa      	ldrb	r2, [r7, #7]
 800330c:	490b      	ldr	r1, [pc, #44]	; (800333c <Channel_Output+0xb8>)
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	3304      	adds	r3, #4
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d107      	bne.n	8003330 <Channel_Output+0xac>
	{
		Output_GPIO(channel, false, output);
 8003320:	79ba      	ldrb	r2, [r7, #6]
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	2100      	movs	r1, #0
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff f9c8 	bl	80026bc <Output_GPIO>
 800332c:	e000      	b.n	8003330 <Channel_Output+0xac>
	if(MainParams.sramOffset_ControlOutputWithChannelEnable && ChannelsStatus[channel].enable && !ChannelsChange[channel].enable_request && output) return; // vystup nejde zapnout, kdyz je kanál zapnutý
 800332e:	bf00      	nop
	}
}
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20001a68 	.word	0x20001a68
 800333c:	200019d8 	.word	0x200019d8
 8003340:	20001a14 	.word	0x20001a14

08003344 <ChannelControl>:
 *
 * @param channel -> Channel of power supply (0,1,2)
 * 
 */
void ChannelControl(uint8_t channel)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	71fb      	strb	r3, [r7, #7]
	//voltage ramping
	if(ChannelsChange[channel].voltage_ramp)
 800334e:	79fa      	ldrb	r2, [r7, #7]
 8003350:	496d      	ldr	r1, [pc, #436]	; (8003508 <ChannelControl+0x1c4>)
 8003352:	4613      	mov	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d012      	beq.n	8003388 <ChannelControl+0x44>
	{
		if((HAL_GetTick()-ChannelsChange[channel].voltage_ramp_timer) >= ramp_t_step)
 8003362:	f001 ffa9 	bl	80052b8 <HAL_GetTick>
 8003366:	4601      	mov	r1, r0
 8003368:	79fa      	ldrb	r2, [r7, #7]
 800336a:	4867      	ldr	r0, [pc, #412]	; (8003508 <ChannelControl+0x1c4>)
 800336c:	4613      	mov	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4403      	add	r3, r0
 8003376:	3304      	adds	r3, #4
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	1acb      	subs	r3, r1, r3
 800337c:	2b31      	cmp	r3, #49	; 0x31
 800337e:	d903      	bls.n	8003388 <ChannelControl+0x44>
		{
			Set_Voltage_From_Ramping(channel);
 8003380:	79fb      	ldrb	r3, [r7, #7]
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff fc96 	bl	8002cb4 <Set_Voltage_From_Ramping>
		}
	}

	//enable control
	if(ChannelsChange[channel].enable_request)
 8003388:	79fa      	ldrb	r2, [r7, #7]
 800338a:	495f      	ldr	r1, [pc, #380]	; (8003508 <ChannelControl+0x1c4>)
 800338c:	4613      	mov	r3, r2
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	3301      	adds	r3, #1
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d02b      	beq.n	80033f6 <ChannelControl+0xb2>
	{
		if((HAL_GetTick()-ChannelsChange[channel].enable_timer) >= delay_enable)
 800339e:	f001 ff8b 	bl	80052b8 <HAL_GetTick>
 80033a2:	4601      	mov	r1, r0
 80033a4:	79fa      	ldrb	r2, [r7, #7]
 80033a6:	4858      	ldr	r0, [pc, #352]	; (8003508 <ChannelControl+0x1c4>)
 80033a8:	4613      	mov	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4403      	add	r3, r0
 80033b2:	3308      	adds	r3, #8
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	1acb      	subs	r3, r1, r3
 80033b8:	2bc7      	cmp	r3, #199	; 0xc7
 80033ba:	d91c      	bls.n	80033f6 <ChannelControl+0xb2>
		{
			ChannelsChange[channel].enable_request = false;
 80033bc:	79fa      	ldrb	r2, [r7, #7]
 80033be:	4952      	ldr	r1, [pc, #328]	; (8003508 <ChannelControl+0x1c4>)
 80033c0:	4613      	mov	r3, r2
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	1a9b      	subs	r3, r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	3301      	adds	r3, #1
 80033cc:	2200      	movs	r2, #0
 80033ce:	701a      	strb	r2, [r3, #0]
			Enable_GPIO(channel, true);
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	2101      	movs	r1, #1
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff f93f 	bl	8002658 <Enable_GPIO>
			//nastavit napeti
			Set_Voltage(channel, ChannelsChange[channel].request_voltage );
 80033da:	79fa      	ldrb	r2, [r7, #7]
 80033dc:	494a      	ldr	r1, [pc, #296]	; (8003508 <ChannelControl+0x1c4>)
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	3316      	adds	r3, #22
 80033ea:	881a      	ldrh	r2, [r3, #0]
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff fb5b 	bl	8002aac <Set_Voltage>
		}
	}

	//polarity change control
	if(ChannelsChange[channel].polarity_request)
 80033f6:	79fa      	ldrb	r2, [r7, #7]
 80033f8:	4943      	ldr	r1, [pc, #268]	; (8003508 <ChannelControl+0x1c4>)
 80033fa:	4613      	mov	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	1a9b      	subs	r3, r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	3302      	adds	r3, #2
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d045      	beq.n	8003498 <ChannelControl+0x154>
	{
		if((HAL_GetTick()-ChannelsChange[channel].polarity_timer) >= delay_polarity)
 800340c:	f001 ff54 	bl	80052b8 <HAL_GetTick>
 8003410:	4601      	mov	r1, r0
 8003412:	79fa      	ldrb	r2, [r7, #7]
 8003414:	483c      	ldr	r0, [pc, #240]	; (8003508 <ChannelControl+0x1c4>)
 8003416:	4613      	mov	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4403      	add	r3, r0
 8003420:	330c      	adds	r3, #12
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	1acb      	subs	r3, r1, r3
 8003426:	2bc7      	cmp	r3, #199	; 0xc7
 8003428:	d936      	bls.n	8003498 <ChannelControl+0x154>
		{
			ChannelsChange[channel].polarity_request = false;
 800342a:	79fa      	ldrb	r2, [r7, #7]
 800342c:	4936      	ldr	r1, [pc, #216]	; (8003508 <ChannelControl+0x1c4>)
 800342e:	4613      	mov	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	3302      	adds	r3, #2
 800343a:	2200      	movs	r2, #0
 800343c:	701a      	strb	r2, [r3, #0]
			bool output = ChannelsStatus[channel].output;
 800343e:	79fa      	ldrb	r2, [r7, #7]
 8003440:	4932      	ldr	r1, [pc, #200]	; (800350c <ChannelControl+0x1c8>)
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	3305      	adds	r3, #5
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	73fb      	strb	r3, [r7, #15]

			if(ChannelsStatus[channel].polarity == polarity_positive)
 8003452:	79fa      	ldrb	r2, [r7, #7]
 8003454:	492d      	ldr	r1, [pc, #180]	; (800350c <ChannelControl+0x1c8>)
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	3304      	adds	r3, #4
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d106      	bne.n	8003476 <ChannelControl+0x132>
			{
				Output_GPIO(channel, output, false);
 8003468:	7bf9      	ldrb	r1, [r7, #15]
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	2200      	movs	r2, #0
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff f924 	bl	80026bc <Output_GPIO>
 8003474:	e010      	b.n	8003498 <ChannelControl+0x154>
			}
			else if(ChannelsStatus[channel].polarity == polarity_negative)
 8003476:	79fa      	ldrb	r2, [r7, #7]
 8003478:	4924      	ldr	r1, [pc, #144]	; (800350c <ChannelControl+0x1c8>)
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	3304      	adds	r3, #4
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d105      	bne.n	8003498 <ChannelControl+0x154>
			{
				Output_GPIO(channel, false, output);
 800348c:	7bfa      	ldrb	r2, [r7, #15]
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	2100      	movs	r1, #0
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff f912 	bl	80026bc <Output_GPIO>

		}
	}

	//restart channel
	if(ChannelsChange[channel].restart_request)
 8003498:	79fa      	ldrb	r2, [r7, #7]
 800349a:	491b      	ldr	r1, [pc, #108]	; (8003508 <ChannelControl+0x1c4>)
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	3303      	adds	r3, #3
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d028      	beq.n	8003500 <ChannelControl+0x1bc>
	{
		if((HAL_GetTick()-ChannelsChange[channel].restart_timer) >= delay_restart)
 80034ae:	f001 ff03 	bl	80052b8 <HAL_GetTick>
 80034b2:	4601      	mov	r1, r0
 80034b4:	79fa      	ldrb	r2, [r7, #7]
 80034b6:	4814      	ldr	r0, [pc, #80]	; (8003508 <ChannelControl+0x1c4>)
 80034b8:	4613      	mov	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4403      	add	r3, r0
 80034c2:	3310      	adds	r3, #16
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	1acb      	subs	r3, r1, r3
 80034c8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d917      	bls.n	8003500 <ChannelControl+0x1bc>
		{
			//ChannelsChange[channel].restart_request = false;
			//ChannelsChange[channel].restarts_counter++;
			ChannelsChange[channel].restarts_counter++;
 80034d0:	79fa      	ldrb	r2, [r7, #7]
 80034d2:	490d      	ldr	r1, [pc, #52]	; (8003508 <ChannelControl+0x1c4>)
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	3314      	adds	r3, #20
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	3301      	adds	r3, #1
 80034e4:	b2d8      	uxtb	r0, r3
 80034e6:	4908      	ldr	r1, [pc, #32]	; (8003508 <ChannelControl+0x1c4>)
 80034e8:	4613      	mov	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	1a9b      	subs	r3, r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	3314      	adds	r3, #20
 80034f4:	4602      	mov	r2, r0
 80034f6:	701a      	strb	r2, [r3, #0]
			Channel_Enable_fromRestart(channel);
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff fdf2 	bl	80030e4 <Channel_Enable_fromRestart>

		}
	}

}
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20001a14 	.word	0x20001a14
 800350c:	200019d8 	.word	0x200019d8

08003510 <Get_ChannelVoltage>:
 *
 * @param channel -> Channel of power supply (0,1,2)
 * 
 */
void Get_ChannelVoltage(uint8_t channel)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <Get_ChannelVoltage+0x1c>
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d002      	beq.n	800352c <Get_ChannelVoltage+0x1c>
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	2b02      	cmp	r3, #2
 800352a:	d112      	bne.n	8003552 <Get_ChannelVoltage+0x42>

	//SendCommunication(cmd_get_voltage_CH1 + channel, ChannelsStatus[channel].voltage_measurement*100);
	SendCommunication_float(cmd_get_voltage_CH1 + channel, ChannelsStatus[channel].voltage_measurement);
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	330e      	adds	r3, #14
 8003530:	b2d9      	uxtb	r1, r3
 8003532:	79fa      	ldrb	r2, [r7, #7]
 8003534:	4809      	ldr	r0, [pc, #36]	; (800355c <Get_ChannelVoltage+0x4c>)
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4403      	add	r3, r0
 8003540:	3308      	adds	r3, #8
 8003542:	edd3 7a00 	vldr	s15, [r3]
 8003546:	eeb0 0a67 	vmov.f32	s0, s15
 800354a:	4608      	mov	r0, r1
 800354c:	f7fe fbda 	bl	8001d04 <SendCommunication_float>
 8003550:	e000      	b.n	8003554 <Get_ChannelVoltage+0x44>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 8003552:	bf00      	nop
}
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	200019d8 	.word	0x200019d8

08003560 <Get_ChannelCurrent>:
 *
 * @param channel -> Channel of power supply (0,1,2)
 * 
 */
void Get_ChannelCurrent(uint8_t channel)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	71fb      	strb	r3, [r7, #7]
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <Get_ChannelCurrent+0x1c>
 8003570:	79fb      	ldrb	r3, [r7, #7]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d002      	beq.n	800357c <Get_ChannelCurrent+0x1c>
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	2b02      	cmp	r3, #2
 800357a:	d112      	bne.n	80035a2 <Get_ChannelCurrent+0x42>

	//SendCommunication(cmd_get_current_CH1 + channel, ChannelsStatus[channel].current_measurement*1000);
	SendCommunication_float(cmd_get_current_CH1 + channel, ChannelsStatus[channel].current_measurement);
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	3311      	adds	r3, #17
 8003580:	b2d9      	uxtb	r1, r3
 8003582:	79fa      	ldrb	r2, [r7, #7]
 8003584:	4809      	ldr	r0, [pc, #36]	; (80035ac <Get_ChannelCurrent+0x4c>)
 8003586:	4613      	mov	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4403      	add	r3, r0
 8003590:	330c      	adds	r3, #12
 8003592:	edd3 7a00 	vldr	s15, [r3]
 8003596:	eeb0 0a67 	vmov.f32	s0, s15
 800359a:	4608      	mov	r0, r1
 800359c:	f7fe fbb2 	bl	8001d04 <SendCommunication_float>
 80035a0:	e000      	b.n	80035a4 <Get_ChannelCurrent+0x44>
	if(!(channel == 0 || channel == 1 || channel == 2)) return;
 80035a2:	bf00      	nop
}
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	200019d8 	.word	0x200019d8

080035b0 <Get_ErrorSignals>:

void Get_ErrorSignals()
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
	uint8_t error_reg = 0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	71fb      	strb	r3, [r7, #7]

	error_reg |= ChannelsStatus[0].power_good << 0;
 80035ba:	4b20      	ldr	r3, [pc, #128]	; (800363c <Get_ErrorSignals+0x8c>)
 80035bc:	7c5b      	ldrb	r3, [r3, #17]
 80035be:	461a      	mov	r2, r3
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	71fb      	strb	r3, [r7, #7]
	error_reg |= ChannelsStatus[1].power_good << 1;
 80035c6:	4b1d      	ldr	r3, [pc, #116]	; (800363c <Get_ErrorSignals+0x8c>)
 80035c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	b25a      	sxtb	r2, r3
 80035d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	b25b      	sxtb	r3, r3
 80035d8:	71fb      	strb	r3, [r7, #7]
	error_reg |= ChannelsStatus[2].power_good << 2;
 80035da:	4b18      	ldr	r3, [pc, #96]	; (800363c <Get_ErrorSignals+0x8c>)
 80035dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	b25a      	sxtb	r2, r3
 80035e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	b25b      	sxtb	r3, r3
 80035ec:	71fb      	strb	r3, [r7, #7]

	error_reg |= ChannelsStatus[0].over_current << 3;
 80035ee:	4b13      	ldr	r3, [pc, #76]	; (800363c <Get_ErrorSignals+0x8c>)
 80035f0:	7c1b      	ldrb	r3, [r3, #16]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	b25a      	sxtb	r2, r3
 80035f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	b25b      	sxtb	r3, r3
 80035fe:	71fb      	strb	r3, [r7, #7]
	error_reg |= ChannelsStatus[1].over_current << 4;
 8003600:	4b0e      	ldr	r3, [pc, #56]	; (800363c <Get_ErrorSignals+0x8c>)
 8003602:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	b25a      	sxtb	r2, r3
 800360a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360e:	4313      	orrs	r3, r2
 8003610:	b25b      	sxtb	r3, r3
 8003612:	71fb      	strb	r3, [r7, #7]
	error_reg |= ChannelsStatus[2].over_current << 5;
 8003614:	4b09      	ldr	r3, [pc, #36]	; (800363c <Get_ErrorSignals+0x8c>)
 8003616:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800361a:	015b      	lsls	r3, r3, #5
 800361c:	b25a      	sxtb	r2, r3
 800361e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003622:	4313      	orrs	r3, r2
 8003624:	b25b      	sxtb	r3, r3
 8003626:	71fb      	strb	r3, [r7, #7]

	SendCommunication(cmd_error_signals, error_reg);
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	4619      	mov	r1, r3
 800362c:	2014      	movs	r0, #20
 800362e:	f7fe fb15 	bl	8001c5c <SendCommunication>
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	200019d8 	.word	0x200019d8

08003640 <Get_AllMeasurement>:
/* @brief Send by communication all measured value, all voltages and currents
 *
 * 
 */
void Get_AllMeasurement()
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
	Get_ChannelVoltage(0);
 8003644:	2000      	movs	r0, #0
 8003646:	f7ff ff63 	bl	8003510 <Get_ChannelVoltage>
	Get_ChannelVoltage(1);
 800364a:	2001      	movs	r0, #1
 800364c:	f7ff ff60 	bl	8003510 <Get_ChannelVoltage>
	Get_ChannelVoltage(2);
 8003650:	2002      	movs	r0, #2
 8003652:	f7ff ff5d 	bl	8003510 <Get_ChannelVoltage>
	Get_ChannelCurrent(0);
 8003656:	2000      	movs	r0, #0
 8003658:	f7ff ff82 	bl	8003560 <Get_ChannelCurrent>
	Get_ChannelCurrent(1);
 800365c:	2001      	movs	r0, #1
 800365e:	f7ff ff7f 	bl	8003560 <Get_ChannelCurrent>
	Get_ChannelCurrent(2);
 8003662:	2002      	movs	r0, #2
 8003664:	f7ff ff7c 	bl	8003560 <Get_ChannelCurrent>

	Get_ErrorSignals();
 8003668:	f7ff ffa2 	bl	80035b0 <Get_ErrorSignals>
}
 800366c:	bf00      	nop
 800366e:	bd80      	pop	{r7, pc}

08003670 <Get_Setting>:
/* @brief Send by communication setting of power supply
 *
 * 
 */
void Get_Setting()
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
	SendCommunication(cmd_set_voltage_CH1, ChannelsChange[0].request_voltage);
 8003674:	4b2a      	ldr	r3, [pc, #168]	; (8003720 <Get_Setting+0xb0>)
 8003676:	8adb      	ldrh	r3, [r3, #22]
 8003678:	4619      	mov	r1, r3
 800367a:	2008      	movs	r0, #8
 800367c:	f7fe faee 	bl	8001c5c <SendCommunication>
	SendCommunication(cmd_set_voltage_CH2, ChannelsChange[1].request_voltage);
 8003680:	4b27      	ldr	r3, [pc, #156]	; (8003720 <Get_Setting+0xb0>)
 8003682:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003684:	4619      	mov	r1, r3
 8003686:	2009      	movs	r0, #9
 8003688:	f7fe fae8 	bl	8001c5c <SendCommunication>
	SendCommunication(cmd_set_voltage_CH3, ChannelsChange[2].request_voltage);
 800368c:	4b24      	ldr	r3, [pc, #144]	; (8003720 <Get_Setting+0xb0>)
 800368e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8003692:	4619      	mov	r1, r3
 8003694:	200a      	movs	r0, #10
 8003696:	f7fe fae1 	bl	8001c5c <SendCommunication>

	//SendCommunication(cmd_set_voltage_CH1,ChannelsStatus[0].set_voltage);
	//SendCommunication(cmd_set_voltage_CH2,ChannelsStatus[1].set_voltage);
	//SendCommunication(cmd_set_voltage_CH3,ChannelsStatus[2].set_voltage);

	SendCommunication(cmd_enable_CH1, ChannelsStatus[0].enable);
 800369a:	4b22      	ldr	r3, [pc, #136]	; (8003724 <Get_Setting+0xb4>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	4619      	mov	r1, r3
 80036a0:	2002      	movs	r0, #2
 80036a2:	f7fe fadb 	bl	8001c5c <SendCommunication>
	SendCommunication(cmd_enable_CH2, ChannelsStatus[1].enable);
 80036a6:	4b1f      	ldr	r3, [pc, #124]	; (8003724 <Get_Setting+0xb4>)
 80036a8:	7d1b      	ldrb	r3, [r3, #20]
 80036aa:	4619      	mov	r1, r3
 80036ac:	2003      	movs	r0, #3
 80036ae:	f7fe fad5 	bl	8001c5c <SendCommunication>
	SendCommunication(cmd_enable_CH3, ChannelsStatus[2].enable);
 80036b2:	4b1c      	ldr	r3, [pc, #112]	; (8003724 <Get_Setting+0xb4>)
 80036b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036b8:	4619      	mov	r1, r3
 80036ba:	2004      	movs	r0, #4
 80036bc:	f7fe face 	bl	8001c5c <SendCommunication>

	SendCommunication(cmd_polarity_CH1, ChannelsStatus[0].polarity + 1);
 80036c0:	4b18      	ldr	r3, [pc, #96]	; (8003724 <Get_Setting+0xb4>)
 80036c2:	791b      	ldrb	r3, [r3, #4]
 80036c4:	3301      	adds	r3, #1
 80036c6:	4619      	mov	r1, r3
 80036c8:	200b      	movs	r0, #11
 80036ca:	f7fe fac7 	bl	8001c5c <SendCommunication>
	SendCommunication(cmd_polarity_CH2, ChannelsStatus[1].polarity + 1);
 80036ce:	4b15      	ldr	r3, [pc, #84]	; (8003724 <Get_Setting+0xb4>)
 80036d0:	7e1b      	ldrb	r3, [r3, #24]
 80036d2:	3301      	adds	r3, #1
 80036d4:	4619      	mov	r1, r3
 80036d6:	200c      	movs	r0, #12
 80036d8:	f7fe fac0 	bl	8001c5c <SendCommunication>
	SendCommunication(cmd_polarity_CH3, ChannelsStatus[2].polarity + 1);
 80036dc:	4b11      	ldr	r3, [pc, #68]	; (8003724 <Get_Setting+0xb4>)
 80036de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80036e2:	3301      	adds	r3, #1
 80036e4:	4619      	mov	r1, r3
 80036e6:	200d      	movs	r0, #13
 80036e8:	f7fe fab8 	bl	8001c5c <SendCommunication>

	SendCommunication(cmd_output_CH1, ChannelsStatus[0].output);
 80036ec:	4b0d      	ldr	r3, [pc, #52]	; (8003724 <Get_Setting+0xb4>)
 80036ee:	795b      	ldrb	r3, [r3, #5]
 80036f0:	4619      	mov	r1, r3
 80036f2:	2005      	movs	r0, #5
 80036f4:	f7fe fab2 	bl	8001c5c <SendCommunication>
	SendCommunication(cmd_output_CH2, ChannelsStatus[1].output);
 80036f8:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <Get_Setting+0xb4>)
 80036fa:	7e5b      	ldrb	r3, [r3, #25]
 80036fc:	4619      	mov	r1, r3
 80036fe:	2006      	movs	r0, #6
 8003700:	f7fe faac 	bl	8001c5c <SendCommunication>
	SendCommunication(cmd_output_CH3, ChannelsStatus[2].output);
 8003704:	4b07      	ldr	r3, [pc, #28]	; (8003724 <Get_Setting+0xb4>)
 8003706:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800370a:	4619      	mov	r1, r3
 800370c:	2007      	movs	r0, #7
 800370e:	f7fe faa5 	bl	8001c5c <SendCommunication>

	SendCommunication(cmd_thats_all, 1);
 8003712:	2101      	movs	r1, #1
 8003714:	2017      	movs	r0, #23
 8003716:	f7fe faa1 	bl	8001c5c <SendCommunication>
}
 800371a:	bf00      	nop
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20001a14 	.word	0x20001a14
 8003724:	200019d8 	.word	0x200019d8

08003728 <Get_State_err>:

void Get_State_err()
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0

	for(int i = 0; i <3; i++)
 800372e:	2300      	movs	r3, #0
 8003730:	607b      	str	r3, [r7, #4]
 8003732:	e028      	b.n	8003786 <Get_State_err+0x5e>
	{
		uint8_t err_state = 0;
 8003734:	2300      	movs	r3, #0
 8003736:	70fb      	strb	r3, [r7, #3]

		if(ChannelsStatus[i].disableInError)//kanal byl vypnut z erroru
 8003738:	4917      	ldr	r1, [pc, #92]	; (8003798 <Get_State_err+0x70>)
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	3312      	adds	r3, #18
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <Get_State_err+0x2c>
		{
			err_state = 1;
 800374e:	2301      	movs	r3, #1
 8003750:	70fb      	strb	r3, [r7, #3]
 8003752:	e00c      	b.n	800376e <Get_State_err+0x46>
		}
		else if(ChannelsChange[i].restart_request) //kanal se restartuje
 8003754:	4911      	ldr	r1, [pc, #68]	; (800379c <Get_State_err+0x74>)
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	3303      	adds	r3, #3
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <Get_State_err+0x46>
		{
			err_state = 2;
 800376a:	2302      	movs	r3, #2
 800376c:	70fb      	strb	r3, [r7, #3]
		}

		SendCommunication(cmd_ch1_get_err_state + i, err_state);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	b2db      	uxtb	r3, r3
 8003772:	334d      	adds	r3, #77	; 0x4d
 8003774:	b2db      	uxtb	r3, r3
 8003776:	78fa      	ldrb	r2, [r7, #3]
 8003778:	4611      	mov	r1, r2
 800377a:	4618      	mov	r0, r3
 800377c:	f7fe fa6e 	bl	8001c5c <SendCommunication>
	for(int i = 0; i <3; i++)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3301      	adds	r3, #1
 8003784:	607b      	str	r3, [r7, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b02      	cmp	r3, #2
 800378a:	ddd3      	ble.n	8003734 <Get_State_err+0xc>
	}

}
 800378c:	bf00      	nop
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	200019d8 	.word	0x200019d8
 800379c:	20001a14 	.word	0x20001a14

080037a0 <System_Reset>:
/* @brief reset MCU
 *
 *
 */
void System_Reset()
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80037a4:	f3bf 8f4f 	dsb	sy
}
 80037a8:	bf00      	nop
	__DSB();
	SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) | (SCB_AIRCR_SYSRESETREQ_Msk));
 80037aa:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <System_Reset+0x18>)
 80037ac:	4a03      	ldr	r2, [pc, #12]	; (80037bc <System_Reset+0x1c>)
 80037ae:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80037b0:	f3bf 8f4f 	dsb	sy
}
 80037b4:	bf00      	nop
	__DSB();
	while(1);
 80037b6:	e7fe      	b.n	80037b6 <System_Reset+0x16>
 80037b8:	e000ed00 	.word	0xe000ed00
 80037bc:	05fa0004 	.word	0x05fa0004

080037c0 <MakeUint32FromFloat>:
FlashSectorParams MainParams;
FlashSectorParams DefaultParams;


uint32_t MakeUint32FromFloat(float value)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
	uint32_t x;
	memcpy(&x,&value,sizeof(x));
 80037cc:	60fb      	str	r3, [r7, #12]

	return x;
 80037ce:	68fb      	ldr	r3, [r7, #12]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <ParamsDefaultValues>:



void ParamsDefaultValues()
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0

	DefaultParams.sramOffset_StoreControl_0 = 0;
 80037e0:	4b4d      	ldr	r3, [pc, #308]	; (8003918 <ParamsDefaultValues+0x13c>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]
	DefaultParams.sramOffset_StoreControl_1 = 0;
 80037e6:	4b4c      	ldr	r3, [pc, #304]	; (8003918 <ParamsDefaultValues+0x13c>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	605a      	str	r2, [r3, #4]

	DefaultParams.sramOffset_IP_ADDRESS = ip_MAKEU32(192,168,0,22);
 80037ec:	4b4a      	ldr	r3, [pc, #296]	; (8003918 <ParamsDefaultValues+0x13c>)
 80037ee:	4a4b      	ldr	r2, [pc, #300]	; (800391c <ParamsDefaultValues+0x140>)
 80037f0:	609a      	str	r2, [r3, #8]
	DefaultParams.sramOffset_NETMASK_ADDRESS = ip_MAKEU32(255,255,255,0);
 80037f2:	4b49      	ldr	r3, [pc, #292]	; (8003918 <ParamsDefaultValues+0x13c>)
 80037f4:	f06f 02ff 	mvn.w	r2, #255	; 0xff
 80037f8:	60da      	str	r2, [r3, #12]
	DefaultParams.sramOffset_GATEWAY_ADDRESS = ip_MAKEU32(192,168,0,1);
 80037fa:	4b47      	ldr	r3, [pc, #284]	; (8003918 <ParamsDefaultValues+0x13c>)
 80037fc:	4a48      	ldr	r2, [pc, #288]	; (8003920 <ParamsDefaultValues+0x144>)
 80037fe:	611a      	str	r2, [r3, #16]

	DefaultParams.sramOffset_ReadCoef_k_0 = MakeUint32FromFloat(Default_Meas_U_Coef_k);
 8003800:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8003924 <ParamsDefaultValues+0x148>
 8003804:	f7ff ffdc 	bl	80037c0 <MakeUint32FromFloat>
 8003808:	4603      	mov	r3, r0
 800380a:	4a43      	ldr	r2, [pc, #268]	; (8003918 <ParamsDefaultValues+0x13c>)
 800380c:	6153      	str	r3, [r2, #20]
	DefaultParams.sramOffset_ReadCoef_k_1 = MakeUint32FromFloat(Default_Meas_U_Coef_k);
 800380e:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8003924 <ParamsDefaultValues+0x148>
 8003812:	f7ff ffd5 	bl	80037c0 <MakeUint32FromFloat>
 8003816:	4603      	mov	r3, r0
 8003818:	4a3f      	ldr	r2, [pc, #252]	; (8003918 <ParamsDefaultValues+0x13c>)
 800381a:	6193      	str	r3, [r2, #24]
	DefaultParams.sramOffset_ReadCoef_k_2 = MakeUint32FromFloat(Default_Meas_U_Coef_k);
 800381c:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8003924 <ParamsDefaultValues+0x148>
 8003820:	f7ff ffce 	bl	80037c0 <MakeUint32FromFloat>
 8003824:	4603      	mov	r3, r0
 8003826:	4a3c      	ldr	r2, [pc, #240]	; (8003918 <ParamsDefaultValues+0x13c>)
 8003828:	61d3      	str	r3, [r2, #28]
	DefaultParams.sramOffset_ReadCoef_k_3 = MakeUint32FromFloat(Default_Meas_I_Coef_k);
 800382a:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8003928 <ParamsDefaultValues+0x14c>
 800382e:	f7ff ffc7 	bl	80037c0 <MakeUint32FromFloat>
 8003832:	4603      	mov	r3, r0
 8003834:	4a38      	ldr	r2, [pc, #224]	; (8003918 <ParamsDefaultValues+0x13c>)
 8003836:	6213      	str	r3, [r2, #32]
	DefaultParams.sramOffset_ReadCoef_k_4 = MakeUint32FromFloat(Default_Meas_I_Coef_k);
 8003838:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8003928 <ParamsDefaultValues+0x14c>
 800383c:	f7ff ffc0 	bl	80037c0 <MakeUint32FromFloat>
 8003840:	4603      	mov	r3, r0
 8003842:	4a35      	ldr	r2, [pc, #212]	; (8003918 <ParamsDefaultValues+0x13c>)
 8003844:	6253      	str	r3, [r2, #36]	; 0x24
	DefaultParams.sramOffset_ReadCoef_k_5 = MakeUint32FromFloat(Default_Meas_I_Coef_k);
 8003846:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8003928 <ParamsDefaultValues+0x14c>
 800384a:	f7ff ffb9 	bl	80037c0 <MakeUint32FromFloat>
 800384e:	4603      	mov	r3, r0
 8003850:	4a31      	ldr	r2, [pc, #196]	; (8003918 <ParamsDefaultValues+0x13c>)
 8003852:	6293      	str	r3, [r2, #40]	; 0x28

	DefaultParams.sramOffset_ReadCoef_q_0 = MakeUint32FromFloat(Default_Meas_U_Coef_q);
 8003854:	ed9f 0a35 	vldr	s0, [pc, #212]	; 800392c <ParamsDefaultValues+0x150>
 8003858:	f7ff ffb2 	bl	80037c0 <MakeUint32FromFloat>
 800385c:	4603      	mov	r3, r0
 800385e:	4a2e      	ldr	r2, [pc, #184]	; (8003918 <ParamsDefaultValues+0x13c>)
 8003860:	62d3      	str	r3, [r2, #44]	; 0x2c
	DefaultParams.sramOffset_ReadCoef_q_1 = MakeUint32FromFloat(Default_Meas_U_Coef_q);
 8003862:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800392c <ParamsDefaultValues+0x150>
 8003866:	f7ff ffab 	bl	80037c0 <MakeUint32FromFloat>
 800386a:	4603      	mov	r3, r0
 800386c:	4a2a      	ldr	r2, [pc, #168]	; (8003918 <ParamsDefaultValues+0x13c>)
 800386e:	6313      	str	r3, [r2, #48]	; 0x30
	DefaultParams.sramOffset_ReadCoef_q_2 = MakeUint32FromFloat(Default_Meas_U_Coef_q);
 8003870:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800392c <ParamsDefaultValues+0x150>
 8003874:	f7ff ffa4 	bl	80037c0 <MakeUint32FromFloat>
 8003878:	4603      	mov	r3, r0
 800387a:	4a27      	ldr	r2, [pc, #156]	; (8003918 <ParamsDefaultValues+0x13c>)
 800387c:	6353      	str	r3, [r2, #52]	; 0x34
	DefaultParams.sramOffset_ReadCoef_q_3 = MakeUint32FromFloat(Default_Meas_I_Coef_q);
 800387e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8003930 <ParamsDefaultValues+0x154>
 8003882:	f7ff ff9d 	bl	80037c0 <MakeUint32FromFloat>
 8003886:	4603      	mov	r3, r0
 8003888:	4a23      	ldr	r2, [pc, #140]	; (8003918 <ParamsDefaultValues+0x13c>)
 800388a:	6393      	str	r3, [r2, #56]	; 0x38
	DefaultParams.sramOffset_ReadCoef_q_4 = MakeUint32FromFloat(Default_Meas_I_Coef_q);
 800388c:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8003930 <ParamsDefaultValues+0x154>
 8003890:	f7ff ff96 	bl	80037c0 <MakeUint32FromFloat>
 8003894:	4603      	mov	r3, r0
 8003896:	4a20      	ldr	r2, [pc, #128]	; (8003918 <ParamsDefaultValues+0x13c>)
 8003898:	63d3      	str	r3, [r2, #60]	; 0x3c
	DefaultParams.sramOffset_ReadCoef_q_5 = MakeUint32FromFloat(Default_Meas_I_Coef_q);
 800389a:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8003930 <ParamsDefaultValues+0x154>
 800389e:	f7ff ff8f 	bl	80037c0 <MakeUint32FromFloat>
 80038a2:	4603      	mov	r3, r0
 80038a4:	4a1c      	ldr	r2, [pc, #112]	; (8003918 <ParamsDefaultValues+0x13c>)
 80038a6:	6413      	str	r3, [r2, #64]	; 0x40

	DefaultParams.sramOffset_AdjCoef_k_ch0 =  MakeUint32FromFloat(Default_AdjCoef_k);
 80038a8:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8003934 <ParamsDefaultValues+0x158>
 80038ac:	f7ff ff88 	bl	80037c0 <MakeUint32FromFloat>
 80038b0:	4603      	mov	r3, r0
 80038b2:	4a19      	ldr	r2, [pc, #100]	; (8003918 <ParamsDefaultValues+0x13c>)
 80038b4:	6453      	str	r3, [r2, #68]	; 0x44
	DefaultParams.sramOffset_AdjCoef_k_ch1  =  MakeUint32FromFloat(Default_AdjCoef_k);
 80038b6:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8003934 <ParamsDefaultValues+0x158>
 80038ba:	f7ff ff81 	bl	80037c0 <MakeUint32FromFloat>
 80038be:	4603      	mov	r3, r0
 80038c0:	4a15      	ldr	r2, [pc, #84]	; (8003918 <ParamsDefaultValues+0x13c>)
 80038c2:	6493      	str	r3, [r2, #72]	; 0x48
	DefaultParams.sramOffset_AdjCoef_k_ch2  =  MakeUint32FromFloat(Default_AdjCoef_k);
 80038c4:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8003934 <ParamsDefaultValues+0x158>
 80038c8:	f7ff ff7a 	bl	80037c0 <MakeUint32FromFloat>
 80038cc:	4603      	mov	r3, r0
 80038ce:	4a12      	ldr	r2, [pc, #72]	; (8003918 <ParamsDefaultValues+0x13c>)
 80038d0:	64d3      	str	r3, [r2, #76]	; 0x4c
	DefaultParams.sramOffset_AdjCoef_q_ch0 = MakeUint32FromFloat(Default_AdjCoef_q);
 80038d2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8003938 <ParamsDefaultValues+0x15c>
 80038d6:	f7ff ff73 	bl	80037c0 <MakeUint32FromFloat>
 80038da:	4603      	mov	r3, r0
 80038dc:	4a0e      	ldr	r2, [pc, #56]	; (8003918 <ParamsDefaultValues+0x13c>)
 80038de:	6513      	str	r3, [r2, #80]	; 0x50
	DefaultParams.sramOffset_AdjCoef_q_ch1 =  MakeUint32FromFloat(Default_AdjCoef_q);
 80038e0:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8003938 <ParamsDefaultValues+0x15c>
 80038e4:	f7ff ff6c 	bl	80037c0 <MakeUint32FromFloat>
 80038e8:	4603      	mov	r3, r0
 80038ea:	4a0b      	ldr	r2, [pc, #44]	; (8003918 <ParamsDefaultValues+0x13c>)
 80038ec:	6553      	str	r3, [r2, #84]	; 0x54
	DefaultParams.sramOffset_AdjCoef_q_ch2  =  MakeUint32FromFloat(Default_AdjCoef_q);
 80038ee:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8003938 <ParamsDefaultValues+0x15c>
 80038f2:	f7ff ff65 	bl	80037c0 <MakeUint32FromFloat>
 80038f6:	4603      	mov	r3, r0
 80038f8:	4a07      	ldr	r2, [pc, #28]	; (8003918 <ParamsDefaultValues+0x13c>)
 80038fa:	6593      	str	r3, [r2, #88]	; 0x58

	DefaultParams.sramOffset_EnableErrorExecute = 1;
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <ParamsDefaultValues+0x13c>)
 80038fe:	2201      	movs	r2, #1
 8003900:	65da      	str	r2, [r3, #92]	; 0x5c
	DefaultParams.sramOffset_DisableSupplyInLostConnection = 0;
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <ParamsDefaultValues+0x13c>)
 8003904:	2200      	movs	r2, #0
 8003906:	661a      	str	r2, [r3, #96]	; 0x60
	DefaultParams.sramOffset_ControlOutputWithChannelEnable = 1;
 8003908:	4b03      	ldr	r3, [pc, #12]	; (8003918 <ParamsDefaultValues+0x13c>)
 800390a:	2201      	movs	r2, #1
 800390c:	665a      	str	r2, [r3, #100]	; 0x64
	DefaultParams.sramOffset_ErrorExecuteAutoRestore = 1;
 800390e:	4b02      	ldr	r3, [pc, #8]	; (8003918 <ParamsDefaultValues+0x13c>)
 8003910:	2201      	movs	r2, #1
 8003912:	669a      	str	r2, [r3, #104]	; 0x68


}
 8003914:	bf00      	nop
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20001ad4 	.word	0x20001ad4
 800391c:	c0a80016 	.word	0xc0a80016
 8003920:	c0a80001 	.word	0xc0a80001
 8003924:	3bb0a345 	.word	0x3bb0a345
 8003928:	3dc710cb 	.word	0x3dc710cb
 800392c:	3d824867 	.word	0x3d824867
 8003930:	3d7d8adb 	.word	0x3d7d8adb
 8003934:	43edaf19 	.word	0x43edaf19
 8003938:	44291abb 	.word	0x44291abb

0800393c <ParamsLoad>:


void ParamsLoad()
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b09e      	sub	sp, #120	; 0x78
 8003940:	af00      	add	r7, sp, #0

	FlashSectorParams LoadParams;

	Flash_ReadParamStruct(&LoadParams);
 8003942:	1d3b      	adds	r3, r7, #4
 8003944:	4618      	mov	r0, r3
 8003946:	f000 fe61 	bl	800460c <Flash_ReadParamStruct>

	uint32_t StoreControl_0 = LoadParams.sramOffset_StoreControl_0;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	673b      	str	r3, [r7, #112]	; 0x70
	//uint32_t StoreControl_1 = LoadParams.sramOffset_StoreControl_1;


	for(int i = 2; i < NUMBER_OF_PARAMS;i++)
 800394e:	2302      	movs	r3, #2
 8003950:	677b      	str	r3, [r7, #116]	; 0x74
 8003952:	e01b      	b.n	800398c <ParamsLoad+0x50>
	{
		//if((StoreControl_0 == STORE_VALIDE_CODE) &&  ((StoreControl_1 >> i) & 0x000001))
		if(StoreControl_0 == STORE_VALIDE_CODE)
 8003954:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003956:	4a11      	ldr	r2, [pc, #68]	; (800399c <ParamsLoad+0x60>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d10a      	bne.n	8003972 <ParamsLoad+0x36>
		{
			*((uint32_t*)(&MainParams)+i) = *((uint32_t*)(&LoadParams)+i);
 800395c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	1d3a      	adds	r2, r7, #4
 8003962:	441a      	add	r2, r3
 8003964:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	490d      	ldr	r1, [pc, #52]	; (80039a0 <ParamsLoad+0x64>)
 800396a:	440b      	add	r3, r1
 800396c:	6812      	ldr	r2, [r2, #0]
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	e009      	b.n	8003986 <ParamsLoad+0x4a>


		}
		else
		{
			*((uint32_t*)(&MainParams)+i) = *((uint32_t*)(&DefaultParams)+i);
 8003972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4a0b      	ldr	r2, [pc, #44]	; (80039a4 <ParamsLoad+0x68>)
 8003978:	441a      	add	r2, r3
 800397a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4908      	ldr	r1, [pc, #32]	; (80039a0 <ParamsLoad+0x64>)
 8003980:	440b      	add	r3, r1
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	601a      	str	r2, [r3, #0]
	for(int i = 2; i < NUMBER_OF_PARAMS;i++)
 8003986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003988:	3301      	adds	r3, #1
 800398a:	677b      	str	r3, [r7, #116]	; 0x74
 800398c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800398e:	2b1a      	cmp	r3, #26
 8003990:	d9e0      	bls.n	8003954 <ParamsLoad+0x18>
		}
	}

}
 8003992:	bf00      	nop
 8003994:	bf00      	nop
 8003996:	3778      	adds	r7, #120	; 0x78
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	a4b7a4b7 	.word	0xa4b7a4b7
 80039a0:	20001a68 	.word	0x20001a68
 80039a4:	20001ad4 	.word	0x20001ad4

080039a8 <ParamsStore>:

void ParamsStore()
{
 80039a8:	b590      	push	{r4, r7, lr}
 80039aa:	b099      	sub	sp, #100	; 0x64
 80039ac:	af18      	add	r7, sp, #96	; 0x60
	MainParams.sramOffset_StoreControl_0 = STORE_VALIDE_CODE;
 80039ae:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <ParamsStore+0x34>)
 80039b0:	4a0b      	ldr	r2, [pc, #44]	; (80039e0 <ParamsStore+0x38>)
 80039b2:	601a      	str	r2, [r3, #0]
	MainParams.sramOffset_StoreControl_1 = 0xA1B2C3D4;
 80039b4:	4b09      	ldr	r3, [pc, #36]	; (80039dc <ParamsStore+0x34>)
 80039b6:	4a0b      	ldr	r2, [pc, #44]	; (80039e4 <ParamsStore+0x3c>)
 80039b8:	605a      	str	r2, [r3, #4]

	Flash_WriteParamStruct(MainParams);
 80039ba:	4c08      	ldr	r4, [pc, #32]	; (80039dc <ParamsStore+0x34>)
 80039bc:	4668      	mov	r0, sp
 80039be:	f104 0310 	add.w	r3, r4, #16
 80039c2:	225c      	movs	r2, #92	; 0x5c
 80039c4:	4619      	mov	r1, r3
 80039c6:	f005 fffd 	bl	80099c4 <memcpy>
 80039ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80039ce:	f000 fe3f 	bl	8004650 <Flash_WriteParamStruct>
}
 80039d2:	bf00      	nop
 80039d4:	3704      	adds	r7, #4
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd90      	pop	{r4, r7, pc}
 80039da:	bf00      	nop
 80039dc:	20001a68 	.word	0x20001a68
 80039e0:	a4b7a4b7 	.word	0xa4b7a4b7
 80039e4:	a1b2c3d4 	.word	0xa1b2c3d4

080039e8 <RestoreParamsDefault>:

void RestoreParamsDefault()
{
 80039e8:	b590      	push	{r4, r7, lr}
 80039ea:	b099      	sub	sp, #100	; 0x64
 80039ec:	af18      	add	r7, sp, #96	; 0x60
	Flash_WriteParamStruct(DefaultParams);
 80039ee:	4c09      	ldr	r4, [pc, #36]	; (8003a14 <RestoreParamsDefault+0x2c>)
 80039f0:	4668      	mov	r0, sp
 80039f2:	f104 0310 	add.w	r3, r4, #16
 80039f6:	225c      	movs	r2, #92	; 0x5c
 80039f8:	4619      	mov	r1, r3
 80039fa:	f005 ffe3 	bl	80099c4 <memcpy>
 80039fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003a02:	f000 fe25 	bl	8004650 <Flash_WriteParamStruct>
	ParamsLoad();
 8003a06:	f7ff ff99 	bl	800393c <ParamsLoad>
}
 8003a0a:	bf00      	nop
 8003a0c:	3704      	adds	r7, #4
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd90      	pop	{r4, r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20001ad4 	.word	0x20001ad4

08003a18 <SetConfigData>:




void SetConfigData(int cfg, int value)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
	uint32_t *addr = &MainParams.sramOffset_EnableErrorExecute + cfg;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4a06      	ldr	r2, [pc, #24]	; (8003a40 <SetConfigData+0x28>)
 8003a28:	4413      	add	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]

	*addr = value;
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	601a      	str	r2, [r3, #0]

}
 8003a32:	bf00      	nop
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	20001ac4 	.word	0x20001ac4

08003a44 <SendConfigData>:


void SendConfigData()
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
	SendCommunication(cmd_CfgGet_EnableErrorExecute, MainParams.sramOffset_EnableErrorExecute);
 8003a48:	4b0c      	ldr	r3, [pc, #48]	; (8003a7c <SendConfigData+0x38>)
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	2055      	movs	r0, #85	; 0x55
 8003a50:	f7fe f904 	bl	8001c5c <SendCommunication>
	SendCommunication(cmd_CfgGet_DisableInConnLost, MainParams.sramOffset_DisableSupplyInLostConnection);
 8003a54:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <SendConfigData+0x38>)
 8003a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a58:	4619      	mov	r1, r3
 8003a5a:	2056      	movs	r0, #86	; 0x56
 8003a5c:	f7fe f8fe 	bl	8001c5c <SendCommunication>
	SendCommunication(cmd_CfgGet_CtrlOutWithChEnable, MainParams.sramOffset_ControlOutputWithChannelEnable);
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <SendConfigData+0x38>)
 8003a62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a64:	4619      	mov	r1, r3
 8003a66:	2057      	movs	r0, #87	; 0x57
 8003a68:	f7fe f8f8 	bl	8001c5c <SendCommunication>
	SendCommunication(cmd_CfgGet_ErrorExecuteAutoRestart, MainParams.sramOffset_ErrorExecuteAutoRestore);
 8003a6c:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <SendConfigData+0x38>)
 8003a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a70:	4619      	mov	r1, r3
 8003a72:	2058      	movs	r0, #88	; 0x58
 8003a74:	f7fe f8f2 	bl	8001c5c <SendCommunication>
}
 8003a78:	bf00      	nop
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	20001a68 	.word	0x20001a68

08003a80 <SendCommandToDAC>:
 * @param value -> value to write in DAC register
 * @param rw    -> read/write bit
 *
 */
void SendCommandToDAC(uint8_t adr, uint16_t value,  bool rw)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	71fb      	strb	r3, [r7, #7]
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	80bb      	strh	r3, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	71bb      	strb	r3, [r7, #6]

	uint8_t data[3];

	data[2] = value & (0x00FF);
 8003a92:	88bb      	ldrh	r3, [r7, #4]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	73bb      	strb	r3, [r7, #14]
	data[1] = value >> 8;
 8003a98:	88bb      	ldrh	r3, [r7, #4]
 8003a9a:	0a1b      	lsrs	r3, r3, #8
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	737b      	strb	r3, [r7, #13]
	data[0] = (adr & 0x0F) | (rw << 7);
 8003aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	b25a      	sxtb	r2, r3
 8003aac:	79bb      	ldrb	r3, [r7, #6]
 8003aae:	01db      	lsls	r3, r3, #7
 8003ab0:	b25b      	sxtb	r3, r3
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	b25b      	sxtb	r3, r3
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8003aba:	2200      	movs	r2, #0
 8003abc:	2110      	movs	r1, #16
 8003abe:	4809      	ldr	r0, [pc, #36]	; (8003ae4 <SendCommandToDAC+0x64>)
 8003ac0:	f002 fc1a 	bl	80062f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, sizeof(data),10);
 8003ac4:	f107 010c 	add.w	r1, r7, #12
 8003ac8:	230a      	movs	r3, #10
 8003aca:	2203      	movs	r2, #3
 8003acc:	4806      	ldr	r0, [pc, #24]	; (8003ae8 <SendCommandToDAC+0x68>)
 8003ace:	f003 fa52 	bl	8006f76 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	2110      	movs	r1, #16
 8003ad6:	4803      	ldr	r0, [pc, #12]	; (8003ae4 <SendCommandToDAC+0x64>)
 8003ad8:	f002 fc0e 	bl	80062f8 <HAL_GPIO_WritePin>
}
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40020000 	.word	0x40020000
 8003ae8:	20002c00 	.word	0x20002c00

08003aec <SendValueToDAC>:
 * @param dac_channel -> DAC output channel
 * @param value       -> value to write in DAC output register
 *
 */
void SendValueToDAC(uint8_t dac_channel, uint16_t value)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	460a      	mov	r2, r1
 8003af6:	71fb      	strb	r3, [r7, #7]
 8003af8:	4613      	mov	r3, r2
 8003afa:	80bb      	strh	r3, [r7, #4]

	uint8_t data[3];

	data[2] = value & 0x000F;
 8003afc:	88bb      	ldrh	r3, [r7, #4]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	f003 030f 	and.w	r3, r3, #15
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	73bb      	strb	r3, [r7, #14]
	data[1] = value >> 4;
 8003b08:	88bb      	ldrh	r3, [r7, #4]
 8003b0a:	091b      	lsrs	r3, r3, #4
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	737b      	strb	r3, [r7, #13]
	data[0] = (dac_channel & 0x07) | (1 << 3) | (0 << 7);
 8003b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	b25b      	sxtb	r3, r3
 8003b1c:	f043 0308 	orr.w	r3, r3, #8
 8003b20:	b25b      	sxtb	r3, r3
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8003b26:	2200      	movs	r2, #0
 8003b28:	2110      	movs	r1, #16
 8003b2a:	4809      	ldr	r0, [pc, #36]	; (8003b50 <SendValueToDAC+0x64>)
 8003b2c:	f002 fbe4 	bl	80062f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, sizeof(data),10);
 8003b30:	f107 010c 	add.w	r1, r7, #12
 8003b34:	230a      	movs	r3, #10
 8003b36:	2203      	movs	r2, #3
 8003b38:	4806      	ldr	r0, [pc, #24]	; (8003b54 <SendValueToDAC+0x68>)
 8003b3a:	f003 fa1c 	bl	8006f76 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8003b3e:	2201      	movs	r2, #1
 8003b40:	2110      	movs	r1, #16
 8003b42:	4803      	ldr	r0, [pc, #12]	; (8003b50 <SendValueToDAC+0x64>)
 8003b44:	f002 fbd8 	bl	80062f8 <HAL_GPIO_WritePin>

}
 8003b48:	bf00      	nop
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40020000 	.word	0x40020000
 8003b54:	20002c00 	.word	0x20002c00

08003b58 <DAC_Init>:

/* @brief DAC initialization
 *
 */
void DAC_Init()
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
	SendCommandToDAC(0, 0, 0); //dummy command
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2100      	movs	r1, #0
 8003b62:	2000      	movs	r0, #0
 8003b64:	f7ff ff8c 	bl	8003a80 <SendCommandToDAC>
	SendCommandToDAC(5, 0xA, 0); //reset up
 8003b68:	2200      	movs	r2, #0
 8003b6a:	210a      	movs	r1, #10
 8003b6c:	2005      	movs	r0, #5
 8003b6e:	f7ff ff87 	bl	8003a80 <SendCommandToDAC>
	SendCommandToDAC(5, 0, 0); //reset down
 8003b72:	2200      	movs	r2, #0
 8003b74:	2100      	movs	r1, #0
 8003b76:	2005      	movs	r0, #5
 8003b78:	f7ff ff82 	bl	8003a80 <SendCommandToDAC>
	SendCommandToDAC(2, 0, 0); //sync register -> all 0
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2100      	movs	r1, #0
 8003b80:	2002      	movs	r0, #2
 8003b82:	f7ff ff7d 	bl	8003a80 <SendCommandToDAC>
	SendCommandToDAC(3, 0, 0); //config register -> all 0
 8003b86:	2200      	movs	r2, #0
 8003b88:	2100      	movs	r1, #0
 8003b8a:	2003      	movs	r0, #3
 8003b8c:	f7ff ff78 	bl	8003a80 <SendCommandToDAC>
	SendCommandToDAC(4, 0 | (1 << 8)  , 0); //gain register -> reference diveded by 2
 8003b90:	2200      	movs	r2, #0
 8003b92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b96:	2004      	movs	r0, #4
 8003b98:	f7ff ff72 	bl	8003a80 <SendCommandToDAC>

	for(int i = 0; i < 8; i++)
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	607b      	str	r3, [r7, #4]
 8003ba0:	e009      	b.n	8003bb6 <DAC_Init+0x5e>
	{
		SendValueToDAC(i, 4095); // set all DAC channels on maximum value -> minimum output voltage of power supply
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	f640 71ff 	movw	r1, #4095	; 0xfff
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff ff9e 	bl	8003aec <SendValueToDAC>
	for(int i = 0; i < 8; i++)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b07      	cmp	r3, #7
 8003bba:	ddf2      	ble.n	8003ba2 <DAC_Init+0x4a>
	}

}
 8003bbc:	bf00      	nop
 8003bbe:	bf00      	nop
 8003bc0:	3708      	adds	r7, #8
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
	...

08003bc8 <ETH_StoreIP>:
 *
 * @param ip -> ip address
 *
 */
void ETH_StoreIP(uint32_t ip)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
	MainParams.sramOffset_IP_ADDRESS = ip;
 8003bd0:	4a04      	ldr	r2, [pc, #16]	; (8003be4 <ETH_StoreIP+0x1c>)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6093      	str	r3, [r2, #8]
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	20001a68 	.word	0x20001a68

08003be8 <ETH_StoreNETMASK>:
 *
 * @param netmask -> netmask address
 *
 */
void ETH_StoreNETMASK(uint32_t netmask)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
	MainParams.sramOffset_NETMASK_ADDRESS = netmask;
 8003bf0:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <ETH_StoreNETMASK+0x1c>)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	60d3      	str	r3, [r2, #12]
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20001a68 	.word	0x20001a68

08003c08 <ETH_StoreGATEWAY>:
 *
 * @param gateway -> gateway address
 *
 */
void ETH_StoreGATEWAY(uint32_t gateway)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
	MainParams.sramOffset_GATEWAY_ADDRESS = gateway;
 8003c10:	4a04      	ldr	r2, [pc, #16]	; (8003c24 <ETH_StoreGATEWAY+0x1c>)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6113      	str	r3, [r2, #16]
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20001a68 	.word	0x20001a68

08003c28 <ETH_GetIP>:
/* @brief get ip address from sram
 *
 *
 */
uint32_t ETH_GetIP()
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
	uint32_t temp = ip_MAKEU32(myNetInfo.ip[0], myNetInfo.ip[1], myNetInfo.ip[2], myNetInfo.ip[3]);
 8003c2e:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <ETH_GetIP+0x34>)
 8003c30:	799b      	ldrb	r3, [r3, #6]
 8003c32:	061a      	lsls	r2, r3, #24
 8003c34:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <ETH_GetIP+0x34>)
 8003c36:	79db      	ldrb	r3, [r3, #7]
 8003c38:	041b      	lsls	r3, r3, #16
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <ETH_GetIP+0x34>)
 8003c3e:	7a1b      	ldrb	r3, [r3, #8]
 8003c40:	021b      	lsls	r3, r3, #8
 8003c42:	4313      	orrs	r3, r2
 8003c44:	4a05      	ldr	r2, [pc, #20]	; (8003c5c <ETH_GetIP+0x34>)
 8003c46:	7a52      	ldrb	r2, [r2, #9]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	607b      	str	r3, [r7, #4]
	return temp;
 8003c4c:	687b      	ldr	r3, [r7, #4]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	20000070 	.word	0x20000070

08003c60 <ETH_GetNETMASK>:
/* @brief get netmask from sram
 *
 *
 */
uint32_t ETH_GetNETMASK()
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
	uint32_t temp = ip_MAKEU32(myNetInfo.sn[0], myNetInfo.sn[1], myNetInfo.sn[2], myNetInfo.sn[3]);
 8003c66:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <ETH_GetNETMASK+0x34>)
 8003c68:	7a9b      	ldrb	r3, [r3, #10]
 8003c6a:	061a      	lsls	r2, r3, #24
 8003c6c:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <ETH_GetNETMASK+0x34>)
 8003c6e:	7adb      	ldrb	r3, [r3, #11]
 8003c70:	041b      	lsls	r3, r3, #16
 8003c72:	431a      	orrs	r2, r3
 8003c74:	4b07      	ldr	r3, [pc, #28]	; (8003c94 <ETH_GetNETMASK+0x34>)
 8003c76:	7b1b      	ldrb	r3, [r3, #12]
 8003c78:	021b      	lsls	r3, r3, #8
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	4a05      	ldr	r2, [pc, #20]	; (8003c94 <ETH_GetNETMASK+0x34>)
 8003c7e:	7b52      	ldrb	r2, [r2, #13]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	607b      	str	r3, [r7, #4]
	return temp;
 8003c84:	687b      	ldr	r3, [r7, #4]

}
 8003c86:	4618      	mov	r0, r3
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	20000070 	.word	0x20000070

08003c98 <ETH_GetGATEWAY>:
/* @brief get gateway address from sram
 *
 *
 */
uint32_t ETH_GetGATEWAY()
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
	uint32_t temp = ip_MAKEU32(myNetInfo.gw[0], myNetInfo.gw[1], myNetInfo.gw[2], myNetInfo.gw[3]);
 8003c9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <ETH_GetGATEWAY+0x34>)
 8003ca0:	7b9b      	ldrb	r3, [r3, #14]
 8003ca2:	061a      	lsls	r2, r3, #24
 8003ca4:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <ETH_GetGATEWAY+0x34>)
 8003ca6:	7bdb      	ldrb	r3, [r3, #15]
 8003ca8:	041b      	lsls	r3, r3, #16
 8003caa:	431a      	orrs	r2, r3
 8003cac:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <ETH_GetGATEWAY+0x34>)
 8003cae:	7c1b      	ldrb	r3, [r3, #16]
 8003cb0:	021b      	lsls	r3, r3, #8
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	4a05      	ldr	r2, [pc, #20]	; (8003ccc <ETH_GetGATEWAY+0x34>)
 8003cb6:	7c52      	ldrb	r2, [r2, #17]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	607b      	str	r3, [r7, #4]
	return temp;
 8003cbc:	687b      	ldr	r3, [r7, #4]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	370c      	adds	r7, #12
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	20000070 	.word	0x20000070

08003cd0 <W5500_Select>:




void W5500_Select(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cda:	4802      	ldr	r0, [pc, #8]	; (8003ce4 <W5500_Select+0x14>)
 8003cdc:	f002 fb0c 	bl	80062f8 <HAL_GPIO_WritePin>
}
 8003ce0:	bf00      	nop
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40020000 	.word	0x40020000

08003ce8 <W5500_Unselect>:

void W5500_Unselect(void)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8003cec:	2201      	movs	r2, #1
 8003cee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cf2:	4802      	ldr	r0, [pc, #8]	; (8003cfc <W5500_Unselect+0x14>)
 8003cf4:	f002 fb00 	bl	80062f8 <HAL_GPIO_WritePin>
}
 8003cf8:	bf00      	nop
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40020000 	.word	0x40020000

08003d00 <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Receive(&hspi3, buff, len, HAL_MAX_DELAY);
 8003d0c:	887a      	ldrh	r2, [r7, #2]
 8003d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	4803      	ldr	r0, [pc, #12]	; (8003d24 <W5500_ReadBuff+0x24>)
 8003d16:	f003 fa6a 	bl	80071ee <HAL_SPI_Receive>
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	20002cb0 	.word	0x20002cb0

08003d28 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	807b      	strh	r3, [r7, #2]
    HAL_SPI_Transmit(&hspi3, buff, len, HAL_MAX_DELAY);
 8003d34:	887a      	ldrh	r2, [r7, #2]
 8003d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	4803      	ldr	r0, [pc, #12]	; (8003d4c <W5500_WriteBuff+0x24>)
 8003d3e:	f003 f91a 	bl	8006f76 <HAL_SPI_Transmit>
}
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20002cb0 	.word	0x20002cb0

08003d50 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 8003d56:	1dfb      	adds	r3, r7, #7
 8003d58:	2101      	movs	r1, #1
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff ffd0 	bl	8003d00 <W5500_ReadBuff>
    return byte;
 8003d60:	79fb      	ldrb	r3, [r7, #7]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	4603      	mov	r3, r0
 8003d72:	71fb      	strb	r3, [r7, #7]
    W5500_WriteBuff(&byte, sizeof(byte));
 8003d74:	1dfb      	adds	r3, r7, #7
 8003d76:	2101      	movs	r1, #1
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff ffd5 	bl	8003d28 <W5500_WriteBuff>
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <ETH_SendSetting>:
/* @brief send setting of ethernet
 *
 *
 */
void ETH_SendSetting()
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	af00      	add	r7, sp, #0
	SendCommunication_u32(cmd_ip_get_myip, ETH_GetIP());
 8003d8a:	f7ff ff4d 	bl	8003c28 <ETH_GetIP>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	4619      	mov	r1, r3
 8003d92:	201d      	movs	r0, #29
 8003d94:	f7fe f81a 	bl	8001dcc <SendCommunication_u32>
	SendCommunication_u32(cmd_ip_get_mymask, ETH_GetNETMASK());
 8003d98:	f7ff ff62 	bl	8003c60 <ETH_GetNETMASK>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	4619      	mov	r1, r3
 8003da0:	201e      	movs	r0, #30
 8003da2:	f7fe f813 	bl	8001dcc <SendCommunication_u32>
	SendCommunication_u32(cmd_ip_get_mygatew, ETH_GetGATEWAY());
 8003da6:	f7ff ff77 	bl	8003c98 <ETH_GetGATEWAY>
 8003daa:	4603      	mov	r3, r0
 8003dac:	4619      	mov	r1, r3
 8003dae:	201f      	movs	r0, #31
 8003db0:	f7fe f80c 	bl	8001dcc <SendCommunication_u32>
}
 8003db4:	bf00      	nop
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <ETH_load_ip>:




void ETH_load_ip()
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
	uint32_t x;

		x = MainParams.sramOffset_IP_ADDRESS;
 8003dbe:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <ETH_load_ip+0x98>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	607b      	str	r3, [r7, #4]
		myNetInfo.ip[0] = ip_GET8(x,0);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	0e1b      	lsrs	r3, r3, #24
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	4b22      	ldr	r3, [pc, #136]	; (8003e54 <ETH_load_ip+0x9c>)
 8003dcc:	719a      	strb	r2, [r3, #6]
		myNetInfo.ip[1] = ip_GET8(x,1);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	0c1b      	lsrs	r3, r3, #16
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	4b1f      	ldr	r3, [pc, #124]	; (8003e54 <ETH_load_ip+0x9c>)
 8003dd6:	71da      	strb	r2, [r3, #7]
		myNetInfo.ip[2] = ip_GET8(x,2);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	0a1b      	lsrs	r3, r3, #8
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <ETH_load_ip+0x9c>)
 8003de0:	721a      	strb	r2, [r3, #8]
		myNetInfo.ip[3] = ip_GET8(x,3);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	4b1b      	ldr	r3, [pc, #108]	; (8003e54 <ETH_load_ip+0x9c>)
 8003de8:	725a      	strb	r2, [r3, #9]

		x = MainParams.sramOffset_NETMASK_ADDRESS;
 8003dea:	4b19      	ldr	r3, [pc, #100]	; (8003e50 <ETH_load_ip+0x98>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	607b      	str	r3, [r7, #4]
		myNetInfo.sn[0] = ip_GET8(x,0);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	0e1b      	lsrs	r3, r3, #24
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	4b17      	ldr	r3, [pc, #92]	; (8003e54 <ETH_load_ip+0x9c>)
 8003df8:	729a      	strb	r2, [r3, #10]
		myNetInfo.sn[1] = ip_GET8(x,1);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	0c1b      	lsrs	r3, r3, #16
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	4b14      	ldr	r3, [pc, #80]	; (8003e54 <ETH_load_ip+0x9c>)
 8003e02:	72da      	strb	r2, [r3, #11]
		myNetInfo.sn[2] = ip_GET8(x,2);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	0a1b      	lsrs	r3, r3, #8
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <ETH_load_ip+0x9c>)
 8003e0c:	731a      	strb	r2, [r3, #12]
		myNetInfo.sn[3] = ip_GET8(x,3);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	4b10      	ldr	r3, [pc, #64]	; (8003e54 <ETH_load_ip+0x9c>)
 8003e14:	735a      	strb	r2, [r3, #13]

		x = MainParams.sramOffset_GATEWAY_ADDRESS;
 8003e16:	4b0e      	ldr	r3, [pc, #56]	; (8003e50 <ETH_load_ip+0x98>)
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	607b      	str	r3, [r7, #4]
		myNetInfo.gw[0] = ip_GET8(x,0);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	0e1b      	lsrs	r3, r3, #24
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <ETH_load_ip+0x9c>)
 8003e24:	739a      	strb	r2, [r3, #14]
		myNetInfo.gw[1] = ip_GET8(x,1);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	0c1b      	lsrs	r3, r3, #16
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	4b09      	ldr	r3, [pc, #36]	; (8003e54 <ETH_load_ip+0x9c>)
 8003e2e:	73da      	strb	r2, [r3, #15]
		myNetInfo.gw[2] = ip_GET8(x,2);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	0a1b      	lsrs	r3, r3, #8
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <ETH_load_ip+0x9c>)
 8003e38:	741a      	strb	r2, [r3, #16]
		myNetInfo.gw[3] = ip_GET8(x,3);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <ETH_load_ip+0x9c>)
 8003e40:	745a      	strb	r2, [r3, #17]

}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	20001a68 	.word	0x20001a68
 8003e54:	20000070 	.word	0x20000070

08003e58 <ETH_udp_Init>:
/* @brief UDP communication init
 *
 *
 */
void ETH_udp_Init()
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
	//---------udp_connect(udp_pcb, IP46_ADDR_ANY(), UDP_PORT);
	//udp_connect(udp_pcb, &endpoint_ip, UDP_PORT);

	//---------udp_recv(udp_pcb, UDP_Receiver_handler, NULL);

    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8003e5e:	4915      	ldr	r1, [pc, #84]	; (8003eb4 <ETH_udp_Init+0x5c>)
 8003e60:	4815      	ldr	r0, [pc, #84]	; (8003eb8 <ETH_udp_Init+0x60>)
 8003e62:	f005 fbdb 	bl	800961c <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8003e66:	4915      	ldr	r1, [pc, #84]	; (8003ebc <ETH_udp_Init+0x64>)
 8003e68:	4815      	ldr	r0, [pc, #84]	; (8003ec0 <ETH_udp_Init+0x68>)
 8003e6a:	f005 fbfd 	bl	8009668 <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8003e6e:	4915      	ldr	r1, [pc, #84]	; (8003ec4 <ETH_udp_Init+0x6c>)
 8003e70:	4815      	ldr	r0, [pc, #84]	; (8003ec8 <ETH_udp_Init+0x70>)
 8003e72:	f005 fc25 	bl	80096c0 <reg_wizchip_spiburst_cbfunc>

    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 8003e76:	4a15      	ldr	r2, [pc, #84]	; (8003ecc <ETH_udp_Init+0x74>)
 8003e78:	1d3b      	adds	r3, r7, #4
 8003e7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e7e:	e883 0003 	stmia.w	r3, {r0, r1}
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 8003e82:	1d3a      	adds	r2, r7, #4
 8003e84:	1d3b      	adds	r3, r7, #4
 8003e86:	4611      	mov	r1, r2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f005 fc91 	bl	80097b0 <wizchip_init>


    ETH_load_ip();
 8003e8e:	f7ff ff93 	bl	8003db8 <ETH_load_ip>

    wizchip_setnetinfo(&myNetInfo);
 8003e92:	480f      	ldr	r0, [pc, #60]	; (8003ed0 <ETH_udp_Init+0x78>)
 8003e94:	f005 fd18 	bl	80098c8 <wizchip_setnetinfo>

    int udp_socket = socket(UDP_SOCKET, Sn_MR_UDP, UDP_PORT, SF_IO_NONBLOCK);
 8003e98:	2301      	movs	r3, #1
 8003e9a:	f241 328d 	movw	r2, #5005	; 0x138d
 8003e9e:	2102      	movs	r1, #2
 8003ea0:	2003      	movs	r0, #3
 8003ea2:	f004 feaf 	bl	8008c04 <socket>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	60fb      	str	r3, [r7, #12]

    if(udp_socket != UDP_SOCKET)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b03      	cmp	r3, #3
    {
    	//error
    	return;
    }

}
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	08003ce9 	.word	0x08003ce9
 8003eb8:	08003cd1 	.word	0x08003cd1
 8003ebc:	08003d6b 	.word	0x08003d6b
 8003ec0:	08003d51 	.word	0x08003d51
 8003ec4:	08003d29 	.word	0x08003d29
 8003ec8:	08003d01 	.word	0x08003d01
 8003ecc:	0800e0e4 	.word	0x0800e0e4
 8003ed0:	20000070 	.word	0x20000070

08003ed4 <ETH_udp_StoreEndpoint>:
/* @brief store UDP endpoint
 *
 *
 */
void ETH_udp_StoreEndpoint()
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
	//---------endpoint_ip = last_message_ip;
	//---------udp_connect(udp_pcb, &endpoint_ip, UDP_PORT);

		//memcpy(endpoint_ip,last_message_ip,sizeof(last_message_ip));

	endpoint_ip[0] = last_message_ip[0];
 8003ed8:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <ETH_udp_StoreEndpoint+0x30>)
 8003eda:	781a      	ldrb	r2, [r3, #0]
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <ETH_udp_StoreEndpoint+0x34>)
 8003ede:	701a      	strb	r2, [r3, #0]
	endpoint_ip[1] = last_message_ip[1];
 8003ee0:	4b08      	ldr	r3, [pc, #32]	; (8003f04 <ETH_udp_StoreEndpoint+0x30>)
 8003ee2:	785a      	ldrb	r2, [r3, #1]
 8003ee4:	4b08      	ldr	r3, [pc, #32]	; (8003f08 <ETH_udp_StoreEndpoint+0x34>)
 8003ee6:	705a      	strb	r2, [r3, #1]
	endpoint_ip[2] = last_message_ip[2];
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <ETH_udp_StoreEndpoint+0x30>)
 8003eea:	789a      	ldrb	r2, [r3, #2]
 8003eec:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <ETH_udp_StoreEndpoint+0x34>)
 8003eee:	709a      	strb	r2, [r3, #2]
	endpoint_ip[3] = last_message_ip[3];
 8003ef0:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <ETH_udp_StoreEndpoint+0x30>)
 8003ef2:	78da      	ldrb	r2, [r3, #3]
 8003ef4:	4b04      	ldr	r3, [pc, #16]	; (8003f08 <ETH_udp_StoreEndpoint+0x34>)
 8003ef6:	70da      	strb	r2, [r3, #3]

}
 8003ef8:	bf00      	nop
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	20001b40 	.word	0x20001b40
 8003f08:	20001b44 	.word	0x20001b44

08003f0c <ETH_udp_Transmit>:
 * @param *pData -> pointer on data to send
 * @param Size -> Size od data
 *
 */
void ETH_udp_Transmit(uint8_t *pData, uint16_t Size)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	807b      	strh	r3, [r7, #2]
	//uint16_t sentsize;

    //while(!(sentsize >= Size))
    //{

    	ret = sendto(UDP_SOCKET, pData, Size, endpoint_ip, UDP_PORT);
 8003f18:	887a      	ldrh	r2, [r7, #2]
 8003f1a:	f241 338d 	movw	r3, #5005	; 0x138d
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <ETH_udp_Transmit+0x28>)
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	2003      	movs	r0, #3
 8003f26:	f004 fff1 	bl	8008f0c <sendto>
 8003f2a:	60f8      	str	r0, [r7, #12]

    	//sentsize += ret; // Don't care SOCKERR_BUSY, because it is zero.
    //}


}
 8003f2c:	bf00      	nop
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20001b44 	.word	0x20001b44

08003f38 <ETH_udp_Receive>:


void ETH_udp_Receive()
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af02      	add	r7, sp, #8
	int32_t  ret;
	uint8_t buf[DATA_BUF_SIZE];
	uint16_t size;
	uint16_t destport;

	size = getSn_RX_RSR(UDP_SOCKET);
 8003f42:	2003      	movs	r0, #3
 8003f44:	f004 fd13 	bl	800896e <getSn_RX_RSR>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003f4e:	f102 020e 	add.w	r2, r2, #14
 8003f52:	8013      	strh	r3, [r2, #0]

    if(size > 0)
 8003f54:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003f58:	f103 030e 	add.w	r3, r3, #14
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d042      	beq.n	8003fe8 <ETH_udp_Receive+0xb0>
    {

    	if(size > DATA_BUF_SIZE) size = DATA_BUF_SIZE;
 8003f62:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003f66:	f103 030e 	add.w	r3, r3, #14
 8003f6a:	881b      	ldrh	r3, [r3, #0]
 8003f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f70:	d906      	bls.n	8003f80 <ETH_udp_Receive+0x48>
 8003f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f76:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003f7a:	f102 020e 	add.w	r2, r2, #14
 8003f7e:	8013      	strh	r3, [r2, #0]

    	ret = recvfrom(UDP_SOCKET, buf, size, last_message_ip, (uint16_t*)&destport);
 8003f80:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003f84:	f103 030e 	add.w	r3, r3, #14
 8003f88:	881a      	ldrh	r2, [r3, #0]
 8003f8a:	f107 0110 	add.w	r1, r7, #16
 8003f8e:	3908      	subs	r1, #8
 8003f90:	f107 0310 	add.w	r3, r7, #16
 8003f94:	3b0a      	subs	r3, #10
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	4b16      	ldr	r3, [pc, #88]	; (8003ff4 <ETH_udp_Receive+0xbc>)
 8003f9a:	2003      	movs	r0, #3
 8003f9c:	f005 f8ec 	bl	8009178 <recvfrom>
 8003fa0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003fa4:	f103 0308 	add.w	r3, r3, #8
 8003fa8:	6018      	str	r0, [r3, #0]


    	if(ret <= 0)
 8003faa:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003fae:	f103 0308 	add.w	r3, r3, #8
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	dd16      	ble.n	8003fe6 <ETH_udp_Receive+0xae>
    	{
    		return;
    	}

    	size = (uint16_t) ret;
 8003fb8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003fbc:	f103 0308 	add.w	r3, r3, #8
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8003fc6:	f102 020e 	add.w	r2, r2, #14
 8003fca:	8013      	strh	r3, [r2, #0]


    	ETH_WriteBuffer(buf, size);
 8003fcc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8003fd0:	f103 030e 	add.w	r3, r3, #14
 8003fd4:	881a      	ldrh	r2, [r3, #0]
 8003fd6:	f107 0310 	add.w	r3, r7, #16
 8003fda:	3b08      	subs	r3, #8
 8003fdc:	4611      	mov	r1, r2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7fe f950 	bl	8002284 <ETH_WriteBuffer>
 8003fe4:	e000      	b.n	8003fe8 <ETH_udp_Receive+0xb0>
    		return;
 8003fe6:	bf00      	nop

    }


}
 8003fe8:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20001b40 	.word	0x20001b40

08003ff8 <Uart_BufferNotEmpty>:
 *
 * @return true -> FIFO is not empty
 * @return false -> FIFO is empty
 */
bool Uart_BufferNotEmpty()
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
	return (uart_bcounter > 0);
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <Uart_BufferNotEmpty+0x1c>)
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	bf14      	ite	ne
 8004004:	2301      	movne	r3, #1
 8004006:	2300      	moveq	r3, #0
 8004008:	b2db      	uxtb	r3, r3
}
 800400a:	4618      	mov	r0, r3
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	20002b4c 	.word	0x20002b4c

08004018 <Uart_WriteBuffer>:

/* @brief function add data byte to FIFO
 *
 */
void Uart_WriteBuffer(uint8_t data)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	71fb      	strb	r3, [r7, #7]
	if(uart_bcounter >= (uart_buffer_size-1)) return;
 8004022:	4b13      	ldr	r3, [pc, #76]	; (8004070 <Uart_WriteBuffer+0x58>)
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	f640 72fe 	movw	r2, #4094	; 0xffe
 800402a:	4293      	cmp	r3, r2
 800402c:	d81a      	bhi.n	8004064 <Uart_WriteBuffer+0x4c>

	uart_buffer[uart_wpointer] = data;
 800402e:	4b11      	ldr	r3, [pc, #68]	; (8004074 <Uart_WriteBuffer+0x5c>)
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	4619      	mov	r1, r3
 8004034:	4a10      	ldr	r2, [pc, #64]	; (8004078 <Uart_WriteBuffer+0x60>)
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	5453      	strb	r3, [r2, r1]
	uart_bcounter++;
 800403a:	4b0d      	ldr	r3, [pc, #52]	; (8004070 <Uart_WriteBuffer+0x58>)
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	3301      	adds	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <Uart_WriteBuffer+0x58>)
 8004044:	801a      	strh	r2, [r3, #0]
	uart_wpointer++;
 8004046:	4b0b      	ldr	r3, [pc, #44]	; (8004074 <Uart_WriteBuffer+0x5c>)
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	3301      	adds	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	4b09      	ldr	r3, [pc, #36]	; (8004074 <Uart_WriteBuffer+0x5c>)
 8004050:	801a      	strh	r2, [r3, #0]
	if(uart_wpointer > uart_buffer_size - 1) uart_wpointer = 0;
 8004052:	4b08      	ldr	r3, [pc, #32]	; (8004074 <Uart_WriteBuffer+0x5c>)
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405a:	d304      	bcc.n	8004066 <Uart_WriteBuffer+0x4e>
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <Uart_WriteBuffer+0x5c>)
 800405e:	2200      	movs	r2, #0
 8004060:	801a      	strh	r2, [r3, #0]
 8004062:	e000      	b.n	8004066 <Uart_WriteBuffer+0x4e>
	if(uart_bcounter >= (uart_buffer_size-1)) return;
 8004064:	bf00      	nop

}
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	20002b4c 	.word	0x20002b4c
 8004074:	20002b48 	.word	0x20002b48
 8004078:	20001b48 	.word	0x20001b48

0800407c <Uart_ReadBuffer>:
/* @brief read data byte from FIFO
 *
 * @return one element uint8_t data 
 */
uint8_t Uart_ReadBuffer()
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
	uint8_t data = uart_buffer[uart_rpointer];
 8004082:	4b10      	ldr	r3, [pc, #64]	; (80040c4 <Uart_ReadBuffer+0x48>)
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	4b0f      	ldr	r3, [pc, #60]	; (80040c8 <Uart_ReadBuffer+0x4c>)
 800408a:	5c9b      	ldrb	r3, [r3, r2]
 800408c:	71fb      	strb	r3, [r7, #7]
	uart_bcounter--;
 800408e:	4b0f      	ldr	r3, [pc, #60]	; (80040cc <Uart_ReadBuffer+0x50>)
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	3b01      	subs	r3, #1
 8004094:	b29a      	uxth	r2, r3
 8004096:	4b0d      	ldr	r3, [pc, #52]	; (80040cc <Uart_ReadBuffer+0x50>)
 8004098:	801a      	strh	r2, [r3, #0]
	uart_rpointer++;
 800409a:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <Uart_ReadBuffer+0x48>)
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	3301      	adds	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	4b08      	ldr	r3, [pc, #32]	; (80040c4 <Uart_ReadBuffer+0x48>)
 80040a4:	801a      	strh	r2, [r3, #0]
	if(uart_rpointer > uart_buffer_size - 1) uart_rpointer = 0;
 80040a6:	4b07      	ldr	r3, [pc, #28]	; (80040c4 <Uart_ReadBuffer+0x48>)
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ae:	d302      	bcc.n	80040b6 <Uart_ReadBuffer+0x3a>
 80040b0:	4b04      	ldr	r3, [pc, #16]	; (80040c4 <Uart_ReadBuffer+0x48>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	801a      	strh	r2, [r3, #0]

	return data;
 80040b6:	79fb      	ldrb	r3, [r7, #7]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	20002b4a 	.word	0x20002b4a
 80040c8:	20001b48 	.word	0x20001b48
 80040cc:	20002b4c 	.word	0x20002b4c

080040d0 <Uart_Send>:
 * @param data -> pointer on data buffer with message
 * @param size -> lenght of data buffer
 *
 */
void Uart_Send(char *data, uint16_t size)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	807b      	strh	r3, [r7, #2]

	HAL_UART_Transmit(&huart2, (uint8_t *)data, size,100);
 80040dc:	887a      	ldrh	r2, [r7, #2]
 80040de:	2364      	movs	r3, #100	; 0x64
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	4803      	ldr	r0, [pc, #12]	; (80040f0 <Uart_Send+0x20>)
 80040e4:	f003 ff29 	bl	8007f3a <HAL_UART_Transmit>
}
 80040e8:	bf00      	nop
 80040ea:	3708      	adds	r7, #8
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20002dac 	.word	0x20002dac

080040f4 <ledsUpadateLEDState>:

#include "stm_leds.h"


void ledsUpadateLEDState(LED_struct * actual_led, uint32_t sysTime)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]

	switch (actual_led->mode)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	7a5b      	ldrb	r3, [r3, #9]
 8004102:	2b06      	cmp	r3, #6
 8004104:	f200 8103 	bhi.w	800430e <ledsUpadateLEDState+0x21a>
 8004108:	a201      	add	r2, pc, #4	; (adr r2, 8004110 <ledsUpadateLEDState+0x1c>)
 800410a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410e:	bf00      	nop
 8004110:	0800412d 	.word	0x0800412d
 8004114:	08004153 	.word	0x08004153
 8004118:	08004179 	.word	0x08004179
 800411c:	080041b3 	.word	0x080041b3
 8004120:	080041df 	.word	0x080041df
 8004124:	0800420d 	.word	0x0800420d
 8004128:	0800428d 	.word	0x0800428d
	{

		case LEDS_OFF:
			if(actual_led->polarity)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	7a1b      	ldrb	r3, [r3, #8]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d006      	beq.n	8004142 <ledsUpadateLEDState+0x4e>
			{
				*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3318      	adds	r3, #24
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6852      	ldr	r2, [r2, #4]
 800413e:	601a      	str	r2, [r3, #0]
			}
			else
			{
				*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
			}
			break;
 8004140:	e0ee      	b.n	8004320 <ledsUpadateLEDState+0x22c>
				*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3318      	adds	r3, #24
 800414c:	0412      	lsls	r2, r2, #16
 800414e:	601a      	str	r2, [r3, #0]
			break;
 8004150:	e0e6      	b.n	8004320 <ledsUpadateLEDState+0x22c>

		case LEDS_ON:
			if(actual_led->polarity)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	7a1b      	ldrb	r3, [r3, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d007      	beq.n	800416a <ledsUpadateLEDState+0x76>
			{
				*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3318      	adds	r3, #24
 8004164:	0412      	lsls	r2, r2, #16
 8004166:	601a      	str	r2, [r3, #0]
			}
			else
			{
				*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
			}
			break;
 8004168:	e0da      	b.n	8004320 <ledsUpadateLEDState+0x22c>
				*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3318      	adds	r3, #24
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6852      	ldr	r2, [r2, #4]
 8004174:	601a      	str	r2, [r3, #0]
			break;
 8004176:	e0d3      	b.n	8004320 <ledsUpadateLEDState+0x22c>

		case LEDS_DELAYED_OFF:
			if(actual_led->polarity)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	7a1b      	ldrb	r3, [r3, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <ledsUpadateLEDState+0x9c>
			{
				*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3318      	adds	r3, #24
 800418a:	0412      	lsls	r2, r2, #16
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	e005      	b.n	800419c <ledsUpadateLEDState+0xa8>
			}
			else
			{
				*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3318      	adds	r3, #24
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6852      	ldr	r2, [r2, #4]
 800419a:	601a      	str	r2, [r3, #0]
			}

			if((sysTime - actual_led->led_time) > DELAYED_OFF_DELAY)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b14      	cmp	r3, #20
 80041a6:	f240 80b4 	bls.w	8004312 <ledsUpadateLEDState+0x21e>
			{
				actual_led->mode = LEDS_OFF;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	725a      	strb	r2, [r3, #9]
			}
			break;
 80041b0:	e0af      	b.n	8004312 <ledsUpadateLEDState+0x21e>

		case LEDS_FAST_FLASH:
			if((sysTime - actual_led->led_time) > FAST_FLASH_DELAY)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b64      	cmp	r3, #100	; 0x64
 80041bc:	f240 80ab 	bls.w	8004316 <ledsUpadateLEDState+0x222>
			{
				*(actual_led->port_address+5) ^= actual_led->channel_mask; // GPIOx_ODR
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3314      	adds	r3, #20
 80041c6:	6819      	ldr	r1, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3314      	adds	r3, #20
 80041d2:	404a      	eors	r2, r1
 80041d4:	601a      	str	r2, [r3, #0]
				actual_led->led_time = sysTime;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	60da      	str	r2, [r3, #12]
			}
			break;
 80041dc:	e09b      	b.n	8004316 <ledsUpadateLEDState+0x222>

		case LEDS_SLOW_FLASH:
			if((sysTime - actual_led->led_time) > SLOW_FLASH_DELAY)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80041ea:	f240 8096 	bls.w	800431a <ledsUpadateLEDState+0x226>
			{
				*(actual_led->port_address+5) ^= actual_led->channel_mask; // GPIOx_ODR
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	3314      	adds	r3, #20
 80041f4:	6819      	ldr	r1, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	3314      	adds	r3, #20
 8004200:	404a      	eors	r2, r1
 8004202:	601a      	str	r2, [r3, #0]
				actual_led->led_time = sysTime;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	60da      	str	r2, [r3, #12]
			}
			break;
 800420a:	e086      	b.n	800431a <ledsUpadateLEDState+0x226>

		case LEDS_FAST_BLINK:
			if((sysTime - actual_led->led_time) > BLINK_DELAY)//timer
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b64      	cmp	r3, #100	; 0x64
 8004216:	d939      	bls.n	800428c <ledsUpadateLEDState+0x198>
			{
				actual_led->led_time = sysTime;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	60da      	str	r2, [r3, #12]


				if(actual_led-> blink_state > FAST_BLINK_RATIO) actual_led-> blink_state = 0;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	7c1b      	ldrb	r3, [r3, #16]
 8004222:	2b05      	cmp	r3, #5
 8004224:	d903      	bls.n	800422e <ledsUpadateLEDState+0x13a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	741a      	strb	r2, [r3, #16]
 800422c:	e005      	b.n	800423a <ledsUpadateLEDState+0x146>
				else actual_led-> blink_state++;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	7c1b      	ldrb	r3, [r3, #16]
 8004232:	3301      	adds	r3, #1
 8004234:	b2da      	uxtb	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	741a      	strb	r2, [r3, #16]

				if((actual_led-> blink_state == 0)) //led on
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	7c1b      	ldrb	r3, [r3, #16]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d112      	bne.n	8004268 <ledsUpadateLEDState+0x174>
				{

					if(actual_led->polarity)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	7a1b      	ldrb	r3, [r3, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d007      	beq.n	800425a <ledsUpadateLEDState+0x166>
					{
						*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3318      	adds	r3, #24
 8004254:	0412      	lsls	r2, r2, #16
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	e018      	b.n	800428c <ledsUpadateLEDState+0x198>
					}
					else
					{
						*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3318      	adds	r3, #24
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	6852      	ldr	r2, [r2, #4]
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	e011      	b.n	800428c <ledsUpadateLEDState+0x198>
					}
				}
				else //led off
				{

					if(actual_led->polarity)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	7a1b      	ldrb	r3, [r3, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d006      	beq.n	800427e <ledsUpadateLEDState+0x18a>
					{
						*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	3318      	adds	r3, #24
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6852      	ldr	r2, [r2, #4]
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	e006      	b.n	800428c <ledsUpadateLEDState+0x198>
					}
					else
					{
						*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3318      	adds	r3, #24
 8004288:	0412      	lsls	r2, r2, #16
 800428a:	601a      	str	r2, [r3, #0]
					}
				}
			}

		case LEDS_SLOW_BLINK:
					if((sysTime - actual_led->led_time) > BLINK_DELAY)//timer
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b64      	cmp	r3, #100	; 0x64
 8004296:	d942      	bls.n	800431e <ledsUpadateLEDState+0x22a>
					{
						actual_led->led_time = sysTime;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	60da      	str	r2, [r3, #12]


						if(actual_led-> blink_state > SLOW_BLINK_RATIO) actual_led-> blink_state = 0;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	7c1b      	ldrb	r3, [r3, #16]
 80042a2:	2b19      	cmp	r3, #25
 80042a4:	d903      	bls.n	80042ae <ledsUpadateLEDState+0x1ba>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	741a      	strb	r2, [r3, #16]
 80042ac:	e005      	b.n	80042ba <ledsUpadateLEDState+0x1c6>
						else actual_led-> blink_state++;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	7c1b      	ldrb	r3, [r3, #16]
 80042b2:	3301      	adds	r3, #1
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	741a      	strb	r2, [r3, #16]

						if((actual_led-> blink_state == 0)) //led on
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	7c1b      	ldrb	r3, [r3, #16]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d112      	bne.n	80042e8 <ledsUpadateLEDState+0x1f4>
						{

							if(actual_led->polarity)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	7a1b      	ldrb	r3, [r3, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d007      	beq.n	80042da <ledsUpadateLEDState+0x1e6>
							{
								*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3318      	adds	r3, #24
 80042d4:	0412      	lsls	r2, r2, #16
 80042d6:	601a      	str	r2, [r3, #0]
							}
						}

					}

			break;
 80042d8:	e021      	b.n	800431e <ledsUpadateLEDState+0x22a>
								*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3318      	adds	r3, #24
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6852      	ldr	r2, [r2, #4]
 80042e4:	601a      	str	r2, [r3, #0]
			break;
 80042e6:	e01a      	b.n	800431e <ledsUpadateLEDState+0x22a>
							if(actual_led->polarity)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	7a1b      	ldrb	r3, [r3, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d006      	beq.n	80042fe <ledsUpadateLEDState+0x20a>
								*(actual_led->port_address+6) = actual_led->channel_mask; // GPIOx_BSRR
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3318      	adds	r3, #24
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6852      	ldr	r2, [r2, #4]
 80042fa:	601a      	str	r2, [r3, #0]
			break;
 80042fc:	e00f      	b.n	800431e <ledsUpadateLEDState+0x22a>
								*(actual_led->port_address+6) = (actual_led->channel_mask<<16); // GPIOx_BSRR
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3318      	adds	r3, #24
 8004308:	0412      	lsls	r2, r2, #16
 800430a:	601a      	str	r2, [r3, #0]
			break;
 800430c:	e007      	b.n	800431e <ledsUpadateLEDState+0x22a>

		default:
			break;
 800430e:	bf00      	nop
 8004310:	e006      	b.n	8004320 <ledsUpadateLEDState+0x22c>
			break;
 8004312:	bf00      	nop
 8004314:	e004      	b.n	8004320 <ledsUpadateLEDState+0x22c>
			break;
 8004316:	bf00      	nop
 8004318:	e002      	b.n	8004320 <ledsUpadateLEDState+0x22c>
			break;
 800431a:	bf00      	nop
 800431c:	e000      	b.n	8004320 <ledsUpadateLEDState+0x22c>
			break;
 800431e:	bf00      	nop
	}

	return;
 8004320:	bf00      	nop

}
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004332:	463b      	mov	r3, r7
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	609a      	str	r2, [r3, #8]
 800433c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800433e:	4b21      	ldr	r3, [pc, #132]	; (80043c4 <MX_ADC1_Init+0x98>)
 8004340:	4a21      	ldr	r2, [pc, #132]	; (80043c8 <MX_ADC1_Init+0x9c>)
 8004342:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004344:	4b1f      	ldr	r3, [pc, #124]	; (80043c4 <MX_ADC1_Init+0x98>)
 8004346:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800434a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800434c:	4b1d      	ldr	r3, [pc, #116]	; (80043c4 <MX_ADC1_Init+0x98>)
 800434e:	2200      	movs	r2, #0
 8004350:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004352:	4b1c      	ldr	r3, [pc, #112]	; (80043c4 <MX_ADC1_Init+0x98>)
 8004354:	2200      	movs	r2, #0
 8004356:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004358:	4b1a      	ldr	r3, [pc, #104]	; (80043c4 <MX_ADC1_Init+0x98>)
 800435a:	2200      	movs	r2, #0
 800435c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800435e:	4b19      	ldr	r3, [pc, #100]	; (80043c4 <MX_ADC1_Init+0x98>)
 8004360:	2200      	movs	r2, #0
 8004362:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004366:	4b17      	ldr	r3, [pc, #92]	; (80043c4 <MX_ADC1_Init+0x98>)
 8004368:	2200      	movs	r2, #0
 800436a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800436c:	4b15      	ldr	r3, [pc, #84]	; (80043c4 <MX_ADC1_Init+0x98>)
 800436e:	4a17      	ldr	r2, [pc, #92]	; (80043cc <MX_ADC1_Init+0xa0>)
 8004370:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004372:	4b14      	ldr	r3, [pc, #80]	; (80043c4 <MX_ADC1_Init+0x98>)
 8004374:	2200      	movs	r2, #0
 8004376:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004378:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <MX_ADC1_Init+0x98>)
 800437a:	2201      	movs	r2, #1
 800437c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800437e:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <MX_ADC1_Init+0x98>)
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004386:	4b0f      	ldr	r3, [pc, #60]	; (80043c4 <MX_ADC1_Init+0x98>)
 8004388:	2201      	movs	r2, #1
 800438a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800438c:	480d      	ldr	r0, [pc, #52]	; (80043c4 <MX_ADC1_Init+0x98>)
 800438e:	f000 ff9f 	bl	80052d0 <HAL_ADC_Init>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004398:	f000 fb08 	bl	80049ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800439c:	2300      	movs	r3, #0
 800439e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80043a0:	2301      	movs	r3, #1
 80043a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80043a4:	2300      	movs	r3, #0
 80043a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80043a8:	463b      	mov	r3, r7
 80043aa:	4619      	mov	r1, r3
 80043ac:	4805      	ldr	r0, [pc, #20]	; (80043c4 <MX_ADC1_Init+0x98>)
 80043ae:	f000 ffd3 	bl	8005358 <HAL_ADC_ConfigChannel>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80043b8:	f000 faf8 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80043bc:	bf00      	nop
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	20002b50 	.word	0x20002b50
 80043c8:	40012000 	.word	0x40012000
 80043cc:	0f000001 	.word	0x0f000001

080043d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08a      	sub	sp, #40	; 0x28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d8:	f107 0314 	add.w	r3, r7, #20
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	605a      	str	r2, [r3, #4]
 80043e2:	609a      	str	r2, [r3, #8]
 80043e4:	60da      	str	r2, [r3, #12]
 80043e6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a17      	ldr	r2, [pc, #92]	; (800444c <HAL_ADC_MspInit+0x7c>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d127      	bne.n	8004442 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80043f2:	2300      	movs	r3, #0
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	4b16      	ldr	r3, [pc, #88]	; (8004450 <HAL_ADC_MspInit+0x80>)
 80043f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fa:	4a15      	ldr	r2, [pc, #84]	; (8004450 <HAL_ADC_MspInit+0x80>)
 80043fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004400:	6453      	str	r3, [r2, #68]	; 0x44
 8004402:	4b13      	ldr	r3, [pc, #76]	; (8004450 <HAL_ADC_MspInit+0x80>)
 8004404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440a:	613b      	str	r3, [r7, #16]
 800440c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800440e:	2300      	movs	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <HAL_ADC_MspInit+0x80>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	4a0e      	ldr	r2, [pc, #56]	; (8004450 <HAL_ADC_MspInit+0x80>)
 8004418:	f043 0301 	orr.w	r3, r3, #1
 800441c:	6313      	str	r3, [r2, #48]	; 0x30
 800441e:	4b0c      	ldr	r3, [pc, #48]	; (8004450 <HAL_ADC_MspInit+0x80>)
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800442a:	2303      	movs	r3, #3
 800442c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800442e:	2303      	movs	r3, #3
 8004430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004432:	2300      	movs	r3, #0
 8004434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004436:	f107 0314 	add.w	r3, r7, #20
 800443a:	4619      	mov	r1, r3
 800443c:	4805      	ldr	r0, [pc, #20]	; (8004454 <HAL_ADC_MspInit+0x84>)
 800443e:	f001 fdbf 	bl	8005fc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004442:	bf00      	nop
 8004444:	3728      	adds	r7, #40	; 0x28
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40012000 	.word	0x40012000
 8004450:	40023800 	.word	0x40023800
 8004454:	40020000 	.word	0x40020000

08004458 <Flash_GetSector>:

/*
 * Function returns Flash Sector by given address
 */
uint32_t Flash_GetSector(uint32_t StartSectorAddress)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]

  uint32_t sector = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]

  if((StartSectorAddress < 0x08003FFF) && (StartSectorAddress >= 0x08000000))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a2e      	ldr	r2, [pc, #184]	; (8004520 <Flash_GetSector+0xc8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d806      	bhi.n	800447a <Flash_GetSector+0x22>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004472:	d302      	bcc.n	800447a <Flash_GetSector+0x22>
	{
	  sector = FLASH_SECTOR_0;
 8004474:	2300      	movs	r3, #0
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	e04b      	b.n	8004512 <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x08007FFF) && (StartSectorAddress >= 0x08004000))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a29      	ldr	r2, [pc, #164]	; (8004524 <Flash_GetSector+0xcc>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d806      	bhi.n	8004490 <Flash_GetSector+0x38>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a28      	ldr	r2, [pc, #160]	; (8004528 <Flash_GetSector+0xd0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d302      	bcc.n	8004490 <Flash_GetSector+0x38>
	{
	  sector = FLASH_SECTOR_1;
 800448a:	2301      	movs	r3, #1
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	e040      	b.n	8004512 <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0800BFFF) && (StartSectorAddress >= 0x08008000))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a26      	ldr	r2, [pc, #152]	; (800452c <Flash_GetSector+0xd4>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d806      	bhi.n	80044a6 <Flash_GetSector+0x4e>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a25      	ldr	r2, [pc, #148]	; (8004530 <Flash_GetSector+0xd8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d302      	bcc.n	80044a6 <Flash_GetSector+0x4e>
	{
	  sector = FLASH_SECTOR_2;
 80044a0:	2302      	movs	r3, #2
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	e035      	b.n	8004512 <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0800FFFF) && (StartSectorAddress >= 0x0800C000))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a22      	ldr	r2, [pc, #136]	; (8004534 <Flash_GetSector+0xdc>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d206      	bcs.n	80044bc <Flash_GetSector+0x64>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a21      	ldr	r2, [pc, #132]	; (8004538 <Flash_GetSector+0xe0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d302      	bcc.n	80044bc <Flash_GetSector+0x64>
	{
	  sector = FLASH_SECTOR_3;
 80044b6:	2303      	movs	r3, #3
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	e02a      	b.n	8004512 <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0801FFFF) && (StartSectorAddress >= 0x08010000))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a1f      	ldr	r2, [pc, #124]	; (800453c <Flash_GetSector+0xe4>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d206      	bcs.n	80044d2 <Flash_GetSector+0x7a>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a1b      	ldr	r2, [pc, #108]	; (8004534 <Flash_GetSector+0xdc>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d902      	bls.n	80044d2 <Flash_GetSector+0x7a>
	{
	  sector = FLASH_SECTOR_4;
 80044cc:	2304      	movs	r3, #4
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	e01f      	b.n	8004512 <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0803FFFF) && (StartSectorAddress >= 0x08020000))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a1a      	ldr	r2, [pc, #104]	; (8004540 <Flash_GetSector+0xe8>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d206      	bcs.n	80044e8 <Flash_GetSector+0x90>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a17      	ldr	r2, [pc, #92]	; (800453c <Flash_GetSector+0xe4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d902      	bls.n	80044e8 <Flash_GetSector+0x90>
	{
	  sector = FLASH_SECTOR_5;
 80044e2:	2305      	movs	r3, #5
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	e014      	b.n	8004512 <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0805FFFF) && (StartSectorAddress >= 0x08040000))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a16      	ldr	r2, [pc, #88]	; (8004544 <Flash_GetSector+0xec>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d206      	bcs.n	80044fe <Flash_GetSector+0xa6>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a13      	ldr	r2, [pc, #76]	; (8004540 <Flash_GetSector+0xe8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d902      	bls.n	80044fe <Flash_GetSector+0xa6>
	{
	  sector = FLASH_SECTOR_6;
 80044f8:	2306      	movs	r3, #6
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	e009      	b.n	8004512 <Flash_GetSector+0xba>
	}
  else if((StartSectorAddress < 0x0807FFFF) && (StartSectorAddress >= 0x08060000))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a11      	ldr	r2, [pc, #68]	; (8004548 <Flash_GetSector+0xf0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d205      	bcs.n	8004512 <Flash_GetSector+0xba>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a0e      	ldr	r2, [pc, #56]	; (8004544 <Flash_GetSector+0xec>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d901      	bls.n	8004512 <Flash_GetSector+0xba>
	{
	  sector = FLASH_SECTOR_7;
 800450e:	2307      	movs	r3, #7
 8004510:	60fb      	str	r3, [r7, #12]
	}

  return sector;
 8004512:	68fb      	ldr	r3, [r7, #12]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	08003ffe 	.word	0x08003ffe
 8004524:	08007ffe 	.word	0x08007ffe
 8004528:	08004000 	.word	0x08004000
 800452c:	0800bffe 	.word	0x0800bffe
 8004530:	08008000 	.word	0x08008000
 8004534:	0800ffff 	.word	0x0800ffff
 8004538:	0800c000 	.word	0x0800c000
 800453c:	0801ffff 	.word	0x0801ffff
 8004540:	0803ffff 	.word	0x0803ffff
 8004544:	0805ffff 	.word	0x0805ffff
 8004548:	0807ffff 	.word	0x0807ffff

0800454c <Flash_WriteData>:
 * Function writes given number of uint32_t words to given flash address
 * Function unlocks flash, erases needed sector(s), flash given memmory and locks Flash
 * Function returns 0 if there was no error
 */
uint32_t Flash_WriteData (uint32_t StartSectorAddress, uint32_t *Data, uint16_t NumOfWords)
{
 800454c:	b5b0      	push	{r4, r5, r7, lr}
 800454e:	b08a      	sub	sp, #40	; 0x28
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	4613      	mov	r3, r2
 8004558:	80fb      	strh	r3, [r7, #6]
  static FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t loc_Error;

  /* Unlock the Flash to enable the flash control register access */
  HAL_FLASH_Unlock();
 800455a:	f001 fa91 	bl	8005a80 <HAL_FLASH_Unlock>


  /* Get the number of sector to erase from 1st sector */

  uint32_t StartSector = Flash_GetSector(StartSectorAddress);
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f7ff ff7a 	bl	8004458 <Flash_GetSector>
 8004564:	6238      	str	r0, [r7, #32]
  uint32_t EndSectorAddress = StartSectorAddress + NumOfWords*4;
 8004566:	88fb      	ldrh	r3, [r7, #6]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	461a      	mov	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	61fb      	str	r3, [r7, #28]
  uint32_t EndSector = Flash_GetSector(EndSectorAddress);
 8004572:	69f8      	ldr	r0, [r7, #28]
 8004574:	f7ff ff70 	bl	8004458 <Flash_GetSector>
 8004578:	61b8      	str	r0, [r7, #24]

  /* Fill EraseInit structure*/
  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800457a:	4b23      	ldr	r3, [pc, #140]	; (8004608 <Flash_WriteData+0xbc>)
 800457c:	2200      	movs	r2, #0
 800457e:	601a      	str	r2, [r3, #0]
  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8004580:	4b21      	ldr	r3, [pc, #132]	; (8004608 <Flash_WriteData+0xbc>)
 8004582:	2202      	movs	r2, #2
 8004584:	611a      	str	r2, [r3, #16]
  EraseInitStruct.Sector        = StartSector;
 8004586:	4a20      	ldr	r2, [pc, #128]	; (8004608 <Flash_WriteData+0xbc>)
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	6093      	str	r3, [r2, #8]
  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	3301      	adds	r3, #1
 8004594:	4a1c      	ldr	r2, [pc, #112]	; (8004608 <Flash_WriteData+0xbc>)
 8004596:	60d3      	str	r3, [r2, #12]

  /* Erase the user Flash area with given setting */
  /* Note!: Erase is done on whole sector/page */
  if (HAL_FLASHEx_Erase(&EraseInitStruct, &loc_Error) != HAL_OK)
 8004598:	f107 0314 	add.w	r3, r7, #20
 800459c:	4619      	mov	r1, r3
 800459e:	481a      	ldr	r0, [pc, #104]	; (8004608 <Flash_WriteData+0xbc>)
 80045a0:	f001 fbec 	bl	8005d7c <HAL_FLASHEx_Erase>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <Flash_WriteData+0x66>
  {
	  return HAL_FLASH_GetError ();
 80045aa:	f001 fa9b 	bl	8005ae4 <HAL_FLASH_GetError>
 80045ae:	4603      	mov	r3, r0
 80045b0:	e025      	b.n	80045fe <Flash_WriteData+0xb2>
  }

  /* Program the user Flash area word by word*/

  for (uint16_t i = 0;  i < NumOfWords; i++) 
 80045b2:	2300      	movs	r3, #0
 80045b4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80045b6:	e01b      	b.n	80045f0 <Flash_WriteData+0xa4>
  {


	if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[i]) == HAL_OK)
 80045b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	4413      	add	r3, r2
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2200      	movs	r2, #0
 80045c4:	461c      	mov	r4, r3
 80045c6:	4615      	mov	r5, r2
 80045c8:	4622      	mov	r2, r4
 80045ca:	462b      	mov	r3, r5
 80045cc:	68f9      	ldr	r1, [r7, #12]
 80045ce:	2002      	movs	r0, #2
 80045d0:	f001 fa02 	bl	80059d8 <HAL_FLASH_Program>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d103      	bne.n	80045e2 <Flash_WriteData+0x96>
    {
        //Shift address by 4 (Word Size)
    	StartSectorAddress += 4;  // StartPageAddress += 2 for half word and 8 for double word
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3304      	adds	r3, #4
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	e003      	b.n	80045ea <Flash_WriteData+0x9e>
    	//i++;
    }
    else
    {
      /* Error occurred while writing data in Flash memory*/
      return HAL_FLASH_GetError ();
 80045e2:	f001 fa7f 	bl	8005ae4 <HAL_FLASH_GetError>
 80045e6:	4603      	mov	r3, r0
 80045e8:	e009      	b.n	80045fe <Flash_WriteData+0xb2>
  for (uint16_t i = 0;  i < NumOfWords; i++) 
 80045ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80045ec:	3301      	adds	r3, #1
 80045ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80045f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80045f2:	88fb      	ldrh	r3, [r7, #6]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d3df      	bcc.n	80045b8 <Flash_WriteData+0x6c>
    }
  }

  /* Lock the Flash to disable the flash control register access */
  HAL_FLASH_Lock();
 80045f8:	f001 fa64 	bl	8005ac4 <HAL_FLASH_Lock>

  return 0;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3728      	adds	r7, #40	; 0x28
 8004602:	46bd      	mov	sp, r7
 8004604:	bdb0      	pop	{r4, r5, r7, pc}
 8004606:	bf00      	nop
 8004608:	20002b98 	.word	0x20002b98

0800460c <Flash_ReadParamStruct>:
/*
 * Read Data from fixed address in sector 7 given by BASE_PARAM_ADR
 * Data are read to FlashSectorParams struct
 */
void Flash_ReadParamStruct(FlashSectorParams* s_data)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < NUMBER_OF_PARAMS; i++)
 8004614:	2300      	movs	r3, #0
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	e00f      	b.n	800463a <Flash_ReadParamStruct+0x2e>
	{
		*((uint32_t*)(s_data)+i)=*((uint32_t*)(BASE_PARAM_ADR+4*i));
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8004620:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4619      	mov	r1, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	4413      	add	r3, r2
 8004630:	680a      	ldr	r2, [r1, #0]
 8004632:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < NUMBER_OF_PARAMS; i++)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	3301      	adds	r3, #1
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2b1a      	cmp	r3, #26
 800463e:	d9ec      	bls.n	800461a <Flash_ReadParamStruct+0xe>
	}
}
 8004640:	bf00      	nop
 8004642:	bf00      	nop
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
	...

08004650 <Flash_WriteParamStruct>:
 * Write Data to fixed address in sector 7 given by BASE_PARAM_ADR
 * Write data have FlashSectorParams struct format.. number of parametrs are given by NUMBER_OF_PARAMS define
 * Function returns 0 if there was no error
 */
uint32_t Flash_WriteParamStruct(FlashSectorParams ParamsData)
{
 8004650:	b084      	sub	sp, #16
 8004652:	b580      	push	{r7, lr}
 8004654:	b082      	sub	sp, #8
 8004656:	af00      	add	r7, sp, #0
 8004658:	f107 0c10 	add.w	ip, r7, #16
 800465c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	 uint32_t loc_Error;

	 loc_Error = Flash_WriteData(BASE_PARAM_ADR,(uint32_t*)&ParamsData,NUMBER_OF_PARAMS);
 8004660:	221b      	movs	r2, #27
 8004662:	f107 0110 	add.w	r1, r7, #16
 8004666:	4806      	ldr	r0, [pc, #24]	; (8004680 <Flash_WriteParamStruct+0x30>)
 8004668:	f7ff ff70 	bl	800454c <Flash_WriteData>
 800466c:	6078      	str	r0, [r7, #4]

	 return loc_Error;
 800466e:	687b      	ldr	r3, [r7, #4]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800467a:	b004      	add	sp, #16
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	08060000 	.word	0x08060000

08004684 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800468a:	f107 030c 	add.w	r3, r7, #12
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	605a      	str	r2, [r3, #4]
 8004694:	609a      	str	r2, [r3, #8]
 8004696:	60da      	str	r2, [r3, #12]
 8004698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800469a:	2300      	movs	r3, #0
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	4b42      	ldr	r3, [pc, #264]	; (80047a8 <MX_GPIO_Init+0x124>)
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	4a41      	ldr	r2, [pc, #260]	; (80047a8 <MX_GPIO_Init+0x124>)
 80046a4:	f043 0304 	orr.w	r3, r3, #4
 80046a8:	6313      	str	r3, [r2, #48]	; 0x30
 80046aa:	4b3f      	ldr	r3, [pc, #252]	; (80047a8 <MX_GPIO_Init+0x124>)
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	f003 0304 	and.w	r3, r3, #4
 80046b2:	60bb      	str	r3, [r7, #8]
 80046b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046b6:	2300      	movs	r3, #0
 80046b8:	607b      	str	r3, [r7, #4]
 80046ba:	4b3b      	ldr	r3, [pc, #236]	; (80047a8 <MX_GPIO_Init+0x124>)
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	4a3a      	ldr	r2, [pc, #232]	; (80047a8 <MX_GPIO_Init+0x124>)
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	6313      	str	r3, [r2, #48]	; 0x30
 80046c6:	4b38      	ldr	r3, [pc, #224]	; (80047a8 <MX_GPIO_Init+0x124>)
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	607b      	str	r3, [r7, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046d2:	2300      	movs	r3, #0
 80046d4:	603b      	str	r3, [r7, #0]
 80046d6:	4b34      	ldr	r3, [pc, #208]	; (80047a8 <MX_GPIO_Init+0x124>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	4a33      	ldr	r2, [pc, #204]	; (80047a8 <MX_GPIO_Init+0x124>)
 80046dc:	f043 0302 	orr.w	r3, r3, #2
 80046e0:	6313      	str	r3, [r2, #48]	; 0x30
 80046e2:	4b31      	ldr	r3, [pc, #196]	; (80047a8 <MX_GPIO_Init+0x124>)
 80046e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SWREV_3_Pin|SWREV_2_Pin|SWREV_1_Pin|SWDIR_3_Pin
 80046ee:	2200      	movs	r2, #0
 80046f0:	f24e 210f 	movw	r1, #57871	; 0xe20f
 80046f4:	482d      	ldr	r0, [pc, #180]	; (80047ac <MX_GPIO_Init+0x128>)
 80046f6:	f001 fdff 	bl	80062f8 <HAL_GPIO_WritePin>
                          |SWDIR_2_Pin|SWDIR_1_Pin|EN_1_Pin|LED_0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_CS_Pin|LED_1_Pin|EXT_0_Pin|EXT_1_Pin
 80046fa:	2200      	movs	r2, #0
 80046fc:	f648 3110 	movw	r1, #35600	; 0x8b10
 8004700:	482b      	ldr	r0, [pc, #172]	; (80047b0 <MX_GPIO_Init+0x12c>)
 8004702:	f001 fdf9 	bl	80062f8 <HAL_GPIO_WritePin>
                          |SPI3_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN_Pin|SPI2_CS_Pin|W55_RST_Pin|W55_INT_Pin
 8004706:	2200      	movs	r2, #0
 8004708:	f241 7138 	movw	r1, #5944	; 0x1738
 800470c:	4829      	ldr	r0, [pc, #164]	; (80047b4 <MX_GPIO_Init+0x130>)
 800470e:	f001 fdf3 	bl	80062f8 <HAL_GPIO_WritePin>
                          |LED_2_Pin|EN_3_Pin|EN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SWREV_3_Pin|SWREV_2_Pin|SWREV_1_Pin|SWDIR_3_Pin
 8004712:	f24e 230f 	movw	r3, #57871	; 0xe20f
 8004716:	60fb      	str	r3, [r7, #12]
                          |SWDIR_2_Pin|SWDIR_1_Pin|EN_1_Pin|LED_0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004718:	2301      	movs	r3, #1
 800471a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471c:	2300      	movs	r3, #0
 800471e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004720:	2300      	movs	r3, #0
 8004722:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004724:	f107 030c 	add.w	r3, r7, #12
 8004728:	4619      	mov	r1, r3
 800472a:	4820      	ldr	r0, [pc, #128]	; (80047ac <MX_GPIO_Init+0x128>)
 800472c:	f001 fc48 	bl	8005fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin|LED_1_Pin|EXT_0_Pin|EXT_1_Pin
 8004730:	f648 3310 	movw	r3, #35600	; 0x8b10
 8004734:	60fb      	str	r3, [r7, #12]
                          |SPI3_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004736:	2301      	movs	r3, #1
 8004738:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473a:	2300      	movs	r3, #0
 800473c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800473e:	2300      	movs	r3, #0
 8004740:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004742:	f107 030c 	add.w	r3, r7, #12
 8004746:	4619      	mov	r1, r3
 8004748:	4819      	ldr	r0, [pc, #100]	; (80047b0 <MX_GPIO_Init+0x12c>)
 800474a:	f001 fc39 	bl	8005fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = PG_1_Pin|PG_2_Pin|OC_1_Pin|OC_2_Pin
 800474e:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8004752:	60fb      	str	r3, [r7, #12]
                          |OC_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004754:	2300      	movs	r3, #0
 8004756:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800475c:	f107 030c 	add.w	r3, r7, #12
 8004760:	4619      	mov	r1, r3
 8004762:	4812      	ldr	r0, [pc, #72]	; (80047ac <MX_GPIO_Init+0x128>)
 8004764:	f001 fc2c 	bl	8005fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PG_3_Pin;
 8004768:	2304      	movs	r3, #4
 800476a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800476c:	2300      	movs	r3, #0
 800476e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004770:	2300      	movs	r3, #0
 8004772:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PG_3_GPIO_Port, &GPIO_InitStruct);
 8004774:	f107 030c 	add.w	r3, r7, #12
 8004778:	4619      	mov	r1, r3
 800477a:	480e      	ldr	r0, [pc, #56]	; (80047b4 <MX_GPIO_Init+0x130>)
 800477c:	f001 fc20 	bl	8005fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PWR_EN_Pin|SPI2_CS_Pin|W55_RST_Pin|W55_INT_Pin
 8004780:	f241 7338 	movw	r3, #5944	; 0x1738
 8004784:	60fb      	str	r3, [r7, #12]
                          |LED_2_Pin|EN_3_Pin|EN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004786:	2301      	movs	r3, #1
 8004788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800478e:	2300      	movs	r3, #0
 8004790:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004792:	f107 030c 	add.w	r3, r7, #12
 8004796:	4619      	mov	r1, r3
 8004798:	4806      	ldr	r0, [pc, #24]	; (80047b4 <MX_GPIO_Init+0x130>)
 800479a:	f001 fc11 	bl	8005fc0 <HAL_GPIO_Init>

}
 800479e:	bf00      	nop
 80047a0:	3720      	adds	r7, #32
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40023800 	.word	0x40023800
 80047ac:	40020800 	.word	0x40020800
 80047b0:	40020000 	.word	0x40020000
 80047b4:	40020400 	.word	0x40020400

080047b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80047bc:	4b12      	ldr	r3, [pc, #72]	; (8004808 <MX_I2C1_Init+0x50>)
 80047be:	4a13      	ldr	r2, [pc, #76]	; (800480c <MX_I2C1_Init+0x54>)
 80047c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80047c2:	4b11      	ldr	r3, [pc, #68]	; (8004808 <MX_I2C1_Init+0x50>)
 80047c4:	4a12      	ldr	r2, [pc, #72]	; (8004810 <MX_I2C1_Init+0x58>)
 80047c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80047c8:	4b0f      	ldr	r3, [pc, #60]	; (8004808 <MX_I2C1_Init+0x50>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80047ce:	4b0e      	ldr	r3, [pc, #56]	; (8004808 <MX_I2C1_Init+0x50>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047d4:	4b0c      	ldr	r3, [pc, #48]	; (8004808 <MX_I2C1_Init+0x50>)
 80047d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80047da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80047dc:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <MX_I2C1_Init+0x50>)
 80047de:	2200      	movs	r2, #0
 80047e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80047e2:	4b09      	ldr	r3, [pc, #36]	; (8004808 <MX_I2C1_Init+0x50>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80047e8:	4b07      	ldr	r3, [pc, #28]	; (8004808 <MX_I2C1_Init+0x50>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80047ee:	4b06      	ldr	r3, [pc, #24]	; (8004808 <MX_I2C1_Init+0x50>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80047f4:	4804      	ldr	r0, [pc, #16]	; (8004808 <MX_I2C1_Init+0x50>)
 80047f6:	f001 fd99 	bl	800632c <HAL_I2C_Init>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004800:	f000 f8d4 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004804:	bf00      	nop
 8004806:	bd80      	pop	{r7, pc}
 8004808:	20002bac 	.word	0x20002bac
 800480c:	40005400 	.word	0x40005400
 8004810:	000186a0 	.word	0x000186a0

08004814 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b08a      	sub	sp, #40	; 0x28
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800481c:	f107 0314 	add.w	r3, r7, #20
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	605a      	str	r2, [r3, #4]
 8004826:	609a      	str	r2, [r3, #8]
 8004828:	60da      	str	r2, [r3, #12]
 800482a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a19      	ldr	r2, [pc, #100]	; (8004898 <HAL_I2C_MspInit+0x84>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d12b      	bne.n	800488e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004836:	2300      	movs	r3, #0
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	4b18      	ldr	r3, [pc, #96]	; (800489c <HAL_I2C_MspInit+0x88>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	4a17      	ldr	r2, [pc, #92]	; (800489c <HAL_I2C_MspInit+0x88>)
 8004840:	f043 0302 	orr.w	r3, r3, #2
 8004844:	6313      	str	r3, [r2, #48]	; 0x30
 8004846:	4b15      	ldr	r3, [pc, #84]	; (800489c <HAL_I2C_MspInit+0x88>)
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004852:	23c0      	movs	r3, #192	; 0xc0
 8004854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004856:	2312      	movs	r3, #18
 8004858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485a:	2300      	movs	r3, #0
 800485c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800485e:	2303      	movs	r3, #3
 8004860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004862:	2304      	movs	r3, #4
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004866:	f107 0314 	add.w	r3, r7, #20
 800486a:	4619      	mov	r1, r3
 800486c:	480c      	ldr	r0, [pc, #48]	; (80048a0 <HAL_I2C_MspInit+0x8c>)
 800486e:	f001 fba7 	bl	8005fc0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004872:	2300      	movs	r3, #0
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	4b09      	ldr	r3, [pc, #36]	; (800489c <HAL_I2C_MspInit+0x88>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	4a08      	ldr	r2, [pc, #32]	; (800489c <HAL_I2C_MspInit+0x88>)
 800487c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004880:	6413      	str	r3, [r2, #64]	; 0x40
 8004882:	4b06      	ldr	r3, [pc, #24]	; (800489c <HAL_I2C_MspInit+0x88>)
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800488e:	bf00      	nop
 8004890:	3728      	adds	r7, #40	; 0x28
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	40005400 	.word	0x40005400
 800489c:	40023800 	.word	0x40023800
 80048a0:	40020400 	.word	0x40020400

080048a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80048a8:	f000 fca0 	bl	80051ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80048ac:	f000 f816 	bl	80048dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80048b0:	f7ff fee8 	bl	8004684 <MX_GPIO_Init>
  MX_ADC1_Init();
 80048b4:	f7ff fd3a 	bl	800432c <MX_ADC1_Init>
  MX_I2C1_Init();
 80048b8:	f7ff ff7e 	bl	80047b8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80048bc:	f000 f87c 	bl	80049b8 <MX_SPI1_Init>
  MX_SPI2_Init();
 80048c0:	f000 f8b2 	bl	8004a28 <MX_SPI2_Init>
  MX_SPI3_Init();
 80048c4:	f000 f8e8 	bl	8004a98 <MX_SPI3_Init>
  MX_SPI5_Init();
 80048c8:	f000 f91c 	bl	8004b04 <MX_SPI5_Init>
  MX_USART2_UART_Init();
 80048cc:	f000 fbea 	bl	80050a4 <MX_USART2_UART_Init>
  MX_TIM10_Init();
 80048d0:	f000 fb9c 	bl	800500c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  application_main();
 80048d4:	f7fc fb98 	bl	8001008 <application_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80048d8:	e7fe      	b.n	80048d8 <main+0x34>
	...

080048dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b094      	sub	sp, #80	; 0x50
 80048e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80048e2:	f107 0320 	add.w	r3, r7, #32
 80048e6:	2230      	movs	r2, #48	; 0x30
 80048e8:	2100      	movs	r1, #0
 80048ea:	4618      	mov	r0, r3
 80048ec:	f005 f878 	bl	80099e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80048f0:	f107 030c 	add.w	r3, r7, #12
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	605a      	str	r2, [r3, #4]
 80048fa:	609a      	str	r2, [r3, #8]
 80048fc:	60da      	str	r2, [r3, #12]
 80048fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004900:	2300      	movs	r3, #0
 8004902:	60bb      	str	r3, [r7, #8]
 8004904:	4b27      	ldr	r3, [pc, #156]	; (80049a4 <SystemClock_Config+0xc8>)
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	4a26      	ldr	r2, [pc, #152]	; (80049a4 <SystemClock_Config+0xc8>)
 800490a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800490e:	6413      	str	r3, [r2, #64]	; 0x40
 8004910:	4b24      	ldr	r3, [pc, #144]	; (80049a4 <SystemClock_Config+0xc8>)
 8004912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800491c:	2300      	movs	r3, #0
 800491e:	607b      	str	r3, [r7, #4]
 8004920:	4b21      	ldr	r3, [pc, #132]	; (80049a8 <SystemClock_Config+0xcc>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a20      	ldr	r2, [pc, #128]	; (80049a8 <SystemClock_Config+0xcc>)
 8004926:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800492a:	6013      	str	r3, [r2, #0]
 800492c:	4b1e      	ldr	r3, [pc, #120]	; (80049a8 <SystemClock_Config+0xcc>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004934:	607b      	str	r3, [r7, #4]
 8004936:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004938:	2302      	movs	r3, #2
 800493a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800493c:	2301      	movs	r3, #1
 800493e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004940:	2310      	movs	r3, #16
 8004942:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004944:	2302      	movs	r3, #2
 8004946:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004948:	2300      	movs	r3, #0
 800494a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800494c:	2308      	movs	r3, #8
 800494e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8004950:	2364      	movs	r3, #100	; 0x64
 8004952:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004954:	2302      	movs	r3, #2
 8004956:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004958:	2304      	movs	r3, #4
 800495a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800495c:	f107 0320 	add.w	r3, r7, #32
 8004960:	4618      	mov	r0, r3
 8004962:	f001 fe27 	bl	80065b4 <HAL_RCC_OscConfig>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800496c:	f000 f81e 	bl	80049ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004970:	230f      	movs	r3, #15
 8004972:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004974:	2302      	movs	r3, #2
 8004976:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004978:	2300      	movs	r3, #0
 800497a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800497c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004980:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004982:	2300      	movs	r3, #0
 8004984:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004986:	f107 030c 	add.w	r3, r7, #12
 800498a:	2103      	movs	r1, #3
 800498c:	4618      	mov	r0, r3
 800498e:	f002 f889 	bl	8006aa4 <HAL_RCC_ClockConfig>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8004998:	f000 f808 	bl	80049ac <Error_Handler>
  }
}
 800499c:	bf00      	nop
 800499e:	3750      	adds	r7, #80	; 0x50
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40023800 	.word	0x40023800
 80049a8:	40007000 	.word	0x40007000

080049ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80049b0:	b672      	cpsid	i
}
 80049b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80049b4:	e7fe      	b.n	80049b4 <Error_Handler+0x8>
	...

080049b8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi5;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80049bc:	4b18      	ldr	r3, [pc, #96]	; (8004a20 <MX_SPI1_Init+0x68>)
 80049be:	4a19      	ldr	r2, [pc, #100]	; (8004a24 <MX_SPI1_Init+0x6c>)
 80049c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80049c2:	4b17      	ldr	r3, [pc, #92]	; (8004a20 <MX_SPI1_Init+0x68>)
 80049c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80049c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80049ca:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <MX_SPI1_Init+0x68>)
 80049cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80049d0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80049d2:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <MX_SPI1_Init+0x68>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80049d8:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <MX_SPI1_Init+0x68>)
 80049da:	2200      	movs	r2, #0
 80049dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80049de:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <MX_SPI1_Init+0x68>)
 80049e0:	2201      	movs	r2, #1
 80049e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80049e4:	4b0e      	ldr	r3, [pc, #56]	; (8004a20 <MX_SPI1_Init+0x68>)
 80049e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80049ec:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <MX_SPI1_Init+0x68>)
 80049ee:	2238      	movs	r2, #56	; 0x38
 80049f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80049f2:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <MX_SPI1_Init+0x68>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80049f8:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <MX_SPI1_Init+0x68>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049fe:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <MX_SPI1_Init+0x68>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004a04:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <MX_SPI1_Init+0x68>)
 8004a06:	220a      	movs	r2, #10
 8004a08:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004a0a:	4805      	ldr	r0, [pc, #20]	; (8004a20 <MX_SPI1_Init+0x68>)
 8004a0c:	f002 fa2a 	bl	8006e64 <HAL_SPI_Init>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8004a16:	f7ff ffc9 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004a1a:	bf00      	nop
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20002c00 	.word	0x20002c00
 8004a24:	40013000 	.word	0x40013000

08004a28 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8004a2c:	4b18      	ldr	r3, [pc, #96]	; (8004a90 <MX_SPI2_Init+0x68>)
 8004a2e:	4a19      	ldr	r2, [pc, #100]	; (8004a94 <MX_SPI2_Init+0x6c>)
 8004a30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004a32:	4b17      	ldr	r3, [pc, #92]	; (8004a90 <MX_SPI2_Init+0x68>)
 8004a34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004a38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004a3a:	4b15      	ldr	r3, [pc, #84]	; (8004a90 <MX_SPI2_Init+0x68>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8004a40:	4b13      	ldr	r3, [pc, #76]	; (8004a90 <MX_SPI2_Init+0x68>)
 8004a42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a46:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a48:	4b11      	ldr	r3, [pc, #68]	; (8004a90 <MX_SPI2_Init+0x68>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a4e:	4b10      	ldr	r3, [pc, #64]	; (8004a90 <MX_SPI2_Init+0x68>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004a54:	4b0e      	ldr	r3, [pc, #56]	; (8004a90 <MX_SPI2_Init+0x68>)
 8004a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a5a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004a5c:	4b0c      	ldr	r3, [pc, #48]	; (8004a90 <MX_SPI2_Init+0x68>)
 8004a5e:	2210      	movs	r2, #16
 8004a60:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a62:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <MX_SPI2_Init+0x68>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a68:	4b09      	ldr	r3, [pc, #36]	; (8004a90 <MX_SPI2_Init+0x68>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a6e:	4b08      	ldr	r3, [pc, #32]	; (8004a90 <MX_SPI2_Init+0x68>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004a74:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <MX_SPI2_Init+0x68>)
 8004a76:	220a      	movs	r2, #10
 8004a78:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004a7a:	4805      	ldr	r0, [pc, #20]	; (8004a90 <MX_SPI2_Init+0x68>)
 8004a7c:	f002 f9f2 	bl	8006e64 <HAL_SPI_Init>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8004a86:	f7ff ff91 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004a8a:	bf00      	nop
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20002c58 	.word	0x20002c58
 8004a94:	40003800 	.word	0x40003800

08004a98 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8004a9c:	4b17      	ldr	r3, [pc, #92]	; (8004afc <MX_SPI3_Init+0x64>)
 8004a9e:	4a18      	ldr	r2, [pc, #96]	; (8004b00 <MX_SPI3_Init+0x68>)
 8004aa0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004aa2:	4b16      	ldr	r3, [pc, #88]	; (8004afc <MX_SPI3_Init+0x64>)
 8004aa4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004aa8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004aaa:	4b14      	ldr	r3, [pc, #80]	; (8004afc <MX_SPI3_Init+0x64>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ab0:	4b12      	ldr	r3, [pc, #72]	; (8004afc <MX_SPI3_Init+0x64>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ab6:	4b11      	ldr	r3, [pc, #68]	; (8004afc <MX_SPI3_Init+0x64>)
 8004ab8:	2200      	movs	r2, #0
 8004aba:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004abc:	4b0f      	ldr	r3, [pc, #60]	; (8004afc <MX_SPI3_Init+0x64>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004ac2:	4b0e      	ldr	r3, [pc, #56]	; (8004afc <MX_SPI3_Init+0x64>)
 8004ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ac8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004aca:	4b0c      	ldr	r3, [pc, #48]	; (8004afc <MX_SPI3_Init+0x64>)
 8004acc:	2220      	movs	r2, #32
 8004ace:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ad0:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <MX_SPI3_Init+0x64>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ad6:	4b09      	ldr	r3, [pc, #36]	; (8004afc <MX_SPI3_Init+0x64>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004adc:	4b07      	ldr	r3, [pc, #28]	; (8004afc <MX_SPI3_Init+0x64>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8004ae2:	4b06      	ldr	r3, [pc, #24]	; (8004afc <MX_SPI3_Init+0x64>)
 8004ae4:	220a      	movs	r2, #10
 8004ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004ae8:	4804      	ldr	r0, [pc, #16]	; (8004afc <MX_SPI3_Init+0x64>)
 8004aea:	f002 f9bb 	bl	8006e64 <HAL_SPI_Init>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8004af4:	f7ff ff5a 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004af8:	bf00      	nop
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	20002cb0 	.word	0x20002cb0
 8004b00:	40003c00 	.word	0x40003c00

08004b04 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8004b08:	4b17      	ldr	r3, [pc, #92]	; (8004b68 <MX_SPI5_Init+0x64>)
 8004b0a:	4a18      	ldr	r2, [pc, #96]	; (8004b6c <MX_SPI5_Init+0x68>)
 8004b0c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8004b0e:	4b16      	ldr	r3, [pc, #88]	; (8004b68 <MX_SPI5_Init+0x64>)
 8004b10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b14:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004b16:	4b14      	ldr	r3, [pc, #80]	; (8004b68 <MX_SPI5_Init+0x64>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b1c:	4b12      	ldr	r3, [pc, #72]	; (8004b68 <MX_SPI5_Init+0x64>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b22:	4b11      	ldr	r3, [pc, #68]	; (8004b68 <MX_SPI5_Init+0x64>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b28:	4b0f      	ldr	r3, [pc, #60]	; (8004b68 <MX_SPI5_Init+0x64>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8004b2e:	4b0e      	ldr	r3, [pc, #56]	; (8004b68 <MX_SPI5_Init+0x64>)
 8004b30:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004b34:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b36:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <MX_SPI5_Init+0x64>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b3c:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <MX_SPI5_Init+0x64>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b42:	4b09      	ldr	r3, [pc, #36]	; (8004b68 <MX_SPI5_Init+0x64>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b48:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <MX_SPI5_Init+0x64>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8004b4e:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <MX_SPI5_Init+0x64>)
 8004b50:	220a      	movs	r2, #10
 8004b52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8004b54:	4804      	ldr	r0, [pc, #16]	; (8004b68 <MX_SPI5_Init+0x64>)
 8004b56:	f002 f985 	bl	8006e64 <HAL_SPI_Init>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d001      	beq.n	8004b64 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8004b60:	f7ff ff24 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8004b64:	bf00      	nop
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	20002d08 	.word	0x20002d08
 8004b6c:	40015000 	.word	0x40015000

08004b70 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b090      	sub	sp, #64	; 0x40
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	605a      	str	r2, [r3, #4]
 8004b82:	609a      	str	r2, [r3, #8]
 8004b84:	60da      	str	r2, [r3, #12]
 8004b86:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a74      	ldr	r2, [pc, #464]	; (8004d60 <HAL_SPI_MspInit+0x1f0>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d12c      	bne.n	8004bec <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004b92:	2300      	movs	r3, #0
 8004b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b96:	4b73      	ldr	r3, [pc, #460]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9a:	4a72      	ldr	r2, [pc, #456]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004b9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ba2:	4b70      	ldr	r3, [pc, #448]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bac:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bae:	2300      	movs	r3, #0
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb2:	4b6c      	ldr	r3, [pc, #432]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	4a6b      	ldr	r2, [pc, #428]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8004bbe:	4b69      	ldr	r3, [pc, #420]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004bca:	23a0      	movs	r3, #160	; 0xa0
 8004bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bce:	2302      	movs	r3, #2
 8004bd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004bda:	2305      	movs	r3, #5
 8004bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004be2:	4619      	mov	r1, r3
 8004be4:	4860      	ldr	r0, [pc, #384]	; (8004d68 <HAL_SPI_MspInit+0x1f8>)
 8004be6:	f001 f9eb 	bl	8005fc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8004bea:	e0b5      	b.n	8004d58 <HAL_SPI_MspInit+0x1e8>
  else if(spiHandle->Instance==SPI2)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a5e      	ldr	r2, [pc, #376]	; (8004d6c <HAL_SPI_MspInit+0x1fc>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d12d      	bne.n	8004c52 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	623b      	str	r3, [r7, #32]
 8004bfa:	4b5a      	ldr	r3, [pc, #360]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	4a59      	ldr	r2, [pc, #356]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c04:	6413      	str	r3, [r2, #64]	; 0x40
 8004c06:	4b57      	ldr	r3, [pc, #348]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c0e:	623b      	str	r3, [r7, #32]
 8004c10:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
 8004c16:	4b53      	ldr	r3, [pc, #332]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	4a52      	ldr	r2, [pc, #328]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004c1c:	f043 0302 	orr.w	r3, r3, #2
 8004c20:	6313      	str	r3, [r2, #48]	; 0x30
 8004c22:	4b50      	ldr	r3, [pc, #320]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	61fb      	str	r3, [r7, #28]
 8004c2c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004c2e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c34:	2302      	movs	r3, #2
 8004c36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c40:	2305      	movs	r3, #5
 8004c42:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4849      	ldr	r0, [pc, #292]	; (8004d70 <HAL_SPI_MspInit+0x200>)
 8004c4c:	f001 f9b8 	bl	8005fc0 <HAL_GPIO_Init>
}
 8004c50:	e082      	b.n	8004d58 <HAL_SPI_MspInit+0x1e8>
  else if(spiHandle->Instance==SPI3)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a47      	ldr	r2, [pc, #284]	; (8004d74 <HAL_SPI_MspInit+0x204>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d12d      	bne.n	8004cb8 <HAL_SPI_MspInit+0x148>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	61bb      	str	r3, [r7, #24]
 8004c60:	4b40      	ldr	r3, [pc, #256]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c64:	4a3f      	ldr	r2, [pc, #252]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8004c6c:	4b3d      	ldr	r3, [pc, #244]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c74:	61bb      	str	r3, [r7, #24]
 8004c76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c78:	2300      	movs	r3, #0
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	4b39      	ldr	r3, [pc, #228]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c80:	4a38      	ldr	r2, [pc, #224]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004c82:	f043 0304 	orr.w	r3, r3, #4
 8004c86:	6313      	str	r3, [r2, #48]	; 0x30
 8004c88:	4b36      	ldr	r3, [pc, #216]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004c94:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004c98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004ca6:	2306      	movs	r3, #6
 8004ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004caa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4831      	ldr	r0, [pc, #196]	; (8004d78 <HAL_SPI_MspInit+0x208>)
 8004cb2:	f001 f985 	bl	8005fc0 <HAL_GPIO_Init>
}
 8004cb6:	e04f      	b.n	8004d58 <HAL_SPI_MspInit+0x1e8>
  else if(spiHandle->Instance==SPI5)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a2f      	ldr	r2, [pc, #188]	; (8004d7c <HAL_SPI_MspInit+0x20c>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d14a      	bne.n	8004d58 <HAL_SPI_MspInit+0x1e8>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	4b27      	ldr	r3, [pc, #156]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cca:	4a26      	ldr	r2, [pc, #152]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004ccc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8004cd2:	4b24      	ldr	r3, [pc, #144]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cda:	613b      	str	r3, [r7, #16]
 8004cdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	4b20      	ldr	r3, [pc, #128]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	4a1f      	ldr	r2, [pc, #124]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004ce8:	f043 0302 	orr.w	r3, r3, #2
 8004cec:	6313      	str	r3, [r2, #48]	; 0x30
 8004cee:	4b1d      	ldr	r3, [pc, #116]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	4b19      	ldr	r3, [pc, #100]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d02:	4a18      	ldr	r2, [pc, #96]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004d04:	f043 0301 	orr.w	r3, r3, #1
 8004d08:	6313      	str	r3, [r2, #48]	; 0x30
 8004d0a:	4b16      	ldr	r3, [pc, #88]	; (8004d64 <HAL_SPI_MspInit+0x1f4>)
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	60bb      	str	r3, [r7, #8]
 8004d14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004d16:	2303      	movs	r3, #3
 8004d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d22:	2303      	movs	r3, #3
 8004d24:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004d26:	2306      	movs	r3, #6
 8004d28:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d2e:	4619      	mov	r1, r3
 8004d30:	480f      	ldr	r0, [pc, #60]	; (8004d70 <HAL_SPI_MspInit+0x200>)
 8004d32:	f001 f945 	bl	8005fc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8004d36:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d40:	2300      	movs	r3, #0
 8004d42:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d44:	2303      	movs	r3, #3
 8004d46:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8004d48:	2306      	movs	r3, #6
 8004d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d50:	4619      	mov	r1, r3
 8004d52:	4805      	ldr	r0, [pc, #20]	; (8004d68 <HAL_SPI_MspInit+0x1f8>)
 8004d54:	f001 f934 	bl	8005fc0 <HAL_GPIO_Init>
}
 8004d58:	bf00      	nop
 8004d5a:	3740      	adds	r7, #64	; 0x40
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40013000 	.word	0x40013000
 8004d64:	40023800 	.word	0x40023800
 8004d68:	40020000 	.word	0x40020000
 8004d6c:	40003800 	.word	0x40003800
 8004d70:	40020400 	.word	0x40020400
 8004d74:	40003c00 	.word	0x40003c00
 8004d78:	40020800 	.word	0x40020800
 8004d7c:	40015000 	.word	0x40015000

08004d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d86:	2300      	movs	r3, #0
 8004d88:	607b      	str	r3, [r7, #4]
 8004d8a:	4b10      	ldr	r3, [pc, #64]	; (8004dcc <HAL_MspInit+0x4c>)
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8e:	4a0f      	ldr	r2, [pc, #60]	; (8004dcc <HAL_MspInit+0x4c>)
 8004d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d94:	6453      	str	r3, [r2, #68]	; 0x44
 8004d96:	4b0d      	ldr	r3, [pc, #52]	; (8004dcc <HAL_MspInit+0x4c>)
 8004d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d9e:	607b      	str	r3, [r7, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004da2:	2300      	movs	r3, #0
 8004da4:	603b      	str	r3, [r7, #0]
 8004da6:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <HAL_MspInit+0x4c>)
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	4a08      	ldr	r2, [pc, #32]	; (8004dcc <HAL_MspInit+0x4c>)
 8004dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db0:	6413      	str	r3, [r2, #64]	; 0x40
 8004db2:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <HAL_MspInit+0x4c>)
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dba:	603b      	str	r3, [r7, #0]
 8004dbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	40023800 	.word	0x40023800

08004dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004dd4:	e7fe      	b.n	8004dd4 <NMI_Handler+0x4>

08004dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004dda:	e7fe      	b.n	8004dda <HardFault_Handler+0x4>

08004ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004de0:	e7fe      	b.n	8004de0 <MemManage_Handler+0x4>

08004de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004de2:	b480      	push	{r7}
 8004de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004de6:	e7fe      	b.n	8004de6 <BusFault_Handler+0x4>

08004de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004dec:	e7fe      	b.n	8004dec <UsageFault_Handler+0x4>

08004dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004dee:	b480      	push	{r7}
 8004df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004df2:	bf00      	nop
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e00:	bf00      	nop
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e0e:	bf00      	nop
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e1c:	f000 fa38 	bl	8005290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e20:	bf00      	nop
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8004e28:	4802      	ldr	r0, [pc, #8]	; (8004e34 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004e2a:	f002 fe75 	bl	8007b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004e2e:	bf00      	nop
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20002d64 	.word	0x20002d64

08004e38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	USART2->SR &= ~USART_SR_RXNE_Msk;
 8004e3c:	4b06      	ldr	r3, [pc, #24]	; (8004e58 <USART2_IRQHandler+0x20>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a05      	ldr	r2, [pc, #20]	; (8004e58 <USART2_IRQHandler+0x20>)
 8004e42:	f023 0320 	bic.w	r3, r3, #32
 8004e46:	6013      	str	r3, [r2, #0]
	Uart_WriteBuffer(USART2->DR);
 8004e48:	4b03      	ldr	r3, [pc, #12]	; (8004e58 <USART2_IRQHandler+0x20>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7ff f8e2 	bl	8004018 <Uart_WriteBuffer>

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004e54:	bf00      	nop
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40004400 	.word	0x40004400

08004e5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
  return 1;
 8004e60:	2301      	movs	r3, #1
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <_kill>:

int _kill(int pid, int sig)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004e76:	f004 fd73 	bl	8009960 <__errno>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2216      	movs	r2, #22
 8004e7e:	601a      	str	r2, [r3, #0]
  return -1;
 8004e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3708      	adds	r7, #8
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <_exit>:

void _exit (int status)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7ff ffe7 	bl	8004e6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e9e:	e7fe      	b.n	8004e9e <_exit+0x12>

08004ea0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	e00a      	b.n	8004ec8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004eb2:	f3af 8000 	nop.w
 8004eb6:	4601      	mov	r1, r0
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	60ba      	str	r2, [r7, #8]
 8004ebe:	b2ca      	uxtb	r2, r1
 8004ec0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	dbf0      	blt.n	8004eb2 <_read+0x12>
  }

  return len;
 8004ed0:	687b      	ldr	r3, [r7, #4]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3718      	adds	r7, #24
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b086      	sub	sp, #24
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	e009      	b.n	8004f00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	60ba      	str	r2, [r7, #8]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	3301      	adds	r3, #1
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	dbf1      	blt.n	8004eec <_write+0x12>
  }
  return len;
 8004f08:	687b      	ldr	r3, [r7, #4]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <_close>:

int _close(int file)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b083      	sub	sp, #12
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
 8004f32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f3a:	605a      	str	r2, [r3, #4]
  return 0;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <_isatty>:

int _isatty(int file)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004f52:	2301      	movs	r3, #1
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
	...

08004f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f84:	4a14      	ldr	r2, [pc, #80]	; (8004fd8 <_sbrk+0x5c>)
 8004f86:	4b15      	ldr	r3, [pc, #84]	; (8004fdc <_sbrk+0x60>)
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f90:	4b13      	ldr	r3, [pc, #76]	; (8004fe0 <_sbrk+0x64>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d102      	bne.n	8004f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f98:	4b11      	ldr	r3, [pc, #68]	; (8004fe0 <_sbrk+0x64>)
 8004f9a:	4a12      	ldr	r2, [pc, #72]	; (8004fe4 <_sbrk+0x68>)
 8004f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f9e:	4b10      	ldr	r3, [pc, #64]	; (8004fe0 <_sbrk+0x64>)
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d207      	bcs.n	8004fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004fac:	f004 fcd8 	bl	8009960 <__errno>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	220c      	movs	r2, #12
 8004fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fba:	e009      	b.n	8004fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004fbc:	4b08      	ldr	r3, [pc, #32]	; (8004fe0 <_sbrk+0x64>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004fc2:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <_sbrk+0x64>)
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4413      	add	r3, r2
 8004fca:	4a05      	ldr	r2, [pc, #20]	; (8004fe0 <_sbrk+0x64>)
 8004fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004fce:	68fb      	ldr	r3, [r7, #12]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3718      	adds	r7, #24
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	20020000 	.word	0x20020000
 8004fdc:	00000400 	.word	0x00000400
 8004fe0:	20002d60 	.word	0x20002d60
 8004fe4:	20002e48 	.word	0x20002e48

08004fe8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fec:	4b06      	ldr	r3, [pc, #24]	; (8005008 <SystemInit+0x20>)
 8004fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff2:	4a05      	ldr	r2, [pc, #20]	; (8005008 <SystemInit+0x20>)
 8004ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ffc:	bf00      	nop
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	e000ed00 	.word	0xe000ed00

0800500c <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005010:	4b0e      	ldr	r3, [pc, #56]	; (800504c <MX_TIM10_Init+0x40>)
 8005012:	4a0f      	ldr	r2, [pc, #60]	; (8005050 <MX_TIM10_Init+0x44>)
 8005014:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 99;
 8005016:	4b0d      	ldr	r3, [pc, #52]	; (800504c <MX_TIM10_Init+0x40>)
 8005018:	2263      	movs	r2, #99	; 0x63
 800501a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800501c:	4b0b      	ldr	r3, [pc, #44]	; (800504c <MX_TIM10_Init+0x40>)
 800501e:	2200      	movs	r2, #0
 8005020:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1999;
 8005022:	4b0a      	ldr	r3, [pc, #40]	; (800504c <MX_TIM10_Init+0x40>)
 8005024:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8005028:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800502a:	4b08      	ldr	r3, [pc, #32]	; (800504c <MX_TIM10_Init+0x40>)
 800502c:	2200      	movs	r2, #0
 800502e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005030:	4b06      	ldr	r3, [pc, #24]	; (800504c <MX_TIM10_Init+0x40>)
 8005032:	2200      	movs	r2, #0
 8005034:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005036:	4805      	ldr	r0, [pc, #20]	; (800504c <MX_TIM10_Init+0x40>)
 8005038:	f002 fcbc 	bl	80079b4 <HAL_TIM_Base_Init>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8005042:	f7ff fcb3 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8005046:	bf00      	nop
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	20002d64 	.word	0x20002d64
 8005050:	40014400 	.word	0x40014400

08005054 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a0e      	ldr	r2, [pc, #56]	; (800509c <HAL_TIM_Base_MspInit+0x48>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d115      	bne.n	8005092 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]
 800506a:	4b0d      	ldr	r3, [pc, #52]	; (80050a0 <HAL_TIM_Base_MspInit+0x4c>)
 800506c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506e:	4a0c      	ldr	r2, [pc, #48]	; (80050a0 <HAL_TIM_Base_MspInit+0x4c>)
 8005070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005074:	6453      	str	r3, [r2, #68]	; 0x44
 8005076:	4b0a      	ldr	r3, [pc, #40]	; (80050a0 <HAL_TIM_Base_MspInit+0x4c>)
 8005078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005082:	2200      	movs	r2, #0
 8005084:	2100      	movs	r1, #0
 8005086:	2019      	movs	r0, #25
 8005088:	f000 fc6f 	bl	800596a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800508c:	2019      	movs	r0, #25
 800508e:	f000 fc88 	bl	80059a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8005092:	bf00      	nop
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40014400 	.word	0x40014400
 80050a0:	40023800 	.word	0x40023800

080050a4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80050a8:	4b11      	ldr	r3, [pc, #68]	; (80050f0 <MX_USART2_UART_Init+0x4c>)
 80050aa:	4a12      	ldr	r2, [pc, #72]	; (80050f4 <MX_USART2_UART_Init+0x50>)
 80050ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80050ae:	4b10      	ldr	r3, [pc, #64]	; (80050f0 <MX_USART2_UART_Init+0x4c>)
 80050b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80050b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80050b6:	4b0e      	ldr	r3, [pc, #56]	; (80050f0 <MX_USART2_UART_Init+0x4c>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80050bc:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <MX_USART2_UART_Init+0x4c>)
 80050be:	2200      	movs	r2, #0
 80050c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80050c2:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <MX_USART2_UART_Init+0x4c>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80050c8:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <MX_USART2_UART_Init+0x4c>)
 80050ca:	220c      	movs	r2, #12
 80050cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80050ce:	4b08      	ldr	r3, [pc, #32]	; (80050f0 <MX_USART2_UART_Init+0x4c>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80050d4:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <MX_USART2_UART_Init+0x4c>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80050da:	4805      	ldr	r0, [pc, #20]	; (80050f0 <MX_USART2_UART_Init+0x4c>)
 80050dc:	f002 fee0 	bl	8007ea0 <HAL_UART_Init>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80050e6:	f7ff fc61 	bl	80049ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80050ea:	bf00      	nop
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20002dac 	.word	0x20002dac
 80050f4:	40004400 	.word	0x40004400

080050f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08a      	sub	sp, #40	; 0x28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005100:	f107 0314 	add.w	r3, r7, #20
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	605a      	str	r2, [r3, #4]
 800510a:	609a      	str	r2, [r3, #8]
 800510c:	60da      	str	r2, [r3, #12]
 800510e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1d      	ldr	r2, [pc, #116]	; (800518c <HAL_UART_MspInit+0x94>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d133      	bne.n	8005182 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800511a:	2300      	movs	r3, #0
 800511c:	613b      	str	r3, [r7, #16]
 800511e:	4b1c      	ldr	r3, [pc, #112]	; (8005190 <HAL_UART_MspInit+0x98>)
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	4a1b      	ldr	r2, [pc, #108]	; (8005190 <HAL_UART_MspInit+0x98>)
 8005124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005128:	6413      	str	r3, [r2, #64]	; 0x40
 800512a:	4b19      	ldr	r3, [pc, #100]	; (8005190 <HAL_UART_MspInit+0x98>)
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	4b15      	ldr	r3, [pc, #84]	; (8005190 <HAL_UART_MspInit+0x98>)
 800513c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513e:	4a14      	ldr	r2, [pc, #80]	; (8005190 <HAL_UART_MspInit+0x98>)
 8005140:	f043 0301 	orr.w	r3, r3, #1
 8005144:	6313      	str	r3, [r2, #48]	; 0x30
 8005146:	4b12      	ldr	r3, [pc, #72]	; (8005190 <HAL_UART_MspInit+0x98>)
 8005148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005152:	230c      	movs	r3, #12
 8005154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005156:	2302      	movs	r3, #2
 8005158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800515a:	2300      	movs	r3, #0
 800515c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800515e:	2303      	movs	r3, #3
 8005160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005162:	2307      	movs	r3, #7
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005166:	f107 0314 	add.w	r3, r7, #20
 800516a:	4619      	mov	r1, r3
 800516c:	4809      	ldr	r0, [pc, #36]	; (8005194 <HAL_UART_MspInit+0x9c>)
 800516e:	f000 ff27 	bl	8005fc0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005172:	2200      	movs	r2, #0
 8005174:	2100      	movs	r1, #0
 8005176:	2026      	movs	r0, #38	; 0x26
 8005178:	f000 fbf7 	bl	800596a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800517c:	2026      	movs	r0, #38	; 0x26
 800517e:	f000 fc10 	bl	80059a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005182:	bf00      	nop
 8005184:	3728      	adds	r7, #40	; 0x28
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40004400 	.word	0x40004400
 8005190:	40023800 	.word	0x40023800
 8005194:	40020000 	.word	0x40020000

08005198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80051d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800519c:	480d      	ldr	r0, [pc, #52]	; (80051d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800519e:	490e      	ldr	r1, [pc, #56]	; (80051d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80051a0:	4a0e      	ldr	r2, [pc, #56]	; (80051dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80051a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051a4:	e002      	b.n	80051ac <LoopCopyDataInit>

080051a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051aa:	3304      	adds	r3, #4

080051ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051b0:	d3f9      	bcc.n	80051a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051b2:	4a0b      	ldr	r2, [pc, #44]	; (80051e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80051b4:	4c0b      	ldr	r4, [pc, #44]	; (80051e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80051b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051b8:	e001      	b.n	80051be <LoopFillZerobss>

080051ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051bc:	3204      	adds	r2, #4

080051be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051c0:	d3fb      	bcc.n	80051ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80051c2:	f7ff ff11 	bl	8004fe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80051c6:	f004 fbd1 	bl	800996c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80051ca:	f7ff fb6b 	bl	80048a4 <main>
  bx  lr    
 80051ce:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80051d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80051d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051d8:	20000294 	.word	0x20000294
  ldr r2, =_sidata
 80051dc:	0800f818 	.word	0x0800f818
  ldr r2, =_sbss
 80051e0:	20000294 	.word	0x20000294
  ldr r4, =_ebss
 80051e4:	20002e48 	.word	0x20002e48

080051e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80051e8:	e7fe      	b.n	80051e8 <ADC_IRQHandler>
	...

080051ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80051f0:	4b0e      	ldr	r3, [pc, #56]	; (800522c <HAL_Init+0x40>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a0d      	ldr	r2, [pc, #52]	; (800522c <HAL_Init+0x40>)
 80051f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80051fc:	4b0b      	ldr	r3, [pc, #44]	; (800522c <HAL_Init+0x40>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a0a      	ldr	r2, [pc, #40]	; (800522c <HAL_Init+0x40>)
 8005202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005206:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005208:	4b08      	ldr	r3, [pc, #32]	; (800522c <HAL_Init+0x40>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a07      	ldr	r2, [pc, #28]	; (800522c <HAL_Init+0x40>)
 800520e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005212:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005214:	2003      	movs	r0, #3
 8005216:	f000 fb9d 	bl	8005954 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800521a:	200f      	movs	r0, #15
 800521c:	f000 f808 	bl	8005230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005220:	f7ff fdae 	bl	8004d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	40023c00 	.word	0x40023c00

08005230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005238:	4b12      	ldr	r3, [pc, #72]	; (8005284 <HAL_InitTick+0x54>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	4b12      	ldr	r3, [pc, #72]	; (8005288 <HAL_InitTick+0x58>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	4619      	mov	r1, r3
 8005242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005246:	fbb3 f3f1 	udiv	r3, r3, r1
 800524a:	fbb2 f3f3 	udiv	r3, r2, r3
 800524e:	4618      	mov	r0, r3
 8005250:	f000 fbb5 	bl	80059be <HAL_SYSTICK_Config>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e00e      	b.n	800527c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b0f      	cmp	r3, #15
 8005262:	d80a      	bhi.n	800527a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005264:	2200      	movs	r2, #0
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800526c:	f000 fb7d 	bl	800596a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005270:	4a06      	ldr	r2, [pc, #24]	; (800528c <HAL_InitTick+0x5c>)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005276:	2300      	movs	r3, #0
 8005278:	e000      	b.n	800527c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
}
 800527c:	4618      	mov	r0, r3
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	20000088 	.word	0x20000088
 8005288:	20000090 	.word	0x20000090
 800528c:	2000008c 	.word	0x2000008c

08005290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005294:	4b06      	ldr	r3, [pc, #24]	; (80052b0 <HAL_IncTick+0x20>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	461a      	mov	r2, r3
 800529a:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <HAL_IncTick+0x24>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4413      	add	r3, r2
 80052a0:	4a04      	ldr	r2, [pc, #16]	; (80052b4 <HAL_IncTick+0x24>)
 80052a2:	6013      	str	r3, [r2, #0]
}
 80052a4:	bf00      	nop
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	20000090 	.word	0x20000090
 80052b4:	20002df0 	.word	0x20002df0

080052b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
  return uwTick;
 80052bc:	4b03      	ldr	r3, [pc, #12]	; (80052cc <HAL_GetTick+0x14>)
 80052be:	681b      	ldr	r3, [r3, #0]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	20002df0 	.word	0x20002df0

080052d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e033      	b.n	800534e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d109      	bne.n	8005302 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7ff f86e 	bl	80043d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	f003 0310 	and.w	r3, r3, #16
 800530a:	2b00      	cmp	r3, #0
 800530c:	d118      	bne.n	8005340 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005316:	f023 0302 	bic.w	r3, r3, #2
 800531a:	f043 0202 	orr.w	r2, r3, #2
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f94a 	bl	80055bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	f023 0303 	bic.w	r3, r3, #3
 8005336:	f043 0201 	orr.w	r2, r3, #1
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	641a      	str	r2, [r3, #64]	; 0x40
 800533e:	e001      	b.n	8005344 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800534c:	7bfb      	ldrb	r3, [r7, #15]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
	...

08005358 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005362:	2300      	movs	r3, #0
 8005364:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_ADC_ConfigChannel+0x1c>
 8005370:	2302      	movs	r3, #2
 8005372:	e113      	b.n	800559c <HAL_ADC_ConfigChannel+0x244>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2b09      	cmp	r3, #9
 8005382:	d925      	bls.n	80053d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68d9      	ldr	r1, [r3, #12]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	b29b      	uxth	r3, r3
 8005390:	461a      	mov	r2, r3
 8005392:	4613      	mov	r3, r2
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	4413      	add	r3, r2
 8005398:	3b1e      	subs	r3, #30
 800539a:	2207      	movs	r2, #7
 800539c:	fa02 f303 	lsl.w	r3, r2, r3
 80053a0:	43da      	mvns	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	400a      	ands	r2, r1
 80053a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68d9      	ldr	r1, [r3, #12]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	4618      	mov	r0, r3
 80053bc:	4603      	mov	r3, r0
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	4403      	add	r3, r0
 80053c2:	3b1e      	subs	r3, #30
 80053c4:	409a      	lsls	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	60da      	str	r2, [r3, #12]
 80053ce:	e022      	b.n	8005416 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6919      	ldr	r1, [r3, #16]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	b29b      	uxth	r3, r3
 80053dc:	461a      	mov	r2, r3
 80053de:	4613      	mov	r3, r2
 80053e0:	005b      	lsls	r3, r3, #1
 80053e2:	4413      	add	r3, r2
 80053e4:	2207      	movs	r2, #7
 80053e6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ea:	43da      	mvns	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	400a      	ands	r2, r1
 80053f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6919      	ldr	r1, [r3, #16]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	b29b      	uxth	r3, r3
 8005404:	4618      	mov	r0, r3
 8005406:	4603      	mov	r3, r0
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	4403      	add	r3, r0
 800540c:	409a      	lsls	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b06      	cmp	r3, #6
 800541c:	d824      	bhi.n	8005468 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	4613      	mov	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	3b05      	subs	r3, #5
 8005430:	221f      	movs	r2, #31
 8005432:	fa02 f303 	lsl.w	r3, r2, r3
 8005436:	43da      	mvns	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	400a      	ands	r2, r1
 800543e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	b29b      	uxth	r3, r3
 800544c:	4618      	mov	r0, r3
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	4613      	mov	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	3b05      	subs	r3, #5
 800545a:	fa00 f203 	lsl.w	r2, r0, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	635a      	str	r2, [r3, #52]	; 0x34
 8005466:	e04c      	b.n	8005502 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b0c      	cmp	r3, #12
 800546e:	d824      	bhi.n	80054ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	4613      	mov	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	3b23      	subs	r3, #35	; 0x23
 8005482:	221f      	movs	r2, #31
 8005484:	fa02 f303 	lsl.w	r3, r2, r3
 8005488:	43da      	mvns	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	400a      	ands	r2, r1
 8005490:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	b29b      	uxth	r3, r3
 800549e:	4618      	mov	r0, r3
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	3b23      	subs	r3, #35	; 0x23
 80054ac:	fa00 f203 	lsl.w	r2, r0, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	631a      	str	r2, [r3, #48]	; 0x30
 80054b8:	e023      	b.n	8005502 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	4613      	mov	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	3b41      	subs	r3, #65	; 0x41
 80054cc:	221f      	movs	r2, #31
 80054ce:	fa02 f303 	lsl.w	r3, r2, r3
 80054d2:	43da      	mvns	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	400a      	ands	r2, r1
 80054da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	4618      	mov	r0, r3
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	4613      	mov	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	4413      	add	r3, r2
 80054f4:	3b41      	subs	r3, #65	; 0x41
 80054f6:	fa00 f203 	lsl.w	r2, r0, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	430a      	orrs	r2, r1
 8005500:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005502:	4b29      	ldr	r3, [pc, #164]	; (80055a8 <HAL_ADC_ConfigChannel+0x250>)
 8005504:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a28      	ldr	r2, [pc, #160]	; (80055ac <HAL_ADC_ConfigChannel+0x254>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d10f      	bne.n	8005530 <HAL_ADC_ConfigChannel+0x1d8>
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b12      	cmp	r3, #18
 8005516:	d10b      	bne.n	8005530 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a1d      	ldr	r2, [pc, #116]	; (80055ac <HAL_ADC_ConfigChannel+0x254>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d12b      	bne.n	8005592 <HAL_ADC_ConfigChannel+0x23a>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a1c      	ldr	r2, [pc, #112]	; (80055b0 <HAL_ADC_ConfigChannel+0x258>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d003      	beq.n	800554c <HAL_ADC_ConfigChannel+0x1f4>
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2b11      	cmp	r3, #17
 800554a:	d122      	bne.n	8005592 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a11      	ldr	r2, [pc, #68]	; (80055b0 <HAL_ADC_ConfigChannel+0x258>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d111      	bne.n	8005592 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800556e:	4b11      	ldr	r3, [pc, #68]	; (80055b4 <HAL_ADC_ConfigChannel+0x25c>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a11      	ldr	r2, [pc, #68]	; (80055b8 <HAL_ADC_ConfigChannel+0x260>)
 8005574:	fba2 2303 	umull	r2, r3, r2, r3
 8005578:	0c9a      	lsrs	r2, r3, #18
 800557a:	4613      	mov	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	005b      	lsls	r3, r3, #1
 8005582:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005584:	e002      	b.n	800558c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	3b01      	subs	r3, #1
 800558a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f9      	bne.n	8005586 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	40012300 	.word	0x40012300
 80055ac:	40012000 	.word	0x40012000
 80055b0:	10000012 	.word	0x10000012
 80055b4:	20000088 	.word	0x20000088
 80055b8:	431bde83 	.word	0x431bde83

080055bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055c4:	4b79      	ldr	r3, [pc, #484]	; (80057ac <ADC_Init+0x1f0>)
 80055c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	431a      	orrs	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6859      	ldr	r1, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	021a      	lsls	r2, r3, #8
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005614:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6859      	ldr	r1, [r3, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689a      	ldr	r2, [r3, #8]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005636:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6899      	ldr	r1, [r3, #8]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564e:	4a58      	ldr	r2, [pc, #352]	; (80057b0 <ADC_Init+0x1f4>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d022      	beq.n	800569a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005662:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6899      	ldr	r1, [r3, #8]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005684:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	6899      	ldr	r1, [r3, #8]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	430a      	orrs	r2, r1
 8005696:	609a      	str	r2, [r3, #8]
 8005698:	e00f      	b.n	80056ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80056a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689a      	ldr	r2, [r3, #8]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80056b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0202 	bic.w	r2, r2, #2
 80056c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6899      	ldr	r1, [r3, #8]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	7e1b      	ldrb	r3, [r3, #24]
 80056d4:	005a      	lsls	r2, r3, #1
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01b      	beq.n	8005720 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005706:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6859      	ldr	r1, [r3, #4]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	3b01      	subs	r3, #1
 8005714:	035a      	lsls	r2, r3, #13
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	605a      	str	r2, [r3, #4]
 800571e:	e007      	b.n	8005730 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800572e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800573e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	3b01      	subs	r3, #1
 800574c:	051a      	lsls	r2, r3, #20
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005764:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6899      	ldr	r1, [r3, #8]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005772:	025a      	lsls	r2, r3, #9
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	430a      	orrs	r2, r1
 800577a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689a      	ldr	r2, [r3, #8]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800578a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6899      	ldr	r1, [r3, #8]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	029a      	lsls	r2, r3, #10
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	609a      	str	r2, [r3, #8]
}
 80057a0:	bf00      	nop
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	40012300 	.word	0x40012300
 80057b0:	0f000001 	.word	0x0f000001

080057b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057c4:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <__NVIC_SetPriorityGrouping+0x44>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80057d0:	4013      	ands	r3, r2
 80057d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80057e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057e6:	4a04      	ldr	r2, [pc, #16]	; (80057f8 <__NVIC_SetPriorityGrouping+0x44>)
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	60d3      	str	r3, [r2, #12]
}
 80057ec:	bf00      	nop
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	e000ed00 	.word	0xe000ed00

080057fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005800:	4b04      	ldr	r3, [pc, #16]	; (8005814 <__NVIC_GetPriorityGrouping+0x18>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	0a1b      	lsrs	r3, r3, #8
 8005806:	f003 0307 	and.w	r3, r3, #7
}
 800580a:	4618      	mov	r0, r3
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	e000ed00 	.word	0xe000ed00

08005818 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005826:	2b00      	cmp	r3, #0
 8005828:	db0b      	blt.n	8005842 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	f003 021f 	and.w	r2, r3, #31
 8005830:	4907      	ldr	r1, [pc, #28]	; (8005850 <__NVIC_EnableIRQ+0x38>)
 8005832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	2001      	movs	r0, #1
 800583a:	fa00 f202 	lsl.w	r2, r0, r2
 800583e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005842:	bf00      	nop
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	e000e100 	.word	0xe000e100

08005854 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	4603      	mov	r3, r0
 800585c:	6039      	str	r1, [r7, #0]
 800585e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005864:	2b00      	cmp	r3, #0
 8005866:	db0a      	blt.n	800587e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	b2da      	uxtb	r2, r3
 800586c:	490c      	ldr	r1, [pc, #48]	; (80058a0 <__NVIC_SetPriority+0x4c>)
 800586e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005872:	0112      	lsls	r2, r2, #4
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	440b      	add	r3, r1
 8005878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800587c:	e00a      	b.n	8005894 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	b2da      	uxtb	r2, r3
 8005882:	4908      	ldr	r1, [pc, #32]	; (80058a4 <__NVIC_SetPriority+0x50>)
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	f003 030f 	and.w	r3, r3, #15
 800588a:	3b04      	subs	r3, #4
 800588c:	0112      	lsls	r2, r2, #4
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	440b      	add	r3, r1
 8005892:	761a      	strb	r2, [r3, #24]
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr
 80058a0:	e000e100 	.word	0xe000e100
 80058a4:	e000ed00 	.word	0xe000ed00

080058a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b089      	sub	sp, #36	; 0x24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f1c3 0307 	rsb	r3, r3, #7
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	bf28      	it	cs
 80058c6:	2304      	movcs	r3, #4
 80058c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	3304      	adds	r3, #4
 80058ce:	2b06      	cmp	r3, #6
 80058d0:	d902      	bls.n	80058d8 <NVIC_EncodePriority+0x30>
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	3b03      	subs	r3, #3
 80058d6:	e000      	b.n	80058da <NVIC_EncodePriority+0x32>
 80058d8:	2300      	movs	r3, #0
 80058da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	fa02 f303 	lsl.w	r3, r2, r3
 80058e6:	43da      	mvns	r2, r3
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	401a      	ands	r2, r3
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	fa01 f303 	lsl.w	r3, r1, r3
 80058fa:	43d9      	mvns	r1, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005900:	4313      	orrs	r3, r2
         );
}
 8005902:	4618      	mov	r0, r3
 8005904:	3724      	adds	r7, #36	; 0x24
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
	...

08005910 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	3b01      	subs	r3, #1
 800591c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005920:	d301      	bcc.n	8005926 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005922:	2301      	movs	r3, #1
 8005924:	e00f      	b.n	8005946 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005926:	4a0a      	ldr	r2, [pc, #40]	; (8005950 <SysTick_Config+0x40>)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3b01      	subs	r3, #1
 800592c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800592e:	210f      	movs	r1, #15
 8005930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005934:	f7ff ff8e 	bl	8005854 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005938:	4b05      	ldr	r3, [pc, #20]	; (8005950 <SysTick_Config+0x40>)
 800593a:	2200      	movs	r2, #0
 800593c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800593e:	4b04      	ldr	r3, [pc, #16]	; (8005950 <SysTick_Config+0x40>)
 8005940:	2207      	movs	r2, #7
 8005942:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	e000e010 	.word	0xe000e010

08005954 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff ff29 	bl	80057b4 <__NVIC_SetPriorityGrouping>
}
 8005962:	bf00      	nop
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800596a:	b580      	push	{r7, lr}
 800596c:	b086      	sub	sp, #24
 800596e:	af00      	add	r7, sp, #0
 8005970:	4603      	mov	r3, r0
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	607a      	str	r2, [r7, #4]
 8005976:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005978:	2300      	movs	r3, #0
 800597a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800597c:	f7ff ff3e 	bl	80057fc <__NVIC_GetPriorityGrouping>
 8005980:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	6978      	ldr	r0, [r7, #20]
 8005988:	f7ff ff8e 	bl	80058a8 <NVIC_EncodePriority>
 800598c:	4602      	mov	r2, r0
 800598e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005992:	4611      	mov	r1, r2
 8005994:	4618      	mov	r0, r3
 8005996:	f7ff ff5d 	bl	8005854 <__NVIC_SetPriority>
}
 800599a:	bf00      	nop
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b082      	sub	sp, #8
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	4603      	mov	r3, r0
 80059aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff ff31 	bl	8005818 <__NVIC_EnableIRQ>
}
 80059b6:	bf00      	nop
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b082      	sub	sp, #8
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7ff ffa2 	bl	8005910 <SysTick_Config>
 80059cc:	4603      	mov	r3, r0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
	...

080059d8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80059ea:	4b23      	ldr	r3, [pc, #140]	; (8005a78 <HAL_FLASH_Program+0xa0>)
 80059ec:	7e1b      	ldrb	r3, [r3, #24]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d101      	bne.n	80059f6 <HAL_FLASH_Program+0x1e>
 80059f2:	2302      	movs	r3, #2
 80059f4:	e03b      	b.n	8005a6e <HAL_FLASH_Program+0x96>
 80059f6:	4b20      	ldr	r3, [pc, #128]	; (8005a78 <HAL_FLASH_Program+0xa0>)
 80059f8:	2201      	movs	r2, #1
 80059fa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a00:	f000 f87c 	bl	8005afc <FLASH_WaitForLastOperation>
 8005a04:	4603      	mov	r3, r0
 8005a06:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005a08:	7dfb      	ldrb	r3, [r7, #23]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d12b      	bne.n	8005a66 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d105      	bne.n	8005a20 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8005a14:	783b      	ldrb	r3, [r7, #0]
 8005a16:	4619      	mov	r1, r3
 8005a18:	68b8      	ldr	r0, [r7, #8]
 8005a1a:	f000 f927 	bl	8005c6c <FLASH_Program_Byte>
 8005a1e:	e016      	b.n	8005a4e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d105      	bne.n	8005a32 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005a26:	883b      	ldrh	r3, [r7, #0]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	68b8      	ldr	r0, [r7, #8]
 8005a2c:	f000 f8fa 	bl	8005c24 <FLASH_Program_HalfWord>
 8005a30:	e00d      	b.n	8005a4e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d105      	bne.n	8005a44 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	4619      	mov	r1, r3
 8005a3c:	68b8      	ldr	r0, [r7, #8]
 8005a3e:	f000 f8cf 	bl	8005be0 <FLASH_Program_Word>
 8005a42:	e004      	b.n	8005a4e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8005a44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a48:	68b8      	ldr	r0, [r7, #8]
 8005a4a:	f000 f897 	bl	8005b7c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a4e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a52:	f000 f853 	bl	8005afc <FLASH_WaitForLastOperation>
 8005a56:	4603      	mov	r3, r0
 8005a58:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8005a5a:	4b08      	ldr	r3, [pc, #32]	; (8005a7c <HAL_FLASH_Program+0xa4>)
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	4a07      	ldr	r2, [pc, #28]	; (8005a7c <HAL_FLASH_Program+0xa4>)
 8005a60:	f023 0301 	bic.w	r3, r3, #1
 8005a64:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005a66:	4b04      	ldr	r3, [pc, #16]	; (8005a78 <HAL_FLASH_Program+0xa0>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8005a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3718      	adds	r7, #24
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	20002df4 	.word	0x20002df4
 8005a7c:	40023c00 	.word	0x40023c00

08005a80 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005a8a:	4b0b      	ldr	r3, [pc, #44]	; (8005ab8 <HAL_FLASH_Unlock+0x38>)
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	da0b      	bge.n	8005aaa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005a92:	4b09      	ldr	r3, [pc, #36]	; (8005ab8 <HAL_FLASH_Unlock+0x38>)
 8005a94:	4a09      	ldr	r2, [pc, #36]	; (8005abc <HAL_FLASH_Unlock+0x3c>)
 8005a96:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005a98:	4b07      	ldr	r3, [pc, #28]	; (8005ab8 <HAL_FLASH_Unlock+0x38>)
 8005a9a:	4a09      	ldr	r2, [pc, #36]	; (8005ac0 <HAL_FLASH_Unlock+0x40>)
 8005a9c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005a9e:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <HAL_FLASH_Unlock+0x38>)
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	da01      	bge.n	8005aaa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005aaa:	79fb      	ldrb	r3, [r7, #7]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	40023c00 	.word	0x40023c00
 8005abc:	45670123 	.word	0x45670123
 8005ac0:	cdef89ab 	.word	0xcdef89ab

08005ac4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005ac8:	4b05      	ldr	r3, [pc, #20]	; (8005ae0 <HAL_FLASH_Lock+0x1c>)
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	4a04      	ldr	r2, [pc, #16]	; (8005ae0 <HAL_FLASH_Lock+0x1c>)
 8005ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ad2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	40023c00 	.word	0x40023c00

08005ae4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8005ae8:	4b03      	ldr	r3, [pc, #12]	; (8005af8 <HAL_FLASH_GetError+0x14>)
 8005aea:	69db      	ldr	r3, [r3, #28]
}  
 8005aec:	4618      	mov	r0, r3
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	20002df4 	.word	0x20002df4

08005afc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b08:	4b1a      	ldr	r3, [pc, #104]	; (8005b74 <FLASH_WaitForLastOperation+0x78>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005b0e:	f7ff fbd3 	bl	80052b8 <HAL_GetTick>
 8005b12:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005b14:	e010      	b.n	8005b38 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b1c:	d00c      	beq.n	8005b38 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d007      	beq.n	8005b34 <FLASH_WaitForLastOperation+0x38>
 8005b24:	f7ff fbc8 	bl	80052b8 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d201      	bcs.n	8005b38 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e019      	b.n	8005b6c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005b38:	4b0f      	ldr	r3, [pc, #60]	; (8005b78 <FLASH_WaitForLastOperation+0x7c>)
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e8      	bne.n	8005b16 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005b44:	4b0c      	ldr	r3, [pc, #48]	; (8005b78 <FLASH_WaitForLastOperation+0x7c>)
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005b50:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <FLASH_WaitForLastOperation+0x7c>)
 8005b52:	2201      	movs	r2, #1
 8005b54:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005b56:	4b08      	ldr	r3, [pc, #32]	; (8005b78 <FLASH_WaitForLastOperation+0x7c>)
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005b62:	f000 f8a5 	bl	8005cb0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e000      	b.n	8005b6c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
  
}  
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	20002df4 	.word	0x20002df4
 8005b78:	40023c00 	.word	0x40023c00

08005b7c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b88:	4b14      	ldr	r3, [pc, #80]	; (8005bdc <FLASH_Program_DoubleWord+0x60>)
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	4a13      	ldr	r2, [pc, #76]	; (8005bdc <FLASH_Program_DoubleWord+0x60>)
 8005b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005b94:	4b11      	ldr	r3, [pc, #68]	; (8005bdc <FLASH_Program_DoubleWord+0x60>)
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	4a10      	ldr	r2, [pc, #64]	; (8005bdc <FLASH_Program_DoubleWord+0x60>)
 8005b9a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005b9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005ba0:	4b0e      	ldr	r3, [pc, #56]	; (8005bdc <FLASH_Program_DoubleWord+0x60>)
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	4a0d      	ldr	r2, [pc, #52]	; (8005bdc <FLASH_Program_DoubleWord+0x60>)
 8005ba6:	f043 0301 	orr.w	r3, r3, #1
 8005baa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005bb2:	f3bf 8f6f 	isb	sy
}
 8005bb6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005bb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	000a      	movs	r2, r1
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	68f9      	ldr	r1, [r7, #12]
 8005bca:	3104      	adds	r1, #4
 8005bcc:	4613      	mov	r3, r2
 8005bce:	600b      	str	r3, [r1, #0]
}
 8005bd0:	bf00      	nop
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	40023c00 	.word	0x40023c00

08005be0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005bea:	4b0d      	ldr	r3, [pc, #52]	; (8005c20 <FLASH_Program_Word+0x40>)
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	4a0c      	ldr	r2, [pc, #48]	; (8005c20 <FLASH_Program_Word+0x40>)
 8005bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005bf6:	4b0a      	ldr	r3, [pc, #40]	; (8005c20 <FLASH_Program_Word+0x40>)
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	4a09      	ldr	r2, [pc, #36]	; (8005c20 <FLASH_Program_Word+0x40>)
 8005bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005c02:	4b07      	ldr	r3, [pc, #28]	; (8005c20 <FLASH_Program_Word+0x40>)
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	4a06      	ldr	r2, [pc, #24]	; (8005c20 <FLASH_Program_Word+0x40>)
 8005c08:	f043 0301 	orr.w	r3, r3, #1
 8005c0c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	601a      	str	r2, [r3, #0]
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	40023c00 	.word	0x40023c00

08005c24 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005c30:	4b0d      	ldr	r3, [pc, #52]	; (8005c68 <FLASH_Program_HalfWord+0x44>)
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	4a0c      	ldr	r2, [pc, #48]	; (8005c68 <FLASH_Program_HalfWord+0x44>)
 8005c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005c3c:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <FLASH_Program_HalfWord+0x44>)
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	4a09      	ldr	r2, [pc, #36]	; (8005c68 <FLASH_Program_HalfWord+0x44>)
 8005c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005c48:	4b07      	ldr	r3, [pc, #28]	; (8005c68 <FLASH_Program_HalfWord+0x44>)
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	4a06      	ldr	r2, [pc, #24]	; (8005c68 <FLASH_Program_HalfWord+0x44>)
 8005c4e:	f043 0301 	orr.w	r3, r3, #1
 8005c52:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	887a      	ldrh	r2, [r7, #2]
 8005c58:	801a      	strh	r2, [r3, #0]
}
 8005c5a:	bf00      	nop
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	40023c00 	.word	0x40023c00

08005c6c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	460b      	mov	r3, r1
 8005c76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005c78:	4b0c      	ldr	r3, [pc, #48]	; (8005cac <FLASH_Program_Byte+0x40>)
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	4a0b      	ldr	r2, [pc, #44]	; (8005cac <FLASH_Program_Byte+0x40>)
 8005c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005c84:	4b09      	ldr	r3, [pc, #36]	; (8005cac <FLASH_Program_Byte+0x40>)
 8005c86:	4a09      	ldr	r2, [pc, #36]	; (8005cac <FLASH_Program_Byte+0x40>)
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005c8c:	4b07      	ldr	r3, [pc, #28]	; (8005cac <FLASH_Program_Byte+0x40>)
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	4a06      	ldr	r2, [pc, #24]	; (8005cac <FLASH_Program_Byte+0x40>)
 8005c92:	f043 0301 	orr.w	r3, r3, #1
 8005c96:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	78fa      	ldrb	r2, [r7, #3]
 8005c9c:	701a      	strb	r2, [r3, #0]
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	40023c00 	.word	0x40023c00

08005cb0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005cb0:	b480      	push	{r7}
 8005cb2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005cb4:	4b2f      	ldr	r3, [pc, #188]	; (8005d74 <FLASH_SetErrorCode+0xc4>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f003 0310 	and.w	r3, r3, #16
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d008      	beq.n	8005cd2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005cc0:	4b2d      	ldr	r3, [pc, #180]	; (8005d78 <FLASH_SetErrorCode+0xc8>)
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	f043 0310 	orr.w	r3, r3, #16
 8005cc8:	4a2b      	ldr	r2, [pc, #172]	; (8005d78 <FLASH_SetErrorCode+0xc8>)
 8005cca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005ccc:	4b29      	ldr	r3, [pc, #164]	; (8005d74 <FLASH_SetErrorCode+0xc4>)
 8005cce:	2210      	movs	r2, #16
 8005cd0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005cd2:	4b28      	ldr	r3, [pc, #160]	; (8005d74 <FLASH_SetErrorCode+0xc4>)
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f003 0320 	and.w	r3, r3, #32
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d008      	beq.n	8005cf0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005cde:	4b26      	ldr	r3, [pc, #152]	; (8005d78 <FLASH_SetErrorCode+0xc8>)
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	f043 0308 	orr.w	r3, r3, #8
 8005ce6:	4a24      	ldr	r2, [pc, #144]	; (8005d78 <FLASH_SetErrorCode+0xc8>)
 8005ce8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005cea:	4b22      	ldr	r3, [pc, #136]	; (8005d74 <FLASH_SetErrorCode+0xc4>)
 8005cec:	2220      	movs	r2, #32
 8005cee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005cf0:	4b20      	ldr	r3, [pc, #128]	; (8005d74 <FLASH_SetErrorCode+0xc4>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d008      	beq.n	8005d0e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005cfc:	4b1e      	ldr	r3, [pc, #120]	; (8005d78 <FLASH_SetErrorCode+0xc8>)
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	f043 0304 	orr.w	r3, r3, #4
 8005d04:	4a1c      	ldr	r2, [pc, #112]	; (8005d78 <FLASH_SetErrorCode+0xc8>)
 8005d06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005d08:	4b1a      	ldr	r3, [pc, #104]	; (8005d74 <FLASH_SetErrorCode+0xc4>)
 8005d0a:	2240      	movs	r2, #64	; 0x40
 8005d0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005d0e:	4b19      	ldr	r3, [pc, #100]	; (8005d74 <FLASH_SetErrorCode+0xc4>)
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d008      	beq.n	8005d2c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005d1a:	4b17      	ldr	r3, [pc, #92]	; (8005d78 <FLASH_SetErrorCode+0xc8>)
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	f043 0302 	orr.w	r3, r3, #2
 8005d22:	4a15      	ldr	r2, [pc, #84]	; (8005d78 <FLASH_SetErrorCode+0xc8>)
 8005d24:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005d26:	4b13      	ldr	r3, [pc, #76]	; (8005d74 <FLASH_SetErrorCode+0xc4>)
 8005d28:	2280      	movs	r2, #128	; 0x80
 8005d2a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005d2c:	4b11      	ldr	r3, [pc, #68]	; (8005d74 <FLASH_SetErrorCode+0xc4>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d009      	beq.n	8005d4c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005d38:	4b0f      	ldr	r3, [pc, #60]	; (8005d78 <FLASH_SetErrorCode+0xc8>)
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	f043 0301 	orr.w	r3, r3, #1
 8005d40:	4a0d      	ldr	r2, [pc, #52]	; (8005d78 <FLASH_SetErrorCode+0xc8>)
 8005d42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005d44:	4b0b      	ldr	r3, [pc, #44]	; (8005d74 <FLASH_SetErrorCode+0xc4>)
 8005d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d4a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005d4c:	4b09      	ldr	r3, [pc, #36]	; (8005d74 <FLASH_SetErrorCode+0xc4>)
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d008      	beq.n	8005d6a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005d58:	4b07      	ldr	r3, [pc, #28]	; (8005d78 <FLASH_SetErrorCode+0xc8>)
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	f043 0320 	orr.w	r3, r3, #32
 8005d60:	4a05      	ldr	r2, [pc, #20]	; (8005d78 <FLASH_SetErrorCode+0xc8>)
 8005d62:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005d64:	4b03      	ldr	r3, [pc, #12]	; (8005d74 <FLASH_SetErrorCode+0xc4>)
 8005d66:	2202      	movs	r2, #2
 8005d68:	60da      	str	r2, [r3, #12]
  }
}
 8005d6a:	bf00      	nop
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	40023c00 	.word	0x40023c00
 8005d78:	20002df4 	.word	0x20002df4

08005d7c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005d8e:	4b31      	ldr	r3, [pc, #196]	; (8005e54 <HAL_FLASHEx_Erase+0xd8>)
 8005d90:	7e1b      	ldrb	r3, [r3, #24]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d101      	bne.n	8005d9a <HAL_FLASHEx_Erase+0x1e>
 8005d96:	2302      	movs	r3, #2
 8005d98:	e058      	b.n	8005e4c <HAL_FLASHEx_Erase+0xd0>
 8005d9a:	4b2e      	ldr	r3, [pc, #184]	; (8005e54 <HAL_FLASHEx_Erase+0xd8>)
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005da0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005da4:	f7ff feaa 	bl	8005afc <FLASH_WaitForLastOperation>
 8005da8:	4603      	mov	r3, r0
 8005daa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d148      	bne.n	8005e44 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005db8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d115      	bne.n	8005dee <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	4619      	mov	r1, r3
 8005dce:	4610      	mov	r0, r2
 8005dd0:	f000 f844 	bl	8005e5c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005dd4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005dd8:	f7ff fe90 	bl	8005afc <FLASH_WaitForLastOperation>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005de0:	4b1d      	ldr	r3, [pc, #116]	; (8005e58 <HAL_FLASHEx_Erase+0xdc>)
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	4a1c      	ldr	r2, [pc, #112]	; (8005e58 <HAL_FLASHEx_Erase+0xdc>)
 8005de6:	f023 0304 	bic.w	r3, r3, #4
 8005dea:	6113      	str	r3, [r2, #16]
 8005dec:	e028      	b.n	8005e40 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	60bb      	str	r3, [r7, #8]
 8005df4:	e01c      	b.n	8005e30 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	68b8      	ldr	r0, [r7, #8]
 8005e00:	f000 f850 	bl	8005ea4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005e04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005e08:	f7ff fe78 	bl	8005afc <FLASH_WaitForLastOperation>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005e10:	4b11      	ldr	r3, [pc, #68]	; (8005e58 <HAL_FLASHEx_Erase+0xdc>)
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	4a10      	ldr	r2, [pc, #64]	; (8005e58 <HAL_FLASHEx_Erase+0xdc>)
 8005e16:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8005e1a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	601a      	str	r2, [r3, #0]
          break;
 8005e28:	e00a      	b.n	8005e40 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	60bb      	str	r3, [r7, #8]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68da      	ldr	r2, [r3, #12]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	4413      	add	r3, r2
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d3da      	bcc.n	8005df6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005e40:	f000 f878 	bl	8005f34 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005e44:	4b03      	ldr	r3, [pc, #12]	; (8005e54 <HAL_FLASHEx_Erase+0xd8>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	761a      	strb	r2, [r3, #24]

  return status;
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	20002df4 	.word	0x20002df4
 8005e58:	40023c00 	.word	0x40023c00

08005e5c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	4603      	mov	r3, r0
 8005e64:	6039      	str	r1, [r7, #0]
 8005e66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005e68:	4b0d      	ldr	r3, [pc, #52]	; (8005ea0 <FLASH_MassErase+0x44>)
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	4a0c      	ldr	r2, [pc, #48]	; (8005ea0 <FLASH_MassErase+0x44>)
 8005e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005e74:	4b0a      	ldr	r3, [pc, #40]	; (8005ea0 <FLASH_MassErase+0x44>)
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	4a09      	ldr	r2, [pc, #36]	; (8005ea0 <FLASH_MassErase+0x44>)
 8005e7a:	f043 0304 	orr.w	r3, r3, #4
 8005e7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005e80:	4b07      	ldr	r3, [pc, #28]	; (8005ea0 <FLASH_MassErase+0x44>)
 8005e82:	691a      	ldr	r2, [r3, #16]
 8005e84:	79fb      	ldrb	r3, [r7, #7]
 8005e86:	021b      	lsls	r3, r3, #8
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	4a05      	ldr	r2, [pc, #20]	; (8005ea0 <FLASH_MassErase+0x44>)
 8005e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e90:	6113      	str	r3, [r2, #16]
}
 8005e92:	bf00      	nop
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	40023c00 	.word	0x40023c00

08005ea4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	460b      	mov	r3, r1
 8005eae:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005eb4:	78fb      	ldrb	r3, [r7, #3]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d102      	bne.n	8005ec0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	e010      	b.n	8005ee2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005ec0:	78fb      	ldrb	r3, [r7, #3]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d103      	bne.n	8005ece <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005ec6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	e009      	b.n	8005ee2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005ece:	78fb      	ldrb	r3, [r7, #3]
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d103      	bne.n	8005edc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	e002      	b.n	8005ee2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005edc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005ee0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005ee2:	4b13      	ldr	r3, [pc, #76]	; (8005f30 <FLASH_Erase_Sector+0x8c>)
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	4a12      	ldr	r2, [pc, #72]	; (8005f30 <FLASH_Erase_Sector+0x8c>)
 8005ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005eee:	4b10      	ldr	r3, [pc, #64]	; (8005f30 <FLASH_Erase_Sector+0x8c>)
 8005ef0:	691a      	ldr	r2, [r3, #16]
 8005ef2:	490f      	ldr	r1, [pc, #60]	; (8005f30 <FLASH_Erase_Sector+0x8c>)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005efa:	4b0d      	ldr	r3, [pc, #52]	; (8005f30 <FLASH_Erase_Sector+0x8c>)
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	4a0c      	ldr	r2, [pc, #48]	; (8005f30 <FLASH_Erase_Sector+0x8c>)
 8005f00:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005f04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005f06:	4b0a      	ldr	r3, [pc, #40]	; (8005f30 <FLASH_Erase_Sector+0x8c>)
 8005f08:	691a      	ldr	r2, [r3, #16]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	4a07      	ldr	r2, [pc, #28]	; (8005f30 <FLASH_Erase_Sector+0x8c>)
 8005f12:	f043 0302 	orr.w	r3, r3, #2
 8005f16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005f18:	4b05      	ldr	r3, [pc, #20]	; (8005f30 <FLASH_Erase_Sector+0x8c>)
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	4a04      	ldr	r2, [pc, #16]	; (8005f30 <FLASH_Erase_Sector+0x8c>)
 8005f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f22:	6113      	str	r3, [r2, #16]
}
 8005f24:	bf00      	nop
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	40023c00 	.word	0x40023c00

08005f34 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005f34:	b480      	push	{r7}
 8005f36:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005f38:	4b20      	ldr	r3, [pc, #128]	; (8005fbc <FLASH_FlushCaches+0x88>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d017      	beq.n	8005f74 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005f44:	4b1d      	ldr	r3, [pc, #116]	; (8005fbc <FLASH_FlushCaches+0x88>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a1c      	ldr	r2, [pc, #112]	; (8005fbc <FLASH_FlushCaches+0x88>)
 8005f4a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f4e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005f50:	4b1a      	ldr	r3, [pc, #104]	; (8005fbc <FLASH_FlushCaches+0x88>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a19      	ldr	r2, [pc, #100]	; (8005fbc <FLASH_FlushCaches+0x88>)
 8005f56:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005f5a:	6013      	str	r3, [r2, #0]
 8005f5c:	4b17      	ldr	r3, [pc, #92]	; (8005fbc <FLASH_FlushCaches+0x88>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a16      	ldr	r2, [pc, #88]	; (8005fbc <FLASH_FlushCaches+0x88>)
 8005f62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f66:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005f68:	4b14      	ldr	r3, [pc, #80]	; (8005fbc <FLASH_FlushCaches+0x88>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a13      	ldr	r2, [pc, #76]	; (8005fbc <FLASH_FlushCaches+0x88>)
 8005f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f72:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005f74:	4b11      	ldr	r3, [pc, #68]	; (8005fbc <FLASH_FlushCaches+0x88>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d017      	beq.n	8005fb0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005f80:	4b0e      	ldr	r3, [pc, #56]	; (8005fbc <FLASH_FlushCaches+0x88>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a0d      	ldr	r2, [pc, #52]	; (8005fbc <FLASH_FlushCaches+0x88>)
 8005f86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f8a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005f8c:	4b0b      	ldr	r3, [pc, #44]	; (8005fbc <FLASH_FlushCaches+0x88>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a0a      	ldr	r2, [pc, #40]	; (8005fbc <FLASH_FlushCaches+0x88>)
 8005f92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	4b08      	ldr	r3, [pc, #32]	; (8005fbc <FLASH_FlushCaches+0x88>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a07      	ldr	r2, [pc, #28]	; (8005fbc <FLASH_FlushCaches+0x88>)
 8005f9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fa2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005fa4:	4b05      	ldr	r3, [pc, #20]	; (8005fbc <FLASH_FlushCaches+0x88>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a04      	ldr	r2, [pc, #16]	; (8005fbc <FLASH_FlushCaches+0x88>)
 8005faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fae:	6013      	str	r3, [r2, #0]
  }
}
 8005fb0:	bf00      	nop
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	40023c00 	.word	0x40023c00

08005fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b089      	sub	sp, #36	; 0x24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	61fb      	str	r3, [r7, #28]
 8005fda:	e159      	b.n	8006290 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005fdc:	2201      	movs	r2, #1
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	4013      	ands	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	f040 8148 	bne.w	800628a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	2b01      	cmp	r3, #1
 8006004:	d005      	beq.n	8006012 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800600e:	2b02      	cmp	r3, #2
 8006010:	d130      	bne.n	8006074 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	005b      	lsls	r3, r3, #1
 800601c:	2203      	movs	r2, #3
 800601e:	fa02 f303 	lsl.w	r3, r2, r3
 8006022:	43db      	mvns	r3, r3
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	4013      	ands	r3, r2
 8006028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	005b      	lsls	r3, r3, #1
 8006032:	fa02 f303 	lsl.w	r3, r2, r3
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	4313      	orrs	r3, r2
 800603a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006048:	2201      	movs	r2, #1
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	fa02 f303 	lsl.w	r3, r2, r3
 8006050:	43db      	mvns	r3, r3
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	4013      	ands	r3, r2
 8006056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	091b      	lsrs	r3, r3, #4
 800605e:	f003 0201 	and.w	r2, r3, #1
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	fa02 f303 	lsl.w	r3, r2, r3
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	4313      	orrs	r3, r2
 800606c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f003 0303 	and.w	r3, r3, #3
 800607c:	2b03      	cmp	r3, #3
 800607e:	d017      	beq.n	80060b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	2203      	movs	r2, #3
 800608c:	fa02 f303 	lsl.w	r3, r2, r3
 8006090:	43db      	mvns	r3, r3
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	4013      	ands	r3, r2
 8006096:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	689a      	ldr	r2, [r3, #8]
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	fa02 f303 	lsl.w	r3, r2, r3
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f003 0303 	and.w	r3, r3, #3
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d123      	bne.n	8006104 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	08da      	lsrs	r2, r3, #3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3208      	adds	r2, #8
 80060c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	f003 0307 	and.w	r3, r3, #7
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	220f      	movs	r2, #15
 80060d4:	fa02 f303 	lsl.w	r3, r2, r3
 80060d8:	43db      	mvns	r3, r3
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	4013      	ands	r3, r2
 80060de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	691a      	ldr	r2, [r3, #16]
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	fa02 f303 	lsl.w	r3, r2, r3
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	08da      	lsrs	r2, r3, #3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	3208      	adds	r2, #8
 80060fe:	69b9      	ldr	r1, [r7, #24]
 8006100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	005b      	lsls	r3, r3, #1
 800610e:	2203      	movs	r2, #3
 8006110:	fa02 f303 	lsl.w	r3, r2, r3
 8006114:	43db      	mvns	r3, r3
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	4013      	ands	r3, r2
 800611a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f003 0203 	and.w	r2, r3, #3
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	fa02 f303 	lsl.w	r3, r2, r3
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	4313      	orrs	r3, r2
 8006130:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 80a2 	beq.w	800628a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006146:	2300      	movs	r3, #0
 8006148:	60fb      	str	r3, [r7, #12]
 800614a:	4b57      	ldr	r3, [pc, #348]	; (80062a8 <HAL_GPIO_Init+0x2e8>)
 800614c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800614e:	4a56      	ldr	r2, [pc, #344]	; (80062a8 <HAL_GPIO_Init+0x2e8>)
 8006150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006154:	6453      	str	r3, [r2, #68]	; 0x44
 8006156:	4b54      	ldr	r3, [pc, #336]	; (80062a8 <HAL_GPIO_Init+0x2e8>)
 8006158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800615e:	60fb      	str	r3, [r7, #12]
 8006160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006162:	4a52      	ldr	r2, [pc, #328]	; (80062ac <HAL_GPIO_Init+0x2ec>)
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	089b      	lsrs	r3, r3, #2
 8006168:	3302      	adds	r3, #2
 800616a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800616e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	f003 0303 	and.w	r3, r3, #3
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	220f      	movs	r2, #15
 800617a:	fa02 f303 	lsl.w	r3, r2, r3
 800617e:	43db      	mvns	r3, r3
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	4013      	ands	r3, r2
 8006184:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a49      	ldr	r2, [pc, #292]	; (80062b0 <HAL_GPIO_Init+0x2f0>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d019      	beq.n	80061c2 <HAL_GPIO_Init+0x202>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a48      	ldr	r2, [pc, #288]	; (80062b4 <HAL_GPIO_Init+0x2f4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d013      	beq.n	80061be <HAL_GPIO_Init+0x1fe>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a47      	ldr	r2, [pc, #284]	; (80062b8 <HAL_GPIO_Init+0x2f8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d00d      	beq.n	80061ba <HAL_GPIO_Init+0x1fa>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a46      	ldr	r2, [pc, #280]	; (80062bc <HAL_GPIO_Init+0x2fc>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d007      	beq.n	80061b6 <HAL_GPIO_Init+0x1f6>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a45      	ldr	r2, [pc, #276]	; (80062c0 <HAL_GPIO_Init+0x300>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d101      	bne.n	80061b2 <HAL_GPIO_Init+0x1f2>
 80061ae:	2304      	movs	r3, #4
 80061b0:	e008      	b.n	80061c4 <HAL_GPIO_Init+0x204>
 80061b2:	2307      	movs	r3, #7
 80061b4:	e006      	b.n	80061c4 <HAL_GPIO_Init+0x204>
 80061b6:	2303      	movs	r3, #3
 80061b8:	e004      	b.n	80061c4 <HAL_GPIO_Init+0x204>
 80061ba:	2302      	movs	r3, #2
 80061bc:	e002      	b.n	80061c4 <HAL_GPIO_Init+0x204>
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <HAL_GPIO_Init+0x204>
 80061c2:	2300      	movs	r3, #0
 80061c4:	69fa      	ldr	r2, [r7, #28]
 80061c6:	f002 0203 	and.w	r2, r2, #3
 80061ca:	0092      	lsls	r2, r2, #2
 80061cc:	4093      	lsls	r3, r2
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061d4:	4935      	ldr	r1, [pc, #212]	; (80062ac <HAL_GPIO_Init+0x2ec>)
 80061d6:	69fb      	ldr	r3, [r7, #28]
 80061d8:	089b      	lsrs	r3, r3, #2
 80061da:	3302      	adds	r3, #2
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80061e2:	4b38      	ldr	r3, [pc, #224]	; (80062c4 <HAL_GPIO_Init+0x304>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	43db      	mvns	r3, r3
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	4013      	ands	r3, r2
 80061f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	4313      	orrs	r3, r2
 8006204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006206:	4a2f      	ldr	r2, [pc, #188]	; (80062c4 <HAL_GPIO_Init+0x304>)
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800620c:	4b2d      	ldr	r3, [pc, #180]	; (80062c4 <HAL_GPIO_Init+0x304>)
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	43db      	mvns	r3, r3
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	4013      	ands	r3, r2
 800621a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006228:	69ba      	ldr	r2, [r7, #24]
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	4313      	orrs	r3, r2
 800622e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006230:	4a24      	ldr	r2, [pc, #144]	; (80062c4 <HAL_GPIO_Init+0x304>)
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006236:	4b23      	ldr	r3, [pc, #140]	; (80062c4 <HAL_GPIO_Init+0x304>)
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	43db      	mvns	r3, r3
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	4013      	ands	r3, r2
 8006244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	4313      	orrs	r3, r2
 8006258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800625a:	4a1a      	ldr	r2, [pc, #104]	; (80062c4 <HAL_GPIO_Init+0x304>)
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006260:	4b18      	ldr	r3, [pc, #96]	; (80062c4 <HAL_GPIO_Init+0x304>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	43db      	mvns	r3, r3
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	4013      	ands	r3, r2
 800626e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006284:	4a0f      	ldr	r2, [pc, #60]	; (80062c4 <HAL_GPIO_Init+0x304>)
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	3301      	adds	r3, #1
 800628e:	61fb      	str	r3, [r7, #28]
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	2b0f      	cmp	r3, #15
 8006294:	f67f aea2 	bls.w	8005fdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006298:	bf00      	nop
 800629a:	bf00      	nop
 800629c:	3724      	adds	r7, #36	; 0x24
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	40023800 	.word	0x40023800
 80062ac:	40013800 	.word	0x40013800
 80062b0:	40020000 	.word	0x40020000
 80062b4:	40020400 	.word	0x40020400
 80062b8:	40020800 	.word	0x40020800
 80062bc:	40020c00 	.word	0x40020c00
 80062c0:	40021000 	.word	0x40021000
 80062c4:	40013c00 	.word	0x40013c00

080062c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	460b      	mov	r3, r1
 80062d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	691a      	ldr	r2, [r3, #16]
 80062d8:	887b      	ldrh	r3, [r7, #2]
 80062da:	4013      	ands	r3, r2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80062e0:	2301      	movs	r3, #1
 80062e2:	73fb      	strb	r3, [r7, #15]
 80062e4:	e001      	b.n	80062ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062e6:	2300      	movs	r3, #0
 80062e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3714      	adds	r7, #20
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	460b      	mov	r3, r1
 8006302:	807b      	strh	r3, [r7, #2]
 8006304:	4613      	mov	r3, r2
 8006306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006308:	787b      	ldrb	r3, [r7, #1]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800630e:	887a      	ldrh	r2, [r7, #2]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006314:	e003      	b.n	800631e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006316:	887b      	ldrh	r3, [r7, #2]
 8006318:	041a      	lsls	r2, r3, #16
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	619a      	str	r2, [r3, #24]
}
 800631e:	bf00      	nop
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
	...

0800632c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e12b      	b.n	8006596 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006344:	b2db      	uxtb	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d106      	bne.n	8006358 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7fe fa5e 	bl	8004814 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2224      	movs	r2, #36	; 0x24
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f022 0201 	bic.w	r2, r2, #1
 800636e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800637e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800638e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006390:	f000 fd40 	bl	8006e14 <HAL_RCC_GetPCLK1Freq>
 8006394:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	4a81      	ldr	r2, [pc, #516]	; (80065a0 <HAL_I2C_Init+0x274>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d807      	bhi.n	80063b0 <HAL_I2C_Init+0x84>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4a80      	ldr	r2, [pc, #512]	; (80065a4 <HAL_I2C_Init+0x278>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	bf94      	ite	ls
 80063a8:	2301      	movls	r3, #1
 80063aa:	2300      	movhi	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	e006      	b.n	80063be <HAL_I2C_Init+0x92>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4a7d      	ldr	r2, [pc, #500]	; (80065a8 <HAL_I2C_Init+0x27c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	bf94      	ite	ls
 80063b8:	2301      	movls	r3, #1
 80063ba:	2300      	movhi	r3, #0
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d001      	beq.n	80063c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e0e7      	b.n	8006596 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	4a78      	ldr	r2, [pc, #480]	; (80065ac <HAL_I2C_Init+0x280>)
 80063ca:	fba2 2303 	umull	r2, r3, r2, r3
 80063ce:	0c9b      	lsrs	r3, r3, #18
 80063d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6a1b      	ldr	r3, [r3, #32]
 80063ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	4a6a      	ldr	r2, [pc, #424]	; (80065a0 <HAL_I2C_Init+0x274>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d802      	bhi.n	8006400 <HAL_I2C_Init+0xd4>
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	3301      	adds	r3, #1
 80063fe:	e009      	b.n	8006414 <HAL_I2C_Init+0xe8>
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006406:	fb02 f303 	mul.w	r3, r2, r3
 800640a:	4a69      	ldr	r2, [pc, #420]	; (80065b0 <HAL_I2C_Init+0x284>)
 800640c:	fba2 2303 	umull	r2, r3, r2, r3
 8006410:	099b      	lsrs	r3, r3, #6
 8006412:	3301      	adds	r3, #1
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	6812      	ldr	r2, [r2, #0]
 8006418:	430b      	orrs	r3, r1
 800641a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006426:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	495c      	ldr	r1, [pc, #368]	; (80065a0 <HAL_I2C_Init+0x274>)
 8006430:	428b      	cmp	r3, r1
 8006432:	d819      	bhi.n	8006468 <HAL_I2C_Init+0x13c>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	1e59      	subs	r1, r3, #1
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	005b      	lsls	r3, r3, #1
 800643e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006442:	1c59      	adds	r1, r3, #1
 8006444:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006448:	400b      	ands	r3, r1
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00a      	beq.n	8006464 <HAL_I2C_Init+0x138>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	1e59      	subs	r1, r3, #1
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	fbb1 f3f3 	udiv	r3, r1, r3
 800645c:	3301      	adds	r3, #1
 800645e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006462:	e051      	b.n	8006508 <HAL_I2C_Init+0x1dc>
 8006464:	2304      	movs	r3, #4
 8006466:	e04f      	b.n	8006508 <HAL_I2C_Init+0x1dc>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d111      	bne.n	8006494 <HAL_I2C_Init+0x168>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	1e58      	subs	r0, r3, #1
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6859      	ldr	r1, [r3, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	005b      	lsls	r3, r3, #1
 800647c:	440b      	add	r3, r1
 800647e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006482:	3301      	adds	r3, #1
 8006484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006488:	2b00      	cmp	r3, #0
 800648a:	bf0c      	ite	eq
 800648c:	2301      	moveq	r3, #1
 800648e:	2300      	movne	r3, #0
 8006490:	b2db      	uxtb	r3, r3
 8006492:	e012      	b.n	80064ba <HAL_I2C_Init+0x18e>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	1e58      	subs	r0, r3, #1
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6859      	ldr	r1, [r3, #4]
 800649c:	460b      	mov	r3, r1
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	440b      	add	r3, r1
 80064a2:	0099      	lsls	r1, r3, #2
 80064a4:	440b      	add	r3, r1
 80064a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80064aa:	3301      	adds	r3, #1
 80064ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	bf0c      	ite	eq
 80064b4:	2301      	moveq	r3, #1
 80064b6:	2300      	movne	r3, #0
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <HAL_I2C_Init+0x196>
 80064be:	2301      	movs	r3, #1
 80064c0:	e022      	b.n	8006508 <HAL_I2C_Init+0x1dc>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10e      	bne.n	80064e8 <HAL_I2C_Init+0x1bc>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	1e58      	subs	r0, r3, #1
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6859      	ldr	r1, [r3, #4]
 80064d2:	460b      	mov	r3, r1
 80064d4:	005b      	lsls	r3, r3, #1
 80064d6:	440b      	add	r3, r1
 80064d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80064dc:	3301      	adds	r3, #1
 80064de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064e6:	e00f      	b.n	8006508 <HAL_I2C_Init+0x1dc>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	1e58      	subs	r0, r3, #1
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6859      	ldr	r1, [r3, #4]
 80064f0:	460b      	mov	r3, r1
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	440b      	add	r3, r1
 80064f6:	0099      	lsls	r1, r3, #2
 80064f8:	440b      	add	r3, r1
 80064fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80064fe:	3301      	adds	r3, #1
 8006500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006504:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006508:	6879      	ldr	r1, [r7, #4]
 800650a:	6809      	ldr	r1, [r1, #0]
 800650c:	4313      	orrs	r3, r2
 800650e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	69da      	ldr	r2, [r3, #28]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	431a      	orrs	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006536:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	6911      	ldr	r1, [r2, #16]
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	68d2      	ldr	r2, [r2, #12]
 8006542:	4311      	orrs	r1, r2
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6812      	ldr	r2, [r2, #0]
 8006548:	430b      	orrs	r3, r1
 800654a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	695a      	ldr	r2, [r3, #20]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	431a      	orrs	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0201 	orr.w	r2, r2, #1
 8006576:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2220      	movs	r2, #32
 8006582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	000186a0 	.word	0x000186a0
 80065a4:	001e847f 	.word	0x001e847f
 80065a8:	003d08ff 	.word	0x003d08ff
 80065ac:	431bde83 	.word	0x431bde83
 80065b0:	10624dd3 	.word	0x10624dd3

080065b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d101      	bne.n	80065c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e267      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d075      	beq.n	80066be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065d2:	4b88      	ldr	r3, [pc, #544]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	f003 030c 	and.w	r3, r3, #12
 80065da:	2b04      	cmp	r3, #4
 80065dc:	d00c      	beq.n	80065f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065de:	4b85      	ldr	r3, [pc, #532]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80065e0:	689b      	ldr	r3, [r3, #8]
 80065e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065e6:	2b08      	cmp	r3, #8
 80065e8:	d112      	bne.n	8006610 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065ea:	4b82      	ldr	r3, [pc, #520]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065f6:	d10b      	bne.n	8006610 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065f8:	4b7e      	ldr	r3, [pc, #504]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d05b      	beq.n	80066bc <HAL_RCC_OscConfig+0x108>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d157      	bne.n	80066bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e242      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006618:	d106      	bne.n	8006628 <HAL_RCC_OscConfig+0x74>
 800661a:	4b76      	ldr	r3, [pc, #472]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a75      	ldr	r2, [pc, #468]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006620:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	e01d      	b.n	8006664 <HAL_RCC_OscConfig+0xb0>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006630:	d10c      	bne.n	800664c <HAL_RCC_OscConfig+0x98>
 8006632:	4b70      	ldr	r3, [pc, #448]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a6f      	ldr	r2, [pc, #444]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006638:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800663c:	6013      	str	r3, [r2, #0]
 800663e:	4b6d      	ldr	r3, [pc, #436]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a6c      	ldr	r2, [pc, #432]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006648:	6013      	str	r3, [r2, #0]
 800664a:	e00b      	b.n	8006664 <HAL_RCC_OscConfig+0xb0>
 800664c:	4b69      	ldr	r3, [pc, #420]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a68      	ldr	r2, [pc, #416]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	4b66      	ldr	r3, [pc, #408]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a65      	ldr	r2, [pc, #404]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 800665e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d013      	beq.n	8006694 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800666c:	f7fe fe24 	bl	80052b8 <HAL_GetTick>
 8006670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006672:	e008      	b.n	8006686 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006674:	f7fe fe20 	bl	80052b8 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	2b64      	cmp	r3, #100	; 0x64
 8006680:	d901      	bls.n	8006686 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e207      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006686:	4b5b      	ldr	r3, [pc, #364]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668e:	2b00      	cmp	r3, #0
 8006690:	d0f0      	beq.n	8006674 <HAL_RCC_OscConfig+0xc0>
 8006692:	e014      	b.n	80066be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006694:	f7fe fe10 	bl	80052b8 <HAL_GetTick>
 8006698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800669a:	e008      	b.n	80066ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800669c:	f7fe fe0c 	bl	80052b8 <HAL_GetTick>
 80066a0:	4602      	mov	r2, r0
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b64      	cmp	r3, #100	; 0x64
 80066a8:	d901      	bls.n	80066ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e1f3      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066ae:	4b51      	ldr	r3, [pc, #324]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1f0      	bne.n	800669c <HAL_RCC_OscConfig+0xe8>
 80066ba:	e000      	b.n	80066be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d063      	beq.n	8006792 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066ca:	4b4a      	ldr	r3, [pc, #296]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f003 030c 	and.w	r3, r3, #12
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00b      	beq.n	80066ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066d6:	4b47      	ldr	r3, [pc, #284]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066de:	2b08      	cmp	r3, #8
 80066e0:	d11c      	bne.n	800671c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066e2:	4b44      	ldr	r3, [pc, #272]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d116      	bne.n	800671c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ee:	4b41      	ldr	r3, [pc, #260]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d005      	beq.n	8006706 <HAL_RCC_OscConfig+0x152>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d001      	beq.n	8006706 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e1c7      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006706:	4b3b      	ldr	r3, [pc, #236]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	00db      	lsls	r3, r3, #3
 8006714:	4937      	ldr	r1, [pc, #220]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006716:	4313      	orrs	r3, r2
 8006718:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800671a:	e03a      	b.n	8006792 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d020      	beq.n	8006766 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006724:	4b34      	ldr	r3, [pc, #208]	; (80067f8 <HAL_RCC_OscConfig+0x244>)
 8006726:	2201      	movs	r2, #1
 8006728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800672a:	f7fe fdc5 	bl	80052b8 <HAL_GetTick>
 800672e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006730:	e008      	b.n	8006744 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006732:	f7fe fdc1 	bl	80052b8 <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	2b02      	cmp	r3, #2
 800673e:	d901      	bls.n	8006744 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e1a8      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006744:	4b2b      	ldr	r3, [pc, #172]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0302 	and.w	r3, r3, #2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d0f0      	beq.n	8006732 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006750:	4b28      	ldr	r3, [pc, #160]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	00db      	lsls	r3, r3, #3
 800675e:	4925      	ldr	r1, [pc, #148]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006760:	4313      	orrs	r3, r2
 8006762:	600b      	str	r3, [r1, #0]
 8006764:	e015      	b.n	8006792 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006766:	4b24      	ldr	r3, [pc, #144]	; (80067f8 <HAL_RCC_OscConfig+0x244>)
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800676c:	f7fe fda4 	bl	80052b8 <HAL_GetTick>
 8006770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006772:	e008      	b.n	8006786 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006774:	f7fe fda0 	bl	80052b8 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	2b02      	cmp	r3, #2
 8006780:	d901      	bls.n	8006786 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e187      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006786:	4b1b      	ldr	r3, [pc, #108]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1f0      	bne.n	8006774 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0308 	and.w	r3, r3, #8
 800679a:	2b00      	cmp	r3, #0
 800679c:	d036      	beq.n	800680c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d016      	beq.n	80067d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067a6:	4b15      	ldr	r3, [pc, #84]	; (80067fc <HAL_RCC_OscConfig+0x248>)
 80067a8:	2201      	movs	r2, #1
 80067aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067ac:	f7fe fd84 	bl	80052b8 <HAL_GetTick>
 80067b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067b2:	e008      	b.n	80067c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067b4:	f7fe fd80 	bl	80052b8 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d901      	bls.n	80067c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80067c2:	2303      	movs	r3, #3
 80067c4:	e167      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067c6:	4b0b      	ldr	r3, [pc, #44]	; (80067f4 <HAL_RCC_OscConfig+0x240>)
 80067c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d0f0      	beq.n	80067b4 <HAL_RCC_OscConfig+0x200>
 80067d2:	e01b      	b.n	800680c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067d4:	4b09      	ldr	r3, [pc, #36]	; (80067fc <HAL_RCC_OscConfig+0x248>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067da:	f7fe fd6d 	bl	80052b8 <HAL_GetTick>
 80067de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067e0:	e00e      	b.n	8006800 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067e2:	f7fe fd69 	bl	80052b8 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d907      	bls.n	8006800 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e150      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
 80067f4:	40023800 	.word	0x40023800
 80067f8:	42470000 	.word	0x42470000
 80067fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006800:	4b88      	ldr	r3, [pc, #544]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006804:	f003 0302 	and.w	r3, r3, #2
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1ea      	bne.n	80067e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0304 	and.w	r3, r3, #4
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 8097 	beq.w	8006948 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800681a:	2300      	movs	r3, #0
 800681c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800681e:	4b81      	ldr	r3, [pc, #516]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10f      	bne.n	800684a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800682a:	2300      	movs	r3, #0
 800682c:	60bb      	str	r3, [r7, #8]
 800682e:	4b7d      	ldr	r3, [pc, #500]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006832:	4a7c      	ldr	r2, [pc, #496]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006838:	6413      	str	r3, [r2, #64]	; 0x40
 800683a:	4b7a      	ldr	r3, [pc, #488]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006842:	60bb      	str	r3, [r7, #8]
 8006844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006846:	2301      	movs	r3, #1
 8006848:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800684a:	4b77      	ldr	r3, [pc, #476]	; (8006a28 <HAL_RCC_OscConfig+0x474>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006852:	2b00      	cmp	r3, #0
 8006854:	d118      	bne.n	8006888 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006856:	4b74      	ldr	r3, [pc, #464]	; (8006a28 <HAL_RCC_OscConfig+0x474>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a73      	ldr	r2, [pc, #460]	; (8006a28 <HAL_RCC_OscConfig+0x474>)
 800685c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006862:	f7fe fd29 	bl	80052b8 <HAL_GetTick>
 8006866:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006868:	e008      	b.n	800687c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800686a:	f7fe fd25 	bl	80052b8 <HAL_GetTick>
 800686e:	4602      	mov	r2, r0
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d901      	bls.n	800687c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	e10c      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800687c:	4b6a      	ldr	r3, [pc, #424]	; (8006a28 <HAL_RCC_OscConfig+0x474>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006884:	2b00      	cmp	r3, #0
 8006886:	d0f0      	beq.n	800686a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d106      	bne.n	800689e <HAL_RCC_OscConfig+0x2ea>
 8006890:	4b64      	ldr	r3, [pc, #400]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006894:	4a63      	ldr	r2, [pc, #396]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006896:	f043 0301 	orr.w	r3, r3, #1
 800689a:	6713      	str	r3, [r2, #112]	; 0x70
 800689c:	e01c      	b.n	80068d8 <HAL_RCC_OscConfig+0x324>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	2b05      	cmp	r3, #5
 80068a4:	d10c      	bne.n	80068c0 <HAL_RCC_OscConfig+0x30c>
 80068a6:	4b5f      	ldr	r3, [pc, #380]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068aa:	4a5e      	ldr	r2, [pc, #376]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068ac:	f043 0304 	orr.w	r3, r3, #4
 80068b0:	6713      	str	r3, [r2, #112]	; 0x70
 80068b2:	4b5c      	ldr	r3, [pc, #368]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b6:	4a5b      	ldr	r2, [pc, #364]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068b8:	f043 0301 	orr.w	r3, r3, #1
 80068bc:	6713      	str	r3, [r2, #112]	; 0x70
 80068be:	e00b      	b.n	80068d8 <HAL_RCC_OscConfig+0x324>
 80068c0:	4b58      	ldr	r3, [pc, #352]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c4:	4a57      	ldr	r2, [pc, #348]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068c6:	f023 0301 	bic.w	r3, r3, #1
 80068ca:	6713      	str	r3, [r2, #112]	; 0x70
 80068cc:	4b55      	ldr	r3, [pc, #340]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d0:	4a54      	ldr	r2, [pc, #336]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80068d2:	f023 0304 	bic.w	r3, r3, #4
 80068d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d015      	beq.n	800690c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068e0:	f7fe fcea 	bl	80052b8 <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068e6:	e00a      	b.n	80068fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068e8:	f7fe fce6 	bl	80052b8 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e0cb      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068fe:	4b49      	ldr	r3, [pc, #292]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d0ee      	beq.n	80068e8 <HAL_RCC_OscConfig+0x334>
 800690a:	e014      	b.n	8006936 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800690c:	f7fe fcd4 	bl	80052b8 <HAL_GetTick>
 8006910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006912:	e00a      	b.n	800692a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006914:	f7fe fcd0 	bl	80052b8 <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006922:	4293      	cmp	r3, r2
 8006924:	d901      	bls.n	800692a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e0b5      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800692a:	4b3e      	ldr	r3, [pc, #248]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 800692c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1ee      	bne.n	8006914 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006936:	7dfb      	ldrb	r3, [r7, #23]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d105      	bne.n	8006948 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800693c:	4b39      	ldr	r3, [pc, #228]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 800693e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006940:	4a38      	ldr	r2, [pc, #224]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006942:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006946:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 80a1 	beq.w	8006a94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006952:	4b34      	ldr	r3, [pc, #208]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 030c 	and.w	r3, r3, #12
 800695a:	2b08      	cmp	r3, #8
 800695c:	d05c      	beq.n	8006a18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	2b02      	cmp	r3, #2
 8006964:	d141      	bne.n	80069ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006966:	4b31      	ldr	r3, [pc, #196]	; (8006a2c <HAL_RCC_OscConfig+0x478>)
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800696c:	f7fe fca4 	bl	80052b8 <HAL_GetTick>
 8006970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006972:	e008      	b.n	8006986 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006974:	f7fe fca0 	bl	80052b8 <HAL_GetTick>
 8006978:	4602      	mov	r2, r0
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	2b02      	cmp	r3, #2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e087      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006986:	4b27      	ldr	r3, [pc, #156]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1f0      	bne.n	8006974 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	69da      	ldr	r2, [r3, #28]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a0:	019b      	lsls	r3, r3, #6
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a8:	085b      	lsrs	r3, r3, #1
 80069aa:	3b01      	subs	r3, #1
 80069ac:	041b      	lsls	r3, r3, #16
 80069ae:	431a      	orrs	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	061b      	lsls	r3, r3, #24
 80069b6:	491b      	ldr	r1, [pc, #108]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069bc:	4b1b      	ldr	r3, [pc, #108]	; (8006a2c <HAL_RCC_OscConfig+0x478>)
 80069be:	2201      	movs	r2, #1
 80069c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c2:	f7fe fc79 	bl	80052b8 <HAL_GetTick>
 80069c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069c8:	e008      	b.n	80069dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069ca:	f7fe fc75 	bl	80052b8 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d901      	bls.n	80069dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e05c      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069dc:	4b11      	ldr	r3, [pc, #68]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d0f0      	beq.n	80069ca <HAL_RCC_OscConfig+0x416>
 80069e8:	e054      	b.n	8006a94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ea:	4b10      	ldr	r3, [pc, #64]	; (8006a2c <HAL_RCC_OscConfig+0x478>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069f0:	f7fe fc62 	bl	80052b8 <HAL_GetTick>
 80069f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069f6:	e008      	b.n	8006a0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069f8:	f7fe fc5e 	bl	80052b8 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e045      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a0a:	4b06      	ldr	r3, [pc, #24]	; (8006a24 <HAL_RCC_OscConfig+0x470>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1f0      	bne.n	80069f8 <HAL_RCC_OscConfig+0x444>
 8006a16:	e03d      	b.n	8006a94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d107      	bne.n	8006a30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e038      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
 8006a24:	40023800 	.word	0x40023800
 8006a28:	40007000 	.word	0x40007000
 8006a2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a30:	4b1b      	ldr	r3, [pc, #108]	; (8006aa0 <HAL_RCC_OscConfig+0x4ec>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d028      	beq.n	8006a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d121      	bne.n	8006a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d11a      	bne.n	8006a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a60:	4013      	ands	r3, r2
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d111      	bne.n	8006a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a76:	085b      	lsrs	r3, r3, #1
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d107      	bne.n	8006a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d001      	beq.n	8006a94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	e000      	b.n	8006a96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	40023800 	.word	0x40023800

08006aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e0cc      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ab8:	4b68      	ldr	r3, [pc, #416]	; (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 0307 	and.w	r3, r3, #7
 8006ac0:	683a      	ldr	r2, [r7, #0]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d90c      	bls.n	8006ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ac6:	4b65      	ldr	r3, [pc, #404]	; (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ace:	4b63      	ldr	r3, [pc, #396]	; (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0307 	and.w	r3, r3, #7
 8006ad6:	683a      	ldr	r2, [r7, #0]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d001      	beq.n	8006ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e0b8      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d020      	beq.n	8006b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d005      	beq.n	8006b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006af8:	4b59      	ldr	r3, [pc, #356]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	4a58      	ldr	r2, [pc, #352]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006afe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0308 	and.w	r3, r3, #8
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d005      	beq.n	8006b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b10:	4b53      	ldr	r3, [pc, #332]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	4a52      	ldr	r2, [pc, #328]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b1c:	4b50      	ldr	r3, [pc, #320]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	494d      	ldr	r1, [pc, #308]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d044      	beq.n	8006bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d107      	bne.n	8006b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b42:	4b47      	ldr	r3, [pc, #284]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d119      	bne.n	8006b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e07f      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d003      	beq.n	8006b62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b5e:	2b03      	cmp	r3, #3
 8006b60:	d107      	bne.n	8006b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b62:	4b3f      	ldr	r3, [pc, #252]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d109      	bne.n	8006b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e06f      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b72:	4b3b      	ldr	r3, [pc, #236]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0302 	and.w	r3, r3, #2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e067      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b82:	4b37      	ldr	r3, [pc, #220]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f023 0203 	bic.w	r2, r3, #3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	4934      	ldr	r1, [pc, #208]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b94:	f7fe fb90 	bl	80052b8 <HAL_GetTick>
 8006b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b9a:	e00a      	b.n	8006bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b9c:	f7fe fb8c 	bl	80052b8 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e04f      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bb2:	4b2b      	ldr	r3, [pc, #172]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 020c 	and.w	r2, r3, #12
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d1eb      	bne.n	8006b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006bc4:	4b25      	ldr	r3, [pc, #148]	; (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0307 	and.w	r3, r3, #7
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d20c      	bcs.n	8006bec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bd2:	4b22      	ldr	r3, [pc, #136]	; (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	b2d2      	uxtb	r2, r2
 8006bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bda:	4b20      	ldr	r3, [pc, #128]	; (8006c5c <HAL_RCC_ClockConfig+0x1b8>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0307 	and.w	r3, r3, #7
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d001      	beq.n	8006bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e032      	b.n	8006c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0304 	and.w	r3, r3, #4
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d008      	beq.n	8006c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bf8:	4b19      	ldr	r3, [pc, #100]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	4916      	ldr	r1, [pc, #88]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006c06:	4313      	orrs	r3, r2
 8006c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0308 	and.w	r3, r3, #8
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d009      	beq.n	8006c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c16:	4b12      	ldr	r3, [pc, #72]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	490e      	ldr	r1, [pc, #56]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c2a:	f000 f821 	bl	8006c70 <HAL_RCC_GetSysClockFreq>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	4b0b      	ldr	r3, [pc, #44]	; (8006c60 <HAL_RCC_ClockConfig+0x1bc>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	091b      	lsrs	r3, r3, #4
 8006c36:	f003 030f 	and.w	r3, r3, #15
 8006c3a:	490a      	ldr	r1, [pc, #40]	; (8006c64 <HAL_RCC_ClockConfig+0x1c0>)
 8006c3c:	5ccb      	ldrb	r3, [r1, r3]
 8006c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c42:	4a09      	ldr	r2, [pc, #36]	; (8006c68 <HAL_RCC_ClockConfig+0x1c4>)
 8006c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006c46:	4b09      	ldr	r3, [pc, #36]	; (8006c6c <HAL_RCC_ClockConfig+0x1c8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fe faf0 	bl	8005230 <HAL_InitTick>

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	40023c00 	.word	0x40023c00
 8006c60:	40023800 	.word	0x40023800
 8006c64:	0800f348 	.word	0x0800f348
 8006c68:	20000088 	.word	0x20000088
 8006c6c:	2000008c 	.word	0x2000008c

08006c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c74:	b090      	sub	sp, #64	; 0x40
 8006c76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c80:	2300      	movs	r3, #0
 8006c82:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c88:	4b59      	ldr	r3, [pc, #356]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f003 030c 	and.w	r3, r3, #12
 8006c90:	2b08      	cmp	r3, #8
 8006c92:	d00d      	beq.n	8006cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8006c94:	2b08      	cmp	r3, #8
 8006c96:	f200 80a1 	bhi.w	8006ddc <HAL_RCC_GetSysClockFreq+0x16c>
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8006c9e:	2b04      	cmp	r3, #4
 8006ca0:	d003      	beq.n	8006caa <HAL_RCC_GetSysClockFreq+0x3a>
 8006ca2:	e09b      	b.n	8006ddc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ca4:	4b53      	ldr	r3, [pc, #332]	; (8006df4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006ca6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006ca8:	e09b      	b.n	8006de2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006caa:	4b53      	ldr	r3, [pc, #332]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006cac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006cae:	e098      	b.n	8006de2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006cb0:	4b4f      	ldr	r3, [pc, #316]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cb8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006cba:	4b4d      	ldr	r3, [pc, #308]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d028      	beq.n	8006d18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cc6:	4b4a      	ldr	r3, [pc, #296]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	099b      	lsrs	r3, r3, #6
 8006ccc:	2200      	movs	r2, #0
 8006cce:	623b      	str	r3, [r7, #32]
 8006cd0:	627a      	str	r2, [r7, #36]	; 0x24
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006cd8:	2100      	movs	r1, #0
 8006cda:	4b47      	ldr	r3, [pc, #284]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006cdc:	fb03 f201 	mul.w	r2, r3, r1
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	fb00 f303 	mul.w	r3, r0, r3
 8006ce6:	4413      	add	r3, r2
 8006ce8:	4a43      	ldr	r2, [pc, #268]	; (8006df8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006cea:	fba0 1202 	umull	r1, r2, r0, r2
 8006cee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cf0:	460a      	mov	r2, r1
 8006cf2:	62ba      	str	r2, [r7, #40]	; 0x28
 8006cf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cf6:	4413      	add	r3, r2
 8006cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	61bb      	str	r3, [r7, #24]
 8006d00:	61fa      	str	r2, [r7, #28]
 8006d02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006d0a:	f7f9 ffc5 	bl	8000c98 <__aeabi_uldivmod>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	460b      	mov	r3, r1
 8006d12:	4613      	mov	r3, r2
 8006d14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d16:	e053      	b.n	8006dc0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d18:	4b35      	ldr	r3, [pc, #212]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	099b      	lsrs	r3, r3, #6
 8006d1e:	2200      	movs	r2, #0
 8006d20:	613b      	str	r3, [r7, #16]
 8006d22:	617a      	str	r2, [r7, #20]
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006d2a:	f04f 0b00 	mov.w	fp, #0
 8006d2e:	4652      	mov	r2, sl
 8006d30:	465b      	mov	r3, fp
 8006d32:	f04f 0000 	mov.w	r0, #0
 8006d36:	f04f 0100 	mov.w	r1, #0
 8006d3a:	0159      	lsls	r1, r3, #5
 8006d3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d40:	0150      	lsls	r0, r2, #5
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	ebb2 080a 	subs.w	r8, r2, sl
 8006d4a:	eb63 090b 	sbc.w	r9, r3, fp
 8006d4e:	f04f 0200 	mov.w	r2, #0
 8006d52:	f04f 0300 	mov.w	r3, #0
 8006d56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006d5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006d5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006d62:	ebb2 0408 	subs.w	r4, r2, r8
 8006d66:	eb63 0509 	sbc.w	r5, r3, r9
 8006d6a:	f04f 0200 	mov.w	r2, #0
 8006d6e:	f04f 0300 	mov.w	r3, #0
 8006d72:	00eb      	lsls	r3, r5, #3
 8006d74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d78:	00e2      	lsls	r2, r4, #3
 8006d7a:	4614      	mov	r4, r2
 8006d7c:	461d      	mov	r5, r3
 8006d7e:	eb14 030a 	adds.w	r3, r4, sl
 8006d82:	603b      	str	r3, [r7, #0]
 8006d84:	eb45 030b 	adc.w	r3, r5, fp
 8006d88:	607b      	str	r3, [r7, #4]
 8006d8a:	f04f 0200 	mov.w	r2, #0
 8006d8e:	f04f 0300 	mov.w	r3, #0
 8006d92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d96:	4629      	mov	r1, r5
 8006d98:	028b      	lsls	r3, r1, #10
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006da0:	4621      	mov	r1, r4
 8006da2:	028a      	lsls	r2, r1, #10
 8006da4:	4610      	mov	r0, r2
 8006da6:	4619      	mov	r1, r3
 8006da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006daa:	2200      	movs	r2, #0
 8006dac:	60bb      	str	r3, [r7, #8]
 8006dae:	60fa      	str	r2, [r7, #12]
 8006db0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006db4:	f7f9 ff70 	bl	8000c98 <__aeabi_uldivmod>
 8006db8:	4602      	mov	r2, r0
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006dc0:	4b0b      	ldr	r3, [pc, #44]	; (8006df0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	0c1b      	lsrs	r3, r3, #16
 8006dc6:	f003 0303 	and.w	r3, r3, #3
 8006dca:	3301      	adds	r3, #1
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006dd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006dda:	e002      	b.n	8006de2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ddc:	4b05      	ldr	r3, [pc, #20]	; (8006df4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006dde:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006de0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3740      	adds	r7, #64	; 0x40
 8006de8:	46bd      	mov	sp, r7
 8006dea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dee:	bf00      	nop
 8006df0:	40023800 	.word	0x40023800
 8006df4:	00f42400 	.word	0x00f42400
 8006df8:	017d7840 	.word	0x017d7840

08006dfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e00:	4b03      	ldr	r3, [pc, #12]	; (8006e10 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e02:	681b      	ldr	r3, [r3, #0]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	20000088 	.word	0x20000088

08006e14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e18:	f7ff fff0 	bl	8006dfc <HAL_RCC_GetHCLKFreq>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	0a9b      	lsrs	r3, r3, #10
 8006e24:	f003 0307 	and.w	r3, r3, #7
 8006e28:	4903      	ldr	r1, [pc, #12]	; (8006e38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e2a:	5ccb      	ldrb	r3, [r1, r3]
 8006e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	40023800 	.word	0x40023800
 8006e38:	0800f358 	.word	0x0800f358

08006e3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e40:	f7ff ffdc 	bl	8006dfc <HAL_RCC_GetHCLKFreq>
 8006e44:	4602      	mov	r2, r0
 8006e46:	4b05      	ldr	r3, [pc, #20]	; (8006e5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	0b5b      	lsrs	r3, r3, #13
 8006e4c:	f003 0307 	and.w	r3, r3, #7
 8006e50:	4903      	ldr	r1, [pc, #12]	; (8006e60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e52:	5ccb      	ldrb	r3, [r1, r3]
 8006e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	40023800 	.word	0x40023800
 8006e60:	0800f358 	.word	0x0800f358

08006e64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e07b      	b.n	8006f6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d108      	bne.n	8006e90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e86:	d009      	beq.n	8006e9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	61da      	str	r2, [r3, #28]
 8006e8e:	e005      	b.n	8006e9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d106      	bne.n	8006ebc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7fd fe5a 	bl	8004b70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ed2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	f003 0302 	and.w	r3, r3, #2
 8006ef8:	431a      	orrs	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	431a      	orrs	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a1b      	ldr	r3, [r3, #32]
 8006f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f20:	ea42 0103 	orr.w	r1, r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	430a      	orrs	r2, r1
 8006f32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	0c1b      	lsrs	r3, r3, #16
 8006f3a:	f003 0104 	and.w	r1, r3, #4
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f42:	f003 0210 	and.w	r2, r3, #16
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	69da      	ldr	r2, [r3, #28]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b088      	sub	sp, #32
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	60f8      	str	r0, [r7, #12]
 8006f7e:	60b9      	str	r1, [r7, #8]
 8006f80:	603b      	str	r3, [r7, #0]
 8006f82:	4613      	mov	r3, r2
 8006f84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d101      	bne.n	8006f98 <HAL_SPI_Transmit+0x22>
 8006f94:	2302      	movs	r3, #2
 8006f96:	e126      	b.n	80071e6 <HAL_SPI_Transmit+0x270>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fa0:	f7fe f98a 	bl	80052b8 <HAL_GetTick>
 8006fa4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006fa6:	88fb      	ldrh	r3, [r7, #6]
 8006fa8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d002      	beq.n	8006fbc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fba:	e10b      	b.n	80071d4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <HAL_SPI_Transmit+0x52>
 8006fc2:	88fb      	ldrh	r3, [r7, #6]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d102      	bne.n	8006fce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fcc:	e102      	b.n	80071d4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2203      	movs	r2, #3
 8006fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	88fa      	ldrh	r2, [r7, #6]
 8006fe6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	88fa      	ldrh	r2, [r7, #6]
 8006fec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007014:	d10f      	bne.n	8007036 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007024:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007034:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007040:	2b40      	cmp	r3, #64	; 0x40
 8007042:	d007      	beq.n	8007054 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007052:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800705c:	d14b      	bne.n	80070f6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <HAL_SPI_Transmit+0xf6>
 8007066:	8afb      	ldrh	r3, [r7, #22]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d13e      	bne.n	80070ea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007070:	881a      	ldrh	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707c:	1c9a      	adds	r2, r3, #2
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007086:	b29b      	uxth	r3, r3
 8007088:	3b01      	subs	r3, #1
 800708a:	b29a      	uxth	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007090:	e02b      	b.n	80070ea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b02      	cmp	r3, #2
 800709e:	d112      	bne.n	80070c6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a4:	881a      	ldrh	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b0:	1c9a      	adds	r2, r3, #2
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	3b01      	subs	r3, #1
 80070be:	b29a      	uxth	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80070c4:	e011      	b.n	80070ea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070c6:	f7fe f8f7 	bl	80052b8 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d803      	bhi.n	80070de <HAL_SPI_Transmit+0x168>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070dc:	d102      	bne.n	80070e4 <HAL_SPI_Transmit+0x16e>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d102      	bne.n	80070ea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80070e8:	e074      	b.n	80071d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1ce      	bne.n	8007092 <HAL_SPI_Transmit+0x11c>
 80070f4:	e04c      	b.n	8007190 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <HAL_SPI_Transmit+0x18e>
 80070fe:	8afb      	ldrh	r3, [r7, #22]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d140      	bne.n	8007186 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	330c      	adds	r3, #12
 800710e:	7812      	ldrb	r2, [r2, #0]
 8007110:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007116:	1c5a      	adds	r2, r3, #1
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007120:	b29b      	uxth	r3, r3
 8007122:	3b01      	subs	r3, #1
 8007124:	b29a      	uxth	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800712a:	e02c      	b.n	8007186 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f003 0302 	and.w	r3, r3, #2
 8007136:	2b02      	cmp	r3, #2
 8007138:	d113      	bne.n	8007162 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	330c      	adds	r3, #12
 8007144:	7812      	ldrb	r2, [r2, #0]
 8007146:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714c:	1c5a      	adds	r2, r3, #1
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007156:	b29b      	uxth	r3, r3
 8007158:	3b01      	subs	r3, #1
 800715a:	b29a      	uxth	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007160:	e011      	b.n	8007186 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007162:	f7fe f8a9 	bl	80052b8 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	429a      	cmp	r2, r3
 8007170:	d803      	bhi.n	800717a <HAL_SPI_Transmit+0x204>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007178:	d102      	bne.n	8007180 <HAL_SPI_Transmit+0x20a>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d102      	bne.n	8007186 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007184:	e026      	b.n	80071d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800718a:	b29b      	uxth	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1cd      	bne.n	800712c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	f000 fbcb 	bl	8007930 <SPI_EndRxTxTransaction>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d002      	beq.n	80071a6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2220      	movs	r2, #32
 80071a4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10a      	bne.n	80071c4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071ae:	2300      	movs	r3, #0
 80071b0:	613b      	str	r3, [r7, #16]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	613b      	str	r3, [r7, #16]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	613b      	str	r3, [r7, #16]
 80071c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d002      	beq.n	80071d2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	77fb      	strb	r3, [r7, #31]
 80071d0:	e000      	b.n	80071d4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80071d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80071e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3720      	adds	r7, #32
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b088      	sub	sp, #32
 80071f2:	af02      	add	r7, sp, #8
 80071f4:	60f8      	str	r0, [r7, #12]
 80071f6:	60b9      	str	r1, [r7, #8]
 80071f8:	603b      	str	r3, [r7, #0]
 80071fa:	4613      	mov	r3, r2
 80071fc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800720a:	d112      	bne.n	8007232 <HAL_SPI_Receive+0x44>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10e      	bne.n	8007232 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2204      	movs	r2, #4
 8007218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800721c:	88fa      	ldrh	r2, [r7, #6]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	4613      	mov	r3, r2
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	68b9      	ldr	r1, [r7, #8]
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f000 f8f1 	bl	8007410 <HAL_SPI_TransmitReceive>
 800722e:	4603      	mov	r3, r0
 8007230:	e0ea      	b.n	8007408 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007238:	2b01      	cmp	r3, #1
 800723a:	d101      	bne.n	8007240 <HAL_SPI_Receive+0x52>
 800723c:	2302      	movs	r3, #2
 800723e:	e0e3      	b.n	8007408 <HAL_SPI_Receive+0x21a>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007248:	f7fe f836 	bl	80052b8 <HAL_GetTick>
 800724c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007254:	b2db      	uxtb	r3, r3
 8007256:	2b01      	cmp	r3, #1
 8007258:	d002      	beq.n	8007260 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800725a:	2302      	movs	r3, #2
 800725c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800725e:	e0ca      	b.n	80073f6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d002      	beq.n	800726c <HAL_SPI_Receive+0x7e>
 8007266:	88fb      	ldrh	r3, [r7, #6]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d102      	bne.n	8007272 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007270:	e0c1      	b.n	80073f6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2204      	movs	r2, #4
 8007276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	88fa      	ldrh	r2, [r7, #6]
 800728a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	88fa      	ldrh	r2, [r7, #6]
 8007290:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072b8:	d10f      	bne.n	80072da <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e4:	2b40      	cmp	r3, #64	; 0x40
 80072e6:	d007      	beq.n	80072f8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d162      	bne.n	80073c6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007300:	e02e      	b.n	8007360 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f003 0301 	and.w	r3, r3, #1
 800730c:	2b01      	cmp	r3, #1
 800730e:	d115      	bne.n	800733c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f103 020c 	add.w	r2, r3, #12
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731c:	7812      	ldrb	r2, [r2, #0]
 800731e:	b2d2      	uxtb	r2, r2
 8007320:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007326:	1c5a      	adds	r2, r3, #1
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007330:	b29b      	uxth	r3, r3
 8007332:	3b01      	subs	r3, #1
 8007334:	b29a      	uxth	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	87da      	strh	r2, [r3, #62]	; 0x3e
 800733a:	e011      	b.n	8007360 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800733c:	f7fd ffbc 	bl	80052b8 <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	429a      	cmp	r2, r3
 800734a:	d803      	bhi.n	8007354 <HAL_SPI_Receive+0x166>
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007352:	d102      	bne.n	800735a <HAL_SPI_Receive+0x16c>
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d102      	bne.n	8007360 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800735e:	e04a      	b.n	80073f6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1cb      	bne.n	8007302 <HAL_SPI_Receive+0x114>
 800736a:	e031      	b.n	80073d0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	2b01      	cmp	r3, #1
 8007378:	d113      	bne.n	80073a2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68da      	ldr	r2, [r3, #12]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007384:	b292      	uxth	r2, r2
 8007386:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738c:	1c9a      	adds	r2, r3, #2
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007396:	b29b      	uxth	r3, r3
 8007398:	3b01      	subs	r3, #1
 800739a:	b29a      	uxth	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073a0:	e011      	b.n	80073c6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073a2:	f7fd ff89 	bl	80052b8 <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d803      	bhi.n	80073ba <HAL_SPI_Receive+0x1cc>
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073b8:	d102      	bne.n	80073c0 <HAL_SPI_Receive+0x1d2>
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d102      	bne.n	80073c6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80073c4:	e017      	b.n	80073f6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1cd      	bne.n	800736c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	68f8      	ldr	r0, [r7, #12]
 80073d6:	f000 fa45 	bl	8007864 <SPI_EndRxTransaction>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2220      	movs	r2, #32
 80073e4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	75fb      	strb	r3, [r7, #23]
 80073f2:	e000      	b.n	80073f6 <HAL_SPI_Receive+0x208>
  }

error :
 80073f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007406:	7dfb      	ldrb	r3, [r7, #23]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b08c      	sub	sp, #48	; 0x30
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
 800741c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800741e:	2301      	movs	r3, #1
 8007420:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007422:	2300      	movs	r3, #0
 8007424:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800742e:	2b01      	cmp	r3, #1
 8007430:	d101      	bne.n	8007436 <HAL_SPI_TransmitReceive+0x26>
 8007432:	2302      	movs	r3, #2
 8007434:	e18a      	b.n	800774c <HAL_SPI_TransmitReceive+0x33c>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2201      	movs	r2, #1
 800743a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800743e:	f7fd ff3b 	bl	80052b8 <HAL_GetTick>
 8007442:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800744a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007454:	887b      	ldrh	r3, [r7, #2]
 8007456:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007458:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800745c:	2b01      	cmp	r3, #1
 800745e:	d00f      	beq.n	8007480 <HAL_SPI_TransmitReceive+0x70>
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007466:	d107      	bne.n	8007478 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d103      	bne.n	8007478 <HAL_SPI_TransmitReceive+0x68>
 8007470:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007474:	2b04      	cmp	r3, #4
 8007476:	d003      	beq.n	8007480 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007478:	2302      	movs	r3, #2
 800747a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800747e:	e15b      	b.n	8007738 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d005      	beq.n	8007492 <HAL_SPI_TransmitReceive+0x82>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <HAL_SPI_TransmitReceive+0x82>
 800748c:	887b      	ldrh	r3, [r7, #2]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d103      	bne.n	800749a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007498:	e14e      	b.n	8007738 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b04      	cmp	r3, #4
 80074a4:	d003      	beq.n	80074ae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2205      	movs	r2, #5
 80074aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2200      	movs	r2, #0
 80074b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	887a      	ldrh	r2, [r7, #2]
 80074be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	887a      	ldrh	r2, [r7, #2]
 80074c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	887a      	ldrh	r2, [r7, #2]
 80074d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	887a      	ldrh	r2, [r7, #2]
 80074d6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ee:	2b40      	cmp	r3, #64	; 0x40
 80074f0:	d007      	beq.n	8007502 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007500:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800750a:	d178      	bne.n	80075fe <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <HAL_SPI_TransmitReceive+0x10a>
 8007514:	8b7b      	ldrh	r3, [r7, #26]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d166      	bne.n	80075e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751e:	881a      	ldrh	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752a:	1c9a      	adds	r2, r3, #2
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007534:	b29b      	uxth	r3, r3
 8007536:	3b01      	subs	r3, #1
 8007538:	b29a      	uxth	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800753e:	e053      	b.n	80075e8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	f003 0302 	and.w	r3, r3, #2
 800754a:	2b02      	cmp	r3, #2
 800754c:	d11b      	bne.n	8007586 <HAL_SPI_TransmitReceive+0x176>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007552:	b29b      	uxth	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	d016      	beq.n	8007586 <HAL_SPI_TransmitReceive+0x176>
 8007558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755a:	2b01      	cmp	r3, #1
 800755c:	d113      	bne.n	8007586 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007562:	881a      	ldrh	r2, [r3, #0]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756e:	1c9a      	adds	r2, r3, #2
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007578:	b29b      	uxth	r3, r3
 800757a:	3b01      	subs	r3, #1
 800757c:	b29a      	uxth	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007582:	2300      	movs	r3, #0
 8007584:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f003 0301 	and.w	r3, r3, #1
 8007590:	2b01      	cmp	r3, #1
 8007592:	d119      	bne.n	80075c8 <HAL_SPI_TransmitReceive+0x1b8>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007598:	b29b      	uxth	r3, r3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d014      	beq.n	80075c8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68da      	ldr	r2, [r3, #12]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a8:	b292      	uxth	r2, r2
 80075aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b0:	1c9a      	adds	r2, r3, #2
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	3b01      	subs	r3, #1
 80075be:	b29a      	uxth	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075c4:	2301      	movs	r3, #1
 80075c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80075c8:	f7fd fe76 	bl	80052b8 <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d807      	bhi.n	80075e8 <HAL_SPI_TransmitReceive+0x1d8>
 80075d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075de:	d003      	beq.n	80075e8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80075e0:	2303      	movs	r3, #3
 80075e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80075e6:	e0a7      	b.n	8007738 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1a6      	bne.n	8007540 <HAL_SPI_TransmitReceive+0x130>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1a1      	bne.n	8007540 <HAL_SPI_TransmitReceive+0x130>
 80075fc:	e07c      	b.n	80076f8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <HAL_SPI_TransmitReceive+0x1fc>
 8007606:	8b7b      	ldrh	r3, [r7, #26]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d16b      	bne.n	80076e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	330c      	adds	r3, #12
 8007616:	7812      	ldrb	r2, [r2, #0]
 8007618:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761e:	1c5a      	adds	r2, r3, #1
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007628:	b29b      	uxth	r3, r3
 800762a:	3b01      	subs	r3, #1
 800762c:	b29a      	uxth	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007632:	e057      	b.n	80076e4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b02      	cmp	r3, #2
 8007640:	d11c      	bne.n	800767c <HAL_SPI_TransmitReceive+0x26c>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007646:	b29b      	uxth	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	d017      	beq.n	800767c <HAL_SPI_TransmitReceive+0x26c>
 800764c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764e:	2b01      	cmp	r3, #1
 8007650:	d114      	bne.n	800767c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	330c      	adds	r3, #12
 800765c:	7812      	ldrb	r2, [r2, #0]
 800765e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007664:	1c5a      	adds	r2, r3, #1
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800766e:	b29b      	uxth	r3, r3
 8007670:	3b01      	subs	r3, #1
 8007672:	b29a      	uxth	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b01      	cmp	r3, #1
 8007688:	d119      	bne.n	80076be <HAL_SPI_TransmitReceive+0x2ae>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800768e:	b29b      	uxth	r3, r3
 8007690:	2b00      	cmp	r3, #0
 8007692:	d014      	beq.n	80076be <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68da      	ldr	r2, [r3, #12]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769e:	b2d2      	uxtb	r2, r2
 80076a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a6:	1c5a      	adds	r2, r3, #1
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	3b01      	subs	r3, #1
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076ba:	2301      	movs	r3, #1
 80076bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80076be:	f7fd fdfb 	bl	80052b8 <HAL_GetTick>
 80076c2:	4602      	mov	r2, r0
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	1ad3      	subs	r3, r2, r3
 80076c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d803      	bhi.n	80076d6 <HAL_SPI_TransmitReceive+0x2c6>
 80076ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076d4:	d102      	bne.n	80076dc <HAL_SPI_TransmitReceive+0x2cc>
 80076d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d103      	bne.n	80076e4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80076e2:	e029      	b.n	8007738 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d1a2      	bne.n	8007634 <HAL_SPI_TransmitReceive+0x224>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d19d      	bne.n	8007634 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80076fc:	68f8      	ldr	r0, [r7, #12]
 80076fe:	f000 f917 	bl	8007930 <SPI_EndRxTxTransaction>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d006      	beq.n	8007716 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2220      	movs	r2, #32
 8007712:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007714:	e010      	b.n	8007738 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d10b      	bne.n	8007736 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800771e:	2300      	movs	r3, #0
 8007720:	617b      	str	r3, [r7, #20]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	617b      	str	r3, [r7, #20]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	617b      	str	r3, [r7, #20]
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	e000      	b.n	8007738 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007736:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007748:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800774c:	4618      	mov	r0, r3
 800774e:	3730      	adds	r7, #48	; 0x30
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b088      	sub	sp, #32
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	603b      	str	r3, [r7, #0]
 8007760:	4613      	mov	r3, r2
 8007762:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007764:	f7fd fda8 	bl	80052b8 <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776c:	1a9b      	subs	r3, r3, r2
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	4413      	add	r3, r2
 8007772:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007774:	f7fd fda0 	bl	80052b8 <HAL_GetTick>
 8007778:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800777a:	4b39      	ldr	r3, [pc, #228]	; (8007860 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	015b      	lsls	r3, r3, #5
 8007780:	0d1b      	lsrs	r3, r3, #20
 8007782:	69fa      	ldr	r2, [r7, #28]
 8007784:	fb02 f303 	mul.w	r3, r2, r3
 8007788:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800778a:	e054      	b.n	8007836 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007792:	d050      	beq.n	8007836 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007794:	f7fd fd90 	bl	80052b8 <HAL_GetTick>
 8007798:	4602      	mov	r2, r0
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	1ad3      	subs	r3, r2, r3
 800779e:	69fa      	ldr	r2, [r7, #28]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d902      	bls.n	80077aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d13d      	bne.n	8007826 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	685a      	ldr	r2, [r3, #4]
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077c2:	d111      	bne.n	80077e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077cc:	d004      	beq.n	80077d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077d6:	d107      	bne.n	80077e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077f0:	d10f      	bne.n	8007812 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007800:	601a      	str	r2, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007810:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e017      	b.n	8007856 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d101      	bne.n	8007830 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	3b01      	subs	r3, #1
 8007834:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	689a      	ldr	r2, [r3, #8]
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	4013      	ands	r3, r2
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	429a      	cmp	r2, r3
 8007844:	bf0c      	ite	eq
 8007846:	2301      	moveq	r3, #1
 8007848:	2300      	movne	r3, #0
 800784a:	b2db      	uxtb	r3, r3
 800784c:	461a      	mov	r2, r3
 800784e:	79fb      	ldrb	r3, [r7, #7]
 8007850:	429a      	cmp	r2, r3
 8007852:	d19b      	bne.n	800778c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3720      	adds	r7, #32
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	20000088 	.word	0x20000088

08007864 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b086      	sub	sp, #24
 8007868:	af02      	add	r7, sp, #8
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007878:	d111      	bne.n	800789e <SPI_EndRxTransaction+0x3a>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007882:	d004      	beq.n	800788e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800788c:	d107      	bne.n	800789e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800789c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078a6:	d12a      	bne.n	80078fe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078b0:	d012      	beq.n	80078d8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	9300      	str	r3, [sp, #0]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	2200      	movs	r2, #0
 80078ba:	2180      	movs	r1, #128	; 0x80
 80078bc:	68f8      	ldr	r0, [r7, #12]
 80078be:	f7ff ff49 	bl	8007754 <SPI_WaitFlagStateUntilTimeout>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d02d      	beq.n	8007924 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078cc:	f043 0220 	orr.w	r2, r3, #32
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e026      	b.n	8007926 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	2200      	movs	r2, #0
 80078e0:	2101      	movs	r1, #1
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f7ff ff36 	bl	8007754 <SPI_WaitFlagStateUntilTimeout>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d01a      	beq.n	8007924 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f2:	f043 0220 	orr.w	r2, r3, #32
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80078fa:	2303      	movs	r3, #3
 80078fc:	e013      	b.n	8007926 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2200      	movs	r2, #0
 8007906:	2101      	movs	r1, #1
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f7ff ff23 	bl	8007754 <SPI_WaitFlagStateUntilTimeout>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d007      	beq.n	8007924 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007918:	f043 0220 	orr.w	r2, r3, #32
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007920:	2303      	movs	r3, #3
 8007922:	e000      	b.n	8007926 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
	...

08007930 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b088      	sub	sp, #32
 8007934:	af02      	add	r7, sp, #8
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800793c:	4b1b      	ldr	r3, [pc, #108]	; (80079ac <SPI_EndRxTxTransaction+0x7c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a1b      	ldr	r2, [pc, #108]	; (80079b0 <SPI_EndRxTxTransaction+0x80>)
 8007942:	fba2 2303 	umull	r2, r3, r2, r3
 8007946:	0d5b      	lsrs	r3, r3, #21
 8007948:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800794c:	fb02 f303 	mul.w	r3, r2, r3
 8007950:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800795a:	d112      	bne.n	8007982 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2200      	movs	r2, #0
 8007964:	2180      	movs	r1, #128	; 0x80
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f7ff fef4 	bl	8007754 <SPI_WaitFlagStateUntilTimeout>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d016      	beq.n	80079a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007976:	f043 0220 	orr.w	r2, r3, #32
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e00f      	b.n	80079a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00a      	beq.n	800799e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	3b01      	subs	r3, #1
 800798c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007998:	2b80      	cmp	r3, #128	; 0x80
 800799a:	d0f2      	beq.n	8007982 <SPI_EndRxTxTransaction+0x52>
 800799c:	e000      	b.n	80079a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800799e:	bf00      	nop
  }

  return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	20000088 	.word	0x20000088
 80079b0:	165e9f81 	.word	0x165e9f81

080079b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	e041      	b.n	8007a4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d106      	bne.n	80079e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7fd fb3a 	bl	8005054 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2202      	movs	r2, #2
 80079e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	3304      	adds	r3, #4
 80079f0:	4619      	mov	r1, r3
 80079f2:	4610      	mov	r0, r2
 80079f4:	f000 f9c0 	bl	8007d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3708      	adds	r7, #8
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
	...

08007a54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d001      	beq.n	8007a6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e044      	b.n	8007af6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2202      	movs	r2, #2
 8007a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f042 0201 	orr.w	r2, r2, #1
 8007a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a1e      	ldr	r2, [pc, #120]	; (8007b04 <HAL_TIM_Base_Start_IT+0xb0>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d018      	beq.n	8007ac0 <HAL_TIM_Base_Start_IT+0x6c>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a96:	d013      	beq.n	8007ac0 <HAL_TIM_Base_Start_IT+0x6c>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a1a      	ldr	r2, [pc, #104]	; (8007b08 <HAL_TIM_Base_Start_IT+0xb4>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d00e      	beq.n	8007ac0 <HAL_TIM_Base_Start_IT+0x6c>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a19      	ldr	r2, [pc, #100]	; (8007b0c <HAL_TIM_Base_Start_IT+0xb8>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d009      	beq.n	8007ac0 <HAL_TIM_Base_Start_IT+0x6c>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a17      	ldr	r2, [pc, #92]	; (8007b10 <HAL_TIM_Base_Start_IT+0xbc>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d004      	beq.n	8007ac0 <HAL_TIM_Base_Start_IT+0x6c>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a16      	ldr	r2, [pc, #88]	; (8007b14 <HAL_TIM_Base_Start_IT+0xc0>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d111      	bne.n	8007ae4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f003 0307 	and.w	r3, r3, #7
 8007aca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2b06      	cmp	r3, #6
 8007ad0:	d010      	beq.n	8007af4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f042 0201 	orr.w	r2, r2, #1
 8007ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ae2:	e007      	b.n	8007af4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 0201 	orr.w	r2, r2, #1
 8007af2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	40010000 	.word	0x40010000
 8007b08:	40000400 	.word	0x40000400
 8007b0c:	40000800 	.word	0x40000800
 8007b10:	40000c00 	.word	0x40000c00
 8007b14:	40014000 	.word	0x40014000

08007b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d122      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	f003 0302 	and.w	r3, r3, #2
 8007b38:	2b02      	cmp	r3, #2
 8007b3a:	d11b      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f06f 0202 	mvn.w	r2, #2
 8007b44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	f003 0303 	and.w	r3, r3, #3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d003      	beq.n	8007b62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f8ee 	bl	8007d3c <HAL_TIM_IC_CaptureCallback>
 8007b60:	e005      	b.n	8007b6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f8e0 	bl	8007d28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f8f1 	bl	8007d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	f003 0304 	and.w	r3, r3, #4
 8007b7e:	2b04      	cmp	r3, #4
 8007b80:	d122      	bne.n	8007bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	f003 0304 	and.w	r3, r3, #4
 8007b8c:	2b04      	cmp	r3, #4
 8007b8e:	d11b      	bne.n	8007bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f06f 0204 	mvn.w	r2, #4
 8007b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d003      	beq.n	8007bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 f8c4 	bl	8007d3c <HAL_TIM_IC_CaptureCallback>
 8007bb4:	e005      	b.n	8007bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 f8b6 	bl	8007d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f8c7 	bl	8007d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	f003 0308 	and.w	r3, r3, #8
 8007bd2:	2b08      	cmp	r3, #8
 8007bd4:	d122      	bne.n	8007c1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	f003 0308 	and.w	r3, r3, #8
 8007be0:	2b08      	cmp	r3, #8
 8007be2:	d11b      	bne.n	8007c1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f06f 0208 	mvn.w	r2, #8
 8007bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2204      	movs	r2, #4
 8007bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	f003 0303 	and.w	r3, r3, #3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d003      	beq.n	8007c0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f89a 	bl	8007d3c <HAL_TIM_IC_CaptureCallback>
 8007c08:	e005      	b.n	8007c16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f88c 	bl	8007d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f89d 	bl	8007d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	f003 0310 	and.w	r3, r3, #16
 8007c26:	2b10      	cmp	r3, #16
 8007c28:	d122      	bne.n	8007c70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	f003 0310 	and.w	r3, r3, #16
 8007c34:	2b10      	cmp	r3, #16
 8007c36:	d11b      	bne.n	8007c70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f06f 0210 	mvn.w	r2, #16
 8007c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2208      	movs	r2, #8
 8007c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	69db      	ldr	r3, [r3, #28]
 8007c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d003      	beq.n	8007c5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f870 	bl	8007d3c <HAL_TIM_IC_CaptureCallback>
 8007c5c:	e005      	b.n	8007c6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f862 	bl	8007d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f873 	bl	8007d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d10e      	bne.n	8007c9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f003 0301 	and.w	r3, r3, #1
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d107      	bne.n	8007c9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f06f 0201 	mvn.w	r2, #1
 8007c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7f9 fab4 	bl	8001204 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca6:	2b80      	cmp	r3, #128	; 0x80
 8007ca8:	d10e      	bne.n	8007cc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb4:	2b80      	cmp	r3, #128	; 0x80
 8007cb6:	d107      	bne.n	8007cc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f8e2 	bl	8007e8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cd2:	2b40      	cmp	r3, #64	; 0x40
 8007cd4:	d10e      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce0:	2b40      	cmp	r3, #64	; 0x40
 8007ce2:	d107      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f838 	bl	8007d64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f003 0320 	and.w	r3, r3, #32
 8007cfe:	2b20      	cmp	r3, #32
 8007d00:	d10e      	bne.n	8007d20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	f003 0320 	and.w	r3, r3, #32
 8007d0c:	2b20      	cmp	r3, #32
 8007d0e:	d107      	bne.n	8007d20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f06f 0220 	mvn.w	r2, #32
 8007d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f8ac 	bl	8007e78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a34      	ldr	r2, [pc, #208]	; (8007e5c <TIM_Base_SetConfig+0xe4>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d00f      	beq.n	8007db0 <TIM_Base_SetConfig+0x38>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d96:	d00b      	beq.n	8007db0 <TIM_Base_SetConfig+0x38>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a31      	ldr	r2, [pc, #196]	; (8007e60 <TIM_Base_SetConfig+0xe8>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d007      	beq.n	8007db0 <TIM_Base_SetConfig+0x38>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a30      	ldr	r2, [pc, #192]	; (8007e64 <TIM_Base_SetConfig+0xec>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d003      	beq.n	8007db0 <TIM_Base_SetConfig+0x38>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a2f      	ldr	r2, [pc, #188]	; (8007e68 <TIM_Base_SetConfig+0xf0>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d108      	bne.n	8007dc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a25      	ldr	r2, [pc, #148]	; (8007e5c <TIM_Base_SetConfig+0xe4>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d01b      	beq.n	8007e02 <TIM_Base_SetConfig+0x8a>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dd0:	d017      	beq.n	8007e02 <TIM_Base_SetConfig+0x8a>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a22      	ldr	r2, [pc, #136]	; (8007e60 <TIM_Base_SetConfig+0xe8>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d013      	beq.n	8007e02 <TIM_Base_SetConfig+0x8a>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a21      	ldr	r2, [pc, #132]	; (8007e64 <TIM_Base_SetConfig+0xec>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d00f      	beq.n	8007e02 <TIM_Base_SetConfig+0x8a>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a20      	ldr	r2, [pc, #128]	; (8007e68 <TIM_Base_SetConfig+0xf0>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d00b      	beq.n	8007e02 <TIM_Base_SetConfig+0x8a>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a1f      	ldr	r2, [pc, #124]	; (8007e6c <TIM_Base_SetConfig+0xf4>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d007      	beq.n	8007e02 <TIM_Base_SetConfig+0x8a>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a1e      	ldr	r2, [pc, #120]	; (8007e70 <TIM_Base_SetConfig+0xf8>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d003      	beq.n	8007e02 <TIM_Base_SetConfig+0x8a>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a1d      	ldr	r2, [pc, #116]	; (8007e74 <TIM_Base_SetConfig+0xfc>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d108      	bne.n	8007e14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	689a      	ldr	r2, [r3, #8]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a08      	ldr	r2, [pc, #32]	; (8007e5c <TIM_Base_SetConfig+0xe4>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d103      	bne.n	8007e48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	691a      	ldr	r2, [r3, #16]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	615a      	str	r2, [r3, #20]
}
 8007e4e:	bf00      	nop
 8007e50:	3714      	adds	r7, #20
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	40010000 	.word	0x40010000
 8007e60:	40000400 	.word	0x40000400
 8007e64:	40000800 	.word	0x40000800
 8007e68:	40000c00 	.word	0x40000c00
 8007e6c:	40014000 	.word	0x40014000
 8007e70:	40014400 	.word	0x40014400
 8007e74:	40014800 	.word	0x40014800

08007e78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e03f      	b.n	8007f32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d106      	bne.n	8007ecc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7fd f916 	bl	80050f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2224      	movs	r2, #36	; 0x24
 8007ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68da      	ldr	r2, [r3, #12]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ee2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f929 	bl	800813c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	691a      	ldr	r2, [r3, #16]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ef8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	695a      	ldr	r2, [r3, #20]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68da      	ldr	r2, [r3, #12]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2220      	movs	r2, #32
 8007f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b08a      	sub	sp, #40	; 0x28
 8007f3e:	af02      	add	r7, sp, #8
 8007f40:	60f8      	str	r0, [r7, #12]
 8007f42:	60b9      	str	r1, [r7, #8]
 8007f44:	603b      	str	r3, [r7, #0]
 8007f46:	4613      	mov	r3, r2
 8007f48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b20      	cmp	r3, #32
 8007f58:	d17c      	bne.n	8008054 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <HAL_UART_Transmit+0x2c>
 8007f60:	88fb      	ldrh	r3, [r7, #6]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d101      	bne.n	8007f6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e075      	b.n	8008056 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d101      	bne.n	8007f78 <HAL_UART_Transmit+0x3e>
 8007f74:	2302      	movs	r3, #2
 8007f76:	e06e      	b.n	8008056 <HAL_UART_Transmit+0x11c>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2221      	movs	r2, #33	; 0x21
 8007f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f8e:	f7fd f993 	bl	80052b8 <HAL_GetTick>
 8007f92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	88fa      	ldrh	r2, [r7, #6]
 8007f98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	88fa      	ldrh	r2, [r7, #6]
 8007f9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fa8:	d108      	bne.n	8007fbc <HAL_UART_Transmit+0x82>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d104      	bne.n	8007fbc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	61bb      	str	r3, [r7, #24]
 8007fba:	e003      	b.n	8007fc4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007fcc:	e02a      	b.n	8008024 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	9300      	str	r3, [sp, #0]
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	2180      	movs	r1, #128	; 0x80
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f000 f840 	bl	800805e <UART_WaitOnFlagUntilTimeout>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	e036      	b.n	8008056 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10b      	bne.n	8008006 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ffc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	3302      	adds	r3, #2
 8008002:	61bb      	str	r3, [r7, #24]
 8008004:	e007      	b.n	8008016 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	781a      	ldrb	r2, [r3, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	3301      	adds	r3, #1
 8008014:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800801a:	b29b      	uxth	r3, r3
 800801c:	3b01      	subs	r3, #1
 800801e:	b29a      	uxth	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008028:	b29b      	uxth	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1cf      	bne.n	8007fce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	2200      	movs	r2, #0
 8008036:	2140      	movs	r1, #64	; 0x40
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f000 f810 	bl	800805e <UART_WaitOnFlagUntilTimeout>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008044:	2303      	movs	r3, #3
 8008046:	e006      	b.n	8008056 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2220      	movs	r2, #32
 800804c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	e000      	b.n	8008056 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008054:	2302      	movs	r3, #2
  }
}
 8008056:	4618      	mov	r0, r3
 8008058:	3720      	adds	r7, #32
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b090      	sub	sp, #64	; 0x40
 8008062:	af00      	add	r7, sp, #0
 8008064:	60f8      	str	r0, [r7, #12]
 8008066:	60b9      	str	r1, [r7, #8]
 8008068:	603b      	str	r3, [r7, #0]
 800806a:	4613      	mov	r3, r2
 800806c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800806e:	e050      	b.n	8008112 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008076:	d04c      	beq.n	8008112 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008078:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800807a:	2b00      	cmp	r3, #0
 800807c:	d007      	beq.n	800808e <UART_WaitOnFlagUntilTimeout+0x30>
 800807e:	f7fd f91b 	bl	80052b8 <HAL_GetTick>
 8008082:	4602      	mov	r2, r0
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800808a:	429a      	cmp	r2, r3
 800808c:	d241      	bcs.n	8008112 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	330c      	adds	r3, #12
 8008094:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008098:	e853 3f00 	ldrex	r3, [r3]
 800809c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	330c      	adds	r3, #12
 80080ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80080ae:	637a      	str	r2, [r7, #52]	; 0x34
 80080b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080b6:	e841 2300 	strex	r3, r2, [r1]
 80080ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1e5      	bne.n	800808e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	3314      	adds	r3, #20
 80080c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	e853 3f00 	ldrex	r3, [r3]
 80080d0:	613b      	str	r3, [r7, #16]
   return(result);
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	f023 0301 	bic.w	r3, r3, #1
 80080d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	3314      	adds	r3, #20
 80080e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080e2:	623a      	str	r2, [r7, #32]
 80080e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e6:	69f9      	ldr	r1, [r7, #28]
 80080e8:	6a3a      	ldr	r2, [r7, #32]
 80080ea:	e841 2300 	strex	r3, r2, [r1]
 80080ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1e5      	bne.n	80080c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2220      	movs	r2, #32
 80080fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2220      	movs	r2, #32
 8008102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e00f      	b.n	8008132 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	4013      	ands	r3, r2
 800811c:	68ba      	ldr	r2, [r7, #8]
 800811e:	429a      	cmp	r2, r3
 8008120:	bf0c      	ite	eq
 8008122:	2301      	moveq	r3, #1
 8008124:	2300      	movne	r3, #0
 8008126:	b2db      	uxtb	r3, r3
 8008128:	461a      	mov	r2, r3
 800812a:	79fb      	ldrb	r3, [r7, #7]
 800812c:	429a      	cmp	r2, r3
 800812e:	d09f      	beq.n	8008070 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3740      	adds	r7, #64	; 0x40
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
	...

0800813c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800813c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008140:	b0c0      	sub	sp, #256	; 0x100
 8008142:	af00      	add	r7, sp, #0
 8008144:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008158:	68d9      	ldr	r1, [r3, #12]
 800815a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	ea40 0301 	orr.w	r3, r0, r1
 8008164:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800816a:	689a      	ldr	r2, [r3, #8]
 800816c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008170:	691b      	ldr	r3, [r3, #16]
 8008172:	431a      	orrs	r2, r3
 8008174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	431a      	orrs	r2, r3
 800817c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008180:	69db      	ldr	r3, [r3, #28]
 8008182:	4313      	orrs	r3, r2
 8008184:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68db      	ldr	r3, [r3, #12]
 8008190:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008194:	f021 010c 	bic.w	r1, r1, #12
 8008198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80081a2:	430b      	orrs	r3, r1
 80081a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80081a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80081b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081b6:	6999      	ldr	r1, [r3, #24]
 80081b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	ea40 0301 	orr.w	r3, r0, r1
 80081c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80081c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	4b8f      	ldr	r3, [pc, #572]	; (8008408 <UART_SetConfig+0x2cc>)
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d005      	beq.n	80081dc <UART_SetConfig+0xa0>
 80081d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	4b8d      	ldr	r3, [pc, #564]	; (800840c <UART_SetConfig+0x2d0>)
 80081d8:	429a      	cmp	r2, r3
 80081da:	d104      	bne.n	80081e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80081dc:	f7fe fe2e 	bl	8006e3c <HAL_RCC_GetPCLK2Freq>
 80081e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80081e4:	e003      	b.n	80081ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80081e6:	f7fe fe15 	bl	8006e14 <HAL_RCC_GetPCLK1Freq>
 80081ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081f2:	69db      	ldr	r3, [r3, #28]
 80081f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081f8:	f040 810c 	bne.w	8008414 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008200:	2200      	movs	r2, #0
 8008202:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008206:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800820a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800820e:	4622      	mov	r2, r4
 8008210:	462b      	mov	r3, r5
 8008212:	1891      	adds	r1, r2, r2
 8008214:	65b9      	str	r1, [r7, #88]	; 0x58
 8008216:	415b      	adcs	r3, r3
 8008218:	65fb      	str	r3, [r7, #92]	; 0x5c
 800821a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800821e:	4621      	mov	r1, r4
 8008220:	eb12 0801 	adds.w	r8, r2, r1
 8008224:	4629      	mov	r1, r5
 8008226:	eb43 0901 	adc.w	r9, r3, r1
 800822a:	f04f 0200 	mov.w	r2, #0
 800822e:	f04f 0300 	mov.w	r3, #0
 8008232:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008236:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800823a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800823e:	4690      	mov	r8, r2
 8008240:	4699      	mov	r9, r3
 8008242:	4623      	mov	r3, r4
 8008244:	eb18 0303 	adds.w	r3, r8, r3
 8008248:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800824c:	462b      	mov	r3, r5
 800824e:	eb49 0303 	adc.w	r3, r9, r3
 8008252:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008262:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008266:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800826a:	460b      	mov	r3, r1
 800826c:	18db      	adds	r3, r3, r3
 800826e:	653b      	str	r3, [r7, #80]	; 0x50
 8008270:	4613      	mov	r3, r2
 8008272:	eb42 0303 	adc.w	r3, r2, r3
 8008276:	657b      	str	r3, [r7, #84]	; 0x54
 8008278:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800827c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008280:	f7f8 fd0a 	bl	8000c98 <__aeabi_uldivmod>
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	4b61      	ldr	r3, [pc, #388]	; (8008410 <UART_SetConfig+0x2d4>)
 800828a:	fba3 2302 	umull	r2, r3, r3, r2
 800828e:	095b      	lsrs	r3, r3, #5
 8008290:	011c      	lsls	r4, r3, #4
 8008292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008296:	2200      	movs	r2, #0
 8008298:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800829c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80082a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80082a4:	4642      	mov	r2, r8
 80082a6:	464b      	mov	r3, r9
 80082a8:	1891      	adds	r1, r2, r2
 80082aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80082ac:	415b      	adcs	r3, r3
 80082ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80082b4:	4641      	mov	r1, r8
 80082b6:	eb12 0a01 	adds.w	sl, r2, r1
 80082ba:	4649      	mov	r1, r9
 80082bc:	eb43 0b01 	adc.w	fp, r3, r1
 80082c0:	f04f 0200 	mov.w	r2, #0
 80082c4:	f04f 0300 	mov.w	r3, #0
 80082c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80082cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80082d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082d4:	4692      	mov	sl, r2
 80082d6:	469b      	mov	fp, r3
 80082d8:	4643      	mov	r3, r8
 80082da:	eb1a 0303 	adds.w	r3, sl, r3
 80082de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80082e2:	464b      	mov	r3, r9
 80082e4:	eb4b 0303 	adc.w	r3, fp, r3
 80082e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80082ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80082fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008300:	460b      	mov	r3, r1
 8008302:	18db      	adds	r3, r3, r3
 8008304:	643b      	str	r3, [r7, #64]	; 0x40
 8008306:	4613      	mov	r3, r2
 8008308:	eb42 0303 	adc.w	r3, r2, r3
 800830c:	647b      	str	r3, [r7, #68]	; 0x44
 800830e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008312:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008316:	f7f8 fcbf 	bl	8000c98 <__aeabi_uldivmod>
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	4611      	mov	r1, r2
 8008320:	4b3b      	ldr	r3, [pc, #236]	; (8008410 <UART_SetConfig+0x2d4>)
 8008322:	fba3 2301 	umull	r2, r3, r3, r1
 8008326:	095b      	lsrs	r3, r3, #5
 8008328:	2264      	movs	r2, #100	; 0x64
 800832a:	fb02 f303 	mul.w	r3, r2, r3
 800832e:	1acb      	subs	r3, r1, r3
 8008330:	00db      	lsls	r3, r3, #3
 8008332:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008336:	4b36      	ldr	r3, [pc, #216]	; (8008410 <UART_SetConfig+0x2d4>)
 8008338:	fba3 2302 	umull	r2, r3, r3, r2
 800833c:	095b      	lsrs	r3, r3, #5
 800833e:	005b      	lsls	r3, r3, #1
 8008340:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008344:	441c      	add	r4, r3
 8008346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800834a:	2200      	movs	r2, #0
 800834c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008350:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008354:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008358:	4642      	mov	r2, r8
 800835a:	464b      	mov	r3, r9
 800835c:	1891      	adds	r1, r2, r2
 800835e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008360:	415b      	adcs	r3, r3
 8008362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008364:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008368:	4641      	mov	r1, r8
 800836a:	1851      	adds	r1, r2, r1
 800836c:	6339      	str	r1, [r7, #48]	; 0x30
 800836e:	4649      	mov	r1, r9
 8008370:	414b      	adcs	r3, r1
 8008372:	637b      	str	r3, [r7, #52]	; 0x34
 8008374:	f04f 0200 	mov.w	r2, #0
 8008378:	f04f 0300 	mov.w	r3, #0
 800837c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008380:	4659      	mov	r1, fp
 8008382:	00cb      	lsls	r3, r1, #3
 8008384:	4651      	mov	r1, sl
 8008386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800838a:	4651      	mov	r1, sl
 800838c:	00ca      	lsls	r2, r1, #3
 800838e:	4610      	mov	r0, r2
 8008390:	4619      	mov	r1, r3
 8008392:	4603      	mov	r3, r0
 8008394:	4642      	mov	r2, r8
 8008396:	189b      	adds	r3, r3, r2
 8008398:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800839c:	464b      	mov	r3, r9
 800839e:	460a      	mov	r2, r1
 80083a0:	eb42 0303 	adc.w	r3, r2, r3
 80083a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80083b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80083b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80083bc:	460b      	mov	r3, r1
 80083be:	18db      	adds	r3, r3, r3
 80083c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80083c2:	4613      	mov	r3, r2
 80083c4:	eb42 0303 	adc.w	r3, r2, r3
 80083c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80083d2:	f7f8 fc61 	bl	8000c98 <__aeabi_uldivmod>
 80083d6:	4602      	mov	r2, r0
 80083d8:	460b      	mov	r3, r1
 80083da:	4b0d      	ldr	r3, [pc, #52]	; (8008410 <UART_SetConfig+0x2d4>)
 80083dc:	fba3 1302 	umull	r1, r3, r3, r2
 80083e0:	095b      	lsrs	r3, r3, #5
 80083e2:	2164      	movs	r1, #100	; 0x64
 80083e4:	fb01 f303 	mul.w	r3, r1, r3
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	00db      	lsls	r3, r3, #3
 80083ec:	3332      	adds	r3, #50	; 0x32
 80083ee:	4a08      	ldr	r2, [pc, #32]	; (8008410 <UART_SetConfig+0x2d4>)
 80083f0:	fba2 2303 	umull	r2, r3, r2, r3
 80083f4:	095b      	lsrs	r3, r3, #5
 80083f6:	f003 0207 	and.w	r2, r3, #7
 80083fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4422      	add	r2, r4
 8008402:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008404:	e105      	b.n	8008612 <UART_SetConfig+0x4d6>
 8008406:	bf00      	nop
 8008408:	40011000 	.word	0x40011000
 800840c:	40011400 	.word	0x40011400
 8008410:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008418:	2200      	movs	r2, #0
 800841a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800841e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008422:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008426:	4642      	mov	r2, r8
 8008428:	464b      	mov	r3, r9
 800842a:	1891      	adds	r1, r2, r2
 800842c:	6239      	str	r1, [r7, #32]
 800842e:	415b      	adcs	r3, r3
 8008430:	627b      	str	r3, [r7, #36]	; 0x24
 8008432:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008436:	4641      	mov	r1, r8
 8008438:	1854      	adds	r4, r2, r1
 800843a:	4649      	mov	r1, r9
 800843c:	eb43 0501 	adc.w	r5, r3, r1
 8008440:	f04f 0200 	mov.w	r2, #0
 8008444:	f04f 0300 	mov.w	r3, #0
 8008448:	00eb      	lsls	r3, r5, #3
 800844a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800844e:	00e2      	lsls	r2, r4, #3
 8008450:	4614      	mov	r4, r2
 8008452:	461d      	mov	r5, r3
 8008454:	4643      	mov	r3, r8
 8008456:	18e3      	adds	r3, r4, r3
 8008458:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800845c:	464b      	mov	r3, r9
 800845e:	eb45 0303 	adc.w	r3, r5, r3
 8008462:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008472:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008476:	f04f 0200 	mov.w	r2, #0
 800847a:	f04f 0300 	mov.w	r3, #0
 800847e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008482:	4629      	mov	r1, r5
 8008484:	008b      	lsls	r3, r1, #2
 8008486:	4621      	mov	r1, r4
 8008488:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800848c:	4621      	mov	r1, r4
 800848e:	008a      	lsls	r2, r1, #2
 8008490:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008494:	f7f8 fc00 	bl	8000c98 <__aeabi_uldivmod>
 8008498:	4602      	mov	r2, r0
 800849a:	460b      	mov	r3, r1
 800849c:	4b60      	ldr	r3, [pc, #384]	; (8008620 <UART_SetConfig+0x4e4>)
 800849e:	fba3 2302 	umull	r2, r3, r3, r2
 80084a2:	095b      	lsrs	r3, r3, #5
 80084a4:	011c      	lsls	r4, r3, #4
 80084a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084aa:	2200      	movs	r2, #0
 80084ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80084b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80084b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80084b8:	4642      	mov	r2, r8
 80084ba:	464b      	mov	r3, r9
 80084bc:	1891      	adds	r1, r2, r2
 80084be:	61b9      	str	r1, [r7, #24]
 80084c0:	415b      	adcs	r3, r3
 80084c2:	61fb      	str	r3, [r7, #28]
 80084c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084c8:	4641      	mov	r1, r8
 80084ca:	1851      	adds	r1, r2, r1
 80084cc:	6139      	str	r1, [r7, #16]
 80084ce:	4649      	mov	r1, r9
 80084d0:	414b      	adcs	r3, r1
 80084d2:	617b      	str	r3, [r7, #20]
 80084d4:	f04f 0200 	mov.w	r2, #0
 80084d8:	f04f 0300 	mov.w	r3, #0
 80084dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80084e0:	4659      	mov	r1, fp
 80084e2:	00cb      	lsls	r3, r1, #3
 80084e4:	4651      	mov	r1, sl
 80084e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084ea:	4651      	mov	r1, sl
 80084ec:	00ca      	lsls	r2, r1, #3
 80084ee:	4610      	mov	r0, r2
 80084f0:	4619      	mov	r1, r3
 80084f2:	4603      	mov	r3, r0
 80084f4:	4642      	mov	r2, r8
 80084f6:	189b      	adds	r3, r3, r2
 80084f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80084fc:	464b      	mov	r3, r9
 80084fe:	460a      	mov	r2, r1
 8008500:	eb42 0303 	adc.w	r3, r2, r3
 8008504:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	67bb      	str	r3, [r7, #120]	; 0x78
 8008512:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008514:	f04f 0200 	mov.w	r2, #0
 8008518:	f04f 0300 	mov.w	r3, #0
 800851c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008520:	4649      	mov	r1, r9
 8008522:	008b      	lsls	r3, r1, #2
 8008524:	4641      	mov	r1, r8
 8008526:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800852a:	4641      	mov	r1, r8
 800852c:	008a      	lsls	r2, r1, #2
 800852e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008532:	f7f8 fbb1 	bl	8000c98 <__aeabi_uldivmod>
 8008536:	4602      	mov	r2, r0
 8008538:	460b      	mov	r3, r1
 800853a:	4b39      	ldr	r3, [pc, #228]	; (8008620 <UART_SetConfig+0x4e4>)
 800853c:	fba3 1302 	umull	r1, r3, r3, r2
 8008540:	095b      	lsrs	r3, r3, #5
 8008542:	2164      	movs	r1, #100	; 0x64
 8008544:	fb01 f303 	mul.w	r3, r1, r3
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	011b      	lsls	r3, r3, #4
 800854c:	3332      	adds	r3, #50	; 0x32
 800854e:	4a34      	ldr	r2, [pc, #208]	; (8008620 <UART_SetConfig+0x4e4>)
 8008550:	fba2 2303 	umull	r2, r3, r2, r3
 8008554:	095b      	lsrs	r3, r3, #5
 8008556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800855a:	441c      	add	r4, r3
 800855c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008560:	2200      	movs	r2, #0
 8008562:	673b      	str	r3, [r7, #112]	; 0x70
 8008564:	677a      	str	r2, [r7, #116]	; 0x74
 8008566:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800856a:	4642      	mov	r2, r8
 800856c:	464b      	mov	r3, r9
 800856e:	1891      	adds	r1, r2, r2
 8008570:	60b9      	str	r1, [r7, #8]
 8008572:	415b      	adcs	r3, r3
 8008574:	60fb      	str	r3, [r7, #12]
 8008576:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800857a:	4641      	mov	r1, r8
 800857c:	1851      	adds	r1, r2, r1
 800857e:	6039      	str	r1, [r7, #0]
 8008580:	4649      	mov	r1, r9
 8008582:	414b      	adcs	r3, r1
 8008584:	607b      	str	r3, [r7, #4]
 8008586:	f04f 0200 	mov.w	r2, #0
 800858a:	f04f 0300 	mov.w	r3, #0
 800858e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008592:	4659      	mov	r1, fp
 8008594:	00cb      	lsls	r3, r1, #3
 8008596:	4651      	mov	r1, sl
 8008598:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800859c:	4651      	mov	r1, sl
 800859e:	00ca      	lsls	r2, r1, #3
 80085a0:	4610      	mov	r0, r2
 80085a2:	4619      	mov	r1, r3
 80085a4:	4603      	mov	r3, r0
 80085a6:	4642      	mov	r2, r8
 80085a8:	189b      	adds	r3, r3, r2
 80085aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80085ac:	464b      	mov	r3, r9
 80085ae:	460a      	mov	r2, r1
 80085b0:	eb42 0303 	adc.w	r3, r2, r3
 80085b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	663b      	str	r3, [r7, #96]	; 0x60
 80085c0:	667a      	str	r2, [r7, #100]	; 0x64
 80085c2:	f04f 0200 	mov.w	r2, #0
 80085c6:	f04f 0300 	mov.w	r3, #0
 80085ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80085ce:	4649      	mov	r1, r9
 80085d0:	008b      	lsls	r3, r1, #2
 80085d2:	4641      	mov	r1, r8
 80085d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80085d8:	4641      	mov	r1, r8
 80085da:	008a      	lsls	r2, r1, #2
 80085dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80085e0:	f7f8 fb5a 	bl	8000c98 <__aeabi_uldivmod>
 80085e4:	4602      	mov	r2, r0
 80085e6:	460b      	mov	r3, r1
 80085e8:	4b0d      	ldr	r3, [pc, #52]	; (8008620 <UART_SetConfig+0x4e4>)
 80085ea:	fba3 1302 	umull	r1, r3, r3, r2
 80085ee:	095b      	lsrs	r3, r3, #5
 80085f0:	2164      	movs	r1, #100	; 0x64
 80085f2:	fb01 f303 	mul.w	r3, r1, r3
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	011b      	lsls	r3, r3, #4
 80085fa:	3332      	adds	r3, #50	; 0x32
 80085fc:	4a08      	ldr	r2, [pc, #32]	; (8008620 <UART_SetConfig+0x4e4>)
 80085fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008602:	095b      	lsrs	r3, r3, #5
 8008604:	f003 020f 	and.w	r2, r3, #15
 8008608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4422      	add	r2, r4
 8008610:	609a      	str	r2, [r3, #8]
}
 8008612:	bf00      	nop
 8008614:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008618:	46bd      	mov	sp, r7
 800861a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800861e:	bf00      	nop
 8008620:	51eb851f 	.word	0x51eb851f

08008624 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800862c:	4b22      	ldr	r3, [pc, #136]	; (80086b8 <WIZCHIP_READ+0x94>)
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	4798      	blx	r3
   WIZCHIP.CS._select();
 8008632:	4b21      	ldr	r3, [pc, #132]	; (80086b8 <WIZCHIP_READ+0x94>)
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8008638:	4b1f      	ldr	r3, [pc, #124]	; (80086b8 <WIZCHIP_READ+0x94>)
 800863a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863c:	2b00      	cmp	r3, #0
 800863e:	d003      	beq.n	8008648 <WIZCHIP_READ+0x24>
 8008640:	4b1d      	ldr	r3, [pc, #116]	; (80086b8 <WIZCHIP_READ+0x94>)
 8008642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008644:	2b00      	cmp	r3, #0
 8008646:	d114      	bne.n	8008672 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8008648:	4b1b      	ldr	r3, [pc, #108]	; (80086b8 <WIZCHIP_READ+0x94>)
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	0c12      	lsrs	r2, r2, #16
 8008650:	b2d2      	uxtb	r2, r2
 8008652:	4610      	mov	r0, r2
 8008654:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8008656:	4b18      	ldr	r3, [pc, #96]	; (80086b8 <WIZCHIP_READ+0x94>)
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	0a12      	lsrs	r2, r2, #8
 800865e:	b2d2      	uxtb	r2, r2
 8008660:	4610      	mov	r0, r2
 8008662:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8008664:	4b14      	ldr	r3, [pc, #80]	; (80086b8 <WIZCHIP_READ+0x94>)
 8008666:	6a1b      	ldr	r3, [r3, #32]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	b2d2      	uxtb	r2, r2
 800866c:	4610      	mov	r0, r2
 800866e:	4798      	blx	r3
 8008670:	e011      	b.n	8008696 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	0c1b      	lsrs	r3, r3, #16
 8008676:	b2db      	uxtb	r3, r3
 8008678:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	0a1b      	lsrs	r3, r3, #8
 800867e:	b2db      	uxtb	r3, r3
 8008680:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	b2db      	uxtb	r3, r3
 8008686:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8008688:	4b0b      	ldr	r3, [pc, #44]	; (80086b8 <WIZCHIP_READ+0x94>)
 800868a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868c:	f107 020c 	add.w	r2, r7, #12
 8008690:	2103      	movs	r1, #3
 8008692:	4610      	mov	r0, r2
 8008694:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8008696:	4b08      	ldr	r3, [pc, #32]	; (80086b8 <WIZCHIP_READ+0x94>)
 8008698:	69db      	ldr	r3, [r3, #28]
 800869a:	4798      	blx	r3
 800869c:	4603      	mov	r3, r0
 800869e:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 80086a0:	4b05      	ldr	r3, [pc, #20]	; (80086b8 <WIZCHIP_READ+0x94>)
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80086a6:	4b04      	ldr	r3, [pc, #16]	; (80086b8 <WIZCHIP_READ+0x94>)
 80086a8:	691b      	ldr	r3, [r3, #16]
 80086aa:	4798      	blx	r3
   return ret;
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	20000094 	.word	0x20000094

080086bc <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	460b      	mov	r3, r1
 80086c6:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80086c8:	4b22      	ldr	r3, [pc, #136]	; (8008754 <WIZCHIP_WRITE+0x98>)
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	4798      	blx	r3
   WIZCHIP.CS._select();
 80086ce:	4b21      	ldr	r3, [pc, #132]	; (8008754 <WIZCHIP_WRITE+0x98>)
 80086d0:	695b      	ldr	r3, [r3, #20]
 80086d2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f043 0304 	orr.w	r3, r3, #4
 80086da:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80086dc:	4b1d      	ldr	r3, [pc, #116]	; (8008754 <WIZCHIP_WRITE+0x98>)
 80086de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d119      	bne.n	8008718 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80086e4:	4b1b      	ldr	r3, [pc, #108]	; (8008754 <WIZCHIP_WRITE+0x98>)
 80086e6:	6a1b      	ldr	r3, [r3, #32]
 80086e8:	687a      	ldr	r2, [r7, #4]
 80086ea:	0c12      	lsrs	r2, r2, #16
 80086ec:	b2d2      	uxtb	r2, r2
 80086ee:	4610      	mov	r0, r2
 80086f0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80086f2:	4b18      	ldr	r3, [pc, #96]	; (8008754 <WIZCHIP_WRITE+0x98>)
 80086f4:	6a1b      	ldr	r3, [r3, #32]
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	0a12      	lsrs	r2, r2, #8
 80086fa:	b2d2      	uxtb	r2, r2
 80086fc:	4610      	mov	r0, r2
 80086fe:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8008700:	4b14      	ldr	r3, [pc, #80]	; (8008754 <WIZCHIP_WRITE+0x98>)
 8008702:	6a1b      	ldr	r3, [r3, #32]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	b2d2      	uxtb	r2, r2
 8008708:	4610      	mov	r0, r2
 800870a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800870c:	4b11      	ldr	r3, [pc, #68]	; (8008754 <WIZCHIP_WRITE+0x98>)
 800870e:	6a1b      	ldr	r3, [r3, #32]
 8008710:	78fa      	ldrb	r2, [r7, #3]
 8008712:	4610      	mov	r0, r2
 8008714:	4798      	blx	r3
 8008716:	e013      	b.n	8008740 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	0c1b      	lsrs	r3, r3, #16
 800871c:	b2db      	uxtb	r3, r3
 800871e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	0a1b      	lsrs	r3, r3, #8
 8008724:	b2db      	uxtb	r3, r3
 8008726:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	b2db      	uxtb	r3, r3
 800872c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800872e:	78fb      	ldrb	r3, [r7, #3]
 8008730:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8008732:	4b08      	ldr	r3, [pc, #32]	; (8008754 <WIZCHIP_WRITE+0x98>)
 8008734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008736:	f107 020c 	add.w	r2, r7, #12
 800873a:	2104      	movs	r1, #4
 800873c:	4610      	mov	r0, r2
 800873e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8008740:	4b04      	ldr	r3, [pc, #16]	; (8008754 <WIZCHIP_WRITE+0x98>)
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8008746:	4b03      	ldr	r3, [pc, #12]	; (8008754 <WIZCHIP_WRITE+0x98>)
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	4798      	blx	r3
}
 800874c:	bf00      	nop
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	20000094 	.word	0x20000094

08008758 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8008758:	b590      	push	{r4, r7, lr}
 800875a:	b087      	sub	sp, #28
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	4613      	mov	r3, r2
 8008764:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8008766:	4b2b      	ldr	r3, [pc, #172]	; (8008814 <WIZCHIP_READ_BUF+0xbc>)
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800876c:	4b29      	ldr	r3, [pc, #164]	; (8008814 <WIZCHIP_READ_BUF+0xbc>)
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8008772:	4b28      	ldr	r3, [pc, #160]	; (8008814 <WIZCHIP_READ_BUF+0xbc>)
 8008774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008776:	2b00      	cmp	r3, #0
 8008778:	d003      	beq.n	8008782 <WIZCHIP_READ_BUF+0x2a>
 800877a:	4b26      	ldr	r3, [pc, #152]	; (8008814 <WIZCHIP_READ_BUF+0xbc>)
 800877c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877e:	2b00      	cmp	r3, #0
 8008780:	d126      	bne.n	80087d0 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8008782:	4b24      	ldr	r3, [pc, #144]	; (8008814 <WIZCHIP_READ_BUF+0xbc>)
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	0c12      	lsrs	r2, r2, #16
 800878a:	b2d2      	uxtb	r2, r2
 800878c:	4610      	mov	r0, r2
 800878e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8008790:	4b20      	ldr	r3, [pc, #128]	; (8008814 <WIZCHIP_READ_BUF+0xbc>)
 8008792:	6a1b      	ldr	r3, [r3, #32]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	0a12      	lsrs	r2, r2, #8
 8008798:	b2d2      	uxtb	r2, r2
 800879a:	4610      	mov	r0, r2
 800879c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800879e:	4b1d      	ldr	r3, [pc, #116]	; (8008814 <WIZCHIP_READ_BUF+0xbc>)
 80087a0:	6a1b      	ldr	r3, [r3, #32]
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	b2d2      	uxtb	r2, r2
 80087a6:	4610      	mov	r0, r2
 80087a8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80087aa:	2300      	movs	r3, #0
 80087ac:	82fb      	strh	r3, [r7, #22]
 80087ae:	e00a      	b.n	80087c6 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80087b0:	4b18      	ldr	r3, [pc, #96]	; (8008814 <WIZCHIP_READ_BUF+0xbc>)
 80087b2:	69db      	ldr	r3, [r3, #28]
 80087b4:	8afa      	ldrh	r2, [r7, #22]
 80087b6:	68b9      	ldr	r1, [r7, #8]
 80087b8:	188c      	adds	r4, r1, r2
 80087ba:	4798      	blx	r3
 80087bc:	4603      	mov	r3, r0
 80087be:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80087c0:	8afb      	ldrh	r3, [r7, #22]
 80087c2:	3301      	adds	r3, #1
 80087c4:	82fb      	strh	r3, [r7, #22]
 80087c6:	8afa      	ldrh	r2, [r7, #22]
 80087c8:	88fb      	ldrh	r3, [r7, #6]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d3f0      	bcc.n	80087b0 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80087ce:	e017      	b.n	8008800 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	0c1b      	lsrs	r3, r3, #16
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	0a1b      	lsrs	r3, r3, #8
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80087e6:	4b0b      	ldr	r3, [pc, #44]	; (8008814 <WIZCHIP_READ_BUF+0xbc>)
 80087e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ea:	f107 0210 	add.w	r2, r7, #16
 80087ee:	2103      	movs	r1, #3
 80087f0:	4610      	mov	r0, r2
 80087f2:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80087f4:	4b07      	ldr	r3, [pc, #28]	; (8008814 <WIZCHIP_READ_BUF+0xbc>)
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	88fa      	ldrh	r2, [r7, #6]
 80087fa:	4611      	mov	r1, r2
 80087fc:	68b8      	ldr	r0, [r7, #8]
 80087fe:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8008800:	4b04      	ldr	r3, [pc, #16]	; (8008814 <WIZCHIP_READ_BUF+0xbc>)
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8008806:	4b03      	ldr	r3, [pc, #12]	; (8008814 <WIZCHIP_READ_BUF+0xbc>)
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	4798      	blx	r3
}
 800880c:	bf00      	nop
 800880e:	371c      	adds	r7, #28
 8008810:	46bd      	mov	sp, r7
 8008812:	bd90      	pop	{r4, r7, pc}
 8008814:	20000094 	.word	0x20000094

08008818 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	4613      	mov	r3, r2
 8008824:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8008826:	4b2b      	ldr	r3, [pc, #172]	; (80088d4 <WIZCHIP_WRITE_BUF+0xbc>)
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800882c:	4b29      	ldr	r3, [pc, #164]	; (80088d4 <WIZCHIP_WRITE_BUF+0xbc>)
 800882e:	695b      	ldr	r3, [r3, #20]
 8008830:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f043 0304 	orr.w	r3, r3, #4
 8008838:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800883a:	4b26      	ldr	r3, [pc, #152]	; (80088d4 <WIZCHIP_WRITE_BUF+0xbc>)
 800883c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883e:	2b00      	cmp	r3, #0
 8008840:	d126      	bne.n	8008890 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8008842:	4b24      	ldr	r3, [pc, #144]	; (80088d4 <WIZCHIP_WRITE_BUF+0xbc>)
 8008844:	6a1b      	ldr	r3, [r3, #32]
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	0c12      	lsrs	r2, r2, #16
 800884a:	b2d2      	uxtb	r2, r2
 800884c:	4610      	mov	r0, r2
 800884e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8008850:	4b20      	ldr	r3, [pc, #128]	; (80088d4 <WIZCHIP_WRITE_BUF+0xbc>)
 8008852:	6a1b      	ldr	r3, [r3, #32]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	0a12      	lsrs	r2, r2, #8
 8008858:	b2d2      	uxtb	r2, r2
 800885a:	4610      	mov	r0, r2
 800885c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800885e:	4b1d      	ldr	r3, [pc, #116]	; (80088d4 <WIZCHIP_WRITE_BUF+0xbc>)
 8008860:	6a1b      	ldr	r3, [r3, #32]
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	b2d2      	uxtb	r2, r2
 8008866:	4610      	mov	r0, r2
 8008868:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800886a:	2300      	movs	r3, #0
 800886c:	82fb      	strh	r3, [r7, #22]
 800886e:	e00a      	b.n	8008886 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8008870:	4b18      	ldr	r3, [pc, #96]	; (80088d4 <WIZCHIP_WRITE_BUF+0xbc>)
 8008872:	6a1b      	ldr	r3, [r3, #32]
 8008874:	8afa      	ldrh	r2, [r7, #22]
 8008876:	68b9      	ldr	r1, [r7, #8]
 8008878:	440a      	add	r2, r1
 800887a:	7812      	ldrb	r2, [r2, #0]
 800887c:	4610      	mov	r0, r2
 800887e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8008880:	8afb      	ldrh	r3, [r7, #22]
 8008882:	3301      	adds	r3, #1
 8008884:	82fb      	strh	r3, [r7, #22]
 8008886:	8afa      	ldrh	r2, [r7, #22]
 8008888:	88fb      	ldrh	r3, [r7, #6]
 800888a:	429a      	cmp	r2, r3
 800888c:	d3f0      	bcc.n	8008870 <WIZCHIP_WRITE_BUF+0x58>
 800888e:	e017      	b.n	80088c0 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	0c1b      	lsrs	r3, r3, #16
 8008894:	b2db      	uxtb	r3, r3
 8008896:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	0a1b      	lsrs	r3, r3, #8
 800889c:	b2db      	uxtb	r3, r3
 800889e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80088a6:	4b0b      	ldr	r3, [pc, #44]	; (80088d4 <WIZCHIP_WRITE_BUF+0xbc>)
 80088a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088aa:	f107 0210 	add.w	r2, r7, #16
 80088ae:	2103      	movs	r1, #3
 80088b0:	4610      	mov	r0, r2
 80088b2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80088b4:	4b07      	ldr	r3, [pc, #28]	; (80088d4 <WIZCHIP_WRITE_BUF+0xbc>)
 80088b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b8:	88fa      	ldrh	r2, [r7, #6]
 80088ba:	4611      	mov	r1, r2
 80088bc:	68b8      	ldr	r0, [r7, #8]
 80088be:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80088c0:	4b04      	ldr	r3, [pc, #16]	; (80088d4 <WIZCHIP_WRITE_BUF+0xbc>)
 80088c2:	699b      	ldr	r3, [r3, #24]
 80088c4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80088c6:	4b03      	ldr	r3, [pc, #12]	; (80088d4 <WIZCHIP_WRITE_BUF+0xbc>)
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	4798      	blx	r3
}
 80088cc:	bf00      	nop
 80088ce:	3718      	adds	r7, #24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	20000094 	.word	0x20000094

080088d8 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80088d8:	b590      	push	{r4, r7, lr}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	4603      	mov	r3, r0
 80088e0:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80088e2:	2300      	movs	r3, #0
 80088e4:	81fb      	strh	r3, [r7, #14]
 80088e6:	2300      	movs	r3, #0
 80088e8:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80088ea:	79fb      	ldrb	r3, [r7, #7]
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	3301      	adds	r3, #1
 80088f0:	00db      	lsls	r3, r3, #3
 80088f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7ff fe94 	bl	8008624 <WIZCHIP_READ>
 80088fc:	4603      	mov	r3, r0
 80088fe:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8008900:	89bb      	ldrh	r3, [r7, #12]
 8008902:	021b      	lsls	r3, r3, #8
 8008904:	b29c      	uxth	r4, r3
 8008906:	79fb      	ldrb	r3, [r7, #7]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	3301      	adds	r3, #1
 800890c:	00db      	lsls	r3, r3, #3
 800890e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff fe86 	bl	8008624 <WIZCHIP_READ>
 8008918:	4603      	mov	r3, r0
 800891a:	b29b      	uxth	r3, r3
 800891c:	4423      	add	r3, r4
 800891e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8008920:	89bb      	ldrh	r3, [r7, #12]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d01a      	beq.n	800895c <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8008926:	79fb      	ldrb	r3, [r7, #7]
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	3301      	adds	r3, #1
 800892c:	00db      	lsls	r3, r3, #3
 800892e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8008932:	4618      	mov	r0, r3
 8008934:	f7ff fe76 	bl	8008624 <WIZCHIP_READ>
 8008938:	4603      	mov	r3, r0
 800893a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800893c:	89fb      	ldrh	r3, [r7, #14]
 800893e:	021b      	lsls	r3, r3, #8
 8008940:	b29c      	uxth	r4, r3
 8008942:	79fb      	ldrb	r3, [r7, #7]
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	3301      	adds	r3, #1
 8008948:	00db      	lsls	r3, r3, #3
 800894a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800894e:	4618      	mov	r0, r3
 8008950:	f7ff fe68 	bl	8008624 <WIZCHIP_READ>
 8008954:	4603      	mov	r3, r0
 8008956:	b29b      	uxth	r3, r3
 8008958:	4423      	add	r3, r4
 800895a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800895c:	89fa      	ldrh	r2, [r7, #14]
 800895e:	89bb      	ldrh	r3, [r7, #12]
 8008960:	429a      	cmp	r2, r3
 8008962:	d1c2      	bne.n	80088ea <getSn_TX_FSR+0x12>
   return val;
 8008964:	89fb      	ldrh	r3, [r7, #14]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3714      	adds	r7, #20
 800896a:	46bd      	mov	sp, r7
 800896c:	bd90      	pop	{r4, r7, pc}

0800896e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800896e:	b590      	push	{r4, r7, lr}
 8008970:	b085      	sub	sp, #20
 8008972:	af00      	add	r7, sp, #0
 8008974:	4603      	mov	r3, r0
 8008976:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8008978:	2300      	movs	r3, #0
 800897a:	81fb      	strh	r3, [r7, #14]
 800897c:	2300      	movs	r3, #0
 800897e:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8008980:	79fb      	ldrb	r3, [r7, #7]
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	3301      	adds	r3, #1
 8008986:	00db      	lsls	r3, r3, #3
 8008988:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800898c:	4618      	mov	r0, r3
 800898e:	f7ff fe49 	bl	8008624 <WIZCHIP_READ>
 8008992:	4603      	mov	r3, r0
 8008994:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8008996:	89bb      	ldrh	r3, [r7, #12]
 8008998:	021b      	lsls	r3, r3, #8
 800899a:	b29c      	uxth	r4, r3
 800899c:	79fb      	ldrb	r3, [r7, #7]
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	3301      	adds	r3, #1
 80089a2:	00db      	lsls	r3, r3, #3
 80089a4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7ff fe3b 	bl	8008624 <WIZCHIP_READ>
 80089ae:	4603      	mov	r3, r0
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	4423      	add	r3, r4
 80089b4:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80089b6:	89bb      	ldrh	r3, [r7, #12]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d01a      	beq.n	80089f2 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80089bc:	79fb      	ldrb	r3, [r7, #7]
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	3301      	adds	r3, #1
 80089c2:	00db      	lsls	r3, r3, #3
 80089c4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7ff fe2b 	bl	8008624 <WIZCHIP_READ>
 80089ce:	4603      	mov	r3, r0
 80089d0:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80089d2:	89fb      	ldrh	r3, [r7, #14]
 80089d4:	021b      	lsls	r3, r3, #8
 80089d6:	b29c      	uxth	r4, r3
 80089d8:	79fb      	ldrb	r3, [r7, #7]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	3301      	adds	r3, #1
 80089de:	00db      	lsls	r3, r3, #3
 80089e0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7ff fe1d 	bl	8008624 <WIZCHIP_READ>
 80089ea:	4603      	mov	r3, r0
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	4423      	add	r3, r4
 80089f0:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80089f2:	89fa      	ldrh	r2, [r7, #14]
 80089f4:	89bb      	ldrh	r3, [r7, #12]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d1c2      	bne.n	8008980 <getSn_RX_RSR+0x12>
   return val;
 80089fa:	89fb      	ldrh	r3, [r7, #14]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3714      	adds	r7, #20
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd90      	pop	{r4, r7, pc}

08008a04 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8008a04:	b590      	push	{r4, r7, lr}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	6039      	str	r1, [r7, #0]
 8008a0e:	71fb      	strb	r3, [r7, #7]
 8008a10:	4613      	mov	r3, r2
 8008a12:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8008a14:	2300      	movs	r3, #0
 8008a16:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8008a1c:	88bb      	ldrh	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d048      	beq.n	8008ab4 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8008a22:	79fb      	ldrb	r3, [r7, #7]
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	3301      	adds	r3, #1
 8008a28:	00db      	lsls	r3, r3, #3
 8008a2a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7ff fdf8 	bl	8008624 <WIZCHIP_READ>
 8008a34:	4603      	mov	r3, r0
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	021b      	lsls	r3, r3, #8
 8008a3a:	b29c      	uxth	r4, r3
 8008a3c:	79fb      	ldrb	r3, [r7, #7]
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	3301      	adds	r3, #1
 8008a42:	00db      	lsls	r3, r3, #3
 8008a44:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7ff fdeb 	bl	8008624 <WIZCHIP_READ>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	4423      	add	r3, r4
 8008a54:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8008a56:	89fb      	ldrh	r3, [r7, #14]
 8008a58:	021b      	lsls	r3, r3, #8
 8008a5a:	79fa      	ldrb	r2, [r7, #7]
 8008a5c:	0092      	lsls	r2, r2, #2
 8008a5e:	3202      	adds	r2, #2
 8008a60:	00d2      	lsls	r2, r2, #3
 8008a62:	4413      	add	r3, r2
 8008a64:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8008a66:	88bb      	ldrh	r3, [r7, #4]
 8008a68:	461a      	mov	r2, r3
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	68b8      	ldr	r0, [r7, #8]
 8008a6e:	f7ff fed3 	bl	8008818 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8008a72:	89fa      	ldrh	r2, [r7, #14]
 8008a74:	88bb      	ldrh	r3, [r7, #4]
 8008a76:	4413      	add	r3, r2
 8008a78:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8008a7a:	79fb      	ldrb	r3, [r7, #7]
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	3301      	adds	r3, #1
 8008a80:	00db      	lsls	r3, r3, #3
 8008a82:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8008a86:	461a      	mov	r2, r3
 8008a88:	89fb      	ldrh	r3, [r7, #14]
 8008a8a:	0a1b      	lsrs	r3, r3, #8
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	4619      	mov	r1, r3
 8008a92:	4610      	mov	r0, r2
 8008a94:	f7ff fe12 	bl	80086bc <WIZCHIP_WRITE>
 8008a98:	79fb      	ldrb	r3, [r7, #7]
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	3301      	adds	r3, #1
 8008a9e:	00db      	lsls	r3, r3, #3
 8008aa0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	89fb      	ldrh	r3, [r7, #14]
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	4619      	mov	r1, r3
 8008aac:	4610      	mov	r0, r2
 8008aae:	f7ff fe05 	bl	80086bc <WIZCHIP_WRITE>
 8008ab2:	e000      	b.n	8008ab6 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8008ab4:	bf00      	nop
}
 8008ab6:	3714      	adds	r7, #20
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd90      	pop	{r4, r7, pc}

08008abc <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8008abc:	b590      	push	{r4, r7, lr}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	6039      	str	r1, [r7, #0]
 8008ac6:	71fb      	strb	r3, [r7, #7]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8008acc:	2300      	movs	r3, #0
 8008ace:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8008ad4:	88bb      	ldrh	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d048      	beq.n	8008b6c <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	3301      	adds	r3, #1
 8008ae0:	00db      	lsls	r3, r3, #3
 8008ae2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f7ff fd9c 	bl	8008624 <WIZCHIP_READ>
 8008aec:	4603      	mov	r3, r0
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	021b      	lsls	r3, r3, #8
 8008af2:	b29c      	uxth	r4, r3
 8008af4:	79fb      	ldrb	r3, [r7, #7]
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	3301      	adds	r3, #1
 8008afa:	00db      	lsls	r3, r3, #3
 8008afc:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7ff fd8f 	bl	8008624 <WIZCHIP_READ>
 8008b06:	4603      	mov	r3, r0
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	4423      	add	r3, r4
 8008b0c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8008b0e:	89fb      	ldrh	r3, [r7, #14]
 8008b10:	021b      	lsls	r3, r3, #8
 8008b12:	79fa      	ldrb	r2, [r7, #7]
 8008b14:	0092      	lsls	r2, r2, #2
 8008b16:	3203      	adds	r2, #3
 8008b18:	00d2      	lsls	r2, r2, #3
 8008b1a:	4413      	add	r3, r2
 8008b1c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8008b1e:	88bb      	ldrh	r3, [r7, #4]
 8008b20:	461a      	mov	r2, r3
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	68b8      	ldr	r0, [r7, #8]
 8008b26:	f7ff fe17 	bl	8008758 <WIZCHIP_READ_BUF>
   ptr += len;
 8008b2a:	89fa      	ldrh	r2, [r7, #14]
 8008b2c:	88bb      	ldrh	r3, [r7, #4]
 8008b2e:	4413      	add	r3, r2
 8008b30:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8008b32:	79fb      	ldrb	r3, [r7, #7]
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	3301      	adds	r3, #1
 8008b38:	00db      	lsls	r3, r3, #3
 8008b3a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8008b3e:	461a      	mov	r2, r3
 8008b40:	89fb      	ldrh	r3, [r7, #14]
 8008b42:	0a1b      	lsrs	r3, r3, #8
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	4619      	mov	r1, r3
 8008b4a:	4610      	mov	r0, r2
 8008b4c:	f7ff fdb6 	bl	80086bc <WIZCHIP_WRITE>
 8008b50:	79fb      	ldrb	r3, [r7, #7]
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	3301      	adds	r3, #1
 8008b56:	00db      	lsls	r3, r3, #3
 8008b58:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	89fb      	ldrh	r3, [r7, #14]
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	4619      	mov	r1, r3
 8008b64:	4610      	mov	r0, r2
 8008b66:	f7ff fda9 	bl	80086bc <WIZCHIP_WRITE>
 8008b6a:	e000      	b.n	8008b6e <wiz_recv_data+0xb2>
   if(len == 0) return;
 8008b6c:	bf00      	nop
}
 8008b6e:	3714      	adds	r7, #20
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd90      	pop	{r4, r7, pc}

08008b74 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8008b74:	b590      	push	{r4, r7, lr}
 8008b76:	b085      	sub	sp, #20
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	460a      	mov	r2, r1
 8008b7e:	71fb      	strb	r3, [r7, #7]
 8008b80:	4613      	mov	r3, r2
 8008b82:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8008b84:	2300      	movs	r3, #0
 8008b86:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8008b88:	79fb      	ldrb	r3, [r7, #7]
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	00db      	lsls	r3, r3, #3
 8008b90:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7ff fd45 	bl	8008624 <WIZCHIP_READ>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	021b      	lsls	r3, r3, #8
 8008ba0:	b29c      	uxth	r4, r3
 8008ba2:	79fb      	ldrb	r3, [r7, #7]
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	00db      	lsls	r3, r3, #3
 8008baa:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7ff fd38 	bl	8008624 <WIZCHIP_READ>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	4423      	add	r3, r4
 8008bba:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8008bbc:	89fa      	ldrh	r2, [r7, #14]
 8008bbe:	88bb      	ldrh	r3, [r7, #4]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8008bc4:	79fb      	ldrb	r3, [r7, #7]
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	3301      	adds	r3, #1
 8008bca:	00db      	lsls	r3, r3, #3
 8008bcc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	89fb      	ldrh	r3, [r7, #14]
 8008bd4:	0a1b      	lsrs	r3, r3, #8
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	4619      	mov	r1, r3
 8008bdc:	4610      	mov	r0, r2
 8008bde:	f7ff fd6d 	bl	80086bc <WIZCHIP_WRITE>
 8008be2:	79fb      	ldrb	r3, [r7, #7]
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	3301      	adds	r3, #1
 8008be8:	00db      	lsls	r3, r3, #3
 8008bea:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8008bee:	461a      	mov	r2, r3
 8008bf0:	89fb      	ldrh	r3, [r7, #14]
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	f7ff fd60 	bl	80086bc <WIZCHIP_WRITE>
}
 8008bfc:	bf00      	nop
 8008bfe:	3714      	adds	r7, #20
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd90      	pop	{r4, r7, pc}

08008c04 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8008c04:	b590      	push	{r4, r7, lr}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	4608      	mov	r0, r1
 8008c0e:	4611      	mov	r1, r2
 8008c10:	461a      	mov	r2, r3
 8008c12:	4623      	mov	r3, r4
 8008c14:	71fb      	strb	r3, [r7, #7]
 8008c16:	4603      	mov	r3, r0
 8008c18:	71bb      	strb	r3, [r7, #6]
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	80bb      	strh	r3, [r7, #4]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8008c22:	79fb      	ldrb	r3, [r7, #7]
 8008c24:	2b08      	cmp	r3, #8
 8008c26:	d902      	bls.n	8008c2e <socket+0x2a>
 8008c28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c2c:	e0f2      	b.n	8008e14 <socket+0x210>
	switch(protocol)
 8008c2e:	79bb      	ldrb	r3, [r7, #6]
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d005      	beq.n	8008c40 <socket+0x3c>
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	dd11      	ble.n	8008c5c <socket+0x58>
 8008c38:	3b02      	subs	r3, #2
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d80e      	bhi.n	8008c5c <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8008c3e:	e011      	b.n	8008c64 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8008c40:	f107 030c 	add.w	r3, r7, #12
 8008c44:	2204      	movs	r2, #4
 8008c46:	4619      	mov	r1, r3
 8008c48:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8008c4c:	f7ff fd84 	bl	8008758 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d105      	bne.n	8008c62 <socket+0x5e>
 8008c56:	f06f 0302 	mvn.w	r3, #2
 8008c5a:	e0db      	b.n	8008e14 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8008c5c:	f06f 0304 	mvn.w	r3, #4
 8008c60:	e0d8      	b.n	8008e14 <socket+0x210>
	    break;
 8008c62:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8008c64:	78fb      	ldrb	r3, [r7, #3]
 8008c66:	f003 0304 	and.w	r3, r3, #4
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d002      	beq.n	8008c74 <socket+0x70>
 8008c6e:	f06f 0305 	mvn.w	r3, #5
 8008c72:	e0cf      	b.n	8008e14 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8008c74:	78fb      	ldrb	r3, [r7, #3]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d025      	beq.n	8008cc6 <socket+0xc2>
	{
   	switch(protocol)
 8008c7a:	79bb      	ldrb	r3, [r7, #6]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d002      	beq.n	8008c86 <socket+0x82>
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d008      	beq.n	8008c96 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8008c84:	e024      	b.n	8008cd0 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8008c86:	78fb      	ldrb	r3, [r7, #3]
 8008c88:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d11c      	bne.n	8008cca <socket+0xc6>
 8008c90:	f06f 0305 	mvn.w	r3, #5
 8008c94:	e0be      	b.n	8008e14 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8008c96:	78fb      	ldrb	r3, [r7, #3]
 8008c98:	f003 0320 	and.w	r3, r3, #32
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d006      	beq.n	8008cae <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8008ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	db02      	blt.n	8008cae <socket+0xaa>
 8008ca8:	f06f 0305 	mvn.w	r3, #5
 8008cac:	e0b2      	b.n	8008e14 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8008cae:	78fb      	ldrb	r3, [r7, #3]
 8008cb0:	f003 0310 	and.w	r3, r3, #16
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00a      	beq.n	8008cce <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8008cb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	db06      	blt.n	8008cce <socket+0xca>
 8008cc0:	f06f 0305 	mvn.w	r3, #5
 8008cc4:	e0a6      	b.n	8008e14 <socket+0x210>
   	}
   }
 8008cc6:	bf00      	nop
 8008cc8:	e002      	b.n	8008cd0 <socket+0xcc>
   	      break;
 8008cca:	bf00      	nop
 8008ccc:	e000      	b.n	8008cd0 <socket+0xcc>
   	      break;
 8008cce:	bf00      	nop
	close(sn);
 8008cd0:	79fb      	ldrb	r3, [r7, #7]
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 f8ac 	bl	8008e30 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8008cd8:	79fb      	ldrb	r3, [r7, #7]
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	3301      	adds	r3, #1
 8008cde:	00db      	lsls	r3, r3, #3
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ce6:	f023 030f 	bic.w	r3, r3, #15
 8008cea:	b25a      	sxtb	r2, r3
 8008cec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	b25b      	sxtb	r3, r3
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	f7ff fce0 	bl	80086bc <WIZCHIP_WRITE>
    #endif
	if(!port)
 8008cfc:	88bb      	ldrh	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d110      	bne.n	8008d24 <socket+0x120>
	{
	   port = sock_any_port++;
 8008d02:	4b46      	ldr	r3, [pc, #280]	; (8008e1c <socket+0x218>)
 8008d04:	881b      	ldrh	r3, [r3, #0]
 8008d06:	1c5a      	adds	r2, r3, #1
 8008d08:	b291      	uxth	r1, r2
 8008d0a:	4a44      	ldr	r2, [pc, #272]	; (8008e1c <socket+0x218>)
 8008d0c:	8011      	strh	r1, [r2, #0]
 8008d0e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8008d10:	4b42      	ldr	r3, [pc, #264]	; (8008e1c <socket+0x218>)
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d103      	bne.n	8008d24 <socket+0x120>
 8008d1c:	4b3f      	ldr	r3, [pc, #252]	; (8008e1c <socket+0x218>)
 8008d1e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8008d22:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8008d24:	79fb      	ldrb	r3, [r7, #7]
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	3301      	adds	r3, #1
 8008d2a:	00db      	lsls	r3, r3, #3
 8008d2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d30:	461a      	mov	r2, r3
 8008d32:	88bb      	ldrh	r3, [r7, #4]
 8008d34:	0a1b      	lsrs	r3, r3, #8
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	f7ff fcbd 	bl	80086bc <WIZCHIP_WRITE>
 8008d42:	79fb      	ldrb	r3, [r7, #7]
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	3301      	adds	r3, #1
 8008d48:	00db      	lsls	r3, r3, #3
 8008d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d4e:	461a      	mov	r2, r3
 8008d50:	88bb      	ldrh	r3, [r7, #4]
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	4619      	mov	r1, r3
 8008d56:	4610      	mov	r0, r2
 8008d58:	f7ff fcb0 	bl	80086bc <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8008d5c:	79fb      	ldrb	r3, [r7, #7]
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	3301      	adds	r3, #1
 8008d62:	00db      	lsls	r3, r3, #3
 8008d64:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008d68:	2101      	movs	r1, #1
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7ff fca6 	bl	80086bc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8008d70:	bf00      	nop
 8008d72:	79fb      	ldrb	r3, [r7, #7]
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	3301      	adds	r3, #1
 8008d78:	00db      	lsls	r3, r3, #3
 8008d7a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7ff fc50 	bl	8008624 <WIZCHIP_READ>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1f3      	bne.n	8008d72 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8008d8a:	79fb      	ldrb	r3, [r7, #7]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d92:	b21b      	sxth	r3, r3
 8008d94:	43db      	mvns	r3, r3
 8008d96:	b21a      	sxth	r2, r3
 8008d98:	4b21      	ldr	r3, [pc, #132]	; (8008e20 <socket+0x21c>)
 8008d9a:	881b      	ldrh	r3, [r3, #0]
 8008d9c:	b21b      	sxth	r3, r3
 8008d9e:	4013      	ands	r3, r2
 8008da0:	b21b      	sxth	r3, r3
 8008da2:	b29a      	uxth	r2, r3
 8008da4:	4b1e      	ldr	r3, [pc, #120]	; (8008e20 <socket+0x21c>)
 8008da6:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8008da8:	78fb      	ldrb	r3, [r7, #3]
 8008daa:	f003 0201 	and.w	r2, r3, #1
 8008dae:	79fb      	ldrb	r3, [r7, #7]
 8008db0:	fa02 f303 	lsl.w	r3, r2, r3
 8008db4:	b21a      	sxth	r2, r3
 8008db6:	4b1a      	ldr	r3, [pc, #104]	; (8008e20 <socket+0x21c>)
 8008db8:	881b      	ldrh	r3, [r3, #0]
 8008dba:	b21b      	sxth	r3, r3
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	b21b      	sxth	r3, r3
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	4b17      	ldr	r3, [pc, #92]	; (8008e20 <socket+0x21c>)
 8008dc4:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8008dc6:	79fb      	ldrb	r3, [r7, #7]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	fa02 f303 	lsl.w	r3, r2, r3
 8008dce:	b21b      	sxth	r3, r3
 8008dd0:	43db      	mvns	r3, r3
 8008dd2:	b21a      	sxth	r2, r3
 8008dd4:	4b13      	ldr	r3, [pc, #76]	; (8008e24 <socket+0x220>)
 8008dd6:	881b      	ldrh	r3, [r3, #0]
 8008dd8:	b21b      	sxth	r3, r3
 8008dda:	4013      	ands	r3, r2
 8008ddc:	b21b      	sxth	r3, r3
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	4b10      	ldr	r3, [pc, #64]	; (8008e24 <socket+0x220>)
 8008de2:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8008de4:	79fb      	ldrb	r3, [r7, #7]
 8008de6:	4a10      	ldr	r2, [pc, #64]	; (8008e28 <socket+0x224>)
 8008de8:	2100      	movs	r1, #0
 8008dea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8008dee:	79fb      	ldrb	r3, [r7, #7]
 8008df0:	4a0e      	ldr	r2, [pc, #56]	; (8008e2c <socket+0x228>)
 8008df2:	2100      	movs	r1, #0
 8008df4:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8008df6:	bf00      	nop
 8008df8:	79fb      	ldrb	r3, [r7, #7]
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	00db      	lsls	r3, r3, #3
 8008e00:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7ff fc0d 	bl	8008624 <WIZCHIP_READ>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d0f3      	beq.n	8008df8 <socket+0x1f4>
   return (int8_t)sn;
 8008e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8008e14:	4618      	mov	r0, r3
 8008e16:	3714      	adds	r7, #20
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd90      	pop	{r4, r7, pc}
 8008e1c:	20000092 	.word	0x20000092
 8008e20:	20002e14 	.word	0x20002e14
 8008e24:	20002e16 	.word	0x20002e16
 8008e28:	20002e18 	.word	0x20002e18
 8008e2c:	20002e28 	.word	0x20002e28

08008e30 <close>:

int8_t close(uint8_t sn)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	4603      	mov	r3, r0
 8008e38:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8008e3a:	79fb      	ldrb	r3, [r7, #7]
 8008e3c:	2b08      	cmp	r3, #8
 8008e3e:	d902      	bls.n	8008e46 <close+0x16>
 8008e40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e44:	e055      	b.n	8008ef2 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8008e46:	79fb      	ldrb	r3, [r7, #7]
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	00db      	lsls	r3, r3, #3
 8008e4e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008e52:	2110      	movs	r1, #16
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7ff fc31 	bl	80086bc <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8008e5a:	bf00      	nop
 8008e5c:	79fb      	ldrb	r3, [r7, #7]
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	3301      	adds	r3, #1
 8008e62:	00db      	lsls	r3, r3, #3
 8008e64:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f7ff fbdb 	bl	8008624 <WIZCHIP_READ>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1f3      	bne.n	8008e5c <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8008e74:	79fb      	ldrb	r3, [r7, #7]
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	3301      	adds	r3, #1
 8008e7a:	00db      	lsls	r3, r3, #3
 8008e7c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8008e80:	211f      	movs	r1, #31
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7ff fc1a 	bl	80086bc <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8008e88:	79fb      	ldrb	r3, [r7, #7]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e90:	b21b      	sxth	r3, r3
 8008e92:	43db      	mvns	r3, r3
 8008e94:	b21a      	sxth	r2, r3
 8008e96:	4b19      	ldr	r3, [pc, #100]	; (8008efc <close+0xcc>)
 8008e98:	881b      	ldrh	r3, [r3, #0]
 8008e9a:	b21b      	sxth	r3, r3
 8008e9c:	4013      	ands	r3, r2
 8008e9e:	b21b      	sxth	r3, r3
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	4b16      	ldr	r3, [pc, #88]	; (8008efc <close+0xcc>)
 8008ea4:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8008ea6:	79fb      	ldrb	r3, [r7, #7]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8008eae:	b21b      	sxth	r3, r3
 8008eb0:	43db      	mvns	r3, r3
 8008eb2:	b21a      	sxth	r2, r3
 8008eb4:	4b12      	ldr	r3, [pc, #72]	; (8008f00 <close+0xd0>)
 8008eb6:	881b      	ldrh	r3, [r3, #0]
 8008eb8:	b21b      	sxth	r3, r3
 8008eba:	4013      	ands	r3, r2
 8008ebc:	b21b      	sxth	r3, r3
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	4b0f      	ldr	r3, [pc, #60]	; (8008f00 <close+0xd0>)
 8008ec2:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8008ec4:	79fb      	ldrb	r3, [r7, #7]
 8008ec6:	4a0f      	ldr	r2, [pc, #60]	; (8008f04 <close+0xd4>)
 8008ec8:	2100      	movs	r1, #0
 8008eca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8008ece:	79fb      	ldrb	r3, [r7, #7]
 8008ed0:	4a0d      	ldr	r2, [pc, #52]	; (8008f08 <close+0xd8>)
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8008ed6:	bf00      	nop
 8008ed8:	79fb      	ldrb	r3, [r7, #7]
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	3301      	adds	r3, #1
 8008ede:	00db      	lsls	r3, r3, #3
 8008ee0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7ff fb9d 	bl	8008624 <WIZCHIP_READ>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1f3      	bne.n	8008ed8 <close+0xa8>
	return SOCK_OK;
 8008ef0:	2301      	movs	r3, #1
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3708      	adds	r7, #8
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	20002e14 	.word	0x20002e14
 8008f00:	20002e16 	.word	0x20002e16
 8008f04:	20002e18 	.word	0x20002e18
 8008f08:	20002e28 	.word	0x20002e28

08008f0c <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b086      	sub	sp, #24
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60b9      	str	r1, [r7, #8]
 8008f14:	607b      	str	r3, [r7, #4]
 8008f16:	4603      	mov	r3, r0
 8008f18:	73fb      	strb	r3, [r7, #15]
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8008f22:	2300      	movs	r3, #0
 8008f24:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8008f26:	7bfb      	ldrb	r3, [r7, #15]
 8008f28:	2b08      	cmp	r3, #8
 8008f2a:	d902      	bls.n	8008f32 <sendto+0x26>
 8008f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f30:	e11b      	b.n	800916a <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	3301      	adds	r3, #1
 8008f38:	00db      	lsls	r3, r3, #3
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7ff fb72 	bl	8008624 <WIZCHIP_READ>
 8008f40:	4603      	mov	r3, r0
 8008f42:	f003 030f 	and.w	r3, r3, #15
 8008f46:	3b02      	subs	r3, #2
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	d902      	bls.n	8008f52 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8008f4c:	f06f 0304 	mvn.w	r3, #4
 8008f50:	e10b      	b.n	800916a <sendto+0x25e>
         break;
 8008f52:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8008f54:	89bb      	ldrh	r3, [r7, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d102      	bne.n	8008f60 <sendto+0x54>
 8008f5a:	f06f 030d 	mvn.w	r3, #13
 8008f5e:	e104      	b.n	800916a <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	021b      	lsls	r3, r3, #8
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	3201      	adds	r2, #1
 8008f6e:	7812      	ldrb	r2, [r2, #0]
 8008f70:	4413      	add	r3, r2
 8008f72:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	021b      	lsls	r3, r3, #8
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	3202      	adds	r2, #2
 8008f7c:	7812      	ldrb	r2, [r2, #0]
 8008f7e:	4413      	add	r3, r2
 8008f80:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	021b      	lsls	r3, r3, #8
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	3203      	adds	r2, #3
 8008f8a:	7812      	ldrb	r2, [r2, #0]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10e      	bne.n	8008fb4 <sendto+0xa8>
 8008f96:	7bfb      	ldrb	r3, [r7, #15]
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	00db      	lsls	r3, r3, #3
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7ff fb40 	bl	8008624 <WIZCHIP_READ>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	f003 0304 	and.w	r3, r3, #4
 8008faa:	2b04      	cmp	r3, #4
 8008fac:	d002      	beq.n	8008fb4 <sendto+0xa8>
 8008fae:	f06f 030b 	mvn.w	r3, #11
 8008fb2:	e0da      	b.n	800916a <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8008fb4:	8c3b      	ldrh	r3, [r7, #32]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10e      	bne.n	8008fd8 <sendto+0xcc>
 8008fba:	7bfb      	ldrb	r3, [r7, #15]
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	00db      	lsls	r3, r3, #3
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7ff fb2e 	bl	8008624 <WIZCHIP_READ>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	f003 0304 	and.w	r3, r3, #4
 8008fce:	2b04      	cmp	r3, #4
 8008fd0:	d002      	beq.n	8008fd8 <sendto+0xcc>
 8008fd2:	f06f 030a 	mvn.w	r3, #10
 8008fd6:	e0c8      	b.n	800916a <sendto+0x25e>
   tmp = getSn_SR(sn);
 8008fd8:	7bfb      	ldrb	r3, [r7, #15]
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	3301      	adds	r3, #1
 8008fde:	00db      	lsls	r3, r3, #3
 8008fe0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7ff fb1d 	bl	8008624 <WIZCHIP_READ>
 8008fea:	4603      	mov	r3, r0
 8008fec:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8008fee:	7dfb      	ldrb	r3, [r7, #23]
 8008ff0:	2b42      	cmp	r3, #66	; 0x42
 8008ff2:	d008      	beq.n	8009006 <sendto+0xfa>
 8008ff4:	7dfb      	ldrb	r3, [r7, #23]
 8008ff6:	2b22      	cmp	r3, #34	; 0x22
 8008ff8:	d005      	beq.n	8009006 <sendto+0xfa>
 8008ffa:	7dfb      	ldrb	r3, [r7, #23]
 8008ffc:	2b32      	cmp	r3, #50	; 0x32
 8008ffe:	d002      	beq.n	8009006 <sendto+0xfa>
 8009000:	f06f 0306 	mvn.w	r3, #6
 8009004:	e0b1      	b.n	800916a <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8009006:	7bfb      	ldrb	r3, [r7, #15]
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	3301      	adds	r3, #1
 800900c:	00db      	lsls	r3, r3, #3
 800900e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8009012:	2204      	movs	r2, #4
 8009014:	6879      	ldr	r1, [r7, #4]
 8009016:	4618      	mov	r0, r3
 8009018:	f7ff fbfe 	bl	8008818 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 800901c:	7bfb      	ldrb	r3, [r7, #15]
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	3301      	adds	r3, #1
 8009022:	00db      	lsls	r3, r3, #3
 8009024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009028:	461a      	mov	r2, r3
 800902a:	8c3b      	ldrh	r3, [r7, #32]
 800902c:	0a1b      	lsrs	r3, r3, #8
 800902e:	b29b      	uxth	r3, r3
 8009030:	b2db      	uxtb	r3, r3
 8009032:	4619      	mov	r1, r3
 8009034:	4610      	mov	r0, r2
 8009036:	f7ff fb41 	bl	80086bc <WIZCHIP_WRITE>
 800903a:	7bfb      	ldrb	r3, [r7, #15]
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	3301      	adds	r3, #1
 8009040:	00db      	lsls	r3, r3, #3
 8009042:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8009046:	461a      	mov	r2, r3
 8009048:	8c3b      	ldrh	r3, [r7, #32]
 800904a:	b2db      	uxtb	r3, r3
 800904c:	4619      	mov	r1, r3
 800904e:	4610      	mov	r0, r2
 8009050:	f7ff fb34 	bl	80086bc <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8009054:	7bfb      	ldrb	r3, [r7, #15]
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	3301      	adds	r3, #1
 800905a:	00db      	lsls	r3, r3, #3
 800905c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8009060:	4618      	mov	r0, r3
 8009062:	f7ff fadf 	bl	8008624 <WIZCHIP_READ>
 8009066:	4603      	mov	r3, r0
 8009068:	b29b      	uxth	r3, r3
 800906a:	029b      	lsls	r3, r3, #10
 800906c:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800906e:	89ba      	ldrh	r2, [r7, #12]
 8009070:	8abb      	ldrh	r3, [r7, #20]
 8009072:	429a      	cmp	r2, r3
 8009074:	d901      	bls.n	800907a <sendto+0x16e>
 8009076:	8abb      	ldrh	r3, [r7, #20]
 8009078:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800907a:	7bfb      	ldrb	r3, [r7, #15]
 800907c:	4618      	mov	r0, r3
 800907e:	f7ff fc2b 	bl	80088d8 <getSn_TX_FSR>
 8009082:	4603      	mov	r3, r0
 8009084:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8009086:	7bfb      	ldrb	r3, [r7, #15]
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	3301      	adds	r3, #1
 800908c:	00db      	lsls	r3, r3, #3
 800908e:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8009092:	4618      	mov	r0, r3
 8009094:	f7ff fac6 	bl	8008624 <WIZCHIP_READ>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d102      	bne.n	80090a4 <sendto+0x198>
 800909e:	f06f 0303 	mvn.w	r3, #3
 80090a2:	e062      	b.n	800916a <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80090a4:	4b33      	ldr	r3, [pc, #204]	; (8009174 <sendto+0x268>)
 80090a6:	881b      	ldrh	r3, [r3, #0]
 80090a8:	461a      	mov	r2, r3
 80090aa:	7bfb      	ldrb	r3, [r7, #15]
 80090ac:	fa42 f303 	asr.w	r3, r2, r3
 80090b0:	f003 0301 	and.w	r3, r3, #1
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d005      	beq.n	80090c4 <sendto+0x1b8>
 80090b8:	89ba      	ldrh	r2, [r7, #12]
 80090ba:	8abb      	ldrh	r3, [r7, #20]
 80090bc:	429a      	cmp	r2, r3
 80090be:	d901      	bls.n	80090c4 <sendto+0x1b8>
 80090c0:	2300      	movs	r3, #0
 80090c2:	e052      	b.n	800916a <sendto+0x25e>
      if(len <= freesize) break;
 80090c4:	89ba      	ldrh	r2, [r7, #12]
 80090c6:	8abb      	ldrh	r3, [r7, #20]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d900      	bls.n	80090ce <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 80090cc:	e7d5      	b.n	800907a <sendto+0x16e>
      if(len <= freesize) break;
 80090ce:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80090d0:	89ba      	ldrh	r2, [r7, #12]
 80090d2:	7bfb      	ldrb	r3, [r7, #15]
 80090d4:	68b9      	ldr	r1, [r7, #8]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7ff fc94 	bl	8008a04 <wiz_send_data>
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   

   setSn_CR(sn,Sn_CR_SEND);
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	3301      	adds	r3, #1
 80090e2:	00db      	lsls	r3, r3, #3
 80090e4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80090e8:	2120      	movs	r1, #32
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7ff fae6 	bl	80086bc <WIZCHIP_WRITE>


	/* wait to process the command... */
	while(getSn_CR(sn));
 80090f0:	bf00      	nop
 80090f2:	7bfb      	ldrb	r3, [r7, #15]
 80090f4:	009b      	lsls	r3, r3, #2
 80090f6:	3301      	adds	r3, #1
 80090f8:	00db      	lsls	r3, r3, #3
 80090fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80090fe:	4618      	mov	r0, r3
 8009100:	f7ff fa90 	bl	8008624 <WIZCHIP_READ>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1f3      	bne.n	80090f2 <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 800910a:	7bfb      	ldrb	r3, [r7, #15]
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	3301      	adds	r3, #1
 8009110:	00db      	lsls	r3, r3, #3
 8009112:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009116:	4618      	mov	r0, r3
 8009118:	f7ff fa84 	bl	8008624 <WIZCHIP_READ>
 800911c:	4603      	mov	r3, r0
 800911e:	f003 031f 	and.w	r3, r3, #31
 8009122:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8009124:	7dfb      	ldrb	r3, [r7, #23]
 8009126:	f003 0310 	and.w	r3, r3, #16
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00c      	beq.n	8009148 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800912e:	7bfb      	ldrb	r3, [r7, #15]
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	3301      	adds	r3, #1
 8009134:	00db      	lsls	r3, r3, #3
 8009136:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800913a:	2110      	movs	r1, #16
 800913c:	4618      	mov	r0, r3
 800913e:	f7ff fabd 	bl	80086bc <WIZCHIP_WRITE>
         break;
 8009142:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8009144:	89bb      	ldrh	r3, [r7, #12]
 8009146:	e010      	b.n	800916a <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8009148:	7dfb      	ldrb	r3, [r7, #23]
 800914a:	f003 0308 	and.w	r3, r3, #8
 800914e:	2b00      	cmp	r3, #0
 8009150:	d0db      	beq.n	800910a <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8009152:	7bfb      	ldrb	r3, [r7, #15]
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	3301      	adds	r3, #1
 8009158:	00db      	lsls	r3, r3, #3
 800915a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800915e:	2108      	movs	r1, #8
 8009160:	4618      	mov	r0, r3
 8009162:	f7ff faab 	bl	80086bc <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8009166:	f06f 030c 	mvn.w	r3, #12
}
 800916a:	4618      	mov	r0, r3
 800916c:	3718      	adds	r7, #24
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	20002e14 	.word	0x20002e14

08009178 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b088      	sub	sp, #32
 800917c:	af00      	add	r7, sp, #0
 800917e:	60b9      	str	r1, [r7, #8]
 8009180:	607b      	str	r3, [r7, #4]
 8009182:	4603      	mov	r3, r0
 8009184:	73fb      	strb	r3, [r7, #15]
 8009186:	4613      	mov	r3, r2
 8009188:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 800918a:	2300      	movs	r3, #0
 800918c:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 800918e:	7bfb      	ldrb	r3, [r7, #15]
 8009190:	2b08      	cmp	r3, #8
 8009192:	d902      	bls.n	800919a <recvfrom+0x22>
 8009194:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009198:	e1d4      	b.n	8009544 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 800919a:	7bfb      	ldrb	r3, [r7, #15]
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	3301      	adds	r3, #1
 80091a0:	00db      	lsls	r3, r3, #3
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7ff fa3e 	bl	8008624 <WIZCHIP_READ>
 80091a8:	4603      	mov	r3, r0
 80091aa:	777b      	strb	r3, [r7, #29]
 80091ac:	7f7b      	ldrb	r3, [r7, #29]
 80091ae:	f003 030f 	and.w	r3, r3, #15
 80091b2:	3b02      	subs	r3, #2
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d902      	bls.n	80091be <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 80091b8:	f06f 0304 	mvn.w	r3, #4
 80091bc:	e1c2      	b.n	8009544 <recvfrom+0x3cc>
         break;
 80091be:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80091c0:	89bb      	ldrh	r3, [r7, #12]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d102      	bne.n	80091cc <recvfrom+0x54>
 80091c6:	f06f 030d 	mvn.w	r3, #13
 80091ca:	e1bb      	b.n	8009544 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
 80091ce:	4a88      	ldr	r2, [pc, #544]	; (80093f0 <recvfrom+0x278>)
 80091d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d128      	bne.n	800922a <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
 80091da:	4618      	mov	r0, r3
 80091dc:	f7ff fbc7 	bl	800896e <getSn_RX_RSR>
 80091e0:	4603      	mov	r3, r0
 80091e2:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80091e4:	7bfb      	ldrb	r3, [r7, #15]
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	3301      	adds	r3, #1
 80091ea:	00db      	lsls	r3, r3, #3
 80091ec:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7ff fa17 	bl	8008624 <WIZCHIP_READ>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d102      	bne.n	8009202 <recvfrom+0x8a>
 80091fc:	f06f 0303 	mvn.w	r3, #3
 8009200:	e1a0      	b.n	8009544 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8009202:	4b7c      	ldr	r3, [pc, #496]	; (80093f4 <recvfrom+0x27c>)
 8009204:	881b      	ldrh	r3, [r3, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	7bfb      	ldrb	r3, [r7, #15]
 800920a:	fa42 f303 	asr.w	r3, r2, r3
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	2b00      	cmp	r3, #0
 8009214:	d004      	beq.n	8009220 <recvfrom+0xa8>
 8009216:	8bfb      	ldrh	r3, [r7, #30]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d101      	bne.n	8009220 <recvfrom+0xa8>
 800921c:	2300      	movs	r3, #0
 800921e:	e191      	b.n	8009544 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8009220:	8bfb      	ldrh	r3, [r7, #30]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d100      	bne.n	8009228 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8009226:	e7d7      	b.n	80091d8 <recvfrom+0x60>
         if(pack_len != 0) break;
 8009228:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 800922a:	7f7b      	ldrb	r3, [r7, #29]
 800922c:	f003 0307 	and.w	r3, r3, #7
 8009230:	2b04      	cmp	r3, #4
 8009232:	d079      	beq.n	8009328 <recvfrom+0x1b0>
 8009234:	2b04      	cmp	r3, #4
 8009236:	f300 8142 	bgt.w	80094be <recvfrom+0x346>
 800923a:	2b02      	cmp	r3, #2
 800923c:	d003      	beq.n	8009246 <recvfrom+0xce>
 800923e:	2b03      	cmp	r3, #3
 8009240:	f000 80dc 	beq.w	80093fc <recvfrom+0x284>
 8009244:	e13b      	b.n	80094be <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8009246:	7bfb      	ldrb	r3, [r7, #15]
 8009248:	4a69      	ldr	r2, [pc, #420]	; (80093f0 <recvfrom+0x278>)
 800924a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d152      	bne.n	80092f8 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 8009252:	f107 0114 	add.w	r1, r7, #20
 8009256:	7bfb      	ldrb	r3, [r7, #15]
 8009258:	2208      	movs	r2, #8
 800925a:	4618      	mov	r0, r3
 800925c:	f7ff fc2e 	bl	8008abc <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8009260:	7bfb      	ldrb	r3, [r7, #15]
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	3301      	adds	r3, #1
 8009266:	00db      	lsls	r3, r3, #3
 8009268:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800926c:	2140      	movs	r1, #64	; 0x40
 800926e:	4618      	mov	r0, r3
 8009270:	f7ff fa24 	bl	80086bc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8009274:	bf00      	nop
 8009276:	7bfb      	ldrb	r3, [r7, #15]
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	3301      	adds	r3, #1
 800927c:	00db      	lsls	r3, r3, #3
 800927e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009282:	4618      	mov	r0, r3
 8009284:	f7ff f9ce 	bl	8008624 <WIZCHIP_READ>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1f3      	bne.n	8009276 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 800928e:	7d3a      	ldrb	r2, [r7, #20]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	3301      	adds	r3, #1
 8009298:	7d7a      	ldrb	r2, [r7, #21]
 800929a:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	3302      	adds	r3, #2
 80092a0:	7dba      	ldrb	r2, [r7, #22]
 80092a2:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	3303      	adds	r3, #3
 80092a8:	7dfa      	ldrb	r2, [r7, #23]
 80092aa:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80092ac:	7e3b      	ldrb	r3, [r7, #24]
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b2:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 80092b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b6:	881b      	ldrh	r3, [r3, #0]
 80092b8:	021b      	lsls	r3, r3, #8
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	7e7b      	ldrb	r3, [r7, #25]
 80092be:	b29b      	uxth	r3, r3
 80092c0:	4413      	add	r3, r2
 80092c2:	b29a      	uxth	r2, r3
 80092c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c6:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80092c8:	7eba      	ldrb	r2, [r7, #26]
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
 80092cc:	b291      	uxth	r1, r2
 80092ce:	4a48      	ldr	r2, [pc, #288]	; (80093f0 <recvfrom+0x278>)
 80092d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80092d4:	7bfb      	ldrb	r3, [r7, #15]
 80092d6:	4a46      	ldr	r2, [pc, #280]	; (80093f0 <recvfrom+0x278>)
 80092d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092dc:	021b      	lsls	r3, r3, #8
 80092de:	b299      	uxth	r1, r3
 80092e0:	7efb      	ldrb	r3, [r7, #27]
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	7bfb      	ldrb	r3, [r7, #15]
 80092e6:	440a      	add	r2, r1
 80092e8:	b291      	uxth	r1, r2
 80092ea:	4a41      	ldr	r2, [pc, #260]	; (80093f0 <recvfrom+0x278>)
 80092ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80092f0:	7bfb      	ldrb	r3, [r7, #15]
 80092f2:	4a41      	ldr	r2, [pc, #260]	; (80093f8 <recvfrom+0x280>)
 80092f4:	2180      	movs	r1, #128	; 0x80
 80092f6:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
 80092fa:	4a3d      	ldr	r2, [pc, #244]	; (80093f0 <recvfrom+0x278>)
 80092fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009300:	89ba      	ldrh	r2, [r7, #12]
 8009302:	429a      	cmp	r2, r3
 8009304:	d202      	bcs.n	800930c <recvfrom+0x194>
 8009306:	89bb      	ldrh	r3, [r7, #12]
 8009308:	83fb      	strh	r3, [r7, #30]
 800930a:	e004      	b.n	8009316 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 800930c:	7bfb      	ldrb	r3, [r7, #15]
 800930e:	4a38      	ldr	r2, [pc, #224]	; (80093f0 <recvfrom+0x278>)
 8009310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009314:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8009316:	8bfb      	ldrh	r3, [r7, #30]
 8009318:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800931a:	8bfa      	ldrh	r2, [r7, #30]
 800931c:	7bfb      	ldrb	r3, [r7, #15]
 800931e:	68b9      	ldr	r1, [r7, #8]
 8009320:	4618      	mov	r0, r3
 8009322:	f7ff fbcb 	bl	8008abc <wiz_recv_data>
			break;
 8009326:	e0d6      	b.n	80094d6 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8009328:	7bfb      	ldrb	r3, [r7, #15]
 800932a:	4a31      	ldr	r2, [pc, #196]	; (80093f0 <recvfrom+0x278>)
 800932c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d146      	bne.n	80093c2 <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8009334:	f107 0114 	add.w	r1, r7, #20
 8009338:	7bfb      	ldrb	r3, [r7, #15]
 800933a:	2202      	movs	r2, #2
 800933c:	4618      	mov	r0, r3
 800933e:	f7ff fbbd 	bl	8008abc <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8009342:	7bfb      	ldrb	r3, [r7, #15]
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	3301      	adds	r3, #1
 8009348:	00db      	lsls	r3, r3, #3
 800934a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800934e:	2140      	movs	r1, #64	; 0x40
 8009350:	4618      	mov	r0, r3
 8009352:	f7ff f9b3 	bl	80086bc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8009356:	bf00      	nop
 8009358:	7bfb      	ldrb	r3, [r7, #15]
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	3301      	adds	r3, #1
 800935e:	00db      	lsls	r3, r3, #3
 8009360:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009364:	4618      	mov	r0, r3
 8009366:	f7ff f95d 	bl	8008624 <WIZCHIP_READ>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1f3      	bne.n	8009358 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8009370:	7d3a      	ldrb	r2, [r7, #20]
 8009372:	7bfb      	ldrb	r3, [r7, #15]
 8009374:	b291      	uxth	r1, r2
 8009376:	4a1e      	ldr	r2, [pc, #120]	; (80093f0 <recvfrom+0x278>)
 8009378:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 800937c:	7bfb      	ldrb	r3, [r7, #15]
 800937e:	4a1c      	ldr	r2, [pc, #112]	; (80093f0 <recvfrom+0x278>)
 8009380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009384:	021b      	lsls	r3, r3, #8
 8009386:	b29a      	uxth	r2, r3
 8009388:	7d7b      	ldrb	r3, [r7, #21]
 800938a:	b29b      	uxth	r3, r3
 800938c:	4413      	add	r3, r2
 800938e:	b29a      	uxth	r2, r3
 8009390:	7bfb      	ldrb	r3, [r7, #15]
 8009392:	3a02      	subs	r2, #2
 8009394:	b291      	uxth	r1, r2
 8009396:	4a16      	ldr	r2, [pc, #88]	; (80093f0 <recvfrom+0x278>)
 8009398:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 800939c:	7bfb      	ldrb	r3, [r7, #15]
 800939e:	4a14      	ldr	r2, [pc, #80]	; (80093f0 <recvfrom+0x278>)
 80093a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093a4:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d906      	bls.n	80093ba <recvfrom+0x242>
   			{
   			   close(sn);
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7ff fd3e 	bl	8008e30 <close>
   			   return SOCKFATAL_PACKLEN;
 80093b4:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 80093b8:	e0c4      	b.n	8009544 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 80093ba:	7bfb      	ldrb	r3, [r7, #15]
 80093bc:	4a0e      	ldr	r2, [pc, #56]	; (80093f8 <recvfrom+0x280>)
 80093be:	2180      	movs	r1, #128	; 0x80
 80093c0:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80093c2:	7bfb      	ldrb	r3, [r7, #15]
 80093c4:	4a0a      	ldr	r2, [pc, #40]	; (80093f0 <recvfrom+0x278>)
 80093c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093ca:	89ba      	ldrh	r2, [r7, #12]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d202      	bcs.n	80093d6 <recvfrom+0x25e>
 80093d0:	89bb      	ldrh	r3, [r7, #12]
 80093d2:	83fb      	strh	r3, [r7, #30]
 80093d4:	e004      	b.n	80093e0 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 80093d6:	7bfb      	ldrb	r3, [r7, #15]
 80093d8:	4a05      	ldr	r2, [pc, #20]	; (80093f0 <recvfrom+0x278>)
 80093da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093de:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80093e0:	8bfa      	ldrh	r2, [r7, #30]
 80093e2:	7bfb      	ldrb	r3, [r7, #15]
 80093e4:	68b9      	ldr	r1, [r7, #8]
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7ff fb68 	bl	8008abc <wiz_recv_data>
		   break;
 80093ec:	e073      	b.n	80094d6 <recvfrom+0x35e>
 80093ee:	bf00      	nop
 80093f0:	20002e18 	.word	0x20002e18
 80093f4:	20002e14 	.word	0x20002e14
 80093f8:	20002e28 	.word	0x20002e28
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80093fc:	7bfb      	ldrb	r3, [r7, #15]
 80093fe:	4a53      	ldr	r2, [pc, #332]	; (800954c <recvfrom+0x3d4>)
 8009400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d144      	bne.n	8009492 <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8009408:	f107 0114 	add.w	r1, r7, #20
 800940c:	7bfb      	ldrb	r3, [r7, #15]
 800940e:	2206      	movs	r2, #6
 8009410:	4618      	mov	r0, r3
 8009412:	f7ff fb53 	bl	8008abc <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8009416:	7bfb      	ldrb	r3, [r7, #15]
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	3301      	adds	r3, #1
 800941c:	00db      	lsls	r3, r3, #3
 800941e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009422:	2140      	movs	r1, #64	; 0x40
 8009424:	4618      	mov	r0, r3
 8009426:	f7ff f949 	bl	80086bc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800942a:	bf00      	nop
 800942c:	7bfb      	ldrb	r3, [r7, #15]
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	3301      	adds	r3, #1
 8009432:	00db      	lsls	r3, r3, #3
 8009434:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009438:	4618      	mov	r0, r3
 800943a:	f7ff f8f3 	bl	8008624 <WIZCHIP_READ>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1f3      	bne.n	800942c <recvfrom+0x2b4>
   			addr[0] = head[0];
 8009444:	7d3a      	ldrb	r2, [r7, #20]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	3301      	adds	r3, #1
 800944e:	7d7a      	ldrb	r2, [r7, #21]
 8009450:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	3302      	adds	r3, #2
 8009456:	7dba      	ldrb	r2, [r7, #22]
 8009458:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	3303      	adds	r3, #3
 800945e:	7dfa      	ldrb	r2, [r7, #23]
 8009460:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8009462:	7e3a      	ldrb	r2, [r7, #24]
 8009464:	7bfb      	ldrb	r3, [r7, #15]
 8009466:	b291      	uxth	r1, r2
 8009468:	4a38      	ldr	r2, [pc, #224]	; (800954c <recvfrom+0x3d4>)
 800946a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 800946e:	7bfb      	ldrb	r3, [r7, #15]
 8009470:	4a36      	ldr	r2, [pc, #216]	; (800954c <recvfrom+0x3d4>)
 8009472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009476:	021b      	lsls	r3, r3, #8
 8009478:	b299      	uxth	r1, r3
 800947a:	7e7b      	ldrb	r3, [r7, #25]
 800947c:	b29a      	uxth	r2, r3
 800947e:	7bfb      	ldrb	r3, [r7, #15]
 8009480:	440a      	add	r2, r1
 8009482:	b291      	uxth	r1, r2
 8009484:	4a31      	ldr	r2, [pc, #196]	; (800954c <recvfrom+0x3d4>)
 8009486:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 800948a:	7bfb      	ldrb	r3, [r7, #15]
 800948c:	4a30      	ldr	r2, [pc, #192]	; (8009550 <recvfrom+0x3d8>)
 800948e:	2180      	movs	r1, #128	; 0x80
 8009490:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8009492:	7bfb      	ldrb	r3, [r7, #15]
 8009494:	4a2d      	ldr	r2, [pc, #180]	; (800954c <recvfrom+0x3d4>)
 8009496:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800949a:	89ba      	ldrh	r2, [r7, #12]
 800949c:	429a      	cmp	r2, r3
 800949e:	d202      	bcs.n	80094a6 <recvfrom+0x32e>
 80094a0:	89bb      	ldrh	r3, [r7, #12]
 80094a2:	83fb      	strh	r3, [r7, #30]
 80094a4:	e004      	b.n	80094b0 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 80094a6:	7bfb      	ldrb	r3, [r7, #15]
 80094a8:	4a28      	ldr	r2, [pc, #160]	; (800954c <recvfrom+0x3d4>)
 80094aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094ae:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80094b0:	8bfa      	ldrh	r2, [r7, #30]
 80094b2:	7bfb      	ldrb	r3, [r7, #15]
 80094b4:	68b9      	ldr	r1, [r7, #8]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7ff fb00 	bl	8008abc <wiz_recv_data>
			break;
 80094bc:	e00b      	b.n	80094d6 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 80094be:	8bfa      	ldrh	r2, [r7, #30]
 80094c0:	7bfb      	ldrb	r3, [r7, #15]
 80094c2:	4611      	mov	r1, r2
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7ff fb55 	bl	8008b74 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80094ca:	7bfb      	ldrb	r3, [r7, #15]
 80094cc:	491f      	ldr	r1, [pc, #124]	; (800954c <recvfrom+0x3d4>)
 80094ce:	8bfa      	ldrh	r2, [r7, #30]
 80094d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 80094d4:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 80094d6:	7bfb      	ldrb	r3, [r7, #15]
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	3301      	adds	r3, #1
 80094dc:	00db      	lsls	r3, r3, #3
 80094de:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80094e2:	2140      	movs	r1, #64	; 0x40
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7ff f8e9 	bl	80086bc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 80094ea:	bf00      	nop
 80094ec:	7bfb      	ldrb	r3, [r7, #15]
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	3301      	adds	r3, #1
 80094f2:	00db      	lsls	r3, r3, #3
 80094f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7ff f893 	bl	8008624 <WIZCHIP_READ>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1f3      	bne.n	80094ec <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8009504:	7bfb      	ldrb	r3, [r7, #15]
 8009506:	4a11      	ldr	r2, [pc, #68]	; (800954c <recvfrom+0x3d4>)
 8009508:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800950c:	7bfb      	ldrb	r3, [r7, #15]
 800950e:	8bfa      	ldrh	r2, [r7, #30]
 8009510:	1a8a      	subs	r2, r1, r2
 8009512:	b291      	uxth	r1, r2
 8009514:	4a0d      	ldr	r2, [pc, #52]	; (800954c <recvfrom+0x3d4>)
 8009516:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 800951a:	7bfb      	ldrb	r3, [r7, #15]
 800951c:	4a0b      	ldr	r2, [pc, #44]	; (800954c <recvfrom+0x3d4>)
 800951e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d009      	beq.n	800953a <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8009526:	7bfb      	ldrb	r3, [r7, #15]
 8009528:	4a09      	ldr	r2, [pc, #36]	; (8009550 <recvfrom+0x3d8>)
 800952a:	5cd2      	ldrb	r2, [r2, r3]
 800952c:	7bfb      	ldrb	r3, [r7, #15]
 800952e:	f042 0201 	orr.w	r2, r2, #1
 8009532:	b2d1      	uxtb	r1, r2
 8009534:	4a06      	ldr	r2, [pc, #24]	; (8009550 <recvfrom+0x3d8>)
 8009536:	54d1      	strb	r1, [r2, r3]
 8009538:	e003      	b.n	8009542 <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 800953a:	7bfb      	ldrb	r3, [r7, #15]
 800953c:	4a04      	ldr	r2, [pc, #16]	; (8009550 <recvfrom+0x3d8>)
 800953e:	2100      	movs	r1, #0
 8009540:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8009542:	8bfb      	ldrh	r3, [r7, #30]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3720      	adds	r7, #32
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	20002e18 	.word	0x20002e18
 8009550:	20002e28 	.word	0x20002e28

08009554 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8009554:	b480      	push	{r7}
 8009556:	af00      	add	r7, sp, #0
 8009558:	bf00      	nop
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8009562:	b480      	push	{r7}
 8009564:	af00      	add	r7, sp, #0
 8009566:	bf00      	nop
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8009570:	b480      	push	{r7}
 8009572:	af00      	add	r7, sp, #0
 8009574:	bf00      	nop
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800957e:	b480      	push	{r7}
 8009580:	af00      	add	r7, sp, #0
 8009582:	bf00      	nop
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	b2db      	uxtb	r3, r3
 800959a:	4618      	mov	r0, r3
 800959c:	370c      	adds	r7, #12
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr

080095a6 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80095a6:	b480      	push	{r7}
 80095a8:	b083      	sub	sp, #12
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
 80095ae:	460b      	mov	r3, r1
 80095b0:	70fb      	strb	r3, [r7, #3]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	78fa      	ldrb	r2, [r7, #3]
 80095b6:	701a      	strb	r2, [r3, #0]
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80095c4:	b480      	push	{r7}
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	2300      	movs	r3, #0
 80095ca:	4618      	mov	r0, r3
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	4603      	mov	r3, r0
 80095dc:	71fb      	strb	r3, [r7, #7]
 80095de:	bf00      	nop
 80095e0:	370c      	adds	r7, #12
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 80095ea:	b480      	push	{r7}
 80095ec:	b083      	sub	sp, #12
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	460b      	mov	r3, r1
 80095f4:	807b      	strh	r3, [r7, #2]
 80095f6:	bf00      	nop
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8009602:	b480      	push	{r7}
 8009604:	b083      	sub	sp, #12
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
 800960a:	460b      	mov	r3, r1
 800960c:	807b      	strh	r3, [r7, #2]
 800960e:	bf00      	nop
 8009610:	370c      	adds	r7, #12
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
	...

0800961c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d002      	beq.n	8009632 <reg_wizchip_cs_cbfunc+0x16>
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d106      	bne.n	8009640 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8009632:	4b0a      	ldr	r3, [pc, #40]	; (800965c <reg_wizchip_cs_cbfunc+0x40>)
 8009634:	4a0a      	ldr	r2, [pc, #40]	; (8009660 <reg_wizchip_cs_cbfunc+0x44>)
 8009636:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8009638:	4b08      	ldr	r3, [pc, #32]	; (800965c <reg_wizchip_cs_cbfunc+0x40>)
 800963a:	4a0a      	ldr	r2, [pc, #40]	; (8009664 <reg_wizchip_cs_cbfunc+0x48>)
 800963c:	619a      	str	r2, [r3, #24]
 800963e:	e006      	b.n	800964e <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8009640:	4a06      	ldr	r2, [pc, #24]	; (800965c <reg_wizchip_cs_cbfunc+0x40>)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8009646:	4a05      	ldr	r2, [pc, #20]	; (800965c <reg_wizchip_cs_cbfunc+0x40>)
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	6193      	str	r3, [r2, #24]
   }
}
 800964c:	bf00      	nop
 800964e:	bf00      	nop
 8009650:	370c      	adds	r7, #12
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	20000094 	.word	0x20000094
 8009660:	08009571 	.word	0x08009571
 8009664:	0800957f 	.word	0x0800957f

08009668 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8009672:	bf00      	nop
 8009674:	4b0f      	ldr	r3, [pc, #60]	; (80096b4 <reg_wizchip_spi_cbfunc+0x4c>)
 8009676:	881b      	ldrh	r3, [r3, #0]
 8009678:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800967c:	2b00      	cmp	r3, #0
 800967e:	d0f9      	beq.n	8009674 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d002      	beq.n	800968c <reg_wizchip_spi_cbfunc+0x24>
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d106      	bne.n	800969a <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 800968c:	4b09      	ldr	r3, [pc, #36]	; (80096b4 <reg_wizchip_spi_cbfunc+0x4c>)
 800968e:	4a0a      	ldr	r2, [pc, #40]	; (80096b8 <reg_wizchip_spi_cbfunc+0x50>)
 8009690:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8009692:	4b08      	ldr	r3, [pc, #32]	; (80096b4 <reg_wizchip_spi_cbfunc+0x4c>)
 8009694:	4a09      	ldr	r2, [pc, #36]	; (80096bc <reg_wizchip_spi_cbfunc+0x54>)
 8009696:	621a      	str	r2, [r3, #32]
 8009698:	e006      	b.n	80096a8 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800969a:	4a06      	ldr	r2, [pc, #24]	; (80096b4 <reg_wizchip_spi_cbfunc+0x4c>)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80096a0:	4a04      	ldr	r2, [pc, #16]	; (80096b4 <reg_wizchip_spi_cbfunc+0x4c>)
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	6213      	str	r3, [r2, #32]
   }
}
 80096a6:	bf00      	nop
 80096a8:	bf00      	nop
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr
 80096b4:	20000094 	.word	0x20000094
 80096b8:	080095c5 	.word	0x080095c5
 80096bc:	080095d5 	.word	0x080095d5

080096c0 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80096ca:	bf00      	nop
 80096cc:	4b0f      	ldr	r3, [pc, #60]	; (800970c <reg_wizchip_spiburst_cbfunc+0x4c>)
 80096ce:	881b      	ldrh	r3, [r3, #0]
 80096d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d0f9      	beq.n	80096cc <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <reg_wizchip_spiburst_cbfunc+0x24>
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d106      	bne.n	80096f2 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80096e4:	4b09      	ldr	r3, [pc, #36]	; (800970c <reg_wizchip_spiburst_cbfunc+0x4c>)
 80096e6:	4a0a      	ldr	r2, [pc, #40]	; (8009710 <reg_wizchip_spiburst_cbfunc+0x50>)
 80096e8:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80096ea:	4b08      	ldr	r3, [pc, #32]	; (800970c <reg_wizchip_spiburst_cbfunc+0x4c>)
 80096ec:	4a09      	ldr	r2, [pc, #36]	; (8009714 <reg_wizchip_spiburst_cbfunc+0x54>)
 80096ee:	629a      	str	r2, [r3, #40]	; 0x28
 80096f0:	e006      	b.n	8009700 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80096f2:	4a06      	ldr	r2, [pc, #24]	; (800970c <reg_wizchip_spiburst_cbfunc+0x4c>)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 80096f8:	4a04      	ldr	r2, [pc, #16]	; (800970c <reg_wizchip_spiburst_cbfunc+0x4c>)
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 80096fe:	bf00      	nop
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr
 800970c:	20000094 	.word	0x20000094
 8009710:	080095eb 	.word	0x080095eb
 8009714:	08009603 	.word	0x08009603

08009718 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800971e:	1d3b      	adds	r3, r7, #4
 8009720:	2206      	movs	r2, #6
 8009722:	4619      	mov	r1, r3
 8009724:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009728:	f7ff f816 	bl	8008758 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 800972c:	f107 0314 	add.w	r3, r7, #20
 8009730:	2204      	movs	r2, #4
 8009732:	4619      	mov	r1, r3
 8009734:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009738:	f7ff f80e 	bl	8008758 <WIZCHIP_READ_BUF>
 800973c:	f107 0310 	add.w	r3, r7, #16
 8009740:	2204      	movs	r2, #4
 8009742:	4619      	mov	r1, r3
 8009744:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8009748:	f7ff f806 	bl	8008758 <WIZCHIP_READ_BUF>
 800974c:	f107 030c 	add.w	r3, r7, #12
 8009750:	2204      	movs	r2, #4
 8009752:	4619      	mov	r1, r3
 8009754:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8009758:	f7fe fffe 	bl	8008758 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 800975c:	2180      	movs	r1, #128	; 0x80
 800975e:	2000      	movs	r0, #0
 8009760:	f7fe ffac 	bl	80086bc <WIZCHIP_WRITE>
   getMR(); // for delay
 8009764:	2000      	movs	r0, #0
 8009766:	f7fe ff5d 	bl	8008624 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 800976a:	1d3b      	adds	r3, r7, #4
 800976c:	2206      	movs	r2, #6
 800976e:	4619      	mov	r1, r3
 8009770:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8009774:	f7ff f850 	bl	8008818 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8009778:	f107 0314 	add.w	r3, r7, #20
 800977c:	2204      	movs	r2, #4
 800977e:	4619      	mov	r1, r3
 8009780:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009784:	f7ff f848 	bl	8008818 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8009788:	f107 0310 	add.w	r3, r7, #16
 800978c:	2204      	movs	r2, #4
 800978e:	4619      	mov	r1, r3
 8009790:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8009794:	f7ff f840 	bl	8008818 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8009798:	f107 030c 	add.w	r3, r7, #12
 800979c:	2204      	movs	r2, #4
 800979e:	4619      	mov	r1, r3
 80097a0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80097a4:	f7ff f838 	bl	8008818 <WIZCHIP_WRITE_BUF>
}
 80097a8:	bf00      	nop
 80097aa:	3718      	adds	r7, #24
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80097be:	f7ff ffab 	bl	8009718 <wizchip_sw_reset>
   if(txsize)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d03b      	beq.n	8009840 <wizchip_init+0x90>
   {
      tmp = 0;
 80097c8:	2300      	movs	r3, #0
 80097ca:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80097cc:	2300      	movs	r3, #0
 80097ce:	73fb      	strb	r3, [r7, #15]
 80097d0:	e015      	b.n	80097fe <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 80097d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	4413      	add	r3, r2
 80097da:	781a      	ldrb	r2, [r3, #0]
 80097dc:	7bbb      	ldrb	r3, [r7, #14]
 80097de:	4413      	add	r3, r2
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	73bb      	strb	r3, [r7, #14]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 80097e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097e8:	2b10      	cmp	r3, #16
 80097ea:	dd02      	ble.n	80097f2 <wizchip_init+0x42>
 80097ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097f0:	e066      	b.n	80098c0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80097f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	3301      	adds	r3, #1
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	73fb      	strb	r3, [r7, #15]
 80097fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009802:	2b07      	cmp	r3, #7
 8009804:	dde5      	ble.n	80097d2 <wizchip_init+0x22>
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009806:	2300      	movs	r3, #0
 8009808:	73fb      	strb	r3, [r7, #15]
 800980a:	e015      	b.n	8009838 <wizchip_init+0x88>
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
		#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 800980c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	3301      	adds	r3, #1
 8009814:	00db      	lsls	r3, r3, #3
 8009816:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800981a:	4618      	mov	r0, r3
 800981c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	4413      	add	r3, r2
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	4619      	mov	r1, r3
 8009828:	f7fe ff48 	bl	80086bc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800982c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009830:	b2db      	uxtb	r3, r3
 8009832:	3301      	adds	r3, #1
 8009834:	b2db      	uxtb	r3, r3
 8009836:	73fb      	strb	r3, [r7, #15]
 8009838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800983c:	2b07      	cmp	r3, #7
 800983e:	dde5      	ble.n	800980c <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d03b      	beq.n	80098be <wizchip_init+0x10e>
   {
      tmp = 0;
 8009846:	2300      	movs	r3, #0
 8009848:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800984a:	2300      	movs	r3, #0
 800984c:	73fb      	strb	r3, [r7, #15]
 800984e:	e015      	b.n	800987c <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8009850:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009854:	683a      	ldr	r2, [r7, #0]
 8009856:	4413      	add	r3, r2
 8009858:	781a      	ldrb	r2, [r3, #0]
 800985a:	7bbb      	ldrb	r3, [r7, #14]
 800985c:	4413      	add	r3, r2
 800985e:	b2db      	uxtb	r3, r3
 8009860:	73bb      	strb	r3, [r7, #14]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
		#else
			if(tmp > 16) return -1;
 8009862:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009866:	2b10      	cmp	r3, #16
 8009868:	dd02      	ble.n	8009870 <wizchip_init+0xc0>
 800986a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800986e:	e027      	b.n	80098c0 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009874:	b2db      	uxtb	r3, r3
 8009876:	3301      	adds	r3, #1
 8009878:	b2db      	uxtb	r3, r3
 800987a:	73fb      	strb	r3, [r7, #15]
 800987c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009880:	2b07      	cmp	r3, #7
 8009882:	dde5      	ble.n	8009850 <wizchip_init+0xa0>
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009884:	2300      	movs	r3, #0
 8009886:	73fb      	strb	r3, [r7, #15]
 8009888:	e015      	b.n	80098b6 <wizchip_init+0x106>
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
		#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 800988a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	3301      	adds	r3, #1
 8009892:	00db      	lsls	r3, r3, #3
 8009894:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8009898:	4618      	mov	r0, r3
 800989a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	4413      	add	r3, r2
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	4619      	mov	r1, r3
 80098a6:	f7fe ff09 	bl	80086bc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80098aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	3301      	adds	r3, #1
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	73fb      	strb	r3, [r7, #15]
 80098b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098ba:	2b07      	cmp	r3, #7
 80098bc:	dde5      	ble.n	800988a <wizchip_init+0xda>
		#endif
		}
	#endif
   }
   return 0;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3710      	adds	r7, #16
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}

080098c8 <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b082      	sub	sp, #8
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2206      	movs	r2, #6
 80098d4:	4619      	mov	r1, r3
 80098d6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80098da:	f7fe ff9d 	bl	8008818 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	330e      	adds	r3, #14
 80098e2:	2204      	movs	r2, #4
 80098e4:	4619      	mov	r1, r3
 80098e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80098ea:	f7fe ff95 	bl	8008818 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	330a      	adds	r3, #10
 80098f2:	2204      	movs	r2, #4
 80098f4:	4619      	mov	r1, r3
 80098f6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80098fa:	f7fe ff8d 	bl	8008818 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	3306      	adds	r3, #6
 8009902:	2204      	movs	r2, #4
 8009904:	4619      	mov	r1, r3
 8009906:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800990a:	f7fe ff85 	bl	8008818 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	7c9a      	ldrb	r2, [r3, #18]
 8009912:	4b0b      	ldr	r3, [pc, #44]	; (8009940 <wizchip_setnetinfo+0x78>)
 8009914:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	7cda      	ldrb	r2, [r3, #19]
 800991a:	4b09      	ldr	r3, [pc, #36]	; (8009940 <wizchip_setnetinfo+0x78>)
 800991c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	7d1a      	ldrb	r2, [r3, #20]
 8009922:	4b07      	ldr	r3, [pc, #28]	; (8009940 <wizchip_setnetinfo+0x78>)
 8009924:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	7d5a      	ldrb	r2, [r3, #21]
 800992a:	4b05      	ldr	r3, [pc, #20]	; (8009940 <wizchip_setnetinfo+0x78>)
 800992c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	7d9a      	ldrb	r2, [r3, #22]
 8009932:	4b04      	ldr	r3, [pc, #16]	; (8009944 <wizchip_setnetinfo+0x7c>)
 8009934:	701a      	strb	r2, [r3, #0]
}
 8009936:	bf00      	nop
 8009938:	3708      	adds	r7, #8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	20002e30 	.word	0x20002e30
 8009944:	20002e34 	.word	0x20002e34

08009948 <atoff>:
 8009948:	2100      	movs	r1, #0
 800994a:	f001 bc47 	b.w	800b1dc <strtof>

0800994e <atoi>:
 800994e:	220a      	movs	r2, #10
 8009950:	2100      	movs	r1, #0
 8009952:	f001 bd21 	b.w	800b398 <strtol>

08009956 <atoll>:
 8009956:	220a      	movs	r2, #10
 8009958:	2100      	movs	r1, #0
 800995a:	f001 bdbd 	b.w	800b4d8 <strtoll>
	...

08009960 <__errno>:
 8009960:	4b01      	ldr	r3, [pc, #4]	; (8009968 <__errno+0x8>)
 8009962:	6818      	ldr	r0, [r3, #0]
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop
 8009968:	200000c0 	.word	0x200000c0

0800996c <__libc_init_array>:
 800996c:	b570      	push	{r4, r5, r6, lr}
 800996e:	4d0d      	ldr	r5, [pc, #52]	; (80099a4 <__libc_init_array+0x38>)
 8009970:	4c0d      	ldr	r4, [pc, #52]	; (80099a8 <__libc_init_array+0x3c>)
 8009972:	1b64      	subs	r4, r4, r5
 8009974:	10a4      	asrs	r4, r4, #2
 8009976:	2600      	movs	r6, #0
 8009978:	42a6      	cmp	r6, r4
 800997a:	d109      	bne.n	8009990 <__libc_init_array+0x24>
 800997c:	4d0b      	ldr	r5, [pc, #44]	; (80099ac <__libc_init_array+0x40>)
 800997e:	4c0c      	ldr	r4, [pc, #48]	; (80099b0 <__libc_init_array+0x44>)
 8009980:	f004 fb80 	bl	800e084 <_init>
 8009984:	1b64      	subs	r4, r4, r5
 8009986:	10a4      	asrs	r4, r4, #2
 8009988:	2600      	movs	r6, #0
 800998a:	42a6      	cmp	r6, r4
 800998c:	d105      	bne.n	800999a <__libc_init_array+0x2e>
 800998e:	bd70      	pop	{r4, r5, r6, pc}
 8009990:	f855 3b04 	ldr.w	r3, [r5], #4
 8009994:	4798      	blx	r3
 8009996:	3601      	adds	r6, #1
 8009998:	e7ee      	b.n	8009978 <__libc_init_array+0xc>
 800999a:	f855 3b04 	ldr.w	r3, [r5], #4
 800999e:	4798      	blx	r3
 80099a0:	3601      	adds	r6, #1
 80099a2:	e7f2      	b.n	800998a <__libc_init_array+0x1e>
 80099a4:	0800f810 	.word	0x0800f810
 80099a8:	0800f810 	.word	0x0800f810
 80099ac:	0800f810 	.word	0x0800f810
 80099b0:	0800f814 	.word	0x0800f814

080099b4 <malloc>:
 80099b4:	4b02      	ldr	r3, [pc, #8]	; (80099c0 <malloc+0xc>)
 80099b6:	4601      	mov	r1, r0
 80099b8:	6818      	ldr	r0, [r3, #0]
 80099ba:	f000 b885 	b.w	8009ac8 <_malloc_r>
 80099be:	bf00      	nop
 80099c0:	200000c0 	.word	0x200000c0

080099c4 <memcpy>:
 80099c4:	440a      	add	r2, r1
 80099c6:	4291      	cmp	r1, r2
 80099c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80099cc:	d100      	bne.n	80099d0 <memcpy+0xc>
 80099ce:	4770      	bx	lr
 80099d0:	b510      	push	{r4, lr}
 80099d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099da:	4291      	cmp	r1, r2
 80099dc:	d1f9      	bne.n	80099d2 <memcpy+0xe>
 80099de:	bd10      	pop	{r4, pc}

080099e0 <memset>:
 80099e0:	4402      	add	r2, r0
 80099e2:	4603      	mov	r3, r0
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d100      	bne.n	80099ea <memset+0xa>
 80099e8:	4770      	bx	lr
 80099ea:	f803 1b01 	strb.w	r1, [r3], #1
 80099ee:	e7f9      	b.n	80099e4 <memset+0x4>

080099f0 <_free_r>:
 80099f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099f2:	2900      	cmp	r1, #0
 80099f4:	d044      	beq.n	8009a80 <_free_r+0x90>
 80099f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099fa:	9001      	str	r0, [sp, #4]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	f1a1 0404 	sub.w	r4, r1, #4
 8009a02:	bfb8      	it	lt
 8009a04:	18e4      	addlt	r4, r4, r3
 8009a06:	f003 fab7 	bl	800cf78 <__malloc_lock>
 8009a0a:	4a1e      	ldr	r2, [pc, #120]	; (8009a84 <_free_r+0x94>)
 8009a0c:	9801      	ldr	r0, [sp, #4]
 8009a0e:	6813      	ldr	r3, [r2, #0]
 8009a10:	b933      	cbnz	r3, 8009a20 <_free_r+0x30>
 8009a12:	6063      	str	r3, [r4, #4]
 8009a14:	6014      	str	r4, [r2, #0]
 8009a16:	b003      	add	sp, #12
 8009a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a1c:	f003 bab2 	b.w	800cf84 <__malloc_unlock>
 8009a20:	42a3      	cmp	r3, r4
 8009a22:	d908      	bls.n	8009a36 <_free_r+0x46>
 8009a24:	6825      	ldr	r5, [r4, #0]
 8009a26:	1961      	adds	r1, r4, r5
 8009a28:	428b      	cmp	r3, r1
 8009a2a:	bf01      	itttt	eq
 8009a2c:	6819      	ldreq	r1, [r3, #0]
 8009a2e:	685b      	ldreq	r3, [r3, #4]
 8009a30:	1949      	addeq	r1, r1, r5
 8009a32:	6021      	streq	r1, [r4, #0]
 8009a34:	e7ed      	b.n	8009a12 <_free_r+0x22>
 8009a36:	461a      	mov	r2, r3
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	b10b      	cbz	r3, 8009a40 <_free_r+0x50>
 8009a3c:	42a3      	cmp	r3, r4
 8009a3e:	d9fa      	bls.n	8009a36 <_free_r+0x46>
 8009a40:	6811      	ldr	r1, [r2, #0]
 8009a42:	1855      	adds	r5, r2, r1
 8009a44:	42a5      	cmp	r5, r4
 8009a46:	d10b      	bne.n	8009a60 <_free_r+0x70>
 8009a48:	6824      	ldr	r4, [r4, #0]
 8009a4a:	4421      	add	r1, r4
 8009a4c:	1854      	adds	r4, r2, r1
 8009a4e:	42a3      	cmp	r3, r4
 8009a50:	6011      	str	r1, [r2, #0]
 8009a52:	d1e0      	bne.n	8009a16 <_free_r+0x26>
 8009a54:	681c      	ldr	r4, [r3, #0]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	6053      	str	r3, [r2, #4]
 8009a5a:	4421      	add	r1, r4
 8009a5c:	6011      	str	r1, [r2, #0]
 8009a5e:	e7da      	b.n	8009a16 <_free_r+0x26>
 8009a60:	d902      	bls.n	8009a68 <_free_r+0x78>
 8009a62:	230c      	movs	r3, #12
 8009a64:	6003      	str	r3, [r0, #0]
 8009a66:	e7d6      	b.n	8009a16 <_free_r+0x26>
 8009a68:	6825      	ldr	r5, [r4, #0]
 8009a6a:	1961      	adds	r1, r4, r5
 8009a6c:	428b      	cmp	r3, r1
 8009a6e:	bf04      	itt	eq
 8009a70:	6819      	ldreq	r1, [r3, #0]
 8009a72:	685b      	ldreq	r3, [r3, #4]
 8009a74:	6063      	str	r3, [r4, #4]
 8009a76:	bf04      	itt	eq
 8009a78:	1949      	addeq	r1, r1, r5
 8009a7a:	6021      	streq	r1, [r4, #0]
 8009a7c:	6054      	str	r4, [r2, #4]
 8009a7e:	e7ca      	b.n	8009a16 <_free_r+0x26>
 8009a80:	b003      	add	sp, #12
 8009a82:	bd30      	pop	{r4, r5, pc}
 8009a84:	20002e38 	.word	0x20002e38

08009a88 <sbrk_aligned>:
 8009a88:	b570      	push	{r4, r5, r6, lr}
 8009a8a:	4e0e      	ldr	r6, [pc, #56]	; (8009ac4 <sbrk_aligned+0x3c>)
 8009a8c:	460c      	mov	r4, r1
 8009a8e:	6831      	ldr	r1, [r6, #0]
 8009a90:	4605      	mov	r5, r0
 8009a92:	b911      	cbnz	r1, 8009a9a <sbrk_aligned+0x12>
 8009a94:	f000 fcf6 	bl	800a484 <_sbrk_r>
 8009a98:	6030      	str	r0, [r6, #0]
 8009a9a:	4621      	mov	r1, r4
 8009a9c:	4628      	mov	r0, r5
 8009a9e:	f000 fcf1 	bl	800a484 <_sbrk_r>
 8009aa2:	1c43      	adds	r3, r0, #1
 8009aa4:	d00a      	beq.n	8009abc <sbrk_aligned+0x34>
 8009aa6:	1cc4      	adds	r4, r0, #3
 8009aa8:	f024 0403 	bic.w	r4, r4, #3
 8009aac:	42a0      	cmp	r0, r4
 8009aae:	d007      	beq.n	8009ac0 <sbrk_aligned+0x38>
 8009ab0:	1a21      	subs	r1, r4, r0
 8009ab2:	4628      	mov	r0, r5
 8009ab4:	f000 fce6 	bl	800a484 <_sbrk_r>
 8009ab8:	3001      	adds	r0, #1
 8009aba:	d101      	bne.n	8009ac0 <sbrk_aligned+0x38>
 8009abc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	bd70      	pop	{r4, r5, r6, pc}
 8009ac4:	20002e3c 	.word	0x20002e3c

08009ac8 <_malloc_r>:
 8009ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009acc:	1ccd      	adds	r5, r1, #3
 8009ace:	f025 0503 	bic.w	r5, r5, #3
 8009ad2:	3508      	adds	r5, #8
 8009ad4:	2d0c      	cmp	r5, #12
 8009ad6:	bf38      	it	cc
 8009ad8:	250c      	movcc	r5, #12
 8009ada:	2d00      	cmp	r5, #0
 8009adc:	4607      	mov	r7, r0
 8009ade:	db01      	blt.n	8009ae4 <_malloc_r+0x1c>
 8009ae0:	42a9      	cmp	r1, r5
 8009ae2:	d905      	bls.n	8009af0 <_malloc_r+0x28>
 8009ae4:	230c      	movs	r3, #12
 8009ae6:	603b      	str	r3, [r7, #0]
 8009ae8:	2600      	movs	r6, #0
 8009aea:	4630      	mov	r0, r6
 8009aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af0:	4e2e      	ldr	r6, [pc, #184]	; (8009bac <_malloc_r+0xe4>)
 8009af2:	f003 fa41 	bl	800cf78 <__malloc_lock>
 8009af6:	6833      	ldr	r3, [r6, #0]
 8009af8:	461c      	mov	r4, r3
 8009afa:	bb34      	cbnz	r4, 8009b4a <_malloc_r+0x82>
 8009afc:	4629      	mov	r1, r5
 8009afe:	4638      	mov	r0, r7
 8009b00:	f7ff ffc2 	bl	8009a88 <sbrk_aligned>
 8009b04:	1c43      	adds	r3, r0, #1
 8009b06:	4604      	mov	r4, r0
 8009b08:	d14d      	bne.n	8009ba6 <_malloc_r+0xde>
 8009b0a:	6834      	ldr	r4, [r6, #0]
 8009b0c:	4626      	mov	r6, r4
 8009b0e:	2e00      	cmp	r6, #0
 8009b10:	d140      	bne.n	8009b94 <_malloc_r+0xcc>
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	4631      	mov	r1, r6
 8009b16:	4638      	mov	r0, r7
 8009b18:	eb04 0803 	add.w	r8, r4, r3
 8009b1c:	f000 fcb2 	bl	800a484 <_sbrk_r>
 8009b20:	4580      	cmp	r8, r0
 8009b22:	d13a      	bne.n	8009b9a <_malloc_r+0xd2>
 8009b24:	6821      	ldr	r1, [r4, #0]
 8009b26:	3503      	adds	r5, #3
 8009b28:	1a6d      	subs	r5, r5, r1
 8009b2a:	f025 0503 	bic.w	r5, r5, #3
 8009b2e:	3508      	adds	r5, #8
 8009b30:	2d0c      	cmp	r5, #12
 8009b32:	bf38      	it	cc
 8009b34:	250c      	movcc	r5, #12
 8009b36:	4629      	mov	r1, r5
 8009b38:	4638      	mov	r0, r7
 8009b3a:	f7ff ffa5 	bl	8009a88 <sbrk_aligned>
 8009b3e:	3001      	adds	r0, #1
 8009b40:	d02b      	beq.n	8009b9a <_malloc_r+0xd2>
 8009b42:	6823      	ldr	r3, [r4, #0]
 8009b44:	442b      	add	r3, r5
 8009b46:	6023      	str	r3, [r4, #0]
 8009b48:	e00e      	b.n	8009b68 <_malloc_r+0xa0>
 8009b4a:	6822      	ldr	r2, [r4, #0]
 8009b4c:	1b52      	subs	r2, r2, r5
 8009b4e:	d41e      	bmi.n	8009b8e <_malloc_r+0xc6>
 8009b50:	2a0b      	cmp	r2, #11
 8009b52:	d916      	bls.n	8009b82 <_malloc_r+0xba>
 8009b54:	1961      	adds	r1, r4, r5
 8009b56:	42a3      	cmp	r3, r4
 8009b58:	6025      	str	r5, [r4, #0]
 8009b5a:	bf18      	it	ne
 8009b5c:	6059      	strne	r1, [r3, #4]
 8009b5e:	6863      	ldr	r3, [r4, #4]
 8009b60:	bf08      	it	eq
 8009b62:	6031      	streq	r1, [r6, #0]
 8009b64:	5162      	str	r2, [r4, r5]
 8009b66:	604b      	str	r3, [r1, #4]
 8009b68:	4638      	mov	r0, r7
 8009b6a:	f104 060b 	add.w	r6, r4, #11
 8009b6e:	f003 fa09 	bl	800cf84 <__malloc_unlock>
 8009b72:	f026 0607 	bic.w	r6, r6, #7
 8009b76:	1d23      	adds	r3, r4, #4
 8009b78:	1af2      	subs	r2, r6, r3
 8009b7a:	d0b6      	beq.n	8009aea <_malloc_r+0x22>
 8009b7c:	1b9b      	subs	r3, r3, r6
 8009b7e:	50a3      	str	r3, [r4, r2]
 8009b80:	e7b3      	b.n	8009aea <_malloc_r+0x22>
 8009b82:	6862      	ldr	r2, [r4, #4]
 8009b84:	42a3      	cmp	r3, r4
 8009b86:	bf0c      	ite	eq
 8009b88:	6032      	streq	r2, [r6, #0]
 8009b8a:	605a      	strne	r2, [r3, #4]
 8009b8c:	e7ec      	b.n	8009b68 <_malloc_r+0xa0>
 8009b8e:	4623      	mov	r3, r4
 8009b90:	6864      	ldr	r4, [r4, #4]
 8009b92:	e7b2      	b.n	8009afa <_malloc_r+0x32>
 8009b94:	4634      	mov	r4, r6
 8009b96:	6876      	ldr	r6, [r6, #4]
 8009b98:	e7b9      	b.n	8009b0e <_malloc_r+0x46>
 8009b9a:	230c      	movs	r3, #12
 8009b9c:	603b      	str	r3, [r7, #0]
 8009b9e:	4638      	mov	r0, r7
 8009ba0:	f003 f9f0 	bl	800cf84 <__malloc_unlock>
 8009ba4:	e7a1      	b.n	8009aea <_malloc_r+0x22>
 8009ba6:	6025      	str	r5, [r4, #0]
 8009ba8:	e7de      	b.n	8009b68 <_malloc_r+0xa0>
 8009baa:	bf00      	nop
 8009bac:	20002e38 	.word	0x20002e38

08009bb0 <__cvt>:
 8009bb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb4:	ec55 4b10 	vmov	r4, r5, d0
 8009bb8:	2d00      	cmp	r5, #0
 8009bba:	460e      	mov	r6, r1
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	462b      	mov	r3, r5
 8009bc0:	bfbb      	ittet	lt
 8009bc2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009bc6:	461d      	movlt	r5, r3
 8009bc8:	2300      	movge	r3, #0
 8009bca:	232d      	movlt	r3, #45	; 0x2d
 8009bcc:	700b      	strb	r3, [r1, #0]
 8009bce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bd0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009bd4:	4691      	mov	r9, r2
 8009bd6:	f023 0820 	bic.w	r8, r3, #32
 8009bda:	bfbc      	itt	lt
 8009bdc:	4622      	movlt	r2, r4
 8009bde:	4614      	movlt	r4, r2
 8009be0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009be4:	d005      	beq.n	8009bf2 <__cvt+0x42>
 8009be6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009bea:	d100      	bne.n	8009bee <__cvt+0x3e>
 8009bec:	3601      	adds	r6, #1
 8009bee:	2102      	movs	r1, #2
 8009bf0:	e000      	b.n	8009bf4 <__cvt+0x44>
 8009bf2:	2103      	movs	r1, #3
 8009bf4:	ab03      	add	r3, sp, #12
 8009bf6:	9301      	str	r3, [sp, #4]
 8009bf8:	ab02      	add	r3, sp, #8
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	ec45 4b10 	vmov	d0, r4, r5
 8009c00:	4653      	mov	r3, sl
 8009c02:	4632      	mov	r2, r6
 8009c04:	f001 fe00 	bl	800b808 <_dtoa_r>
 8009c08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009c0c:	4607      	mov	r7, r0
 8009c0e:	d102      	bne.n	8009c16 <__cvt+0x66>
 8009c10:	f019 0f01 	tst.w	r9, #1
 8009c14:	d022      	beq.n	8009c5c <__cvt+0xac>
 8009c16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c1a:	eb07 0906 	add.w	r9, r7, r6
 8009c1e:	d110      	bne.n	8009c42 <__cvt+0x92>
 8009c20:	783b      	ldrb	r3, [r7, #0]
 8009c22:	2b30      	cmp	r3, #48	; 0x30
 8009c24:	d10a      	bne.n	8009c3c <__cvt+0x8c>
 8009c26:	2200      	movs	r2, #0
 8009c28:	2300      	movs	r3, #0
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	f7f6 ff53 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c32:	b918      	cbnz	r0, 8009c3c <__cvt+0x8c>
 8009c34:	f1c6 0601 	rsb	r6, r6, #1
 8009c38:	f8ca 6000 	str.w	r6, [sl]
 8009c3c:	f8da 3000 	ldr.w	r3, [sl]
 8009c40:	4499      	add	r9, r3
 8009c42:	2200      	movs	r2, #0
 8009c44:	2300      	movs	r3, #0
 8009c46:	4620      	mov	r0, r4
 8009c48:	4629      	mov	r1, r5
 8009c4a:	f7f6 ff45 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c4e:	b108      	cbz	r0, 8009c54 <__cvt+0xa4>
 8009c50:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c54:	2230      	movs	r2, #48	; 0x30
 8009c56:	9b03      	ldr	r3, [sp, #12]
 8009c58:	454b      	cmp	r3, r9
 8009c5a:	d307      	bcc.n	8009c6c <__cvt+0xbc>
 8009c5c:	9b03      	ldr	r3, [sp, #12]
 8009c5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c60:	1bdb      	subs	r3, r3, r7
 8009c62:	4638      	mov	r0, r7
 8009c64:	6013      	str	r3, [r2, #0]
 8009c66:	b004      	add	sp, #16
 8009c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c6c:	1c59      	adds	r1, r3, #1
 8009c6e:	9103      	str	r1, [sp, #12]
 8009c70:	701a      	strb	r2, [r3, #0]
 8009c72:	e7f0      	b.n	8009c56 <__cvt+0xa6>

08009c74 <__exponent>:
 8009c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c76:	4603      	mov	r3, r0
 8009c78:	2900      	cmp	r1, #0
 8009c7a:	bfb8      	it	lt
 8009c7c:	4249      	neglt	r1, r1
 8009c7e:	f803 2b02 	strb.w	r2, [r3], #2
 8009c82:	bfb4      	ite	lt
 8009c84:	222d      	movlt	r2, #45	; 0x2d
 8009c86:	222b      	movge	r2, #43	; 0x2b
 8009c88:	2909      	cmp	r1, #9
 8009c8a:	7042      	strb	r2, [r0, #1]
 8009c8c:	dd2a      	ble.n	8009ce4 <__exponent+0x70>
 8009c8e:	f10d 0407 	add.w	r4, sp, #7
 8009c92:	46a4      	mov	ip, r4
 8009c94:	270a      	movs	r7, #10
 8009c96:	46a6      	mov	lr, r4
 8009c98:	460a      	mov	r2, r1
 8009c9a:	fb91 f6f7 	sdiv	r6, r1, r7
 8009c9e:	fb07 1516 	mls	r5, r7, r6, r1
 8009ca2:	3530      	adds	r5, #48	; 0x30
 8009ca4:	2a63      	cmp	r2, #99	; 0x63
 8009ca6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009caa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009cae:	4631      	mov	r1, r6
 8009cb0:	dcf1      	bgt.n	8009c96 <__exponent+0x22>
 8009cb2:	3130      	adds	r1, #48	; 0x30
 8009cb4:	f1ae 0502 	sub.w	r5, lr, #2
 8009cb8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009cbc:	1c44      	adds	r4, r0, #1
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	4561      	cmp	r1, ip
 8009cc2:	d30a      	bcc.n	8009cda <__exponent+0x66>
 8009cc4:	f10d 0209 	add.w	r2, sp, #9
 8009cc8:	eba2 020e 	sub.w	r2, r2, lr
 8009ccc:	4565      	cmp	r5, ip
 8009cce:	bf88      	it	hi
 8009cd0:	2200      	movhi	r2, #0
 8009cd2:	4413      	add	r3, r2
 8009cd4:	1a18      	subs	r0, r3, r0
 8009cd6:	b003      	add	sp, #12
 8009cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cde:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009ce2:	e7ed      	b.n	8009cc0 <__exponent+0x4c>
 8009ce4:	2330      	movs	r3, #48	; 0x30
 8009ce6:	3130      	adds	r1, #48	; 0x30
 8009ce8:	7083      	strb	r3, [r0, #2]
 8009cea:	70c1      	strb	r1, [r0, #3]
 8009cec:	1d03      	adds	r3, r0, #4
 8009cee:	e7f1      	b.n	8009cd4 <__exponent+0x60>

08009cf0 <_printf_float>:
 8009cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf4:	ed2d 8b02 	vpush	{d8}
 8009cf8:	b08d      	sub	sp, #52	; 0x34
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009d00:	4616      	mov	r6, r2
 8009d02:	461f      	mov	r7, r3
 8009d04:	4605      	mov	r5, r0
 8009d06:	f003 f8a5 	bl	800ce54 <_localeconv_r>
 8009d0a:	f8d0 a000 	ldr.w	sl, [r0]
 8009d0e:	4650      	mov	r0, sl
 8009d10:	f7f6 fa66 	bl	80001e0 <strlen>
 8009d14:	2300      	movs	r3, #0
 8009d16:	930a      	str	r3, [sp, #40]	; 0x28
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	9305      	str	r3, [sp, #20]
 8009d1c:	f8d8 3000 	ldr.w	r3, [r8]
 8009d20:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009d24:	3307      	adds	r3, #7
 8009d26:	f023 0307 	bic.w	r3, r3, #7
 8009d2a:	f103 0208 	add.w	r2, r3, #8
 8009d2e:	f8c8 2000 	str.w	r2, [r8]
 8009d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d36:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009d3a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009d3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d42:	9307      	str	r3, [sp, #28]
 8009d44:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d48:	ee08 0a10 	vmov	s16, r0
 8009d4c:	4b9f      	ldr	r3, [pc, #636]	; (8009fcc <_printf_float+0x2dc>)
 8009d4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d56:	f7f6 fef1 	bl	8000b3c <__aeabi_dcmpun>
 8009d5a:	bb88      	cbnz	r0, 8009dc0 <_printf_float+0xd0>
 8009d5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d60:	4b9a      	ldr	r3, [pc, #616]	; (8009fcc <_printf_float+0x2dc>)
 8009d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d66:	f7f6 fecb 	bl	8000b00 <__aeabi_dcmple>
 8009d6a:	bb48      	cbnz	r0, 8009dc0 <_printf_float+0xd0>
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	2300      	movs	r3, #0
 8009d70:	4640      	mov	r0, r8
 8009d72:	4649      	mov	r1, r9
 8009d74:	f7f6 feba 	bl	8000aec <__aeabi_dcmplt>
 8009d78:	b110      	cbz	r0, 8009d80 <_printf_float+0x90>
 8009d7a:	232d      	movs	r3, #45	; 0x2d
 8009d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d80:	4b93      	ldr	r3, [pc, #588]	; (8009fd0 <_printf_float+0x2e0>)
 8009d82:	4894      	ldr	r0, [pc, #592]	; (8009fd4 <_printf_float+0x2e4>)
 8009d84:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009d88:	bf94      	ite	ls
 8009d8a:	4698      	movls	r8, r3
 8009d8c:	4680      	movhi	r8, r0
 8009d8e:	2303      	movs	r3, #3
 8009d90:	6123      	str	r3, [r4, #16]
 8009d92:	9b05      	ldr	r3, [sp, #20]
 8009d94:	f023 0204 	bic.w	r2, r3, #4
 8009d98:	6022      	str	r2, [r4, #0]
 8009d9a:	f04f 0900 	mov.w	r9, #0
 8009d9e:	9700      	str	r7, [sp, #0]
 8009da0:	4633      	mov	r3, r6
 8009da2:	aa0b      	add	r2, sp, #44	; 0x2c
 8009da4:	4621      	mov	r1, r4
 8009da6:	4628      	mov	r0, r5
 8009da8:	f000 f9d8 	bl	800a15c <_printf_common>
 8009dac:	3001      	adds	r0, #1
 8009dae:	f040 8090 	bne.w	8009ed2 <_printf_float+0x1e2>
 8009db2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009db6:	b00d      	add	sp, #52	; 0x34
 8009db8:	ecbd 8b02 	vpop	{d8}
 8009dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc0:	4642      	mov	r2, r8
 8009dc2:	464b      	mov	r3, r9
 8009dc4:	4640      	mov	r0, r8
 8009dc6:	4649      	mov	r1, r9
 8009dc8:	f7f6 feb8 	bl	8000b3c <__aeabi_dcmpun>
 8009dcc:	b140      	cbz	r0, 8009de0 <_printf_float+0xf0>
 8009dce:	464b      	mov	r3, r9
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	bfbc      	itt	lt
 8009dd4:	232d      	movlt	r3, #45	; 0x2d
 8009dd6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009dda:	487f      	ldr	r0, [pc, #508]	; (8009fd8 <_printf_float+0x2e8>)
 8009ddc:	4b7f      	ldr	r3, [pc, #508]	; (8009fdc <_printf_float+0x2ec>)
 8009dde:	e7d1      	b.n	8009d84 <_printf_float+0x94>
 8009de0:	6863      	ldr	r3, [r4, #4]
 8009de2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009de6:	9206      	str	r2, [sp, #24]
 8009de8:	1c5a      	adds	r2, r3, #1
 8009dea:	d13f      	bne.n	8009e6c <_printf_float+0x17c>
 8009dec:	2306      	movs	r3, #6
 8009dee:	6063      	str	r3, [r4, #4]
 8009df0:	9b05      	ldr	r3, [sp, #20]
 8009df2:	6861      	ldr	r1, [r4, #4]
 8009df4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009df8:	2300      	movs	r3, #0
 8009dfa:	9303      	str	r3, [sp, #12]
 8009dfc:	ab0a      	add	r3, sp, #40	; 0x28
 8009dfe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009e02:	ab09      	add	r3, sp, #36	; 0x24
 8009e04:	ec49 8b10 	vmov	d0, r8, r9
 8009e08:	9300      	str	r3, [sp, #0]
 8009e0a:	6022      	str	r2, [r4, #0]
 8009e0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009e10:	4628      	mov	r0, r5
 8009e12:	f7ff fecd 	bl	8009bb0 <__cvt>
 8009e16:	9b06      	ldr	r3, [sp, #24]
 8009e18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e1a:	2b47      	cmp	r3, #71	; 0x47
 8009e1c:	4680      	mov	r8, r0
 8009e1e:	d108      	bne.n	8009e32 <_printf_float+0x142>
 8009e20:	1cc8      	adds	r0, r1, #3
 8009e22:	db02      	blt.n	8009e2a <_printf_float+0x13a>
 8009e24:	6863      	ldr	r3, [r4, #4]
 8009e26:	4299      	cmp	r1, r3
 8009e28:	dd41      	ble.n	8009eae <_printf_float+0x1be>
 8009e2a:	f1ab 0b02 	sub.w	fp, fp, #2
 8009e2e:	fa5f fb8b 	uxtb.w	fp, fp
 8009e32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e36:	d820      	bhi.n	8009e7a <_printf_float+0x18a>
 8009e38:	3901      	subs	r1, #1
 8009e3a:	465a      	mov	r2, fp
 8009e3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e40:	9109      	str	r1, [sp, #36]	; 0x24
 8009e42:	f7ff ff17 	bl	8009c74 <__exponent>
 8009e46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e48:	1813      	adds	r3, r2, r0
 8009e4a:	2a01      	cmp	r2, #1
 8009e4c:	4681      	mov	r9, r0
 8009e4e:	6123      	str	r3, [r4, #16]
 8009e50:	dc02      	bgt.n	8009e58 <_printf_float+0x168>
 8009e52:	6822      	ldr	r2, [r4, #0]
 8009e54:	07d2      	lsls	r2, r2, #31
 8009e56:	d501      	bpl.n	8009e5c <_printf_float+0x16c>
 8009e58:	3301      	adds	r3, #1
 8009e5a:	6123      	str	r3, [r4, #16]
 8009e5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d09c      	beq.n	8009d9e <_printf_float+0xae>
 8009e64:	232d      	movs	r3, #45	; 0x2d
 8009e66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e6a:	e798      	b.n	8009d9e <_printf_float+0xae>
 8009e6c:	9a06      	ldr	r2, [sp, #24]
 8009e6e:	2a47      	cmp	r2, #71	; 0x47
 8009e70:	d1be      	bne.n	8009df0 <_printf_float+0x100>
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1bc      	bne.n	8009df0 <_printf_float+0x100>
 8009e76:	2301      	movs	r3, #1
 8009e78:	e7b9      	b.n	8009dee <_printf_float+0xfe>
 8009e7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009e7e:	d118      	bne.n	8009eb2 <_printf_float+0x1c2>
 8009e80:	2900      	cmp	r1, #0
 8009e82:	6863      	ldr	r3, [r4, #4]
 8009e84:	dd0b      	ble.n	8009e9e <_printf_float+0x1ae>
 8009e86:	6121      	str	r1, [r4, #16]
 8009e88:	b913      	cbnz	r3, 8009e90 <_printf_float+0x1a0>
 8009e8a:	6822      	ldr	r2, [r4, #0]
 8009e8c:	07d0      	lsls	r0, r2, #31
 8009e8e:	d502      	bpl.n	8009e96 <_printf_float+0x1a6>
 8009e90:	3301      	adds	r3, #1
 8009e92:	440b      	add	r3, r1
 8009e94:	6123      	str	r3, [r4, #16]
 8009e96:	65a1      	str	r1, [r4, #88]	; 0x58
 8009e98:	f04f 0900 	mov.w	r9, #0
 8009e9c:	e7de      	b.n	8009e5c <_printf_float+0x16c>
 8009e9e:	b913      	cbnz	r3, 8009ea6 <_printf_float+0x1b6>
 8009ea0:	6822      	ldr	r2, [r4, #0]
 8009ea2:	07d2      	lsls	r2, r2, #31
 8009ea4:	d501      	bpl.n	8009eaa <_printf_float+0x1ba>
 8009ea6:	3302      	adds	r3, #2
 8009ea8:	e7f4      	b.n	8009e94 <_printf_float+0x1a4>
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e7f2      	b.n	8009e94 <_printf_float+0x1a4>
 8009eae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eb4:	4299      	cmp	r1, r3
 8009eb6:	db05      	blt.n	8009ec4 <_printf_float+0x1d4>
 8009eb8:	6823      	ldr	r3, [r4, #0]
 8009eba:	6121      	str	r1, [r4, #16]
 8009ebc:	07d8      	lsls	r0, r3, #31
 8009ebe:	d5ea      	bpl.n	8009e96 <_printf_float+0x1a6>
 8009ec0:	1c4b      	adds	r3, r1, #1
 8009ec2:	e7e7      	b.n	8009e94 <_printf_float+0x1a4>
 8009ec4:	2900      	cmp	r1, #0
 8009ec6:	bfd4      	ite	le
 8009ec8:	f1c1 0202 	rsble	r2, r1, #2
 8009ecc:	2201      	movgt	r2, #1
 8009ece:	4413      	add	r3, r2
 8009ed0:	e7e0      	b.n	8009e94 <_printf_float+0x1a4>
 8009ed2:	6823      	ldr	r3, [r4, #0]
 8009ed4:	055a      	lsls	r2, r3, #21
 8009ed6:	d407      	bmi.n	8009ee8 <_printf_float+0x1f8>
 8009ed8:	6923      	ldr	r3, [r4, #16]
 8009eda:	4642      	mov	r2, r8
 8009edc:	4631      	mov	r1, r6
 8009ede:	4628      	mov	r0, r5
 8009ee0:	47b8      	blx	r7
 8009ee2:	3001      	adds	r0, #1
 8009ee4:	d12c      	bne.n	8009f40 <_printf_float+0x250>
 8009ee6:	e764      	b.n	8009db2 <_printf_float+0xc2>
 8009ee8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009eec:	f240 80e0 	bls.w	800a0b0 <_printf_float+0x3c0>
 8009ef0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	f7f6 fdee 	bl	8000ad8 <__aeabi_dcmpeq>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	d034      	beq.n	8009f6a <_printf_float+0x27a>
 8009f00:	4a37      	ldr	r2, [pc, #220]	; (8009fe0 <_printf_float+0x2f0>)
 8009f02:	2301      	movs	r3, #1
 8009f04:	4631      	mov	r1, r6
 8009f06:	4628      	mov	r0, r5
 8009f08:	47b8      	blx	r7
 8009f0a:	3001      	adds	r0, #1
 8009f0c:	f43f af51 	beq.w	8009db2 <_printf_float+0xc2>
 8009f10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f14:	429a      	cmp	r2, r3
 8009f16:	db02      	blt.n	8009f1e <_printf_float+0x22e>
 8009f18:	6823      	ldr	r3, [r4, #0]
 8009f1a:	07d8      	lsls	r0, r3, #31
 8009f1c:	d510      	bpl.n	8009f40 <_printf_float+0x250>
 8009f1e:	ee18 3a10 	vmov	r3, s16
 8009f22:	4652      	mov	r2, sl
 8009f24:	4631      	mov	r1, r6
 8009f26:	4628      	mov	r0, r5
 8009f28:	47b8      	blx	r7
 8009f2a:	3001      	adds	r0, #1
 8009f2c:	f43f af41 	beq.w	8009db2 <_printf_float+0xc2>
 8009f30:	f04f 0800 	mov.w	r8, #0
 8009f34:	f104 091a 	add.w	r9, r4, #26
 8009f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	4543      	cmp	r3, r8
 8009f3e:	dc09      	bgt.n	8009f54 <_printf_float+0x264>
 8009f40:	6823      	ldr	r3, [r4, #0]
 8009f42:	079b      	lsls	r3, r3, #30
 8009f44:	f100 8105 	bmi.w	800a152 <_printf_float+0x462>
 8009f48:	68e0      	ldr	r0, [r4, #12]
 8009f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f4c:	4298      	cmp	r0, r3
 8009f4e:	bfb8      	it	lt
 8009f50:	4618      	movlt	r0, r3
 8009f52:	e730      	b.n	8009db6 <_printf_float+0xc6>
 8009f54:	2301      	movs	r3, #1
 8009f56:	464a      	mov	r2, r9
 8009f58:	4631      	mov	r1, r6
 8009f5a:	4628      	mov	r0, r5
 8009f5c:	47b8      	blx	r7
 8009f5e:	3001      	adds	r0, #1
 8009f60:	f43f af27 	beq.w	8009db2 <_printf_float+0xc2>
 8009f64:	f108 0801 	add.w	r8, r8, #1
 8009f68:	e7e6      	b.n	8009f38 <_printf_float+0x248>
 8009f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	dc39      	bgt.n	8009fe4 <_printf_float+0x2f4>
 8009f70:	4a1b      	ldr	r2, [pc, #108]	; (8009fe0 <_printf_float+0x2f0>)
 8009f72:	2301      	movs	r3, #1
 8009f74:	4631      	mov	r1, r6
 8009f76:	4628      	mov	r0, r5
 8009f78:	47b8      	blx	r7
 8009f7a:	3001      	adds	r0, #1
 8009f7c:	f43f af19 	beq.w	8009db2 <_printf_float+0xc2>
 8009f80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f84:	4313      	orrs	r3, r2
 8009f86:	d102      	bne.n	8009f8e <_printf_float+0x29e>
 8009f88:	6823      	ldr	r3, [r4, #0]
 8009f8a:	07d9      	lsls	r1, r3, #31
 8009f8c:	d5d8      	bpl.n	8009f40 <_printf_float+0x250>
 8009f8e:	ee18 3a10 	vmov	r3, s16
 8009f92:	4652      	mov	r2, sl
 8009f94:	4631      	mov	r1, r6
 8009f96:	4628      	mov	r0, r5
 8009f98:	47b8      	blx	r7
 8009f9a:	3001      	adds	r0, #1
 8009f9c:	f43f af09 	beq.w	8009db2 <_printf_float+0xc2>
 8009fa0:	f04f 0900 	mov.w	r9, #0
 8009fa4:	f104 0a1a 	add.w	sl, r4, #26
 8009fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009faa:	425b      	negs	r3, r3
 8009fac:	454b      	cmp	r3, r9
 8009fae:	dc01      	bgt.n	8009fb4 <_printf_float+0x2c4>
 8009fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fb2:	e792      	b.n	8009eda <_printf_float+0x1ea>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	4652      	mov	r2, sl
 8009fb8:	4631      	mov	r1, r6
 8009fba:	4628      	mov	r0, r5
 8009fbc:	47b8      	blx	r7
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	f43f aef7 	beq.w	8009db2 <_printf_float+0xc2>
 8009fc4:	f109 0901 	add.w	r9, r9, #1
 8009fc8:	e7ee      	b.n	8009fa8 <_printf_float+0x2b8>
 8009fca:	bf00      	nop
 8009fcc:	7fefffff 	.word	0x7fefffff
 8009fd0:	0800f468 	.word	0x0800f468
 8009fd4:	0800f46c 	.word	0x0800f46c
 8009fd8:	0800f474 	.word	0x0800f474
 8009fdc:	0800f470 	.word	0x0800f470
 8009fe0:	0800f478 	.word	0x0800f478
 8009fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fe6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	bfa8      	it	ge
 8009fec:	461a      	movge	r2, r3
 8009fee:	2a00      	cmp	r2, #0
 8009ff0:	4691      	mov	r9, r2
 8009ff2:	dc37      	bgt.n	800a064 <_printf_float+0x374>
 8009ff4:	f04f 0b00 	mov.w	fp, #0
 8009ff8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ffc:	f104 021a 	add.w	r2, r4, #26
 800a000:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a002:	9305      	str	r3, [sp, #20]
 800a004:	eba3 0309 	sub.w	r3, r3, r9
 800a008:	455b      	cmp	r3, fp
 800a00a:	dc33      	bgt.n	800a074 <_printf_float+0x384>
 800a00c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a010:	429a      	cmp	r2, r3
 800a012:	db3b      	blt.n	800a08c <_printf_float+0x39c>
 800a014:	6823      	ldr	r3, [r4, #0]
 800a016:	07da      	lsls	r2, r3, #31
 800a018:	d438      	bmi.n	800a08c <_printf_float+0x39c>
 800a01a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a01c:	9a05      	ldr	r2, [sp, #20]
 800a01e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a020:	1a9a      	subs	r2, r3, r2
 800a022:	eba3 0901 	sub.w	r9, r3, r1
 800a026:	4591      	cmp	r9, r2
 800a028:	bfa8      	it	ge
 800a02a:	4691      	movge	r9, r2
 800a02c:	f1b9 0f00 	cmp.w	r9, #0
 800a030:	dc35      	bgt.n	800a09e <_printf_float+0x3ae>
 800a032:	f04f 0800 	mov.w	r8, #0
 800a036:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a03a:	f104 0a1a 	add.w	sl, r4, #26
 800a03e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a042:	1a9b      	subs	r3, r3, r2
 800a044:	eba3 0309 	sub.w	r3, r3, r9
 800a048:	4543      	cmp	r3, r8
 800a04a:	f77f af79 	ble.w	8009f40 <_printf_float+0x250>
 800a04e:	2301      	movs	r3, #1
 800a050:	4652      	mov	r2, sl
 800a052:	4631      	mov	r1, r6
 800a054:	4628      	mov	r0, r5
 800a056:	47b8      	blx	r7
 800a058:	3001      	adds	r0, #1
 800a05a:	f43f aeaa 	beq.w	8009db2 <_printf_float+0xc2>
 800a05e:	f108 0801 	add.w	r8, r8, #1
 800a062:	e7ec      	b.n	800a03e <_printf_float+0x34e>
 800a064:	4613      	mov	r3, r2
 800a066:	4631      	mov	r1, r6
 800a068:	4642      	mov	r2, r8
 800a06a:	4628      	mov	r0, r5
 800a06c:	47b8      	blx	r7
 800a06e:	3001      	adds	r0, #1
 800a070:	d1c0      	bne.n	8009ff4 <_printf_float+0x304>
 800a072:	e69e      	b.n	8009db2 <_printf_float+0xc2>
 800a074:	2301      	movs	r3, #1
 800a076:	4631      	mov	r1, r6
 800a078:	4628      	mov	r0, r5
 800a07a:	9205      	str	r2, [sp, #20]
 800a07c:	47b8      	blx	r7
 800a07e:	3001      	adds	r0, #1
 800a080:	f43f ae97 	beq.w	8009db2 <_printf_float+0xc2>
 800a084:	9a05      	ldr	r2, [sp, #20]
 800a086:	f10b 0b01 	add.w	fp, fp, #1
 800a08a:	e7b9      	b.n	800a000 <_printf_float+0x310>
 800a08c:	ee18 3a10 	vmov	r3, s16
 800a090:	4652      	mov	r2, sl
 800a092:	4631      	mov	r1, r6
 800a094:	4628      	mov	r0, r5
 800a096:	47b8      	blx	r7
 800a098:	3001      	adds	r0, #1
 800a09a:	d1be      	bne.n	800a01a <_printf_float+0x32a>
 800a09c:	e689      	b.n	8009db2 <_printf_float+0xc2>
 800a09e:	9a05      	ldr	r2, [sp, #20]
 800a0a0:	464b      	mov	r3, r9
 800a0a2:	4442      	add	r2, r8
 800a0a4:	4631      	mov	r1, r6
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	47b8      	blx	r7
 800a0aa:	3001      	adds	r0, #1
 800a0ac:	d1c1      	bne.n	800a032 <_printf_float+0x342>
 800a0ae:	e680      	b.n	8009db2 <_printf_float+0xc2>
 800a0b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0b2:	2a01      	cmp	r2, #1
 800a0b4:	dc01      	bgt.n	800a0ba <_printf_float+0x3ca>
 800a0b6:	07db      	lsls	r3, r3, #31
 800a0b8:	d538      	bpl.n	800a12c <_printf_float+0x43c>
 800a0ba:	2301      	movs	r3, #1
 800a0bc:	4642      	mov	r2, r8
 800a0be:	4631      	mov	r1, r6
 800a0c0:	4628      	mov	r0, r5
 800a0c2:	47b8      	blx	r7
 800a0c4:	3001      	adds	r0, #1
 800a0c6:	f43f ae74 	beq.w	8009db2 <_printf_float+0xc2>
 800a0ca:	ee18 3a10 	vmov	r3, s16
 800a0ce:	4652      	mov	r2, sl
 800a0d0:	4631      	mov	r1, r6
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	47b8      	blx	r7
 800a0d6:	3001      	adds	r0, #1
 800a0d8:	f43f ae6b 	beq.w	8009db2 <_printf_float+0xc2>
 800a0dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	f7f6 fcf8 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0e8:	b9d8      	cbnz	r0, 800a122 <_printf_float+0x432>
 800a0ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0ec:	f108 0201 	add.w	r2, r8, #1
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	4631      	mov	r1, r6
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	47b8      	blx	r7
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	d10e      	bne.n	800a11a <_printf_float+0x42a>
 800a0fc:	e659      	b.n	8009db2 <_printf_float+0xc2>
 800a0fe:	2301      	movs	r3, #1
 800a100:	4652      	mov	r2, sl
 800a102:	4631      	mov	r1, r6
 800a104:	4628      	mov	r0, r5
 800a106:	47b8      	blx	r7
 800a108:	3001      	adds	r0, #1
 800a10a:	f43f ae52 	beq.w	8009db2 <_printf_float+0xc2>
 800a10e:	f108 0801 	add.w	r8, r8, #1
 800a112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a114:	3b01      	subs	r3, #1
 800a116:	4543      	cmp	r3, r8
 800a118:	dcf1      	bgt.n	800a0fe <_printf_float+0x40e>
 800a11a:	464b      	mov	r3, r9
 800a11c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a120:	e6dc      	b.n	8009edc <_printf_float+0x1ec>
 800a122:	f04f 0800 	mov.w	r8, #0
 800a126:	f104 0a1a 	add.w	sl, r4, #26
 800a12a:	e7f2      	b.n	800a112 <_printf_float+0x422>
 800a12c:	2301      	movs	r3, #1
 800a12e:	4642      	mov	r2, r8
 800a130:	e7df      	b.n	800a0f2 <_printf_float+0x402>
 800a132:	2301      	movs	r3, #1
 800a134:	464a      	mov	r2, r9
 800a136:	4631      	mov	r1, r6
 800a138:	4628      	mov	r0, r5
 800a13a:	47b8      	blx	r7
 800a13c:	3001      	adds	r0, #1
 800a13e:	f43f ae38 	beq.w	8009db2 <_printf_float+0xc2>
 800a142:	f108 0801 	add.w	r8, r8, #1
 800a146:	68e3      	ldr	r3, [r4, #12]
 800a148:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a14a:	1a5b      	subs	r3, r3, r1
 800a14c:	4543      	cmp	r3, r8
 800a14e:	dcf0      	bgt.n	800a132 <_printf_float+0x442>
 800a150:	e6fa      	b.n	8009f48 <_printf_float+0x258>
 800a152:	f04f 0800 	mov.w	r8, #0
 800a156:	f104 0919 	add.w	r9, r4, #25
 800a15a:	e7f4      	b.n	800a146 <_printf_float+0x456>

0800a15c <_printf_common>:
 800a15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a160:	4616      	mov	r6, r2
 800a162:	4699      	mov	r9, r3
 800a164:	688a      	ldr	r2, [r1, #8]
 800a166:	690b      	ldr	r3, [r1, #16]
 800a168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a16c:	4293      	cmp	r3, r2
 800a16e:	bfb8      	it	lt
 800a170:	4613      	movlt	r3, r2
 800a172:	6033      	str	r3, [r6, #0]
 800a174:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a178:	4607      	mov	r7, r0
 800a17a:	460c      	mov	r4, r1
 800a17c:	b10a      	cbz	r2, 800a182 <_printf_common+0x26>
 800a17e:	3301      	adds	r3, #1
 800a180:	6033      	str	r3, [r6, #0]
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	0699      	lsls	r1, r3, #26
 800a186:	bf42      	ittt	mi
 800a188:	6833      	ldrmi	r3, [r6, #0]
 800a18a:	3302      	addmi	r3, #2
 800a18c:	6033      	strmi	r3, [r6, #0]
 800a18e:	6825      	ldr	r5, [r4, #0]
 800a190:	f015 0506 	ands.w	r5, r5, #6
 800a194:	d106      	bne.n	800a1a4 <_printf_common+0x48>
 800a196:	f104 0a19 	add.w	sl, r4, #25
 800a19a:	68e3      	ldr	r3, [r4, #12]
 800a19c:	6832      	ldr	r2, [r6, #0]
 800a19e:	1a9b      	subs	r3, r3, r2
 800a1a0:	42ab      	cmp	r3, r5
 800a1a2:	dc26      	bgt.n	800a1f2 <_printf_common+0x96>
 800a1a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1a8:	1e13      	subs	r3, r2, #0
 800a1aa:	6822      	ldr	r2, [r4, #0]
 800a1ac:	bf18      	it	ne
 800a1ae:	2301      	movne	r3, #1
 800a1b0:	0692      	lsls	r2, r2, #26
 800a1b2:	d42b      	bmi.n	800a20c <_printf_common+0xb0>
 800a1b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1b8:	4649      	mov	r1, r9
 800a1ba:	4638      	mov	r0, r7
 800a1bc:	47c0      	blx	r8
 800a1be:	3001      	adds	r0, #1
 800a1c0:	d01e      	beq.n	800a200 <_printf_common+0xa4>
 800a1c2:	6823      	ldr	r3, [r4, #0]
 800a1c4:	68e5      	ldr	r5, [r4, #12]
 800a1c6:	6832      	ldr	r2, [r6, #0]
 800a1c8:	f003 0306 	and.w	r3, r3, #6
 800a1cc:	2b04      	cmp	r3, #4
 800a1ce:	bf08      	it	eq
 800a1d0:	1aad      	subeq	r5, r5, r2
 800a1d2:	68a3      	ldr	r3, [r4, #8]
 800a1d4:	6922      	ldr	r2, [r4, #16]
 800a1d6:	bf0c      	ite	eq
 800a1d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1dc:	2500      	movne	r5, #0
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	bfc4      	itt	gt
 800a1e2:	1a9b      	subgt	r3, r3, r2
 800a1e4:	18ed      	addgt	r5, r5, r3
 800a1e6:	2600      	movs	r6, #0
 800a1e8:	341a      	adds	r4, #26
 800a1ea:	42b5      	cmp	r5, r6
 800a1ec:	d11a      	bne.n	800a224 <_printf_common+0xc8>
 800a1ee:	2000      	movs	r0, #0
 800a1f0:	e008      	b.n	800a204 <_printf_common+0xa8>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	4652      	mov	r2, sl
 800a1f6:	4649      	mov	r1, r9
 800a1f8:	4638      	mov	r0, r7
 800a1fa:	47c0      	blx	r8
 800a1fc:	3001      	adds	r0, #1
 800a1fe:	d103      	bne.n	800a208 <_printf_common+0xac>
 800a200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a208:	3501      	adds	r5, #1
 800a20a:	e7c6      	b.n	800a19a <_printf_common+0x3e>
 800a20c:	18e1      	adds	r1, r4, r3
 800a20e:	1c5a      	adds	r2, r3, #1
 800a210:	2030      	movs	r0, #48	; 0x30
 800a212:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a216:	4422      	add	r2, r4
 800a218:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a21c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a220:	3302      	adds	r3, #2
 800a222:	e7c7      	b.n	800a1b4 <_printf_common+0x58>
 800a224:	2301      	movs	r3, #1
 800a226:	4622      	mov	r2, r4
 800a228:	4649      	mov	r1, r9
 800a22a:	4638      	mov	r0, r7
 800a22c:	47c0      	blx	r8
 800a22e:	3001      	adds	r0, #1
 800a230:	d0e6      	beq.n	800a200 <_printf_common+0xa4>
 800a232:	3601      	adds	r6, #1
 800a234:	e7d9      	b.n	800a1ea <_printf_common+0x8e>
	...

0800a238 <_printf_i>:
 800a238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a23c:	7e0f      	ldrb	r7, [r1, #24]
 800a23e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a240:	2f78      	cmp	r7, #120	; 0x78
 800a242:	4691      	mov	r9, r2
 800a244:	4680      	mov	r8, r0
 800a246:	460c      	mov	r4, r1
 800a248:	469a      	mov	sl, r3
 800a24a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a24e:	d807      	bhi.n	800a260 <_printf_i+0x28>
 800a250:	2f62      	cmp	r7, #98	; 0x62
 800a252:	d80a      	bhi.n	800a26a <_printf_i+0x32>
 800a254:	2f00      	cmp	r7, #0
 800a256:	f000 80d8 	beq.w	800a40a <_printf_i+0x1d2>
 800a25a:	2f58      	cmp	r7, #88	; 0x58
 800a25c:	f000 80a3 	beq.w	800a3a6 <_printf_i+0x16e>
 800a260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a264:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a268:	e03a      	b.n	800a2e0 <_printf_i+0xa8>
 800a26a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a26e:	2b15      	cmp	r3, #21
 800a270:	d8f6      	bhi.n	800a260 <_printf_i+0x28>
 800a272:	a101      	add	r1, pc, #4	; (adr r1, 800a278 <_printf_i+0x40>)
 800a274:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a278:	0800a2d1 	.word	0x0800a2d1
 800a27c:	0800a2e5 	.word	0x0800a2e5
 800a280:	0800a261 	.word	0x0800a261
 800a284:	0800a261 	.word	0x0800a261
 800a288:	0800a261 	.word	0x0800a261
 800a28c:	0800a261 	.word	0x0800a261
 800a290:	0800a2e5 	.word	0x0800a2e5
 800a294:	0800a261 	.word	0x0800a261
 800a298:	0800a261 	.word	0x0800a261
 800a29c:	0800a261 	.word	0x0800a261
 800a2a0:	0800a261 	.word	0x0800a261
 800a2a4:	0800a3f1 	.word	0x0800a3f1
 800a2a8:	0800a315 	.word	0x0800a315
 800a2ac:	0800a3d3 	.word	0x0800a3d3
 800a2b0:	0800a261 	.word	0x0800a261
 800a2b4:	0800a261 	.word	0x0800a261
 800a2b8:	0800a413 	.word	0x0800a413
 800a2bc:	0800a261 	.word	0x0800a261
 800a2c0:	0800a315 	.word	0x0800a315
 800a2c4:	0800a261 	.word	0x0800a261
 800a2c8:	0800a261 	.word	0x0800a261
 800a2cc:	0800a3db 	.word	0x0800a3db
 800a2d0:	682b      	ldr	r3, [r5, #0]
 800a2d2:	1d1a      	adds	r2, r3, #4
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	602a      	str	r2, [r5, #0]
 800a2d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e0a3      	b.n	800a42c <_printf_i+0x1f4>
 800a2e4:	6820      	ldr	r0, [r4, #0]
 800a2e6:	6829      	ldr	r1, [r5, #0]
 800a2e8:	0606      	lsls	r6, r0, #24
 800a2ea:	f101 0304 	add.w	r3, r1, #4
 800a2ee:	d50a      	bpl.n	800a306 <_printf_i+0xce>
 800a2f0:	680e      	ldr	r6, [r1, #0]
 800a2f2:	602b      	str	r3, [r5, #0]
 800a2f4:	2e00      	cmp	r6, #0
 800a2f6:	da03      	bge.n	800a300 <_printf_i+0xc8>
 800a2f8:	232d      	movs	r3, #45	; 0x2d
 800a2fa:	4276      	negs	r6, r6
 800a2fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a300:	485e      	ldr	r0, [pc, #376]	; (800a47c <_printf_i+0x244>)
 800a302:	230a      	movs	r3, #10
 800a304:	e019      	b.n	800a33a <_printf_i+0x102>
 800a306:	680e      	ldr	r6, [r1, #0]
 800a308:	602b      	str	r3, [r5, #0]
 800a30a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a30e:	bf18      	it	ne
 800a310:	b236      	sxthne	r6, r6
 800a312:	e7ef      	b.n	800a2f4 <_printf_i+0xbc>
 800a314:	682b      	ldr	r3, [r5, #0]
 800a316:	6820      	ldr	r0, [r4, #0]
 800a318:	1d19      	adds	r1, r3, #4
 800a31a:	6029      	str	r1, [r5, #0]
 800a31c:	0601      	lsls	r1, r0, #24
 800a31e:	d501      	bpl.n	800a324 <_printf_i+0xec>
 800a320:	681e      	ldr	r6, [r3, #0]
 800a322:	e002      	b.n	800a32a <_printf_i+0xf2>
 800a324:	0646      	lsls	r6, r0, #25
 800a326:	d5fb      	bpl.n	800a320 <_printf_i+0xe8>
 800a328:	881e      	ldrh	r6, [r3, #0]
 800a32a:	4854      	ldr	r0, [pc, #336]	; (800a47c <_printf_i+0x244>)
 800a32c:	2f6f      	cmp	r7, #111	; 0x6f
 800a32e:	bf0c      	ite	eq
 800a330:	2308      	moveq	r3, #8
 800a332:	230a      	movne	r3, #10
 800a334:	2100      	movs	r1, #0
 800a336:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a33a:	6865      	ldr	r5, [r4, #4]
 800a33c:	60a5      	str	r5, [r4, #8]
 800a33e:	2d00      	cmp	r5, #0
 800a340:	bfa2      	ittt	ge
 800a342:	6821      	ldrge	r1, [r4, #0]
 800a344:	f021 0104 	bicge.w	r1, r1, #4
 800a348:	6021      	strge	r1, [r4, #0]
 800a34a:	b90e      	cbnz	r6, 800a350 <_printf_i+0x118>
 800a34c:	2d00      	cmp	r5, #0
 800a34e:	d04d      	beq.n	800a3ec <_printf_i+0x1b4>
 800a350:	4615      	mov	r5, r2
 800a352:	fbb6 f1f3 	udiv	r1, r6, r3
 800a356:	fb03 6711 	mls	r7, r3, r1, r6
 800a35a:	5dc7      	ldrb	r7, [r0, r7]
 800a35c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a360:	4637      	mov	r7, r6
 800a362:	42bb      	cmp	r3, r7
 800a364:	460e      	mov	r6, r1
 800a366:	d9f4      	bls.n	800a352 <_printf_i+0x11a>
 800a368:	2b08      	cmp	r3, #8
 800a36a:	d10b      	bne.n	800a384 <_printf_i+0x14c>
 800a36c:	6823      	ldr	r3, [r4, #0]
 800a36e:	07de      	lsls	r6, r3, #31
 800a370:	d508      	bpl.n	800a384 <_printf_i+0x14c>
 800a372:	6923      	ldr	r3, [r4, #16]
 800a374:	6861      	ldr	r1, [r4, #4]
 800a376:	4299      	cmp	r1, r3
 800a378:	bfde      	ittt	le
 800a37a:	2330      	movle	r3, #48	; 0x30
 800a37c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a380:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a384:	1b52      	subs	r2, r2, r5
 800a386:	6122      	str	r2, [r4, #16]
 800a388:	f8cd a000 	str.w	sl, [sp]
 800a38c:	464b      	mov	r3, r9
 800a38e:	aa03      	add	r2, sp, #12
 800a390:	4621      	mov	r1, r4
 800a392:	4640      	mov	r0, r8
 800a394:	f7ff fee2 	bl	800a15c <_printf_common>
 800a398:	3001      	adds	r0, #1
 800a39a:	d14c      	bne.n	800a436 <_printf_i+0x1fe>
 800a39c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3a0:	b004      	add	sp, #16
 800a3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3a6:	4835      	ldr	r0, [pc, #212]	; (800a47c <_printf_i+0x244>)
 800a3a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a3ac:	6829      	ldr	r1, [r5, #0]
 800a3ae:	6823      	ldr	r3, [r4, #0]
 800a3b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a3b4:	6029      	str	r1, [r5, #0]
 800a3b6:	061d      	lsls	r5, r3, #24
 800a3b8:	d514      	bpl.n	800a3e4 <_printf_i+0x1ac>
 800a3ba:	07df      	lsls	r7, r3, #31
 800a3bc:	bf44      	itt	mi
 800a3be:	f043 0320 	orrmi.w	r3, r3, #32
 800a3c2:	6023      	strmi	r3, [r4, #0]
 800a3c4:	b91e      	cbnz	r6, 800a3ce <_printf_i+0x196>
 800a3c6:	6823      	ldr	r3, [r4, #0]
 800a3c8:	f023 0320 	bic.w	r3, r3, #32
 800a3cc:	6023      	str	r3, [r4, #0]
 800a3ce:	2310      	movs	r3, #16
 800a3d0:	e7b0      	b.n	800a334 <_printf_i+0xfc>
 800a3d2:	6823      	ldr	r3, [r4, #0]
 800a3d4:	f043 0320 	orr.w	r3, r3, #32
 800a3d8:	6023      	str	r3, [r4, #0]
 800a3da:	2378      	movs	r3, #120	; 0x78
 800a3dc:	4828      	ldr	r0, [pc, #160]	; (800a480 <_printf_i+0x248>)
 800a3de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3e2:	e7e3      	b.n	800a3ac <_printf_i+0x174>
 800a3e4:	0659      	lsls	r1, r3, #25
 800a3e6:	bf48      	it	mi
 800a3e8:	b2b6      	uxthmi	r6, r6
 800a3ea:	e7e6      	b.n	800a3ba <_printf_i+0x182>
 800a3ec:	4615      	mov	r5, r2
 800a3ee:	e7bb      	b.n	800a368 <_printf_i+0x130>
 800a3f0:	682b      	ldr	r3, [r5, #0]
 800a3f2:	6826      	ldr	r6, [r4, #0]
 800a3f4:	6961      	ldr	r1, [r4, #20]
 800a3f6:	1d18      	adds	r0, r3, #4
 800a3f8:	6028      	str	r0, [r5, #0]
 800a3fa:	0635      	lsls	r5, r6, #24
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	d501      	bpl.n	800a404 <_printf_i+0x1cc>
 800a400:	6019      	str	r1, [r3, #0]
 800a402:	e002      	b.n	800a40a <_printf_i+0x1d2>
 800a404:	0670      	lsls	r0, r6, #25
 800a406:	d5fb      	bpl.n	800a400 <_printf_i+0x1c8>
 800a408:	8019      	strh	r1, [r3, #0]
 800a40a:	2300      	movs	r3, #0
 800a40c:	6123      	str	r3, [r4, #16]
 800a40e:	4615      	mov	r5, r2
 800a410:	e7ba      	b.n	800a388 <_printf_i+0x150>
 800a412:	682b      	ldr	r3, [r5, #0]
 800a414:	1d1a      	adds	r2, r3, #4
 800a416:	602a      	str	r2, [r5, #0]
 800a418:	681d      	ldr	r5, [r3, #0]
 800a41a:	6862      	ldr	r2, [r4, #4]
 800a41c:	2100      	movs	r1, #0
 800a41e:	4628      	mov	r0, r5
 800a420:	f7f5 fee6 	bl	80001f0 <memchr>
 800a424:	b108      	cbz	r0, 800a42a <_printf_i+0x1f2>
 800a426:	1b40      	subs	r0, r0, r5
 800a428:	6060      	str	r0, [r4, #4]
 800a42a:	6863      	ldr	r3, [r4, #4]
 800a42c:	6123      	str	r3, [r4, #16]
 800a42e:	2300      	movs	r3, #0
 800a430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a434:	e7a8      	b.n	800a388 <_printf_i+0x150>
 800a436:	6923      	ldr	r3, [r4, #16]
 800a438:	462a      	mov	r2, r5
 800a43a:	4649      	mov	r1, r9
 800a43c:	4640      	mov	r0, r8
 800a43e:	47d0      	blx	sl
 800a440:	3001      	adds	r0, #1
 800a442:	d0ab      	beq.n	800a39c <_printf_i+0x164>
 800a444:	6823      	ldr	r3, [r4, #0]
 800a446:	079b      	lsls	r3, r3, #30
 800a448:	d413      	bmi.n	800a472 <_printf_i+0x23a>
 800a44a:	68e0      	ldr	r0, [r4, #12]
 800a44c:	9b03      	ldr	r3, [sp, #12]
 800a44e:	4298      	cmp	r0, r3
 800a450:	bfb8      	it	lt
 800a452:	4618      	movlt	r0, r3
 800a454:	e7a4      	b.n	800a3a0 <_printf_i+0x168>
 800a456:	2301      	movs	r3, #1
 800a458:	4632      	mov	r2, r6
 800a45a:	4649      	mov	r1, r9
 800a45c:	4640      	mov	r0, r8
 800a45e:	47d0      	blx	sl
 800a460:	3001      	adds	r0, #1
 800a462:	d09b      	beq.n	800a39c <_printf_i+0x164>
 800a464:	3501      	adds	r5, #1
 800a466:	68e3      	ldr	r3, [r4, #12]
 800a468:	9903      	ldr	r1, [sp, #12]
 800a46a:	1a5b      	subs	r3, r3, r1
 800a46c:	42ab      	cmp	r3, r5
 800a46e:	dcf2      	bgt.n	800a456 <_printf_i+0x21e>
 800a470:	e7eb      	b.n	800a44a <_printf_i+0x212>
 800a472:	2500      	movs	r5, #0
 800a474:	f104 0619 	add.w	r6, r4, #25
 800a478:	e7f5      	b.n	800a466 <_printf_i+0x22e>
 800a47a:	bf00      	nop
 800a47c:	0800f47a 	.word	0x0800f47a
 800a480:	0800f48b 	.word	0x0800f48b

0800a484 <_sbrk_r>:
 800a484:	b538      	push	{r3, r4, r5, lr}
 800a486:	4d06      	ldr	r5, [pc, #24]	; (800a4a0 <_sbrk_r+0x1c>)
 800a488:	2300      	movs	r3, #0
 800a48a:	4604      	mov	r4, r0
 800a48c:	4608      	mov	r0, r1
 800a48e:	602b      	str	r3, [r5, #0]
 800a490:	f7fa fd74 	bl	8004f7c <_sbrk>
 800a494:	1c43      	adds	r3, r0, #1
 800a496:	d102      	bne.n	800a49e <_sbrk_r+0x1a>
 800a498:	682b      	ldr	r3, [r5, #0]
 800a49a:	b103      	cbz	r3, 800a49e <_sbrk_r+0x1a>
 800a49c:	6023      	str	r3, [r4, #0]
 800a49e:	bd38      	pop	{r3, r4, r5, pc}
 800a4a0:	20002e44 	.word	0x20002e44

0800a4a4 <siprintf>:
 800a4a4:	b40e      	push	{r1, r2, r3}
 800a4a6:	b500      	push	{lr}
 800a4a8:	b09c      	sub	sp, #112	; 0x70
 800a4aa:	ab1d      	add	r3, sp, #116	; 0x74
 800a4ac:	9002      	str	r0, [sp, #8]
 800a4ae:	9006      	str	r0, [sp, #24]
 800a4b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a4b4:	4809      	ldr	r0, [pc, #36]	; (800a4dc <siprintf+0x38>)
 800a4b6:	9107      	str	r1, [sp, #28]
 800a4b8:	9104      	str	r1, [sp, #16]
 800a4ba:	4909      	ldr	r1, [pc, #36]	; (800a4e0 <siprintf+0x3c>)
 800a4bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4c0:	9105      	str	r1, [sp, #20]
 800a4c2:	6800      	ldr	r0, [r0, #0]
 800a4c4:	9301      	str	r3, [sp, #4]
 800a4c6:	a902      	add	r1, sp, #8
 800a4c8:	f003 fa94 	bl	800d9f4 <_svfiprintf_r>
 800a4cc:	9b02      	ldr	r3, [sp, #8]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	701a      	strb	r2, [r3, #0]
 800a4d2:	b01c      	add	sp, #112	; 0x70
 800a4d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4d8:	b003      	add	sp, #12
 800a4da:	4770      	bx	lr
 800a4dc:	200000c0 	.word	0x200000c0
 800a4e0:	ffff0208 	.word	0xffff0208

0800a4e4 <__sread>:
 800a4e4:	b510      	push	{r4, lr}
 800a4e6:	460c      	mov	r4, r1
 800a4e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4ec:	f003 fcdc 	bl	800dea8 <_read_r>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	bfab      	itete	ge
 800a4f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4f6:	89a3      	ldrhlt	r3, [r4, #12]
 800a4f8:	181b      	addge	r3, r3, r0
 800a4fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4fe:	bfac      	ite	ge
 800a500:	6563      	strge	r3, [r4, #84]	; 0x54
 800a502:	81a3      	strhlt	r3, [r4, #12]
 800a504:	bd10      	pop	{r4, pc}

0800a506 <__swrite>:
 800a506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a50a:	461f      	mov	r7, r3
 800a50c:	898b      	ldrh	r3, [r1, #12]
 800a50e:	05db      	lsls	r3, r3, #23
 800a510:	4605      	mov	r5, r0
 800a512:	460c      	mov	r4, r1
 800a514:	4616      	mov	r6, r2
 800a516:	d505      	bpl.n	800a524 <__swrite+0x1e>
 800a518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a51c:	2302      	movs	r3, #2
 800a51e:	2200      	movs	r2, #0
 800a520:	f002 fca0 	bl	800ce64 <_lseek_r>
 800a524:	89a3      	ldrh	r3, [r4, #12]
 800a526:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a52a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a52e:	81a3      	strh	r3, [r4, #12]
 800a530:	4632      	mov	r2, r6
 800a532:	463b      	mov	r3, r7
 800a534:	4628      	mov	r0, r5
 800a536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a53a:	f001 b829 	b.w	800b590 <_write_r>

0800a53e <__sseek>:
 800a53e:	b510      	push	{r4, lr}
 800a540:	460c      	mov	r4, r1
 800a542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a546:	f002 fc8d 	bl	800ce64 <_lseek_r>
 800a54a:	1c43      	adds	r3, r0, #1
 800a54c:	89a3      	ldrh	r3, [r4, #12]
 800a54e:	bf15      	itete	ne
 800a550:	6560      	strne	r0, [r4, #84]	; 0x54
 800a552:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a556:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a55a:	81a3      	strheq	r3, [r4, #12]
 800a55c:	bf18      	it	ne
 800a55e:	81a3      	strhne	r3, [r4, #12]
 800a560:	bd10      	pop	{r4, pc}

0800a562 <__sclose>:
 800a562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a566:	f001 b8b1 	b.w	800b6cc <_close_r>

0800a56a <strncmp>:
 800a56a:	b510      	push	{r4, lr}
 800a56c:	b17a      	cbz	r2, 800a58e <strncmp+0x24>
 800a56e:	4603      	mov	r3, r0
 800a570:	3901      	subs	r1, #1
 800a572:	1884      	adds	r4, r0, r2
 800a574:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a578:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a57c:	4290      	cmp	r0, r2
 800a57e:	d101      	bne.n	800a584 <strncmp+0x1a>
 800a580:	42a3      	cmp	r3, r4
 800a582:	d101      	bne.n	800a588 <strncmp+0x1e>
 800a584:	1a80      	subs	r0, r0, r2
 800a586:	bd10      	pop	{r4, pc}
 800a588:	2800      	cmp	r0, #0
 800a58a:	d1f3      	bne.n	800a574 <strncmp+0xa>
 800a58c:	e7fa      	b.n	800a584 <strncmp+0x1a>
 800a58e:	4610      	mov	r0, r2
 800a590:	e7f9      	b.n	800a586 <strncmp+0x1c>

0800a592 <sulp>:
 800a592:	b570      	push	{r4, r5, r6, lr}
 800a594:	4604      	mov	r4, r0
 800a596:	460d      	mov	r5, r1
 800a598:	ec45 4b10 	vmov	d0, r4, r5
 800a59c:	4616      	mov	r6, r2
 800a59e:	f003 f869 	bl	800d674 <__ulp>
 800a5a2:	ec51 0b10 	vmov	r0, r1, d0
 800a5a6:	b17e      	cbz	r6, 800a5c8 <sulp+0x36>
 800a5a8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a5ac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	dd09      	ble.n	800a5c8 <sulp+0x36>
 800a5b4:	051b      	lsls	r3, r3, #20
 800a5b6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a5ba:	2400      	movs	r4, #0
 800a5bc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a5c0:	4622      	mov	r2, r4
 800a5c2:	462b      	mov	r3, r5
 800a5c4:	f7f6 f820 	bl	8000608 <__aeabi_dmul>
 800a5c8:	bd70      	pop	{r4, r5, r6, pc}
 800a5ca:	0000      	movs	r0, r0
 800a5cc:	0000      	movs	r0, r0
	...

0800a5d0 <_strtod_l>:
 800a5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d4:	ed2d 8b02 	vpush	{d8}
 800a5d8:	b09d      	sub	sp, #116	; 0x74
 800a5da:	461f      	mov	r7, r3
 800a5dc:	2300      	movs	r3, #0
 800a5de:	9318      	str	r3, [sp, #96]	; 0x60
 800a5e0:	4ba2      	ldr	r3, [pc, #648]	; (800a86c <_strtod_l+0x29c>)
 800a5e2:	9213      	str	r2, [sp, #76]	; 0x4c
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	9305      	str	r3, [sp, #20]
 800a5e8:	4604      	mov	r4, r0
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	4688      	mov	r8, r1
 800a5ee:	f7f5 fdf7 	bl	80001e0 <strlen>
 800a5f2:	f04f 0a00 	mov.w	sl, #0
 800a5f6:	4605      	mov	r5, r0
 800a5f8:	f04f 0b00 	mov.w	fp, #0
 800a5fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a600:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a602:	781a      	ldrb	r2, [r3, #0]
 800a604:	2a2b      	cmp	r2, #43	; 0x2b
 800a606:	d04e      	beq.n	800a6a6 <_strtod_l+0xd6>
 800a608:	d83b      	bhi.n	800a682 <_strtod_l+0xb2>
 800a60a:	2a0d      	cmp	r2, #13
 800a60c:	d834      	bhi.n	800a678 <_strtod_l+0xa8>
 800a60e:	2a08      	cmp	r2, #8
 800a610:	d834      	bhi.n	800a67c <_strtod_l+0xac>
 800a612:	2a00      	cmp	r2, #0
 800a614:	d03e      	beq.n	800a694 <_strtod_l+0xc4>
 800a616:	2300      	movs	r3, #0
 800a618:	930a      	str	r3, [sp, #40]	; 0x28
 800a61a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a61c:	7833      	ldrb	r3, [r6, #0]
 800a61e:	2b30      	cmp	r3, #48	; 0x30
 800a620:	f040 80b0 	bne.w	800a784 <_strtod_l+0x1b4>
 800a624:	7873      	ldrb	r3, [r6, #1]
 800a626:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a62a:	2b58      	cmp	r3, #88	; 0x58
 800a62c:	d168      	bne.n	800a700 <_strtod_l+0x130>
 800a62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a630:	9301      	str	r3, [sp, #4]
 800a632:	ab18      	add	r3, sp, #96	; 0x60
 800a634:	9702      	str	r7, [sp, #8]
 800a636:	9300      	str	r3, [sp, #0]
 800a638:	4a8d      	ldr	r2, [pc, #564]	; (800a870 <_strtod_l+0x2a0>)
 800a63a:	ab19      	add	r3, sp, #100	; 0x64
 800a63c:	a917      	add	r1, sp, #92	; 0x5c
 800a63e:	4620      	mov	r0, r4
 800a640:	f002 f900 	bl	800c844 <__gethex>
 800a644:	f010 0707 	ands.w	r7, r0, #7
 800a648:	4605      	mov	r5, r0
 800a64a:	d005      	beq.n	800a658 <_strtod_l+0x88>
 800a64c:	2f06      	cmp	r7, #6
 800a64e:	d12c      	bne.n	800a6aa <_strtod_l+0xda>
 800a650:	3601      	adds	r6, #1
 800a652:	2300      	movs	r3, #0
 800a654:	9617      	str	r6, [sp, #92]	; 0x5c
 800a656:	930a      	str	r3, [sp, #40]	; 0x28
 800a658:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f040 8590 	bne.w	800b180 <_strtod_l+0xbb0>
 800a660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a662:	b1eb      	cbz	r3, 800a6a0 <_strtod_l+0xd0>
 800a664:	4652      	mov	r2, sl
 800a666:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a66a:	ec43 2b10 	vmov	d0, r2, r3
 800a66e:	b01d      	add	sp, #116	; 0x74
 800a670:	ecbd 8b02 	vpop	{d8}
 800a674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a678:	2a20      	cmp	r2, #32
 800a67a:	d1cc      	bne.n	800a616 <_strtod_l+0x46>
 800a67c:	3301      	adds	r3, #1
 800a67e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a680:	e7be      	b.n	800a600 <_strtod_l+0x30>
 800a682:	2a2d      	cmp	r2, #45	; 0x2d
 800a684:	d1c7      	bne.n	800a616 <_strtod_l+0x46>
 800a686:	2201      	movs	r2, #1
 800a688:	920a      	str	r2, [sp, #40]	; 0x28
 800a68a:	1c5a      	adds	r2, r3, #1
 800a68c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a68e:	785b      	ldrb	r3, [r3, #1]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d1c2      	bne.n	800a61a <_strtod_l+0x4a>
 800a694:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a696:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f040 856e 	bne.w	800b17c <_strtod_l+0xbac>
 800a6a0:	4652      	mov	r2, sl
 800a6a2:	465b      	mov	r3, fp
 800a6a4:	e7e1      	b.n	800a66a <_strtod_l+0x9a>
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	e7ee      	b.n	800a688 <_strtod_l+0xb8>
 800a6aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a6ac:	b13a      	cbz	r2, 800a6be <_strtod_l+0xee>
 800a6ae:	2135      	movs	r1, #53	; 0x35
 800a6b0:	a81a      	add	r0, sp, #104	; 0x68
 800a6b2:	f003 f8ea 	bl	800d88a <__copybits>
 800a6b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a6b8:	4620      	mov	r0, r4
 800a6ba:	f002 fca9 	bl	800d010 <_Bfree>
 800a6be:	3f01      	subs	r7, #1
 800a6c0:	2f04      	cmp	r7, #4
 800a6c2:	d806      	bhi.n	800a6d2 <_strtod_l+0x102>
 800a6c4:	e8df f007 	tbb	[pc, r7]
 800a6c8:	1714030a 	.word	0x1714030a
 800a6cc:	0a          	.byte	0x0a
 800a6cd:	00          	.byte	0x00
 800a6ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a6d2:	0728      	lsls	r0, r5, #28
 800a6d4:	d5c0      	bpl.n	800a658 <_strtod_l+0x88>
 800a6d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a6da:	e7bd      	b.n	800a658 <_strtod_l+0x88>
 800a6dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a6e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a6e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a6e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a6ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a6ee:	e7f0      	b.n	800a6d2 <_strtod_l+0x102>
 800a6f0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a874 <_strtod_l+0x2a4>
 800a6f4:	e7ed      	b.n	800a6d2 <_strtod_l+0x102>
 800a6f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a6fa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a6fe:	e7e8      	b.n	800a6d2 <_strtod_l+0x102>
 800a700:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a702:	1c5a      	adds	r2, r3, #1
 800a704:	9217      	str	r2, [sp, #92]	; 0x5c
 800a706:	785b      	ldrb	r3, [r3, #1]
 800a708:	2b30      	cmp	r3, #48	; 0x30
 800a70a:	d0f9      	beq.n	800a700 <_strtod_l+0x130>
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d0a3      	beq.n	800a658 <_strtod_l+0x88>
 800a710:	2301      	movs	r3, #1
 800a712:	f04f 0900 	mov.w	r9, #0
 800a716:	9304      	str	r3, [sp, #16]
 800a718:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a71a:	9308      	str	r3, [sp, #32]
 800a71c:	f8cd 901c 	str.w	r9, [sp, #28]
 800a720:	464f      	mov	r7, r9
 800a722:	220a      	movs	r2, #10
 800a724:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a726:	7806      	ldrb	r6, [r0, #0]
 800a728:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a72c:	b2d9      	uxtb	r1, r3
 800a72e:	2909      	cmp	r1, #9
 800a730:	d92a      	bls.n	800a788 <_strtod_l+0x1b8>
 800a732:	9905      	ldr	r1, [sp, #20]
 800a734:	462a      	mov	r2, r5
 800a736:	f7ff ff18 	bl	800a56a <strncmp>
 800a73a:	b398      	cbz	r0, 800a7a4 <_strtod_l+0x1d4>
 800a73c:	2000      	movs	r0, #0
 800a73e:	4632      	mov	r2, r6
 800a740:	463d      	mov	r5, r7
 800a742:	9005      	str	r0, [sp, #20]
 800a744:	4603      	mov	r3, r0
 800a746:	2a65      	cmp	r2, #101	; 0x65
 800a748:	d001      	beq.n	800a74e <_strtod_l+0x17e>
 800a74a:	2a45      	cmp	r2, #69	; 0x45
 800a74c:	d118      	bne.n	800a780 <_strtod_l+0x1b0>
 800a74e:	b91d      	cbnz	r5, 800a758 <_strtod_l+0x188>
 800a750:	9a04      	ldr	r2, [sp, #16]
 800a752:	4302      	orrs	r2, r0
 800a754:	d09e      	beq.n	800a694 <_strtod_l+0xc4>
 800a756:	2500      	movs	r5, #0
 800a758:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a75c:	f108 0201 	add.w	r2, r8, #1
 800a760:	9217      	str	r2, [sp, #92]	; 0x5c
 800a762:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a766:	2a2b      	cmp	r2, #43	; 0x2b
 800a768:	d075      	beq.n	800a856 <_strtod_l+0x286>
 800a76a:	2a2d      	cmp	r2, #45	; 0x2d
 800a76c:	d07b      	beq.n	800a866 <_strtod_l+0x296>
 800a76e:	f04f 0c00 	mov.w	ip, #0
 800a772:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a776:	2909      	cmp	r1, #9
 800a778:	f240 8082 	bls.w	800a880 <_strtod_l+0x2b0>
 800a77c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a780:	2600      	movs	r6, #0
 800a782:	e09d      	b.n	800a8c0 <_strtod_l+0x2f0>
 800a784:	2300      	movs	r3, #0
 800a786:	e7c4      	b.n	800a712 <_strtod_l+0x142>
 800a788:	2f08      	cmp	r7, #8
 800a78a:	bfd8      	it	le
 800a78c:	9907      	ldrle	r1, [sp, #28]
 800a78e:	f100 0001 	add.w	r0, r0, #1
 800a792:	bfda      	itte	le
 800a794:	fb02 3301 	mlale	r3, r2, r1, r3
 800a798:	9307      	strle	r3, [sp, #28]
 800a79a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a79e:	3701      	adds	r7, #1
 800a7a0:	9017      	str	r0, [sp, #92]	; 0x5c
 800a7a2:	e7bf      	b.n	800a724 <_strtod_l+0x154>
 800a7a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a7a6:	195a      	adds	r2, r3, r5
 800a7a8:	9217      	str	r2, [sp, #92]	; 0x5c
 800a7aa:	5d5a      	ldrb	r2, [r3, r5]
 800a7ac:	2f00      	cmp	r7, #0
 800a7ae:	d037      	beq.n	800a820 <_strtod_l+0x250>
 800a7b0:	9005      	str	r0, [sp, #20]
 800a7b2:	463d      	mov	r5, r7
 800a7b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a7b8:	2b09      	cmp	r3, #9
 800a7ba:	d912      	bls.n	800a7e2 <_strtod_l+0x212>
 800a7bc:	2301      	movs	r3, #1
 800a7be:	e7c2      	b.n	800a746 <_strtod_l+0x176>
 800a7c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a7c2:	1c5a      	adds	r2, r3, #1
 800a7c4:	9217      	str	r2, [sp, #92]	; 0x5c
 800a7c6:	785a      	ldrb	r2, [r3, #1]
 800a7c8:	3001      	adds	r0, #1
 800a7ca:	2a30      	cmp	r2, #48	; 0x30
 800a7cc:	d0f8      	beq.n	800a7c0 <_strtod_l+0x1f0>
 800a7ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a7d2:	2b08      	cmp	r3, #8
 800a7d4:	f200 84d9 	bhi.w	800b18a <_strtod_l+0xbba>
 800a7d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a7da:	9005      	str	r0, [sp, #20]
 800a7dc:	2000      	movs	r0, #0
 800a7de:	9308      	str	r3, [sp, #32]
 800a7e0:	4605      	mov	r5, r0
 800a7e2:	3a30      	subs	r2, #48	; 0x30
 800a7e4:	f100 0301 	add.w	r3, r0, #1
 800a7e8:	d014      	beq.n	800a814 <_strtod_l+0x244>
 800a7ea:	9905      	ldr	r1, [sp, #20]
 800a7ec:	4419      	add	r1, r3
 800a7ee:	9105      	str	r1, [sp, #20]
 800a7f0:	462b      	mov	r3, r5
 800a7f2:	eb00 0e05 	add.w	lr, r0, r5
 800a7f6:	210a      	movs	r1, #10
 800a7f8:	4573      	cmp	r3, lr
 800a7fa:	d113      	bne.n	800a824 <_strtod_l+0x254>
 800a7fc:	182b      	adds	r3, r5, r0
 800a7fe:	2b08      	cmp	r3, #8
 800a800:	f105 0501 	add.w	r5, r5, #1
 800a804:	4405      	add	r5, r0
 800a806:	dc1c      	bgt.n	800a842 <_strtod_l+0x272>
 800a808:	9907      	ldr	r1, [sp, #28]
 800a80a:	230a      	movs	r3, #10
 800a80c:	fb03 2301 	mla	r3, r3, r1, r2
 800a810:	9307      	str	r3, [sp, #28]
 800a812:	2300      	movs	r3, #0
 800a814:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a816:	1c51      	adds	r1, r2, #1
 800a818:	9117      	str	r1, [sp, #92]	; 0x5c
 800a81a:	7852      	ldrb	r2, [r2, #1]
 800a81c:	4618      	mov	r0, r3
 800a81e:	e7c9      	b.n	800a7b4 <_strtod_l+0x1e4>
 800a820:	4638      	mov	r0, r7
 800a822:	e7d2      	b.n	800a7ca <_strtod_l+0x1fa>
 800a824:	2b08      	cmp	r3, #8
 800a826:	dc04      	bgt.n	800a832 <_strtod_l+0x262>
 800a828:	9e07      	ldr	r6, [sp, #28]
 800a82a:	434e      	muls	r6, r1
 800a82c:	9607      	str	r6, [sp, #28]
 800a82e:	3301      	adds	r3, #1
 800a830:	e7e2      	b.n	800a7f8 <_strtod_l+0x228>
 800a832:	f103 0c01 	add.w	ip, r3, #1
 800a836:	f1bc 0f10 	cmp.w	ip, #16
 800a83a:	bfd8      	it	le
 800a83c:	fb01 f909 	mulle.w	r9, r1, r9
 800a840:	e7f5      	b.n	800a82e <_strtod_l+0x25e>
 800a842:	2d10      	cmp	r5, #16
 800a844:	bfdc      	itt	le
 800a846:	230a      	movle	r3, #10
 800a848:	fb03 2909 	mlale	r9, r3, r9, r2
 800a84c:	e7e1      	b.n	800a812 <_strtod_l+0x242>
 800a84e:	2300      	movs	r3, #0
 800a850:	9305      	str	r3, [sp, #20]
 800a852:	2301      	movs	r3, #1
 800a854:	e77c      	b.n	800a750 <_strtod_l+0x180>
 800a856:	f04f 0c00 	mov.w	ip, #0
 800a85a:	f108 0202 	add.w	r2, r8, #2
 800a85e:	9217      	str	r2, [sp, #92]	; 0x5c
 800a860:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a864:	e785      	b.n	800a772 <_strtod_l+0x1a2>
 800a866:	f04f 0c01 	mov.w	ip, #1
 800a86a:	e7f6      	b.n	800a85a <_strtod_l+0x28a>
 800a86c:	0800f684 	.word	0x0800f684
 800a870:	0800f49c 	.word	0x0800f49c
 800a874:	7ff00000 	.word	0x7ff00000
 800a878:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a87a:	1c51      	adds	r1, r2, #1
 800a87c:	9117      	str	r1, [sp, #92]	; 0x5c
 800a87e:	7852      	ldrb	r2, [r2, #1]
 800a880:	2a30      	cmp	r2, #48	; 0x30
 800a882:	d0f9      	beq.n	800a878 <_strtod_l+0x2a8>
 800a884:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a888:	2908      	cmp	r1, #8
 800a88a:	f63f af79 	bhi.w	800a780 <_strtod_l+0x1b0>
 800a88e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a892:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a894:	9206      	str	r2, [sp, #24]
 800a896:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a898:	1c51      	adds	r1, r2, #1
 800a89a:	9117      	str	r1, [sp, #92]	; 0x5c
 800a89c:	7852      	ldrb	r2, [r2, #1]
 800a89e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a8a2:	2e09      	cmp	r6, #9
 800a8a4:	d937      	bls.n	800a916 <_strtod_l+0x346>
 800a8a6:	9e06      	ldr	r6, [sp, #24]
 800a8a8:	1b89      	subs	r1, r1, r6
 800a8aa:	2908      	cmp	r1, #8
 800a8ac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a8b0:	dc02      	bgt.n	800a8b8 <_strtod_l+0x2e8>
 800a8b2:	4576      	cmp	r6, lr
 800a8b4:	bfa8      	it	ge
 800a8b6:	4676      	movge	r6, lr
 800a8b8:	f1bc 0f00 	cmp.w	ip, #0
 800a8bc:	d000      	beq.n	800a8c0 <_strtod_l+0x2f0>
 800a8be:	4276      	negs	r6, r6
 800a8c0:	2d00      	cmp	r5, #0
 800a8c2:	d14d      	bne.n	800a960 <_strtod_l+0x390>
 800a8c4:	9904      	ldr	r1, [sp, #16]
 800a8c6:	4301      	orrs	r1, r0
 800a8c8:	f47f aec6 	bne.w	800a658 <_strtod_l+0x88>
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f47f aee1 	bne.w	800a694 <_strtod_l+0xc4>
 800a8d2:	2a69      	cmp	r2, #105	; 0x69
 800a8d4:	d027      	beq.n	800a926 <_strtod_l+0x356>
 800a8d6:	dc24      	bgt.n	800a922 <_strtod_l+0x352>
 800a8d8:	2a49      	cmp	r2, #73	; 0x49
 800a8da:	d024      	beq.n	800a926 <_strtod_l+0x356>
 800a8dc:	2a4e      	cmp	r2, #78	; 0x4e
 800a8de:	f47f aed9 	bne.w	800a694 <_strtod_l+0xc4>
 800a8e2:	499f      	ldr	r1, [pc, #636]	; (800ab60 <_strtod_l+0x590>)
 800a8e4:	a817      	add	r0, sp, #92	; 0x5c
 800a8e6:	f002 fa05 	bl	800ccf4 <__match>
 800a8ea:	2800      	cmp	r0, #0
 800a8ec:	f43f aed2 	beq.w	800a694 <_strtod_l+0xc4>
 800a8f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	2b28      	cmp	r3, #40	; 0x28
 800a8f6:	d12d      	bne.n	800a954 <_strtod_l+0x384>
 800a8f8:	499a      	ldr	r1, [pc, #616]	; (800ab64 <_strtod_l+0x594>)
 800a8fa:	aa1a      	add	r2, sp, #104	; 0x68
 800a8fc:	a817      	add	r0, sp, #92	; 0x5c
 800a8fe:	f002 fa0d 	bl	800cd1c <__hexnan>
 800a902:	2805      	cmp	r0, #5
 800a904:	d126      	bne.n	800a954 <_strtod_l+0x384>
 800a906:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a908:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a90c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a910:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a914:	e6a0      	b.n	800a658 <_strtod_l+0x88>
 800a916:	210a      	movs	r1, #10
 800a918:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a91c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a920:	e7b9      	b.n	800a896 <_strtod_l+0x2c6>
 800a922:	2a6e      	cmp	r2, #110	; 0x6e
 800a924:	e7db      	b.n	800a8de <_strtod_l+0x30e>
 800a926:	4990      	ldr	r1, [pc, #576]	; (800ab68 <_strtod_l+0x598>)
 800a928:	a817      	add	r0, sp, #92	; 0x5c
 800a92a:	f002 f9e3 	bl	800ccf4 <__match>
 800a92e:	2800      	cmp	r0, #0
 800a930:	f43f aeb0 	beq.w	800a694 <_strtod_l+0xc4>
 800a934:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a936:	498d      	ldr	r1, [pc, #564]	; (800ab6c <_strtod_l+0x59c>)
 800a938:	3b01      	subs	r3, #1
 800a93a:	a817      	add	r0, sp, #92	; 0x5c
 800a93c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a93e:	f002 f9d9 	bl	800ccf4 <__match>
 800a942:	b910      	cbnz	r0, 800a94a <_strtod_l+0x37a>
 800a944:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a946:	3301      	adds	r3, #1
 800a948:	9317      	str	r3, [sp, #92]	; 0x5c
 800a94a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ab7c <_strtod_l+0x5ac>
 800a94e:	f04f 0a00 	mov.w	sl, #0
 800a952:	e681      	b.n	800a658 <_strtod_l+0x88>
 800a954:	4886      	ldr	r0, [pc, #536]	; (800ab70 <_strtod_l+0x5a0>)
 800a956:	f003 fabb 	bl	800ded0 <nan>
 800a95a:	ec5b ab10 	vmov	sl, fp, d0
 800a95e:	e67b      	b.n	800a658 <_strtod_l+0x88>
 800a960:	9b05      	ldr	r3, [sp, #20]
 800a962:	9807      	ldr	r0, [sp, #28]
 800a964:	1af3      	subs	r3, r6, r3
 800a966:	2f00      	cmp	r7, #0
 800a968:	bf08      	it	eq
 800a96a:	462f      	moveq	r7, r5
 800a96c:	2d10      	cmp	r5, #16
 800a96e:	9306      	str	r3, [sp, #24]
 800a970:	46a8      	mov	r8, r5
 800a972:	bfa8      	it	ge
 800a974:	f04f 0810 	movge.w	r8, #16
 800a978:	f7f5 fdcc 	bl	8000514 <__aeabi_ui2d>
 800a97c:	2d09      	cmp	r5, #9
 800a97e:	4682      	mov	sl, r0
 800a980:	468b      	mov	fp, r1
 800a982:	dd13      	ble.n	800a9ac <_strtod_l+0x3dc>
 800a984:	4b7b      	ldr	r3, [pc, #492]	; (800ab74 <_strtod_l+0x5a4>)
 800a986:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a98a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a98e:	f7f5 fe3b 	bl	8000608 <__aeabi_dmul>
 800a992:	4682      	mov	sl, r0
 800a994:	4648      	mov	r0, r9
 800a996:	468b      	mov	fp, r1
 800a998:	f7f5 fdbc 	bl	8000514 <__aeabi_ui2d>
 800a99c:	4602      	mov	r2, r0
 800a99e:	460b      	mov	r3, r1
 800a9a0:	4650      	mov	r0, sl
 800a9a2:	4659      	mov	r1, fp
 800a9a4:	f7f5 fc7a 	bl	800029c <__adddf3>
 800a9a8:	4682      	mov	sl, r0
 800a9aa:	468b      	mov	fp, r1
 800a9ac:	2d0f      	cmp	r5, #15
 800a9ae:	dc38      	bgt.n	800aa22 <_strtod_l+0x452>
 800a9b0:	9b06      	ldr	r3, [sp, #24]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	f43f ae50 	beq.w	800a658 <_strtod_l+0x88>
 800a9b8:	dd24      	ble.n	800aa04 <_strtod_l+0x434>
 800a9ba:	2b16      	cmp	r3, #22
 800a9bc:	dc0b      	bgt.n	800a9d6 <_strtod_l+0x406>
 800a9be:	496d      	ldr	r1, [pc, #436]	; (800ab74 <_strtod_l+0x5a4>)
 800a9c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a9c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9c8:	4652      	mov	r2, sl
 800a9ca:	465b      	mov	r3, fp
 800a9cc:	f7f5 fe1c 	bl	8000608 <__aeabi_dmul>
 800a9d0:	4682      	mov	sl, r0
 800a9d2:	468b      	mov	fp, r1
 800a9d4:	e640      	b.n	800a658 <_strtod_l+0x88>
 800a9d6:	9a06      	ldr	r2, [sp, #24]
 800a9d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	db20      	blt.n	800aa22 <_strtod_l+0x452>
 800a9e0:	4c64      	ldr	r4, [pc, #400]	; (800ab74 <_strtod_l+0x5a4>)
 800a9e2:	f1c5 050f 	rsb	r5, r5, #15
 800a9e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a9ea:	4652      	mov	r2, sl
 800a9ec:	465b      	mov	r3, fp
 800a9ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9f2:	f7f5 fe09 	bl	8000608 <__aeabi_dmul>
 800a9f6:	9b06      	ldr	r3, [sp, #24]
 800a9f8:	1b5d      	subs	r5, r3, r5
 800a9fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a9fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aa02:	e7e3      	b.n	800a9cc <_strtod_l+0x3fc>
 800aa04:	9b06      	ldr	r3, [sp, #24]
 800aa06:	3316      	adds	r3, #22
 800aa08:	db0b      	blt.n	800aa22 <_strtod_l+0x452>
 800aa0a:	9b05      	ldr	r3, [sp, #20]
 800aa0c:	1b9e      	subs	r6, r3, r6
 800aa0e:	4b59      	ldr	r3, [pc, #356]	; (800ab74 <_strtod_l+0x5a4>)
 800aa10:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800aa14:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa18:	4650      	mov	r0, sl
 800aa1a:	4659      	mov	r1, fp
 800aa1c:	f7f5 ff1e 	bl	800085c <__aeabi_ddiv>
 800aa20:	e7d6      	b.n	800a9d0 <_strtod_l+0x400>
 800aa22:	9b06      	ldr	r3, [sp, #24]
 800aa24:	eba5 0808 	sub.w	r8, r5, r8
 800aa28:	4498      	add	r8, r3
 800aa2a:	f1b8 0f00 	cmp.w	r8, #0
 800aa2e:	dd74      	ble.n	800ab1a <_strtod_l+0x54a>
 800aa30:	f018 030f 	ands.w	r3, r8, #15
 800aa34:	d00a      	beq.n	800aa4c <_strtod_l+0x47c>
 800aa36:	494f      	ldr	r1, [pc, #316]	; (800ab74 <_strtod_l+0x5a4>)
 800aa38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa3c:	4652      	mov	r2, sl
 800aa3e:	465b      	mov	r3, fp
 800aa40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa44:	f7f5 fde0 	bl	8000608 <__aeabi_dmul>
 800aa48:	4682      	mov	sl, r0
 800aa4a:	468b      	mov	fp, r1
 800aa4c:	f038 080f 	bics.w	r8, r8, #15
 800aa50:	d04f      	beq.n	800aaf2 <_strtod_l+0x522>
 800aa52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800aa56:	dd22      	ble.n	800aa9e <_strtod_l+0x4ce>
 800aa58:	2500      	movs	r5, #0
 800aa5a:	462e      	mov	r6, r5
 800aa5c:	9507      	str	r5, [sp, #28]
 800aa5e:	9505      	str	r5, [sp, #20]
 800aa60:	2322      	movs	r3, #34	; 0x22
 800aa62:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ab7c <_strtod_l+0x5ac>
 800aa66:	6023      	str	r3, [r4, #0]
 800aa68:	f04f 0a00 	mov.w	sl, #0
 800aa6c:	9b07      	ldr	r3, [sp, #28]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	f43f adf2 	beq.w	800a658 <_strtod_l+0x88>
 800aa74:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aa76:	4620      	mov	r0, r4
 800aa78:	f002 faca 	bl	800d010 <_Bfree>
 800aa7c:	9905      	ldr	r1, [sp, #20]
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f002 fac6 	bl	800d010 <_Bfree>
 800aa84:	4631      	mov	r1, r6
 800aa86:	4620      	mov	r0, r4
 800aa88:	f002 fac2 	bl	800d010 <_Bfree>
 800aa8c:	9907      	ldr	r1, [sp, #28]
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f002 fabe 	bl	800d010 <_Bfree>
 800aa94:	4629      	mov	r1, r5
 800aa96:	4620      	mov	r0, r4
 800aa98:	f002 faba 	bl	800d010 <_Bfree>
 800aa9c:	e5dc      	b.n	800a658 <_strtod_l+0x88>
 800aa9e:	4b36      	ldr	r3, [pc, #216]	; (800ab78 <_strtod_l+0x5a8>)
 800aaa0:	9304      	str	r3, [sp, #16]
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800aaa8:	4650      	mov	r0, sl
 800aaaa:	4659      	mov	r1, fp
 800aaac:	4699      	mov	r9, r3
 800aaae:	f1b8 0f01 	cmp.w	r8, #1
 800aab2:	dc21      	bgt.n	800aaf8 <_strtod_l+0x528>
 800aab4:	b10b      	cbz	r3, 800aaba <_strtod_l+0x4ea>
 800aab6:	4682      	mov	sl, r0
 800aab8:	468b      	mov	fp, r1
 800aaba:	4b2f      	ldr	r3, [pc, #188]	; (800ab78 <_strtod_l+0x5a8>)
 800aabc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800aac0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800aac4:	4652      	mov	r2, sl
 800aac6:	465b      	mov	r3, fp
 800aac8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800aacc:	f7f5 fd9c 	bl	8000608 <__aeabi_dmul>
 800aad0:	4b2a      	ldr	r3, [pc, #168]	; (800ab7c <_strtod_l+0x5ac>)
 800aad2:	460a      	mov	r2, r1
 800aad4:	400b      	ands	r3, r1
 800aad6:	492a      	ldr	r1, [pc, #168]	; (800ab80 <_strtod_l+0x5b0>)
 800aad8:	428b      	cmp	r3, r1
 800aada:	4682      	mov	sl, r0
 800aadc:	d8bc      	bhi.n	800aa58 <_strtod_l+0x488>
 800aade:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aae2:	428b      	cmp	r3, r1
 800aae4:	bf86      	itte	hi
 800aae6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ab84 <_strtod_l+0x5b4>
 800aaea:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800aaee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	9304      	str	r3, [sp, #16]
 800aaf6:	e084      	b.n	800ac02 <_strtod_l+0x632>
 800aaf8:	f018 0f01 	tst.w	r8, #1
 800aafc:	d005      	beq.n	800ab0a <_strtod_l+0x53a>
 800aafe:	9b04      	ldr	r3, [sp, #16]
 800ab00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab04:	f7f5 fd80 	bl	8000608 <__aeabi_dmul>
 800ab08:	2301      	movs	r3, #1
 800ab0a:	9a04      	ldr	r2, [sp, #16]
 800ab0c:	3208      	adds	r2, #8
 800ab0e:	f109 0901 	add.w	r9, r9, #1
 800ab12:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ab16:	9204      	str	r2, [sp, #16]
 800ab18:	e7c9      	b.n	800aaae <_strtod_l+0x4de>
 800ab1a:	d0ea      	beq.n	800aaf2 <_strtod_l+0x522>
 800ab1c:	f1c8 0800 	rsb	r8, r8, #0
 800ab20:	f018 020f 	ands.w	r2, r8, #15
 800ab24:	d00a      	beq.n	800ab3c <_strtod_l+0x56c>
 800ab26:	4b13      	ldr	r3, [pc, #76]	; (800ab74 <_strtod_l+0x5a4>)
 800ab28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab2c:	4650      	mov	r0, sl
 800ab2e:	4659      	mov	r1, fp
 800ab30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab34:	f7f5 fe92 	bl	800085c <__aeabi_ddiv>
 800ab38:	4682      	mov	sl, r0
 800ab3a:	468b      	mov	fp, r1
 800ab3c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ab40:	d0d7      	beq.n	800aaf2 <_strtod_l+0x522>
 800ab42:	f1b8 0f1f 	cmp.w	r8, #31
 800ab46:	dd1f      	ble.n	800ab88 <_strtod_l+0x5b8>
 800ab48:	2500      	movs	r5, #0
 800ab4a:	462e      	mov	r6, r5
 800ab4c:	9507      	str	r5, [sp, #28]
 800ab4e:	9505      	str	r5, [sp, #20]
 800ab50:	2322      	movs	r3, #34	; 0x22
 800ab52:	f04f 0a00 	mov.w	sl, #0
 800ab56:	f04f 0b00 	mov.w	fp, #0
 800ab5a:	6023      	str	r3, [r4, #0]
 800ab5c:	e786      	b.n	800aa6c <_strtod_l+0x49c>
 800ab5e:	bf00      	nop
 800ab60:	0800f475 	.word	0x0800f475
 800ab64:	0800f4b0 	.word	0x0800f4b0
 800ab68:	0800f46d 	.word	0x0800f46d
 800ab6c:	0800f52f 	.word	0x0800f52f
 800ab70:	0800f52b 	.word	0x0800f52b
 800ab74:	0800f720 	.word	0x0800f720
 800ab78:	0800f6f8 	.word	0x0800f6f8
 800ab7c:	7ff00000 	.word	0x7ff00000
 800ab80:	7ca00000 	.word	0x7ca00000
 800ab84:	7fefffff 	.word	0x7fefffff
 800ab88:	f018 0310 	ands.w	r3, r8, #16
 800ab8c:	bf18      	it	ne
 800ab8e:	236a      	movne	r3, #106	; 0x6a
 800ab90:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800af40 <_strtod_l+0x970>
 800ab94:	9304      	str	r3, [sp, #16]
 800ab96:	4650      	mov	r0, sl
 800ab98:	4659      	mov	r1, fp
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	f018 0f01 	tst.w	r8, #1
 800aba0:	d004      	beq.n	800abac <_strtod_l+0x5dc>
 800aba2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aba6:	f7f5 fd2f 	bl	8000608 <__aeabi_dmul>
 800abaa:	2301      	movs	r3, #1
 800abac:	ea5f 0868 	movs.w	r8, r8, asr #1
 800abb0:	f109 0908 	add.w	r9, r9, #8
 800abb4:	d1f2      	bne.n	800ab9c <_strtod_l+0x5cc>
 800abb6:	b10b      	cbz	r3, 800abbc <_strtod_l+0x5ec>
 800abb8:	4682      	mov	sl, r0
 800abba:	468b      	mov	fp, r1
 800abbc:	9b04      	ldr	r3, [sp, #16]
 800abbe:	b1c3      	cbz	r3, 800abf2 <_strtod_l+0x622>
 800abc0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800abc4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800abc8:	2b00      	cmp	r3, #0
 800abca:	4659      	mov	r1, fp
 800abcc:	dd11      	ble.n	800abf2 <_strtod_l+0x622>
 800abce:	2b1f      	cmp	r3, #31
 800abd0:	f340 8124 	ble.w	800ae1c <_strtod_l+0x84c>
 800abd4:	2b34      	cmp	r3, #52	; 0x34
 800abd6:	bfde      	ittt	le
 800abd8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800abdc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800abe0:	fa03 f202 	lslle.w	r2, r3, r2
 800abe4:	f04f 0a00 	mov.w	sl, #0
 800abe8:	bfcc      	ite	gt
 800abea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800abee:	ea02 0b01 	andle.w	fp, r2, r1
 800abf2:	2200      	movs	r2, #0
 800abf4:	2300      	movs	r3, #0
 800abf6:	4650      	mov	r0, sl
 800abf8:	4659      	mov	r1, fp
 800abfa:	f7f5 ff6d 	bl	8000ad8 <__aeabi_dcmpeq>
 800abfe:	2800      	cmp	r0, #0
 800ac00:	d1a2      	bne.n	800ab48 <_strtod_l+0x578>
 800ac02:	9b07      	ldr	r3, [sp, #28]
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	9908      	ldr	r1, [sp, #32]
 800ac08:	462b      	mov	r3, r5
 800ac0a:	463a      	mov	r2, r7
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	f002 fa67 	bl	800d0e0 <__s2b>
 800ac12:	9007      	str	r0, [sp, #28]
 800ac14:	2800      	cmp	r0, #0
 800ac16:	f43f af1f 	beq.w	800aa58 <_strtod_l+0x488>
 800ac1a:	9b05      	ldr	r3, [sp, #20]
 800ac1c:	1b9e      	subs	r6, r3, r6
 800ac1e:	9b06      	ldr	r3, [sp, #24]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	bfb4      	ite	lt
 800ac24:	4633      	movlt	r3, r6
 800ac26:	2300      	movge	r3, #0
 800ac28:	930c      	str	r3, [sp, #48]	; 0x30
 800ac2a:	9b06      	ldr	r3, [sp, #24]
 800ac2c:	2500      	movs	r5, #0
 800ac2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ac32:	9312      	str	r3, [sp, #72]	; 0x48
 800ac34:	462e      	mov	r6, r5
 800ac36:	9b07      	ldr	r3, [sp, #28]
 800ac38:	4620      	mov	r0, r4
 800ac3a:	6859      	ldr	r1, [r3, #4]
 800ac3c:	f002 f9a8 	bl	800cf90 <_Balloc>
 800ac40:	9005      	str	r0, [sp, #20]
 800ac42:	2800      	cmp	r0, #0
 800ac44:	f43f af0c 	beq.w	800aa60 <_strtod_l+0x490>
 800ac48:	9b07      	ldr	r3, [sp, #28]
 800ac4a:	691a      	ldr	r2, [r3, #16]
 800ac4c:	3202      	adds	r2, #2
 800ac4e:	f103 010c 	add.w	r1, r3, #12
 800ac52:	0092      	lsls	r2, r2, #2
 800ac54:	300c      	adds	r0, #12
 800ac56:	f7fe feb5 	bl	80099c4 <memcpy>
 800ac5a:	ec4b ab10 	vmov	d0, sl, fp
 800ac5e:	aa1a      	add	r2, sp, #104	; 0x68
 800ac60:	a919      	add	r1, sp, #100	; 0x64
 800ac62:	4620      	mov	r0, r4
 800ac64:	f002 fd82 	bl	800d76c <__d2b>
 800ac68:	ec4b ab18 	vmov	d8, sl, fp
 800ac6c:	9018      	str	r0, [sp, #96]	; 0x60
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	f43f aef6 	beq.w	800aa60 <_strtod_l+0x490>
 800ac74:	2101      	movs	r1, #1
 800ac76:	4620      	mov	r0, r4
 800ac78:	f002 facc 	bl	800d214 <__i2b>
 800ac7c:	4606      	mov	r6, r0
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	f43f aeee 	beq.w	800aa60 <_strtod_l+0x490>
 800ac84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac86:	9904      	ldr	r1, [sp, #16]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	bfab      	itete	ge
 800ac8c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ac8e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ac90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ac92:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ac96:	bfac      	ite	ge
 800ac98:	eb03 0902 	addge.w	r9, r3, r2
 800ac9c:	1ad7      	sublt	r7, r2, r3
 800ac9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aca0:	eba3 0801 	sub.w	r8, r3, r1
 800aca4:	4490      	add	r8, r2
 800aca6:	4ba1      	ldr	r3, [pc, #644]	; (800af2c <_strtod_l+0x95c>)
 800aca8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800acac:	4598      	cmp	r8, r3
 800acae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800acb2:	f280 80c7 	bge.w	800ae44 <_strtod_l+0x874>
 800acb6:	eba3 0308 	sub.w	r3, r3, r8
 800acba:	2b1f      	cmp	r3, #31
 800acbc:	eba2 0203 	sub.w	r2, r2, r3
 800acc0:	f04f 0101 	mov.w	r1, #1
 800acc4:	f300 80b1 	bgt.w	800ae2a <_strtod_l+0x85a>
 800acc8:	fa01 f303 	lsl.w	r3, r1, r3
 800accc:	930d      	str	r3, [sp, #52]	; 0x34
 800acce:	2300      	movs	r3, #0
 800acd0:	9308      	str	r3, [sp, #32]
 800acd2:	eb09 0802 	add.w	r8, r9, r2
 800acd6:	9b04      	ldr	r3, [sp, #16]
 800acd8:	45c1      	cmp	r9, r8
 800acda:	4417      	add	r7, r2
 800acdc:	441f      	add	r7, r3
 800acde:	464b      	mov	r3, r9
 800ace0:	bfa8      	it	ge
 800ace2:	4643      	movge	r3, r8
 800ace4:	42bb      	cmp	r3, r7
 800ace6:	bfa8      	it	ge
 800ace8:	463b      	movge	r3, r7
 800acea:	2b00      	cmp	r3, #0
 800acec:	bfc2      	ittt	gt
 800acee:	eba8 0803 	subgt.w	r8, r8, r3
 800acf2:	1aff      	subgt	r7, r7, r3
 800acf4:	eba9 0903 	subgt.w	r9, r9, r3
 800acf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	dd17      	ble.n	800ad2e <_strtod_l+0x75e>
 800acfe:	4631      	mov	r1, r6
 800ad00:	461a      	mov	r2, r3
 800ad02:	4620      	mov	r0, r4
 800ad04:	f002 fb46 	bl	800d394 <__pow5mult>
 800ad08:	4606      	mov	r6, r0
 800ad0a:	2800      	cmp	r0, #0
 800ad0c:	f43f aea8 	beq.w	800aa60 <_strtod_l+0x490>
 800ad10:	4601      	mov	r1, r0
 800ad12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ad14:	4620      	mov	r0, r4
 800ad16:	f002 fa93 	bl	800d240 <__multiply>
 800ad1a:	900b      	str	r0, [sp, #44]	; 0x2c
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	f43f ae9f 	beq.w	800aa60 <_strtod_l+0x490>
 800ad22:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ad24:	4620      	mov	r0, r4
 800ad26:	f002 f973 	bl	800d010 <_Bfree>
 800ad2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad2c:	9318      	str	r3, [sp, #96]	; 0x60
 800ad2e:	f1b8 0f00 	cmp.w	r8, #0
 800ad32:	f300 808c 	bgt.w	800ae4e <_strtod_l+0x87e>
 800ad36:	9b06      	ldr	r3, [sp, #24]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	dd08      	ble.n	800ad4e <_strtod_l+0x77e>
 800ad3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ad3e:	9905      	ldr	r1, [sp, #20]
 800ad40:	4620      	mov	r0, r4
 800ad42:	f002 fb27 	bl	800d394 <__pow5mult>
 800ad46:	9005      	str	r0, [sp, #20]
 800ad48:	2800      	cmp	r0, #0
 800ad4a:	f43f ae89 	beq.w	800aa60 <_strtod_l+0x490>
 800ad4e:	2f00      	cmp	r7, #0
 800ad50:	dd08      	ble.n	800ad64 <_strtod_l+0x794>
 800ad52:	9905      	ldr	r1, [sp, #20]
 800ad54:	463a      	mov	r2, r7
 800ad56:	4620      	mov	r0, r4
 800ad58:	f002 fb76 	bl	800d448 <__lshift>
 800ad5c:	9005      	str	r0, [sp, #20]
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	f43f ae7e 	beq.w	800aa60 <_strtod_l+0x490>
 800ad64:	f1b9 0f00 	cmp.w	r9, #0
 800ad68:	dd08      	ble.n	800ad7c <_strtod_l+0x7ac>
 800ad6a:	4631      	mov	r1, r6
 800ad6c:	464a      	mov	r2, r9
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f002 fb6a 	bl	800d448 <__lshift>
 800ad74:	4606      	mov	r6, r0
 800ad76:	2800      	cmp	r0, #0
 800ad78:	f43f ae72 	beq.w	800aa60 <_strtod_l+0x490>
 800ad7c:	9a05      	ldr	r2, [sp, #20]
 800ad7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ad80:	4620      	mov	r0, r4
 800ad82:	f002 fbed 	bl	800d560 <__mdiff>
 800ad86:	4605      	mov	r5, r0
 800ad88:	2800      	cmp	r0, #0
 800ad8a:	f43f ae69 	beq.w	800aa60 <_strtod_l+0x490>
 800ad8e:	68c3      	ldr	r3, [r0, #12]
 800ad90:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad92:	2300      	movs	r3, #0
 800ad94:	60c3      	str	r3, [r0, #12]
 800ad96:	4631      	mov	r1, r6
 800ad98:	f002 fbc6 	bl	800d528 <__mcmp>
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	da60      	bge.n	800ae62 <_strtod_l+0x892>
 800ada0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ada2:	ea53 030a 	orrs.w	r3, r3, sl
 800ada6:	f040 8082 	bne.w	800aeae <_strtod_l+0x8de>
 800adaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d17d      	bne.n	800aeae <_strtod_l+0x8de>
 800adb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800adb6:	0d1b      	lsrs	r3, r3, #20
 800adb8:	051b      	lsls	r3, r3, #20
 800adba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800adbe:	d976      	bls.n	800aeae <_strtod_l+0x8de>
 800adc0:	696b      	ldr	r3, [r5, #20]
 800adc2:	b913      	cbnz	r3, 800adca <_strtod_l+0x7fa>
 800adc4:	692b      	ldr	r3, [r5, #16]
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	dd71      	ble.n	800aeae <_strtod_l+0x8de>
 800adca:	4629      	mov	r1, r5
 800adcc:	2201      	movs	r2, #1
 800adce:	4620      	mov	r0, r4
 800add0:	f002 fb3a 	bl	800d448 <__lshift>
 800add4:	4631      	mov	r1, r6
 800add6:	4605      	mov	r5, r0
 800add8:	f002 fba6 	bl	800d528 <__mcmp>
 800addc:	2800      	cmp	r0, #0
 800adde:	dd66      	ble.n	800aeae <_strtod_l+0x8de>
 800ade0:	9904      	ldr	r1, [sp, #16]
 800ade2:	4a53      	ldr	r2, [pc, #332]	; (800af30 <_strtod_l+0x960>)
 800ade4:	465b      	mov	r3, fp
 800ade6:	2900      	cmp	r1, #0
 800ade8:	f000 8081 	beq.w	800aeee <_strtod_l+0x91e>
 800adec:	ea02 010b 	and.w	r1, r2, fp
 800adf0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800adf4:	dc7b      	bgt.n	800aeee <_strtod_l+0x91e>
 800adf6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800adfa:	f77f aea9 	ble.w	800ab50 <_strtod_l+0x580>
 800adfe:	4b4d      	ldr	r3, [pc, #308]	; (800af34 <_strtod_l+0x964>)
 800ae00:	4650      	mov	r0, sl
 800ae02:	4659      	mov	r1, fp
 800ae04:	2200      	movs	r2, #0
 800ae06:	f7f5 fbff 	bl	8000608 <__aeabi_dmul>
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	4303      	orrs	r3, r0
 800ae0e:	bf08      	it	eq
 800ae10:	2322      	moveq	r3, #34	; 0x22
 800ae12:	4682      	mov	sl, r0
 800ae14:	468b      	mov	fp, r1
 800ae16:	bf08      	it	eq
 800ae18:	6023      	streq	r3, [r4, #0]
 800ae1a:	e62b      	b.n	800aa74 <_strtod_l+0x4a4>
 800ae1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae20:	fa02 f303 	lsl.w	r3, r2, r3
 800ae24:	ea03 0a0a 	and.w	sl, r3, sl
 800ae28:	e6e3      	b.n	800abf2 <_strtod_l+0x622>
 800ae2a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ae2e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ae32:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ae36:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ae3a:	fa01 f308 	lsl.w	r3, r1, r8
 800ae3e:	9308      	str	r3, [sp, #32]
 800ae40:	910d      	str	r1, [sp, #52]	; 0x34
 800ae42:	e746      	b.n	800acd2 <_strtod_l+0x702>
 800ae44:	2300      	movs	r3, #0
 800ae46:	9308      	str	r3, [sp, #32]
 800ae48:	2301      	movs	r3, #1
 800ae4a:	930d      	str	r3, [sp, #52]	; 0x34
 800ae4c:	e741      	b.n	800acd2 <_strtod_l+0x702>
 800ae4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ae50:	4642      	mov	r2, r8
 800ae52:	4620      	mov	r0, r4
 800ae54:	f002 faf8 	bl	800d448 <__lshift>
 800ae58:	9018      	str	r0, [sp, #96]	; 0x60
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	f47f af6b 	bne.w	800ad36 <_strtod_l+0x766>
 800ae60:	e5fe      	b.n	800aa60 <_strtod_l+0x490>
 800ae62:	465f      	mov	r7, fp
 800ae64:	d16e      	bne.n	800af44 <_strtod_l+0x974>
 800ae66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ae68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae6c:	b342      	cbz	r2, 800aec0 <_strtod_l+0x8f0>
 800ae6e:	4a32      	ldr	r2, [pc, #200]	; (800af38 <_strtod_l+0x968>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d128      	bne.n	800aec6 <_strtod_l+0x8f6>
 800ae74:	9b04      	ldr	r3, [sp, #16]
 800ae76:	4651      	mov	r1, sl
 800ae78:	b1eb      	cbz	r3, 800aeb6 <_strtod_l+0x8e6>
 800ae7a:	4b2d      	ldr	r3, [pc, #180]	; (800af30 <_strtod_l+0x960>)
 800ae7c:	403b      	ands	r3, r7
 800ae7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ae82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae86:	d819      	bhi.n	800aebc <_strtod_l+0x8ec>
 800ae88:	0d1b      	lsrs	r3, r3, #20
 800ae8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae92:	4299      	cmp	r1, r3
 800ae94:	d117      	bne.n	800aec6 <_strtod_l+0x8f6>
 800ae96:	4b29      	ldr	r3, [pc, #164]	; (800af3c <_strtod_l+0x96c>)
 800ae98:	429f      	cmp	r7, r3
 800ae9a:	d102      	bne.n	800aea2 <_strtod_l+0x8d2>
 800ae9c:	3101      	adds	r1, #1
 800ae9e:	f43f addf 	beq.w	800aa60 <_strtod_l+0x490>
 800aea2:	4b23      	ldr	r3, [pc, #140]	; (800af30 <_strtod_l+0x960>)
 800aea4:	403b      	ands	r3, r7
 800aea6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800aeaa:	f04f 0a00 	mov.w	sl, #0
 800aeae:	9b04      	ldr	r3, [sp, #16]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d1a4      	bne.n	800adfe <_strtod_l+0x82e>
 800aeb4:	e5de      	b.n	800aa74 <_strtod_l+0x4a4>
 800aeb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aeba:	e7ea      	b.n	800ae92 <_strtod_l+0x8c2>
 800aebc:	4613      	mov	r3, r2
 800aebe:	e7e8      	b.n	800ae92 <_strtod_l+0x8c2>
 800aec0:	ea53 030a 	orrs.w	r3, r3, sl
 800aec4:	d08c      	beq.n	800ade0 <_strtod_l+0x810>
 800aec6:	9b08      	ldr	r3, [sp, #32]
 800aec8:	b1db      	cbz	r3, 800af02 <_strtod_l+0x932>
 800aeca:	423b      	tst	r3, r7
 800aecc:	d0ef      	beq.n	800aeae <_strtod_l+0x8de>
 800aece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aed0:	9a04      	ldr	r2, [sp, #16]
 800aed2:	4650      	mov	r0, sl
 800aed4:	4659      	mov	r1, fp
 800aed6:	b1c3      	cbz	r3, 800af0a <_strtod_l+0x93a>
 800aed8:	f7ff fb5b 	bl	800a592 <sulp>
 800aedc:	4602      	mov	r2, r0
 800aede:	460b      	mov	r3, r1
 800aee0:	ec51 0b18 	vmov	r0, r1, d8
 800aee4:	f7f5 f9da 	bl	800029c <__adddf3>
 800aee8:	4682      	mov	sl, r0
 800aeea:	468b      	mov	fp, r1
 800aeec:	e7df      	b.n	800aeae <_strtod_l+0x8de>
 800aeee:	4013      	ands	r3, r2
 800aef0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800aef4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aef8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aefc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800af00:	e7d5      	b.n	800aeae <_strtod_l+0x8de>
 800af02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af04:	ea13 0f0a 	tst.w	r3, sl
 800af08:	e7e0      	b.n	800aecc <_strtod_l+0x8fc>
 800af0a:	f7ff fb42 	bl	800a592 <sulp>
 800af0e:	4602      	mov	r2, r0
 800af10:	460b      	mov	r3, r1
 800af12:	ec51 0b18 	vmov	r0, r1, d8
 800af16:	f7f5 f9bf 	bl	8000298 <__aeabi_dsub>
 800af1a:	2200      	movs	r2, #0
 800af1c:	2300      	movs	r3, #0
 800af1e:	4682      	mov	sl, r0
 800af20:	468b      	mov	fp, r1
 800af22:	f7f5 fdd9 	bl	8000ad8 <__aeabi_dcmpeq>
 800af26:	2800      	cmp	r0, #0
 800af28:	d0c1      	beq.n	800aeae <_strtod_l+0x8de>
 800af2a:	e611      	b.n	800ab50 <_strtod_l+0x580>
 800af2c:	fffffc02 	.word	0xfffffc02
 800af30:	7ff00000 	.word	0x7ff00000
 800af34:	39500000 	.word	0x39500000
 800af38:	000fffff 	.word	0x000fffff
 800af3c:	7fefffff 	.word	0x7fefffff
 800af40:	0800f4c8 	.word	0x0800f4c8
 800af44:	4631      	mov	r1, r6
 800af46:	4628      	mov	r0, r5
 800af48:	f002 fc6c 	bl	800d824 <__ratio>
 800af4c:	ec59 8b10 	vmov	r8, r9, d0
 800af50:	ee10 0a10 	vmov	r0, s0
 800af54:	2200      	movs	r2, #0
 800af56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af5a:	4649      	mov	r1, r9
 800af5c:	f7f5 fdd0 	bl	8000b00 <__aeabi_dcmple>
 800af60:	2800      	cmp	r0, #0
 800af62:	d07a      	beq.n	800b05a <_strtod_l+0xa8a>
 800af64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af66:	2b00      	cmp	r3, #0
 800af68:	d04a      	beq.n	800b000 <_strtod_l+0xa30>
 800af6a:	4b95      	ldr	r3, [pc, #596]	; (800b1c0 <_strtod_l+0xbf0>)
 800af6c:	2200      	movs	r2, #0
 800af6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800af72:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b1c0 <_strtod_l+0xbf0>
 800af76:	f04f 0800 	mov.w	r8, #0
 800af7a:	4b92      	ldr	r3, [pc, #584]	; (800b1c4 <_strtod_l+0xbf4>)
 800af7c:	403b      	ands	r3, r7
 800af7e:	930d      	str	r3, [sp, #52]	; 0x34
 800af80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800af82:	4b91      	ldr	r3, [pc, #580]	; (800b1c8 <_strtod_l+0xbf8>)
 800af84:	429a      	cmp	r2, r3
 800af86:	f040 80b0 	bne.w	800b0ea <_strtod_l+0xb1a>
 800af8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800af8e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800af92:	ec4b ab10 	vmov	d0, sl, fp
 800af96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800af9a:	f002 fb6b 	bl	800d674 <__ulp>
 800af9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800afa2:	ec53 2b10 	vmov	r2, r3, d0
 800afa6:	f7f5 fb2f 	bl	8000608 <__aeabi_dmul>
 800afaa:	4652      	mov	r2, sl
 800afac:	465b      	mov	r3, fp
 800afae:	f7f5 f975 	bl	800029c <__adddf3>
 800afb2:	460b      	mov	r3, r1
 800afb4:	4983      	ldr	r1, [pc, #524]	; (800b1c4 <_strtod_l+0xbf4>)
 800afb6:	4a85      	ldr	r2, [pc, #532]	; (800b1cc <_strtod_l+0xbfc>)
 800afb8:	4019      	ands	r1, r3
 800afba:	4291      	cmp	r1, r2
 800afbc:	4682      	mov	sl, r0
 800afbe:	d960      	bls.n	800b082 <_strtod_l+0xab2>
 800afc0:	ee18 3a90 	vmov	r3, s17
 800afc4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800afc8:	4293      	cmp	r3, r2
 800afca:	d104      	bne.n	800afd6 <_strtod_l+0xa06>
 800afcc:	ee18 3a10 	vmov	r3, s16
 800afd0:	3301      	adds	r3, #1
 800afd2:	f43f ad45 	beq.w	800aa60 <_strtod_l+0x490>
 800afd6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b1d8 <_strtod_l+0xc08>
 800afda:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800afde:	9918      	ldr	r1, [sp, #96]	; 0x60
 800afe0:	4620      	mov	r0, r4
 800afe2:	f002 f815 	bl	800d010 <_Bfree>
 800afe6:	9905      	ldr	r1, [sp, #20]
 800afe8:	4620      	mov	r0, r4
 800afea:	f002 f811 	bl	800d010 <_Bfree>
 800afee:	4631      	mov	r1, r6
 800aff0:	4620      	mov	r0, r4
 800aff2:	f002 f80d 	bl	800d010 <_Bfree>
 800aff6:	4629      	mov	r1, r5
 800aff8:	4620      	mov	r0, r4
 800affa:	f002 f809 	bl	800d010 <_Bfree>
 800affe:	e61a      	b.n	800ac36 <_strtod_l+0x666>
 800b000:	f1ba 0f00 	cmp.w	sl, #0
 800b004:	d11b      	bne.n	800b03e <_strtod_l+0xa6e>
 800b006:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b00a:	b9f3      	cbnz	r3, 800b04a <_strtod_l+0xa7a>
 800b00c:	4b6c      	ldr	r3, [pc, #432]	; (800b1c0 <_strtod_l+0xbf0>)
 800b00e:	2200      	movs	r2, #0
 800b010:	4640      	mov	r0, r8
 800b012:	4649      	mov	r1, r9
 800b014:	f7f5 fd6a 	bl	8000aec <__aeabi_dcmplt>
 800b018:	b9d0      	cbnz	r0, 800b050 <_strtod_l+0xa80>
 800b01a:	4640      	mov	r0, r8
 800b01c:	4649      	mov	r1, r9
 800b01e:	4b6c      	ldr	r3, [pc, #432]	; (800b1d0 <_strtod_l+0xc00>)
 800b020:	2200      	movs	r2, #0
 800b022:	f7f5 faf1 	bl	8000608 <__aeabi_dmul>
 800b026:	4680      	mov	r8, r0
 800b028:	4689      	mov	r9, r1
 800b02a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b02e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b032:	9315      	str	r3, [sp, #84]	; 0x54
 800b034:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b038:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b03c:	e79d      	b.n	800af7a <_strtod_l+0x9aa>
 800b03e:	f1ba 0f01 	cmp.w	sl, #1
 800b042:	d102      	bne.n	800b04a <_strtod_l+0xa7a>
 800b044:	2f00      	cmp	r7, #0
 800b046:	f43f ad83 	beq.w	800ab50 <_strtod_l+0x580>
 800b04a:	4b62      	ldr	r3, [pc, #392]	; (800b1d4 <_strtod_l+0xc04>)
 800b04c:	2200      	movs	r2, #0
 800b04e:	e78e      	b.n	800af6e <_strtod_l+0x99e>
 800b050:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b1d0 <_strtod_l+0xc00>
 800b054:	f04f 0800 	mov.w	r8, #0
 800b058:	e7e7      	b.n	800b02a <_strtod_l+0xa5a>
 800b05a:	4b5d      	ldr	r3, [pc, #372]	; (800b1d0 <_strtod_l+0xc00>)
 800b05c:	4640      	mov	r0, r8
 800b05e:	4649      	mov	r1, r9
 800b060:	2200      	movs	r2, #0
 800b062:	f7f5 fad1 	bl	8000608 <__aeabi_dmul>
 800b066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b068:	4680      	mov	r8, r0
 800b06a:	4689      	mov	r9, r1
 800b06c:	b933      	cbnz	r3, 800b07c <_strtod_l+0xaac>
 800b06e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b072:	900e      	str	r0, [sp, #56]	; 0x38
 800b074:	930f      	str	r3, [sp, #60]	; 0x3c
 800b076:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b07a:	e7dd      	b.n	800b038 <_strtod_l+0xa68>
 800b07c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b080:	e7f9      	b.n	800b076 <_strtod_l+0xaa6>
 800b082:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b086:	9b04      	ldr	r3, [sp, #16]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d1a8      	bne.n	800afde <_strtod_l+0xa0e>
 800b08c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b090:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b092:	0d1b      	lsrs	r3, r3, #20
 800b094:	051b      	lsls	r3, r3, #20
 800b096:	429a      	cmp	r2, r3
 800b098:	d1a1      	bne.n	800afde <_strtod_l+0xa0e>
 800b09a:	4640      	mov	r0, r8
 800b09c:	4649      	mov	r1, r9
 800b09e:	f7f5 fe13 	bl	8000cc8 <__aeabi_d2lz>
 800b0a2:	f7f5 fa83 	bl	80005ac <__aeabi_l2d>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	4640      	mov	r0, r8
 800b0ac:	4649      	mov	r1, r9
 800b0ae:	f7f5 f8f3 	bl	8000298 <__aeabi_dsub>
 800b0b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b0b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0b8:	ea43 030a 	orr.w	r3, r3, sl
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	4680      	mov	r8, r0
 800b0c0:	4689      	mov	r9, r1
 800b0c2:	d055      	beq.n	800b170 <_strtod_l+0xba0>
 800b0c4:	a336      	add	r3, pc, #216	; (adr r3, 800b1a0 <_strtod_l+0xbd0>)
 800b0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ca:	f7f5 fd0f 	bl	8000aec <__aeabi_dcmplt>
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	f47f acd0 	bne.w	800aa74 <_strtod_l+0x4a4>
 800b0d4:	a334      	add	r3, pc, #208	; (adr r3, 800b1a8 <_strtod_l+0xbd8>)
 800b0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0da:	4640      	mov	r0, r8
 800b0dc:	4649      	mov	r1, r9
 800b0de:	f7f5 fd23 	bl	8000b28 <__aeabi_dcmpgt>
 800b0e2:	2800      	cmp	r0, #0
 800b0e4:	f43f af7b 	beq.w	800afde <_strtod_l+0xa0e>
 800b0e8:	e4c4      	b.n	800aa74 <_strtod_l+0x4a4>
 800b0ea:	9b04      	ldr	r3, [sp, #16]
 800b0ec:	b333      	cbz	r3, 800b13c <_strtod_l+0xb6c>
 800b0ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0f0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b0f4:	d822      	bhi.n	800b13c <_strtod_l+0xb6c>
 800b0f6:	a32e      	add	r3, pc, #184	; (adr r3, 800b1b0 <_strtod_l+0xbe0>)
 800b0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fc:	4640      	mov	r0, r8
 800b0fe:	4649      	mov	r1, r9
 800b100:	f7f5 fcfe 	bl	8000b00 <__aeabi_dcmple>
 800b104:	b1a0      	cbz	r0, 800b130 <_strtod_l+0xb60>
 800b106:	4649      	mov	r1, r9
 800b108:	4640      	mov	r0, r8
 800b10a:	f7f5 fd55 	bl	8000bb8 <__aeabi_d2uiz>
 800b10e:	2801      	cmp	r0, #1
 800b110:	bf38      	it	cc
 800b112:	2001      	movcc	r0, #1
 800b114:	f7f5 f9fe 	bl	8000514 <__aeabi_ui2d>
 800b118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b11a:	4680      	mov	r8, r0
 800b11c:	4689      	mov	r9, r1
 800b11e:	bb23      	cbnz	r3, 800b16a <_strtod_l+0xb9a>
 800b120:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b124:	9010      	str	r0, [sp, #64]	; 0x40
 800b126:	9311      	str	r3, [sp, #68]	; 0x44
 800b128:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b12c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b132:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b134:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b138:	1a9b      	subs	r3, r3, r2
 800b13a:	9309      	str	r3, [sp, #36]	; 0x24
 800b13c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b140:	eeb0 0a48 	vmov.f32	s0, s16
 800b144:	eef0 0a68 	vmov.f32	s1, s17
 800b148:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b14c:	f002 fa92 	bl	800d674 <__ulp>
 800b150:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b154:	ec53 2b10 	vmov	r2, r3, d0
 800b158:	f7f5 fa56 	bl	8000608 <__aeabi_dmul>
 800b15c:	ec53 2b18 	vmov	r2, r3, d8
 800b160:	f7f5 f89c 	bl	800029c <__adddf3>
 800b164:	4682      	mov	sl, r0
 800b166:	468b      	mov	fp, r1
 800b168:	e78d      	b.n	800b086 <_strtod_l+0xab6>
 800b16a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b16e:	e7db      	b.n	800b128 <_strtod_l+0xb58>
 800b170:	a311      	add	r3, pc, #68	; (adr r3, 800b1b8 <_strtod_l+0xbe8>)
 800b172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b176:	f7f5 fcb9 	bl	8000aec <__aeabi_dcmplt>
 800b17a:	e7b2      	b.n	800b0e2 <_strtod_l+0xb12>
 800b17c:	2300      	movs	r3, #0
 800b17e:	930a      	str	r3, [sp, #40]	; 0x28
 800b180:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b182:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b184:	6013      	str	r3, [r2, #0]
 800b186:	f7ff ba6b 	b.w	800a660 <_strtod_l+0x90>
 800b18a:	2a65      	cmp	r2, #101	; 0x65
 800b18c:	f43f ab5f 	beq.w	800a84e <_strtod_l+0x27e>
 800b190:	2a45      	cmp	r2, #69	; 0x45
 800b192:	f43f ab5c 	beq.w	800a84e <_strtod_l+0x27e>
 800b196:	2301      	movs	r3, #1
 800b198:	f7ff bb94 	b.w	800a8c4 <_strtod_l+0x2f4>
 800b19c:	f3af 8000 	nop.w
 800b1a0:	94a03595 	.word	0x94a03595
 800b1a4:	3fdfffff 	.word	0x3fdfffff
 800b1a8:	35afe535 	.word	0x35afe535
 800b1ac:	3fe00000 	.word	0x3fe00000
 800b1b0:	ffc00000 	.word	0xffc00000
 800b1b4:	41dfffff 	.word	0x41dfffff
 800b1b8:	94a03595 	.word	0x94a03595
 800b1bc:	3fcfffff 	.word	0x3fcfffff
 800b1c0:	3ff00000 	.word	0x3ff00000
 800b1c4:	7ff00000 	.word	0x7ff00000
 800b1c8:	7fe00000 	.word	0x7fe00000
 800b1cc:	7c9fffff 	.word	0x7c9fffff
 800b1d0:	3fe00000 	.word	0x3fe00000
 800b1d4:	bff00000 	.word	0xbff00000
 800b1d8:	7fefffff 	.word	0x7fefffff

0800b1dc <strtof>:
 800b1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1e0:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800b290 <strtof+0xb4>
 800b1e4:	4b26      	ldr	r3, [pc, #152]	; (800b280 <strtof+0xa4>)
 800b1e6:	460a      	mov	r2, r1
 800b1e8:	ed2d 8b02 	vpush	{d8}
 800b1ec:	4601      	mov	r1, r0
 800b1ee:	f8d8 0000 	ldr.w	r0, [r8]
 800b1f2:	f7ff f9ed 	bl	800a5d0 <_strtod_l>
 800b1f6:	ec55 4b10 	vmov	r4, r5, d0
 800b1fa:	ee10 2a10 	vmov	r2, s0
 800b1fe:	ee10 0a10 	vmov	r0, s0
 800b202:	462b      	mov	r3, r5
 800b204:	4629      	mov	r1, r5
 800b206:	f7f5 fc99 	bl	8000b3c <__aeabi_dcmpun>
 800b20a:	b190      	cbz	r0, 800b232 <strtof+0x56>
 800b20c:	2d00      	cmp	r5, #0
 800b20e:	481d      	ldr	r0, [pc, #116]	; (800b284 <strtof+0xa8>)
 800b210:	da09      	bge.n	800b226 <strtof+0x4a>
 800b212:	f002 fe65 	bl	800dee0 <nanf>
 800b216:	eeb1 8a40 	vneg.f32	s16, s0
 800b21a:	eeb0 0a48 	vmov.f32	s0, s16
 800b21e:	ecbd 8b02 	vpop	{d8}
 800b222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b226:	ecbd 8b02 	vpop	{d8}
 800b22a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b22e:	f002 be57 	b.w	800dee0 <nanf>
 800b232:	4620      	mov	r0, r4
 800b234:	4629      	mov	r1, r5
 800b236:	f7f5 fcdf 	bl	8000bf8 <__aeabi_d2f>
 800b23a:	ee08 0a10 	vmov	s16, r0
 800b23e:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b288 <strtof+0xac>
 800b242:	eeb0 7ac8 	vabs.f32	s14, s16
 800b246:	eeb4 7a67 	vcmp.f32	s14, s15
 800b24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b24e:	dde4      	ble.n	800b21a <strtof+0x3e>
 800b250:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800b254:	4b0d      	ldr	r3, [pc, #52]	; (800b28c <strtof+0xb0>)
 800b256:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b25a:	4620      	mov	r0, r4
 800b25c:	4639      	mov	r1, r7
 800b25e:	f7f5 fc6d 	bl	8000b3c <__aeabi_dcmpun>
 800b262:	b940      	cbnz	r0, 800b276 <strtof+0x9a>
 800b264:	4b09      	ldr	r3, [pc, #36]	; (800b28c <strtof+0xb0>)
 800b266:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b26a:	4620      	mov	r0, r4
 800b26c:	4639      	mov	r1, r7
 800b26e:	f7f5 fc47 	bl	8000b00 <__aeabi_dcmple>
 800b272:	2800      	cmp	r0, #0
 800b274:	d0d1      	beq.n	800b21a <strtof+0x3e>
 800b276:	f8d8 3000 	ldr.w	r3, [r8]
 800b27a:	2222      	movs	r2, #34	; 0x22
 800b27c:	601a      	str	r2, [r3, #0]
 800b27e:	e7cc      	b.n	800b21a <strtof+0x3e>
 800b280:	20000128 	.word	0x20000128
 800b284:	0800f52b 	.word	0x0800f52b
 800b288:	7f7fffff 	.word	0x7f7fffff
 800b28c:	7fefffff 	.word	0x7fefffff
 800b290:	200000c0 	.word	0x200000c0

0800b294 <_strtol_l.constprop.0>:
 800b294:	2b01      	cmp	r3, #1
 800b296:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b29a:	d001      	beq.n	800b2a0 <_strtol_l.constprop.0+0xc>
 800b29c:	2b24      	cmp	r3, #36	; 0x24
 800b29e:	d906      	bls.n	800b2ae <_strtol_l.constprop.0+0x1a>
 800b2a0:	f7fe fb5e 	bl	8009960 <__errno>
 800b2a4:	2316      	movs	r3, #22
 800b2a6:	6003      	str	r3, [r0, #0]
 800b2a8:	2000      	movs	r0, #0
 800b2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b394 <_strtol_l.constprop.0+0x100>
 800b2b2:	460d      	mov	r5, r1
 800b2b4:	462e      	mov	r6, r5
 800b2b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2ba:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b2be:	f017 0708 	ands.w	r7, r7, #8
 800b2c2:	d1f7      	bne.n	800b2b4 <_strtol_l.constprop.0+0x20>
 800b2c4:	2c2d      	cmp	r4, #45	; 0x2d
 800b2c6:	d132      	bne.n	800b32e <_strtol_l.constprop.0+0x9a>
 800b2c8:	782c      	ldrb	r4, [r5, #0]
 800b2ca:	2701      	movs	r7, #1
 800b2cc:	1cb5      	adds	r5, r6, #2
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d05b      	beq.n	800b38a <_strtol_l.constprop.0+0xf6>
 800b2d2:	2b10      	cmp	r3, #16
 800b2d4:	d109      	bne.n	800b2ea <_strtol_l.constprop.0+0x56>
 800b2d6:	2c30      	cmp	r4, #48	; 0x30
 800b2d8:	d107      	bne.n	800b2ea <_strtol_l.constprop.0+0x56>
 800b2da:	782c      	ldrb	r4, [r5, #0]
 800b2dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b2e0:	2c58      	cmp	r4, #88	; 0x58
 800b2e2:	d14d      	bne.n	800b380 <_strtol_l.constprop.0+0xec>
 800b2e4:	786c      	ldrb	r4, [r5, #1]
 800b2e6:	2310      	movs	r3, #16
 800b2e8:	3502      	adds	r5, #2
 800b2ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b2ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b2f2:	f04f 0c00 	mov.w	ip, #0
 800b2f6:	fbb8 f9f3 	udiv	r9, r8, r3
 800b2fa:	4666      	mov	r6, ip
 800b2fc:	fb03 8a19 	mls	sl, r3, r9, r8
 800b300:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b304:	f1be 0f09 	cmp.w	lr, #9
 800b308:	d816      	bhi.n	800b338 <_strtol_l.constprop.0+0xa4>
 800b30a:	4674      	mov	r4, lr
 800b30c:	42a3      	cmp	r3, r4
 800b30e:	dd24      	ble.n	800b35a <_strtol_l.constprop.0+0xc6>
 800b310:	f1bc 0f00 	cmp.w	ip, #0
 800b314:	db1e      	blt.n	800b354 <_strtol_l.constprop.0+0xc0>
 800b316:	45b1      	cmp	r9, r6
 800b318:	d31c      	bcc.n	800b354 <_strtol_l.constprop.0+0xc0>
 800b31a:	d101      	bne.n	800b320 <_strtol_l.constprop.0+0x8c>
 800b31c:	45a2      	cmp	sl, r4
 800b31e:	db19      	blt.n	800b354 <_strtol_l.constprop.0+0xc0>
 800b320:	fb06 4603 	mla	r6, r6, r3, r4
 800b324:	f04f 0c01 	mov.w	ip, #1
 800b328:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b32c:	e7e8      	b.n	800b300 <_strtol_l.constprop.0+0x6c>
 800b32e:	2c2b      	cmp	r4, #43	; 0x2b
 800b330:	bf04      	itt	eq
 800b332:	782c      	ldrbeq	r4, [r5, #0]
 800b334:	1cb5      	addeq	r5, r6, #2
 800b336:	e7ca      	b.n	800b2ce <_strtol_l.constprop.0+0x3a>
 800b338:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b33c:	f1be 0f19 	cmp.w	lr, #25
 800b340:	d801      	bhi.n	800b346 <_strtol_l.constprop.0+0xb2>
 800b342:	3c37      	subs	r4, #55	; 0x37
 800b344:	e7e2      	b.n	800b30c <_strtol_l.constprop.0+0x78>
 800b346:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b34a:	f1be 0f19 	cmp.w	lr, #25
 800b34e:	d804      	bhi.n	800b35a <_strtol_l.constprop.0+0xc6>
 800b350:	3c57      	subs	r4, #87	; 0x57
 800b352:	e7db      	b.n	800b30c <_strtol_l.constprop.0+0x78>
 800b354:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800b358:	e7e6      	b.n	800b328 <_strtol_l.constprop.0+0x94>
 800b35a:	f1bc 0f00 	cmp.w	ip, #0
 800b35e:	da05      	bge.n	800b36c <_strtol_l.constprop.0+0xd8>
 800b360:	2322      	movs	r3, #34	; 0x22
 800b362:	6003      	str	r3, [r0, #0]
 800b364:	4646      	mov	r6, r8
 800b366:	b942      	cbnz	r2, 800b37a <_strtol_l.constprop.0+0xe6>
 800b368:	4630      	mov	r0, r6
 800b36a:	e79e      	b.n	800b2aa <_strtol_l.constprop.0+0x16>
 800b36c:	b107      	cbz	r7, 800b370 <_strtol_l.constprop.0+0xdc>
 800b36e:	4276      	negs	r6, r6
 800b370:	2a00      	cmp	r2, #0
 800b372:	d0f9      	beq.n	800b368 <_strtol_l.constprop.0+0xd4>
 800b374:	f1bc 0f00 	cmp.w	ip, #0
 800b378:	d000      	beq.n	800b37c <_strtol_l.constprop.0+0xe8>
 800b37a:	1e69      	subs	r1, r5, #1
 800b37c:	6011      	str	r1, [r2, #0]
 800b37e:	e7f3      	b.n	800b368 <_strtol_l.constprop.0+0xd4>
 800b380:	2430      	movs	r4, #48	; 0x30
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1b1      	bne.n	800b2ea <_strtol_l.constprop.0+0x56>
 800b386:	2308      	movs	r3, #8
 800b388:	e7af      	b.n	800b2ea <_strtol_l.constprop.0+0x56>
 800b38a:	2c30      	cmp	r4, #48	; 0x30
 800b38c:	d0a5      	beq.n	800b2da <_strtol_l.constprop.0+0x46>
 800b38e:	230a      	movs	r3, #10
 800b390:	e7ab      	b.n	800b2ea <_strtol_l.constprop.0+0x56>
 800b392:	bf00      	nop
 800b394:	0800f361 	.word	0x0800f361

0800b398 <strtol>:
 800b398:	4613      	mov	r3, r2
 800b39a:	460a      	mov	r2, r1
 800b39c:	4601      	mov	r1, r0
 800b39e:	4802      	ldr	r0, [pc, #8]	; (800b3a8 <strtol+0x10>)
 800b3a0:	6800      	ldr	r0, [r0, #0]
 800b3a2:	f7ff bf77 	b.w	800b294 <_strtol_l.constprop.0>
 800b3a6:	bf00      	nop
 800b3a8:	200000c0 	.word	0x200000c0

0800b3ac <_strtoll_l.constprop.0>:
 800b3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b0:	b085      	sub	sp, #20
 800b3b2:	4688      	mov	r8, r1
 800b3b4:	9201      	str	r2, [sp, #4]
 800b3b6:	4a47      	ldr	r2, [pc, #284]	; (800b4d4 <_strtoll_l.constprop.0+0x128>)
 800b3b8:	9003      	str	r0, [sp, #12]
 800b3ba:	461e      	mov	r6, r3
 800b3bc:	460d      	mov	r5, r1
 800b3be:	462b      	mov	r3, r5
 800b3c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b3c4:	5ca7      	ldrb	r7, [r4, r2]
 800b3c6:	f017 0708 	ands.w	r7, r7, #8
 800b3ca:	d1f8      	bne.n	800b3be <_strtoll_l.constprop.0+0x12>
 800b3cc:	2c2d      	cmp	r4, #45	; 0x2d
 800b3ce:	d147      	bne.n	800b460 <_strtoll_l.constprop.0+0xb4>
 800b3d0:	782c      	ldrb	r4, [r5, #0]
 800b3d2:	2701      	movs	r7, #1
 800b3d4:	1c9d      	adds	r5, r3, #2
 800b3d6:	2e00      	cmp	r6, #0
 800b3d8:	d077      	beq.n	800b4ca <_strtoll_l.constprop.0+0x11e>
 800b3da:	2e10      	cmp	r6, #16
 800b3dc:	d109      	bne.n	800b3f2 <_strtoll_l.constprop.0+0x46>
 800b3de:	2c30      	cmp	r4, #48	; 0x30
 800b3e0:	d107      	bne.n	800b3f2 <_strtoll_l.constprop.0+0x46>
 800b3e2:	782b      	ldrb	r3, [r5, #0]
 800b3e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b3e8:	2b58      	cmp	r3, #88	; 0x58
 800b3ea:	d169      	bne.n	800b4c0 <_strtoll_l.constprop.0+0x114>
 800b3ec:	786c      	ldrb	r4, [r5, #1]
 800b3ee:	2610      	movs	r6, #16
 800b3f0:	3502      	adds	r5, #2
 800b3f2:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 800b3f6:	f107 3bff 	add.w	fp, r7, #4294967295	; 0xffffffff
 800b3fa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b3fe:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800b402:	4632      	mov	r2, r6
 800b404:	464b      	mov	r3, r9
 800b406:	4658      	mov	r0, fp
 800b408:	4651      	mov	r1, sl
 800b40a:	f7f5 fc45 	bl	8000c98 <__aeabi_uldivmod>
 800b40e:	2300      	movs	r3, #0
 800b410:	9202      	str	r2, [sp, #8]
 800b412:	468c      	mov	ip, r1
 800b414:	4602      	mov	r2, r0
 800b416:	4619      	mov	r1, r3
 800b418:	4618      	mov	r0, r3
 800b41a:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b41e:	f1be 0f09 	cmp.w	lr, #9
 800b422:	d822      	bhi.n	800b46a <_strtoll_l.constprop.0+0xbe>
 800b424:	4674      	mov	r4, lr
 800b426:	42a6      	cmp	r6, r4
 800b428:	dd30      	ble.n	800b48c <_strtoll_l.constprop.0+0xe0>
 800b42a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b42e:	d014      	beq.n	800b45a <_strtoll_l.constprop.0+0xae>
 800b430:	4282      	cmp	r2, r0
 800b432:	eb7c 0301 	sbcs.w	r3, ip, r1
 800b436:	d326      	bcc.n	800b486 <_strtoll_l.constprop.0+0xda>
 800b438:	458c      	cmp	ip, r1
 800b43a:	bf08      	it	eq
 800b43c:	4282      	cmpeq	r2, r0
 800b43e:	d102      	bne.n	800b446 <_strtoll_l.constprop.0+0x9a>
 800b440:	9b02      	ldr	r3, [sp, #8]
 800b442:	42a3      	cmp	r3, r4
 800b444:	db1f      	blt.n	800b486 <_strtoll_l.constprop.0+0xda>
 800b446:	4371      	muls	r1, r6
 800b448:	fb00 1109 	mla	r1, r0, r9, r1
 800b44c:	fba6 0300 	umull	r0, r3, r6, r0
 800b450:	4419      	add	r1, r3
 800b452:	1820      	adds	r0, r4, r0
 800b454:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800b458:	2301      	movs	r3, #1
 800b45a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b45e:	e7dc      	b.n	800b41a <_strtoll_l.constprop.0+0x6e>
 800b460:	2c2b      	cmp	r4, #43	; 0x2b
 800b462:	bf04      	itt	eq
 800b464:	782c      	ldrbeq	r4, [r5, #0]
 800b466:	1c9d      	addeq	r5, r3, #2
 800b468:	e7b5      	b.n	800b3d6 <_strtoll_l.constprop.0+0x2a>
 800b46a:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b46e:	f1be 0f19 	cmp.w	lr, #25
 800b472:	d801      	bhi.n	800b478 <_strtoll_l.constprop.0+0xcc>
 800b474:	3c37      	subs	r4, #55	; 0x37
 800b476:	e7d6      	b.n	800b426 <_strtoll_l.constprop.0+0x7a>
 800b478:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b47c:	f1be 0f19 	cmp.w	lr, #25
 800b480:	d804      	bhi.n	800b48c <_strtoll_l.constprop.0+0xe0>
 800b482:	3c57      	subs	r4, #87	; 0x57
 800b484:	e7cf      	b.n	800b426 <_strtoll_l.constprop.0+0x7a>
 800b486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b48a:	e7e6      	b.n	800b45a <_strtoll_l.constprop.0+0xae>
 800b48c:	1c5a      	adds	r2, r3, #1
 800b48e:	d109      	bne.n	800b4a4 <_strtoll_l.constprop.0+0xf8>
 800b490:	9a03      	ldr	r2, [sp, #12]
 800b492:	2322      	movs	r3, #34	; 0x22
 800b494:	6013      	str	r3, [r2, #0]
 800b496:	9b01      	ldr	r3, [sp, #4]
 800b498:	4658      	mov	r0, fp
 800b49a:	4651      	mov	r1, sl
 800b49c:	b953      	cbnz	r3, 800b4b4 <_strtoll_l.constprop.0+0x108>
 800b49e:	b005      	add	sp, #20
 800b4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a4:	b117      	cbz	r7, 800b4ac <_strtoll_l.constprop.0+0x100>
 800b4a6:	4240      	negs	r0, r0
 800b4a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800b4ac:	9a01      	ldr	r2, [sp, #4]
 800b4ae:	2a00      	cmp	r2, #0
 800b4b0:	d0f5      	beq.n	800b49e <_strtoll_l.constprop.0+0xf2>
 800b4b2:	b10b      	cbz	r3, 800b4b8 <_strtoll_l.constprop.0+0x10c>
 800b4b4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800b4b8:	9b01      	ldr	r3, [sp, #4]
 800b4ba:	f8c3 8000 	str.w	r8, [r3]
 800b4be:	e7ee      	b.n	800b49e <_strtoll_l.constprop.0+0xf2>
 800b4c0:	2430      	movs	r4, #48	; 0x30
 800b4c2:	2e00      	cmp	r6, #0
 800b4c4:	d195      	bne.n	800b3f2 <_strtoll_l.constprop.0+0x46>
 800b4c6:	2608      	movs	r6, #8
 800b4c8:	e793      	b.n	800b3f2 <_strtoll_l.constprop.0+0x46>
 800b4ca:	2c30      	cmp	r4, #48	; 0x30
 800b4cc:	d089      	beq.n	800b3e2 <_strtoll_l.constprop.0+0x36>
 800b4ce:	260a      	movs	r6, #10
 800b4d0:	e78f      	b.n	800b3f2 <_strtoll_l.constprop.0+0x46>
 800b4d2:	bf00      	nop
 800b4d4:	0800f361 	.word	0x0800f361

0800b4d8 <strtoll>:
 800b4d8:	4613      	mov	r3, r2
 800b4da:	460a      	mov	r2, r1
 800b4dc:	4601      	mov	r1, r0
 800b4de:	4802      	ldr	r0, [pc, #8]	; (800b4e8 <strtoll+0x10>)
 800b4e0:	6800      	ldr	r0, [r0, #0]
 800b4e2:	f7ff bf63 	b.w	800b3ac <_strtoll_l.constprop.0>
 800b4e6:	bf00      	nop
 800b4e8:	200000c0 	.word	0x200000c0

0800b4ec <__swbuf_r>:
 800b4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ee:	460e      	mov	r6, r1
 800b4f0:	4614      	mov	r4, r2
 800b4f2:	4605      	mov	r5, r0
 800b4f4:	b118      	cbz	r0, 800b4fe <__swbuf_r+0x12>
 800b4f6:	6983      	ldr	r3, [r0, #24]
 800b4f8:	b90b      	cbnz	r3, 800b4fe <__swbuf_r+0x12>
 800b4fa:	f001 f88d 	bl	800c618 <__sinit>
 800b4fe:	4b21      	ldr	r3, [pc, #132]	; (800b584 <__swbuf_r+0x98>)
 800b500:	429c      	cmp	r4, r3
 800b502:	d12b      	bne.n	800b55c <__swbuf_r+0x70>
 800b504:	686c      	ldr	r4, [r5, #4]
 800b506:	69a3      	ldr	r3, [r4, #24]
 800b508:	60a3      	str	r3, [r4, #8]
 800b50a:	89a3      	ldrh	r3, [r4, #12]
 800b50c:	071a      	lsls	r2, r3, #28
 800b50e:	d52f      	bpl.n	800b570 <__swbuf_r+0x84>
 800b510:	6923      	ldr	r3, [r4, #16]
 800b512:	b36b      	cbz	r3, 800b570 <__swbuf_r+0x84>
 800b514:	6923      	ldr	r3, [r4, #16]
 800b516:	6820      	ldr	r0, [r4, #0]
 800b518:	1ac0      	subs	r0, r0, r3
 800b51a:	6963      	ldr	r3, [r4, #20]
 800b51c:	b2f6      	uxtb	r6, r6
 800b51e:	4283      	cmp	r3, r0
 800b520:	4637      	mov	r7, r6
 800b522:	dc04      	bgt.n	800b52e <__swbuf_r+0x42>
 800b524:	4621      	mov	r1, r4
 800b526:	4628      	mov	r0, r5
 800b528:	f000 ffe2 	bl	800c4f0 <_fflush_r>
 800b52c:	bb30      	cbnz	r0, 800b57c <__swbuf_r+0x90>
 800b52e:	68a3      	ldr	r3, [r4, #8]
 800b530:	3b01      	subs	r3, #1
 800b532:	60a3      	str	r3, [r4, #8]
 800b534:	6823      	ldr	r3, [r4, #0]
 800b536:	1c5a      	adds	r2, r3, #1
 800b538:	6022      	str	r2, [r4, #0]
 800b53a:	701e      	strb	r6, [r3, #0]
 800b53c:	6963      	ldr	r3, [r4, #20]
 800b53e:	3001      	adds	r0, #1
 800b540:	4283      	cmp	r3, r0
 800b542:	d004      	beq.n	800b54e <__swbuf_r+0x62>
 800b544:	89a3      	ldrh	r3, [r4, #12]
 800b546:	07db      	lsls	r3, r3, #31
 800b548:	d506      	bpl.n	800b558 <__swbuf_r+0x6c>
 800b54a:	2e0a      	cmp	r6, #10
 800b54c:	d104      	bne.n	800b558 <__swbuf_r+0x6c>
 800b54e:	4621      	mov	r1, r4
 800b550:	4628      	mov	r0, r5
 800b552:	f000 ffcd 	bl	800c4f0 <_fflush_r>
 800b556:	b988      	cbnz	r0, 800b57c <__swbuf_r+0x90>
 800b558:	4638      	mov	r0, r7
 800b55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b55c:	4b0a      	ldr	r3, [pc, #40]	; (800b588 <__swbuf_r+0x9c>)
 800b55e:	429c      	cmp	r4, r3
 800b560:	d101      	bne.n	800b566 <__swbuf_r+0x7a>
 800b562:	68ac      	ldr	r4, [r5, #8]
 800b564:	e7cf      	b.n	800b506 <__swbuf_r+0x1a>
 800b566:	4b09      	ldr	r3, [pc, #36]	; (800b58c <__swbuf_r+0xa0>)
 800b568:	429c      	cmp	r4, r3
 800b56a:	bf08      	it	eq
 800b56c:	68ec      	ldreq	r4, [r5, #12]
 800b56e:	e7ca      	b.n	800b506 <__swbuf_r+0x1a>
 800b570:	4621      	mov	r1, r4
 800b572:	4628      	mov	r0, r5
 800b574:	f000 f81e 	bl	800b5b4 <__swsetup_r>
 800b578:	2800      	cmp	r0, #0
 800b57a:	d0cb      	beq.n	800b514 <__swbuf_r+0x28>
 800b57c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b580:	e7ea      	b.n	800b558 <__swbuf_r+0x6c>
 800b582:	bf00      	nop
 800b584:	0800f5dc 	.word	0x0800f5dc
 800b588:	0800f5fc 	.word	0x0800f5fc
 800b58c:	0800f5bc 	.word	0x0800f5bc

0800b590 <_write_r>:
 800b590:	b538      	push	{r3, r4, r5, lr}
 800b592:	4d07      	ldr	r5, [pc, #28]	; (800b5b0 <_write_r+0x20>)
 800b594:	4604      	mov	r4, r0
 800b596:	4608      	mov	r0, r1
 800b598:	4611      	mov	r1, r2
 800b59a:	2200      	movs	r2, #0
 800b59c:	602a      	str	r2, [r5, #0]
 800b59e:	461a      	mov	r2, r3
 800b5a0:	f7f9 fc9b 	bl	8004eda <_write>
 800b5a4:	1c43      	adds	r3, r0, #1
 800b5a6:	d102      	bne.n	800b5ae <_write_r+0x1e>
 800b5a8:	682b      	ldr	r3, [r5, #0]
 800b5aa:	b103      	cbz	r3, 800b5ae <_write_r+0x1e>
 800b5ac:	6023      	str	r3, [r4, #0]
 800b5ae:	bd38      	pop	{r3, r4, r5, pc}
 800b5b0:	20002e44 	.word	0x20002e44

0800b5b4 <__swsetup_r>:
 800b5b4:	4b32      	ldr	r3, [pc, #200]	; (800b680 <__swsetup_r+0xcc>)
 800b5b6:	b570      	push	{r4, r5, r6, lr}
 800b5b8:	681d      	ldr	r5, [r3, #0]
 800b5ba:	4606      	mov	r6, r0
 800b5bc:	460c      	mov	r4, r1
 800b5be:	b125      	cbz	r5, 800b5ca <__swsetup_r+0x16>
 800b5c0:	69ab      	ldr	r3, [r5, #24]
 800b5c2:	b913      	cbnz	r3, 800b5ca <__swsetup_r+0x16>
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	f001 f827 	bl	800c618 <__sinit>
 800b5ca:	4b2e      	ldr	r3, [pc, #184]	; (800b684 <__swsetup_r+0xd0>)
 800b5cc:	429c      	cmp	r4, r3
 800b5ce:	d10f      	bne.n	800b5f0 <__swsetup_r+0x3c>
 800b5d0:	686c      	ldr	r4, [r5, #4]
 800b5d2:	89a3      	ldrh	r3, [r4, #12]
 800b5d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5d8:	0719      	lsls	r1, r3, #28
 800b5da:	d42c      	bmi.n	800b636 <__swsetup_r+0x82>
 800b5dc:	06dd      	lsls	r5, r3, #27
 800b5de:	d411      	bmi.n	800b604 <__swsetup_r+0x50>
 800b5e0:	2309      	movs	r3, #9
 800b5e2:	6033      	str	r3, [r6, #0]
 800b5e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5e8:	81a3      	strh	r3, [r4, #12]
 800b5ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5ee:	e03e      	b.n	800b66e <__swsetup_r+0xba>
 800b5f0:	4b25      	ldr	r3, [pc, #148]	; (800b688 <__swsetup_r+0xd4>)
 800b5f2:	429c      	cmp	r4, r3
 800b5f4:	d101      	bne.n	800b5fa <__swsetup_r+0x46>
 800b5f6:	68ac      	ldr	r4, [r5, #8]
 800b5f8:	e7eb      	b.n	800b5d2 <__swsetup_r+0x1e>
 800b5fa:	4b24      	ldr	r3, [pc, #144]	; (800b68c <__swsetup_r+0xd8>)
 800b5fc:	429c      	cmp	r4, r3
 800b5fe:	bf08      	it	eq
 800b600:	68ec      	ldreq	r4, [r5, #12]
 800b602:	e7e6      	b.n	800b5d2 <__swsetup_r+0x1e>
 800b604:	0758      	lsls	r0, r3, #29
 800b606:	d512      	bpl.n	800b62e <__swsetup_r+0x7a>
 800b608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b60a:	b141      	cbz	r1, 800b61e <__swsetup_r+0x6a>
 800b60c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b610:	4299      	cmp	r1, r3
 800b612:	d002      	beq.n	800b61a <__swsetup_r+0x66>
 800b614:	4630      	mov	r0, r6
 800b616:	f7fe f9eb 	bl	80099f0 <_free_r>
 800b61a:	2300      	movs	r3, #0
 800b61c:	6363      	str	r3, [r4, #52]	; 0x34
 800b61e:	89a3      	ldrh	r3, [r4, #12]
 800b620:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b624:	81a3      	strh	r3, [r4, #12]
 800b626:	2300      	movs	r3, #0
 800b628:	6063      	str	r3, [r4, #4]
 800b62a:	6923      	ldr	r3, [r4, #16]
 800b62c:	6023      	str	r3, [r4, #0]
 800b62e:	89a3      	ldrh	r3, [r4, #12]
 800b630:	f043 0308 	orr.w	r3, r3, #8
 800b634:	81a3      	strh	r3, [r4, #12]
 800b636:	6923      	ldr	r3, [r4, #16]
 800b638:	b94b      	cbnz	r3, 800b64e <__swsetup_r+0x9a>
 800b63a:	89a3      	ldrh	r3, [r4, #12]
 800b63c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b644:	d003      	beq.n	800b64e <__swsetup_r+0x9a>
 800b646:	4621      	mov	r1, r4
 800b648:	4630      	mov	r0, r6
 800b64a:	f001 fc43 	bl	800ced4 <__smakebuf_r>
 800b64e:	89a0      	ldrh	r0, [r4, #12]
 800b650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b654:	f010 0301 	ands.w	r3, r0, #1
 800b658:	d00a      	beq.n	800b670 <__swsetup_r+0xbc>
 800b65a:	2300      	movs	r3, #0
 800b65c:	60a3      	str	r3, [r4, #8]
 800b65e:	6963      	ldr	r3, [r4, #20]
 800b660:	425b      	negs	r3, r3
 800b662:	61a3      	str	r3, [r4, #24]
 800b664:	6923      	ldr	r3, [r4, #16]
 800b666:	b943      	cbnz	r3, 800b67a <__swsetup_r+0xc6>
 800b668:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b66c:	d1ba      	bne.n	800b5e4 <__swsetup_r+0x30>
 800b66e:	bd70      	pop	{r4, r5, r6, pc}
 800b670:	0781      	lsls	r1, r0, #30
 800b672:	bf58      	it	pl
 800b674:	6963      	ldrpl	r3, [r4, #20]
 800b676:	60a3      	str	r3, [r4, #8]
 800b678:	e7f4      	b.n	800b664 <__swsetup_r+0xb0>
 800b67a:	2000      	movs	r0, #0
 800b67c:	e7f7      	b.n	800b66e <__swsetup_r+0xba>
 800b67e:	bf00      	nop
 800b680:	200000c0 	.word	0x200000c0
 800b684:	0800f5dc 	.word	0x0800f5dc
 800b688:	0800f5fc 	.word	0x0800f5fc
 800b68c:	0800f5bc 	.word	0x0800f5bc

0800b690 <__assert_func>:
 800b690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b692:	4614      	mov	r4, r2
 800b694:	461a      	mov	r2, r3
 800b696:	4b09      	ldr	r3, [pc, #36]	; (800b6bc <__assert_func+0x2c>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4605      	mov	r5, r0
 800b69c:	68d8      	ldr	r0, [r3, #12]
 800b69e:	b14c      	cbz	r4, 800b6b4 <__assert_func+0x24>
 800b6a0:	4b07      	ldr	r3, [pc, #28]	; (800b6c0 <__assert_func+0x30>)
 800b6a2:	9100      	str	r1, [sp, #0]
 800b6a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b6a8:	4906      	ldr	r1, [pc, #24]	; (800b6c4 <__assert_func+0x34>)
 800b6aa:	462b      	mov	r3, r5
 800b6ac:	f001 f832 	bl	800c714 <fiprintf>
 800b6b0:	f002 fc29 	bl	800df06 <abort>
 800b6b4:	4b04      	ldr	r3, [pc, #16]	; (800b6c8 <__assert_func+0x38>)
 800b6b6:	461c      	mov	r4, r3
 800b6b8:	e7f3      	b.n	800b6a2 <__assert_func+0x12>
 800b6ba:	bf00      	nop
 800b6bc:	200000c0 	.word	0x200000c0
 800b6c0:	0800f4f0 	.word	0x0800f4f0
 800b6c4:	0800f4fd 	.word	0x0800f4fd
 800b6c8:	0800f52b 	.word	0x0800f52b

0800b6cc <_close_r>:
 800b6cc:	b538      	push	{r3, r4, r5, lr}
 800b6ce:	4d06      	ldr	r5, [pc, #24]	; (800b6e8 <_close_r+0x1c>)
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	4608      	mov	r0, r1
 800b6d6:	602b      	str	r3, [r5, #0]
 800b6d8:	f7f9 fc1b 	bl	8004f12 <_close>
 800b6dc:	1c43      	adds	r3, r0, #1
 800b6de:	d102      	bne.n	800b6e6 <_close_r+0x1a>
 800b6e0:	682b      	ldr	r3, [r5, #0]
 800b6e2:	b103      	cbz	r3, 800b6e6 <_close_r+0x1a>
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	bd38      	pop	{r3, r4, r5, pc}
 800b6e8:	20002e44 	.word	0x20002e44

0800b6ec <quorem>:
 800b6ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f0:	6903      	ldr	r3, [r0, #16]
 800b6f2:	690c      	ldr	r4, [r1, #16]
 800b6f4:	42a3      	cmp	r3, r4
 800b6f6:	4607      	mov	r7, r0
 800b6f8:	f2c0 8081 	blt.w	800b7fe <quorem+0x112>
 800b6fc:	3c01      	subs	r4, #1
 800b6fe:	f101 0814 	add.w	r8, r1, #20
 800b702:	f100 0514 	add.w	r5, r0, #20
 800b706:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b70a:	9301      	str	r3, [sp, #4]
 800b70c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b710:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b714:	3301      	adds	r3, #1
 800b716:	429a      	cmp	r2, r3
 800b718:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b71c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b720:	fbb2 f6f3 	udiv	r6, r2, r3
 800b724:	d331      	bcc.n	800b78a <quorem+0x9e>
 800b726:	f04f 0e00 	mov.w	lr, #0
 800b72a:	4640      	mov	r0, r8
 800b72c:	46ac      	mov	ip, r5
 800b72e:	46f2      	mov	sl, lr
 800b730:	f850 2b04 	ldr.w	r2, [r0], #4
 800b734:	b293      	uxth	r3, r2
 800b736:	fb06 e303 	mla	r3, r6, r3, lr
 800b73a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b73e:	b29b      	uxth	r3, r3
 800b740:	ebaa 0303 	sub.w	r3, sl, r3
 800b744:	f8dc a000 	ldr.w	sl, [ip]
 800b748:	0c12      	lsrs	r2, r2, #16
 800b74a:	fa13 f38a 	uxtah	r3, r3, sl
 800b74e:	fb06 e202 	mla	r2, r6, r2, lr
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	9b00      	ldr	r3, [sp, #0]
 800b756:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b75a:	b292      	uxth	r2, r2
 800b75c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b760:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b764:	f8bd 3000 	ldrh.w	r3, [sp]
 800b768:	4581      	cmp	r9, r0
 800b76a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b76e:	f84c 3b04 	str.w	r3, [ip], #4
 800b772:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b776:	d2db      	bcs.n	800b730 <quorem+0x44>
 800b778:	f855 300b 	ldr.w	r3, [r5, fp]
 800b77c:	b92b      	cbnz	r3, 800b78a <quorem+0x9e>
 800b77e:	9b01      	ldr	r3, [sp, #4]
 800b780:	3b04      	subs	r3, #4
 800b782:	429d      	cmp	r5, r3
 800b784:	461a      	mov	r2, r3
 800b786:	d32e      	bcc.n	800b7e6 <quorem+0xfa>
 800b788:	613c      	str	r4, [r7, #16]
 800b78a:	4638      	mov	r0, r7
 800b78c:	f001 fecc 	bl	800d528 <__mcmp>
 800b790:	2800      	cmp	r0, #0
 800b792:	db24      	blt.n	800b7de <quorem+0xf2>
 800b794:	3601      	adds	r6, #1
 800b796:	4628      	mov	r0, r5
 800b798:	f04f 0c00 	mov.w	ip, #0
 800b79c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b7a0:	f8d0 e000 	ldr.w	lr, [r0]
 800b7a4:	b293      	uxth	r3, r2
 800b7a6:	ebac 0303 	sub.w	r3, ip, r3
 800b7aa:	0c12      	lsrs	r2, r2, #16
 800b7ac:	fa13 f38e 	uxtah	r3, r3, lr
 800b7b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b7b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b7be:	45c1      	cmp	r9, r8
 800b7c0:	f840 3b04 	str.w	r3, [r0], #4
 800b7c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b7c8:	d2e8      	bcs.n	800b79c <quorem+0xb0>
 800b7ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b7ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b7d2:	b922      	cbnz	r2, 800b7de <quorem+0xf2>
 800b7d4:	3b04      	subs	r3, #4
 800b7d6:	429d      	cmp	r5, r3
 800b7d8:	461a      	mov	r2, r3
 800b7da:	d30a      	bcc.n	800b7f2 <quorem+0x106>
 800b7dc:	613c      	str	r4, [r7, #16]
 800b7de:	4630      	mov	r0, r6
 800b7e0:	b003      	add	sp, #12
 800b7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e6:	6812      	ldr	r2, [r2, #0]
 800b7e8:	3b04      	subs	r3, #4
 800b7ea:	2a00      	cmp	r2, #0
 800b7ec:	d1cc      	bne.n	800b788 <quorem+0x9c>
 800b7ee:	3c01      	subs	r4, #1
 800b7f0:	e7c7      	b.n	800b782 <quorem+0x96>
 800b7f2:	6812      	ldr	r2, [r2, #0]
 800b7f4:	3b04      	subs	r3, #4
 800b7f6:	2a00      	cmp	r2, #0
 800b7f8:	d1f0      	bne.n	800b7dc <quorem+0xf0>
 800b7fa:	3c01      	subs	r4, #1
 800b7fc:	e7eb      	b.n	800b7d6 <quorem+0xea>
 800b7fe:	2000      	movs	r0, #0
 800b800:	e7ee      	b.n	800b7e0 <quorem+0xf4>
 800b802:	0000      	movs	r0, r0
 800b804:	0000      	movs	r0, r0
	...

0800b808 <_dtoa_r>:
 800b808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b80c:	ed2d 8b04 	vpush	{d8-d9}
 800b810:	ec57 6b10 	vmov	r6, r7, d0
 800b814:	b093      	sub	sp, #76	; 0x4c
 800b816:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b818:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b81c:	9106      	str	r1, [sp, #24]
 800b81e:	ee10 aa10 	vmov	sl, s0
 800b822:	4604      	mov	r4, r0
 800b824:	9209      	str	r2, [sp, #36]	; 0x24
 800b826:	930c      	str	r3, [sp, #48]	; 0x30
 800b828:	46bb      	mov	fp, r7
 800b82a:	b975      	cbnz	r5, 800b84a <_dtoa_r+0x42>
 800b82c:	2010      	movs	r0, #16
 800b82e:	f7fe f8c1 	bl	80099b4 <malloc>
 800b832:	4602      	mov	r2, r0
 800b834:	6260      	str	r0, [r4, #36]	; 0x24
 800b836:	b920      	cbnz	r0, 800b842 <_dtoa_r+0x3a>
 800b838:	4ba7      	ldr	r3, [pc, #668]	; (800bad8 <_dtoa_r+0x2d0>)
 800b83a:	21ea      	movs	r1, #234	; 0xea
 800b83c:	48a7      	ldr	r0, [pc, #668]	; (800badc <_dtoa_r+0x2d4>)
 800b83e:	f7ff ff27 	bl	800b690 <__assert_func>
 800b842:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b846:	6005      	str	r5, [r0, #0]
 800b848:	60c5      	str	r5, [r0, #12]
 800b84a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b84c:	6819      	ldr	r1, [r3, #0]
 800b84e:	b151      	cbz	r1, 800b866 <_dtoa_r+0x5e>
 800b850:	685a      	ldr	r2, [r3, #4]
 800b852:	604a      	str	r2, [r1, #4]
 800b854:	2301      	movs	r3, #1
 800b856:	4093      	lsls	r3, r2
 800b858:	608b      	str	r3, [r1, #8]
 800b85a:	4620      	mov	r0, r4
 800b85c:	f001 fbd8 	bl	800d010 <_Bfree>
 800b860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b862:	2200      	movs	r2, #0
 800b864:	601a      	str	r2, [r3, #0]
 800b866:	1e3b      	subs	r3, r7, #0
 800b868:	bfaa      	itet	ge
 800b86a:	2300      	movge	r3, #0
 800b86c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b870:	f8c8 3000 	strge.w	r3, [r8]
 800b874:	4b9a      	ldr	r3, [pc, #616]	; (800bae0 <_dtoa_r+0x2d8>)
 800b876:	bfbc      	itt	lt
 800b878:	2201      	movlt	r2, #1
 800b87a:	f8c8 2000 	strlt.w	r2, [r8]
 800b87e:	ea33 030b 	bics.w	r3, r3, fp
 800b882:	d11b      	bne.n	800b8bc <_dtoa_r+0xb4>
 800b884:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b886:	f242 730f 	movw	r3, #9999	; 0x270f
 800b88a:	6013      	str	r3, [r2, #0]
 800b88c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b890:	4333      	orrs	r3, r6
 800b892:	f000 8592 	beq.w	800c3ba <_dtoa_r+0xbb2>
 800b896:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b898:	b963      	cbnz	r3, 800b8b4 <_dtoa_r+0xac>
 800b89a:	4b92      	ldr	r3, [pc, #584]	; (800bae4 <_dtoa_r+0x2dc>)
 800b89c:	e022      	b.n	800b8e4 <_dtoa_r+0xdc>
 800b89e:	4b92      	ldr	r3, [pc, #584]	; (800bae8 <_dtoa_r+0x2e0>)
 800b8a0:	9301      	str	r3, [sp, #4]
 800b8a2:	3308      	adds	r3, #8
 800b8a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b8a6:	6013      	str	r3, [r2, #0]
 800b8a8:	9801      	ldr	r0, [sp, #4]
 800b8aa:	b013      	add	sp, #76	; 0x4c
 800b8ac:	ecbd 8b04 	vpop	{d8-d9}
 800b8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b4:	4b8b      	ldr	r3, [pc, #556]	; (800bae4 <_dtoa_r+0x2dc>)
 800b8b6:	9301      	str	r3, [sp, #4]
 800b8b8:	3303      	adds	r3, #3
 800b8ba:	e7f3      	b.n	800b8a4 <_dtoa_r+0x9c>
 800b8bc:	2200      	movs	r2, #0
 800b8be:	2300      	movs	r3, #0
 800b8c0:	4650      	mov	r0, sl
 800b8c2:	4659      	mov	r1, fp
 800b8c4:	f7f5 f908 	bl	8000ad8 <__aeabi_dcmpeq>
 800b8c8:	ec4b ab19 	vmov	d9, sl, fp
 800b8cc:	4680      	mov	r8, r0
 800b8ce:	b158      	cbz	r0, 800b8e8 <_dtoa_r+0xe0>
 800b8d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	6013      	str	r3, [r2, #0]
 800b8d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	f000 856b 	beq.w	800c3b4 <_dtoa_r+0xbac>
 800b8de:	4883      	ldr	r0, [pc, #524]	; (800baec <_dtoa_r+0x2e4>)
 800b8e0:	6018      	str	r0, [r3, #0]
 800b8e2:	1e43      	subs	r3, r0, #1
 800b8e4:	9301      	str	r3, [sp, #4]
 800b8e6:	e7df      	b.n	800b8a8 <_dtoa_r+0xa0>
 800b8e8:	ec4b ab10 	vmov	d0, sl, fp
 800b8ec:	aa10      	add	r2, sp, #64	; 0x40
 800b8ee:	a911      	add	r1, sp, #68	; 0x44
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	f001 ff3b 	bl	800d76c <__d2b>
 800b8f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b8fa:	ee08 0a10 	vmov	s16, r0
 800b8fe:	2d00      	cmp	r5, #0
 800b900:	f000 8084 	beq.w	800ba0c <_dtoa_r+0x204>
 800b904:	ee19 3a90 	vmov	r3, s19
 800b908:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b90c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b910:	4656      	mov	r6, sl
 800b912:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b916:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b91a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b91e:	4b74      	ldr	r3, [pc, #464]	; (800baf0 <_dtoa_r+0x2e8>)
 800b920:	2200      	movs	r2, #0
 800b922:	4630      	mov	r0, r6
 800b924:	4639      	mov	r1, r7
 800b926:	f7f4 fcb7 	bl	8000298 <__aeabi_dsub>
 800b92a:	a365      	add	r3, pc, #404	; (adr r3, 800bac0 <_dtoa_r+0x2b8>)
 800b92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b930:	f7f4 fe6a 	bl	8000608 <__aeabi_dmul>
 800b934:	a364      	add	r3, pc, #400	; (adr r3, 800bac8 <_dtoa_r+0x2c0>)
 800b936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93a:	f7f4 fcaf 	bl	800029c <__adddf3>
 800b93e:	4606      	mov	r6, r0
 800b940:	4628      	mov	r0, r5
 800b942:	460f      	mov	r7, r1
 800b944:	f7f4 fdf6 	bl	8000534 <__aeabi_i2d>
 800b948:	a361      	add	r3, pc, #388	; (adr r3, 800bad0 <_dtoa_r+0x2c8>)
 800b94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94e:	f7f4 fe5b 	bl	8000608 <__aeabi_dmul>
 800b952:	4602      	mov	r2, r0
 800b954:	460b      	mov	r3, r1
 800b956:	4630      	mov	r0, r6
 800b958:	4639      	mov	r1, r7
 800b95a:	f7f4 fc9f 	bl	800029c <__adddf3>
 800b95e:	4606      	mov	r6, r0
 800b960:	460f      	mov	r7, r1
 800b962:	f7f5 f901 	bl	8000b68 <__aeabi_d2iz>
 800b966:	2200      	movs	r2, #0
 800b968:	9000      	str	r0, [sp, #0]
 800b96a:	2300      	movs	r3, #0
 800b96c:	4630      	mov	r0, r6
 800b96e:	4639      	mov	r1, r7
 800b970:	f7f5 f8bc 	bl	8000aec <__aeabi_dcmplt>
 800b974:	b150      	cbz	r0, 800b98c <_dtoa_r+0x184>
 800b976:	9800      	ldr	r0, [sp, #0]
 800b978:	f7f4 fddc 	bl	8000534 <__aeabi_i2d>
 800b97c:	4632      	mov	r2, r6
 800b97e:	463b      	mov	r3, r7
 800b980:	f7f5 f8aa 	bl	8000ad8 <__aeabi_dcmpeq>
 800b984:	b910      	cbnz	r0, 800b98c <_dtoa_r+0x184>
 800b986:	9b00      	ldr	r3, [sp, #0]
 800b988:	3b01      	subs	r3, #1
 800b98a:	9300      	str	r3, [sp, #0]
 800b98c:	9b00      	ldr	r3, [sp, #0]
 800b98e:	2b16      	cmp	r3, #22
 800b990:	d85a      	bhi.n	800ba48 <_dtoa_r+0x240>
 800b992:	9a00      	ldr	r2, [sp, #0]
 800b994:	4b57      	ldr	r3, [pc, #348]	; (800baf4 <_dtoa_r+0x2ec>)
 800b996:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99e:	ec51 0b19 	vmov	r0, r1, d9
 800b9a2:	f7f5 f8a3 	bl	8000aec <__aeabi_dcmplt>
 800b9a6:	2800      	cmp	r0, #0
 800b9a8:	d050      	beq.n	800ba4c <_dtoa_r+0x244>
 800b9aa:	9b00      	ldr	r3, [sp, #0]
 800b9ac:	3b01      	subs	r3, #1
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9b6:	1b5d      	subs	r5, r3, r5
 800b9b8:	1e6b      	subs	r3, r5, #1
 800b9ba:	9305      	str	r3, [sp, #20]
 800b9bc:	bf45      	ittet	mi
 800b9be:	f1c5 0301 	rsbmi	r3, r5, #1
 800b9c2:	9304      	strmi	r3, [sp, #16]
 800b9c4:	2300      	movpl	r3, #0
 800b9c6:	2300      	movmi	r3, #0
 800b9c8:	bf4c      	ite	mi
 800b9ca:	9305      	strmi	r3, [sp, #20]
 800b9cc:	9304      	strpl	r3, [sp, #16]
 800b9ce:	9b00      	ldr	r3, [sp, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	db3d      	blt.n	800ba50 <_dtoa_r+0x248>
 800b9d4:	9b05      	ldr	r3, [sp, #20]
 800b9d6:	9a00      	ldr	r2, [sp, #0]
 800b9d8:	920a      	str	r2, [sp, #40]	; 0x28
 800b9da:	4413      	add	r3, r2
 800b9dc:	9305      	str	r3, [sp, #20]
 800b9de:	2300      	movs	r3, #0
 800b9e0:	9307      	str	r3, [sp, #28]
 800b9e2:	9b06      	ldr	r3, [sp, #24]
 800b9e4:	2b09      	cmp	r3, #9
 800b9e6:	f200 8089 	bhi.w	800bafc <_dtoa_r+0x2f4>
 800b9ea:	2b05      	cmp	r3, #5
 800b9ec:	bfc4      	itt	gt
 800b9ee:	3b04      	subgt	r3, #4
 800b9f0:	9306      	strgt	r3, [sp, #24]
 800b9f2:	9b06      	ldr	r3, [sp, #24]
 800b9f4:	f1a3 0302 	sub.w	r3, r3, #2
 800b9f8:	bfcc      	ite	gt
 800b9fa:	2500      	movgt	r5, #0
 800b9fc:	2501      	movle	r5, #1
 800b9fe:	2b03      	cmp	r3, #3
 800ba00:	f200 8087 	bhi.w	800bb12 <_dtoa_r+0x30a>
 800ba04:	e8df f003 	tbb	[pc, r3]
 800ba08:	59383a2d 	.word	0x59383a2d
 800ba0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ba10:	441d      	add	r5, r3
 800ba12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ba16:	2b20      	cmp	r3, #32
 800ba18:	bfc1      	itttt	gt
 800ba1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ba1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ba22:	fa0b f303 	lslgt.w	r3, fp, r3
 800ba26:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ba2a:	bfda      	itte	le
 800ba2c:	f1c3 0320 	rsble	r3, r3, #32
 800ba30:	fa06 f003 	lslle.w	r0, r6, r3
 800ba34:	4318      	orrgt	r0, r3
 800ba36:	f7f4 fd6d 	bl	8000514 <__aeabi_ui2d>
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	4606      	mov	r6, r0
 800ba3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ba42:	3d01      	subs	r5, #1
 800ba44:	930e      	str	r3, [sp, #56]	; 0x38
 800ba46:	e76a      	b.n	800b91e <_dtoa_r+0x116>
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e7b2      	b.n	800b9b2 <_dtoa_r+0x1aa>
 800ba4c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ba4e:	e7b1      	b.n	800b9b4 <_dtoa_r+0x1ac>
 800ba50:	9b04      	ldr	r3, [sp, #16]
 800ba52:	9a00      	ldr	r2, [sp, #0]
 800ba54:	1a9b      	subs	r3, r3, r2
 800ba56:	9304      	str	r3, [sp, #16]
 800ba58:	4253      	negs	r3, r2
 800ba5a:	9307      	str	r3, [sp, #28]
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	930a      	str	r3, [sp, #40]	; 0x28
 800ba60:	e7bf      	b.n	800b9e2 <_dtoa_r+0x1da>
 800ba62:	2300      	movs	r3, #0
 800ba64:	9308      	str	r3, [sp, #32]
 800ba66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	dc55      	bgt.n	800bb18 <_dtoa_r+0x310>
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ba72:	461a      	mov	r2, r3
 800ba74:	9209      	str	r2, [sp, #36]	; 0x24
 800ba76:	e00c      	b.n	800ba92 <_dtoa_r+0x28a>
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e7f3      	b.n	800ba64 <_dtoa_r+0x25c>
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba80:	9308      	str	r3, [sp, #32]
 800ba82:	9b00      	ldr	r3, [sp, #0]
 800ba84:	4413      	add	r3, r2
 800ba86:	9302      	str	r3, [sp, #8]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	9303      	str	r3, [sp, #12]
 800ba8e:	bfb8      	it	lt
 800ba90:	2301      	movlt	r3, #1
 800ba92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ba94:	2200      	movs	r2, #0
 800ba96:	6042      	str	r2, [r0, #4]
 800ba98:	2204      	movs	r2, #4
 800ba9a:	f102 0614 	add.w	r6, r2, #20
 800ba9e:	429e      	cmp	r6, r3
 800baa0:	6841      	ldr	r1, [r0, #4]
 800baa2:	d93d      	bls.n	800bb20 <_dtoa_r+0x318>
 800baa4:	4620      	mov	r0, r4
 800baa6:	f001 fa73 	bl	800cf90 <_Balloc>
 800baaa:	9001      	str	r0, [sp, #4]
 800baac:	2800      	cmp	r0, #0
 800baae:	d13b      	bne.n	800bb28 <_dtoa_r+0x320>
 800bab0:	4b11      	ldr	r3, [pc, #68]	; (800baf8 <_dtoa_r+0x2f0>)
 800bab2:	4602      	mov	r2, r0
 800bab4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bab8:	e6c0      	b.n	800b83c <_dtoa_r+0x34>
 800baba:	2301      	movs	r3, #1
 800babc:	e7df      	b.n	800ba7e <_dtoa_r+0x276>
 800babe:	bf00      	nop
 800bac0:	636f4361 	.word	0x636f4361
 800bac4:	3fd287a7 	.word	0x3fd287a7
 800bac8:	8b60c8b3 	.word	0x8b60c8b3
 800bacc:	3fc68a28 	.word	0x3fc68a28
 800bad0:	509f79fb 	.word	0x509f79fb
 800bad4:	3fd34413 	.word	0x3fd34413
 800bad8:	0800f539 	.word	0x0800f539
 800badc:	0800f550 	.word	0x0800f550
 800bae0:	7ff00000 	.word	0x7ff00000
 800bae4:	0800f535 	.word	0x0800f535
 800bae8:	0800f52c 	.word	0x0800f52c
 800baec:	0800f479 	.word	0x0800f479
 800baf0:	3ff80000 	.word	0x3ff80000
 800baf4:	0800f720 	.word	0x0800f720
 800baf8:	0800f5ab 	.word	0x0800f5ab
 800bafc:	2501      	movs	r5, #1
 800bafe:	2300      	movs	r3, #0
 800bb00:	9306      	str	r3, [sp, #24]
 800bb02:	9508      	str	r5, [sp, #32]
 800bb04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	2312      	movs	r3, #18
 800bb10:	e7b0      	b.n	800ba74 <_dtoa_r+0x26c>
 800bb12:	2301      	movs	r3, #1
 800bb14:	9308      	str	r3, [sp, #32]
 800bb16:	e7f5      	b.n	800bb04 <_dtoa_r+0x2fc>
 800bb18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bb1e:	e7b8      	b.n	800ba92 <_dtoa_r+0x28a>
 800bb20:	3101      	adds	r1, #1
 800bb22:	6041      	str	r1, [r0, #4]
 800bb24:	0052      	lsls	r2, r2, #1
 800bb26:	e7b8      	b.n	800ba9a <_dtoa_r+0x292>
 800bb28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb2a:	9a01      	ldr	r2, [sp, #4]
 800bb2c:	601a      	str	r2, [r3, #0]
 800bb2e:	9b03      	ldr	r3, [sp, #12]
 800bb30:	2b0e      	cmp	r3, #14
 800bb32:	f200 809d 	bhi.w	800bc70 <_dtoa_r+0x468>
 800bb36:	2d00      	cmp	r5, #0
 800bb38:	f000 809a 	beq.w	800bc70 <_dtoa_r+0x468>
 800bb3c:	9b00      	ldr	r3, [sp, #0]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	dd32      	ble.n	800bba8 <_dtoa_r+0x3a0>
 800bb42:	4ab7      	ldr	r2, [pc, #732]	; (800be20 <_dtoa_r+0x618>)
 800bb44:	f003 030f 	and.w	r3, r3, #15
 800bb48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bb4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb50:	9b00      	ldr	r3, [sp, #0]
 800bb52:	05d8      	lsls	r0, r3, #23
 800bb54:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bb58:	d516      	bpl.n	800bb88 <_dtoa_r+0x380>
 800bb5a:	4bb2      	ldr	r3, [pc, #712]	; (800be24 <_dtoa_r+0x61c>)
 800bb5c:	ec51 0b19 	vmov	r0, r1, d9
 800bb60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb64:	f7f4 fe7a 	bl	800085c <__aeabi_ddiv>
 800bb68:	f007 070f 	and.w	r7, r7, #15
 800bb6c:	4682      	mov	sl, r0
 800bb6e:	468b      	mov	fp, r1
 800bb70:	2503      	movs	r5, #3
 800bb72:	4eac      	ldr	r6, [pc, #688]	; (800be24 <_dtoa_r+0x61c>)
 800bb74:	b957      	cbnz	r7, 800bb8c <_dtoa_r+0x384>
 800bb76:	4642      	mov	r2, r8
 800bb78:	464b      	mov	r3, r9
 800bb7a:	4650      	mov	r0, sl
 800bb7c:	4659      	mov	r1, fp
 800bb7e:	f7f4 fe6d 	bl	800085c <__aeabi_ddiv>
 800bb82:	4682      	mov	sl, r0
 800bb84:	468b      	mov	fp, r1
 800bb86:	e028      	b.n	800bbda <_dtoa_r+0x3d2>
 800bb88:	2502      	movs	r5, #2
 800bb8a:	e7f2      	b.n	800bb72 <_dtoa_r+0x36a>
 800bb8c:	07f9      	lsls	r1, r7, #31
 800bb8e:	d508      	bpl.n	800bba2 <_dtoa_r+0x39a>
 800bb90:	4640      	mov	r0, r8
 800bb92:	4649      	mov	r1, r9
 800bb94:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bb98:	f7f4 fd36 	bl	8000608 <__aeabi_dmul>
 800bb9c:	3501      	adds	r5, #1
 800bb9e:	4680      	mov	r8, r0
 800bba0:	4689      	mov	r9, r1
 800bba2:	107f      	asrs	r7, r7, #1
 800bba4:	3608      	adds	r6, #8
 800bba6:	e7e5      	b.n	800bb74 <_dtoa_r+0x36c>
 800bba8:	f000 809b 	beq.w	800bce2 <_dtoa_r+0x4da>
 800bbac:	9b00      	ldr	r3, [sp, #0]
 800bbae:	4f9d      	ldr	r7, [pc, #628]	; (800be24 <_dtoa_r+0x61c>)
 800bbb0:	425e      	negs	r6, r3
 800bbb2:	4b9b      	ldr	r3, [pc, #620]	; (800be20 <_dtoa_r+0x618>)
 800bbb4:	f006 020f 	and.w	r2, r6, #15
 800bbb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc0:	ec51 0b19 	vmov	r0, r1, d9
 800bbc4:	f7f4 fd20 	bl	8000608 <__aeabi_dmul>
 800bbc8:	1136      	asrs	r6, r6, #4
 800bbca:	4682      	mov	sl, r0
 800bbcc:	468b      	mov	fp, r1
 800bbce:	2300      	movs	r3, #0
 800bbd0:	2502      	movs	r5, #2
 800bbd2:	2e00      	cmp	r6, #0
 800bbd4:	d17a      	bne.n	800bccc <_dtoa_r+0x4c4>
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d1d3      	bne.n	800bb82 <_dtoa_r+0x37a>
 800bbda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	f000 8082 	beq.w	800bce6 <_dtoa_r+0x4de>
 800bbe2:	4b91      	ldr	r3, [pc, #580]	; (800be28 <_dtoa_r+0x620>)
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	4650      	mov	r0, sl
 800bbe8:	4659      	mov	r1, fp
 800bbea:	f7f4 ff7f 	bl	8000aec <__aeabi_dcmplt>
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	d079      	beq.n	800bce6 <_dtoa_r+0x4de>
 800bbf2:	9b03      	ldr	r3, [sp, #12]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d076      	beq.n	800bce6 <_dtoa_r+0x4de>
 800bbf8:	9b02      	ldr	r3, [sp, #8]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	dd36      	ble.n	800bc6c <_dtoa_r+0x464>
 800bbfe:	9b00      	ldr	r3, [sp, #0]
 800bc00:	4650      	mov	r0, sl
 800bc02:	4659      	mov	r1, fp
 800bc04:	1e5f      	subs	r7, r3, #1
 800bc06:	2200      	movs	r2, #0
 800bc08:	4b88      	ldr	r3, [pc, #544]	; (800be2c <_dtoa_r+0x624>)
 800bc0a:	f7f4 fcfd 	bl	8000608 <__aeabi_dmul>
 800bc0e:	9e02      	ldr	r6, [sp, #8]
 800bc10:	4682      	mov	sl, r0
 800bc12:	468b      	mov	fp, r1
 800bc14:	3501      	adds	r5, #1
 800bc16:	4628      	mov	r0, r5
 800bc18:	f7f4 fc8c 	bl	8000534 <__aeabi_i2d>
 800bc1c:	4652      	mov	r2, sl
 800bc1e:	465b      	mov	r3, fp
 800bc20:	f7f4 fcf2 	bl	8000608 <__aeabi_dmul>
 800bc24:	4b82      	ldr	r3, [pc, #520]	; (800be30 <_dtoa_r+0x628>)
 800bc26:	2200      	movs	r2, #0
 800bc28:	f7f4 fb38 	bl	800029c <__adddf3>
 800bc2c:	46d0      	mov	r8, sl
 800bc2e:	46d9      	mov	r9, fp
 800bc30:	4682      	mov	sl, r0
 800bc32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bc36:	2e00      	cmp	r6, #0
 800bc38:	d158      	bne.n	800bcec <_dtoa_r+0x4e4>
 800bc3a:	4b7e      	ldr	r3, [pc, #504]	; (800be34 <_dtoa_r+0x62c>)
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	4640      	mov	r0, r8
 800bc40:	4649      	mov	r1, r9
 800bc42:	f7f4 fb29 	bl	8000298 <__aeabi_dsub>
 800bc46:	4652      	mov	r2, sl
 800bc48:	465b      	mov	r3, fp
 800bc4a:	4680      	mov	r8, r0
 800bc4c:	4689      	mov	r9, r1
 800bc4e:	f7f4 ff6b 	bl	8000b28 <__aeabi_dcmpgt>
 800bc52:	2800      	cmp	r0, #0
 800bc54:	f040 8295 	bne.w	800c182 <_dtoa_r+0x97a>
 800bc58:	4652      	mov	r2, sl
 800bc5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bc5e:	4640      	mov	r0, r8
 800bc60:	4649      	mov	r1, r9
 800bc62:	f7f4 ff43 	bl	8000aec <__aeabi_dcmplt>
 800bc66:	2800      	cmp	r0, #0
 800bc68:	f040 8289 	bne.w	800c17e <_dtoa_r+0x976>
 800bc6c:	ec5b ab19 	vmov	sl, fp, d9
 800bc70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	f2c0 8148 	blt.w	800bf08 <_dtoa_r+0x700>
 800bc78:	9a00      	ldr	r2, [sp, #0]
 800bc7a:	2a0e      	cmp	r2, #14
 800bc7c:	f300 8144 	bgt.w	800bf08 <_dtoa_r+0x700>
 800bc80:	4b67      	ldr	r3, [pc, #412]	; (800be20 <_dtoa_r+0x618>)
 800bc82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc86:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	f280 80d5 	bge.w	800be3c <_dtoa_r+0x634>
 800bc92:	9b03      	ldr	r3, [sp, #12]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f300 80d1 	bgt.w	800be3c <_dtoa_r+0x634>
 800bc9a:	f040 826f 	bne.w	800c17c <_dtoa_r+0x974>
 800bc9e:	4b65      	ldr	r3, [pc, #404]	; (800be34 <_dtoa_r+0x62c>)
 800bca0:	2200      	movs	r2, #0
 800bca2:	4640      	mov	r0, r8
 800bca4:	4649      	mov	r1, r9
 800bca6:	f7f4 fcaf 	bl	8000608 <__aeabi_dmul>
 800bcaa:	4652      	mov	r2, sl
 800bcac:	465b      	mov	r3, fp
 800bcae:	f7f4 ff31 	bl	8000b14 <__aeabi_dcmpge>
 800bcb2:	9e03      	ldr	r6, [sp, #12]
 800bcb4:	4637      	mov	r7, r6
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	f040 8245 	bne.w	800c146 <_dtoa_r+0x93e>
 800bcbc:	9d01      	ldr	r5, [sp, #4]
 800bcbe:	2331      	movs	r3, #49	; 0x31
 800bcc0:	f805 3b01 	strb.w	r3, [r5], #1
 800bcc4:	9b00      	ldr	r3, [sp, #0]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	9300      	str	r3, [sp, #0]
 800bcca:	e240      	b.n	800c14e <_dtoa_r+0x946>
 800bccc:	07f2      	lsls	r2, r6, #31
 800bcce:	d505      	bpl.n	800bcdc <_dtoa_r+0x4d4>
 800bcd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcd4:	f7f4 fc98 	bl	8000608 <__aeabi_dmul>
 800bcd8:	3501      	adds	r5, #1
 800bcda:	2301      	movs	r3, #1
 800bcdc:	1076      	asrs	r6, r6, #1
 800bcde:	3708      	adds	r7, #8
 800bce0:	e777      	b.n	800bbd2 <_dtoa_r+0x3ca>
 800bce2:	2502      	movs	r5, #2
 800bce4:	e779      	b.n	800bbda <_dtoa_r+0x3d2>
 800bce6:	9f00      	ldr	r7, [sp, #0]
 800bce8:	9e03      	ldr	r6, [sp, #12]
 800bcea:	e794      	b.n	800bc16 <_dtoa_r+0x40e>
 800bcec:	9901      	ldr	r1, [sp, #4]
 800bcee:	4b4c      	ldr	r3, [pc, #304]	; (800be20 <_dtoa_r+0x618>)
 800bcf0:	4431      	add	r1, r6
 800bcf2:	910d      	str	r1, [sp, #52]	; 0x34
 800bcf4:	9908      	ldr	r1, [sp, #32]
 800bcf6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bcfa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bcfe:	2900      	cmp	r1, #0
 800bd00:	d043      	beq.n	800bd8a <_dtoa_r+0x582>
 800bd02:	494d      	ldr	r1, [pc, #308]	; (800be38 <_dtoa_r+0x630>)
 800bd04:	2000      	movs	r0, #0
 800bd06:	f7f4 fda9 	bl	800085c <__aeabi_ddiv>
 800bd0a:	4652      	mov	r2, sl
 800bd0c:	465b      	mov	r3, fp
 800bd0e:	f7f4 fac3 	bl	8000298 <__aeabi_dsub>
 800bd12:	9d01      	ldr	r5, [sp, #4]
 800bd14:	4682      	mov	sl, r0
 800bd16:	468b      	mov	fp, r1
 800bd18:	4649      	mov	r1, r9
 800bd1a:	4640      	mov	r0, r8
 800bd1c:	f7f4 ff24 	bl	8000b68 <__aeabi_d2iz>
 800bd20:	4606      	mov	r6, r0
 800bd22:	f7f4 fc07 	bl	8000534 <__aeabi_i2d>
 800bd26:	4602      	mov	r2, r0
 800bd28:	460b      	mov	r3, r1
 800bd2a:	4640      	mov	r0, r8
 800bd2c:	4649      	mov	r1, r9
 800bd2e:	f7f4 fab3 	bl	8000298 <__aeabi_dsub>
 800bd32:	3630      	adds	r6, #48	; 0x30
 800bd34:	f805 6b01 	strb.w	r6, [r5], #1
 800bd38:	4652      	mov	r2, sl
 800bd3a:	465b      	mov	r3, fp
 800bd3c:	4680      	mov	r8, r0
 800bd3e:	4689      	mov	r9, r1
 800bd40:	f7f4 fed4 	bl	8000aec <__aeabi_dcmplt>
 800bd44:	2800      	cmp	r0, #0
 800bd46:	d163      	bne.n	800be10 <_dtoa_r+0x608>
 800bd48:	4642      	mov	r2, r8
 800bd4a:	464b      	mov	r3, r9
 800bd4c:	4936      	ldr	r1, [pc, #216]	; (800be28 <_dtoa_r+0x620>)
 800bd4e:	2000      	movs	r0, #0
 800bd50:	f7f4 faa2 	bl	8000298 <__aeabi_dsub>
 800bd54:	4652      	mov	r2, sl
 800bd56:	465b      	mov	r3, fp
 800bd58:	f7f4 fec8 	bl	8000aec <__aeabi_dcmplt>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	f040 80b5 	bne.w	800becc <_dtoa_r+0x6c4>
 800bd62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd64:	429d      	cmp	r5, r3
 800bd66:	d081      	beq.n	800bc6c <_dtoa_r+0x464>
 800bd68:	4b30      	ldr	r3, [pc, #192]	; (800be2c <_dtoa_r+0x624>)
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	4650      	mov	r0, sl
 800bd6e:	4659      	mov	r1, fp
 800bd70:	f7f4 fc4a 	bl	8000608 <__aeabi_dmul>
 800bd74:	4b2d      	ldr	r3, [pc, #180]	; (800be2c <_dtoa_r+0x624>)
 800bd76:	4682      	mov	sl, r0
 800bd78:	468b      	mov	fp, r1
 800bd7a:	4640      	mov	r0, r8
 800bd7c:	4649      	mov	r1, r9
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f7f4 fc42 	bl	8000608 <__aeabi_dmul>
 800bd84:	4680      	mov	r8, r0
 800bd86:	4689      	mov	r9, r1
 800bd88:	e7c6      	b.n	800bd18 <_dtoa_r+0x510>
 800bd8a:	4650      	mov	r0, sl
 800bd8c:	4659      	mov	r1, fp
 800bd8e:	f7f4 fc3b 	bl	8000608 <__aeabi_dmul>
 800bd92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd94:	9d01      	ldr	r5, [sp, #4]
 800bd96:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd98:	4682      	mov	sl, r0
 800bd9a:	468b      	mov	fp, r1
 800bd9c:	4649      	mov	r1, r9
 800bd9e:	4640      	mov	r0, r8
 800bda0:	f7f4 fee2 	bl	8000b68 <__aeabi_d2iz>
 800bda4:	4606      	mov	r6, r0
 800bda6:	f7f4 fbc5 	bl	8000534 <__aeabi_i2d>
 800bdaa:	3630      	adds	r6, #48	; 0x30
 800bdac:	4602      	mov	r2, r0
 800bdae:	460b      	mov	r3, r1
 800bdb0:	4640      	mov	r0, r8
 800bdb2:	4649      	mov	r1, r9
 800bdb4:	f7f4 fa70 	bl	8000298 <__aeabi_dsub>
 800bdb8:	f805 6b01 	strb.w	r6, [r5], #1
 800bdbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdbe:	429d      	cmp	r5, r3
 800bdc0:	4680      	mov	r8, r0
 800bdc2:	4689      	mov	r9, r1
 800bdc4:	f04f 0200 	mov.w	r2, #0
 800bdc8:	d124      	bne.n	800be14 <_dtoa_r+0x60c>
 800bdca:	4b1b      	ldr	r3, [pc, #108]	; (800be38 <_dtoa_r+0x630>)
 800bdcc:	4650      	mov	r0, sl
 800bdce:	4659      	mov	r1, fp
 800bdd0:	f7f4 fa64 	bl	800029c <__adddf3>
 800bdd4:	4602      	mov	r2, r0
 800bdd6:	460b      	mov	r3, r1
 800bdd8:	4640      	mov	r0, r8
 800bdda:	4649      	mov	r1, r9
 800bddc:	f7f4 fea4 	bl	8000b28 <__aeabi_dcmpgt>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	d173      	bne.n	800becc <_dtoa_r+0x6c4>
 800bde4:	4652      	mov	r2, sl
 800bde6:	465b      	mov	r3, fp
 800bde8:	4913      	ldr	r1, [pc, #76]	; (800be38 <_dtoa_r+0x630>)
 800bdea:	2000      	movs	r0, #0
 800bdec:	f7f4 fa54 	bl	8000298 <__aeabi_dsub>
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	460b      	mov	r3, r1
 800bdf4:	4640      	mov	r0, r8
 800bdf6:	4649      	mov	r1, r9
 800bdf8:	f7f4 fe78 	bl	8000aec <__aeabi_dcmplt>
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	f43f af35 	beq.w	800bc6c <_dtoa_r+0x464>
 800be02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800be04:	1e6b      	subs	r3, r5, #1
 800be06:	930f      	str	r3, [sp, #60]	; 0x3c
 800be08:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800be0c:	2b30      	cmp	r3, #48	; 0x30
 800be0e:	d0f8      	beq.n	800be02 <_dtoa_r+0x5fa>
 800be10:	9700      	str	r7, [sp, #0]
 800be12:	e049      	b.n	800bea8 <_dtoa_r+0x6a0>
 800be14:	4b05      	ldr	r3, [pc, #20]	; (800be2c <_dtoa_r+0x624>)
 800be16:	f7f4 fbf7 	bl	8000608 <__aeabi_dmul>
 800be1a:	4680      	mov	r8, r0
 800be1c:	4689      	mov	r9, r1
 800be1e:	e7bd      	b.n	800bd9c <_dtoa_r+0x594>
 800be20:	0800f720 	.word	0x0800f720
 800be24:	0800f6f8 	.word	0x0800f6f8
 800be28:	3ff00000 	.word	0x3ff00000
 800be2c:	40240000 	.word	0x40240000
 800be30:	401c0000 	.word	0x401c0000
 800be34:	40140000 	.word	0x40140000
 800be38:	3fe00000 	.word	0x3fe00000
 800be3c:	9d01      	ldr	r5, [sp, #4]
 800be3e:	4656      	mov	r6, sl
 800be40:	465f      	mov	r7, fp
 800be42:	4642      	mov	r2, r8
 800be44:	464b      	mov	r3, r9
 800be46:	4630      	mov	r0, r6
 800be48:	4639      	mov	r1, r7
 800be4a:	f7f4 fd07 	bl	800085c <__aeabi_ddiv>
 800be4e:	f7f4 fe8b 	bl	8000b68 <__aeabi_d2iz>
 800be52:	4682      	mov	sl, r0
 800be54:	f7f4 fb6e 	bl	8000534 <__aeabi_i2d>
 800be58:	4642      	mov	r2, r8
 800be5a:	464b      	mov	r3, r9
 800be5c:	f7f4 fbd4 	bl	8000608 <__aeabi_dmul>
 800be60:	4602      	mov	r2, r0
 800be62:	460b      	mov	r3, r1
 800be64:	4630      	mov	r0, r6
 800be66:	4639      	mov	r1, r7
 800be68:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800be6c:	f7f4 fa14 	bl	8000298 <__aeabi_dsub>
 800be70:	f805 6b01 	strb.w	r6, [r5], #1
 800be74:	9e01      	ldr	r6, [sp, #4]
 800be76:	9f03      	ldr	r7, [sp, #12]
 800be78:	1bae      	subs	r6, r5, r6
 800be7a:	42b7      	cmp	r7, r6
 800be7c:	4602      	mov	r2, r0
 800be7e:	460b      	mov	r3, r1
 800be80:	d135      	bne.n	800beee <_dtoa_r+0x6e6>
 800be82:	f7f4 fa0b 	bl	800029c <__adddf3>
 800be86:	4642      	mov	r2, r8
 800be88:	464b      	mov	r3, r9
 800be8a:	4606      	mov	r6, r0
 800be8c:	460f      	mov	r7, r1
 800be8e:	f7f4 fe4b 	bl	8000b28 <__aeabi_dcmpgt>
 800be92:	b9d0      	cbnz	r0, 800beca <_dtoa_r+0x6c2>
 800be94:	4642      	mov	r2, r8
 800be96:	464b      	mov	r3, r9
 800be98:	4630      	mov	r0, r6
 800be9a:	4639      	mov	r1, r7
 800be9c:	f7f4 fe1c 	bl	8000ad8 <__aeabi_dcmpeq>
 800bea0:	b110      	cbz	r0, 800bea8 <_dtoa_r+0x6a0>
 800bea2:	f01a 0f01 	tst.w	sl, #1
 800bea6:	d110      	bne.n	800beca <_dtoa_r+0x6c2>
 800bea8:	4620      	mov	r0, r4
 800beaa:	ee18 1a10 	vmov	r1, s16
 800beae:	f001 f8af 	bl	800d010 <_Bfree>
 800beb2:	2300      	movs	r3, #0
 800beb4:	9800      	ldr	r0, [sp, #0]
 800beb6:	702b      	strb	r3, [r5, #0]
 800beb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800beba:	3001      	adds	r0, #1
 800bebc:	6018      	str	r0, [r3, #0]
 800bebe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	f43f acf1 	beq.w	800b8a8 <_dtoa_r+0xa0>
 800bec6:	601d      	str	r5, [r3, #0]
 800bec8:	e4ee      	b.n	800b8a8 <_dtoa_r+0xa0>
 800beca:	9f00      	ldr	r7, [sp, #0]
 800becc:	462b      	mov	r3, r5
 800bece:	461d      	mov	r5, r3
 800bed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bed4:	2a39      	cmp	r2, #57	; 0x39
 800bed6:	d106      	bne.n	800bee6 <_dtoa_r+0x6de>
 800bed8:	9a01      	ldr	r2, [sp, #4]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d1f7      	bne.n	800bece <_dtoa_r+0x6c6>
 800bede:	9901      	ldr	r1, [sp, #4]
 800bee0:	2230      	movs	r2, #48	; 0x30
 800bee2:	3701      	adds	r7, #1
 800bee4:	700a      	strb	r2, [r1, #0]
 800bee6:	781a      	ldrb	r2, [r3, #0]
 800bee8:	3201      	adds	r2, #1
 800beea:	701a      	strb	r2, [r3, #0]
 800beec:	e790      	b.n	800be10 <_dtoa_r+0x608>
 800beee:	4ba6      	ldr	r3, [pc, #664]	; (800c188 <_dtoa_r+0x980>)
 800bef0:	2200      	movs	r2, #0
 800bef2:	f7f4 fb89 	bl	8000608 <__aeabi_dmul>
 800bef6:	2200      	movs	r2, #0
 800bef8:	2300      	movs	r3, #0
 800befa:	4606      	mov	r6, r0
 800befc:	460f      	mov	r7, r1
 800befe:	f7f4 fdeb 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf02:	2800      	cmp	r0, #0
 800bf04:	d09d      	beq.n	800be42 <_dtoa_r+0x63a>
 800bf06:	e7cf      	b.n	800bea8 <_dtoa_r+0x6a0>
 800bf08:	9a08      	ldr	r2, [sp, #32]
 800bf0a:	2a00      	cmp	r2, #0
 800bf0c:	f000 80d7 	beq.w	800c0be <_dtoa_r+0x8b6>
 800bf10:	9a06      	ldr	r2, [sp, #24]
 800bf12:	2a01      	cmp	r2, #1
 800bf14:	f300 80ba 	bgt.w	800c08c <_dtoa_r+0x884>
 800bf18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf1a:	2a00      	cmp	r2, #0
 800bf1c:	f000 80b2 	beq.w	800c084 <_dtoa_r+0x87c>
 800bf20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bf24:	9e07      	ldr	r6, [sp, #28]
 800bf26:	9d04      	ldr	r5, [sp, #16]
 800bf28:	9a04      	ldr	r2, [sp, #16]
 800bf2a:	441a      	add	r2, r3
 800bf2c:	9204      	str	r2, [sp, #16]
 800bf2e:	9a05      	ldr	r2, [sp, #20]
 800bf30:	2101      	movs	r1, #1
 800bf32:	441a      	add	r2, r3
 800bf34:	4620      	mov	r0, r4
 800bf36:	9205      	str	r2, [sp, #20]
 800bf38:	f001 f96c 	bl	800d214 <__i2b>
 800bf3c:	4607      	mov	r7, r0
 800bf3e:	2d00      	cmp	r5, #0
 800bf40:	dd0c      	ble.n	800bf5c <_dtoa_r+0x754>
 800bf42:	9b05      	ldr	r3, [sp, #20]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	dd09      	ble.n	800bf5c <_dtoa_r+0x754>
 800bf48:	42ab      	cmp	r3, r5
 800bf4a:	9a04      	ldr	r2, [sp, #16]
 800bf4c:	bfa8      	it	ge
 800bf4e:	462b      	movge	r3, r5
 800bf50:	1ad2      	subs	r2, r2, r3
 800bf52:	9204      	str	r2, [sp, #16]
 800bf54:	9a05      	ldr	r2, [sp, #20]
 800bf56:	1aed      	subs	r5, r5, r3
 800bf58:	1ad3      	subs	r3, r2, r3
 800bf5a:	9305      	str	r3, [sp, #20]
 800bf5c:	9b07      	ldr	r3, [sp, #28]
 800bf5e:	b31b      	cbz	r3, 800bfa8 <_dtoa_r+0x7a0>
 800bf60:	9b08      	ldr	r3, [sp, #32]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	f000 80af 	beq.w	800c0c6 <_dtoa_r+0x8be>
 800bf68:	2e00      	cmp	r6, #0
 800bf6a:	dd13      	ble.n	800bf94 <_dtoa_r+0x78c>
 800bf6c:	4639      	mov	r1, r7
 800bf6e:	4632      	mov	r2, r6
 800bf70:	4620      	mov	r0, r4
 800bf72:	f001 fa0f 	bl	800d394 <__pow5mult>
 800bf76:	ee18 2a10 	vmov	r2, s16
 800bf7a:	4601      	mov	r1, r0
 800bf7c:	4607      	mov	r7, r0
 800bf7e:	4620      	mov	r0, r4
 800bf80:	f001 f95e 	bl	800d240 <__multiply>
 800bf84:	ee18 1a10 	vmov	r1, s16
 800bf88:	4680      	mov	r8, r0
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	f001 f840 	bl	800d010 <_Bfree>
 800bf90:	ee08 8a10 	vmov	s16, r8
 800bf94:	9b07      	ldr	r3, [sp, #28]
 800bf96:	1b9a      	subs	r2, r3, r6
 800bf98:	d006      	beq.n	800bfa8 <_dtoa_r+0x7a0>
 800bf9a:	ee18 1a10 	vmov	r1, s16
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	f001 f9f8 	bl	800d394 <__pow5mult>
 800bfa4:	ee08 0a10 	vmov	s16, r0
 800bfa8:	2101      	movs	r1, #1
 800bfaa:	4620      	mov	r0, r4
 800bfac:	f001 f932 	bl	800d214 <__i2b>
 800bfb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	4606      	mov	r6, r0
 800bfb6:	f340 8088 	ble.w	800c0ca <_dtoa_r+0x8c2>
 800bfba:	461a      	mov	r2, r3
 800bfbc:	4601      	mov	r1, r0
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f001 f9e8 	bl	800d394 <__pow5mult>
 800bfc4:	9b06      	ldr	r3, [sp, #24]
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	4606      	mov	r6, r0
 800bfca:	f340 8081 	ble.w	800c0d0 <_dtoa_r+0x8c8>
 800bfce:	f04f 0800 	mov.w	r8, #0
 800bfd2:	6933      	ldr	r3, [r6, #16]
 800bfd4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bfd8:	6918      	ldr	r0, [r3, #16]
 800bfda:	f001 f8cb 	bl	800d174 <__hi0bits>
 800bfde:	f1c0 0020 	rsb	r0, r0, #32
 800bfe2:	9b05      	ldr	r3, [sp, #20]
 800bfe4:	4418      	add	r0, r3
 800bfe6:	f010 001f 	ands.w	r0, r0, #31
 800bfea:	f000 8092 	beq.w	800c112 <_dtoa_r+0x90a>
 800bfee:	f1c0 0320 	rsb	r3, r0, #32
 800bff2:	2b04      	cmp	r3, #4
 800bff4:	f340 808a 	ble.w	800c10c <_dtoa_r+0x904>
 800bff8:	f1c0 001c 	rsb	r0, r0, #28
 800bffc:	9b04      	ldr	r3, [sp, #16]
 800bffe:	4403      	add	r3, r0
 800c000:	9304      	str	r3, [sp, #16]
 800c002:	9b05      	ldr	r3, [sp, #20]
 800c004:	4403      	add	r3, r0
 800c006:	4405      	add	r5, r0
 800c008:	9305      	str	r3, [sp, #20]
 800c00a:	9b04      	ldr	r3, [sp, #16]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	dd07      	ble.n	800c020 <_dtoa_r+0x818>
 800c010:	ee18 1a10 	vmov	r1, s16
 800c014:	461a      	mov	r2, r3
 800c016:	4620      	mov	r0, r4
 800c018:	f001 fa16 	bl	800d448 <__lshift>
 800c01c:	ee08 0a10 	vmov	s16, r0
 800c020:	9b05      	ldr	r3, [sp, #20]
 800c022:	2b00      	cmp	r3, #0
 800c024:	dd05      	ble.n	800c032 <_dtoa_r+0x82a>
 800c026:	4631      	mov	r1, r6
 800c028:	461a      	mov	r2, r3
 800c02a:	4620      	mov	r0, r4
 800c02c:	f001 fa0c 	bl	800d448 <__lshift>
 800c030:	4606      	mov	r6, r0
 800c032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c034:	2b00      	cmp	r3, #0
 800c036:	d06e      	beq.n	800c116 <_dtoa_r+0x90e>
 800c038:	ee18 0a10 	vmov	r0, s16
 800c03c:	4631      	mov	r1, r6
 800c03e:	f001 fa73 	bl	800d528 <__mcmp>
 800c042:	2800      	cmp	r0, #0
 800c044:	da67      	bge.n	800c116 <_dtoa_r+0x90e>
 800c046:	9b00      	ldr	r3, [sp, #0]
 800c048:	3b01      	subs	r3, #1
 800c04a:	ee18 1a10 	vmov	r1, s16
 800c04e:	9300      	str	r3, [sp, #0]
 800c050:	220a      	movs	r2, #10
 800c052:	2300      	movs	r3, #0
 800c054:	4620      	mov	r0, r4
 800c056:	f000 fffd 	bl	800d054 <__multadd>
 800c05a:	9b08      	ldr	r3, [sp, #32]
 800c05c:	ee08 0a10 	vmov	s16, r0
 800c060:	2b00      	cmp	r3, #0
 800c062:	f000 81b1 	beq.w	800c3c8 <_dtoa_r+0xbc0>
 800c066:	2300      	movs	r3, #0
 800c068:	4639      	mov	r1, r7
 800c06a:	220a      	movs	r2, #10
 800c06c:	4620      	mov	r0, r4
 800c06e:	f000 fff1 	bl	800d054 <__multadd>
 800c072:	9b02      	ldr	r3, [sp, #8]
 800c074:	2b00      	cmp	r3, #0
 800c076:	4607      	mov	r7, r0
 800c078:	f300 808e 	bgt.w	800c198 <_dtoa_r+0x990>
 800c07c:	9b06      	ldr	r3, [sp, #24]
 800c07e:	2b02      	cmp	r3, #2
 800c080:	dc51      	bgt.n	800c126 <_dtoa_r+0x91e>
 800c082:	e089      	b.n	800c198 <_dtoa_r+0x990>
 800c084:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c086:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c08a:	e74b      	b.n	800bf24 <_dtoa_r+0x71c>
 800c08c:	9b03      	ldr	r3, [sp, #12]
 800c08e:	1e5e      	subs	r6, r3, #1
 800c090:	9b07      	ldr	r3, [sp, #28]
 800c092:	42b3      	cmp	r3, r6
 800c094:	bfbf      	itttt	lt
 800c096:	9b07      	ldrlt	r3, [sp, #28]
 800c098:	9607      	strlt	r6, [sp, #28]
 800c09a:	1af2      	sublt	r2, r6, r3
 800c09c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c09e:	bfb6      	itet	lt
 800c0a0:	189b      	addlt	r3, r3, r2
 800c0a2:	1b9e      	subge	r6, r3, r6
 800c0a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c0a6:	9b03      	ldr	r3, [sp, #12]
 800c0a8:	bfb8      	it	lt
 800c0aa:	2600      	movlt	r6, #0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	bfb7      	itett	lt
 800c0b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c0b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c0b8:	1a9d      	sublt	r5, r3, r2
 800c0ba:	2300      	movlt	r3, #0
 800c0bc:	e734      	b.n	800bf28 <_dtoa_r+0x720>
 800c0be:	9e07      	ldr	r6, [sp, #28]
 800c0c0:	9d04      	ldr	r5, [sp, #16]
 800c0c2:	9f08      	ldr	r7, [sp, #32]
 800c0c4:	e73b      	b.n	800bf3e <_dtoa_r+0x736>
 800c0c6:	9a07      	ldr	r2, [sp, #28]
 800c0c8:	e767      	b.n	800bf9a <_dtoa_r+0x792>
 800c0ca:	9b06      	ldr	r3, [sp, #24]
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	dc18      	bgt.n	800c102 <_dtoa_r+0x8fa>
 800c0d0:	f1ba 0f00 	cmp.w	sl, #0
 800c0d4:	d115      	bne.n	800c102 <_dtoa_r+0x8fa>
 800c0d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0da:	b993      	cbnz	r3, 800c102 <_dtoa_r+0x8fa>
 800c0dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c0e0:	0d1b      	lsrs	r3, r3, #20
 800c0e2:	051b      	lsls	r3, r3, #20
 800c0e4:	b183      	cbz	r3, 800c108 <_dtoa_r+0x900>
 800c0e6:	9b04      	ldr	r3, [sp, #16]
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	9304      	str	r3, [sp, #16]
 800c0ec:	9b05      	ldr	r3, [sp, #20]
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	9305      	str	r3, [sp, #20]
 800c0f2:	f04f 0801 	mov.w	r8, #1
 800c0f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	f47f af6a 	bne.w	800bfd2 <_dtoa_r+0x7ca>
 800c0fe:	2001      	movs	r0, #1
 800c100:	e76f      	b.n	800bfe2 <_dtoa_r+0x7da>
 800c102:	f04f 0800 	mov.w	r8, #0
 800c106:	e7f6      	b.n	800c0f6 <_dtoa_r+0x8ee>
 800c108:	4698      	mov	r8, r3
 800c10a:	e7f4      	b.n	800c0f6 <_dtoa_r+0x8ee>
 800c10c:	f43f af7d 	beq.w	800c00a <_dtoa_r+0x802>
 800c110:	4618      	mov	r0, r3
 800c112:	301c      	adds	r0, #28
 800c114:	e772      	b.n	800bffc <_dtoa_r+0x7f4>
 800c116:	9b03      	ldr	r3, [sp, #12]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	dc37      	bgt.n	800c18c <_dtoa_r+0x984>
 800c11c:	9b06      	ldr	r3, [sp, #24]
 800c11e:	2b02      	cmp	r3, #2
 800c120:	dd34      	ble.n	800c18c <_dtoa_r+0x984>
 800c122:	9b03      	ldr	r3, [sp, #12]
 800c124:	9302      	str	r3, [sp, #8]
 800c126:	9b02      	ldr	r3, [sp, #8]
 800c128:	b96b      	cbnz	r3, 800c146 <_dtoa_r+0x93e>
 800c12a:	4631      	mov	r1, r6
 800c12c:	2205      	movs	r2, #5
 800c12e:	4620      	mov	r0, r4
 800c130:	f000 ff90 	bl	800d054 <__multadd>
 800c134:	4601      	mov	r1, r0
 800c136:	4606      	mov	r6, r0
 800c138:	ee18 0a10 	vmov	r0, s16
 800c13c:	f001 f9f4 	bl	800d528 <__mcmp>
 800c140:	2800      	cmp	r0, #0
 800c142:	f73f adbb 	bgt.w	800bcbc <_dtoa_r+0x4b4>
 800c146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c148:	9d01      	ldr	r5, [sp, #4]
 800c14a:	43db      	mvns	r3, r3
 800c14c:	9300      	str	r3, [sp, #0]
 800c14e:	f04f 0800 	mov.w	r8, #0
 800c152:	4631      	mov	r1, r6
 800c154:	4620      	mov	r0, r4
 800c156:	f000 ff5b 	bl	800d010 <_Bfree>
 800c15a:	2f00      	cmp	r7, #0
 800c15c:	f43f aea4 	beq.w	800bea8 <_dtoa_r+0x6a0>
 800c160:	f1b8 0f00 	cmp.w	r8, #0
 800c164:	d005      	beq.n	800c172 <_dtoa_r+0x96a>
 800c166:	45b8      	cmp	r8, r7
 800c168:	d003      	beq.n	800c172 <_dtoa_r+0x96a>
 800c16a:	4641      	mov	r1, r8
 800c16c:	4620      	mov	r0, r4
 800c16e:	f000 ff4f 	bl	800d010 <_Bfree>
 800c172:	4639      	mov	r1, r7
 800c174:	4620      	mov	r0, r4
 800c176:	f000 ff4b 	bl	800d010 <_Bfree>
 800c17a:	e695      	b.n	800bea8 <_dtoa_r+0x6a0>
 800c17c:	2600      	movs	r6, #0
 800c17e:	4637      	mov	r7, r6
 800c180:	e7e1      	b.n	800c146 <_dtoa_r+0x93e>
 800c182:	9700      	str	r7, [sp, #0]
 800c184:	4637      	mov	r7, r6
 800c186:	e599      	b.n	800bcbc <_dtoa_r+0x4b4>
 800c188:	40240000 	.word	0x40240000
 800c18c:	9b08      	ldr	r3, [sp, #32]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	f000 80ca 	beq.w	800c328 <_dtoa_r+0xb20>
 800c194:	9b03      	ldr	r3, [sp, #12]
 800c196:	9302      	str	r3, [sp, #8]
 800c198:	2d00      	cmp	r5, #0
 800c19a:	dd05      	ble.n	800c1a8 <_dtoa_r+0x9a0>
 800c19c:	4639      	mov	r1, r7
 800c19e:	462a      	mov	r2, r5
 800c1a0:	4620      	mov	r0, r4
 800c1a2:	f001 f951 	bl	800d448 <__lshift>
 800c1a6:	4607      	mov	r7, r0
 800c1a8:	f1b8 0f00 	cmp.w	r8, #0
 800c1ac:	d05b      	beq.n	800c266 <_dtoa_r+0xa5e>
 800c1ae:	6879      	ldr	r1, [r7, #4]
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f000 feed 	bl	800cf90 <_Balloc>
 800c1b6:	4605      	mov	r5, r0
 800c1b8:	b928      	cbnz	r0, 800c1c6 <_dtoa_r+0x9be>
 800c1ba:	4b87      	ldr	r3, [pc, #540]	; (800c3d8 <_dtoa_r+0xbd0>)
 800c1bc:	4602      	mov	r2, r0
 800c1be:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c1c2:	f7ff bb3b 	b.w	800b83c <_dtoa_r+0x34>
 800c1c6:	693a      	ldr	r2, [r7, #16]
 800c1c8:	3202      	adds	r2, #2
 800c1ca:	0092      	lsls	r2, r2, #2
 800c1cc:	f107 010c 	add.w	r1, r7, #12
 800c1d0:	300c      	adds	r0, #12
 800c1d2:	f7fd fbf7 	bl	80099c4 <memcpy>
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	4629      	mov	r1, r5
 800c1da:	4620      	mov	r0, r4
 800c1dc:	f001 f934 	bl	800d448 <__lshift>
 800c1e0:	9b01      	ldr	r3, [sp, #4]
 800c1e2:	f103 0901 	add.w	r9, r3, #1
 800c1e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c1ea:	4413      	add	r3, r2
 800c1ec:	9305      	str	r3, [sp, #20]
 800c1ee:	f00a 0301 	and.w	r3, sl, #1
 800c1f2:	46b8      	mov	r8, r7
 800c1f4:	9304      	str	r3, [sp, #16]
 800c1f6:	4607      	mov	r7, r0
 800c1f8:	4631      	mov	r1, r6
 800c1fa:	ee18 0a10 	vmov	r0, s16
 800c1fe:	f7ff fa75 	bl	800b6ec <quorem>
 800c202:	4641      	mov	r1, r8
 800c204:	9002      	str	r0, [sp, #8]
 800c206:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c20a:	ee18 0a10 	vmov	r0, s16
 800c20e:	f001 f98b 	bl	800d528 <__mcmp>
 800c212:	463a      	mov	r2, r7
 800c214:	9003      	str	r0, [sp, #12]
 800c216:	4631      	mov	r1, r6
 800c218:	4620      	mov	r0, r4
 800c21a:	f001 f9a1 	bl	800d560 <__mdiff>
 800c21e:	68c2      	ldr	r2, [r0, #12]
 800c220:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800c224:	4605      	mov	r5, r0
 800c226:	bb02      	cbnz	r2, 800c26a <_dtoa_r+0xa62>
 800c228:	4601      	mov	r1, r0
 800c22a:	ee18 0a10 	vmov	r0, s16
 800c22e:	f001 f97b 	bl	800d528 <__mcmp>
 800c232:	4602      	mov	r2, r0
 800c234:	4629      	mov	r1, r5
 800c236:	4620      	mov	r0, r4
 800c238:	9207      	str	r2, [sp, #28]
 800c23a:	f000 fee9 	bl	800d010 <_Bfree>
 800c23e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c242:	ea43 0102 	orr.w	r1, r3, r2
 800c246:	9b04      	ldr	r3, [sp, #16]
 800c248:	430b      	orrs	r3, r1
 800c24a:	464d      	mov	r5, r9
 800c24c:	d10f      	bne.n	800c26e <_dtoa_r+0xa66>
 800c24e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c252:	d02a      	beq.n	800c2aa <_dtoa_r+0xaa2>
 800c254:	9b03      	ldr	r3, [sp, #12]
 800c256:	2b00      	cmp	r3, #0
 800c258:	dd02      	ble.n	800c260 <_dtoa_r+0xa58>
 800c25a:	9b02      	ldr	r3, [sp, #8]
 800c25c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c260:	f88b a000 	strb.w	sl, [fp]
 800c264:	e775      	b.n	800c152 <_dtoa_r+0x94a>
 800c266:	4638      	mov	r0, r7
 800c268:	e7ba      	b.n	800c1e0 <_dtoa_r+0x9d8>
 800c26a:	2201      	movs	r2, #1
 800c26c:	e7e2      	b.n	800c234 <_dtoa_r+0xa2c>
 800c26e:	9b03      	ldr	r3, [sp, #12]
 800c270:	2b00      	cmp	r3, #0
 800c272:	db04      	blt.n	800c27e <_dtoa_r+0xa76>
 800c274:	9906      	ldr	r1, [sp, #24]
 800c276:	430b      	orrs	r3, r1
 800c278:	9904      	ldr	r1, [sp, #16]
 800c27a:	430b      	orrs	r3, r1
 800c27c:	d122      	bne.n	800c2c4 <_dtoa_r+0xabc>
 800c27e:	2a00      	cmp	r2, #0
 800c280:	ddee      	ble.n	800c260 <_dtoa_r+0xa58>
 800c282:	ee18 1a10 	vmov	r1, s16
 800c286:	2201      	movs	r2, #1
 800c288:	4620      	mov	r0, r4
 800c28a:	f001 f8dd 	bl	800d448 <__lshift>
 800c28e:	4631      	mov	r1, r6
 800c290:	ee08 0a10 	vmov	s16, r0
 800c294:	f001 f948 	bl	800d528 <__mcmp>
 800c298:	2800      	cmp	r0, #0
 800c29a:	dc03      	bgt.n	800c2a4 <_dtoa_r+0xa9c>
 800c29c:	d1e0      	bne.n	800c260 <_dtoa_r+0xa58>
 800c29e:	f01a 0f01 	tst.w	sl, #1
 800c2a2:	d0dd      	beq.n	800c260 <_dtoa_r+0xa58>
 800c2a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c2a8:	d1d7      	bne.n	800c25a <_dtoa_r+0xa52>
 800c2aa:	2339      	movs	r3, #57	; 0x39
 800c2ac:	f88b 3000 	strb.w	r3, [fp]
 800c2b0:	462b      	mov	r3, r5
 800c2b2:	461d      	mov	r5, r3
 800c2b4:	3b01      	subs	r3, #1
 800c2b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c2ba:	2a39      	cmp	r2, #57	; 0x39
 800c2bc:	d071      	beq.n	800c3a2 <_dtoa_r+0xb9a>
 800c2be:	3201      	adds	r2, #1
 800c2c0:	701a      	strb	r2, [r3, #0]
 800c2c2:	e746      	b.n	800c152 <_dtoa_r+0x94a>
 800c2c4:	2a00      	cmp	r2, #0
 800c2c6:	dd07      	ble.n	800c2d8 <_dtoa_r+0xad0>
 800c2c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c2cc:	d0ed      	beq.n	800c2aa <_dtoa_r+0xaa2>
 800c2ce:	f10a 0301 	add.w	r3, sl, #1
 800c2d2:	f88b 3000 	strb.w	r3, [fp]
 800c2d6:	e73c      	b.n	800c152 <_dtoa_r+0x94a>
 800c2d8:	9b05      	ldr	r3, [sp, #20]
 800c2da:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c2de:	4599      	cmp	r9, r3
 800c2e0:	d047      	beq.n	800c372 <_dtoa_r+0xb6a>
 800c2e2:	ee18 1a10 	vmov	r1, s16
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	220a      	movs	r2, #10
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	f000 feb2 	bl	800d054 <__multadd>
 800c2f0:	45b8      	cmp	r8, r7
 800c2f2:	ee08 0a10 	vmov	s16, r0
 800c2f6:	f04f 0300 	mov.w	r3, #0
 800c2fa:	f04f 020a 	mov.w	r2, #10
 800c2fe:	4641      	mov	r1, r8
 800c300:	4620      	mov	r0, r4
 800c302:	d106      	bne.n	800c312 <_dtoa_r+0xb0a>
 800c304:	f000 fea6 	bl	800d054 <__multadd>
 800c308:	4680      	mov	r8, r0
 800c30a:	4607      	mov	r7, r0
 800c30c:	f109 0901 	add.w	r9, r9, #1
 800c310:	e772      	b.n	800c1f8 <_dtoa_r+0x9f0>
 800c312:	f000 fe9f 	bl	800d054 <__multadd>
 800c316:	4639      	mov	r1, r7
 800c318:	4680      	mov	r8, r0
 800c31a:	2300      	movs	r3, #0
 800c31c:	220a      	movs	r2, #10
 800c31e:	4620      	mov	r0, r4
 800c320:	f000 fe98 	bl	800d054 <__multadd>
 800c324:	4607      	mov	r7, r0
 800c326:	e7f1      	b.n	800c30c <_dtoa_r+0xb04>
 800c328:	9b03      	ldr	r3, [sp, #12]
 800c32a:	9302      	str	r3, [sp, #8]
 800c32c:	9d01      	ldr	r5, [sp, #4]
 800c32e:	ee18 0a10 	vmov	r0, s16
 800c332:	4631      	mov	r1, r6
 800c334:	f7ff f9da 	bl	800b6ec <quorem>
 800c338:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c33c:	9b01      	ldr	r3, [sp, #4]
 800c33e:	f805 ab01 	strb.w	sl, [r5], #1
 800c342:	1aea      	subs	r2, r5, r3
 800c344:	9b02      	ldr	r3, [sp, #8]
 800c346:	4293      	cmp	r3, r2
 800c348:	dd09      	ble.n	800c35e <_dtoa_r+0xb56>
 800c34a:	ee18 1a10 	vmov	r1, s16
 800c34e:	2300      	movs	r3, #0
 800c350:	220a      	movs	r2, #10
 800c352:	4620      	mov	r0, r4
 800c354:	f000 fe7e 	bl	800d054 <__multadd>
 800c358:	ee08 0a10 	vmov	s16, r0
 800c35c:	e7e7      	b.n	800c32e <_dtoa_r+0xb26>
 800c35e:	9b02      	ldr	r3, [sp, #8]
 800c360:	2b00      	cmp	r3, #0
 800c362:	bfc8      	it	gt
 800c364:	461d      	movgt	r5, r3
 800c366:	9b01      	ldr	r3, [sp, #4]
 800c368:	bfd8      	it	le
 800c36a:	2501      	movle	r5, #1
 800c36c:	441d      	add	r5, r3
 800c36e:	f04f 0800 	mov.w	r8, #0
 800c372:	ee18 1a10 	vmov	r1, s16
 800c376:	2201      	movs	r2, #1
 800c378:	4620      	mov	r0, r4
 800c37a:	f001 f865 	bl	800d448 <__lshift>
 800c37e:	4631      	mov	r1, r6
 800c380:	ee08 0a10 	vmov	s16, r0
 800c384:	f001 f8d0 	bl	800d528 <__mcmp>
 800c388:	2800      	cmp	r0, #0
 800c38a:	dc91      	bgt.n	800c2b0 <_dtoa_r+0xaa8>
 800c38c:	d102      	bne.n	800c394 <_dtoa_r+0xb8c>
 800c38e:	f01a 0f01 	tst.w	sl, #1
 800c392:	d18d      	bne.n	800c2b0 <_dtoa_r+0xaa8>
 800c394:	462b      	mov	r3, r5
 800c396:	461d      	mov	r5, r3
 800c398:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c39c:	2a30      	cmp	r2, #48	; 0x30
 800c39e:	d0fa      	beq.n	800c396 <_dtoa_r+0xb8e>
 800c3a0:	e6d7      	b.n	800c152 <_dtoa_r+0x94a>
 800c3a2:	9a01      	ldr	r2, [sp, #4]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d184      	bne.n	800c2b2 <_dtoa_r+0xaaa>
 800c3a8:	9b00      	ldr	r3, [sp, #0]
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	9300      	str	r3, [sp, #0]
 800c3ae:	2331      	movs	r3, #49	; 0x31
 800c3b0:	7013      	strb	r3, [r2, #0]
 800c3b2:	e6ce      	b.n	800c152 <_dtoa_r+0x94a>
 800c3b4:	4b09      	ldr	r3, [pc, #36]	; (800c3dc <_dtoa_r+0xbd4>)
 800c3b6:	f7ff ba95 	b.w	800b8e4 <_dtoa_r+0xdc>
 800c3ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f47f aa6e 	bne.w	800b89e <_dtoa_r+0x96>
 800c3c2:	4b07      	ldr	r3, [pc, #28]	; (800c3e0 <_dtoa_r+0xbd8>)
 800c3c4:	f7ff ba8e 	b.w	800b8e4 <_dtoa_r+0xdc>
 800c3c8:	9b02      	ldr	r3, [sp, #8]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	dcae      	bgt.n	800c32c <_dtoa_r+0xb24>
 800c3ce:	9b06      	ldr	r3, [sp, #24]
 800c3d0:	2b02      	cmp	r3, #2
 800c3d2:	f73f aea8 	bgt.w	800c126 <_dtoa_r+0x91e>
 800c3d6:	e7a9      	b.n	800c32c <_dtoa_r+0xb24>
 800c3d8:	0800f5ab 	.word	0x0800f5ab
 800c3dc:	0800f478 	.word	0x0800f478
 800c3e0:	0800f52c 	.word	0x0800f52c

0800c3e4 <__sflush_r>:
 800c3e4:	898a      	ldrh	r2, [r1, #12]
 800c3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ea:	4605      	mov	r5, r0
 800c3ec:	0710      	lsls	r0, r2, #28
 800c3ee:	460c      	mov	r4, r1
 800c3f0:	d458      	bmi.n	800c4a4 <__sflush_r+0xc0>
 800c3f2:	684b      	ldr	r3, [r1, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	dc05      	bgt.n	800c404 <__sflush_r+0x20>
 800c3f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	dc02      	bgt.n	800c404 <__sflush_r+0x20>
 800c3fe:	2000      	movs	r0, #0
 800c400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c404:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c406:	2e00      	cmp	r6, #0
 800c408:	d0f9      	beq.n	800c3fe <__sflush_r+0x1a>
 800c40a:	2300      	movs	r3, #0
 800c40c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c410:	682f      	ldr	r7, [r5, #0]
 800c412:	602b      	str	r3, [r5, #0]
 800c414:	d032      	beq.n	800c47c <__sflush_r+0x98>
 800c416:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c418:	89a3      	ldrh	r3, [r4, #12]
 800c41a:	075a      	lsls	r2, r3, #29
 800c41c:	d505      	bpl.n	800c42a <__sflush_r+0x46>
 800c41e:	6863      	ldr	r3, [r4, #4]
 800c420:	1ac0      	subs	r0, r0, r3
 800c422:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c424:	b10b      	cbz	r3, 800c42a <__sflush_r+0x46>
 800c426:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c428:	1ac0      	subs	r0, r0, r3
 800c42a:	2300      	movs	r3, #0
 800c42c:	4602      	mov	r2, r0
 800c42e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c430:	6a21      	ldr	r1, [r4, #32]
 800c432:	4628      	mov	r0, r5
 800c434:	47b0      	blx	r6
 800c436:	1c43      	adds	r3, r0, #1
 800c438:	89a3      	ldrh	r3, [r4, #12]
 800c43a:	d106      	bne.n	800c44a <__sflush_r+0x66>
 800c43c:	6829      	ldr	r1, [r5, #0]
 800c43e:	291d      	cmp	r1, #29
 800c440:	d82c      	bhi.n	800c49c <__sflush_r+0xb8>
 800c442:	4a2a      	ldr	r2, [pc, #168]	; (800c4ec <__sflush_r+0x108>)
 800c444:	40ca      	lsrs	r2, r1
 800c446:	07d6      	lsls	r6, r2, #31
 800c448:	d528      	bpl.n	800c49c <__sflush_r+0xb8>
 800c44a:	2200      	movs	r2, #0
 800c44c:	6062      	str	r2, [r4, #4]
 800c44e:	04d9      	lsls	r1, r3, #19
 800c450:	6922      	ldr	r2, [r4, #16]
 800c452:	6022      	str	r2, [r4, #0]
 800c454:	d504      	bpl.n	800c460 <__sflush_r+0x7c>
 800c456:	1c42      	adds	r2, r0, #1
 800c458:	d101      	bne.n	800c45e <__sflush_r+0x7a>
 800c45a:	682b      	ldr	r3, [r5, #0]
 800c45c:	b903      	cbnz	r3, 800c460 <__sflush_r+0x7c>
 800c45e:	6560      	str	r0, [r4, #84]	; 0x54
 800c460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c462:	602f      	str	r7, [r5, #0]
 800c464:	2900      	cmp	r1, #0
 800c466:	d0ca      	beq.n	800c3fe <__sflush_r+0x1a>
 800c468:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c46c:	4299      	cmp	r1, r3
 800c46e:	d002      	beq.n	800c476 <__sflush_r+0x92>
 800c470:	4628      	mov	r0, r5
 800c472:	f7fd fabd 	bl	80099f0 <_free_r>
 800c476:	2000      	movs	r0, #0
 800c478:	6360      	str	r0, [r4, #52]	; 0x34
 800c47a:	e7c1      	b.n	800c400 <__sflush_r+0x1c>
 800c47c:	6a21      	ldr	r1, [r4, #32]
 800c47e:	2301      	movs	r3, #1
 800c480:	4628      	mov	r0, r5
 800c482:	47b0      	blx	r6
 800c484:	1c41      	adds	r1, r0, #1
 800c486:	d1c7      	bne.n	800c418 <__sflush_r+0x34>
 800c488:	682b      	ldr	r3, [r5, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d0c4      	beq.n	800c418 <__sflush_r+0x34>
 800c48e:	2b1d      	cmp	r3, #29
 800c490:	d001      	beq.n	800c496 <__sflush_r+0xb2>
 800c492:	2b16      	cmp	r3, #22
 800c494:	d101      	bne.n	800c49a <__sflush_r+0xb6>
 800c496:	602f      	str	r7, [r5, #0]
 800c498:	e7b1      	b.n	800c3fe <__sflush_r+0x1a>
 800c49a:	89a3      	ldrh	r3, [r4, #12]
 800c49c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4a0:	81a3      	strh	r3, [r4, #12]
 800c4a2:	e7ad      	b.n	800c400 <__sflush_r+0x1c>
 800c4a4:	690f      	ldr	r7, [r1, #16]
 800c4a6:	2f00      	cmp	r7, #0
 800c4a8:	d0a9      	beq.n	800c3fe <__sflush_r+0x1a>
 800c4aa:	0793      	lsls	r3, r2, #30
 800c4ac:	680e      	ldr	r6, [r1, #0]
 800c4ae:	bf08      	it	eq
 800c4b0:	694b      	ldreq	r3, [r1, #20]
 800c4b2:	600f      	str	r7, [r1, #0]
 800c4b4:	bf18      	it	ne
 800c4b6:	2300      	movne	r3, #0
 800c4b8:	eba6 0807 	sub.w	r8, r6, r7
 800c4bc:	608b      	str	r3, [r1, #8]
 800c4be:	f1b8 0f00 	cmp.w	r8, #0
 800c4c2:	dd9c      	ble.n	800c3fe <__sflush_r+0x1a>
 800c4c4:	6a21      	ldr	r1, [r4, #32]
 800c4c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c4c8:	4643      	mov	r3, r8
 800c4ca:	463a      	mov	r2, r7
 800c4cc:	4628      	mov	r0, r5
 800c4ce:	47b0      	blx	r6
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	dc06      	bgt.n	800c4e2 <__sflush_r+0xfe>
 800c4d4:	89a3      	ldrh	r3, [r4, #12]
 800c4d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4da:	81a3      	strh	r3, [r4, #12]
 800c4dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4e0:	e78e      	b.n	800c400 <__sflush_r+0x1c>
 800c4e2:	4407      	add	r7, r0
 800c4e4:	eba8 0800 	sub.w	r8, r8, r0
 800c4e8:	e7e9      	b.n	800c4be <__sflush_r+0xda>
 800c4ea:	bf00      	nop
 800c4ec:	20400001 	.word	0x20400001

0800c4f0 <_fflush_r>:
 800c4f0:	b538      	push	{r3, r4, r5, lr}
 800c4f2:	690b      	ldr	r3, [r1, #16]
 800c4f4:	4605      	mov	r5, r0
 800c4f6:	460c      	mov	r4, r1
 800c4f8:	b913      	cbnz	r3, 800c500 <_fflush_r+0x10>
 800c4fa:	2500      	movs	r5, #0
 800c4fc:	4628      	mov	r0, r5
 800c4fe:	bd38      	pop	{r3, r4, r5, pc}
 800c500:	b118      	cbz	r0, 800c50a <_fflush_r+0x1a>
 800c502:	6983      	ldr	r3, [r0, #24]
 800c504:	b90b      	cbnz	r3, 800c50a <_fflush_r+0x1a>
 800c506:	f000 f887 	bl	800c618 <__sinit>
 800c50a:	4b14      	ldr	r3, [pc, #80]	; (800c55c <_fflush_r+0x6c>)
 800c50c:	429c      	cmp	r4, r3
 800c50e:	d11b      	bne.n	800c548 <_fflush_r+0x58>
 800c510:	686c      	ldr	r4, [r5, #4]
 800c512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d0ef      	beq.n	800c4fa <_fflush_r+0xa>
 800c51a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c51c:	07d0      	lsls	r0, r2, #31
 800c51e:	d404      	bmi.n	800c52a <_fflush_r+0x3a>
 800c520:	0599      	lsls	r1, r3, #22
 800c522:	d402      	bmi.n	800c52a <_fflush_r+0x3a>
 800c524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c526:	f000 fc9a 	bl	800ce5e <__retarget_lock_acquire_recursive>
 800c52a:	4628      	mov	r0, r5
 800c52c:	4621      	mov	r1, r4
 800c52e:	f7ff ff59 	bl	800c3e4 <__sflush_r>
 800c532:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c534:	07da      	lsls	r2, r3, #31
 800c536:	4605      	mov	r5, r0
 800c538:	d4e0      	bmi.n	800c4fc <_fflush_r+0xc>
 800c53a:	89a3      	ldrh	r3, [r4, #12]
 800c53c:	059b      	lsls	r3, r3, #22
 800c53e:	d4dd      	bmi.n	800c4fc <_fflush_r+0xc>
 800c540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c542:	f000 fc8d 	bl	800ce60 <__retarget_lock_release_recursive>
 800c546:	e7d9      	b.n	800c4fc <_fflush_r+0xc>
 800c548:	4b05      	ldr	r3, [pc, #20]	; (800c560 <_fflush_r+0x70>)
 800c54a:	429c      	cmp	r4, r3
 800c54c:	d101      	bne.n	800c552 <_fflush_r+0x62>
 800c54e:	68ac      	ldr	r4, [r5, #8]
 800c550:	e7df      	b.n	800c512 <_fflush_r+0x22>
 800c552:	4b04      	ldr	r3, [pc, #16]	; (800c564 <_fflush_r+0x74>)
 800c554:	429c      	cmp	r4, r3
 800c556:	bf08      	it	eq
 800c558:	68ec      	ldreq	r4, [r5, #12]
 800c55a:	e7da      	b.n	800c512 <_fflush_r+0x22>
 800c55c:	0800f5dc 	.word	0x0800f5dc
 800c560:	0800f5fc 	.word	0x0800f5fc
 800c564:	0800f5bc 	.word	0x0800f5bc

0800c568 <std>:
 800c568:	2300      	movs	r3, #0
 800c56a:	b510      	push	{r4, lr}
 800c56c:	4604      	mov	r4, r0
 800c56e:	e9c0 3300 	strd	r3, r3, [r0]
 800c572:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c576:	6083      	str	r3, [r0, #8]
 800c578:	8181      	strh	r1, [r0, #12]
 800c57a:	6643      	str	r3, [r0, #100]	; 0x64
 800c57c:	81c2      	strh	r2, [r0, #14]
 800c57e:	6183      	str	r3, [r0, #24]
 800c580:	4619      	mov	r1, r3
 800c582:	2208      	movs	r2, #8
 800c584:	305c      	adds	r0, #92	; 0x5c
 800c586:	f7fd fa2b 	bl	80099e0 <memset>
 800c58a:	4b05      	ldr	r3, [pc, #20]	; (800c5a0 <std+0x38>)
 800c58c:	6263      	str	r3, [r4, #36]	; 0x24
 800c58e:	4b05      	ldr	r3, [pc, #20]	; (800c5a4 <std+0x3c>)
 800c590:	62a3      	str	r3, [r4, #40]	; 0x28
 800c592:	4b05      	ldr	r3, [pc, #20]	; (800c5a8 <std+0x40>)
 800c594:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c596:	4b05      	ldr	r3, [pc, #20]	; (800c5ac <std+0x44>)
 800c598:	6224      	str	r4, [r4, #32]
 800c59a:	6323      	str	r3, [r4, #48]	; 0x30
 800c59c:	bd10      	pop	{r4, pc}
 800c59e:	bf00      	nop
 800c5a0:	0800a4e5 	.word	0x0800a4e5
 800c5a4:	0800a507 	.word	0x0800a507
 800c5a8:	0800a53f 	.word	0x0800a53f
 800c5ac:	0800a563 	.word	0x0800a563

0800c5b0 <_cleanup_r>:
 800c5b0:	4901      	ldr	r1, [pc, #4]	; (800c5b8 <_cleanup_r+0x8>)
 800c5b2:	f000 b8c1 	b.w	800c738 <_fwalk_reent>
 800c5b6:	bf00      	nop
 800c5b8:	0800c4f1 	.word	0x0800c4f1

0800c5bc <__sfmoreglue>:
 800c5bc:	b570      	push	{r4, r5, r6, lr}
 800c5be:	2268      	movs	r2, #104	; 0x68
 800c5c0:	1e4d      	subs	r5, r1, #1
 800c5c2:	4355      	muls	r5, r2
 800c5c4:	460e      	mov	r6, r1
 800c5c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c5ca:	f7fd fa7d 	bl	8009ac8 <_malloc_r>
 800c5ce:	4604      	mov	r4, r0
 800c5d0:	b140      	cbz	r0, 800c5e4 <__sfmoreglue+0x28>
 800c5d2:	2100      	movs	r1, #0
 800c5d4:	e9c0 1600 	strd	r1, r6, [r0]
 800c5d8:	300c      	adds	r0, #12
 800c5da:	60a0      	str	r0, [r4, #8]
 800c5dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c5e0:	f7fd f9fe 	bl	80099e0 <memset>
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	bd70      	pop	{r4, r5, r6, pc}

0800c5e8 <__sfp_lock_acquire>:
 800c5e8:	4801      	ldr	r0, [pc, #4]	; (800c5f0 <__sfp_lock_acquire+0x8>)
 800c5ea:	f000 bc38 	b.w	800ce5e <__retarget_lock_acquire_recursive>
 800c5ee:	bf00      	nop
 800c5f0:	20002e41 	.word	0x20002e41

0800c5f4 <__sfp_lock_release>:
 800c5f4:	4801      	ldr	r0, [pc, #4]	; (800c5fc <__sfp_lock_release+0x8>)
 800c5f6:	f000 bc33 	b.w	800ce60 <__retarget_lock_release_recursive>
 800c5fa:	bf00      	nop
 800c5fc:	20002e41 	.word	0x20002e41

0800c600 <__sinit_lock_acquire>:
 800c600:	4801      	ldr	r0, [pc, #4]	; (800c608 <__sinit_lock_acquire+0x8>)
 800c602:	f000 bc2c 	b.w	800ce5e <__retarget_lock_acquire_recursive>
 800c606:	bf00      	nop
 800c608:	20002e42 	.word	0x20002e42

0800c60c <__sinit_lock_release>:
 800c60c:	4801      	ldr	r0, [pc, #4]	; (800c614 <__sinit_lock_release+0x8>)
 800c60e:	f000 bc27 	b.w	800ce60 <__retarget_lock_release_recursive>
 800c612:	bf00      	nop
 800c614:	20002e42 	.word	0x20002e42

0800c618 <__sinit>:
 800c618:	b510      	push	{r4, lr}
 800c61a:	4604      	mov	r4, r0
 800c61c:	f7ff fff0 	bl	800c600 <__sinit_lock_acquire>
 800c620:	69a3      	ldr	r3, [r4, #24]
 800c622:	b11b      	cbz	r3, 800c62c <__sinit+0x14>
 800c624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c628:	f7ff bff0 	b.w	800c60c <__sinit_lock_release>
 800c62c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c630:	6523      	str	r3, [r4, #80]	; 0x50
 800c632:	4b13      	ldr	r3, [pc, #76]	; (800c680 <__sinit+0x68>)
 800c634:	4a13      	ldr	r2, [pc, #76]	; (800c684 <__sinit+0x6c>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	62a2      	str	r2, [r4, #40]	; 0x28
 800c63a:	42a3      	cmp	r3, r4
 800c63c:	bf04      	itt	eq
 800c63e:	2301      	moveq	r3, #1
 800c640:	61a3      	streq	r3, [r4, #24]
 800c642:	4620      	mov	r0, r4
 800c644:	f000 f820 	bl	800c688 <__sfp>
 800c648:	6060      	str	r0, [r4, #4]
 800c64a:	4620      	mov	r0, r4
 800c64c:	f000 f81c 	bl	800c688 <__sfp>
 800c650:	60a0      	str	r0, [r4, #8]
 800c652:	4620      	mov	r0, r4
 800c654:	f000 f818 	bl	800c688 <__sfp>
 800c658:	2200      	movs	r2, #0
 800c65a:	60e0      	str	r0, [r4, #12]
 800c65c:	2104      	movs	r1, #4
 800c65e:	6860      	ldr	r0, [r4, #4]
 800c660:	f7ff ff82 	bl	800c568 <std>
 800c664:	68a0      	ldr	r0, [r4, #8]
 800c666:	2201      	movs	r2, #1
 800c668:	2109      	movs	r1, #9
 800c66a:	f7ff ff7d 	bl	800c568 <std>
 800c66e:	68e0      	ldr	r0, [r4, #12]
 800c670:	2202      	movs	r2, #2
 800c672:	2112      	movs	r1, #18
 800c674:	f7ff ff78 	bl	800c568 <std>
 800c678:	2301      	movs	r3, #1
 800c67a:	61a3      	str	r3, [r4, #24]
 800c67c:	e7d2      	b.n	800c624 <__sinit+0xc>
 800c67e:	bf00      	nop
 800c680:	0800f464 	.word	0x0800f464
 800c684:	0800c5b1 	.word	0x0800c5b1

0800c688 <__sfp>:
 800c688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c68a:	4607      	mov	r7, r0
 800c68c:	f7ff ffac 	bl	800c5e8 <__sfp_lock_acquire>
 800c690:	4b1e      	ldr	r3, [pc, #120]	; (800c70c <__sfp+0x84>)
 800c692:	681e      	ldr	r6, [r3, #0]
 800c694:	69b3      	ldr	r3, [r6, #24]
 800c696:	b913      	cbnz	r3, 800c69e <__sfp+0x16>
 800c698:	4630      	mov	r0, r6
 800c69a:	f7ff ffbd 	bl	800c618 <__sinit>
 800c69e:	3648      	adds	r6, #72	; 0x48
 800c6a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c6a4:	3b01      	subs	r3, #1
 800c6a6:	d503      	bpl.n	800c6b0 <__sfp+0x28>
 800c6a8:	6833      	ldr	r3, [r6, #0]
 800c6aa:	b30b      	cbz	r3, 800c6f0 <__sfp+0x68>
 800c6ac:	6836      	ldr	r6, [r6, #0]
 800c6ae:	e7f7      	b.n	800c6a0 <__sfp+0x18>
 800c6b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c6b4:	b9d5      	cbnz	r5, 800c6ec <__sfp+0x64>
 800c6b6:	4b16      	ldr	r3, [pc, #88]	; (800c710 <__sfp+0x88>)
 800c6b8:	60e3      	str	r3, [r4, #12]
 800c6ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c6be:	6665      	str	r5, [r4, #100]	; 0x64
 800c6c0:	f000 fbcc 	bl	800ce5c <__retarget_lock_init_recursive>
 800c6c4:	f7ff ff96 	bl	800c5f4 <__sfp_lock_release>
 800c6c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c6cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c6d0:	6025      	str	r5, [r4, #0]
 800c6d2:	61a5      	str	r5, [r4, #24]
 800c6d4:	2208      	movs	r2, #8
 800c6d6:	4629      	mov	r1, r5
 800c6d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c6dc:	f7fd f980 	bl	80099e0 <memset>
 800c6e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c6e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6ec:	3468      	adds	r4, #104	; 0x68
 800c6ee:	e7d9      	b.n	800c6a4 <__sfp+0x1c>
 800c6f0:	2104      	movs	r1, #4
 800c6f2:	4638      	mov	r0, r7
 800c6f4:	f7ff ff62 	bl	800c5bc <__sfmoreglue>
 800c6f8:	4604      	mov	r4, r0
 800c6fa:	6030      	str	r0, [r6, #0]
 800c6fc:	2800      	cmp	r0, #0
 800c6fe:	d1d5      	bne.n	800c6ac <__sfp+0x24>
 800c700:	f7ff ff78 	bl	800c5f4 <__sfp_lock_release>
 800c704:	230c      	movs	r3, #12
 800c706:	603b      	str	r3, [r7, #0]
 800c708:	e7ee      	b.n	800c6e8 <__sfp+0x60>
 800c70a:	bf00      	nop
 800c70c:	0800f464 	.word	0x0800f464
 800c710:	ffff0001 	.word	0xffff0001

0800c714 <fiprintf>:
 800c714:	b40e      	push	{r1, r2, r3}
 800c716:	b503      	push	{r0, r1, lr}
 800c718:	4601      	mov	r1, r0
 800c71a:	ab03      	add	r3, sp, #12
 800c71c:	4805      	ldr	r0, [pc, #20]	; (800c734 <fiprintf+0x20>)
 800c71e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c722:	6800      	ldr	r0, [r0, #0]
 800c724:	9301      	str	r3, [sp, #4]
 800c726:	f001 fa8f 	bl	800dc48 <_vfiprintf_r>
 800c72a:	b002      	add	sp, #8
 800c72c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c730:	b003      	add	sp, #12
 800c732:	4770      	bx	lr
 800c734:	200000c0 	.word	0x200000c0

0800c738 <_fwalk_reent>:
 800c738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c73c:	4606      	mov	r6, r0
 800c73e:	4688      	mov	r8, r1
 800c740:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c744:	2700      	movs	r7, #0
 800c746:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c74a:	f1b9 0901 	subs.w	r9, r9, #1
 800c74e:	d505      	bpl.n	800c75c <_fwalk_reent+0x24>
 800c750:	6824      	ldr	r4, [r4, #0]
 800c752:	2c00      	cmp	r4, #0
 800c754:	d1f7      	bne.n	800c746 <_fwalk_reent+0xe>
 800c756:	4638      	mov	r0, r7
 800c758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c75c:	89ab      	ldrh	r3, [r5, #12]
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d907      	bls.n	800c772 <_fwalk_reent+0x3a>
 800c762:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c766:	3301      	adds	r3, #1
 800c768:	d003      	beq.n	800c772 <_fwalk_reent+0x3a>
 800c76a:	4629      	mov	r1, r5
 800c76c:	4630      	mov	r0, r6
 800c76e:	47c0      	blx	r8
 800c770:	4307      	orrs	r7, r0
 800c772:	3568      	adds	r5, #104	; 0x68
 800c774:	e7e9      	b.n	800c74a <_fwalk_reent+0x12>

0800c776 <rshift>:
 800c776:	6903      	ldr	r3, [r0, #16]
 800c778:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c77c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c780:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c784:	f100 0414 	add.w	r4, r0, #20
 800c788:	dd45      	ble.n	800c816 <rshift+0xa0>
 800c78a:	f011 011f 	ands.w	r1, r1, #31
 800c78e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c792:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c796:	d10c      	bne.n	800c7b2 <rshift+0x3c>
 800c798:	f100 0710 	add.w	r7, r0, #16
 800c79c:	4629      	mov	r1, r5
 800c79e:	42b1      	cmp	r1, r6
 800c7a0:	d334      	bcc.n	800c80c <rshift+0x96>
 800c7a2:	1a9b      	subs	r3, r3, r2
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	1eea      	subs	r2, r5, #3
 800c7a8:	4296      	cmp	r6, r2
 800c7aa:	bf38      	it	cc
 800c7ac:	2300      	movcc	r3, #0
 800c7ae:	4423      	add	r3, r4
 800c7b0:	e015      	b.n	800c7de <rshift+0x68>
 800c7b2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c7b6:	f1c1 0820 	rsb	r8, r1, #32
 800c7ba:	40cf      	lsrs	r7, r1
 800c7bc:	f105 0e04 	add.w	lr, r5, #4
 800c7c0:	46a1      	mov	r9, r4
 800c7c2:	4576      	cmp	r6, lr
 800c7c4:	46f4      	mov	ip, lr
 800c7c6:	d815      	bhi.n	800c7f4 <rshift+0x7e>
 800c7c8:	1a9a      	subs	r2, r3, r2
 800c7ca:	0092      	lsls	r2, r2, #2
 800c7cc:	3a04      	subs	r2, #4
 800c7ce:	3501      	adds	r5, #1
 800c7d0:	42ae      	cmp	r6, r5
 800c7d2:	bf38      	it	cc
 800c7d4:	2200      	movcc	r2, #0
 800c7d6:	18a3      	adds	r3, r4, r2
 800c7d8:	50a7      	str	r7, [r4, r2]
 800c7da:	b107      	cbz	r7, 800c7de <rshift+0x68>
 800c7dc:	3304      	adds	r3, #4
 800c7de:	1b1a      	subs	r2, r3, r4
 800c7e0:	42a3      	cmp	r3, r4
 800c7e2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c7e6:	bf08      	it	eq
 800c7e8:	2300      	moveq	r3, #0
 800c7ea:	6102      	str	r2, [r0, #16]
 800c7ec:	bf08      	it	eq
 800c7ee:	6143      	streq	r3, [r0, #20]
 800c7f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7f4:	f8dc c000 	ldr.w	ip, [ip]
 800c7f8:	fa0c fc08 	lsl.w	ip, ip, r8
 800c7fc:	ea4c 0707 	orr.w	r7, ip, r7
 800c800:	f849 7b04 	str.w	r7, [r9], #4
 800c804:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c808:	40cf      	lsrs	r7, r1
 800c80a:	e7da      	b.n	800c7c2 <rshift+0x4c>
 800c80c:	f851 cb04 	ldr.w	ip, [r1], #4
 800c810:	f847 cf04 	str.w	ip, [r7, #4]!
 800c814:	e7c3      	b.n	800c79e <rshift+0x28>
 800c816:	4623      	mov	r3, r4
 800c818:	e7e1      	b.n	800c7de <rshift+0x68>

0800c81a <__hexdig_fun>:
 800c81a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c81e:	2b09      	cmp	r3, #9
 800c820:	d802      	bhi.n	800c828 <__hexdig_fun+0xe>
 800c822:	3820      	subs	r0, #32
 800c824:	b2c0      	uxtb	r0, r0
 800c826:	4770      	bx	lr
 800c828:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c82c:	2b05      	cmp	r3, #5
 800c82e:	d801      	bhi.n	800c834 <__hexdig_fun+0x1a>
 800c830:	3847      	subs	r0, #71	; 0x47
 800c832:	e7f7      	b.n	800c824 <__hexdig_fun+0xa>
 800c834:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c838:	2b05      	cmp	r3, #5
 800c83a:	d801      	bhi.n	800c840 <__hexdig_fun+0x26>
 800c83c:	3827      	subs	r0, #39	; 0x27
 800c83e:	e7f1      	b.n	800c824 <__hexdig_fun+0xa>
 800c840:	2000      	movs	r0, #0
 800c842:	4770      	bx	lr

0800c844 <__gethex>:
 800c844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c848:	ed2d 8b02 	vpush	{d8}
 800c84c:	b089      	sub	sp, #36	; 0x24
 800c84e:	ee08 0a10 	vmov	s16, r0
 800c852:	9304      	str	r3, [sp, #16]
 800c854:	4bb4      	ldr	r3, [pc, #720]	; (800cb28 <__gethex+0x2e4>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	9301      	str	r3, [sp, #4]
 800c85a:	4618      	mov	r0, r3
 800c85c:	468b      	mov	fp, r1
 800c85e:	4690      	mov	r8, r2
 800c860:	f7f3 fcbe 	bl	80001e0 <strlen>
 800c864:	9b01      	ldr	r3, [sp, #4]
 800c866:	f8db 2000 	ldr.w	r2, [fp]
 800c86a:	4403      	add	r3, r0
 800c86c:	4682      	mov	sl, r0
 800c86e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c872:	9305      	str	r3, [sp, #20]
 800c874:	1c93      	adds	r3, r2, #2
 800c876:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c87a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c87e:	32fe      	adds	r2, #254	; 0xfe
 800c880:	18d1      	adds	r1, r2, r3
 800c882:	461f      	mov	r7, r3
 800c884:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c888:	9100      	str	r1, [sp, #0]
 800c88a:	2830      	cmp	r0, #48	; 0x30
 800c88c:	d0f8      	beq.n	800c880 <__gethex+0x3c>
 800c88e:	f7ff ffc4 	bl	800c81a <__hexdig_fun>
 800c892:	4604      	mov	r4, r0
 800c894:	2800      	cmp	r0, #0
 800c896:	d13a      	bne.n	800c90e <__gethex+0xca>
 800c898:	9901      	ldr	r1, [sp, #4]
 800c89a:	4652      	mov	r2, sl
 800c89c:	4638      	mov	r0, r7
 800c89e:	f7fd fe64 	bl	800a56a <strncmp>
 800c8a2:	4605      	mov	r5, r0
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	d168      	bne.n	800c97a <__gethex+0x136>
 800c8a8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c8ac:	eb07 060a 	add.w	r6, r7, sl
 800c8b0:	f7ff ffb3 	bl	800c81a <__hexdig_fun>
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	d062      	beq.n	800c97e <__gethex+0x13a>
 800c8b8:	4633      	mov	r3, r6
 800c8ba:	7818      	ldrb	r0, [r3, #0]
 800c8bc:	2830      	cmp	r0, #48	; 0x30
 800c8be:	461f      	mov	r7, r3
 800c8c0:	f103 0301 	add.w	r3, r3, #1
 800c8c4:	d0f9      	beq.n	800c8ba <__gethex+0x76>
 800c8c6:	f7ff ffa8 	bl	800c81a <__hexdig_fun>
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	fab0 f480 	clz	r4, r0
 800c8d0:	0964      	lsrs	r4, r4, #5
 800c8d2:	4635      	mov	r5, r6
 800c8d4:	9300      	str	r3, [sp, #0]
 800c8d6:	463a      	mov	r2, r7
 800c8d8:	4616      	mov	r6, r2
 800c8da:	3201      	adds	r2, #1
 800c8dc:	7830      	ldrb	r0, [r6, #0]
 800c8de:	f7ff ff9c 	bl	800c81a <__hexdig_fun>
 800c8e2:	2800      	cmp	r0, #0
 800c8e4:	d1f8      	bne.n	800c8d8 <__gethex+0x94>
 800c8e6:	9901      	ldr	r1, [sp, #4]
 800c8e8:	4652      	mov	r2, sl
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	f7fd fe3d 	bl	800a56a <strncmp>
 800c8f0:	b980      	cbnz	r0, 800c914 <__gethex+0xd0>
 800c8f2:	b94d      	cbnz	r5, 800c908 <__gethex+0xc4>
 800c8f4:	eb06 050a 	add.w	r5, r6, sl
 800c8f8:	462a      	mov	r2, r5
 800c8fa:	4616      	mov	r6, r2
 800c8fc:	3201      	adds	r2, #1
 800c8fe:	7830      	ldrb	r0, [r6, #0]
 800c900:	f7ff ff8b 	bl	800c81a <__hexdig_fun>
 800c904:	2800      	cmp	r0, #0
 800c906:	d1f8      	bne.n	800c8fa <__gethex+0xb6>
 800c908:	1bad      	subs	r5, r5, r6
 800c90a:	00ad      	lsls	r5, r5, #2
 800c90c:	e004      	b.n	800c918 <__gethex+0xd4>
 800c90e:	2400      	movs	r4, #0
 800c910:	4625      	mov	r5, r4
 800c912:	e7e0      	b.n	800c8d6 <__gethex+0x92>
 800c914:	2d00      	cmp	r5, #0
 800c916:	d1f7      	bne.n	800c908 <__gethex+0xc4>
 800c918:	7833      	ldrb	r3, [r6, #0]
 800c91a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c91e:	2b50      	cmp	r3, #80	; 0x50
 800c920:	d13b      	bne.n	800c99a <__gethex+0x156>
 800c922:	7873      	ldrb	r3, [r6, #1]
 800c924:	2b2b      	cmp	r3, #43	; 0x2b
 800c926:	d02c      	beq.n	800c982 <__gethex+0x13e>
 800c928:	2b2d      	cmp	r3, #45	; 0x2d
 800c92a:	d02e      	beq.n	800c98a <__gethex+0x146>
 800c92c:	1c71      	adds	r1, r6, #1
 800c92e:	f04f 0900 	mov.w	r9, #0
 800c932:	7808      	ldrb	r0, [r1, #0]
 800c934:	f7ff ff71 	bl	800c81a <__hexdig_fun>
 800c938:	1e43      	subs	r3, r0, #1
 800c93a:	b2db      	uxtb	r3, r3
 800c93c:	2b18      	cmp	r3, #24
 800c93e:	d82c      	bhi.n	800c99a <__gethex+0x156>
 800c940:	f1a0 0210 	sub.w	r2, r0, #16
 800c944:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c948:	f7ff ff67 	bl	800c81a <__hexdig_fun>
 800c94c:	1e43      	subs	r3, r0, #1
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	2b18      	cmp	r3, #24
 800c952:	d91d      	bls.n	800c990 <__gethex+0x14c>
 800c954:	f1b9 0f00 	cmp.w	r9, #0
 800c958:	d000      	beq.n	800c95c <__gethex+0x118>
 800c95a:	4252      	negs	r2, r2
 800c95c:	4415      	add	r5, r2
 800c95e:	f8cb 1000 	str.w	r1, [fp]
 800c962:	b1e4      	cbz	r4, 800c99e <__gethex+0x15a>
 800c964:	9b00      	ldr	r3, [sp, #0]
 800c966:	2b00      	cmp	r3, #0
 800c968:	bf14      	ite	ne
 800c96a:	2700      	movne	r7, #0
 800c96c:	2706      	moveq	r7, #6
 800c96e:	4638      	mov	r0, r7
 800c970:	b009      	add	sp, #36	; 0x24
 800c972:	ecbd 8b02 	vpop	{d8}
 800c976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c97a:	463e      	mov	r6, r7
 800c97c:	4625      	mov	r5, r4
 800c97e:	2401      	movs	r4, #1
 800c980:	e7ca      	b.n	800c918 <__gethex+0xd4>
 800c982:	f04f 0900 	mov.w	r9, #0
 800c986:	1cb1      	adds	r1, r6, #2
 800c988:	e7d3      	b.n	800c932 <__gethex+0xee>
 800c98a:	f04f 0901 	mov.w	r9, #1
 800c98e:	e7fa      	b.n	800c986 <__gethex+0x142>
 800c990:	230a      	movs	r3, #10
 800c992:	fb03 0202 	mla	r2, r3, r2, r0
 800c996:	3a10      	subs	r2, #16
 800c998:	e7d4      	b.n	800c944 <__gethex+0x100>
 800c99a:	4631      	mov	r1, r6
 800c99c:	e7df      	b.n	800c95e <__gethex+0x11a>
 800c99e:	1bf3      	subs	r3, r6, r7
 800c9a0:	3b01      	subs	r3, #1
 800c9a2:	4621      	mov	r1, r4
 800c9a4:	2b07      	cmp	r3, #7
 800c9a6:	dc0b      	bgt.n	800c9c0 <__gethex+0x17c>
 800c9a8:	ee18 0a10 	vmov	r0, s16
 800c9ac:	f000 faf0 	bl	800cf90 <_Balloc>
 800c9b0:	4604      	mov	r4, r0
 800c9b2:	b940      	cbnz	r0, 800c9c6 <__gethex+0x182>
 800c9b4:	4b5d      	ldr	r3, [pc, #372]	; (800cb2c <__gethex+0x2e8>)
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	21de      	movs	r1, #222	; 0xde
 800c9ba:	485d      	ldr	r0, [pc, #372]	; (800cb30 <__gethex+0x2ec>)
 800c9bc:	f7fe fe68 	bl	800b690 <__assert_func>
 800c9c0:	3101      	adds	r1, #1
 800c9c2:	105b      	asrs	r3, r3, #1
 800c9c4:	e7ee      	b.n	800c9a4 <__gethex+0x160>
 800c9c6:	f100 0914 	add.w	r9, r0, #20
 800c9ca:	f04f 0b00 	mov.w	fp, #0
 800c9ce:	f1ca 0301 	rsb	r3, sl, #1
 800c9d2:	f8cd 9008 	str.w	r9, [sp, #8]
 800c9d6:	f8cd b000 	str.w	fp, [sp]
 800c9da:	9306      	str	r3, [sp, #24]
 800c9dc:	42b7      	cmp	r7, r6
 800c9de:	d340      	bcc.n	800ca62 <__gethex+0x21e>
 800c9e0:	9802      	ldr	r0, [sp, #8]
 800c9e2:	9b00      	ldr	r3, [sp, #0]
 800c9e4:	f840 3b04 	str.w	r3, [r0], #4
 800c9e8:	eba0 0009 	sub.w	r0, r0, r9
 800c9ec:	1080      	asrs	r0, r0, #2
 800c9ee:	0146      	lsls	r6, r0, #5
 800c9f0:	6120      	str	r0, [r4, #16]
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f000 fbbe 	bl	800d174 <__hi0bits>
 800c9f8:	1a30      	subs	r0, r6, r0
 800c9fa:	f8d8 6000 	ldr.w	r6, [r8]
 800c9fe:	42b0      	cmp	r0, r6
 800ca00:	dd63      	ble.n	800caca <__gethex+0x286>
 800ca02:	1b87      	subs	r7, r0, r6
 800ca04:	4639      	mov	r1, r7
 800ca06:	4620      	mov	r0, r4
 800ca08:	f000 ff62 	bl	800d8d0 <__any_on>
 800ca0c:	4682      	mov	sl, r0
 800ca0e:	b1a8      	cbz	r0, 800ca3c <__gethex+0x1f8>
 800ca10:	1e7b      	subs	r3, r7, #1
 800ca12:	1159      	asrs	r1, r3, #5
 800ca14:	f003 021f 	and.w	r2, r3, #31
 800ca18:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ca1c:	f04f 0a01 	mov.w	sl, #1
 800ca20:	fa0a f202 	lsl.w	r2, sl, r2
 800ca24:	420a      	tst	r2, r1
 800ca26:	d009      	beq.n	800ca3c <__gethex+0x1f8>
 800ca28:	4553      	cmp	r3, sl
 800ca2a:	dd05      	ble.n	800ca38 <__gethex+0x1f4>
 800ca2c:	1eb9      	subs	r1, r7, #2
 800ca2e:	4620      	mov	r0, r4
 800ca30:	f000 ff4e 	bl	800d8d0 <__any_on>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d145      	bne.n	800cac4 <__gethex+0x280>
 800ca38:	f04f 0a02 	mov.w	sl, #2
 800ca3c:	4639      	mov	r1, r7
 800ca3e:	4620      	mov	r0, r4
 800ca40:	f7ff fe99 	bl	800c776 <rshift>
 800ca44:	443d      	add	r5, r7
 800ca46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca4a:	42ab      	cmp	r3, r5
 800ca4c:	da4c      	bge.n	800cae8 <__gethex+0x2a4>
 800ca4e:	ee18 0a10 	vmov	r0, s16
 800ca52:	4621      	mov	r1, r4
 800ca54:	f000 fadc 	bl	800d010 <_Bfree>
 800ca58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	6013      	str	r3, [r2, #0]
 800ca5e:	27a3      	movs	r7, #163	; 0xa3
 800ca60:	e785      	b.n	800c96e <__gethex+0x12a>
 800ca62:	1e73      	subs	r3, r6, #1
 800ca64:	9a05      	ldr	r2, [sp, #20]
 800ca66:	9303      	str	r3, [sp, #12]
 800ca68:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ca6c:	4293      	cmp	r3, r2
 800ca6e:	d019      	beq.n	800caa4 <__gethex+0x260>
 800ca70:	f1bb 0f20 	cmp.w	fp, #32
 800ca74:	d107      	bne.n	800ca86 <__gethex+0x242>
 800ca76:	9b02      	ldr	r3, [sp, #8]
 800ca78:	9a00      	ldr	r2, [sp, #0]
 800ca7a:	f843 2b04 	str.w	r2, [r3], #4
 800ca7e:	9302      	str	r3, [sp, #8]
 800ca80:	2300      	movs	r3, #0
 800ca82:	9300      	str	r3, [sp, #0]
 800ca84:	469b      	mov	fp, r3
 800ca86:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ca8a:	f7ff fec6 	bl	800c81a <__hexdig_fun>
 800ca8e:	9b00      	ldr	r3, [sp, #0]
 800ca90:	f000 000f 	and.w	r0, r0, #15
 800ca94:	fa00 f00b 	lsl.w	r0, r0, fp
 800ca98:	4303      	orrs	r3, r0
 800ca9a:	9300      	str	r3, [sp, #0]
 800ca9c:	f10b 0b04 	add.w	fp, fp, #4
 800caa0:	9b03      	ldr	r3, [sp, #12]
 800caa2:	e00d      	b.n	800cac0 <__gethex+0x27c>
 800caa4:	9b03      	ldr	r3, [sp, #12]
 800caa6:	9a06      	ldr	r2, [sp, #24]
 800caa8:	4413      	add	r3, r2
 800caaa:	42bb      	cmp	r3, r7
 800caac:	d3e0      	bcc.n	800ca70 <__gethex+0x22c>
 800caae:	4618      	mov	r0, r3
 800cab0:	9901      	ldr	r1, [sp, #4]
 800cab2:	9307      	str	r3, [sp, #28]
 800cab4:	4652      	mov	r2, sl
 800cab6:	f7fd fd58 	bl	800a56a <strncmp>
 800caba:	9b07      	ldr	r3, [sp, #28]
 800cabc:	2800      	cmp	r0, #0
 800cabe:	d1d7      	bne.n	800ca70 <__gethex+0x22c>
 800cac0:	461e      	mov	r6, r3
 800cac2:	e78b      	b.n	800c9dc <__gethex+0x198>
 800cac4:	f04f 0a03 	mov.w	sl, #3
 800cac8:	e7b8      	b.n	800ca3c <__gethex+0x1f8>
 800caca:	da0a      	bge.n	800cae2 <__gethex+0x29e>
 800cacc:	1a37      	subs	r7, r6, r0
 800cace:	4621      	mov	r1, r4
 800cad0:	ee18 0a10 	vmov	r0, s16
 800cad4:	463a      	mov	r2, r7
 800cad6:	f000 fcb7 	bl	800d448 <__lshift>
 800cada:	1bed      	subs	r5, r5, r7
 800cadc:	4604      	mov	r4, r0
 800cade:	f100 0914 	add.w	r9, r0, #20
 800cae2:	f04f 0a00 	mov.w	sl, #0
 800cae6:	e7ae      	b.n	800ca46 <__gethex+0x202>
 800cae8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800caec:	42a8      	cmp	r0, r5
 800caee:	dd72      	ble.n	800cbd6 <__gethex+0x392>
 800caf0:	1b45      	subs	r5, r0, r5
 800caf2:	42ae      	cmp	r6, r5
 800caf4:	dc36      	bgt.n	800cb64 <__gethex+0x320>
 800caf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cafa:	2b02      	cmp	r3, #2
 800cafc:	d02a      	beq.n	800cb54 <__gethex+0x310>
 800cafe:	2b03      	cmp	r3, #3
 800cb00:	d02c      	beq.n	800cb5c <__gethex+0x318>
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	d11c      	bne.n	800cb40 <__gethex+0x2fc>
 800cb06:	42ae      	cmp	r6, r5
 800cb08:	d11a      	bne.n	800cb40 <__gethex+0x2fc>
 800cb0a:	2e01      	cmp	r6, #1
 800cb0c:	d112      	bne.n	800cb34 <__gethex+0x2f0>
 800cb0e:	9a04      	ldr	r2, [sp, #16]
 800cb10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cb14:	6013      	str	r3, [r2, #0]
 800cb16:	2301      	movs	r3, #1
 800cb18:	6123      	str	r3, [r4, #16]
 800cb1a:	f8c9 3000 	str.w	r3, [r9]
 800cb1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb20:	2762      	movs	r7, #98	; 0x62
 800cb22:	601c      	str	r4, [r3, #0]
 800cb24:	e723      	b.n	800c96e <__gethex+0x12a>
 800cb26:	bf00      	nop
 800cb28:	0800f684 	.word	0x0800f684
 800cb2c:	0800f5ab 	.word	0x0800f5ab
 800cb30:	0800f61c 	.word	0x0800f61c
 800cb34:	1e71      	subs	r1, r6, #1
 800cb36:	4620      	mov	r0, r4
 800cb38:	f000 feca 	bl	800d8d0 <__any_on>
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	d1e6      	bne.n	800cb0e <__gethex+0x2ca>
 800cb40:	ee18 0a10 	vmov	r0, s16
 800cb44:	4621      	mov	r1, r4
 800cb46:	f000 fa63 	bl	800d010 <_Bfree>
 800cb4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	6013      	str	r3, [r2, #0]
 800cb50:	2750      	movs	r7, #80	; 0x50
 800cb52:	e70c      	b.n	800c96e <__gethex+0x12a>
 800cb54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1f2      	bne.n	800cb40 <__gethex+0x2fc>
 800cb5a:	e7d8      	b.n	800cb0e <__gethex+0x2ca>
 800cb5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d1d5      	bne.n	800cb0e <__gethex+0x2ca>
 800cb62:	e7ed      	b.n	800cb40 <__gethex+0x2fc>
 800cb64:	1e6f      	subs	r7, r5, #1
 800cb66:	f1ba 0f00 	cmp.w	sl, #0
 800cb6a:	d131      	bne.n	800cbd0 <__gethex+0x38c>
 800cb6c:	b127      	cbz	r7, 800cb78 <__gethex+0x334>
 800cb6e:	4639      	mov	r1, r7
 800cb70:	4620      	mov	r0, r4
 800cb72:	f000 fead 	bl	800d8d0 <__any_on>
 800cb76:	4682      	mov	sl, r0
 800cb78:	117b      	asrs	r3, r7, #5
 800cb7a:	2101      	movs	r1, #1
 800cb7c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cb80:	f007 071f 	and.w	r7, r7, #31
 800cb84:	fa01 f707 	lsl.w	r7, r1, r7
 800cb88:	421f      	tst	r7, r3
 800cb8a:	4629      	mov	r1, r5
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	bf18      	it	ne
 800cb90:	f04a 0a02 	orrne.w	sl, sl, #2
 800cb94:	1b76      	subs	r6, r6, r5
 800cb96:	f7ff fdee 	bl	800c776 <rshift>
 800cb9a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cb9e:	2702      	movs	r7, #2
 800cba0:	f1ba 0f00 	cmp.w	sl, #0
 800cba4:	d048      	beq.n	800cc38 <__gethex+0x3f4>
 800cba6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cbaa:	2b02      	cmp	r3, #2
 800cbac:	d015      	beq.n	800cbda <__gethex+0x396>
 800cbae:	2b03      	cmp	r3, #3
 800cbb0:	d017      	beq.n	800cbe2 <__gethex+0x39e>
 800cbb2:	2b01      	cmp	r3, #1
 800cbb4:	d109      	bne.n	800cbca <__gethex+0x386>
 800cbb6:	f01a 0f02 	tst.w	sl, #2
 800cbba:	d006      	beq.n	800cbca <__gethex+0x386>
 800cbbc:	f8d9 0000 	ldr.w	r0, [r9]
 800cbc0:	ea4a 0a00 	orr.w	sl, sl, r0
 800cbc4:	f01a 0f01 	tst.w	sl, #1
 800cbc8:	d10e      	bne.n	800cbe8 <__gethex+0x3a4>
 800cbca:	f047 0710 	orr.w	r7, r7, #16
 800cbce:	e033      	b.n	800cc38 <__gethex+0x3f4>
 800cbd0:	f04f 0a01 	mov.w	sl, #1
 800cbd4:	e7d0      	b.n	800cb78 <__gethex+0x334>
 800cbd6:	2701      	movs	r7, #1
 800cbd8:	e7e2      	b.n	800cba0 <__gethex+0x35c>
 800cbda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbdc:	f1c3 0301 	rsb	r3, r3, #1
 800cbe0:	9315      	str	r3, [sp, #84]	; 0x54
 800cbe2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d0f0      	beq.n	800cbca <__gethex+0x386>
 800cbe8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cbec:	f104 0314 	add.w	r3, r4, #20
 800cbf0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cbf4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cbf8:	f04f 0c00 	mov.w	ip, #0
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc02:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800cc06:	d01c      	beq.n	800cc42 <__gethex+0x3fe>
 800cc08:	3201      	adds	r2, #1
 800cc0a:	6002      	str	r2, [r0, #0]
 800cc0c:	2f02      	cmp	r7, #2
 800cc0e:	f104 0314 	add.w	r3, r4, #20
 800cc12:	d13f      	bne.n	800cc94 <__gethex+0x450>
 800cc14:	f8d8 2000 	ldr.w	r2, [r8]
 800cc18:	3a01      	subs	r2, #1
 800cc1a:	42b2      	cmp	r2, r6
 800cc1c:	d10a      	bne.n	800cc34 <__gethex+0x3f0>
 800cc1e:	1171      	asrs	r1, r6, #5
 800cc20:	2201      	movs	r2, #1
 800cc22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cc26:	f006 061f 	and.w	r6, r6, #31
 800cc2a:	fa02 f606 	lsl.w	r6, r2, r6
 800cc2e:	421e      	tst	r6, r3
 800cc30:	bf18      	it	ne
 800cc32:	4617      	movne	r7, r2
 800cc34:	f047 0720 	orr.w	r7, r7, #32
 800cc38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cc3a:	601c      	str	r4, [r3, #0]
 800cc3c:	9b04      	ldr	r3, [sp, #16]
 800cc3e:	601d      	str	r5, [r3, #0]
 800cc40:	e695      	b.n	800c96e <__gethex+0x12a>
 800cc42:	4299      	cmp	r1, r3
 800cc44:	f843 cc04 	str.w	ip, [r3, #-4]
 800cc48:	d8d8      	bhi.n	800cbfc <__gethex+0x3b8>
 800cc4a:	68a3      	ldr	r3, [r4, #8]
 800cc4c:	459b      	cmp	fp, r3
 800cc4e:	db19      	blt.n	800cc84 <__gethex+0x440>
 800cc50:	6861      	ldr	r1, [r4, #4]
 800cc52:	ee18 0a10 	vmov	r0, s16
 800cc56:	3101      	adds	r1, #1
 800cc58:	f000 f99a 	bl	800cf90 <_Balloc>
 800cc5c:	4681      	mov	r9, r0
 800cc5e:	b918      	cbnz	r0, 800cc68 <__gethex+0x424>
 800cc60:	4b1a      	ldr	r3, [pc, #104]	; (800cccc <__gethex+0x488>)
 800cc62:	4602      	mov	r2, r0
 800cc64:	2184      	movs	r1, #132	; 0x84
 800cc66:	e6a8      	b.n	800c9ba <__gethex+0x176>
 800cc68:	6922      	ldr	r2, [r4, #16]
 800cc6a:	3202      	adds	r2, #2
 800cc6c:	f104 010c 	add.w	r1, r4, #12
 800cc70:	0092      	lsls	r2, r2, #2
 800cc72:	300c      	adds	r0, #12
 800cc74:	f7fc fea6 	bl	80099c4 <memcpy>
 800cc78:	4621      	mov	r1, r4
 800cc7a:	ee18 0a10 	vmov	r0, s16
 800cc7e:	f000 f9c7 	bl	800d010 <_Bfree>
 800cc82:	464c      	mov	r4, r9
 800cc84:	6923      	ldr	r3, [r4, #16]
 800cc86:	1c5a      	adds	r2, r3, #1
 800cc88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cc8c:	6122      	str	r2, [r4, #16]
 800cc8e:	2201      	movs	r2, #1
 800cc90:	615a      	str	r2, [r3, #20]
 800cc92:	e7bb      	b.n	800cc0c <__gethex+0x3c8>
 800cc94:	6922      	ldr	r2, [r4, #16]
 800cc96:	455a      	cmp	r2, fp
 800cc98:	dd0b      	ble.n	800ccb2 <__gethex+0x46e>
 800cc9a:	2101      	movs	r1, #1
 800cc9c:	4620      	mov	r0, r4
 800cc9e:	f7ff fd6a 	bl	800c776 <rshift>
 800cca2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cca6:	3501      	adds	r5, #1
 800cca8:	42ab      	cmp	r3, r5
 800ccaa:	f6ff aed0 	blt.w	800ca4e <__gethex+0x20a>
 800ccae:	2701      	movs	r7, #1
 800ccb0:	e7c0      	b.n	800cc34 <__gethex+0x3f0>
 800ccb2:	f016 061f 	ands.w	r6, r6, #31
 800ccb6:	d0fa      	beq.n	800ccae <__gethex+0x46a>
 800ccb8:	4453      	add	r3, sl
 800ccba:	f1c6 0620 	rsb	r6, r6, #32
 800ccbe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ccc2:	f000 fa57 	bl	800d174 <__hi0bits>
 800ccc6:	42b0      	cmp	r0, r6
 800ccc8:	dbe7      	blt.n	800cc9a <__gethex+0x456>
 800ccca:	e7f0      	b.n	800ccae <__gethex+0x46a>
 800cccc:	0800f5ab 	.word	0x0800f5ab

0800ccd0 <L_shift>:
 800ccd0:	f1c2 0208 	rsb	r2, r2, #8
 800ccd4:	0092      	lsls	r2, r2, #2
 800ccd6:	b570      	push	{r4, r5, r6, lr}
 800ccd8:	f1c2 0620 	rsb	r6, r2, #32
 800ccdc:	6843      	ldr	r3, [r0, #4]
 800ccde:	6804      	ldr	r4, [r0, #0]
 800cce0:	fa03 f506 	lsl.w	r5, r3, r6
 800cce4:	432c      	orrs	r4, r5
 800cce6:	40d3      	lsrs	r3, r2
 800cce8:	6004      	str	r4, [r0, #0]
 800ccea:	f840 3f04 	str.w	r3, [r0, #4]!
 800ccee:	4288      	cmp	r0, r1
 800ccf0:	d3f4      	bcc.n	800ccdc <L_shift+0xc>
 800ccf2:	bd70      	pop	{r4, r5, r6, pc}

0800ccf4 <__match>:
 800ccf4:	b530      	push	{r4, r5, lr}
 800ccf6:	6803      	ldr	r3, [r0, #0]
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccfe:	b914      	cbnz	r4, 800cd06 <__match+0x12>
 800cd00:	6003      	str	r3, [r0, #0]
 800cd02:	2001      	movs	r0, #1
 800cd04:	bd30      	pop	{r4, r5, pc}
 800cd06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd0a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cd0e:	2d19      	cmp	r5, #25
 800cd10:	bf98      	it	ls
 800cd12:	3220      	addls	r2, #32
 800cd14:	42a2      	cmp	r2, r4
 800cd16:	d0f0      	beq.n	800ccfa <__match+0x6>
 800cd18:	2000      	movs	r0, #0
 800cd1a:	e7f3      	b.n	800cd04 <__match+0x10>

0800cd1c <__hexnan>:
 800cd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd20:	680b      	ldr	r3, [r1, #0]
 800cd22:	115e      	asrs	r6, r3, #5
 800cd24:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cd28:	f013 031f 	ands.w	r3, r3, #31
 800cd2c:	b087      	sub	sp, #28
 800cd2e:	bf18      	it	ne
 800cd30:	3604      	addne	r6, #4
 800cd32:	2500      	movs	r5, #0
 800cd34:	1f37      	subs	r7, r6, #4
 800cd36:	4690      	mov	r8, r2
 800cd38:	6802      	ldr	r2, [r0, #0]
 800cd3a:	9301      	str	r3, [sp, #4]
 800cd3c:	4682      	mov	sl, r0
 800cd3e:	f846 5c04 	str.w	r5, [r6, #-4]
 800cd42:	46b9      	mov	r9, r7
 800cd44:	463c      	mov	r4, r7
 800cd46:	9502      	str	r5, [sp, #8]
 800cd48:	46ab      	mov	fp, r5
 800cd4a:	7851      	ldrb	r1, [r2, #1]
 800cd4c:	1c53      	adds	r3, r2, #1
 800cd4e:	9303      	str	r3, [sp, #12]
 800cd50:	b341      	cbz	r1, 800cda4 <__hexnan+0x88>
 800cd52:	4608      	mov	r0, r1
 800cd54:	9205      	str	r2, [sp, #20]
 800cd56:	9104      	str	r1, [sp, #16]
 800cd58:	f7ff fd5f 	bl	800c81a <__hexdig_fun>
 800cd5c:	2800      	cmp	r0, #0
 800cd5e:	d14f      	bne.n	800ce00 <__hexnan+0xe4>
 800cd60:	9904      	ldr	r1, [sp, #16]
 800cd62:	9a05      	ldr	r2, [sp, #20]
 800cd64:	2920      	cmp	r1, #32
 800cd66:	d818      	bhi.n	800cd9a <__hexnan+0x7e>
 800cd68:	9b02      	ldr	r3, [sp, #8]
 800cd6a:	459b      	cmp	fp, r3
 800cd6c:	dd13      	ble.n	800cd96 <__hexnan+0x7a>
 800cd6e:	454c      	cmp	r4, r9
 800cd70:	d206      	bcs.n	800cd80 <__hexnan+0x64>
 800cd72:	2d07      	cmp	r5, #7
 800cd74:	dc04      	bgt.n	800cd80 <__hexnan+0x64>
 800cd76:	462a      	mov	r2, r5
 800cd78:	4649      	mov	r1, r9
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	f7ff ffa8 	bl	800ccd0 <L_shift>
 800cd80:	4544      	cmp	r4, r8
 800cd82:	d950      	bls.n	800ce26 <__hexnan+0x10a>
 800cd84:	2300      	movs	r3, #0
 800cd86:	f1a4 0904 	sub.w	r9, r4, #4
 800cd8a:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd8e:	f8cd b008 	str.w	fp, [sp, #8]
 800cd92:	464c      	mov	r4, r9
 800cd94:	461d      	mov	r5, r3
 800cd96:	9a03      	ldr	r2, [sp, #12]
 800cd98:	e7d7      	b.n	800cd4a <__hexnan+0x2e>
 800cd9a:	2929      	cmp	r1, #41	; 0x29
 800cd9c:	d156      	bne.n	800ce4c <__hexnan+0x130>
 800cd9e:	3202      	adds	r2, #2
 800cda0:	f8ca 2000 	str.w	r2, [sl]
 800cda4:	f1bb 0f00 	cmp.w	fp, #0
 800cda8:	d050      	beq.n	800ce4c <__hexnan+0x130>
 800cdaa:	454c      	cmp	r4, r9
 800cdac:	d206      	bcs.n	800cdbc <__hexnan+0xa0>
 800cdae:	2d07      	cmp	r5, #7
 800cdb0:	dc04      	bgt.n	800cdbc <__hexnan+0xa0>
 800cdb2:	462a      	mov	r2, r5
 800cdb4:	4649      	mov	r1, r9
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	f7ff ff8a 	bl	800ccd0 <L_shift>
 800cdbc:	4544      	cmp	r4, r8
 800cdbe:	d934      	bls.n	800ce2a <__hexnan+0x10e>
 800cdc0:	f1a8 0204 	sub.w	r2, r8, #4
 800cdc4:	4623      	mov	r3, r4
 800cdc6:	f853 1b04 	ldr.w	r1, [r3], #4
 800cdca:	f842 1f04 	str.w	r1, [r2, #4]!
 800cdce:	429f      	cmp	r7, r3
 800cdd0:	d2f9      	bcs.n	800cdc6 <__hexnan+0xaa>
 800cdd2:	1b3b      	subs	r3, r7, r4
 800cdd4:	f023 0303 	bic.w	r3, r3, #3
 800cdd8:	3304      	adds	r3, #4
 800cdda:	3401      	adds	r4, #1
 800cddc:	3e03      	subs	r6, #3
 800cdde:	42b4      	cmp	r4, r6
 800cde0:	bf88      	it	hi
 800cde2:	2304      	movhi	r3, #4
 800cde4:	4443      	add	r3, r8
 800cde6:	2200      	movs	r2, #0
 800cde8:	f843 2b04 	str.w	r2, [r3], #4
 800cdec:	429f      	cmp	r7, r3
 800cdee:	d2fb      	bcs.n	800cde8 <__hexnan+0xcc>
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	b91b      	cbnz	r3, 800cdfc <__hexnan+0xe0>
 800cdf4:	4547      	cmp	r7, r8
 800cdf6:	d127      	bne.n	800ce48 <__hexnan+0x12c>
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	603b      	str	r3, [r7, #0]
 800cdfc:	2005      	movs	r0, #5
 800cdfe:	e026      	b.n	800ce4e <__hexnan+0x132>
 800ce00:	3501      	adds	r5, #1
 800ce02:	2d08      	cmp	r5, #8
 800ce04:	f10b 0b01 	add.w	fp, fp, #1
 800ce08:	dd06      	ble.n	800ce18 <__hexnan+0xfc>
 800ce0a:	4544      	cmp	r4, r8
 800ce0c:	d9c3      	bls.n	800cd96 <__hexnan+0x7a>
 800ce0e:	2300      	movs	r3, #0
 800ce10:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce14:	2501      	movs	r5, #1
 800ce16:	3c04      	subs	r4, #4
 800ce18:	6822      	ldr	r2, [r4, #0]
 800ce1a:	f000 000f 	and.w	r0, r0, #15
 800ce1e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ce22:	6022      	str	r2, [r4, #0]
 800ce24:	e7b7      	b.n	800cd96 <__hexnan+0x7a>
 800ce26:	2508      	movs	r5, #8
 800ce28:	e7b5      	b.n	800cd96 <__hexnan+0x7a>
 800ce2a:	9b01      	ldr	r3, [sp, #4]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d0df      	beq.n	800cdf0 <__hexnan+0xd4>
 800ce30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce34:	f1c3 0320 	rsb	r3, r3, #32
 800ce38:	fa22 f303 	lsr.w	r3, r2, r3
 800ce3c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ce40:	401a      	ands	r2, r3
 800ce42:	f846 2c04 	str.w	r2, [r6, #-4]
 800ce46:	e7d3      	b.n	800cdf0 <__hexnan+0xd4>
 800ce48:	3f04      	subs	r7, #4
 800ce4a:	e7d1      	b.n	800cdf0 <__hexnan+0xd4>
 800ce4c:	2004      	movs	r0, #4
 800ce4e:	b007      	add	sp, #28
 800ce50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce54 <_localeconv_r>:
 800ce54:	4800      	ldr	r0, [pc, #0]	; (800ce58 <_localeconv_r+0x4>)
 800ce56:	4770      	bx	lr
 800ce58:	20000218 	.word	0x20000218

0800ce5c <__retarget_lock_init_recursive>:
 800ce5c:	4770      	bx	lr

0800ce5e <__retarget_lock_acquire_recursive>:
 800ce5e:	4770      	bx	lr

0800ce60 <__retarget_lock_release_recursive>:
 800ce60:	4770      	bx	lr
	...

0800ce64 <_lseek_r>:
 800ce64:	b538      	push	{r3, r4, r5, lr}
 800ce66:	4d07      	ldr	r5, [pc, #28]	; (800ce84 <_lseek_r+0x20>)
 800ce68:	4604      	mov	r4, r0
 800ce6a:	4608      	mov	r0, r1
 800ce6c:	4611      	mov	r1, r2
 800ce6e:	2200      	movs	r2, #0
 800ce70:	602a      	str	r2, [r5, #0]
 800ce72:	461a      	mov	r2, r3
 800ce74:	f7f8 f874 	bl	8004f60 <_lseek>
 800ce78:	1c43      	adds	r3, r0, #1
 800ce7a:	d102      	bne.n	800ce82 <_lseek_r+0x1e>
 800ce7c:	682b      	ldr	r3, [r5, #0]
 800ce7e:	b103      	cbz	r3, 800ce82 <_lseek_r+0x1e>
 800ce80:	6023      	str	r3, [r4, #0]
 800ce82:	bd38      	pop	{r3, r4, r5, pc}
 800ce84:	20002e44 	.word	0x20002e44

0800ce88 <__swhatbuf_r>:
 800ce88:	b570      	push	{r4, r5, r6, lr}
 800ce8a:	460e      	mov	r6, r1
 800ce8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce90:	2900      	cmp	r1, #0
 800ce92:	b096      	sub	sp, #88	; 0x58
 800ce94:	4614      	mov	r4, r2
 800ce96:	461d      	mov	r5, r3
 800ce98:	da08      	bge.n	800ceac <__swhatbuf_r+0x24>
 800ce9a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	602a      	str	r2, [r5, #0]
 800cea2:	061a      	lsls	r2, r3, #24
 800cea4:	d410      	bmi.n	800cec8 <__swhatbuf_r+0x40>
 800cea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ceaa:	e00e      	b.n	800ceca <__swhatbuf_r+0x42>
 800ceac:	466a      	mov	r2, sp
 800ceae:	f001 f831 	bl	800df14 <_fstat_r>
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	dbf1      	blt.n	800ce9a <__swhatbuf_r+0x12>
 800ceb6:	9a01      	ldr	r2, [sp, #4]
 800ceb8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cebc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cec0:	425a      	negs	r2, r3
 800cec2:	415a      	adcs	r2, r3
 800cec4:	602a      	str	r2, [r5, #0]
 800cec6:	e7ee      	b.n	800cea6 <__swhatbuf_r+0x1e>
 800cec8:	2340      	movs	r3, #64	; 0x40
 800ceca:	2000      	movs	r0, #0
 800cecc:	6023      	str	r3, [r4, #0]
 800cece:	b016      	add	sp, #88	; 0x58
 800ced0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ced4 <__smakebuf_r>:
 800ced4:	898b      	ldrh	r3, [r1, #12]
 800ced6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ced8:	079d      	lsls	r5, r3, #30
 800ceda:	4606      	mov	r6, r0
 800cedc:	460c      	mov	r4, r1
 800cede:	d507      	bpl.n	800cef0 <__smakebuf_r+0x1c>
 800cee0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cee4:	6023      	str	r3, [r4, #0]
 800cee6:	6123      	str	r3, [r4, #16]
 800cee8:	2301      	movs	r3, #1
 800ceea:	6163      	str	r3, [r4, #20]
 800ceec:	b002      	add	sp, #8
 800ceee:	bd70      	pop	{r4, r5, r6, pc}
 800cef0:	ab01      	add	r3, sp, #4
 800cef2:	466a      	mov	r2, sp
 800cef4:	f7ff ffc8 	bl	800ce88 <__swhatbuf_r>
 800cef8:	9900      	ldr	r1, [sp, #0]
 800cefa:	4605      	mov	r5, r0
 800cefc:	4630      	mov	r0, r6
 800cefe:	f7fc fde3 	bl	8009ac8 <_malloc_r>
 800cf02:	b948      	cbnz	r0, 800cf18 <__smakebuf_r+0x44>
 800cf04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf08:	059a      	lsls	r2, r3, #22
 800cf0a:	d4ef      	bmi.n	800ceec <__smakebuf_r+0x18>
 800cf0c:	f023 0303 	bic.w	r3, r3, #3
 800cf10:	f043 0302 	orr.w	r3, r3, #2
 800cf14:	81a3      	strh	r3, [r4, #12]
 800cf16:	e7e3      	b.n	800cee0 <__smakebuf_r+0xc>
 800cf18:	4b0d      	ldr	r3, [pc, #52]	; (800cf50 <__smakebuf_r+0x7c>)
 800cf1a:	62b3      	str	r3, [r6, #40]	; 0x28
 800cf1c:	89a3      	ldrh	r3, [r4, #12]
 800cf1e:	6020      	str	r0, [r4, #0]
 800cf20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf24:	81a3      	strh	r3, [r4, #12]
 800cf26:	9b00      	ldr	r3, [sp, #0]
 800cf28:	6163      	str	r3, [r4, #20]
 800cf2a:	9b01      	ldr	r3, [sp, #4]
 800cf2c:	6120      	str	r0, [r4, #16]
 800cf2e:	b15b      	cbz	r3, 800cf48 <__smakebuf_r+0x74>
 800cf30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf34:	4630      	mov	r0, r6
 800cf36:	f000 ffff 	bl	800df38 <_isatty_r>
 800cf3a:	b128      	cbz	r0, 800cf48 <__smakebuf_r+0x74>
 800cf3c:	89a3      	ldrh	r3, [r4, #12]
 800cf3e:	f023 0303 	bic.w	r3, r3, #3
 800cf42:	f043 0301 	orr.w	r3, r3, #1
 800cf46:	81a3      	strh	r3, [r4, #12]
 800cf48:	89a0      	ldrh	r0, [r4, #12]
 800cf4a:	4305      	orrs	r5, r0
 800cf4c:	81a5      	strh	r5, [r4, #12]
 800cf4e:	e7cd      	b.n	800ceec <__smakebuf_r+0x18>
 800cf50:	0800c5b1 	.word	0x0800c5b1

0800cf54 <__ascii_mbtowc>:
 800cf54:	b082      	sub	sp, #8
 800cf56:	b901      	cbnz	r1, 800cf5a <__ascii_mbtowc+0x6>
 800cf58:	a901      	add	r1, sp, #4
 800cf5a:	b142      	cbz	r2, 800cf6e <__ascii_mbtowc+0x1a>
 800cf5c:	b14b      	cbz	r3, 800cf72 <__ascii_mbtowc+0x1e>
 800cf5e:	7813      	ldrb	r3, [r2, #0]
 800cf60:	600b      	str	r3, [r1, #0]
 800cf62:	7812      	ldrb	r2, [r2, #0]
 800cf64:	1e10      	subs	r0, r2, #0
 800cf66:	bf18      	it	ne
 800cf68:	2001      	movne	r0, #1
 800cf6a:	b002      	add	sp, #8
 800cf6c:	4770      	bx	lr
 800cf6e:	4610      	mov	r0, r2
 800cf70:	e7fb      	b.n	800cf6a <__ascii_mbtowc+0x16>
 800cf72:	f06f 0001 	mvn.w	r0, #1
 800cf76:	e7f8      	b.n	800cf6a <__ascii_mbtowc+0x16>

0800cf78 <__malloc_lock>:
 800cf78:	4801      	ldr	r0, [pc, #4]	; (800cf80 <__malloc_lock+0x8>)
 800cf7a:	f7ff bf70 	b.w	800ce5e <__retarget_lock_acquire_recursive>
 800cf7e:	bf00      	nop
 800cf80:	20002e40 	.word	0x20002e40

0800cf84 <__malloc_unlock>:
 800cf84:	4801      	ldr	r0, [pc, #4]	; (800cf8c <__malloc_unlock+0x8>)
 800cf86:	f7ff bf6b 	b.w	800ce60 <__retarget_lock_release_recursive>
 800cf8a:	bf00      	nop
 800cf8c:	20002e40 	.word	0x20002e40

0800cf90 <_Balloc>:
 800cf90:	b570      	push	{r4, r5, r6, lr}
 800cf92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cf94:	4604      	mov	r4, r0
 800cf96:	460d      	mov	r5, r1
 800cf98:	b976      	cbnz	r6, 800cfb8 <_Balloc+0x28>
 800cf9a:	2010      	movs	r0, #16
 800cf9c:	f7fc fd0a 	bl	80099b4 <malloc>
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	6260      	str	r0, [r4, #36]	; 0x24
 800cfa4:	b920      	cbnz	r0, 800cfb0 <_Balloc+0x20>
 800cfa6:	4b18      	ldr	r3, [pc, #96]	; (800d008 <_Balloc+0x78>)
 800cfa8:	4818      	ldr	r0, [pc, #96]	; (800d00c <_Balloc+0x7c>)
 800cfaa:	2166      	movs	r1, #102	; 0x66
 800cfac:	f7fe fb70 	bl	800b690 <__assert_func>
 800cfb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cfb4:	6006      	str	r6, [r0, #0]
 800cfb6:	60c6      	str	r6, [r0, #12]
 800cfb8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cfba:	68f3      	ldr	r3, [r6, #12]
 800cfbc:	b183      	cbz	r3, 800cfe0 <_Balloc+0x50>
 800cfbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfc0:	68db      	ldr	r3, [r3, #12]
 800cfc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cfc6:	b9b8      	cbnz	r0, 800cff8 <_Balloc+0x68>
 800cfc8:	2101      	movs	r1, #1
 800cfca:	fa01 f605 	lsl.w	r6, r1, r5
 800cfce:	1d72      	adds	r2, r6, #5
 800cfd0:	0092      	lsls	r2, r2, #2
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	f000 fc9d 	bl	800d912 <_calloc_r>
 800cfd8:	b160      	cbz	r0, 800cff4 <_Balloc+0x64>
 800cfda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cfde:	e00e      	b.n	800cffe <_Balloc+0x6e>
 800cfe0:	2221      	movs	r2, #33	; 0x21
 800cfe2:	2104      	movs	r1, #4
 800cfe4:	4620      	mov	r0, r4
 800cfe6:	f000 fc94 	bl	800d912 <_calloc_r>
 800cfea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfec:	60f0      	str	r0, [r6, #12]
 800cfee:	68db      	ldr	r3, [r3, #12]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d1e4      	bne.n	800cfbe <_Balloc+0x2e>
 800cff4:	2000      	movs	r0, #0
 800cff6:	bd70      	pop	{r4, r5, r6, pc}
 800cff8:	6802      	ldr	r2, [r0, #0]
 800cffa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cffe:	2300      	movs	r3, #0
 800d000:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d004:	e7f7      	b.n	800cff6 <_Balloc+0x66>
 800d006:	bf00      	nop
 800d008:	0800f539 	.word	0x0800f539
 800d00c:	0800f698 	.word	0x0800f698

0800d010 <_Bfree>:
 800d010:	b570      	push	{r4, r5, r6, lr}
 800d012:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d014:	4605      	mov	r5, r0
 800d016:	460c      	mov	r4, r1
 800d018:	b976      	cbnz	r6, 800d038 <_Bfree+0x28>
 800d01a:	2010      	movs	r0, #16
 800d01c:	f7fc fcca 	bl	80099b4 <malloc>
 800d020:	4602      	mov	r2, r0
 800d022:	6268      	str	r0, [r5, #36]	; 0x24
 800d024:	b920      	cbnz	r0, 800d030 <_Bfree+0x20>
 800d026:	4b09      	ldr	r3, [pc, #36]	; (800d04c <_Bfree+0x3c>)
 800d028:	4809      	ldr	r0, [pc, #36]	; (800d050 <_Bfree+0x40>)
 800d02a:	218a      	movs	r1, #138	; 0x8a
 800d02c:	f7fe fb30 	bl	800b690 <__assert_func>
 800d030:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d034:	6006      	str	r6, [r0, #0]
 800d036:	60c6      	str	r6, [r0, #12]
 800d038:	b13c      	cbz	r4, 800d04a <_Bfree+0x3a>
 800d03a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d03c:	6862      	ldr	r2, [r4, #4]
 800d03e:	68db      	ldr	r3, [r3, #12]
 800d040:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d044:	6021      	str	r1, [r4, #0]
 800d046:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d04a:	bd70      	pop	{r4, r5, r6, pc}
 800d04c:	0800f539 	.word	0x0800f539
 800d050:	0800f698 	.word	0x0800f698

0800d054 <__multadd>:
 800d054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d058:	690d      	ldr	r5, [r1, #16]
 800d05a:	4607      	mov	r7, r0
 800d05c:	460c      	mov	r4, r1
 800d05e:	461e      	mov	r6, r3
 800d060:	f101 0c14 	add.w	ip, r1, #20
 800d064:	2000      	movs	r0, #0
 800d066:	f8dc 3000 	ldr.w	r3, [ip]
 800d06a:	b299      	uxth	r1, r3
 800d06c:	fb02 6101 	mla	r1, r2, r1, r6
 800d070:	0c1e      	lsrs	r6, r3, #16
 800d072:	0c0b      	lsrs	r3, r1, #16
 800d074:	fb02 3306 	mla	r3, r2, r6, r3
 800d078:	b289      	uxth	r1, r1
 800d07a:	3001      	adds	r0, #1
 800d07c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d080:	4285      	cmp	r5, r0
 800d082:	f84c 1b04 	str.w	r1, [ip], #4
 800d086:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d08a:	dcec      	bgt.n	800d066 <__multadd+0x12>
 800d08c:	b30e      	cbz	r6, 800d0d2 <__multadd+0x7e>
 800d08e:	68a3      	ldr	r3, [r4, #8]
 800d090:	42ab      	cmp	r3, r5
 800d092:	dc19      	bgt.n	800d0c8 <__multadd+0x74>
 800d094:	6861      	ldr	r1, [r4, #4]
 800d096:	4638      	mov	r0, r7
 800d098:	3101      	adds	r1, #1
 800d09a:	f7ff ff79 	bl	800cf90 <_Balloc>
 800d09e:	4680      	mov	r8, r0
 800d0a0:	b928      	cbnz	r0, 800d0ae <__multadd+0x5a>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	4b0c      	ldr	r3, [pc, #48]	; (800d0d8 <__multadd+0x84>)
 800d0a6:	480d      	ldr	r0, [pc, #52]	; (800d0dc <__multadd+0x88>)
 800d0a8:	21b5      	movs	r1, #181	; 0xb5
 800d0aa:	f7fe faf1 	bl	800b690 <__assert_func>
 800d0ae:	6922      	ldr	r2, [r4, #16]
 800d0b0:	3202      	adds	r2, #2
 800d0b2:	f104 010c 	add.w	r1, r4, #12
 800d0b6:	0092      	lsls	r2, r2, #2
 800d0b8:	300c      	adds	r0, #12
 800d0ba:	f7fc fc83 	bl	80099c4 <memcpy>
 800d0be:	4621      	mov	r1, r4
 800d0c0:	4638      	mov	r0, r7
 800d0c2:	f7ff ffa5 	bl	800d010 <_Bfree>
 800d0c6:	4644      	mov	r4, r8
 800d0c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d0cc:	3501      	adds	r5, #1
 800d0ce:	615e      	str	r6, [r3, #20]
 800d0d0:	6125      	str	r5, [r4, #16]
 800d0d2:	4620      	mov	r0, r4
 800d0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0d8:	0800f5ab 	.word	0x0800f5ab
 800d0dc:	0800f698 	.word	0x0800f698

0800d0e0 <__s2b>:
 800d0e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0e4:	460c      	mov	r4, r1
 800d0e6:	4615      	mov	r5, r2
 800d0e8:	461f      	mov	r7, r3
 800d0ea:	2209      	movs	r2, #9
 800d0ec:	3308      	adds	r3, #8
 800d0ee:	4606      	mov	r6, r0
 800d0f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0f4:	2100      	movs	r1, #0
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	429a      	cmp	r2, r3
 800d0fa:	db09      	blt.n	800d110 <__s2b+0x30>
 800d0fc:	4630      	mov	r0, r6
 800d0fe:	f7ff ff47 	bl	800cf90 <_Balloc>
 800d102:	b940      	cbnz	r0, 800d116 <__s2b+0x36>
 800d104:	4602      	mov	r2, r0
 800d106:	4b19      	ldr	r3, [pc, #100]	; (800d16c <__s2b+0x8c>)
 800d108:	4819      	ldr	r0, [pc, #100]	; (800d170 <__s2b+0x90>)
 800d10a:	21ce      	movs	r1, #206	; 0xce
 800d10c:	f7fe fac0 	bl	800b690 <__assert_func>
 800d110:	0052      	lsls	r2, r2, #1
 800d112:	3101      	adds	r1, #1
 800d114:	e7f0      	b.n	800d0f8 <__s2b+0x18>
 800d116:	9b08      	ldr	r3, [sp, #32]
 800d118:	6143      	str	r3, [r0, #20]
 800d11a:	2d09      	cmp	r5, #9
 800d11c:	f04f 0301 	mov.w	r3, #1
 800d120:	6103      	str	r3, [r0, #16]
 800d122:	dd16      	ble.n	800d152 <__s2b+0x72>
 800d124:	f104 0909 	add.w	r9, r4, #9
 800d128:	46c8      	mov	r8, r9
 800d12a:	442c      	add	r4, r5
 800d12c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d130:	4601      	mov	r1, r0
 800d132:	3b30      	subs	r3, #48	; 0x30
 800d134:	220a      	movs	r2, #10
 800d136:	4630      	mov	r0, r6
 800d138:	f7ff ff8c 	bl	800d054 <__multadd>
 800d13c:	45a0      	cmp	r8, r4
 800d13e:	d1f5      	bne.n	800d12c <__s2b+0x4c>
 800d140:	f1a5 0408 	sub.w	r4, r5, #8
 800d144:	444c      	add	r4, r9
 800d146:	1b2d      	subs	r5, r5, r4
 800d148:	1963      	adds	r3, r4, r5
 800d14a:	42bb      	cmp	r3, r7
 800d14c:	db04      	blt.n	800d158 <__s2b+0x78>
 800d14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d152:	340a      	adds	r4, #10
 800d154:	2509      	movs	r5, #9
 800d156:	e7f6      	b.n	800d146 <__s2b+0x66>
 800d158:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d15c:	4601      	mov	r1, r0
 800d15e:	3b30      	subs	r3, #48	; 0x30
 800d160:	220a      	movs	r2, #10
 800d162:	4630      	mov	r0, r6
 800d164:	f7ff ff76 	bl	800d054 <__multadd>
 800d168:	e7ee      	b.n	800d148 <__s2b+0x68>
 800d16a:	bf00      	nop
 800d16c:	0800f5ab 	.word	0x0800f5ab
 800d170:	0800f698 	.word	0x0800f698

0800d174 <__hi0bits>:
 800d174:	0c03      	lsrs	r3, r0, #16
 800d176:	041b      	lsls	r3, r3, #16
 800d178:	b9d3      	cbnz	r3, 800d1b0 <__hi0bits+0x3c>
 800d17a:	0400      	lsls	r0, r0, #16
 800d17c:	2310      	movs	r3, #16
 800d17e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d182:	bf04      	itt	eq
 800d184:	0200      	lsleq	r0, r0, #8
 800d186:	3308      	addeq	r3, #8
 800d188:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d18c:	bf04      	itt	eq
 800d18e:	0100      	lsleq	r0, r0, #4
 800d190:	3304      	addeq	r3, #4
 800d192:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d196:	bf04      	itt	eq
 800d198:	0080      	lsleq	r0, r0, #2
 800d19a:	3302      	addeq	r3, #2
 800d19c:	2800      	cmp	r0, #0
 800d19e:	db05      	blt.n	800d1ac <__hi0bits+0x38>
 800d1a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d1a4:	f103 0301 	add.w	r3, r3, #1
 800d1a8:	bf08      	it	eq
 800d1aa:	2320      	moveq	r3, #32
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	4770      	bx	lr
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	e7e4      	b.n	800d17e <__hi0bits+0xa>

0800d1b4 <__lo0bits>:
 800d1b4:	6803      	ldr	r3, [r0, #0]
 800d1b6:	f013 0207 	ands.w	r2, r3, #7
 800d1ba:	4601      	mov	r1, r0
 800d1bc:	d00b      	beq.n	800d1d6 <__lo0bits+0x22>
 800d1be:	07da      	lsls	r2, r3, #31
 800d1c0:	d423      	bmi.n	800d20a <__lo0bits+0x56>
 800d1c2:	0798      	lsls	r0, r3, #30
 800d1c4:	bf49      	itett	mi
 800d1c6:	085b      	lsrmi	r3, r3, #1
 800d1c8:	089b      	lsrpl	r3, r3, #2
 800d1ca:	2001      	movmi	r0, #1
 800d1cc:	600b      	strmi	r3, [r1, #0]
 800d1ce:	bf5c      	itt	pl
 800d1d0:	600b      	strpl	r3, [r1, #0]
 800d1d2:	2002      	movpl	r0, #2
 800d1d4:	4770      	bx	lr
 800d1d6:	b298      	uxth	r0, r3
 800d1d8:	b9a8      	cbnz	r0, 800d206 <__lo0bits+0x52>
 800d1da:	0c1b      	lsrs	r3, r3, #16
 800d1dc:	2010      	movs	r0, #16
 800d1de:	b2da      	uxtb	r2, r3
 800d1e0:	b90a      	cbnz	r2, 800d1e6 <__lo0bits+0x32>
 800d1e2:	3008      	adds	r0, #8
 800d1e4:	0a1b      	lsrs	r3, r3, #8
 800d1e6:	071a      	lsls	r2, r3, #28
 800d1e8:	bf04      	itt	eq
 800d1ea:	091b      	lsreq	r3, r3, #4
 800d1ec:	3004      	addeq	r0, #4
 800d1ee:	079a      	lsls	r2, r3, #30
 800d1f0:	bf04      	itt	eq
 800d1f2:	089b      	lsreq	r3, r3, #2
 800d1f4:	3002      	addeq	r0, #2
 800d1f6:	07da      	lsls	r2, r3, #31
 800d1f8:	d403      	bmi.n	800d202 <__lo0bits+0x4e>
 800d1fa:	085b      	lsrs	r3, r3, #1
 800d1fc:	f100 0001 	add.w	r0, r0, #1
 800d200:	d005      	beq.n	800d20e <__lo0bits+0x5a>
 800d202:	600b      	str	r3, [r1, #0]
 800d204:	4770      	bx	lr
 800d206:	4610      	mov	r0, r2
 800d208:	e7e9      	b.n	800d1de <__lo0bits+0x2a>
 800d20a:	2000      	movs	r0, #0
 800d20c:	4770      	bx	lr
 800d20e:	2020      	movs	r0, #32
 800d210:	4770      	bx	lr
	...

0800d214 <__i2b>:
 800d214:	b510      	push	{r4, lr}
 800d216:	460c      	mov	r4, r1
 800d218:	2101      	movs	r1, #1
 800d21a:	f7ff feb9 	bl	800cf90 <_Balloc>
 800d21e:	4602      	mov	r2, r0
 800d220:	b928      	cbnz	r0, 800d22e <__i2b+0x1a>
 800d222:	4b05      	ldr	r3, [pc, #20]	; (800d238 <__i2b+0x24>)
 800d224:	4805      	ldr	r0, [pc, #20]	; (800d23c <__i2b+0x28>)
 800d226:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d22a:	f7fe fa31 	bl	800b690 <__assert_func>
 800d22e:	2301      	movs	r3, #1
 800d230:	6144      	str	r4, [r0, #20]
 800d232:	6103      	str	r3, [r0, #16]
 800d234:	bd10      	pop	{r4, pc}
 800d236:	bf00      	nop
 800d238:	0800f5ab 	.word	0x0800f5ab
 800d23c:	0800f698 	.word	0x0800f698

0800d240 <__multiply>:
 800d240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d244:	4691      	mov	r9, r2
 800d246:	690a      	ldr	r2, [r1, #16]
 800d248:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	bfb8      	it	lt
 800d250:	460b      	movlt	r3, r1
 800d252:	460c      	mov	r4, r1
 800d254:	bfbc      	itt	lt
 800d256:	464c      	movlt	r4, r9
 800d258:	4699      	movlt	r9, r3
 800d25a:	6927      	ldr	r7, [r4, #16]
 800d25c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d260:	68a3      	ldr	r3, [r4, #8]
 800d262:	6861      	ldr	r1, [r4, #4]
 800d264:	eb07 060a 	add.w	r6, r7, sl
 800d268:	42b3      	cmp	r3, r6
 800d26a:	b085      	sub	sp, #20
 800d26c:	bfb8      	it	lt
 800d26e:	3101      	addlt	r1, #1
 800d270:	f7ff fe8e 	bl	800cf90 <_Balloc>
 800d274:	b930      	cbnz	r0, 800d284 <__multiply+0x44>
 800d276:	4602      	mov	r2, r0
 800d278:	4b44      	ldr	r3, [pc, #272]	; (800d38c <__multiply+0x14c>)
 800d27a:	4845      	ldr	r0, [pc, #276]	; (800d390 <__multiply+0x150>)
 800d27c:	f240 115d 	movw	r1, #349	; 0x15d
 800d280:	f7fe fa06 	bl	800b690 <__assert_func>
 800d284:	f100 0514 	add.w	r5, r0, #20
 800d288:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d28c:	462b      	mov	r3, r5
 800d28e:	2200      	movs	r2, #0
 800d290:	4543      	cmp	r3, r8
 800d292:	d321      	bcc.n	800d2d8 <__multiply+0x98>
 800d294:	f104 0314 	add.w	r3, r4, #20
 800d298:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d29c:	f109 0314 	add.w	r3, r9, #20
 800d2a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d2a4:	9202      	str	r2, [sp, #8]
 800d2a6:	1b3a      	subs	r2, r7, r4
 800d2a8:	3a15      	subs	r2, #21
 800d2aa:	f022 0203 	bic.w	r2, r2, #3
 800d2ae:	3204      	adds	r2, #4
 800d2b0:	f104 0115 	add.w	r1, r4, #21
 800d2b4:	428f      	cmp	r7, r1
 800d2b6:	bf38      	it	cc
 800d2b8:	2204      	movcc	r2, #4
 800d2ba:	9201      	str	r2, [sp, #4]
 800d2bc:	9a02      	ldr	r2, [sp, #8]
 800d2be:	9303      	str	r3, [sp, #12]
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d80c      	bhi.n	800d2de <__multiply+0x9e>
 800d2c4:	2e00      	cmp	r6, #0
 800d2c6:	dd03      	ble.n	800d2d0 <__multiply+0x90>
 800d2c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d05a      	beq.n	800d386 <__multiply+0x146>
 800d2d0:	6106      	str	r6, [r0, #16]
 800d2d2:	b005      	add	sp, #20
 800d2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2d8:	f843 2b04 	str.w	r2, [r3], #4
 800d2dc:	e7d8      	b.n	800d290 <__multiply+0x50>
 800d2de:	f8b3 a000 	ldrh.w	sl, [r3]
 800d2e2:	f1ba 0f00 	cmp.w	sl, #0
 800d2e6:	d024      	beq.n	800d332 <__multiply+0xf2>
 800d2e8:	f104 0e14 	add.w	lr, r4, #20
 800d2ec:	46a9      	mov	r9, r5
 800d2ee:	f04f 0c00 	mov.w	ip, #0
 800d2f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d2f6:	f8d9 1000 	ldr.w	r1, [r9]
 800d2fa:	fa1f fb82 	uxth.w	fp, r2
 800d2fe:	b289      	uxth	r1, r1
 800d300:	fb0a 110b 	mla	r1, sl, fp, r1
 800d304:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d308:	f8d9 2000 	ldr.w	r2, [r9]
 800d30c:	4461      	add	r1, ip
 800d30e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d312:	fb0a c20b 	mla	r2, sl, fp, ip
 800d316:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d31a:	b289      	uxth	r1, r1
 800d31c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d320:	4577      	cmp	r7, lr
 800d322:	f849 1b04 	str.w	r1, [r9], #4
 800d326:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d32a:	d8e2      	bhi.n	800d2f2 <__multiply+0xb2>
 800d32c:	9a01      	ldr	r2, [sp, #4]
 800d32e:	f845 c002 	str.w	ip, [r5, r2]
 800d332:	9a03      	ldr	r2, [sp, #12]
 800d334:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d338:	3304      	adds	r3, #4
 800d33a:	f1b9 0f00 	cmp.w	r9, #0
 800d33e:	d020      	beq.n	800d382 <__multiply+0x142>
 800d340:	6829      	ldr	r1, [r5, #0]
 800d342:	f104 0c14 	add.w	ip, r4, #20
 800d346:	46ae      	mov	lr, r5
 800d348:	f04f 0a00 	mov.w	sl, #0
 800d34c:	f8bc b000 	ldrh.w	fp, [ip]
 800d350:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d354:	fb09 220b 	mla	r2, r9, fp, r2
 800d358:	4492      	add	sl, r2
 800d35a:	b289      	uxth	r1, r1
 800d35c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d360:	f84e 1b04 	str.w	r1, [lr], #4
 800d364:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d368:	f8be 1000 	ldrh.w	r1, [lr]
 800d36c:	0c12      	lsrs	r2, r2, #16
 800d36e:	fb09 1102 	mla	r1, r9, r2, r1
 800d372:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d376:	4567      	cmp	r7, ip
 800d378:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d37c:	d8e6      	bhi.n	800d34c <__multiply+0x10c>
 800d37e:	9a01      	ldr	r2, [sp, #4]
 800d380:	50a9      	str	r1, [r5, r2]
 800d382:	3504      	adds	r5, #4
 800d384:	e79a      	b.n	800d2bc <__multiply+0x7c>
 800d386:	3e01      	subs	r6, #1
 800d388:	e79c      	b.n	800d2c4 <__multiply+0x84>
 800d38a:	bf00      	nop
 800d38c:	0800f5ab 	.word	0x0800f5ab
 800d390:	0800f698 	.word	0x0800f698

0800d394 <__pow5mult>:
 800d394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d398:	4615      	mov	r5, r2
 800d39a:	f012 0203 	ands.w	r2, r2, #3
 800d39e:	4606      	mov	r6, r0
 800d3a0:	460f      	mov	r7, r1
 800d3a2:	d007      	beq.n	800d3b4 <__pow5mult+0x20>
 800d3a4:	4c25      	ldr	r4, [pc, #148]	; (800d43c <__pow5mult+0xa8>)
 800d3a6:	3a01      	subs	r2, #1
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d3ae:	f7ff fe51 	bl	800d054 <__multadd>
 800d3b2:	4607      	mov	r7, r0
 800d3b4:	10ad      	asrs	r5, r5, #2
 800d3b6:	d03d      	beq.n	800d434 <__pow5mult+0xa0>
 800d3b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d3ba:	b97c      	cbnz	r4, 800d3dc <__pow5mult+0x48>
 800d3bc:	2010      	movs	r0, #16
 800d3be:	f7fc faf9 	bl	80099b4 <malloc>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	6270      	str	r0, [r6, #36]	; 0x24
 800d3c6:	b928      	cbnz	r0, 800d3d4 <__pow5mult+0x40>
 800d3c8:	4b1d      	ldr	r3, [pc, #116]	; (800d440 <__pow5mult+0xac>)
 800d3ca:	481e      	ldr	r0, [pc, #120]	; (800d444 <__pow5mult+0xb0>)
 800d3cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d3d0:	f7fe f95e 	bl	800b690 <__assert_func>
 800d3d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d3d8:	6004      	str	r4, [r0, #0]
 800d3da:	60c4      	str	r4, [r0, #12]
 800d3dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d3e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d3e4:	b94c      	cbnz	r4, 800d3fa <__pow5mult+0x66>
 800d3e6:	f240 2171 	movw	r1, #625	; 0x271
 800d3ea:	4630      	mov	r0, r6
 800d3ec:	f7ff ff12 	bl	800d214 <__i2b>
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d3f6:	4604      	mov	r4, r0
 800d3f8:	6003      	str	r3, [r0, #0]
 800d3fa:	f04f 0900 	mov.w	r9, #0
 800d3fe:	07eb      	lsls	r3, r5, #31
 800d400:	d50a      	bpl.n	800d418 <__pow5mult+0x84>
 800d402:	4639      	mov	r1, r7
 800d404:	4622      	mov	r2, r4
 800d406:	4630      	mov	r0, r6
 800d408:	f7ff ff1a 	bl	800d240 <__multiply>
 800d40c:	4639      	mov	r1, r7
 800d40e:	4680      	mov	r8, r0
 800d410:	4630      	mov	r0, r6
 800d412:	f7ff fdfd 	bl	800d010 <_Bfree>
 800d416:	4647      	mov	r7, r8
 800d418:	106d      	asrs	r5, r5, #1
 800d41a:	d00b      	beq.n	800d434 <__pow5mult+0xa0>
 800d41c:	6820      	ldr	r0, [r4, #0]
 800d41e:	b938      	cbnz	r0, 800d430 <__pow5mult+0x9c>
 800d420:	4622      	mov	r2, r4
 800d422:	4621      	mov	r1, r4
 800d424:	4630      	mov	r0, r6
 800d426:	f7ff ff0b 	bl	800d240 <__multiply>
 800d42a:	6020      	str	r0, [r4, #0]
 800d42c:	f8c0 9000 	str.w	r9, [r0]
 800d430:	4604      	mov	r4, r0
 800d432:	e7e4      	b.n	800d3fe <__pow5mult+0x6a>
 800d434:	4638      	mov	r0, r7
 800d436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d43a:	bf00      	nop
 800d43c:	0800f7e8 	.word	0x0800f7e8
 800d440:	0800f539 	.word	0x0800f539
 800d444:	0800f698 	.word	0x0800f698

0800d448 <__lshift>:
 800d448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d44c:	460c      	mov	r4, r1
 800d44e:	6849      	ldr	r1, [r1, #4]
 800d450:	6923      	ldr	r3, [r4, #16]
 800d452:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d456:	68a3      	ldr	r3, [r4, #8]
 800d458:	4607      	mov	r7, r0
 800d45a:	4691      	mov	r9, r2
 800d45c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d460:	f108 0601 	add.w	r6, r8, #1
 800d464:	42b3      	cmp	r3, r6
 800d466:	db0b      	blt.n	800d480 <__lshift+0x38>
 800d468:	4638      	mov	r0, r7
 800d46a:	f7ff fd91 	bl	800cf90 <_Balloc>
 800d46e:	4605      	mov	r5, r0
 800d470:	b948      	cbnz	r0, 800d486 <__lshift+0x3e>
 800d472:	4602      	mov	r2, r0
 800d474:	4b2a      	ldr	r3, [pc, #168]	; (800d520 <__lshift+0xd8>)
 800d476:	482b      	ldr	r0, [pc, #172]	; (800d524 <__lshift+0xdc>)
 800d478:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d47c:	f7fe f908 	bl	800b690 <__assert_func>
 800d480:	3101      	adds	r1, #1
 800d482:	005b      	lsls	r3, r3, #1
 800d484:	e7ee      	b.n	800d464 <__lshift+0x1c>
 800d486:	2300      	movs	r3, #0
 800d488:	f100 0114 	add.w	r1, r0, #20
 800d48c:	f100 0210 	add.w	r2, r0, #16
 800d490:	4618      	mov	r0, r3
 800d492:	4553      	cmp	r3, sl
 800d494:	db37      	blt.n	800d506 <__lshift+0xbe>
 800d496:	6920      	ldr	r0, [r4, #16]
 800d498:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d49c:	f104 0314 	add.w	r3, r4, #20
 800d4a0:	f019 091f 	ands.w	r9, r9, #31
 800d4a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d4a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d4ac:	d02f      	beq.n	800d50e <__lshift+0xc6>
 800d4ae:	f1c9 0e20 	rsb	lr, r9, #32
 800d4b2:	468a      	mov	sl, r1
 800d4b4:	f04f 0c00 	mov.w	ip, #0
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	fa02 f209 	lsl.w	r2, r2, r9
 800d4be:	ea42 020c 	orr.w	r2, r2, ip
 800d4c2:	f84a 2b04 	str.w	r2, [sl], #4
 800d4c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4ca:	4298      	cmp	r0, r3
 800d4cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d4d0:	d8f2      	bhi.n	800d4b8 <__lshift+0x70>
 800d4d2:	1b03      	subs	r3, r0, r4
 800d4d4:	3b15      	subs	r3, #21
 800d4d6:	f023 0303 	bic.w	r3, r3, #3
 800d4da:	3304      	adds	r3, #4
 800d4dc:	f104 0215 	add.w	r2, r4, #21
 800d4e0:	4290      	cmp	r0, r2
 800d4e2:	bf38      	it	cc
 800d4e4:	2304      	movcc	r3, #4
 800d4e6:	f841 c003 	str.w	ip, [r1, r3]
 800d4ea:	f1bc 0f00 	cmp.w	ip, #0
 800d4ee:	d001      	beq.n	800d4f4 <__lshift+0xac>
 800d4f0:	f108 0602 	add.w	r6, r8, #2
 800d4f4:	3e01      	subs	r6, #1
 800d4f6:	4638      	mov	r0, r7
 800d4f8:	612e      	str	r6, [r5, #16]
 800d4fa:	4621      	mov	r1, r4
 800d4fc:	f7ff fd88 	bl	800d010 <_Bfree>
 800d500:	4628      	mov	r0, r5
 800d502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d506:	f842 0f04 	str.w	r0, [r2, #4]!
 800d50a:	3301      	adds	r3, #1
 800d50c:	e7c1      	b.n	800d492 <__lshift+0x4a>
 800d50e:	3904      	subs	r1, #4
 800d510:	f853 2b04 	ldr.w	r2, [r3], #4
 800d514:	f841 2f04 	str.w	r2, [r1, #4]!
 800d518:	4298      	cmp	r0, r3
 800d51a:	d8f9      	bhi.n	800d510 <__lshift+0xc8>
 800d51c:	e7ea      	b.n	800d4f4 <__lshift+0xac>
 800d51e:	bf00      	nop
 800d520:	0800f5ab 	.word	0x0800f5ab
 800d524:	0800f698 	.word	0x0800f698

0800d528 <__mcmp>:
 800d528:	b530      	push	{r4, r5, lr}
 800d52a:	6902      	ldr	r2, [r0, #16]
 800d52c:	690c      	ldr	r4, [r1, #16]
 800d52e:	1b12      	subs	r2, r2, r4
 800d530:	d10e      	bne.n	800d550 <__mcmp+0x28>
 800d532:	f100 0314 	add.w	r3, r0, #20
 800d536:	3114      	adds	r1, #20
 800d538:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d53c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d540:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d544:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d548:	42a5      	cmp	r5, r4
 800d54a:	d003      	beq.n	800d554 <__mcmp+0x2c>
 800d54c:	d305      	bcc.n	800d55a <__mcmp+0x32>
 800d54e:	2201      	movs	r2, #1
 800d550:	4610      	mov	r0, r2
 800d552:	bd30      	pop	{r4, r5, pc}
 800d554:	4283      	cmp	r3, r0
 800d556:	d3f3      	bcc.n	800d540 <__mcmp+0x18>
 800d558:	e7fa      	b.n	800d550 <__mcmp+0x28>
 800d55a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d55e:	e7f7      	b.n	800d550 <__mcmp+0x28>

0800d560 <__mdiff>:
 800d560:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d564:	460c      	mov	r4, r1
 800d566:	4606      	mov	r6, r0
 800d568:	4611      	mov	r1, r2
 800d56a:	4620      	mov	r0, r4
 800d56c:	4690      	mov	r8, r2
 800d56e:	f7ff ffdb 	bl	800d528 <__mcmp>
 800d572:	1e05      	subs	r5, r0, #0
 800d574:	d110      	bne.n	800d598 <__mdiff+0x38>
 800d576:	4629      	mov	r1, r5
 800d578:	4630      	mov	r0, r6
 800d57a:	f7ff fd09 	bl	800cf90 <_Balloc>
 800d57e:	b930      	cbnz	r0, 800d58e <__mdiff+0x2e>
 800d580:	4b3a      	ldr	r3, [pc, #232]	; (800d66c <__mdiff+0x10c>)
 800d582:	4602      	mov	r2, r0
 800d584:	f240 2132 	movw	r1, #562	; 0x232
 800d588:	4839      	ldr	r0, [pc, #228]	; (800d670 <__mdiff+0x110>)
 800d58a:	f7fe f881 	bl	800b690 <__assert_func>
 800d58e:	2301      	movs	r3, #1
 800d590:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d594:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d598:	bfa4      	itt	ge
 800d59a:	4643      	movge	r3, r8
 800d59c:	46a0      	movge	r8, r4
 800d59e:	4630      	mov	r0, r6
 800d5a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d5a4:	bfa6      	itte	ge
 800d5a6:	461c      	movge	r4, r3
 800d5a8:	2500      	movge	r5, #0
 800d5aa:	2501      	movlt	r5, #1
 800d5ac:	f7ff fcf0 	bl	800cf90 <_Balloc>
 800d5b0:	b920      	cbnz	r0, 800d5bc <__mdiff+0x5c>
 800d5b2:	4b2e      	ldr	r3, [pc, #184]	; (800d66c <__mdiff+0x10c>)
 800d5b4:	4602      	mov	r2, r0
 800d5b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d5ba:	e7e5      	b.n	800d588 <__mdiff+0x28>
 800d5bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d5c0:	6926      	ldr	r6, [r4, #16]
 800d5c2:	60c5      	str	r5, [r0, #12]
 800d5c4:	f104 0914 	add.w	r9, r4, #20
 800d5c8:	f108 0514 	add.w	r5, r8, #20
 800d5cc:	f100 0e14 	add.w	lr, r0, #20
 800d5d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d5d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d5d8:	f108 0210 	add.w	r2, r8, #16
 800d5dc:	46f2      	mov	sl, lr
 800d5de:	2100      	movs	r1, #0
 800d5e0:	f859 3b04 	ldr.w	r3, [r9], #4
 800d5e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d5e8:	fa1f f883 	uxth.w	r8, r3
 800d5ec:	fa11 f18b 	uxtah	r1, r1, fp
 800d5f0:	0c1b      	lsrs	r3, r3, #16
 800d5f2:	eba1 0808 	sub.w	r8, r1, r8
 800d5f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d5fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d5fe:	fa1f f888 	uxth.w	r8, r8
 800d602:	1419      	asrs	r1, r3, #16
 800d604:	454e      	cmp	r6, r9
 800d606:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d60a:	f84a 3b04 	str.w	r3, [sl], #4
 800d60e:	d8e7      	bhi.n	800d5e0 <__mdiff+0x80>
 800d610:	1b33      	subs	r3, r6, r4
 800d612:	3b15      	subs	r3, #21
 800d614:	f023 0303 	bic.w	r3, r3, #3
 800d618:	3304      	adds	r3, #4
 800d61a:	3415      	adds	r4, #21
 800d61c:	42a6      	cmp	r6, r4
 800d61e:	bf38      	it	cc
 800d620:	2304      	movcc	r3, #4
 800d622:	441d      	add	r5, r3
 800d624:	4473      	add	r3, lr
 800d626:	469e      	mov	lr, r3
 800d628:	462e      	mov	r6, r5
 800d62a:	4566      	cmp	r6, ip
 800d62c:	d30e      	bcc.n	800d64c <__mdiff+0xec>
 800d62e:	f10c 0203 	add.w	r2, ip, #3
 800d632:	1b52      	subs	r2, r2, r5
 800d634:	f022 0203 	bic.w	r2, r2, #3
 800d638:	3d03      	subs	r5, #3
 800d63a:	45ac      	cmp	ip, r5
 800d63c:	bf38      	it	cc
 800d63e:	2200      	movcc	r2, #0
 800d640:	441a      	add	r2, r3
 800d642:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d646:	b17b      	cbz	r3, 800d668 <__mdiff+0x108>
 800d648:	6107      	str	r7, [r0, #16]
 800d64a:	e7a3      	b.n	800d594 <__mdiff+0x34>
 800d64c:	f856 8b04 	ldr.w	r8, [r6], #4
 800d650:	fa11 f288 	uxtah	r2, r1, r8
 800d654:	1414      	asrs	r4, r2, #16
 800d656:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d65a:	b292      	uxth	r2, r2
 800d65c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d660:	f84e 2b04 	str.w	r2, [lr], #4
 800d664:	1421      	asrs	r1, r4, #16
 800d666:	e7e0      	b.n	800d62a <__mdiff+0xca>
 800d668:	3f01      	subs	r7, #1
 800d66a:	e7ea      	b.n	800d642 <__mdiff+0xe2>
 800d66c:	0800f5ab 	.word	0x0800f5ab
 800d670:	0800f698 	.word	0x0800f698

0800d674 <__ulp>:
 800d674:	b082      	sub	sp, #8
 800d676:	ed8d 0b00 	vstr	d0, [sp]
 800d67a:	9b01      	ldr	r3, [sp, #4]
 800d67c:	4912      	ldr	r1, [pc, #72]	; (800d6c8 <__ulp+0x54>)
 800d67e:	4019      	ands	r1, r3
 800d680:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d684:	2900      	cmp	r1, #0
 800d686:	dd05      	ble.n	800d694 <__ulp+0x20>
 800d688:	2200      	movs	r2, #0
 800d68a:	460b      	mov	r3, r1
 800d68c:	ec43 2b10 	vmov	d0, r2, r3
 800d690:	b002      	add	sp, #8
 800d692:	4770      	bx	lr
 800d694:	4249      	negs	r1, r1
 800d696:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d69a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d69e:	f04f 0200 	mov.w	r2, #0
 800d6a2:	f04f 0300 	mov.w	r3, #0
 800d6a6:	da04      	bge.n	800d6b2 <__ulp+0x3e>
 800d6a8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d6ac:	fa41 f300 	asr.w	r3, r1, r0
 800d6b0:	e7ec      	b.n	800d68c <__ulp+0x18>
 800d6b2:	f1a0 0114 	sub.w	r1, r0, #20
 800d6b6:	291e      	cmp	r1, #30
 800d6b8:	bfda      	itte	le
 800d6ba:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d6be:	fa20 f101 	lsrle.w	r1, r0, r1
 800d6c2:	2101      	movgt	r1, #1
 800d6c4:	460a      	mov	r2, r1
 800d6c6:	e7e1      	b.n	800d68c <__ulp+0x18>
 800d6c8:	7ff00000 	.word	0x7ff00000

0800d6cc <__b2d>:
 800d6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ce:	6905      	ldr	r5, [r0, #16]
 800d6d0:	f100 0714 	add.w	r7, r0, #20
 800d6d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d6d8:	1f2e      	subs	r6, r5, #4
 800d6da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d6de:	4620      	mov	r0, r4
 800d6e0:	f7ff fd48 	bl	800d174 <__hi0bits>
 800d6e4:	f1c0 0320 	rsb	r3, r0, #32
 800d6e8:	280a      	cmp	r0, #10
 800d6ea:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d768 <__b2d+0x9c>
 800d6ee:	600b      	str	r3, [r1, #0]
 800d6f0:	dc14      	bgt.n	800d71c <__b2d+0x50>
 800d6f2:	f1c0 0e0b 	rsb	lr, r0, #11
 800d6f6:	fa24 f10e 	lsr.w	r1, r4, lr
 800d6fa:	42b7      	cmp	r7, r6
 800d6fc:	ea41 030c 	orr.w	r3, r1, ip
 800d700:	bf34      	ite	cc
 800d702:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d706:	2100      	movcs	r1, #0
 800d708:	3015      	adds	r0, #21
 800d70a:	fa04 f000 	lsl.w	r0, r4, r0
 800d70e:	fa21 f10e 	lsr.w	r1, r1, lr
 800d712:	ea40 0201 	orr.w	r2, r0, r1
 800d716:	ec43 2b10 	vmov	d0, r2, r3
 800d71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d71c:	42b7      	cmp	r7, r6
 800d71e:	bf3a      	itte	cc
 800d720:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d724:	f1a5 0608 	subcc.w	r6, r5, #8
 800d728:	2100      	movcs	r1, #0
 800d72a:	380b      	subs	r0, #11
 800d72c:	d017      	beq.n	800d75e <__b2d+0x92>
 800d72e:	f1c0 0c20 	rsb	ip, r0, #32
 800d732:	fa04 f500 	lsl.w	r5, r4, r0
 800d736:	42be      	cmp	r6, r7
 800d738:	fa21 f40c 	lsr.w	r4, r1, ip
 800d73c:	ea45 0504 	orr.w	r5, r5, r4
 800d740:	bf8c      	ite	hi
 800d742:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d746:	2400      	movls	r4, #0
 800d748:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d74c:	fa01 f000 	lsl.w	r0, r1, r0
 800d750:	fa24 f40c 	lsr.w	r4, r4, ip
 800d754:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d758:	ea40 0204 	orr.w	r2, r0, r4
 800d75c:	e7db      	b.n	800d716 <__b2d+0x4a>
 800d75e:	ea44 030c 	orr.w	r3, r4, ip
 800d762:	460a      	mov	r2, r1
 800d764:	e7d7      	b.n	800d716 <__b2d+0x4a>
 800d766:	bf00      	nop
 800d768:	3ff00000 	.word	0x3ff00000

0800d76c <__d2b>:
 800d76c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d770:	4689      	mov	r9, r1
 800d772:	2101      	movs	r1, #1
 800d774:	ec57 6b10 	vmov	r6, r7, d0
 800d778:	4690      	mov	r8, r2
 800d77a:	f7ff fc09 	bl	800cf90 <_Balloc>
 800d77e:	4604      	mov	r4, r0
 800d780:	b930      	cbnz	r0, 800d790 <__d2b+0x24>
 800d782:	4602      	mov	r2, r0
 800d784:	4b25      	ldr	r3, [pc, #148]	; (800d81c <__d2b+0xb0>)
 800d786:	4826      	ldr	r0, [pc, #152]	; (800d820 <__d2b+0xb4>)
 800d788:	f240 310a 	movw	r1, #778	; 0x30a
 800d78c:	f7fd ff80 	bl	800b690 <__assert_func>
 800d790:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d794:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d798:	bb35      	cbnz	r5, 800d7e8 <__d2b+0x7c>
 800d79a:	2e00      	cmp	r6, #0
 800d79c:	9301      	str	r3, [sp, #4]
 800d79e:	d028      	beq.n	800d7f2 <__d2b+0x86>
 800d7a0:	4668      	mov	r0, sp
 800d7a2:	9600      	str	r6, [sp, #0]
 800d7a4:	f7ff fd06 	bl	800d1b4 <__lo0bits>
 800d7a8:	9900      	ldr	r1, [sp, #0]
 800d7aa:	b300      	cbz	r0, 800d7ee <__d2b+0x82>
 800d7ac:	9a01      	ldr	r2, [sp, #4]
 800d7ae:	f1c0 0320 	rsb	r3, r0, #32
 800d7b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d7b6:	430b      	orrs	r3, r1
 800d7b8:	40c2      	lsrs	r2, r0
 800d7ba:	6163      	str	r3, [r4, #20]
 800d7bc:	9201      	str	r2, [sp, #4]
 800d7be:	9b01      	ldr	r3, [sp, #4]
 800d7c0:	61a3      	str	r3, [r4, #24]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	bf14      	ite	ne
 800d7c6:	2202      	movne	r2, #2
 800d7c8:	2201      	moveq	r2, #1
 800d7ca:	6122      	str	r2, [r4, #16]
 800d7cc:	b1d5      	cbz	r5, 800d804 <__d2b+0x98>
 800d7ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d7d2:	4405      	add	r5, r0
 800d7d4:	f8c9 5000 	str.w	r5, [r9]
 800d7d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d7dc:	f8c8 0000 	str.w	r0, [r8]
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	b003      	add	sp, #12
 800d7e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7ec:	e7d5      	b.n	800d79a <__d2b+0x2e>
 800d7ee:	6161      	str	r1, [r4, #20]
 800d7f0:	e7e5      	b.n	800d7be <__d2b+0x52>
 800d7f2:	a801      	add	r0, sp, #4
 800d7f4:	f7ff fcde 	bl	800d1b4 <__lo0bits>
 800d7f8:	9b01      	ldr	r3, [sp, #4]
 800d7fa:	6163      	str	r3, [r4, #20]
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	6122      	str	r2, [r4, #16]
 800d800:	3020      	adds	r0, #32
 800d802:	e7e3      	b.n	800d7cc <__d2b+0x60>
 800d804:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d808:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d80c:	f8c9 0000 	str.w	r0, [r9]
 800d810:	6918      	ldr	r0, [r3, #16]
 800d812:	f7ff fcaf 	bl	800d174 <__hi0bits>
 800d816:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d81a:	e7df      	b.n	800d7dc <__d2b+0x70>
 800d81c:	0800f5ab 	.word	0x0800f5ab
 800d820:	0800f698 	.word	0x0800f698

0800d824 <__ratio>:
 800d824:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d828:	4688      	mov	r8, r1
 800d82a:	4669      	mov	r1, sp
 800d82c:	4681      	mov	r9, r0
 800d82e:	f7ff ff4d 	bl	800d6cc <__b2d>
 800d832:	a901      	add	r1, sp, #4
 800d834:	4640      	mov	r0, r8
 800d836:	ec55 4b10 	vmov	r4, r5, d0
 800d83a:	f7ff ff47 	bl	800d6cc <__b2d>
 800d83e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d842:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d846:	eba3 0c02 	sub.w	ip, r3, r2
 800d84a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d84e:	1a9b      	subs	r3, r3, r2
 800d850:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d854:	ec51 0b10 	vmov	r0, r1, d0
 800d858:	2b00      	cmp	r3, #0
 800d85a:	bfd6      	itet	le
 800d85c:	460a      	movle	r2, r1
 800d85e:	462a      	movgt	r2, r5
 800d860:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d864:	468b      	mov	fp, r1
 800d866:	462f      	mov	r7, r5
 800d868:	bfd4      	ite	le
 800d86a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d86e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d872:	4620      	mov	r0, r4
 800d874:	ee10 2a10 	vmov	r2, s0
 800d878:	465b      	mov	r3, fp
 800d87a:	4639      	mov	r1, r7
 800d87c:	f7f2 ffee 	bl	800085c <__aeabi_ddiv>
 800d880:	ec41 0b10 	vmov	d0, r0, r1
 800d884:	b003      	add	sp, #12
 800d886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d88a <__copybits>:
 800d88a:	3901      	subs	r1, #1
 800d88c:	b570      	push	{r4, r5, r6, lr}
 800d88e:	1149      	asrs	r1, r1, #5
 800d890:	6914      	ldr	r4, [r2, #16]
 800d892:	3101      	adds	r1, #1
 800d894:	f102 0314 	add.w	r3, r2, #20
 800d898:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d89c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d8a0:	1f05      	subs	r5, r0, #4
 800d8a2:	42a3      	cmp	r3, r4
 800d8a4:	d30c      	bcc.n	800d8c0 <__copybits+0x36>
 800d8a6:	1aa3      	subs	r3, r4, r2
 800d8a8:	3b11      	subs	r3, #17
 800d8aa:	f023 0303 	bic.w	r3, r3, #3
 800d8ae:	3211      	adds	r2, #17
 800d8b0:	42a2      	cmp	r2, r4
 800d8b2:	bf88      	it	hi
 800d8b4:	2300      	movhi	r3, #0
 800d8b6:	4418      	add	r0, r3
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	4288      	cmp	r0, r1
 800d8bc:	d305      	bcc.n	800d8ca <__copybits+0x40>
 800d8be:	bd70      	pop	{r4, r5, r6, pc}
 800d8c0:	f853 6b04 	ldr.w	r6, [r3], #4
 800d8c4:	f845 6f04 	str.w	r6, [r5, #4]!
 800d8c8:	e7eb      	b.n	800d8a2 <__copybits+0x18>
 800d8ca:	f840 3b04 	str.w	r3, [r0], #4
 800d8ce:	e7f4      	b.n	800d8ba <__copybits+0x30>

0800d8d0 <__any_on>:
 800d8d0:	f100 0214 	add.w	r2, r0, #20
 800d8d4:	6900      	ldr	r0, [r0, #16]
 800d8d6:	114b      	asrs	r3, r1, #5
 800d8d8:	4298      	cmp	r0, r3
 800d8da:	b510      	push	{r4, lr}
 800d8dc:	db11      	blt.n	800d902 <__any_on+0x32>
 800d8de:	dd0a      	ble.n	800d8f6 <__any_on+0x26>
 800d8e0:	f011 011f 	ands.w	r1, r1, #31
 800d8e4:	d007      	beq.n	800d8f6 <__any_on+0x26>
 800d8e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d8ea:	fa24 f001 	lsr.w	r0, r4, r1
 800d8ee:	fa00 f101 	lsl.w	r1, r0, r1
 800d8f2:	428c      	cmp	r4, r1
 800d8f4:	d10b      	bne.n	800d90e <__any_on+0x3e>
 800d8f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d8fa:	4293      	cmp	r3, r2
 800d8fc:	d803      	bhi.n	800d906 <__any_on+0x36>
 800d8fe:	2000      	movs	r0, #0
 800d900:	bd10      	pop	{r4, pc}
 800d902:	4603      	mov	r3, r0
 800d904:	e7f7      	b.n	800d8f6 <__any_on+0x26>
 800d906:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d90a:	2900      	cmp	r1, #0
 800d90c:	d0f5      	beq.n	800d8fa <__any_on+0x2a>
 800d90e:	2001      	movs	r0, #1
 800d910:	e7f6      	b.n	800d900 <__any_on+0x30>

0800d912 <_calloc_r>:
 800d912:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d914:	fba1 2402 	umull	r2, r4, r1, r2
 800d918:	b94c      	cbnz	r4, 800d92e <_calloc_r+0x1c>
 800d91a:	4611      	mov	r1, r2
 800d91c:	9201      	str	r2, [sp, #4]
 800d91e:	f7fc f8d3 	bl	8009ac8 <_malloc_r>
 800d922:	9a01      	ldr	r2, [sp, #4]
 800d924:	4605      	mov	r5, r0
 800d926:	b930      	cbnz	r0, 800d936 <_calloc_r+0x24>
 800d928:	4628      	mov	r0, r5
 800d92a:	b003      	add	sp, #12
 800d92c:	bd30      	pop	{r4, r5, pc}
 800d92e:	220c      	movs	r2, #12
 800d930:	6002      	str	r2, [r0, #0]
 800d932:	2500      	movs	r5, #0
 800d934:	e7f8      	b.n	800d928 <_calloc_r+0x16>
 800d936:	4621      	mov	r1, r4
 800d938:	f7fc f852 	bl	80099e0 <memset>
 800d93c:	e7f4      	b.n	800d928 <_calloc_r+0x16>

0800d93e <__ssputs_r>:
 800d93e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d942:	688e      	ldr	r6, [r1, #8]
 800d944:	429e      	cmp	r6, r3
 800d946:	4682      	mov	sl, r0
 800d948:	460c      	mov	r4, r1
 800d94a:	4690      	mov	r8, r2
 800d94c:	461f      	mov	r7, r3
 800d94e:	d838      	bhi.n	800d9c2 <__ssputs_r+0x84>
 800d950:	898a      	ldrh	r2, [r1, #12]
 800d952:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d956:	d032      	beq.n	800d9be <__ssputs_r+0x80>
 800d958:	6825      	ldr	r5, [r4, #0]
 800d95a:	6909      	ldr	r1, [r1, #16]
 800d95c:	eba5 0901 	sub.w	r9, r5, r1
 800d960:	6965      	ldr	r5, [r4, #20]
 800d962:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d966:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d96a:	3301      	adds	r3, #1
 800d96c:	444b      	add	r3, r9
 800d96e:	106d      	asrs	r5, r5, #1
 800d970:	429d      	cmp	r5, r3
 800d972:	bf38      	it	cc
 800d974:	461d      	movcc	r5, r3
 800d976:	0553      	lsls	r3, r2, #21
 800d978:	d531      	bpl.n	800d9de <__ssputs_r+0xa0>
 800d97a:	4629      	mov	r1, r5
 800d97c:	f7fc f8a4 	bl	8009ac8 <_malloc_r>
 800d980:	4606      	mov	r6, r0
 800d982:	b950      	cbnz	r0, 800d99a <__ssputs_r+0x5c>
 800d984:	230c      	movs	r3, #12
 800d986:	f8ca 3000 	str.w	r3, [sl]
 800d98a:	89a3      	ldrh	r3, [r4, #12]
 800d98c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d990:	81a3      	strh	r3, [r4, #12]
 800d992:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d99a:	6921      	ldr	r1, [r4, #16]
 800d99c:	464a      	mov	r2, r9
 800d99e:	f7fc f811 	bl	80099c4 <memcpy>
 800d9a2:	89a3      	ldrh	r3, [r4, #12]
 800d9a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d9a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9ac:	81a3      	strh	r3, [r4, #12]
 800d9ae:	6126      	str	r6, [r4, #16]
 800d9b0:	6165      	str	r5, [r4, #20]
 800d9b2:	444e      	add	r6, r9
 800d9b4:	eba5 0509 	sub.w	r5, r5, r9
 800d9b8:	6026      	str	r6, [r4, #0]
 800d9ba:	60a5      	str	r5, [r4, #8]
 800d9bc:	463e      	mov	r6, r7
 800d9be:	42be      	cmp	r6, r7
 800d9c0:	d900      	bls.n	800d9c4 <__ssputs_r+0x86>
 800d9c2:	463e      	mov	r6, r7
 800d9c4:	6820      	ldr	r0, [r4, #0]
 800d9c6:	4632      	mov	r2, r6
 800d9c8:	4641      	mov	r1, r8
 800d9ca:	f000 fac5 	bl	800df58 <memmove>
 800d9ce:	68a3      	ldr	r3, [r4, #8]
 800d9d0:	1b9b      	subs	r3, r3, r6
 800d9d2:	60a3      	str	r3, [r4, #8]
 800d9d4:	6823      	ldr	r3, [r4, #0]
 800d9d6:	4433      	add	r3, r6
 800d9d8:	6023      	str	r3, [r4, #0]
 800d9da:	2000      	movs	r0, #0
 800d9dc:	e7db      	b.n	800d996 <__ssputs_r+0x58>
 800d9de:	462a      	mov	r2, r5
 800d9e0:	f000 fad4 	bl	800df8c <_realloc_r>
 800d9e4:	4606      	mov	r6, r0
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	d1e1      	bne.n	800d9ae <__ssputs_r+0x70>
 800d9ea:	6921      	ldr	r1, [r4, #16]
 800d9ec:	4650      	mov	r0, sl
 800d9ee:	f7fb ffff 	bl	80099f0 <_free_r>
 800d9f2:	e7c7      	b.n	800d984 <__ssputs_r+0x46>

0800d9f4 <_svfiprintf_r>:
 800d9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9f8:	4698      	mov	r8, r3
 800d9fa:	898b      	ldrh	r3, [r1, #12]
 800d9fc:	061b      	lsls	r3, r3, #24
 800d9fe:	b09d      	sub	sp, #116	; 0x74
 800da00:	4607      	mov	r7, r0
 800da02:	460d      	mov	r5, r1
 800da04:	4614      	mov	r4, r2
 800da06:	d50e      	bpl.n	800da26 <_svfiprintf_r+0x32>
 800da08:	690b      	ldr	r3, [r1, #16]
 800da0a:	b963      	cbnz	r3, 800da26 <_svfiprintf_r+0x32>
 800da0c:	2140      	movs	r1, #64	; 0x40
 800da0e:	f7fc f85b 	bl	8009ac8 <_malloc_r>
 800da12:	6028      	str	r0, [r5, #0]
 800da14:	6128      	str	r0, [r5, #16]
 800da16:	b920      	cbnz	r0, 800da22 <_svfiprintf_r+0x2e>
 800da18:	230c      	movs	r3, #12
 800da1a:	603b      	str	r3, [r7, #0]
 800da1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da20:	e0d1      	b.n	800dbc6 <_svfiprintf_r+0x1d2>
 800da22:	2340      	movs	r3, #64	; 0x40
 800da24:	616b      	str	r3, [r5, #20]
 800da26:	2300      	movs	r3, #0
 800da28:	9309      	str	r3, [sp, #36]	; 0x24
 800da2a:	2320      	movs	r3, #32
 800da2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da30:	f8cd 800c 	str.w	r8, [sp, #12]
 800da34:	2330      	movs	r3, #48	; 0x30
 800da36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dbe0 <_svfiprintf_r+0x1ec>
 800da3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da3e:	f04f 0901 	mov.w	r9, #1
 800da42:	4623      	mov	r3, r4
 800da44:	469a      	mov	sl, r3
 800da46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da4a:	b10a      	cbz	r2, 800da50 <_svfiprintf_r+0x5c>
 800da4c:	2a25      	cmp	r2, #37	; 0x25
 800da4e:	d1f9      	bne.n	800da44 <_svfiprintf_r+0x50>
 800da50:	ebba 0b04 	subs.w	fp, sl, r4
 800da54:	d00b      	beq.n	800da6e <_svfiprintf_r+0x7a>
 800da56:	465b      	mov	r3, fp
 800da58:	4622      	mov	r2, r4
 800da5a:	4629      	mov	r1, r5
 800da5c:	4638      	mov	r0, r7
 800da5e:	f7ff ff6e 	bl	800d93e <__ssputs_r>
 800da62:	3001      	adds	r0, #1
 800da64:	f000 80aa 	beq.w	800dbbc <_svfiprintf_r+0x1c8>
 800da68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da6a:	445a      	add	r2, fp
 800da6c:	9209      	str	r2, [sp, #36]	; 0x24
 800da6e:	f89a 3000 	ldrb.w	r3, [sl]
 800da72:	2b00      	cmp	r3, #0
 800da74:	f000 80a2 	beq.w	800dbbc <_svfiprintf_r+0x1c8>
 800da78:	2300      	movs	r3, #0
 800da7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da82:	f10a 0a01 	add.w	sl, sl, #1
 800da86:	9304      	str	r3, [sp, #16]
 800da88:	9307      	str	r3, [sp, #28]
 800da8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da8e:	931a      	str	r3, [sp, #104]	; 0x68
 800da90:	4654      	mov	r4, sl
 800da92:	2205      	movs	r2, #5
 800da94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da98:	4851      	ldr	r0, [pc, #324]	; (800dbe0 <_svfiprintf_r+0x1ec>)
 800da9a:	f7f2 fba9 	bl	80001f0 <memchr>
 800da9e:	9a04      	ldr	r2, [sp, #16]
 800daa0:	b9d8      	cbnz	r0, 800dada <_svfiprintf_r+0xe6>
 800daa2:	06d0      	lsls	r0, r2, #27
 800daa4:	bf44      	itt	mi
 800daa6:	2320      	movmi	r3, #32
 800daa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800daac:	0711      	lsls	r1, r2, #28
 800daae:	bf44      	itt	mi
 800dab0:	232b      	movmi	r3, #43	; 0x2b
 800dab2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dab6:	f89a 3000 	ldrb.w	r3, [sl]
 800daba:	2b2a      	cmp	r3, #42	; 0x2a
 800dabc:	d015      	beq.n	800daea <_svfiprintf_r+0xf6>
 800dabe:	9a07      	ldr	r2, [sp, #28]
 800dac0:	4654      	mov	r4, sl
 800dac2:	2000      	movs	r0, #0
 800dac4:	f04f 0c0a 	mov.w	ip, #10
 800dac8:	4621      	mov	r1, r4
 800daca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dace:	3b30      	subs	r3, #48	; 0x30
 800dad0:	2b09      	cmp	r3, #9
 800dad2:	d94e      	bls.n	800db72 <_svfiprintf_r+0x17e>
 800dad4:	b1b0      	cbz	r0, 800db04 <_svfiprintf_r+0x110>
 800dad6:	9207      	str	r2, [sp, #28]
 800dad8:	e014      	b.n	800db04 <_svfiprintf_r+0x110>
 800dada:	eba0 0308 	sub.w	r3, r0, r8
 800dade:	fa09 f303 	lsl.w	r3, r9, r3
 800dae2:	4313      	orrs	r3, r2
 800dae4:	9304      	str	r3, [sp, #16]
 800dae6:	46a2      	mov	sl, r4
 800dae8:	e7d2      	b.n	800da90 <_svfiprintf_r+0x9c>
 800daea:	9b03      	ldr	r3, [sp, #12]
 800daec:	1d19      	adds	r1, r3, #4
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	9103      	str	r1, [sp, #12]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	bfbb      	ittet	lt
 800daf6:	425b      	neglt	r3, r3
 800daf8:	f042 0202 	orrlt.w	r2, r2, #2
 800dafc:	9307      	strge	r3, [sp, #28]
 800dafe:	9307      	strlt	r3, [sp, #28]
 800db00:	bfb8      	it	lt
 800db02:	9204      	strlt	r2, [sp, #16]
 800db04:	7823      	ldrb	r3, [r4, #0]
 800db06:	2b2e      	cmp	r3, #46	; 0x2e
 800db08:	d10c      	bne.n	800db24 <_svfiprintf_r+0x130>
 800db0a:	7863      	ldrb	r3, [r4, #1]
 800db0c:	2b2a      	cmp	r3, #42	; 0x2a
 800db0e:	d135      	bne.n	800db7c <_svfiprintf_r+0x188>
 800db10:	9b03      	ldr	r3, [sp, #12]
 800db12:	1d1a      	adds	r2, r3, #4
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	9203      	str	r2, [sp, #12]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	bfb8      	it	lt
 800db1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800db20:	3402      	adds	r4, #2
 800db22:	9305      	str	r3, [sp, #20]
 800db24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dbf0 <_svfiprintf_r+0x1fc>
 800db28:	7821      	ldrb	r1, [r4, #0]
 800db2a:	2203      	movs	r2, #3
 800db2c:	4650      	mov	r0, sl
 800db2e:	f7f2 fb5f 	bl	80001f0 <memchr>
 800db32:	b140      	cbz	r0, 800db46 <_svfiprintf_r+0x152>
 800db34:	2340      	movs	r3, #64	; 0x40
 800db36:	eba0 000a 	sub.w	r0, r0, sl
 800db3a:	fa03 f000 	lsl.w	r0, r3, r0
 800db3e:	9b04      	ldr	r3, [sp, #16]
 800db40:	4303      	orrs	r3, r0
 800db42:	3401      	adds	r4, #1
 800db44:	9304      	str	r3, [sp, #16]
 800db46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db4a:	4826      	ldr	r0, [pc, #152]	; (800dbe4 <_svfiprintf_r+0x1f0>)
 800db4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800db50:	2206      	movs	r2, #6
 800db52:	f7f2 fb4d 	bl	80001f0 <memchr>
 800db56:	2800      	cmp	r0, #0
 800db58:	d038      	beq.n	800dbcc <_svfiprintf_r+0x1d8>
 800db5a:	4b23      	ldr	r3, [pc, #140]	; (800dbe8 <_svfiprintf_r+0x1f4>)
 800db5c:	bb1b      	cbnz	r3, 800dba6 <_svfiprintf_r+0x1b2>
 800db5e:	9b03      	ldr	r3, [sp, #12]
 800db60:	3307      	adds	r3, #7
 800db62:	f023 0307 	bic.w	r3, r3, #7
 800db66:	3308      	adds	r3, #8
 800db68:	9303      	str	r3, [sp, #12]
 800db6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db6c:	4433      	add	r3, r6
 800db6e:	9309      	str	r3, [sp, #36]	; 0x24
 800db70:	e767      	b.n	800da42 <_svfiprintf_r+0x4e>
 800db72:	fb0c 3202 	mla	r2, ip, r2, r3
 800db76:	460c      	mov	r4, r1
 800db78:	2001      	movs	r0, #1
 800db7a:	e7a5      	b.n	800dac8 <_svfiprintf_r+0xd4>
 800db7c:	2300      	movs	r3, #0
 800db7e:	3401      	adds	r4, #1
 800db80:	9305      	str	r3, [sp, #20]
 800db82:	4619      	mov	r1, r3
 800db84:	f04f 0c0a 	mov.w	ip, #10
 800db88:	4620      	mov	r0, r4
 800db8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db8e:	3a30      	subs	r2, #48	; 0x30
 800db90:	2a09      	cmp	r2, #9
 800db92:	d903      	bls.n	800db9c <_svfiprintf_r+0x1a8>
 800db94:	2b00      	cmp	r3, #0
 800db96:	d0c5      	beq.n	800db24 <_svfiprintf_r+0x130>
 800db98:	9105      	str	r1, [sp, #20]
 800db9a:	e7c3      	b.n	800db24 <_svfiprintf_r+0x130>
 800db9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800dba0:	4604      	mov	r4, r0
 800dba2:	2301      	movs	r3, #1
 800dba4:	e7f0      	b.n	800db88 <_svfiprintf_r+0x194>
 800dba6:	ab03      	add	r3, sp, #12
 800dba8:	9300      	str	r3, [sp, #0]
 800dbaa:	462a      	mov	r2, r5
 800dbac:	4b0f      	ldr	r3, [pc, #60]	; (800dbec <_svfiprintf_r+0x1f8>)
 800dbae:	a904      	add	r1, sp, #16
 800dbb0:	4638      	mov	r0, r7
 800dbb2:	f7fc f89d 	bl	8009cf0 <_printf_float>
 800dbb6:	1c42      	adds	r2, r0, #1
 800dbb8:	4606      	mov	r6, r0
 800dbba:	d1d6      	bne.n	800db6a <_svfiprintf_r+0x176>
 800dbbc:	89ab      	ldrh	r3, [r5, #12]
 800dbbe:	065b      	lsls	r3, r3, #25
 800dbc0:	f53f af2c 	bmi.w	800da1c <_svfiprintf_r+0x28>
 800dbc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbc6:	b01d      	add	sp, #116	; 0x74
 800dbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbcc:	ab03      	add	r3, sp, #12
 800dbce:	9300      	str	r3, [sp, #0]
 800dbd0:	462a      	mov	r2, r5
 800dbd2:	4b06      	ldr	r3, [pc, #24]	; (800dbec <_svfiprintf_r+0x1f8>)
 800dbd4:	a904      	add	r1, sp, #16
 800dbd6:	4638      	mov	r0, r7
 800dbd8:	f7fc fb2e 	bl	800a238 <_printf_i>
 800dbdc:	e7eb      	b.n	800dbb6 <_svfiprintf_r+0x1c2>
 800dbde:	bf00      	nop
 800dbe0:	0800f7f4 	.word	0x0800f7f4
 800dbe4:	0800f7fe 	.word	0x0800f7fe
 800dbe8:	08009cf1 	.word	0x08009cf1
 800dbec:	0800d93f 	.word	0x0800d93f
 800dbf0:	0800f7fa 	.word	0x0800f7fa

0800dbf4 <__sfputc_r>:
 800dbf4:	6893      	ldr	r3, [r2, #8]
 800dbf6:	3b01      	subs	r3, #1
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	b410      	push	{r4}
 800dbfc:	6093      	str	r3, [r2, #8]
 800dbfe:	da08      	bge.n	800dc12 <__sfputc_r+0x1e>
 800dc00:	6994      	ldr	r4, [r2, #24]
 800dc02:	42a3      	cmp	r3, r4
 800dc04:	db01      	blt.n	800dc0a <__sfputc_r+0x16>
 800dc06:	290a      	cmp	r1, #10
 800dc08:	d103      	bne.n	800dc12 <__sfputc_r+0x1e>
 800dc0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc0e:	f7fd bc6d 	b.w	800b4ec <__swbuf_r>
 800dc12:	6813      	ldr	r3, [r2, #0]
 800dc14:	1c58      	adds	r0, r3, #1
 800dc16:	6010      	str	r0, [r2, #0]
 800dc18:	7019      	strb	r1, [r3, #0]
 800dc1a:	4608      	mov	r0, r1
 800dc1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc20:	4770      	bx	lr

0800dc22 <__sfputs_r>:
 800dc22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc24:	4606      	mov	r6, r0
 800dc26:	460f      	mov	r7, r1
 800dc28:	4614      	mov	r4, r2
 800dc2a:	18d5      	adds	r5, r2, r3
 800dc2c:	42ac      	cmp	r4, r5
 800dc2e:	d101      	bne.n	800dc34 <__sfputs_r+0x12>
 800dc30:	2000      	movs	r0, #0
 800dc32:	e007      	b.n	800dc44 <__sfputs_r+0x22>
 800dc34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc38:	463a      	mov	r2, r7
 800dc3a:	4630      	mov	r0, r6
 800dc3c:	f7ff ffda 	bl	800dbf4 <__sfputc_r>
 800dc40:	1c43      	adds	r3, r0, #1
 800dc42:	d1f3      	bne.n	800dc2c <__sfputs_r+0xa>
 800dc44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dc48 <_vfiprintf_r>:
 800dc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc4c:	460d      	mov	r5, r1
 800dc4e:	b09d      	sub	sp, #116	; 0x74
 800dc50:	4614      	mov	r4, r2
 800dc52:	4698      	mov	r8, r3
 800dc54:	4606      	mov	r6, r0
 800dc56:	b118      	cbz	r0, 800dc60 <_vfiprintf_r+0x18>
 800dc58:	6983      	ldr	r3, [r0, #24]
 800dc5a:	b90b      	cbnz	r3, 800dc60 <_vfiprintf_r+0x18>
 800dc5c:	f7fe fcdc 	bl	800c618 <__sinit>
 800dc60:	4b89      	ldr	r3, [pc, #548]	; (800de88 <_vfiprintf_r+0x240>)
 800dc62:	429d      	cmp	r5, r3
 800dc64:	d11b      	bne.n	800dc9e <_vfiprintf_r+0x56>
 800dc66:	6875      	ldr	r5, [r6, #4]
 800dc68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc6a:	07d9      	lsls	r1, r3, #31
 800dc6c:	d405      	bmi.n	800dc7a <_vfiprintf_r+0x32>
 800dc6e:	89ab      	ldrh	r3, [r5, #12]
 800dc70:	059a      	lsls	r2, r3, #22
 800dc72:	d402      	bmi.n	800dc7a <_vfiprintf_r+0x32>
 800dc74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc76:	f7ff f8f2 	bl	800ce5e <__retarget_lock_acquire_recursive>
 800dc7a:	89ab      	ldrh	r3, [r5, #12]
 800dc7c:	071b      	lsls	r3, r3, #28
 800dc7e:	d501      	bpl.n	800dc84 <_vfiprintf_r+0x3c>
 800dc80:	692b      	ldr	r3, [r5, #16]
 800dc82:	b9eb      	cbnz	r3, 800dcc0 <_vfiprintf_r+0x78>
 800dc84:	4629      	mov	r1, r5
 800dc86:	4630      	mov	r0, r6
 800dc88:	f7fd fc94 	bl	800b5b4 <__swsetup_r>
 800dc8c:	b1c0      	cbz	r0, 800dcc0 <_vfiprintf_r+0x78>
 800dc8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc90:	07dc      	lsls	r4, r3, #31
 800dc92:	d50e      	bpl.n	800dcb2 <_vfiprintf_r+0x6a>
 800dc94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc98:	b01d      	add	sp, #116	; 0x74
 800dc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc9e:	4b7b      	ldr	r3, [pc, #492]	; (800de8c <_vfiprintf_r+0x244>)
 800dca0:	429d      	cmp	r5, r3
 800dca2:	d101      	bne.n	800dca8 <_vfiprintf_r+0x60>
 800dca4:	68b5      	ldr	r5, [r6, #8]
 800dca6:	e7df      	b.n	800dc68 <_vfiprintf_r+0x20>
 800dca8:	4b79      	ldr	r3, [pc, #484]	; (800de90 <_vfiprintf_r+0x248>)
 800dcaa:	429d      	cmp	r5, r3
 800dcac:	bf08      	it	eq
 800dcae:	68f5      	ldreq	r5, [r6, #12]
 800dcb0:	e7da      	b.n	800dc68 <_vfiprintf_r+0x20>
 800dcb2:	89ab      	ldrh	r3, [r5, #12]
 800dcb4:	0598      	lsls	r0, r3, #22
 800dcb6:	d4ed      	bmi.n	800dc94 <_vfiprintf_r+0x4c>
 800dcb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dcba:	f7ff f8d1 	bl	800ce60 <__retarget_lock_release_recursive>
 800dcbe:	e7e9      	b.n	800dc94 <_vfiprintf_r+0x4c>
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	9309      	str	r3, [sp, #36]	; 0x24
 800dcc4:	2320      	movs	r3, #32
 800dcc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dcca:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcce:	2330      	movs	r3, #48	; 0x30
 800dcd0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800de94 <_vfiprintf_r+0x24c>
 800dcd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dcd8:	f04f 0901 	mov.w	r9, #1
 800dcdc:	4623      	mov	r3, r4
 800dcde:	469a      	mov	sl, r3
 800dce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dce4:	b10a      	cbz	r2, 800dcea <_vfiprintf_r+0xa2>
 800dce6:	2a25      	cmp	r2, #37	; 0x25
 800dce8:	d1f9      	bne.n	800dcde <_vfiprintf_r+0x96>
 800dcea:	ebba 0b04 	subs.w	fp, sl, r4
 800dcee:	d00b      	beq.n	800dd08 <_vfiprintf_r+0xc0>
 800dcf0:	465b      	mov	r3, fp
 800dcf2:	4622      	mov	r2, r4
 800dcf4:	4629      	mov	r1, r5
 800dcf6:	4630      	mov	r0, r6
 800dcf8:	f7ff ff93 	bl	800dc22 <__sfputs_r>
 800dcfc:	3001      	adds	r0, #1
 800dcfe:	f000 80aa 	beq.w	800de56 <_vfiprintf_r+0x20e>
 800dd02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd04:	445a      	add	r2, fp
 800dd06:	9209      	str	r2, [sp, #36]	; 0x24
 800dd08:	f89a 3000 	ldrb.w	r3, [sl]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	f000 80a2 	beq.w	800de56 <_vfiprintf_r+0x20e>
 800dd12:	2300      	movs	r3, #0
 800dd14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd1c:	f10a 0a01 	add.w	sl, sl, #1
 800dd20:	9304      	str	r3, [sp, #16]
 800dd22:	9307      	str	r3, [sp, #28]
 800dd24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd28:	931a      	str	r3, [sp, #104]	; 0x68
 800dd2a:	4654      	mov	r4, sl
 800dd2c:	2205      	movs	r2, #5
 800dd2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd32:	4858      	ldr	r0, [pc, #352]	; (800de94 <_vfiprintf_r+0x24c>)
 800dd34:	f7f2 fa5c 	bl	80001f0 <memchr>
 800dd38:	9a04      	ldr	r2, [sp, #16]
 800dd3a:	b9d8      	cbnz	r0, 800dd74 <_vfiprintf_r+0x12c>
 800dd3c:	06d1      	lsls	r1, r2, #27
 800dd3e:	bf44      	itt	mi
 800dd40:	2320      	movmi	r3, #32
 800dd42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd46:	0713      	lsls	r3, r2, #28
 800dd48:	bf44      	itt	mi
 800dd4a:	232b      	movmi	r3, #43	; 0x2b
 800dd4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd50:	f89a 3000 	ldrb.w	r3, [sl]
 800dd54:	2b2a      	cmp	r3, #42	; 0x2a
 800dd56:	d015      	beq.n	800dd84 <_vfiprintf_r+0x13c>
 800dd58:	9a07      	ldr	r2, [sp, #28]
 800dd5a:	4654      	mov	r4, sl
 800dd5c:	2000      	movs	r0, #0
 800dd5e:	f04f 0c0a 	mov.w	ip, #10
 800dd62:	4621      	mov	r1, r4
 800dd64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd68:	3b30      	subs	r3, #48	; 0x30
 800dd6a:	2b09      	cmp	r3, #9
 800dd6c:	d94e      	bls.n	800de0c <_vfiprintf_r+0x1c4>
 800dd6e:	b1b0      	cbz	r0, 800dd9e <_vfiprintf_r+0x156>
 800dd70:	9207      	str	r2, [sp, #28]
 800dd72:	e014      	b.n	800dd9e <_vfiprintf_r+0x156>
 800dd74:	eba0 0308 	sub.w	r3, r0, r8
 800dd78:	fa09 f303 	lsl.w	r3, r9, r3
 800dd7c:	4313      	orrs	r3, r2
 800dd7e:	9304      	str	r3, [sp, #16]
 800dd80:	46a2      	mov	sl, r4
 800dd82:	e7d2      	b.n	800dd2a <_vfiprintf_r+0xe2>
 800dd84:	9b03      	ldr	r3, [sp, #12]
 800dd86:	1d19      	adds	r1, r3, #4
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	9103      	str	r1, [sp, #12]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	bfbb      	ittet	lt
 800dd90:	425b      	neglt	r3, r3
 800dd92:	f042 0202 	orrlt.w	r2, r2, #2
 800dd96:	9307      	strge	r3, [sp, #28]
 800dd98:	9307      	strlt	r3, [sp, #28]
 800dd9a:	bfb8      	it	lt
 800dd9c:	9204      	strlt	r2, [sp, #16]
 800dd9e:	7823      	ldrb	r3, [r4, #0]
 800dda0:	2b2e      	cmp	r3, #46	; 0x2e
 800dda2:	d10c      	bne.n	800ddbe <_vfiprintf_r+0x176>
 800dda4:	7863      	ldrb	r3, [r4, #1]
 800dda6:	2b2a      	cmp	r3, #42	; 0x2a
 800dda8:	d135      	bne.n	800de16 <_vfiprintf_r+0x1ce>
 800ddaa:	9b03      	ldr	r3, [sp, #12]
 800ddac:	1d1a      	adds	r2, r3, #4
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	9203      	str	r2, [sp, #12]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	bfb8      	it	lt
 800ddb6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ddba:	3402      	adds	r4, #2
 800ddbc:	9305      	str	r3, [sp, #20]
 800ddbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dea4 <_vfiprintf_r+0x25c>
 800ddc2:	7821      	ldrb	r1, [r4, #0]
 800ddc4:	2203      	movs	r2, #3
 800ddc6:	4650      	mov	r0, sl
 800ddc8:	f7f2 fa12 	bl	80001f0 <memchr>
 800ddcc:	b140      	cbz	r0, 800dde0 <_vfiprintf_r+0x198>
 800ddce:	2340      	movs	r3, #64	; 0x40
 800ddd0:	eba0 000a 	sub.w	r0, r0, sl
 800ddd4:	fa03 f000 	lsl.w	r0, r3, r0
 800ddd8:	9b04      	ldr	r3, [sp, #16]
 800ddda:	4303      	orrs	r3, r0
 800dddc:	3401      	adds	r4, #1
 800ddde:	9304      	str	r3, [sp, #16]
 800dde0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dde4:	482c      	ldr	r0, [pc, #176]	; (800de98 <_vfiprintf_r+0x250>)
 800dde6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ddea:	2206      	movs	r2, #6
 800ddec:	f7f2 fa00 	bl	80001f0 <memchr>
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	d03f      	beq.n	800de74 <_vfiprintf_r+0x22c>
 800ddf4:	4b29      	ldr	r3, [pc, #164]	; (800de9c <_vfiprintf_r+0x254>)
 800ddf6:	bb1b      	cbnz	r3, 800de40 <_vfiprintf_r+0x1f8>
 800ddf8:	9b03      	ldr	r3, [sp, #12]
 800ddfa:	3307      	adds	r3, #7
 800ddfc:	f023 0307 	bic.w	r3, r3, #7
 800de00:	3308      	adds	r3, #8
 800de02:	9303      	str	r3, [sp, #12]
 800de04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de06:	443b      	add	r3, r7
 800de08:	9309      	str	r3, [sp, #36]	; 0x24
 800de0a:	e767      	b.n	800dcdc <_vfiprintf_r+0x94>
 800de0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800de10:	460c      	mov	r4, r1
 800de12:	2001      	movs	r0, #1
 800de14:	e7a5      	b.n	800dd62 <_vfiprintf_r+0x11a>
 800de16:	2300      	movs	r3, #0
 800de18:	3401      	adds	r4, #1
 800de1a:	9305      	str	r3, [sp, #20]
 800de1c:	4619      	mov	r1, r3
 800de1e:	f04f 0c0a 	mov.w	ip, #10
 800de22:	4620      	mov	r0, r4
 800de24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de28:	3a30      	subs	r2, #48	; 0x30
 800de2a:	2a09      	cmp	r2, #9
 800de2c:	d903      	bls.n	800de36 <_vfiprintf_r+0x1ee>
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d0c5      	beq.n	800ddbe <_vfiprintf_r+0x176>
 800de32:	9105      	str	r1, [sp, #20]
 800de34:	e7c3      	b.n	800ddbe <_vfiprintf_r+0x176>
 800de36:	fb0c 2101 	mla	r1, ip, r1, r2
 800de3a:	4604      	mov	r4, r0
 800de3c:	2301      	movs	r3, #1
 800de3e:	e7f0      	b.n	800de22 <_vfiprintf_r+0x1da>
 800de40:	ab03      	add	r3, sp, #12
 800de42:	9300      	str	r3, [sp, #0]
 800de44:	462a      	mov	r2, r5
 800de46:	4b16      	ldr	r3, [pc, #88]	; (800dea0 <_vfiprintf_r+0x258>)
 800de48:	a904      	add	r1, sp, #16
 800de4a:	4630      	mov	r0, r6
 800de4c:	f7fb ff50 	bl	8009cf0 <_printf_float>
 800de50:	4607      	mov	r7, r0
 800de52:	1c78      	adds	r0, r7, #1
 800de54:	d1d6      	bne.n	800de04 <_vfiprintf_r+0x1bc>
 800de56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de58:	07d9      	lsls	r1, r3, #31
 800de5a:	d405      	bmi.n	800de68 <_vfiprintf_r+0x220>
 800de5c:	89ab      	ldrh	r3, [r5, #12]
 800de5e:	059a      	lsls	r2, r3, #22
 800de60:	d402      	bmi.n	800de68 <_vfiprintf_r+0x220>
 800de62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de64:	f7fe fffc 	bl	800ce60 <__retarget_lock_release_recursive>
 800de68:	89ab      	ldrh	r3, [r5, #12]
 800de6a:	065b      	lsls	r3, r3, #25
 800de6c:	f53f af12 	bmi.w	800dc94 <_vfiprintf_r+0x4c>
 800de70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de72:	e711      	b.n	800dc98 <_vfiprintf_r+0x50>
 800de74:	ab03      	add	r3, sp, #12
 800de76:	9300      	str	r3, [sp, #0]
 800de78:	462a      	mov	r2, r5
 800de7a:	4b09      	ldr	r3, [pc, #36]	; (800dea0 <_vfiprintf_r+0x258>)
 800de7c:	a904      	add	r1, sp, #16
 800de7e:	4630      	mov	r0, r6
 800de80:	f7fc f9da 	bl	800a238 <_printf_i>
 800de84:	e7e4      	b.n	800de50 <_vfiprintf_r+0x208>
 800de86:	bf00      	nop
 800de88:	0800f5dc 	.word	0x0800f5dc
 800de8c:	0800f5fc 	.word	0x0800f5fc
 800de90:	0800f5bc 	.word	0x0800f5bc
 800de94:	0800f7f4 	.word	0x0800f7f4
 800de98:	0800f7fe 	.word	0x0800f7fe
 800de9c:	08009cf1 	.word	0x08009cf1
 800dea0:	0800dc23 	.word	0x0800dc23
 800dea4:	0800f7fa 	.word	0x0800f7fa

0800dea8 <_read_r>:
 800dea8:	b538      	push	{r3, r4, r5, lr}
 800deaa:	4d07      	ldr	r5, [pc, #28]	; (800dec8 <_read_r+0x20>)
 800deac:	4604      	mov	r4, r0
 800deae:	4608      	mov	r0, r1
 800deb0:	4611      	mov	r1, r2
 800deb2:	2200      	movs	r2, #0
 800deb4:	602a      	str	r2, [r5, #0]
 800deb6:	461a      	mov	r2, r3
 800deb8:	f7f6 fff2 	bl	8004ea0 <_read>
 800debc:	1c43      	adds	r3, r0, #1
 800debe:	d102      	bne.n	800dec6 <_read_r+0x1e>
 800dec0:	682b      	ldr	r3, [r5, #0]
 800dec2:	b103      	cbz	r3, 800dec6 <_read_r+0x1e>
 800dec4:	6023      	str	r3, [r4, #0]
 800dec6:	bd38      	pop	{r3, r4, r5, pc}
 800dec8:	20002e44 	.word	0x20002e44
 800decc:	00000000 	.word	0x00000000

0800ded0 <nan>:
 800ded0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ded8 <nan+0x8>
 800ded4:	4770      	bx	lr
 800ded6:	bf00      	nop
 800ded8:	00000000 	.word	0x00000000
 800dedc:	7ff80000 	.word	0x7ff80000

0800dee0 <nanf>:
 800dee0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dee8 <nanf+0x8>
 800dee4:	4770      	bx	lr
 800dee6:	bf00      	nop
 800dee8:	7fc00000 	.word	0x7fc00000

0800deec <__ascii_wctomb>:
 800deec:	b149      	cbz	r1, 800df02 <__ascii_wctomb+0x16>
 800deee:	2aff      	cmp	r2, #255	; 0xff
 800def0:	bf85      	ittet	hi
 800def2:	238a      	movhi	r3, #138	; 0x8a
 800def4:	6003      	strhi	r3, [r0, #0]
 800def6:	700a      	strbls	r2, [r1, #0]
 800def8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800defc:	bf98      	it	ls
 800defe:	2001      	movls	r0, #1
 800df00:	4770      	bx	lr
 800df02:	4608      	mov	r0, r1
 800df04:	4770      	bx	lr

0800df06 <abort>:
 800df06:	b508      	push	{r3, lr}
 800df08:	2006      	movs	r0, #6
 800df0a:	f000 f897 	bl	800e03c <raise>
 800df0e:	2001      	movs	r0, #1
 800df10:	f7f6 ffbc 	bl	8004e8c <_exit>

0800df14 <_fstat_r>:
 800df14:	b538      	push	{r3, r4, r5, lr}
 800df16:	4d07      	ldr	r5, [pc, #28]	; (800df34 <_fstat_r+0x20>)
 800df18:	2300      	movs	r3, #0
 800df1a:	4604      	mov	r4, r0
 800df1c:	4608      	mov	r0, r1
 800df1e:	4611      	mov	r1, r2
 800df20:	602b      	str	r3, [r5, #0]
 800df22:	f7f7 f802 	bl	8004f2a <_fstat>
 800df26:	1c43      	adds	r3, r0, #1
 800df28:	d102      	bne.n	800df30 <_fstat_r+0x1c>
 800df2a:	682b      	ldr	r3, [r5, #0]
 800df2c:	b103      	cbz	r3, 800df30 <_fstat_r+0x1c>
 800df2e:	6023      	str	r3, [r4, #0]
 800df30:	bd38      	pop	{r3, r4, r5, pc}
 800df32:	bf00      	nop
 800df34:	20002e44 	.word	0x20002e44

0800df38 <_isatty_r>:
 800df38:	b538      	push	{r3, r4, r5, lr}
 800df3a:	4d06      	ldr	r5, [pc, #24]	; (800df54 <_isatty_r+0x1c>)
 800df3c:	2300      	movs	r3, #0
 800df3e:	4604      	mov	r4, r0
 800df40:	4608      	mov	r0, r1
 800df42:	602b      	str	r3, [r5, #0]
 800df44:	f7f7 f801 	bl	8004f4a <_isatty>
 800df48:	1c43      	adds	r3, r0, #1
 800df4a:	d102      	bne.n	800df52 <_isatty_r+0x1a>
 800df4c:	682b      	ldr	r3, [r5, #0]
 800df4e:	b103      	cbz	r3, 800df52 <_isatty_r+0x1a>
 800df50:	6023      	str	r3, [r4, #0]
 800df52:	bd38      	pop	{r3, r4, r5, pc}
 800df54:	20002e44 	.word	0x20002e44

0800df58 <memmove>:
 800df58:	4288      	cmp	r0, r1
 800df5a:	b510      	push	{r4, lr}
 800df5c:	eb01 0402 	add.w	r4, r1, r2
 800df60:	d902      	bls.n	800df68 <memmove+0x10>
 800df62:	4284      	cmp	r4, r0
 800df64:	4623      	mov	r3, r4
 800df66:	d807      	bhi.n	800df78 <memmove+0x20>
 800df68:	1e43      	subs	r3, r0, #1
 800df6a:	42a1      	cmp	r1, r4
 800df6c:	d008      	beq.n	800df80 <memmove+0x28>
 800df6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df76:	e7f8      	b.n	800df6a <memmove+0x12>
 800df78:	4402      	add	r2, r0
 800df7a:	4601      	mov	r1, r0
 800df7c:	428a      	cmp	r2, r1
 800df7e:	d100      	bne.n	800df82 <memmove+0x2a>
 800df80:	bd10      	pop	{r4, pc}
 800df82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df8a:	e7f7      	b.n	800df7c <memmove+0x24>

0800df8c <_realloc_r>:
 800df8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df90:	4680      	mov	r8, r0
 800df92:	4614      	mov	r4, r2
 800df94:	460e      	mov	r6, r1
 800df96:	b921      	cbnz	r1, 800dfa2 <_realloc_r+0x16>
 800df98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df9c:	4611      	mov	r1, r2
 800df9e:	f7fb bd93 	b.w	8009ac8 <_malloc_r>
 800dfa2:	b92a      	cbnz	r2, 800dfb0 <_realloc_r+0x24>
 800dfa4:	f7fb fd24 	bl	80099f0 <_free_r>
 800dfa8:	4625      	mov	r5, r4
 800dfaa:	4628      	mov	r0, r5
 800dfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfb0:	f000 f860 	bl	800e074 <_malloc_usable_size_r>
 800dfb4:	4284      	cmp	r4, r0
 800dfb6:	4607      	mov	r7, r0
 800dfb8:	d802      	bhi.n	800dfc0 <_realloc_r+0x34>
 800dfba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dfbe:	d812      	bhi.n	800dfe6 <_realloc_r+0x5a>
 800dfc0:	4621      	mov	r1, r4
 800dfc2:	4640      	mov	r0, r8
 800dfc4:	f7fb fd80 	bl	8009ac8 <_malloc_r>
 800dfc8:	4605      	mov	r5, r0
 800dfca:	2800      	cmp	r0, #0
 800dfcc:	d0ed      	beq.n	800dfaa <_realloc_r+0x1e>
 800dfce:	42bc      	cmp	r4, r7
 800dfd0:	4622      	mov	r2, r4
 800dfd2:	4631      	mov	r1, r6
 800dfd4:	bf28      	it	cs
 800dfd6:	463a      	movcs	r2, r7
 800dfd8:	f7fb fcf4 	bl	80099c4 <memcpy>
 800dfdc:	4631      	mov	r1, r6
 800dfde:	4640      	mov	r0, r8
 800dfe0:	f7fb fd06 	bl	80099f0 <_free_r>
 800dfe4:	e7e1      	b.n	800dfaa <_realloc_r+0x1e>
 800dfe6:	4635      	mov	r5, r6
 800dfe8:	e7df      	b.n	800dfaa <_realloc_r+0x1e>

0800dfea <_raise_r>:
 800dfea:	291f      	cmp	r1, #31
 800dfec:	b538      	push	{r3, r4, r5, lr}
 800dfee:	4604      	mov	r4, r0
 800dff0:	460d      	mov	r5, r1
 800dff2:	d904      	bls.n	800dffe <_raise_r+0x14>
 800dff4:	2316      	movs	r3, #22
 800dff6:	6003      	str	r3, [r0, #0]
 800dff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dffc:	bd38      	pop	{r3, r4, r5, pc}
 800dffe:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e000:	b112      	cbz	r2, 800e008 <_raise_r+0x1e>
 800e002:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e006:	b94b      	cbnz	r3, 800e01c <_raise_r+0x32>
 800e008:	4620      	mov	r0, r4
 800e00a:	f000 f831 	bl	800e070 <_getpid_r>
 800e00e:	462a      	mov	r2, r5
 800e010:	4601      	mov	r1, r0
 800e012:	4620      	mov	r0, r4
 800e014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e018:	f000 b818 	b.w	800e04c <_kill_r>
 800e01c:	2b01      	cmp	r3, #1
 800e01e:	d00a      	beq.n	800e036 <_raise_r+0x4c>
 800e020:	1c59      	adds	r1, r3, #1
 800e022:	d103      	bne.n	800e02c <_raise_r+0x42>
 800e024:	2316      	movs	r3, #22
 800e026:	6003      	str	r3, [r0, #0]
 800e028:	2001      	movs	r0, #1
 800e02a:	e7e7      	b.n	800dffc <_raise_r+0x12>
 800e02c:	2400      	movs	r4, #0
 800e02e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e032:	4628      	mov	r0, r5
 800e034:	4798      	blx	r3
 800e036:	2000      	movs	r0, #0
 800e038:	e7e0      	b.n	800dffc <_raise_r+0x12>
	...

0800e03c <raise>:
 800e03c:	4b02      	ldr	r3, [pc, #8]	; (800e048 <raise+0xc>)
 800e03e:	4601      	mov	r1, r0
 800e040:	6818      	ldr	r0, [r3, #0]
 800e042:	f7ff bfd2 	b.w	800dfea <_raise_r>
 800e046:	bf00      	nop
 800e048:	200000c0 	.word	0x200000c0

0800e04c <_kill_r>:
 800e04c:	b538      	push	{r3, r4, r5, lr}
 800e04e:	4d07      	ldr	r5, [pc, #28]	; (800e06c <_kill_r+0x20>)
 800e050:	2300      	movs	r3, #0
 800e052:	4604      	mov	r4, r0
 800e054:	4608      	mov	r0, r1
 800e056:	4611      	mov	r1, r2
 800e058:	602b      	str	r3, [r5, #0]
 800e05a:	f7f6 ff07 	bl	8004e6c <_kill>
 800e05e:	1c43      	adds	r3, r0, #1
 800e060:	d102      	bne.n	800e068 <_kill_r+0x1c>
 800e062:	682b      	ldr	r3, [r5, #0]
 800e064:	b103      	cbz	r3, 800e068 <_kill_r+0x1c>
 800e066:	6023      	str	r3, [r4, #0]
 800e068:	bd38      	pop	{r3, r4, r5, pc}
 800e06a:	bf00      	nop
 800e06c:	20002e44 	.word	0x20002e44

0800e070 <_getpid_r>:
 800e070:	f7f6 bef4 	b.w	8004e5c <_getpid>

0800e074 <_malloc_usable_size_r>:
 800e074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e078:	1f18      	subs	r0, r3, #4
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	bfbc      	itt	lt
 800e07e:	580b      	ldrlt	r3, [r1, r0]
 800e080:	18c0      	addlt	r0, r0, r3
 800e082:	4770      	bx	lr

0800e084 <_init>:
 800e084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e086:	bf00      	nop
 800e088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e08a:	bc08      	pop	{r3}
 800e08c:	469e      	mov	lr, r3
 800e08e:	4770      	bx	lr

0800e090 <_fini>:
 800e090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e092:	bf00      	nop
 800e094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e096:	bc08      	pop	{r3}
 800e098:	469e      	mov	lr, r3
 800e09a:	4770      	bx	lr
